[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/19038\">#19038</a> (for <a class=\"stream-topic\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Derivative.20commutes.20with.20conjugation\">#Is there code for X? &gt; Derivative commutes with conjugation</a>), I need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/starL\">docs#starL</a> as a <em>linear</em> equivalence (in the presense of <code>has_trivial_star R</code>), not as a semi-linear equivalence. Do we have any existing machinery to do this conversion? Perhaps a semi-linear version of <code>restrict_scalars</code>?</p>",
        "id": 359552581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477082
    },
    {
        "content": "<p>Currently I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">starL'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_trivial_star</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_star</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">A</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">starL</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"bp\">⋆</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n  <span class=\"o\">({</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">star_ring_end_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_id</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous_id</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"n\">add_equiv.refl</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"bp\">⋆</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but that seems ugly</p>",
        "id": 359552797,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477160
    },
    {
        "content": "<p>Can you explain what <code>has_trivial_star</code> is and why you aren't using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>?</p>",
        "id": 359553156,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477284
    },
    {
        "content": "<p><code>has_trivial_star</code> says <code>star x = x</code> for all <code>x</code>. Using it instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> means that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> is covered too.</p>",
        "id": 359553365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477372
    },
    {
        "content": "<p>Hmm, but why do you need a star at all?</p>",
        "id": 359553404,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477393
    },
    {
        "content": "<p>Because we don't have a typeclass that says <code>star (c • x) = c • star x</code></p>",
        "id": 359553459,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477423
    },
    {
        "content": "<p>We only have one that says <code>star (c • x) = star c • star x</code> (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_module\">docs#star_module</a>)</p>",
        "id": 359553483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477439
    },
    {
        "content": "<p>I think I don't understand why you're not just working with a general division ring?  What's the setting?</p>",
        "id": 359553607,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477484
    },
    {
        "content": "<p>do you mean for <code>R</code> or <code>A</code>?</p>",
        "id": 359553645,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477499
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, I guess, the thing you are describing as a \"ring with trivial star\"</p>",
        "id": 359553731,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477542
    },
    {
        "content": "<p>So in practice yes,<code>R</code> is a <code>nontrivially_normed_field</code> for everything that comes later in the PR</p>",
        "id": 359553819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477577
    },
    {
        "content": "<p>But I still need the non-semilinear linear map in order to state the fderiv results</p>",
        "id": 359553859,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Star-semilinear.20maps.20are.20semilinear.20when.20star.20is.20trivial/near/359553819\">said</a>:</p>\n<blockquote>\n<p>So in practice yes,<code>R</code> is a <code>nontrivially_normed_field</code> for everything that comes later in the PR</p>\n</blockquote>\n<p>So not the quaternions.</p>",
        "id": 359553876,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477610
    },
    {
        "content": "<p>No, but <code>A</code> can be the quaternions</p>",
        "id": 359553902,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477622
    },
    {
        "content": "<p>(and indeed, that's one of the motivations for <a href=\"https://github.com/leanprover-community/mathlib/pull/19038\">#19038</a>)</p>",
        "id": 359553947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477647
    },
    {
        "content": "<p>So to answer your original question again; using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> would be sufficient for what I'm actually doing, but I would still need <code>starL'</code> in some form</p>",
        "id": 359554095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477704
    },
    {
        "content": "<p>I think I am missing some context here, I just don't understand why you are considering this \"has trivial star\" typeclass at all enough to need its derivative.</p>",
        "id": 359554108,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477712
    },
    {
        "content": "<p>The result I want to state is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">has_fderiv_at.star</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(((</span><span class=\"n\">starL'</span> <span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">≃</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">∘</span><span class=\"n\">L</span> <span class=\"n\">f'</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.star</span>\n</code></pre></div>",
        "id": 359554165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477746
    },
    {
        "content": "<p>For what typeclasses?</p>",
        "id": 359554203,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477770
    },
    {
        "content": "<p>(note this is in the PR, if that helps)</p>",
        "id": 359554234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477782
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nontrivially_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_trivial_star</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_add_comm_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_add_monoid</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_continuous_star</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359554271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477800
    },
    {
        "content": "<p>OK, it's just not clear to me that this is a useful generalization.  Why don't you just take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">k</span></span></span></span> to be a commutative ring?  Or even to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> itself?</p>",
        "id": 359554416,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684477850
    },
    {
        "content": "<p>Because if you try it, you'll need <code>star</code> as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-linear map, and we don't have a typeclass that lets us do that; <a href=\"https://leanprover-community.github.io/mathlib_docs/find/star_smul\">docs#star_smul</a> doesn't exist</p>",
        "id": 359554480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684477883
    },
    {
        "content": "<p>(I agree that the generalization to arbitrary <code>𝕜</code> for <code>has_fderiv_at.star</code> is pretty useless and <code>ℝ</code> would suffice for all the cases I can think of; but I think it's orthogonal to my question)</p>",
        "id": 359555115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684478143
    },
    {
        "content": "<p>So your situation is that you want to uniformly consider <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">H</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{H}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">H</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-modules, and have a generic way of referring to the conjugation as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>-linear map?</p>",
        "id": 359555454,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684478296
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 359555556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684478349
    },
    {
        "content": "<p>Yes; and the reason I need it as a <em>linear</em> map is because It needs to be usable in the second argument of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_fderiv_at\">docs#has_fderiv_at</a>, which does not accept semilinear maps (which I assume is because that wouldn't be mathematically meaningful, but I don't really know for sure)</p>",
        "id": 359556014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684478529
    },
    {
        "content": "<blockquote>\n<p>and have a generic way of referring to the conjugation as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linear map?</p>\n</blockquote>\n<p>Or a general way to change the <code>σ</code> in a linear map, such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R₁</span> <span class=\"n\">R₂</span> <span class=\"n\">R₁'</span> <span class=\"n\">R₂'</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₁</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₂</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">R₁</span> <span class=\"bp\">→+*</span> <span class=\"n\">R₂</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- Replace the ring morphism in a semilinear map with an equal one.</span>\n<span class=\"sd\">This has better defeq than `h ▸  f`  and is easier to elaborate. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.change_scalarsₛₗ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">=</span> <span class=\"n\">σ'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ'</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">▸</span> <span class=\"n\">map_smulₛₗ</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- repeat for `linear_equiv`, `continuous_linear_equiv`, etc</span>\n</code></pre></div>\n<p>then the answer would be <code>(starL ℝ).change_scalarsₛₗ (star_end_eq_ring_hom_id)</code> or something</p>",
        "id": 359556519,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684478756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Star-semilinear.20maps.20are.20semilinear.20when.20star.20is.20trivial/near/359552581\">said</a>:</p>\n<blockquote>\n<p>Perhaps a semi-linear version of <code>restrict_scalars</code>?</p>\n</blockquote>\n<p>It seems like this would do it.  If you have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">M_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> a module over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">R_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> an algebra over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and ring homomorphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>:</mo><msub><mi>R</mi><mn>1</mn></msub><mo>→</mo><msub><mi>R</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\rho:R_1\\to R_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>:</mo><msub><mi>S</mi><mn>1</mn></msub><mo>→</mo><msub><mi>S</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\sigma:S_1\\to S_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and a typeclass saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>∘</mo><msub><mrow><mi mathvariant=\"normal\">alg_hom</mi><mo>⁡</mo></mrow><mn>1</mn></msub><mo>=</mo><msub><mrow><mi mathvariant=\"normal\">alg_hom</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo>∘</mo><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma \\circ \\operatorname{alg\\_hom}_1=\\operatorname{alg\\_hom}_2\\circ \\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∘</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0541em;vertical-align:-0.3597em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">alg_hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0914em;\"><span style=\"top:-2.3403em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3597em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0541em;vertical-align:-0.3597em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">alg_hom</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0914em;\"><span style=\"top:-2.3403em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3597em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∘</span><span class=\"mord mathnormal\">ρ</span></span></span></span>, then maybe you can restrict-scalars a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span></span></span></span>-linear map to a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span>-linear map.</p>",
        "id": 359556835,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684478872
    },
    {
        "content": "<p>Specialize to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub><mo>=</mo><msub><mi>R</mi><mn>2</mn></msub><mo>∈</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"double-struck\">C</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">H</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">R_1=R_2\\in\\{\\mathbb{C},\\mathbb{H}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathbb\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathbb\">H</span><span class=\"mclose\">}</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo>=</mo><msub><mi>S</mi><mn>2</mn></msub><mo>=</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">S_1=S_2=\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi><mo>=</mo><mi mathvariant=\"normal\">conj</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\rho=\\operatorname{conj}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ρ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8623em;vertical-align:-0.1944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">conj</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo>=</mo><mi mathvariant=\"normal\">id</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma=\\operatorname{id}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">id</span></span></span></span></span>.</p>",
        "id": 359557028,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684478941
    },
    {
        "content": "<p>I've thought vaguely about this before, the lack of such a construction prevented <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and I from doing the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Hom</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{Hom}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">Hom</span></span></span></span></span> of smooth vector bundles in the right generality.</p>",
        "id": 359557178,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684478995
    },
    {
        "content": "<p>(You want the bundle of conjugate-linear maps between two holomorphic vector bundles to be a real-smooth vector bundle.)</p>",
        "id": 359557384,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684479067
    },
    {
        "content": "<p>Here's an adapted version of your suggestion that doesn't need a full <code>algebra</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.linear_map</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R₁</span> <span class=\"n\">R₂</span> <span class=\"n\">R₁'</span> <span class=\"n\">R₂'</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₁'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R₂'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₁</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₂</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₁'</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R₂'</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R₁'</span> <span class=\"n\">R₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">R₂'</span> <span class=\"n\">R₂</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R₁'</span> <span class=\"n\">R₁</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R₂'</span> <span class=\"n\">R₂</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n   <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">R₁</span> <span class=\"bp\">→+*</span> <span class=\"n\">R₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">R₁'</span> <span class=\"bp\">→+*</span> <span class=\"n\">R₂'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">linear_map.restrict_scalarsₛₗ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">σ'</span> <span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">σ'</span><span class=\"o\">]</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">smul_one_smul</span> <span class=\"n\">R₁</span> <span class=\"n\">c</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">smul_one_smul</span> <span class=\"n\">R₂</span> <span class=\"o\">(</span><span class=\"n\">σ'</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">map_smulₛₗ</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">•</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span><span class=\"n\">f</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359557835,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479267
    },
    {
        "content": "<p>(apologies for the different variable names, I'd already started writing it when you posted your comment)</p>",
        "id": 359557943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479307
    },
    {
        "content": "<p>But restricting semilinear maps might be an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; perhaps a <code>star_invariant_module</code> typeclass would be the easy way out here</p>",
        "id": 359558164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479373
    },
    {
        "content": "<p>Hmm, don't you then have to identify the invariant submodule with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> itself?  That seems ugly.  I think restricting semilinear maps is the right choice, at least in my application which I've though about more than yours ....</p>",
        "id": 359558367,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684479472
    },
    {
        "content": "<p>I'm happy to take your word for it; I think my application doesn't care</p>",
        "id": 359558675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479576
    },
    {
        "content": "<p>Though maybe we need both; we could unify <a href=\"https://leanprover-community.github.io/mathlib_docs/find/clifford_algebra.star_smul\">docs#clifford_algebra.star_smul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quaternion.star_smul\">docs#quaternion.star_smul</a> with a <code>star_invariant_module</code> typeclass</p>",
        "id": 359559013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479654
    },
    {
        "content": "<p>Actually, maybe Floris and I need something slightly different -- not the fact that the conjugate-linear maps are real-linear themselves, but that the collection they form is a real vector space.</p>",
        "id": 359559152,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684479686
    },
    {
        "content": "<p>Doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.module\">docs#linear_map.module</a> already provide that?</p>",
        "id": 359559384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479746
    },
    {
        "content": "<p>Indeed, looks like it!</p>",
        "id": 359559596,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684479822
    },
    {
        "content": "<p>Unwinding the stack briefly; is <code>starL'</code> an acceptable hack for the purpose of <a href=\"https://github.com/leanprover-community/mathlib/pull/19038\">#19038</a>? It has the advantage of being above the porting tide, while adding a semilinear <code>restrict_scalars</code> would not be</p>",
        "id": 359560047,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684479970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Star-semilinear.20maps.20are.20semilinear.20when.20star.20is.20trivial/near/359559384\">said</a>:</p>\n<blockquote>\n<p>Doesn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.module\">docs#linear_map.module</a> already provide that?</p>\n</blockquote>\n<p>Looked at it briefly, this seems correct but the path is then littered with other tasks: a continuous-linear version of this construction, a vector bundle version of <code>is_scalar_tower</code>, and more ...</p>",
        "id": 359562327,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684480707
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.module\">docs#continuous_linear_map.module</a> already provides the next task I think?</p>",
        "id": 359562481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684480751
    },
    {
        "content": "<p>It's hard to say for sure without actually asking Lean of course!</p>",
        "id": 359562517,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684480762
    },
    {
        "content": "<p>Ah, very good!</p>",
        "id": 359562578,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684480779
    },
    {
        "content": "<p>And maybe <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.is_scalar_tower\">docs#continuous_linear_map.is_scalar_tower</a> (added in <a href=\"https://github.com/leanprover-community/mathlib/pull/10494\">#10494</a>) is your last task?</p>",
        "id": 359562698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684480808
    },
    {
        "content": "<p>The latter task should really be a vector bundle construction, so I don't think so.  And I think there's also more to do on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.module\">docs#continuous_linear_map.module</a>: one needs to topologize this and normify it :(</p>",
        "id": 359562938,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684480894
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_linear_map.to_normed_space\">docs#continuous_linear_map.to_normed_space</a> also already exists</p>",
        "id": 359563290,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684480999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Star-semilinear.20maps.20are.20semilinear.20when.20star.20is.20trivial/near/359558367\">said</a>:</p>\n<blockquote>\n<p>at least in my application which I've though about more than yours ....</p>\n</blockquote>\n<p>Did we conclude then that your application wouldn't benefit from restricting semilinear maps after all?</p>",
        "id": 359566324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684481909
    },
    {
        "content": "<p>Actually, I just came to the conclusion that it needs that too!  But I don't think I will believe it until I've slept on it.</p>",
        "id": 359567166,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684482151
    },
    {
        "content": "<p>Anyway, that has to happen after the port.</p>",
        "id": 359567184,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1684482160
    },
    {
        "content": "<p>I would claim that <a href=\"https://github.com/leanprover-community/mathlib/pull/19038\">#19038</a> can safely happen during the port :)</p>",
        "id": 359567527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684482256
    },
    {
        "content": "<p>I can add a todo comment referencing the ideas here next to starL'</p>",
        "id": 359567746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684482312
    }
]