[
    {
        "content": "<p>Is there anything in Lean 4 that solves the following example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_lt_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I don't care if it is a lemma or a tactic.</p>",
        "id": 328318109,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676575302
    },
    {
        "content": "<p>I assume <code>by linarith</code> can do it</p>",
        "id": 328318469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676575420
    },
    {
        "content": "<p><code>linarith failed to find a contradiction</code></p>",
        "id": 328318681,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676575492
    },
    {
        "content": "<p>The same thing happens for rational numbers.</p>",
        "id": 328318734,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676575511
    },
    {
        "content": "<p>Hmm, well then there is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=div_lt_div_of_lt#doc\">docs4#div_lt_div_of_lt</a></p>",
        "id": 328319310,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676575683
    },
    {
        "content": "<p>Oh I see that I need to have <code>(0 : ℝ) &lt; (2 : ℝ)</code> in local context; otherwise <code>library_search</code> cannot find it.</p>",
        "id": 328320528,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676576107
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_lt_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">zero_lt_two</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">exact</span> <span class=\"n\">div_lt_div_of_lt</span> <span class=\"n\">zero_lt_two</span> <span class=\"n\">x_lt_y</span>\n</code></pre></div>",
        "id": 328320666,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676576157
    },
    {
        "content": "<p>Actually this succeeds as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_lt_y</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"n\">div_lt_div_of_lt</span> <span class=\"n\">two_pos</span> <span class=\"n\">x_lt_y</span>\n</code></pre></div>",
        "id": 328321141,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676576322
    },
    {
        "content": "<p>Once again, I am surprised that <code>library_search</code> fails when <code>zero_lt_two</code> is absent, even though <code>two_pos</code> exists in mathlib.</p>",
        "id": 328321336,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676576394
    },
    {
        "content": "<p>I don't think <code>library_search</code> tries using arbitrary lemmas for new goals. Otherwise, why not prove everything using <code>id</code></p>",
        "id": 328323661,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676577161
    },
    {
        "content": "<p>In mathlib 3 there is <code>hint</code> or <code>suggest</code> or something that tries a bit harder, right?</p>",
        "id": 328323707,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676577178
    },
    {
        "content": "<p>Afaik <code>suggest</code> is useful is situations like this. However <code>hint</code> is a meta tactic (tries several tactics).</p>",
        "id": 328324277,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676577370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 328327140,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676578291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417654\">@Martin Dvořák</span>  <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Mathlib3 linarith could handle this, but the fraction functionality hasn't been implemented in Lean 4 yet.</p>",
        "id": 328343060,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1676584286
    }
]