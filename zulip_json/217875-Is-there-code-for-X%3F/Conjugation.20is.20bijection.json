[
    {
        "content": "<p>I'm sure we have this but can't find it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Group.Bijective_conjugate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 383949219,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691758269
    },
    {
        "content": "<p>Should probably be a <code>comp</code> of right and left multiplication being bijective?</p>",
        "id": 383949370,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691758295
    },
    {
        "content": "<p>Anything simpler than this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Group.Bijective_conjugate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert</span> <span class=\"o\">(</span><span class=\"n\">mulLeft_bijective</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">mulRight_bijective</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Function.comp</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 383950471,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691758465
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.ConjAct</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Group.Bijective_conjugate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">MulAction.toPerm</span> <span class=\"o\">(</span><span class=\"n\">ConjAct.toConjAct</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">bijective</span>\n</code></pre></div>",
        "id": 383951331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691758589
    },
    {
        "content": "<p>Which is exploiting that the statement is the same as <code>Function.Bijective (ConjAct.toConjAct g • ·)</code> which in turn is just a standard result about group actions</p>",
        "id": 383951899,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691758687
    },
    {
        "content": "<p>In the spirit of your code, you just had the left and right in the wrong order:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.GroupAction.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Group.Bijective_conjugate</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Function.Bijective</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">h</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">mulRight_bijective</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">mulLeft_bijective</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 383952611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691758816
    },
    {
        "content": "<p>Great, thanks; is it worth adding this to mathlib? (It was annoying that <code>exact?</code> didn't find it...) If so, what's the right name, perhaps <code>Group.Conj_bijective</code> is closer?</p>",
        "id": 383953895,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691759024
    },
    {
        "content": "<p>And what's better, to phrase it as a bijection, or permutation?</p>",
        "id": 383958338,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1691759796
    },
    {
        "content": "<p>IMHO it seems overly specific to have this, since it's true for any group action, and we already have the code to do it generally. But others may disagree with me.</p>",
        "id": 383967437,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691761313
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MulAut.conj#doc\">docs#MulAut.conj</a> which should be all you need</p>",
        "id": 383968768,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691761522
    }
]