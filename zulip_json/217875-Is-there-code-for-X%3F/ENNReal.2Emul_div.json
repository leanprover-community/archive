[
    {
        "content": "<p><code>theorem ENNReal.mul_div (a b c : ℝ≥0∞) : a * (b / c) = (a * b) / c := sorry</code></p>\n<p>I can't seem to find it anywhere!</p>",
        "id": 367837104,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687248701
    },
    {
        "content": "<p><code>simp_rw [div_eq_mul_inv, mul_assoc]</code>?</p>",
        "id": 367838334,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687248989
    },
    {
        "content": "<p>ennreal is not a div_inv_monoid but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.div_eq_inv_mul\">docs#ennreal.div_eq_inv_mul</a> so I guess this can work</p>",
        "id": 367838865,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687249100
    },
    {
        "content": "<p>give me a sec</p>",
        "id": 367838875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687249102
    },
    {
        "content": "<p><code>by simp only [ENNReal.div_eq_inv_mul, mul_left_comm]</code> works. thanks!</p>",
        "id": 367839591,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687249249
    },
    {
        "content": "<p>Why is it not a div_inv_monoid?</p>",
        "id": 367841242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249595
    },
    {
        "content": "<p>it's a monoid, right?</p>",
        "id": 367841301,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249610
    },
    {
        "content": "<p>Mathematically it's not a monoid because 0 * infinity can't be given a meaningful answer. With junk values it may or may not be a Lean monoid.</p>",
        "id": 367842018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687249779
    },
    {
        "content": "<p>Since when did monoids have a 0?</p>",
        "id": 367842203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249813
    },
    {
        "content": "<p>I'm talking about <code>ENNReal</code></p>",
        "id": 367842253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687249823
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.linear_ordered_comm_monoid_with_zero\">docs#ennreal.linear_ordered_comm_monoid_with_zero</a></p>",
        "id": 367842325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249844
    },
    {
        "content": "<p>and I'm saying that it's not obvious that multiplication is associative, this would need to be checked because 0 * infinity * 0 is \"random junk value\"</p>",
        "id": 367842331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687249845
    },
    {
        "content": "<p>I think the solution to this thread is to add the div_inv_monoid instance</p>",
        "id": 367842548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249901
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_div\">docs#mul_div</a> should then apply</p>",
        "id": 367842589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249912
    },
    {
        "content": "<p>You might find that someone else wants 0^{-1}=infty not 0</p>",
        "id": 367842601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687249915
    },
    {
        "content": "<p>I think this has come up before</p>",
        "id": 367842693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687249928
    },
    {
        "content": "<p>That's good, because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.inv_zero\">docs#ennreal.inv_zero</a> is already that statement IIRC?</p>",
        "id": 367842820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249962
    },
    {
        "content": "<p>div_inv_monoid doesn't require <code>inv 0 = 0</code></p>",
        "id": 367842934,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687249994
    },
    {
        "content": "<p>All it means is \"there is some random inverse that extends to division and to a power operation</p>",
        "id": 367843090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687250034
    },
    {
        "content": "<p>Maybe the power operation is trouble</p>",
        "id": 367843170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687250045
    },
    {
        "content": "<p>oh then maybe you're OK! But if so then I'm surprised Yael didn't PR this instance months ago</p>",
        "id": 367843182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687250049
    },
    {
        "content": "<p>I have it in my head that there's an obstruction, I've just guessed wrong twice so far</p>",
        "id": 367843236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687250066
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.div_inv_monoid\">docs#ennreal.div_inv_monoid</a></p>",
        "id": 367845270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687250501
    },
    {
        "content": "<p>So the answer to this thread is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_div\">docs#mul_div</a></p>",
        "id": 367845271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687250501
    },
    {
        "content": "<p>Huh, the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.has_inv\">docs#ennreal.has_inv</a> is pretty surprising. I expected a definition by cases</p>",
        "id": 367846069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687250654
    },
    {
        "content": "<p>It's been specially obfuscated to confuse computer scientists.</p>",
        "id": 367848539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687251147
    },
    {
        "content": "<p>Sorry yes that's right. <code>mul_div</code> will work here, although we're missing a lot of related lemmas. I'm adding a few of them in <a href=\"https://github.com/leanprover-community/mathlib/pull/19199\">#19199</a>.</p>",
        "id": 367874721,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687256806
    },
    {
        "content": "<p>I remember it not working, but maybe it was so late in the morning I just missed that the brackets were misplaced</p>",
        "id": 367997494,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687280531
    },
    {
        "content": "<p><code>div_eq_inv_mul</code> doesn't work for <code>ENNReal</code> because we don't have <code>DivInvCommMonoid</code>.</p>",
        "id": 368077795,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687306902
    },
    {
        "content": "<p>(I mean, doesn't work automatically)</p>",
        "id": 368077920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687306947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ENNReal.2Emul_div/near/367846069\">said</a>:</p>\n<blockquote>\n<p>Huh, the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal.has_inv\">docs#ennreal.has_inv</a> is pretty surprising. I expected a definition by cases</p>\n</blockquote>\n<p>I think that we should redefine it by cases so that at least <code>ENNReal.inv_top</code> becomes <code>rfl</code> but this should wait for a month or two.</p>",
        "id": 368078135,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687307044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/ENNReal.2Emul_div/near/367997494\">said</a>:</p>\n<blockquote>\n<p>I remember it not working, but maybe it was so late in the morning I just missed that the brackets were misplaced</p>\n</blockquote>\n<p>so I remember what this was, <code>exact?</code> didn't find it. but that just happens sometimes</p>",
        "id": 368166861,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687338964
    },
    {
        "content": "<p>I've made a tracking issue for this, Yury. <a href=\"https://github.com/leanprover-community/mathlib4/pull/5339\">!4#5339</a></p>",
        "id": 368167152,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1687339032
    }
]