[
    {
        "content": "<p>In <code>MetaM</code>, for going under forall quantifiers, we have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallTelescope#doc\">docs#Lean.Meta.forallTelescope</a>  that goes under as many foralls as possible, but also the more principled <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallMetaBoundedTelescope#doc\">docs#Lean.Meta.forallMetaBoundedTelescope</a> that goes under at most $n$ foralls.</p>\n<p>But for opening up lambdas, I only see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.lambdaTelescope#doc\">docs#Lean.Meta.lambdaTelescope</a>, but no <code>bounded</code> variant, and I'd be mildly surprised that none ever had a need for that. How do you open up fixed number of lambda? (Or just exactly one, for that matter?)</p>",
        "id": 404234998,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700994524
    },
    {
        "content": "<p>If you know your expression is a lambda or a forall, here's a function that wraps up the pattern you normally see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.withLambda</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withLocalDecl</span> <span class=\"n\">e.bindingName</span><span class=\"bp\">!</span> <span class=\"n\">e.bindingInfo</span><span class=\"bp\">!</span> <span class=\"n\">e.bindingDomain</span><span class=\"bp\">!</span> <span class=\"k\">fun</span> <span class=\"n\">fvar</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">k</span> <span class=\"n\">fvar</span> <span class=\"o\">(</span><span class=\"n\">e.bindingBody</span><span class=\"bp\">!.</span><span class=\"n\">instantiate1</span> <span class=\"n\">fvar</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 404275701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701019415
    },
    {
        "content": "<p>(I think you meant to link to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallBoundedTelescope#doc\">docs#Lean.Meta.forallBoundedTelescope</a> instead of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallMetaBoundedTelescope#doc\">docs#Lean.Meta.forallMetaBoundedTelescope</a>)</p>",
        "id": 404275775,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701019477
    },
    {
        "content": "<p>I think it would make sense to have a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.lambdaBoundedTelescope#doc\">docs#Lean.Meta.lambdaBoundedTelescope</a></p>\n<p>One design question is whether, like <code>forallTelescope</code> vs <code>forallBoundedTelescope</code>, the <code>lambdaBoundedTelescope</code> version would also do <code>whnf</code> if the expression isn't obviously a lambda. The <code>forallBoundedTelescope</code> is a controlled version of <code>forallTelescopeReducing</code>.</p>",
        "id": 404275893,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701019605
    },
    {
        "content": "<p>Actually, that's not the only option, it could also manufacture lambdas that aren't there using eta expansion. This is what the compiler usually has to do when expecting an expression with a given arity</p>",
        "id": 404276277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701019971
    },
    {
        "content": "<p>Yes, that sounds even more useful, also because one can then expect that function to always return an array of exactly the expected length.</p>",
        "id": 404276659,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701020328
    },
    {
        "content": "<p>well, not necessarily, <code>e</code> may not have the right type (although maybe in this case the function may be justified to throw an error)</p>",
        "id": 404276705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701020376
    },
    {
        "content": "<p>Yup, that's what I mean</p>",
        "id": 404276769,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701020410
    },
    {
        "content": "<p>In a sense the dual of the function that I added here:<br>\n<a href=\"https://github.com/leanprover/lean4/pull/2902/files#diff-7714aba4907fdd09f34e5285d6ceebb090b89757fdc60bc1dcaf9c112bdf5228R93-R111\">https://github.com/leanprover/lean4/pull/2902/files#diff-7714aba4907fdd09f34e5285d6ceebb090b89757fdc60bc1dcaf9c112bdf5228R93-R111</a></p>",
        "id": 404278266,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701021493
    },
    {
        "content": "<p>I have an implementation <a href=\"https://github.com/leodemoura/lean4/blob/a6bb9c6adaefb527aab7469667f833affedbe49b/src/Lean/Elab/Tactic/CBV.lean#L265-L291\">here</a> although it's also tied up with other stuff relating to its use in the compiler</p>",
        "id": 404278529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701021677
    },
    {
        "content": "<p>I have a few places where I could use that function. Once you are happy with it, will you PR it?</p>",
        "id": 404596042,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701167359
    }
]