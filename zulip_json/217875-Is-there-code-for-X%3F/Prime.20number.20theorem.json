[
    {
        "content": "<p>What is the current progress towards the prime number theorem, or a weaker sense, the Mertens formula in Lean?</p>",
        "id": 320922836,
        "sender_full_name": "Meow",
        "timestamp": 1673525727
    },
    {
        "content": "<p>In Isabelle there is a proof for Mertens formula using elementary methods. And more, with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo separator=\"true\">,</mo><mi>χ</mi><mo stretchy=\"false\">)</mo><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">L(s,\\chi)\\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">χ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for non-principle characters, it is enough to prove the infinitude in arithmetic progressions (but much weaker than a prime number theorem).</p>",
        "id": 320923131,
        "sender_full_name": "Meow",
        "timestamp": 1673525824
    },
    {
        "content": "<p>Afaik, nobody is actively working on a Lean proof of PNT.</p>",
        "id": 320928265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673527425
    },
    {
        "content": "<p>I would be inclined to use <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s deep embedding of metamath into Lean. Not sure how we might/would/should want to tie that to mathlib. I personally would be in favour of a <code>src/binary/</code> folder where we can dump those deep embeddings, and a subfolder <code>src/binary/align</code> that aligns stuff with the rest of mathlib. And then just transport metamath's PNT to Lean.</p>",
        "id": 320928636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673527529
    },
    {
        "content": "<p>Thanks. How can I find these code for using deep embeddings?</p>",
        "id": 320929462,
        "sender_full_name": "Meow",
        "timestamp": 1673527799
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Prime.20number.20theorem.20in.20lean</a></p>",
        "id": 320929821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673527905
    },
    {
        "content": "<p>It's not strange that Metamath can be embedded in Lean. The consistency strength of CIC is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>ZFC</mtext><mo>+</mo><mi>ω</mi><mtext> inaccessible cardinals</mtext></mrow><annotation encoding=\"application/x-tex\">\\text{ZFC}+\\omega \\text{ inaccessible cardinals}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord text\"><span class=\"mord\">ZFC</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mord text\"><span class=\"mord\"> inaccessible cardinals</span></span></span></span></span>, so Metamath without Tarski-Grothendieck axiom can be embedded into it.</p>",
        "id": 320930027,
        "sender_full_name": "Meow",
        "timestamp": 1673527953
    },
    {
        "content": "<p>The Tarski-Grothendieck axiom needs a Mahlo cardinal and Lean doesn't have enough consistency strength.</p>",
        "id": 320930127,
        "sender_full_name": "Meow",
        "timestamp": 1673527987
    },
    {
        "content": "<p>What's more, parsing Metamath proofs are ratherly easy (I ever have written a parser, but remain unpublished), and the only difficulty is to convert Metamath \"axioms\" into Lean definitions. In contrast, it's harder to get Isabelle proof terms.</p>",
        "id": 320930503,
        "sender_full_name": "Meow",
        "timestamp": 1673528072
    },
    {
        "content": "<p>While I take a maximalist view of what's appropriate for mathlib (pretty much anything that could be considered known mathematics, from the mathematical sciences as a whole, is appropriate for mathlib or the mathlib archive if properly integrated with mathlib and following its coding standards, with the choice between mathlib and the mathlib archive being based on whether the material is likely to be reused or is very specific to a given result) - so that, for example, various projects people have done to prove some result or develop some theory outside of mathlib ought to end up in mathlib - this sort of proof converted from Metamath via a deep embedding is one of the things that seems less suitable to me (and likewise anything involving a large amount of auto-generated code not suitable for editing and maintaining by hand). The main benefit of PNT in Lean, as with many big results, would probably be the theory and lemmas developed to prove it rather than the result itself (although certainly the result itself is useful), and you don't get that benefit with such a proof converted from Metamath.</p>",
        "id": 320931464,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1673528357
    },
    {
        "content": "<p>I do think there is a gap here, where we don't have any process for making use of external proofs similar to FFI in programming languages. Especially big formalization projects can't always be done in one system due to organizational constraints - Flyspeck being one famous example, being written in HOL light and Isabelle - and I think we should work on having seamless integration between libraries. I don't think that we should be literally checking in a copy of <a href=\"http://translated-set.mm\">translated-set.mm</a> to mathlib, that would not fit our development model at all, but we should be able to depend on <a href=\"http://translated-set.mm\">translated-set.mm</a> for formalizations.</p>",
        "id": 320937197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673530115
    },
    {
        "content": "<blockquote>\n<p>The main benefit of PNT in Lean, as with many big results, would probably be the theory and lemmas developed to prove it rather than the result itself (although certainly the result itself is useful), and you don't get that benefit with such a proof converted from Metamath.</p>\n</blockquote>\n<p>Of course. But maybe you are building a proof of something else and want to have PNT as a dependency without going into the details of the proof because they aren't relevant.</p>",
        "id": 320937719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673530269
    },
    {
        "content": "<p>These viewpoints are interesting. However, in my opinion, I don't have a \"maximalist\" view for mathlib - in my view Lean is just one theorem prover, and not so speical.</p>",
        "id": 320949842,
        "sender_full_name": "Meow",
        "timestamp": 1673533368
    },
    {
        "content": "<p>For me, the most important problem of directly translating PNT to Lean is, it is a prove based on Selberg-Erdos method and not Riemann zeta function. This meant more precise estimation of the remainder item to be impossible.</p>",
        "id": 320950551,
        "sender_full_name": "Meow",
        "timestamp": 1673533523
    },
    {
        "content": "<p>I think you misunderstood what Joseph was saying there. The \"maximalist\" view is about whether X mathematics is in scope for mathlib or not, not how mathlib relates to other theorem prover libraries</p>",
        "id": 320950786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673533576
    },
    {
        "content": "<p>So the \"maximalist\" view is, all concurrent math is suitable to exist in mathlib?</p>",
        "id": 320951276,
        "sender_full_name": "Meow",
        "timestamp": 1673533695
    },
    {
        "content": "<p>By \"concurrent\", do you just mean \"current\"?</p>",
        "id": 320951518,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673533770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prime.20number.20theorem/near/320951518\">said</a>:</p>\n<blockquote>\n<p>By \"concurrent\", do you just mean \"current\"?</p>\n</blockquote>\n<p>Yes, that's a typo.</p>",
        "id": 320951687,
        "sender_full_name": "Meow",
        "timestamp": 1673533812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"566171\">Meow</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prime.20number.20theorem/near/320950551\">said</a>:</p>\n<blockquote>\n<p>For me, the most important problem of directly translating PNT to Lean is, it is a prove based on Selberg-Erdos method and not Riemann zeta function. This meant more precise estimation of the remainder item to be impossible.</p>\n</blockquote>\n<p>I actually agree with this (despite being the original author of the metamath PNT proof). I think it would be more on-point for mathlib to formalize the abstract nonsense proof of PNT because it has better connections to other parts of abstract number theory which are of research interest. A proof of the PNT on it's own just isn't that much of an achievement anymore and the Erdos-Selberg proof won't pay many other dividends than PNT itself.</p>",
        "id": 320951696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673533813
    },
    {
        "content": "<p>I've never heard of complex analysis being described as \"abstract nonsense\" before! But I think we are all in agreement here that a Riemann-zeta-based proof written directly in Lean would be preferable over either (a) a proof via Erdos--Selberg, or (b) an incomprehensible hairball autotranslated from some other system (at which point it hardly matters what argument was used in the other system originally).</p>",
        "id": 320952235,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673533960
    },
    {
        "content": "<p>as ever, I will reject the claim that the proof is incomprehensible though. It is actually a pretty direct translation of the original code, it would not be that bad to make it as presentable as the original proof</p>",
        "id": 320952686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673534077
    },
    {
        "content": "<p>TBH lean itself produces much worse proofs on its own</p>",
        "id": 320952859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673534111
    },
    {
        "content": "<p>More than anything else, I find the mentality harmful for translations generally, by denigrating the results as though it's not as good as a \"real\" proof. It serves a different purpose than source to source translations, that's all.</p>",
        "id": 320953356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673534237
    },
    {
        "content": "<p>As we have seen with the port, source to source translations have a host of other problems to deal with, and are generally much more resource-intensive</p>",
        "id": 320953647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1673534292
    },
    {
        "content": "<p>I'm sorry, I meant no slight on your work (either the original achievement of proving PNT in Metamath, or that of writing the Metamath-to-Lean translator, both of which are pretty cool.)</p>",
        "id": 320953713,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673534311
    },
    {
        "content": "<p>But I think we are not so far from being able to prove PNT directly. with the classical O(exp(sqrt log x)) error term, in mathlib. This is one of the motivations for the work that Meow and I have been doing to prove analytic continuation of Riemann zeta.</p>",
        "id": 320954154,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673534421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prime.20number.20theorem/near/320954154\">said</a>:</p>\n<blockquote>\n<p>But I think we are not so far from being able to prove PNT directly. with the classical O(exp(sqrt log x)) error term, in mathlib. This is one of the motivations for the work that Meow and I have been doing to prove analytic continuation of Riemann zeta.</p>\n</blockquote>\n<p>Yes.</p>",
        "id": 320954918,
        "sender_full_name": "Meow",
        "timestamp": 1673534610
    },
    {
        "content": "<p>At least, it was one of my motivations, and I'm glad to hear that it also seems to be one of yours <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 320958174,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673535394
    },
    {
        "content": "<p>By the way, I don't regard Lean as the \"best\" tool for formalizing all mathematics. Some statements in mathematical logic may be more suitable to be formalized in Isabelle? Isabelle has two levels of logic, meta-level and object-level. In Isabelle we have many object-logics, for example, LCF, modal logic and sequent calculus.</p>",
        "id": 320958378,
        "sender_full_name": "Meow",
        "timestamp": 1673535451
    },
    {
        "content": "<p>But CIC can also be used as a meta-logic, similar to Isabelle/Pure. That's what <code>model_theory</code> do.</p>",
        "id": 320958660,
        "sender_full_name": "Meow",
        "timestamp": 1673535517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prime.20number.20theorem/near/320958174\">said</a>:</p>\n<blockquote>\n<p>At least, it was one of my motivations, and I'm glad to hear that it also seems to be one of yours <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Thanks.</p>",
        "id": 320958706,
        "sender_full_name": "Meow",
        "timestamp": 1673535530
    },
    {
        "content": "<p>I'm glad to see renewed interest in PNT; ever since this project: <a href=\"https://github.com/bhgomes/lean-riemann-hypothesis\">https://github.com/bhgomes/lean-riemann-hypothesis</a> (giving continuation of zeta to Re(s)&gt;0 via alternating sums, in order to state RH via complex zeros), I've been hoping for there to be enough complex analysis to take a Mellin transform of a theta function (and thus define the actual \"Riemann\" zeta function...). <span class=\"user-mention\" data-user-id=\"481963\">@David Loeffler</span> -- you're saying we're now getting close to that possibility? Fascinating!...</p>",
        "id": 324754929,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1675105254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> Yes, it's definitely within reach: we have the transformation law for $\\theta(-1/z)$, and from there, it's just a matter of taking a Mellin transform of that and checking all the integrals converge ok. <span class=\"user-mention\" data-user-id=\"566171\">@Meow</span> was looking at that -- any thoughts?</p>",
        "id": 324774963,
        "sender_full_name": "David Loeffler",
        "timestamp": 1675112126
    },
    {
        "content": "<p>Wow, how do we have the theta transformation law?? <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and I have been (slowly) working up to Poisson summation, but maybe someone's beaten us to it?...</p>",
        "id": 324778073,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1675113224
    },
    {
        "content": "<p>Also, will we be able to pull contours...? Thanks!</p>",
        "id": 324778196,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1675113255
    },
    {
        "content": "<p>Contour integrals (and the residue formula, and meromorphic functions) would be cool to have! I proved some variants of the Hurwitz theorem without that, going through local versions using integrals along small circles, along the way to the Riemann mapping theorem but it feels a bit artificial...</p>",
        "id": 324780264,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1675114129
    },
    {
        "content": "<blockquote>\n<p>@Heather Macbeth and I have been (slowly) working up to Poisson summation, but maybe someone's beaten us to it?</p>\n</blockquote>\n<p>Yes: <a href=\"https://github.com/leanprover-community/mathlib/pull/18143\">#18143</a> proves Poissson summation for a function on the real line such that both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>f</mi><mo>^</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\hat{f}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1523em;vertical-align:-0.1944em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9579em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span><span style=\"top:-3.2634em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.0833em;\"><span class=\"mord\">^</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span></span></span></span> are continuous with exponential decay at infinity.</p>",
        "id": 324849464,
        "sender_full_name": "David Loeffler",
        "timestamp": 1675152935
    },
    {
        "content": "<blockquote>\n<p>Also, will we be able to pull contours...? Thanks!</p>\n</blockquote>\n<p>Not sure what you mean there? The only role for contour integration in this argument is the evaluation of the Fourier transform of the Gaussian (contributed by @Meow) which uses a contour integral around a rectangular box. AFAIK we don't have integration around any more general contours currently (which is a major obstacle to developing modular forms, etc.)</p>",
        "id": 324849934,
        "sender_full_name": "David Loeffler",
        "timestamp": 1675153125
    },
    {
        "content": "<p>Yes AFAIK we only have rectangles and circles. Maybe it's time to think about more general contours?</p>",
        "id": 324853338,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1675154364
    },
    {
        "content": "<blockquote>\n<p>Maybe it's time to think about more general contours?</p>\n</blockquote>\n<p>I think we would need to prove some version of the Jordan curve theorem in order to get the theory going (because you need to make sense of \"inside\" and \"outside\" the contour of integration)</p>",
        "id": 324854748,
        "sender_full_name": "David Loeffler",
        "timestamp": 1675154917
    },
    {
        "content": "<p>We can define the index without that, and possibly compute it in specific cases</p>",
        "id": 324855125,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1675155056
    },
    {
        "content": "<p>I would think that the Jordan curve theorem is really far away from what we have now</p>",
        "id": 324855283,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1675155111
    },
    {
        "content": "<p>Didn't Hales formalize Jordan in Coq (?) like 15 years ago?... Why is it so far away?</p>",
        "id": 325505463,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1675375065
    },
    {
        "content": "<p>Yes, here it is. (In HOL Light, not Coq) <a href=\"https://www.maths.ed.ac.uk/~v1ranick/papers/hales3.pdf\">https://www.maths.ed.ac.uk/~v1ranick/papers/hales3.pdf</a></p>",
        "id": 325505617,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1675375131
    },
    {
        "content": "<p>It shouldn't be so far away. But we are busy with porting to Lean 4.</p>",
        "id": 325505878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675375242
    },
    {
        "content": "<p>(I'm working on a project which might give us a terrible proof of the Jordan curve theorem sooner than expected...)</p>",
        "id": 325506234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675375385
    },
    {
        "content": "<p>What is this project?</p>",
        "id": 325507184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675375787
    },
    {
        "content": "<p>not ready for the public</p>",
        "id": 325507281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675375812
    },
    {
        "content": "<p>Simplicial homology and Brouwer's fixed point theorem <a href=\"#narrow/stream/116395-maths/topic/Completed.20proof.20of.20the.20Brouwer.20Fixed.20Point.20Theorem\">have been formalized in Lean</a> for a while. Certainly the Jordan curve theorem isn't (much) harder than Brouwer?</p>",
        "id": 325544756,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675398365
    },
    {
        "content": "<p><a href=\"https://github.com/alreadydone/contents/files/9996347/Harrison-John.pdf\">This</a> is another nice account of the development of simplicial homology in HOL light: it also covers the Jordan-Schoenflies theorem (a strengthening of Jordan curve theorem that requires complex analysis) and the Jordan-Brouwer separation theorem (higher dimensional generalization).</p>",
        "id": 325546123,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1675399699
    },
    {
        "content": "<p>Once we have singular homology, Jordan and its higher-dimensional generalizations become easy. But for this we need a good homological formalism first, which should be backported from LTE, and this has to wait for after the port.</p>",
        "id": 325587110,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1675418358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Prime.20number.20theorem/near/325587110\">said</a>:</p>\n<blockquote>\n<p>Once we have singular homology, Jordan and its higher-dimensional generalizations become easy. But for this we need a good homological formalism first, which should be backported from LTE, and this has to wait for after the port.</p>\n</blockquote>\n<p>Stumbled upon this. Now that the port is over, what's the status? Has LTE been ported already / is anyone working on that?</p>",
        "id": 395456942,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696715170
    },
    {
        "content": "<p>There is an on-going refactor of the homology library. See <a href=\"#narrow/stream/335062-homology/topic/Homology.20refactor\">https://leanprover.zulipchat.com/#narrow/stream/335062-homology/topic/Homology.20refactor</a>.</p>",
        "id": 395457614,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1696715955
    },
    {
        "content": "<p>We’re not porting LTE per se. But some parts are being moved directly to mathlib4</p>",
        "id": 395472638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696728398
    }
]