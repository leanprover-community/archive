[
    {
        "content": "<p>Is there a name for the transformation that converts one of these lemmas into the other? Is there existing code that will do this sort of transformation? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">):</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">h₁</span>  <span class=\"bp\">+</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 361832020,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685315981
    },
    {
        "content": "<p>In Lean 4 these two statements are defeq.</p>",
        "id": 361832261,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1685316165
    },
    {
        "content": "<p>To go to the first from the second you can do <code>cases a</code> and <code>cases b</code></p>",
        "id": 361832393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685316267
    },
    {
        "content": "<p>If you have foralls (so say you do <code>revert a b</code> in the second one), you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.forall_iff#doc\">docs4#Fin.forall_iff</a></p>",
        "id": 361832663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685316510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361832663\">said</a>:</p>\n<blockquote>\n<p>If you have foralls (so say you do <code>revert a b</code> in the second one), you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.forall_iff#doc\">docs4#Fin.forall_iff</a></p>\n</blockquote>\n<p>Hmm, but this seems like a type-specific lemma, but isn't there a more general principle that's true for all constructors?  (That's what I'm actually interested in).</p>",
        "id": 361832706,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685316584
    },
    {
        "content": "<p><code>cases</code> will deal with all constructors. What do you mean by \"existing code\" if <code>cases</code> is not the answer? <code>cases</code> applies the recursor for the inductive type in question.</p>",
        "id": 361832838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685316691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361832838\">said</a>:</p>\n<blockquote>\n<p><code>cases</code> will deal with all constructors. What do you mean by \"existing code\" if <code>cases</code> is not the answer? <code>cases</code> applies the recursor for the inductive type in question.</p>\n</blockquote>\n<p>As far as I understand, cases does the transformation in one direction, but not the reverse?</p>",
        "id": 361832859,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685316716
    },
    {
        "content": "<p>Right: <code>cases</code> takes apart <code>x : Fin 10</code> into <code>a : Nat</code> and <code>ha : a &lt; 10</code>. And angle bracket notation (or the appropriate <code>mk</code> constructor) puts it back together again.</p>",
        "id": 361832936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685316751
    },
    {
        "content": "<p>But there is not an \"uncases\", or something like that, which automates the reverse transformation in the way that cases does?</p>",
        "id": 361833097,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685316929
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n<span class=\"kd\">example</span>  <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"c1\">-- I think they'll fix this one day</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span>\n</code></pre></div>\n<p>Does this help?</p>",
        "id": 361833166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685316966
    },
    {
        "content": "<p>There's no \"uncases\" to my knowledge, but it seems like a reasonable extension to the <code>generalize</code> family</p>",
        "id": 361833198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685316994
    },
    {
        "content": "<p>You can use <code>generalize</code> here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span><span class=\"o\">:</span><span class=\"n\">b</span><span class=\"bp\">&lt;</span><span class=\"mi\">10</span><span class=\"o\">):</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">h₁</span>  <span class=\"bp\">+</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span>\n  <span class=\"n\">clear</span> <span class=\"n\">a</span> <span class=\"n\">h₁</span> <span class=\"n\">b</span> <span class=\"n\">h₂</span>\n</code></pre></div>\n<p>If there's some more complicated dependence, you can use <code>generalize ha : Fin.mk _ _ = a'</code> for example to get an equation to help eliminate <code>a</code> and <code>b</code> from the goal before clearing.</p>",
        "id": 361833585,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685317364
    },
    {
        "content": "<p>I'm taking advantage of how <code>generalize</code> searches for the first thing that matches <code>Fin.mk _ _</code>, but of course you can be more explicit.</p>",
        "id": 361833627,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685317439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361833166\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>  <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n<span class=\"kd\">example</span>  <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"c1\">-- I think they'll fix this one day</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.rec</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x.1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">x.2</span>\n</code></pre></div>\n<p>Does this help?</p>\n</blockquote>\n<p>Trying my best to understand. I don't see how this directly applies to automating the reverse transformation.  I see how you could use these primitives as part of a tool  a tool that would traverse the expression and rewrite internally.</p>",
        "id": 361833681,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685317457
    },
    {
        "content": "<p>I think I could write an \"uncases\" tactic that would automatically find applications of constructors that could be simplified in this way, I just wasn't sure if there was an existing tool to do this.</p>",
        "id": 361833865,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685317643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> Did you try the <code>generalize</code> code yet? I meant it as a way toward implementing this, or at least how to get the effect by hand without any specialized lemmas.</p>",
        "id": 361834085,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685317898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361833865\">said</a>:</p>\n<blockquote>\n<p>I think I could write an \"uncases\" tactic that would automatically find applications of constructors that could be simplified in this way, I just wasn't sure if there was an existing tool to do this.</p>\n</blockquote>\n<p>I see -- you're looking for a tactic. I was just writing code :-)</p>",
        "id": 361834136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685317928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361834085\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> Did you try the <code>generalize</code> code yet? I meant it as a way toward implementing this, or at least how to get the effect by hand without any specialized lemmas.</p>\n</blockquote>\n<p>I did try it out,  it is very close to the automation I am looking for, but I am looking for an even higher degree of automation (i.e. detecting and picking out <code>Fin.mk</code> as eligible for simplification in this context).  So I think I will need to write some automation myself.</p>\n<p>For the full context of why I'm interested in this, I'm looking to rewrite <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Data/Array/Init/Lemmas.html#Array.getElem_eq_data_get\">this lemma</a> for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.getElem_eq_data_get</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>into </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.getElem_eq_data_get_reversed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n<span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i.1</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">i.2</span>\n</code></pre></div>",
        "id": 361834565,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685318345
    },
    {
        "content": "<p>Are there a lot of lemmas like this that you expect to need to rewrite? Usually lemmas are written in a way where you don't have constructors with variables for each argument, but this one is special since it has a bare <code>i</code> on the LHS. (And I mean this just for types with a single constructor, like Fin)</p>",
        "id": 361835293,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685318909
    },
    {
        "content": "<p>The transformation is a little tricky because of this stray <code>i</code>, but it's doable. Your tactic needs to look for a constructor with variable arguments, <code>generalize</code> it, then one-by-one construct equalities between variables and projections of <code>x</code> and <code>subst</code> them out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">Fin.mk</span> <span class=\"n\">i</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Fin.val</span> <span class=\"n\">hx</span>\n  <span class=\"n\">subst</span> <span class=\"n\">i</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">x.isLt</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">subst</span> <span class=\"n\">h</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hx</span>\n  <span class=\"c1\">-- ⊢ a[↑x] = List.get a.data x</span>\n</code></pre></div>",
        "id": 361836147,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685319646
    },
    {
        "content": "<p>I expect that this will come up for other lemmas where I am reversing the lhs and rhs.  </p>\n<p>I guess I am assuming that lemmas like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Array.getElem_eq_data_get_reversed</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Array.size</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">List.get</span> <span class=\"n\">a.data</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>would not apply properly without being simplified.  But I should actually verify that...</p>",
        "id": 361836165,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685319664
    },
    {
        "content": "<p>Hmm, it looks like <code>rw</code> does not require simplifying the constructor on the lhs to work, but <code>simp</code> does.</p>",
        "id": 361837247,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685320559
    },
    {
        "content": "<p>wouldn't uncases be constructor?</p>",
        "id": 361842729,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1685324980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Rewriting.20constructors.20under.20forall.20bindings/near/361842729\">said</a>:</p>\n<blockquote>\n<p>wouldn't uncases be constructor?</p>\n</blockquote>\n<p>Could you explain what you mean?  Or just illustrate it with the example two theorems?</p>",
        "id": 361847797,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1685328885
    }
]