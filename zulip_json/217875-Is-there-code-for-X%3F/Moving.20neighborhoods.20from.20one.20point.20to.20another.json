[
    {
        "content": "<p>Is there a more direct way to translate a neighborhood from one point to another (here, in a ring) than doing this :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.Algebra.Ring.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Continuous</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalRing</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Add.add</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">nhds</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>  <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuousAt_def.mp</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuousAt</span>\n  <span class=\"n\">apply</span> <span class=\"n\">continuous_add_left</span> <span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hV</span>\n</code></pre></div>",
        "id": 373419704,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688806608
    },
    {
        "content": "<p>A more efficient version is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">Homeomorph.addLeft</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nhds_eq_comap</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Filter.preimage_mem_comap</span> <span class=\"n\">hV</span>\n</code></pre></div>\n<p>but there may be an even shorter one</p>",
        "id": 373425259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688808052
    },
    {
        "content": "<p>Actually my answer is a bit silly, going through a much stronger fact. The whole proof term you want is <code>(continuous_add_left a).continuousAt hV</code></p>",
        "id": 373428802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688808891
    },
    {
        "content": "<p>I was somewhat misled by the number of lines in your solution that suggested a fight.</p>",
        "id": 373428977,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1688808932
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 373432099,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1688809705
    }
]