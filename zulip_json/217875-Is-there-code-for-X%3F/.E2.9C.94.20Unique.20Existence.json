[
    {
        "content": "<p>Is there something along the lines of <code>example {p : α → Prop} : (h : ∃!x, p x) → p y → y = Classical.choose (h.exists)</code>? It doesn't even take two minutes to show of course, but it seems like it should exist already even though <code>exact?</code> doesn't find anything related</p>",
        "id": 384462428,
        "sender_full_name": "Uni Marx",
        "timestamp": 1691924939
    },
    {
        "content": "<p>It follows trivially from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ExistsUnique.unique#doc\">docs#ExistsUnique.unique</a></p>",
        "id": 384467865,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691926325
    },
    {
        "content": "<p>If you're just looking to obtain an <code>x</code> with a proof of uniqueness you can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hpx</span><span class=\"o\">,</span> <span class=\"n\">hx_unique</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ...</span>\n<span class=\"cm\">  x : α</span>\n<span class=\"cm\">  hpx : p x</span>\n<span class=\"cm\">  hx_unique : ∀ (y : α), (fun x =&gt; p x) y → y = x</span>\n<span class=\"cm\">  ⊢ True</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>(although I don't know if this counts as defeq abuse)</p>",
        "id": 384468558,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1691926505
    },
    {
        "content": "<p>There's no defeq abuse there. This indeed feels like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem</p>",
        "id": 384468943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691926597
    },
    {
        "content": "<p>Turns out I didn't need it either way, but I don't think it's \"trivially trivial\", it takes at least a few lines of de- and reconstructing.<br>\nIs there any reason to prefer <code>obtain</code> over say <code>rcases</code> or is it just more readable?</p>",
        "id": 384475011,
        "sender_full_name": "Uni Marx",
        "timestamp": 1691928068
    },
    {
        "content": "<p>It is trivially trivial, you need just two lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">h.exists</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"n\">hy</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.unique</span> <span class=\"n\">hy</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose_spec</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 384475650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691928215
    },
    {
        "content": "<p>I think <code>obtain</code> vs <code>rcases</code> is just a style choice</p>",
        "id": 384475794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691928246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639570\">Uni Marx</span> has marked this topic as resolved.</p>",
        "id": 384720159,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692007895
    },
    {
        "content": "<p>Automation is depressingly bad on this problem.</p>",
        "id": 385108848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692103286
    }
]