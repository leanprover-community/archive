[
    {
        "content": "<p>Hey everyone! How easy is it to write a macro or elaborator which declares a structure with field names given by the given identifiers? I tried writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"declare_mypoint\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"n\">where</span>\n      <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n      <span class=\"bp\">$</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but that's a syntax error after <code>$x</code>.</p>\n<p>I actually did manage to write a macro that does it, but I did it by #checking the quotation above (with <code>$x</code> and <code>$y</code> changed to <code>x</code> and <code>y</code>), taking the resulting 50 lines of code, and replacing the parts referring to <code>x</code> and <code>y</code> with expressions that refer to the given identifiers. But my goodness, there must be an easier way.</p>",
        "id": 369261756,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687639582
    },
    {
        "content": "<p>Sometimes you need to help antiquotations out with how they're supposed to be interpreted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"declare_mypoint\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"n\">where</span>\n      <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n      <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369261949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687639709
    },
    {
        "content": "<p>You can do more dynamic things too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"declare_mypoint\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fields</span> <span class=\"bp\">←</span> <span class=\"n\">xs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">structExplicitBinder</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">fieldsStx</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">structFields</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">structFields</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">fields</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">structure</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"n\">where</span>\n      <span class=\"bp\">$</span><span class=\"n\">fieldsStx</span><span class=\"o\">:</span><span class=\"n\">structFields</span><span class=\"o\">)</span>\n\n<span class=\"n\">declare_mypoint</span> <span class=\"n\">R2</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">declare_mypoint</span> <span class=\"n\">R3</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 369262671,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687640094
    },
    {
        "content": "<p>Dang, I love it!</p>",
        "id": 369262880,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687640232
    },
    {
        "content": "<p>Something I'm going to do eventually is write something which takes a description of an algebraic structure, and automatically generates a definition of that structure and homomorphisms on it.</p>",
        "id": 369263481,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687640554
    },
    {
        "content": "<p>I also have the reverse question, so to speak. Suppose that I've already written, say,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">Vertices</span> <span class=\"n\">Edges</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">Vertices</span> <span class=\"bp\">→</span> <span class=\"n\">Edges</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there an easy way to retrieve the names and types (as expressions) of the fields?</p>",
        "id": 369264119,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687640920
    },
    {
        "content": "<p>Do you want to get it from the syntax, or from a pre-existing <code>structure</code>? It's possible to get all the fields of a structure and their types given just the name of the structure.</p>",
        "id": 369265234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687641643
    },
    {
        "content": "<p>From a pre-existing structure.</p>",
        "id": 369266791,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687642477
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#print_structure_fields \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverload</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">getStructureInfo</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">name</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">c</span> <span class=\"s2\">\"Not a structure\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"field names: {info.fieldNames}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">field</span> <span class=\"k\">in</span> <span class=\"n\">info.fieldInfo</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">field.projFn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"n\">msgs.push</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{field.projFn} : {proj.type}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MessageData.joinSep</span> <span class=\"n\">msgs.toList</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 369266959,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687642599
    },
    {
        "content": "<p>It first prints the fields in order, and then it gives the types in alphabetical order</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">MyStruct</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">print_structure_fields</span> <span class=\"n\">MyStruct</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">field names: [n, m, h]</span>\n<span class=\"cm\">MyStruct.h : ∀ (self : MyStruct), self.n &lt; self.m</span>\n<span class=\"cm\">MyStruct.m : MyStruct → ℕ</span>\n<span class=\"cm\">MyStruct.n : MyStruct → ℕ</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 369267170,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687642731
    },
    {
        "content": "<p>Very nice! Thank you! I'll see if I can figure out the rest from there.</p>",
        "id": 369267317,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687642811
    },
    {
        "content": "<p>I think you just gave me the hard part, so hopefully the rest will be straightforward.</p>",
        "id": 369267354,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687642858
    },
    {
        "content": "<p>It looks like you can get the field types in order using a slightly different approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#print_structure_fields \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverload</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">getStructureInfo</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">name</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">c</span> <span class=\"s2\">\"Not a structure\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"field names: {info.fieldNames}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">info.fieldNames.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">info.getProjFn</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">break</span>\n    <span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">proj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"n\">msgs.push</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{info.fieldNames[i]!} : {proj.type}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MessageData.joinSep</span> <span class=\"n\">msgs.toList</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>",
        "id": 369267366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687642864
    },
    {
        "content": "<p>wait this is possible? I was struggling with this for weeks.</p>",
        "id": 369271205,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687645562
    },
    {
        "content": "<p>thanks a lot. What's the right way to cite a thread on zulip like this?</p>",
        "id": 369271249,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687645587
    },
    {
        "content": "<p>You can make a permalink if the stream is public (and this one is)</p>",
        "id": 369271278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687645624
    },
    {
        "content": "<p>Thanks a lot :)</p>",
        "id": 369271556,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687645830
    },
    {
        "content": "<p>I got some of this by looking at the structure pretty printer, <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L183\"><code>unexpandStructureInstance</code></a>, and then poking around the modules where some of the functions come from.</p>",
        "id": 369271906,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687646108
    },
    {
        "content": "<p>I'm in the middle of trying to write a term elaboration <code>cat_alg_info_for</code> which takes the name of a structure and returns some information about it.</p>\n<p>I have a structure called <code>Cat_Alg_Info</code>, and for the time being, I just want my elaborator to return <code>@Cat_Alg_Info.mk Name</code>, so I've written:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Cat_Alg_Info.mk</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Name</span> <span class=\"o\">[]])</span>\n</code></pre></div>\n<p>But instead of writing out a whole expression for the expression, is there something along the following lines I can write?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Cat_Alg_Info.mk</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 369279164,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687651649
    },
    {
        "content": "<p>Aha, it looks like this will do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">resultStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Cat_Alg_Info.mk</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n  <span class=\"n\">elabTerm</span> <span class=\"n\">resultStx</span> <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 369279628,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687651947
    },
    {
        "content": "<p>There's also the Qq library for writing Exprs, vs these quotations for writing Syntax. You can search for instances of <code>q(</code> and <code>Q(</code> in Mathlib for some examples. This would probably be <code>q(@Cat_Alg_Info.mk Name)</code></p>",
        "id": 369282269,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687653519
    },
    {
        "content": "<p>Ah, very nice!</p>",
        "id": 369282821,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687653842
    },
    {
        "content": "<p>I don't suppose there's an existing typeclass for types that can be converted into <code>Expr</code>s representing themselves? (Or maybe the quote4 library can do that?)</p>",
        "id": 369287455,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687656127
    },
    {
        "content": "<p>That's yet another thing, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ToExpr.toExpr#doc\">docs4#Lean.ToExpr.toExpr</a></p>",
        "id": 369288050,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687656477
    },
    {
        "content": "<p>You'll probably want to import <code>Mathlib.Tactic.ToExpr</code> to also get some additional <code>ToExpr</code> instances and a <code>deriving ToExpr</code> handler</p>",
        "id": 369288160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687656535
    },
    {
        "content": "<p>and also by the way, there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Quote.quote#doc\">docs4#Lean.Quote.quote</a> for turning types into <code>TSyntax `term</code>s that represent themselves.</p>",
        "id": 369288253,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687656596
    },
    {
        "content": "<p>Very nice!</p>\n<p>Well, I think I'm done for this weekend. I now have a term elaborator which takes the name of a structure and produces a list of the names of its fields.</p>\n<p>Some time soon, I'm going to want to make sure that the type of every field is either <code>Type u</code>, or <code>α₁ → ... → αₙ → β</code>, where <code>α₁</code>, ..., <code>αₙ</code>, <code>β</code> are fields whose type is <code>Type u</code>. It looks like maybe the easiest way to do that is going to be to use <code>getProjFnForField?</code> to get the name of each field, and then look up what each projection function returns.</p>",
        "id": 369291590,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687658525
    },
    {
        "content": "<p>Is there a list of all syntax categories and what they contain defined inside Lean, Mathlib, Std, etc?</p>",
        "id": 369513527,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687732804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627517\">Tanner Swett</span> has marked this topic as resolved.</p>",
        "id": 369518772,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687736347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> has marked this topic as unresolved.</p>",
        "id": 369618399,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687770558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Metaprogramming.20a.20structure.20declaration/near/369267366\">said</a>:</p>\n<blockquote>\n<p>It looks like you can get the field types in order using a slightly different approach:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#print_structure_fields \"</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverload</span> <span class=\"n\">c</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">getStructureInfo</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">name</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">c</span> <span class=\"s2\">\"Not a structure\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"field names: {info.fieldNames}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">info.fieldNames.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">info.getProjFn</span><span class=\"bp\">?</span> <span class=\"n\">i</span> <span class=\"bp\">|</span> <span class=\"n\">break</span>\n    <span class=\"k\">let</span> <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">proj</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"n\">msgs</span> <span class=\"o\">:=</span> <span class=\"n\">msgs.push</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{info.fieldNames[i]!} : {proj.type}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">MessageData.joinSep</span> <span class=\"n\">msgs.toList</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Does <code>getStructureInfo?</code> work here on any structure-like type (i.e. single constructor), or only things that are actually declared <code>structure</code>?</p>",
        "id": 369814835,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1687808241
    },
    {
        "content": "<p>That's only for actual structures, which I think is necessary because structure-like types don't come with projections, and you might not have names for all the fields.</p>\n<p>That said, there's a function for getting some information about structure-like types: <a href=\"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Lean/Structure.lean#L195\">https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Lean/Structure.lean#L195</a></p>",
        "id": 369817119,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687808772
    },
    {
        "content": "<p>structure-like appears to be defined to be single constructor, non-recursive, and no indices.</p>",
        "id": 369817393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687808858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Metaprogramming.20a.20structure.20declaration/near/369817119\">said</a>:</p>\n<blockquote>\n<p>That's only for actual structures, which I think is necessary because structure-like types don't come with projections, and you might not have names for all the fields.</p>\n<p>That said, there's a function for getting some information about structure-like types: <a href=\"https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Lean/Structure.lean#L195\">https://github.com/leanprover/lean4/blob/a44dd71ad62a1760e32b0e8a12449e560ddcf492/src/Lean/Structure.lean#L195</a></p>\n</blockquote>\n<p>If there isn't a name for the field and there isn't a projection, then is there no way to project onto the fields for a structure-like type that isn't a structure?</p>",
        "id": 369842155,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1687816222
    },
    {
        "content": "<p>You can always define your own projections, like <code>def Foo.x : Foo -&gt; Nat | .mk x y z =&gt; x</code>, but as I understand it they won't be handled in exactly the same way as native projections.</p>",
        "id": 369848723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687819464
    }
]