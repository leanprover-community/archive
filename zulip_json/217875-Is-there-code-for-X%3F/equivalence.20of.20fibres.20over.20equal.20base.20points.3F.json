[
    {
        "content": "<p>What is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">j</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"n\">j'</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">α</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>called?</p>",
        "id": 381632354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691107008
    },
    {
        "content": "<p>(Presumably it is in the library somewhere!)</p>",
        "id": 381632364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691107018
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.congr#doc\">docs#Equiv.congr</a> ?</p>",
        "id": 381634626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691108219
    },
    {
        "content": "<p><code> Equiv.cast (congrArg α h)</code>?<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.cast#doc\">docs#Equiv.cast</a></p>",
        "id": 381634629,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1691108220
    },
    {
        "content": "<p>Thanks! I might combine those suggestions and add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Equiv.congr</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">j</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Equiv.cast</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">α</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 381636019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691108906
    },
    {
        "content": "<p>That strikes me as not a great name, given how maybe other equivs have congr in their name, and the existence of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.equivCongr#doc\">docs#Equiv.equivCongr</a></p>",
        "id": 381674825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691126584
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.cast#doc\">docs#Equiv.cast</a> really not enough here? It feels a bit overkill to add a special definition for this case</p>",
        "id": 381714266,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1691135025
    },
    {
        "content": "<p>I think the argument goes that it's useful to be able to find <code>h</code> by unification</p>",
        "id": 381739156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691138974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/equivalence.20of.20fibres.20over.20equal.20base.20points.3F/near/381632354\">said</a>:</p>\n<blockquote>\n<p>What is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">j</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"n\">j'</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">α</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n  <span class=\"n\">invFun</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">α</span> <span class=\"n\">h.symm</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span>\n  <span class=\"n\">left_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n  <span class=\"n\">right_inv</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>called?</p>\n</blockquote>\n<p>Can't resist writing it's called 'foo'.</p>",
        "id": 382065022,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1691223726
    },
    {
        "content": "<p>I guess it <em>could</em> be called <code>eqToEquiv</code>, just like we have <code>eqToIso</code>, etc...</p>",
        "id": 382113180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1691234704
    },
    {
        "content": "<p>It is currently called <code>Equiv.transport</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6379\">#6379</a>, where I use it in building the monoidal structure on graded objects. I was not able to find something that worked just using <code>Equiv.cast</code>, but if anyone would like to experiment, they're welcome to push commits. :-)</p>",
        "id": 382114007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691234859
    },
    {
        "content": "<p>These sound somewhat similar to the problems I faced when putting the monoid structure on DirectSum; are the constructions analogous in some way?</p>",
        "id": 382142160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691241503
    },
    {
        "content": "<p>What do you mean by \"putting the monoid structure on DirectSum\"?</p>",
        "id": 382238825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691278653
    },
    {
        "content": "<p>I'm referring to <a href=\"https://github.com/leanprover-community/mathlib4/blob/4412853e2b44449d06f0461dd97599fe7913392b/Mathlib/Algebra/DirectSum/Ring.lean#L226-L259\">these three lemmas</a> and their use in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DirectSum.semiring#doc\">docs#DirectSum.semiring</a></p>",
        "id": 382239125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691278845
    },
    {
        "content": "<p>I don't think it is directly related. The thing Joël and I have done here is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preadditive</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalCategory</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonoidalPreadditive</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">HasFiniteBiproducts</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HasZeroObject</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- The tensor product of graded objects `X` and `Y` is, in each degree `i`,</span>\n<span class=\"sd\">the biproduct over `a + b = i` of `X a ⊗ Y b`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">tensorObj</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject</span> <span class=\"n\">ℕ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"n\">biproduct</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">antidiagonal</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">p.1.1</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"n\">p.1.2</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- The tensor product of morphisms between graded objects is the diagonal map</span>\n<span class=\"sd\">consisting of tensor products of components. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">tensorHom</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject</span> <span class=\"n\">ℕ</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">tensorObj</span> <span class=\"n\">W</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">tensorObj</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">biproduct.map</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">p.1.1</span> <span class=\"bp\">⊗</span> <span class=\"n\">g</span> <span class=\"n\">p.1.2</span>\n\n<span class=\"sd\">/-- The tensor unit in graded `V`-objects is the tensor unit in `V`, supported in grading 0. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">tensorUnit</span> <span class=\"o\">:</span> <span class=\"n\">GradedObject</span> <span class=\"n\">ℕ</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">𝟙</span><span class=\"n\">_</span> <span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\">-- Construction of unitors and associators, and many lemmas.</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonoidalCategory</span> <span class=\"o\">(</span><span class=\"n\">GradedObject</span> <span class=\"n\">ℕ</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 382239442,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691279092
    },
    {
        "content": "<p>If you set <code>V = AddCommGroup</code>, then <code>Mon_ (GradedObject ℕ V)</code> will be equivalent to <code>ℕ</code>-graded rings.</p>",
        "id": 382239516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691279151
    },
    {
        "content": "<p>I assume you use <code>antidiagonal i</code> and not <code>{p // p.1 + p.2 = i}</code> because you need finiteness in some way?</p>",
        "id": 382239966,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691279548
    }
]