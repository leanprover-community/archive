[
    {
        "content": "<p>Hello! is there a Lean 4 function that checks if a string is a substring of another? Something like <code>String.isPrefixOf</code>, except checks infix instead.</p>",
        "id": 340746427,
        "sender_full_name": "Timothy Gu",
        "timestamp": 1678411399
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.isPrefixOf#doc\">docs4#String.isPrefixOf</a></p>",
        "id": 340747224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678411839
    },
    {
        "content": "<p>Looks like we have something called <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=String.substrEq#doc\">docs4#String.substrEq</a></p>",
        "id": 340747390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678411945
    },
    {
        "content": "<p>But I suppose that’s not exactly what you’re looking for</p>",
        "id": 340747478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678412021
    },
    {
        "content": "<p>I looked for this for my course notes and this was the closest I could get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">String.Subset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.Sublist</span> <span class=\"n\">s.data</span> <span class=\"n\">t.data</span>\n</code></pre></div>",
        "id": 340748077,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678412408
    },
    {
        "content": "<p>Ended up just writing one in terms of <code>substrEq</code>. Thanks all. For list there's also <code>List.isInfix</code>, but it's a Prop and can't be evaluated</p>",
        "id": 340755428,
        "sender_full_name": "Timothy Gu",
        "timestamp": 1678417849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572003\">Timothy Gu</span> has marked this topic as resolved.</p>",
        "id": 340755434,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678417853
    },
    {
        "content": "<p>hmmm... there should probably be a computable version of <code>isInfix</code> for lists.</p>",
        "id": 340755832,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678418106
    },
    {
        "content": "<p>isInfix should be decidable already</p>",
        "id": 340789406,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678436511
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.is_infix\">docs#list.is_infix</a></p>",
        "id": 340789448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678436523
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.decidable_infix\">docs#list.decidable_infix</a></p>",
        "id": 340789577,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678436556
    }
]