[
    {
        "content": "<p>Is there a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENNReal.Lp_add_le#doc\">docs#ENNReal.Lp_add_le</a> that is for addition instead of sums? in general I haven't found anything that turns lemmas about sums into lemmas about additions, but that should surely exist?</p>",
        "id": 378732269,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1690365307
    },
    {
        "content": "<p>What would be the statement you're thinking of?</p>",
        "id": 378733006,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690365459
    },
    {
        "content": "<p>For the last part, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.sum_bool#doc\">docs#Fintype.sum_bool</a> is close (but you'd really prefer the version stating <code>a + b = \\sum i, Bool.rec a b i</code> to turn a lemma about <code>Finset.sum</code> into a lemma about <code>+</code>)</p>",
        "id": 378733657,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690365584
    },
    {
        "content": "<blockquote>\n<p>in general I haven't found anything that turns lemmas about sums into lemmas about additions, but that should surely exist?</p>\n</blockquote>\n<p>Usually it doesn't since often the lemma about sums is proved in terms of the addition lemma anyway</p>",
        "id": 378734289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690365701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Addition.20version.20of.20.60ENNReal.2ELp_add_le.60/near/378733006\">said</a>:</p>\n<blockquote>\n<p>What would be the statement you're thinking of?</p>\n</blockquote>\n<p>I need this for proving the triangle inequality for <code>ProdLp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">((</span><span class=\"n\">edist</span> <span class=\"n\">f1</span> <span class=\"n\">g1</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">g1</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span>  <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">f2</span> <span class=\"n\">g2</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">g2</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n<span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">f1</span> <span class=\"n\">g1</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">f2</span> <span class=\"n\">g2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span>  <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">g1</span> <span class=\"n\">h1</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">edist</span> <span class=\"n\">g2</span> <span class=\"n\">h2</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and in <code>Analysis.MeanInequalities</code> I have only found the statements for <code>sum</code>.</p>",
        "id": 378746007,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1690367714
    },
    {
        "content": "<p>(for <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inner.20product.20space.20on.20.CE.B1.20.C3.97.20.CE.B2\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Inner.20product.20space.20on.20.CE.B1.20.C3.97.20.CE.B2</a>)</p>",
        "id": 378747296,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1690367928
    },
    {
        "content": "<p>hm, maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum_pair#doc\">docs#Finset.sum_pair</a> can help</p>",
        "id": 378750230,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1690368481
    },
    {
        "content": "<p>Found a solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ENNReal.Lp_add_le</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">edist</span> <span class=\"n\">f.fst</span> <span class=\"n\">g.fst</span> <span class=\"k\">else</span> <span class=\"n\">edist</span> <span class=\"n\">f.snd</span> <span class=\"n\">g.snd</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">·</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">edist</span> <span class=\"n\">g.fst</span> <span class=\"n\">h.fst</span> <span class=\"k\">else</span> <span class=\"n\">edist</span> <span class=\"n\">g.snd</span> <span class=\"n\">h.snd</span><span class=\"o\">)</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 378809163,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1690379321
    },
    {
        "content": "<p>This should also work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ENNReal.Lp_add_le</span> <span class=\"n\">finset.univ</span>\n  <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">f.fst</span> <span class=\"n\">g.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">f.snd</span> <span class=\"n\">g.snd</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"bp\">·</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">g.fst</span> <span class=\"n\">h.fst</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">edist</span> <span class=\"n\">g.snd</span> <span class=\"n\">h.snd</span><span class=\"o\">))</span> <span class=\"n\">hp</span>\n</code></pre></div>",
        "id": 378832026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690383046
    },
    {
        "content": "<p>You can also use <code>Fin.sum_univ_two</code> with <code>![edist f.fst g.fst, edist f.snd g.snd]</code></p>",
        "id": 379001397,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690433134
    }
]