[
    {
        "content": "<p>Given the empty set in two different types, does mathlib have the homeomorphism (or even the unique) function between these? MWE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">emptyhom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span>  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Homeomorph</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Mathematically, this is obvious (there's a unique function between the empty sets; it's vacuously continuous at each point). I have a proof, but I'm sure this can be golfed much more - and have the itch this should exist somewhere. Loogle and moogle were not helpful, though.</p>",
        "id": 400216350,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699052560
    },
    {
        "content": "<p>Current solution: improvements welcome!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">emptyhom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Homeomorph</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Set.mem_empty_iff_false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Set.mem_empty_iff_false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 400216416,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699052588
    },
    {
        "content": "<p>For what it's worth, mathlib doesn't usually have arguments that just state that a free variable is equal to something, like your <code>hs</code> and <code>ht</code>, as it tends to be easier to just substitute them</p>",
        "id": 400218245,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699053793
    },
    {
        "content": "<p>And I'm guessing you should use <code>def</code> rather than <code>lemma</code> here</p>",
        "id": 400218283,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1699053827
    },
    {
        "content": "<p>Thanks: <a href=\"https://live.lean-lang.org/#code=import%20Mathlib%0A%2F--%20The%20unique%20homeomorphism%20between%20the%20empty%20sets%20in%20%60X%60%20and%20%60Y%60.%20-%2F%0Adef%20emptyhom%20%7BX%20Y%20%3A%20Type*%7D%20%5BTopologicalSpace%20X%5D%20%5BTopologicalSpace%20Y%5D%20%3A%0A%20%20%20%20Homeomorph%20(%E2%88%85%20%3A%20Set%20X)%20(%E2%88%85%20%3A%20Set%20Y)%20%3A%3D%0A%20%20%7B%0A%20%20%20%20toFun%20%3A%3D%20fun%20%E2%9F%A8x%2C%20hx%E2%9F%A9%20%E2%86%A6%20((Set.mem_empty_iff_false%20x).mp%20hx).elim%0A%20%20%20%20invFun%20%3A%3D%20fun%20%E2%9F%A8x%2C%20hx%E2%9F%A9%20%E2%86%A6%20((Set.mem_empty_iff_false%20x).mp%20hx).elim%0A%20%20%20%20left_inv%20%3A%3D%20by%20intro%3B%20aesop%0A%20%20%20%20right_inv%20%3A%3D%20by%20intro%3B%20aesop%0A%20%20%7D%0A\">updated code</a></p>",
        "id": 400219105,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699054488
    },
    {
        "content": "<p>I guess I would expect this to be stated similarly to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.equivOfIsEmpty#doc\">docs#Equiv.equivOfIsEmpty</a> (which answers your question about the unique function also)</p>",
        "id": 400220745,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699056035
    },
    {
        "content": "<p>ie</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">emptyhom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsEmpty</span> <span class=\"n\">Y</span><span class=\"o\">]:</span> <span class=\"n\">Homeomorph</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Equiv.equivOfIsEmpty</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>  <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 400221177,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699056259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Homeomorphism.20between.20empty.20sets.20.28in.20different.20types.29/near/400218245\">said</a>:</p>\n<blockquote>\n<p>For what it's worth, mathlib doesn't usually have arguments that just state that a free variable is equal to something, like your <code>hs</code> and <code>ht</code>, as it tends to be easier to just substitute them</p>\n</blockquote>\n<p>It is true in general but it is worth saying this isn't always a good idea. It leads to a proliferation of ugly and slow calls to convert.</p>",
        "id": 400222106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699056851
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634338\">Michael Rothgang</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Homeomorphism.20between.20empty.20sets.20.28in.20different.20types.29/near/400216416\">said</a>:</p>\n<blockquote>\n<p>Current solution: improvements welcome!</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">emptyhom</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Y</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Homeomorph</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Set.mem_empty_iff_false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"bp\">↦</span> <span class=\"o\">((</span><span class=\"n\">Set.mem_empty_iff_false</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"bp\">▸</span> <span class=\"n\">hx</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span> <span class=\"n\">aesop</span>\n  <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Someone really should put <code>:= by aesop</code> as a default argument here!</p>",
        "id": 400263508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699081200
    },
    {
        "content": "<p>Thanks for all the feedback! I have PRed this lemmas a part of <a href=\"https://github.com/leanprover-community/mathlib4/pull/8160\">#8160</a>.</p>",
        "id": 400295839,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1699102084
    }
]