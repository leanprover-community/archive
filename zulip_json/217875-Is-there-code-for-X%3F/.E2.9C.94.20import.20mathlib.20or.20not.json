[
    {
        "content": "<p>The following works only without  <code>import Mathlib</code>.  Why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">):</span>  <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">]</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 397437350,
        "sender_full_name": "Ming Li",
        "timestamp": 1697696329
    },
    {
        "content": "<p>There is currently a bug which causes <code>a ^ 2</code> to be elaborated as <code>a ^ (2 : ℝ)</code> instead of <code>a ^ (2 : ℕ)</code>, and this bug only shows up once one has the <code>Pow ℝ ℝ</code> instance. You can fix this by adding this to the top of your file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HPow.hPow</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397437809,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697696532
    },
    {
        "content": "<p>Hopefully this bug should be fixed soon.</p>",
        "id": 397437853,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697696561
    },
    {
        "content": "<p>I suspect that replacing ℝ by a complete, linearly ordered, Archimedean field also fixes the bug.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 397438206,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697696754
    },
    {
        "content": "<p>Thanks. It seems that importing more causes the problem and localizing solves it.</p>",
        "id": 397439570,
        "sender_full_name": "Ming Li",
        "timestamp": 1697697517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"654654\">ming</span> has marked this topic as resolved.</p>",
        "id": 397622004,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697773850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/.E2.9C.94.20import.20mathlib.20or.20not/near/397437853\">said</a>:</p>\n<blockquote>\n<p>Hopefully this bug should be fixed soon.</p>\n</blockquote>\n<p>There's a PR (<a href=\"https://github.com/leanprover/lean4/pull/2667\">lean4#2667</a>) that should fix this, and I'm hoping it will be merged in the next couple weeks. (Note that the <code>macro_rules</code> workaround has some shortcomings, and once Lean has a fix all such <code>macro_rules</code> workarounds should be deleted. The <a href=\"https://github.com/leanprover-community/mathlib/pull/6852\">mathlib#6852</a> PR is getting ready for this.)</p>",
        "id": 397623312,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697774427
    }
]