[
    {
        "content": "<p>I would like to prove the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">volume</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n    <span class=\"n\">ENNReal.ofReal</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">n.factorial</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the usual proof proceeds by induction using iterated integrals. However, I think that we are missing the necessary API. For example, I don't think we have the <code>mesurableEquiv</code> between <code>(Fin (n+1) → ℝ) ≃ᵐ (Fin n → ℝ) × ℝ</code> and the fact that it is <code>MeasurePreserving</code>? If there are missing, is there any plan to add them (preferably soon <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )? </p>\n<p>On the other hand, maybe I am missing another simpler way to proceed.</p>",
        "id": 391180097,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1694787022
    },
    {
        "content": "<p>At least for measure-preserving you should be able to use a Haar measure argument (\"the product measure is translation-invariant and hence must be a constant multiple of the measure on R^{n+1} because we know this is Haar measure and there's only one up to constant\")</p>",
        "id": 391180482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694787127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Iterated.20integrals/near/391180482\">said</a>:</p>\n<blockquote>\n<p>At least for measure-preserving you should be able to use a Haar measure argument (\"the product measure is translation-invariant and hence must be a constant multiple of the measure on R^{n+1} because we know this is Haar measure and there's only one up to constant\")</p>\n</blockquote>\n<p>Yes, that's a good point.</p>",
        "id": 391180783,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1694787210
    },
    {
        "content": "<p>You have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measurePreserving_piFinSuccAboveEquiv#doc\">docs#MeasureTheory.measurePreserving_piFinSuccAboveEquiv</a></p>",
        "id": 391183496,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694787846
    },
    {
        "content": "<p>@loogle MeasureTheory.MeasurePreserving, Fin _</p>",
        "id": 391184056,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694787966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Iterated.20integrals/near/391183496\">said</a>:</p>\n<blockquote>\n<p>You have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measurePreserving_piFinSuccAboveEquiv#doc\">docs#MeasureTheory.measurePreserving_piFinSuccAboveEquiv</a></p>\n</blockquote>\n<p>Oh, that's great. I didn't know we had something like that. Thanks!</p>",
        "id": 391184099,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1694787974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> MeasureTheory.MeasurePreserving, Fin _</p>",
        "id": 391184191,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694787994
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_finTwoArrow\">MeasureTheory.measurePreserving_finTwoArrow</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Constructions/Pi.html#MeasureTheory.measurePreserving_finTwoArrow_vec\">MeasureTheory.measurePreserving_finTwoArrow_vec</a>, and <a href=\"https://loogle.lean-fro.org/?q=MeasureTheory.MeasurePreserving%2C%20Fin%20_\">8 more</a></p>",
        "id": 391184194,
        "sender_full_name": "loogle",
        "timestamp": 1694787995
    },
    {
        "content": "<p>Maybe one in the list provided by loogle could even be more suited to your purposes. This tool is really awesome for this kind of question.</p>",
        "id": 391184351,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694788030
    },
    {
        "content": "<p>I've heard <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> have many tricks to work with iterated integrals.</p>",
        "id": 391190711,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694789378
    },
    {
        "content": "<p>Being able to work with them is also pretty awesome ;-)</p>",
        "id": 391192779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694789849
    },
    {
        "content": "<p>Yes, we haven't PR'd it yet but <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> it's in the same branch we were discussing on the <a href=\"https://github.com/leanprover-community/mathlib4/pull/6907\">#6907</a> thread.</p>",
        "id": 391192844,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1694789864
    },
    {
        "content": "<p>IIRC, <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> computed the volume an a Euclidean ball using the multiplicativity of the Gaussian integral. You could probably apply the same trick using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∣</mi><mi>t</mi><mi mathvariant=\"normal\">∣</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\exp(-|t|) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">t</span><span class=\"mord\">∣</span><span class=\"mclose\">)</span></span></span></span> inside of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mo>−</mo><msup><mi>t</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\exp(-t^2) </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord mathnormal\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 391538448,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1694970371
    },
    {
        "content": "<p>That does sound a lot more clever than what I am doing... Although, I'll probably need to think about it more to figure out how to make it work.</p>",
        "id": 391636107,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1695022944
    }
]