[
    {
        "content": "<p>Is there code for filling in the sorries in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">restrictCodomain</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">):</span>  <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">restrictCodomain_def</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">):</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">restrictCodomain</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fieldRange_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">IntermediateField</span> <span class=\"n\">F</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">f.fieldRange</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">f.fieldRange</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">restrictCodomain</span> <span class=\"n\">f</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fieldRange</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>So what I am trying to do in words is:<br>\nStart with an algebra map <code>(f: K →ₐ[F] L)</code> for which I know that its image happens to lie in some field <code>S</code>. Then construct an algebra map<code>(f': K →ₐ[F] S)</code>  which is exactly the same as <code>f</code> except that its codomain is now <code>S</code>. And after that I also want to proof that <code>f</code> and <code>f'</code> have the same image.</p>",
        "id": 385422283,
        "sender_full_name": "Maarten Derickx",
        "timestamp": 1692178029
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=AlgHom.codRestrict#doc\">docs#AlgHom.codRestrict</a></p>",
        "id": 385422794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692178184
    },
    {
        "content": "<p><del>Huh, I guess it's missing. We have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.cod_restrict#doc\">docs#LinearMap.cod_restrict</a>.</del> Nevermind, I was forgetting Lean 4 naming</p>",
        "id": 385422874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692178203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"637200\">Maarten Derickx</span> has marked this topic as resolved.</p>",
        "id": 385453590,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692189696
    }
]