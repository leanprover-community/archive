[
    {
        "content": "<p>I just found myself writing this for my class today:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"sd\">/-- If a type A is equipped with an ℕ-valued \"height function\" `h` and a subset `S`,</span>\n<span class=\"sd\">and if `hs` is a proof that `S` is nonempty, then `smallest_height h hs`</span>\n<span class=\"sd\">returns an element of `S` with smallest height. The proof that it has smallest</span>\n<span class=\"sd\">height is `smallest_height_spec h hs`. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">smallest_height</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">nat.find</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_spec</span> <span class=\"o\">(</span><span class=\"n\">hs.image</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n<span class=\"o\">⟨</span><span class=\"n\">Exists.some</span> <span class=\"n\">hn'</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Exists.some_spec</span> <span class=\"n\">hn'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smallest_height_spec</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsS</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">):</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">smallest_height</span> <span class=\"n\">h</span> <span class=\"n\">hs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">hn'</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">nat.find</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">nat.find_spec</span> <span class=\"o\">(</span><span class=\"n\">hs.image</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Exists.some_spec</span> <span class=\"n\">hn'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">nat.find_min'</span> <span class=\"o\">(</span><span class=\"n\">hs.image</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">h</span> <span class=\"bp\">''</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hsS</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is that already a thing?</p>",
        "id": 341460192,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678713955
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.argmin_on\">docs#function.argmin_on</a>?</p>",
        "id": 341462068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678714373
    },
    {
        "content": "<p>Isn't that just <code>nat.find _ (hs.image h)</code>?</p>",
        "id": 341462094,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678714381
    },
    {
        "content": "<p><del>yes, but</del> not quite, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.argmin_on\">docs#function.argmin_on</a> already has the API.</p>",
        "id": 341462654,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678714498
    },
    {
        "content": "<p>It's not computable though</p>",
        "id": 341462734,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678714511
    },
    {
        "content": "<p>Since when does Kevin care about computability?</p>",
        "id": 341462799,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678714526
    },
    {
        "content": "<p>But point taken</p>",
        "id": 341462919,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678714560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/element.20of.20nonempty.20set.20with.20smallest.20height/near/341462094\">said</a>:</p>\n<blockquote>\n<p>Isn't that just <code>nat.find _ (hs.image h)</code>?</p>\n</blockquote>\n<p>No, that gives an <code>ℕ</code> not an <code>S</code></p>",
        "id": 341463080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678714587
    },
    {
        "content": "<p>Kevin's spelling can be golfed slightly to <code>classical.indefinite_description _ ((nat.find_spec $ hs.image h).imp $ λ _, and.left)</code></p>",
        "id": 341463616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678714714
    },
    {
        "content": "<p>Oh Kevin wants an <code>S</code></p>",
        "id": 341463646,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1678714722
    },
    {
        "content": "<p>Indeed, I want a polynomial of smallest <code>nat_degree</code>.</p>",
        "id": 341470937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678716382
    }
]