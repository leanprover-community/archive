[
    {
        "content": "<p>I have a definition like the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">statement</span><span class=\"o\">))</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">foo.to_fun</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where all the fields except the first capture some properties of the function. Now I would like to put a <code>partial_order</code> instance on <code>foo</code> via the <code>pi.partial_order</code> instance on <code>α → ℕ</code>. How can I do this without repeating all the boilerplate proofs?<br>\n(<code>@[derive partial_order]</code> does not work, which is not suprising, since it is not necessarily clear what the instance should be derived from. Basically, I want to pull it back via <code>coe</code>.)</p>",
        "id": 347734250,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680896411
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/partial_order.lift\">docs#partial_order.lift</a></p>",
        "id": 347734978,
        "sender_full_name": "Reid Barton",
        "timestamp": 1680896735
    },
    {
        "content": "<p>Thanks! (I needed to add a lemma that <code>coe_fn</code> is injective, but it works now.)</p>",
        "id": 347736447,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1680897290
    }
]