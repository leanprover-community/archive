[
    {
        "content": "<p>Is there code for <code>(-r).valuation = r.valuation</code> for either <code>r : \\Z_[2]</code>or <code>r : \\Q_[2]</code>?</p>",
        "id": 327922994,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676436842
    },
    {
        "content": "<p>Should be called <code>valuation_neg</code></p>",
        "id": 327927891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676440310
    },
    {
        "content": "<p>I would be very surprised if that isn't there</p>",
        "id": 327927948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676440330
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation.map_neg\">docs#valuation.map_neg</a> but this is the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic.valuation\">docs#padic.valuation</a> if I understand correctly, and it seems that we don't have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic.valuation_neg\">docs#padic.valuation_neg</a></p>",
        "id": 327929403,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676441238
    },
    {
        "content": "<p>we should have <code>padic.valuation</code> as a genuine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> but I can't seem to find it right now</p>",
        "id": 327929513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676441297
    },
    {
        "content": "<p>oh it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/padic.add_valuation\">docs#padic.add_valuation</a> so you should be able to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_valuation.map_neg\">docs#add_valuation.map_neg</a></p>",
        "id": 327929578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676441351
    },
    {
        "content": "<p>Thank you! Transfering to <code>add_valuation</code> works. I will add to mathlib when I get more lemmas going(?)</p>",
        "id": 327932082,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676442612
    },
    {
        "content": "<p>It's slightly unfortunate that mathlib's development of valuations doesn't really match the usual mathematical usage of the term \"valuation\". When number theorists talk about p-adics (outside of the very particular context of Huber's adic-space theory), what they call \"valuation\" is what mathlib calls \"add_valuation\" -- a map that converts multiplication into addition (and satisfies the triangle inequality, etc). </p>\n<p>I think it wouldn't hurt to add some text to the file docstring for p-adics explaining this</p>",
        "id": 328051369,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676477931
    },
    {
        "content": "<p>I agree that this is not great, but of course half the problem is the inconsistencies in the human literature. I think Maria Ines tried to stick to Bosch-Guentzer-Remmert's notation when she was doing extensions of norms (I convinced her it was canonical). But Huber is also canonical :-/</p>",
        "id": 328051846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676478056
    },
    {
        "content": "<p>Huber's work, and Wedhorn's exposition of it, are canonical for the theory of adic spaces, but I would certainly not consider them canonical texts for p-adic arithmetic! Gouvea's textbook, for instance, is pretty unambiguous that the \"p-adic valuation\" on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is a map into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>. Anyway, I'm not trying to advocate for a change of conventions, just saying that we should perhaps add a bit more documentation to explain what we presently have.</p>",
        "id": 328057431,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676479605
    },
    {
        "content": "<blockquote>\n<p>Anyway, I'm not trying to advocate for a change of conventions</p>\n</blockquote>\n<p>Actually I think it's not a bad idea to migrate and correct the notations, since the padic files are not that big right now</p>",
        "id": 328061072,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676480524
    },
    {
        "content": "<p>Also I think apart from <code>valuation</code> and <code>add_valuations</code> etc, there's also <code>padic_val_nat</code> and <code>padic_val_rat</code> which seems to be duplicates</p>",
        "id": 328061490,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1676480631
    },
    {
        "content": "<p>I generally agree (at least from my experience with the literature on valuation theory) that valuations are usually written in the additive form. But this is awkward to formalize for a few reasons. First, in books we usually write <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><msup><mi>K</mi><mo>×</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\"> v : K^\\times \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span><br>\nwhere <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a field and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> is a totally ordered <em>additive</em> abelian group. To extend it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, we usually add <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>, and to get an absolute value in the rank 1 case we take some exponential. All of these additional (mathematically superficial) steps make it annoying to work with in lean. And because of this, I actually quite prefer the current definition we have for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> taking values in a multiplicative object with 0. Of course, if some API is missing to go back and forth between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_valuation\">docs#add_valuation</a> then it should be added, but I personally think that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/valuation\">docs#valuation</a> should be the preferred definition in mathlib.</p>",
        "id": 328067069,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1676482120
    },
    {
        "content": "<blockquote>\n<p>First, in books we usually write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>:</mo><msup><mi>K</mi><mo>×</mo></msup><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">v : K^\\times \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> where K is a field and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> is a totally ordered <em>additive</em> abelian group.</p>\n</blockquote>\n<p>Indeed; and that's exactly what end-users will expect to see in mathlib, and be confused when they don't. </p>\n<p>One change that wouldn't break anything, and might render the p-adic code less confusing, would be to rename the current <code>valuation</code> as <code>mul_valuation</code>, and the current <code>add_valuation</code> as <code>valuation</code>.</p>",
        "id": 328078135,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676485203
    },
    {
        "content": "<p>An aside: is it worth introducing some kind of classes <code>monoid_hom_mul_to_add</code> and <code>monoid_hom_add_to_mul</code> for maps which convert addition into multiplication and vice versa? Clearly the p-adic valuation would naturally be a <code>mul_to_add_monoid_hom</code>; but the opposite problem comes up in developing Fourier theory, where one needs to consider homomorphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mo>+</mo><mo stretchy=\"false\">)</mo><mo>→</mo><msup><mi mathvariant=\"double-struck\">C</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(R, +) \\to \\mathbb{C}^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">+</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span>, for R a ring; the canonical example is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><msup><mi>e</mi><mrow><mn>2</mn><mi>π</mi><mi>i</mi><mi>x</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">x \\mapsto e^{2\\pi i x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8247em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathnormal mtight\">πi</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, but the case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><msub><mi mathvariant=\"double-struck\">Q</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">R = \\mathbb{Q}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> is interesting too.</p>",
        "id": 328092714,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676489704
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_char\">docs#add_char</a></p>",
        "id": 328096065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676490758
    },
    {
        "content": "<p>That's good to have (but clearly shouldn't be hidden away in <code>number_theory.legendre_symbol</code>). I guess we don't have the mirror image, multiplicative-to-additive definition, though?</p>",
        "id": 328098345,
        "sender_full_name": "David Loeffler",
        "timestamp": 1676491483
    },
    {
        "content": "<p>No indeed. So far we've decided to make-do with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicative\">docs#multiplicative</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive\">docs#additive</a> to reduce code duplication.</p>",
        "id": 328109537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1676495624
    },
    {
        "content": "<p>You'll actually get code multiplication by 4 or 8 or ... when there are several homomorphisms in play...</p>",
        "id": 328112845,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1676497074
    }
]