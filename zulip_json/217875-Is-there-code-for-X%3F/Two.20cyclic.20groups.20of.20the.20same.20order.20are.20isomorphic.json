[
    {
        "content": "<p>I'm looking for something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Finite</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsCyclic</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsCyclic</span> <span class=\"n\">G'</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.card</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">G'</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but I can't seem to find anything similar.</p>",
        "id": 407790749,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsCyclic, MulEquiv</p>",
        "id": 407790782,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493518
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 407790787,
        "sender_full_name": "loogle",
        "timestamp": 1702493519
    },
    {
        "content": "<p>We don't have it.</p>",
        "id": 407790892,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702493553
    },
    {
        "content": "<p>But we should ...</p>",
        "id": 407790935,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493575
    },
    {
        "content": "<p>Also surely you don't need the finiteness assumptions?</p>",
        "id": 407790937,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702493576
    },
    {
        "content": "<p>Right.</p>",
        "id": 407790999,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493600
    },
    {
        "content": "<p>What would be a reasonable way to do this?</p>",
        "id": 407791040,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsCyclic, MulHom</p>",
        "id": 407791175,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493672
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> nothing found</p>",
        "id": 407791176,
        "sender_full_name": "loogle",
        "timestamp": 1702493673
    },
    {
        "content": "<p>Get a generator for each group, map one to the other, extend to a hom. I don't know how to do that last step.</p>",
        "id": 407791229,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702493697
    },
    {
        "content": "<p>My feeling is that this is going to be ugly, but I don't have a better idea.</p>",
        "id": 407791294,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493738
    },
    {
        "content": "<p>At worse, you can do it by hand using the <code>choose</code> tactic on the <code>∀ x, x ∈ zpowers g</code> assumption.</p>",
        "id": 407791300,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702493741
    },
    {
        "content": "<p>BTW, why is loogle not finding <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidHom.map_cyclic#doc\">docs#MonoidHom.map_cyclic</a> ?</p>",
        "id": 407791326,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"644391\">@loogle</span> IsCyclic, MonoidHom</p>",
        "id": 407791422,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702493779
    },
    {
        "content": "<p><span aria-label=\"search\" class=\"emoji emoji-1f50d\" role=\"img\" title=\"search\">:search:</span> <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commGroupOfCycleCenterQuotient\">commGroupOfCycleCenterQuotient</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/GroupTheory/SpecificGroups/Cyclic.html#commutative_of_cyclic_center_quotient\">commutative_of_cyclic_center_quotient</a>, and <a href=\"https://loogle.lean-lang.org/?q=IsCyclic%2C%20MonoidHom\">2 more</a></p>",
        "id": 407791426,
        "sender_full_name": "loogle",
        "timestamp": 1702493779
    },
    {
        "content": "<p>It does <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 407791455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702493793
    },
    {
        "content": "<p>Would be nice if it would know that a <code>MonoidHom</code> is also a <code>MulHom</code>...</p>",
        "id": 407791556,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702493835
    },
    {
        "content": "<p>Probably not, as it would result in a lot of noise from all the stronger structures than the one you're looking for (and arguably sometimes you would instead like Loogle to know that if it can get you a <code>MulHom</code> it should return it when you asked for <code>MonoidHom</code>).</p>",
        "id": 407791984,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702494023
    },
    {
        "content": "<p>Why does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=orderOf_eq_card_of_forall_mem_zpowers#doc\">docs#orderOf_eq_card_of_forall_mem_zpowers</a> assume finiteness?</p>",
        "id": 407797210,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702496329
    },
    {
        "content": "<p>I guess because it uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.card#doc\">docs#Fintype.card</a> and not <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> ...</p>",
        "id": 407797391,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702496401
    },
    {
        "content": "<p>The more general lemma for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.card#doc\">docs#Nat.card</a> seems to be missing.</p>",
        "id": 407797477,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702496423
    },
    {
        "content": "<p>I made some theorems related to this a while ago upon finding they were missing. Would a PR be welcome?</p>",
        "id": 407799026,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702497062
    },
    {
        "content": "<p>So far, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">monoidHomFromGenerator</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Subgroup.zpowers</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">G'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hg'</span> <span class=\"o\">:</span> <span class=\"n\">orderOf</span> <span class=\"n\">g'</span> <span class=\"bp\">∣</span> <span class=\"n\">orderOf</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">G'</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">g'</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">Classical.choose</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Subgroup.mem_zpowers_iff.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hg</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">orderOf_dvd_iff_zpow_eq_one.mp</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"o\">((</span><span class=\"n\">Mathlib.Tactic.Zify.nat_cast_dvd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hg'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">orderOf_dvd_iff_zpow_eq_one.mpr</span> <span class=\"bp\">&lt;|</span>\n    <span class=\"n\">Classical.choose_spec</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Subgroup.mem_zpowers_iff.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hg</span> <span class=\"mi\">1</span>\n  <span class=\"n\">map_mul'</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zpow_add</span><span class=\"o\">,</span> <span class=\"n\">zpow_eq_zpow_iff_modEq</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Int.ModEq.of_dvd</span> <span class=\"o\">((</span><span class=\"n\">Mathlib.Tactic.Zify.nat_cast_dvd</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hg'</span><span class=\"o\">)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">zpow_eq_zpow_iff_modEq</span><span class=\"o\">,</span> <span class=\"n\">zpow_add</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Subgroup.mem_zpowers_iff.mp</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">hg</span> <span class=\"n\">x</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 407799042,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702497070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582393\">Yongyi Chen</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Two.20cyclic.20groups.20of.20the.20same.20order.20are.20isomorphic/near/407799026\">said</a>:</p>\n<blockquote>\n<p>I made some theorems related to this a while ago upon finding they were missing. Would a PR be welcome?</p>\n</blockquote>\n<p>Definitely!</p>",
        "id": 407799089,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702497089
    },
    {
        "content": "<p>Cool! Finally I have something to answer \"What would I like to work on\" for the github request thread...</p>",
        "id": 407799219,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702497125
    },
    {
        "content": "<p><strong>Jujian Zhang</strong>  made <a href=\"https://github.com/leanprover-community/mathlib4/blob/5497c1ce7de219a15bb8b7a3b73be988409b1d3c/Mathlib/Algebra/Category/GroupCat/Injective.lean#L106-L110\">this</a> when showing the category of abelian groups has enough injectives.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simps</span><span class=\"bp\">!</span><span class=\"kd\">]</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equivZModSpanAddOrderOf</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">∙</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">ℤ</span><span class=\"o\">]</span> <span class=\"n\">ℤ</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.span</span> <span class=\"o\">{(</span><span class=\"n\">addOrderOf</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>we should combine it with something like <code>IsCyclic.equivSpanSingleton</code> which can be constructed via <code>topEquiv</code> and <code>IsCyclic.top_eq_span_singleton</code>.</p>",
        "id": 407799453,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702497231
    },
    {
        "content": "<p>(And there should be a multiplicative version.)</p>",
        "id": 407799839,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702497375
    },
    {
        "content": "<p>I had some work recently where I was trying to make it easier to talk about generator of cyclic groups. I didn't PR it because I ran into an issue with <code>to_additive</code> that I mentioned to <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> privately. I have just pushed the <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fgenerator\">branch#j-loreaux/generator</a>. Probably it would help with the arguments above, but I don't have time to check right now.</p>",
        "id": 407800843,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702497732
    },
    {
        "content": "<p>The issue with <code>to_additive</code> is that I wanted it to <em>not</em> additivize certain things. For instance, I provided an equiv between the type <code>Group.Generator G</code> of generators of <code>G</code> and <code>(ZMod (Fintype.card G))ˣ</code>, and I wanted it to not try and additivize the second bit.</p>",
        "id": 407801271,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702497878
    },
    {
        "content": "<p>It looks like there is some interest in having these results. So maybe the various people who have already produced some code can coordinate?</p>",
        "id": 407801742,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702498091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Two.20cyclic.20groups.20of.20the.20same.20order.20are.20isomorphic/near/407801271\">said</a>:</p>\n<blockquote>\n<p>The issue with <code>to_additive</code> is that I wanted it to <em>not</em> additivize certain things. For instance, I provided an equiv between the type <code>Group.Generator G</code> of generators of <code>G</code> and <code>(ZMod (Fintype.card G))ˣ</code>, and I wanted it to not try and additivize the second bit.</p>\n</blockquote>\n<p>This should be fixed by marking <code>ZMod</code> as a \"fixed type\". I don't think <code>to_additive</code> reasons like this yet but it would be very useful if it did.</p>",
        "id": 407802278,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702498310
    },
    {
        "content": "<p>Yes, that's the conversation I had with Floris. It seems that this need for fixed types arises in other places as well (e.g., convolutions).</p>",
        "id": 407803656,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1702498960
    },
    {
        "content": "<p>This is my code from that while ago, which I edited to allow for infinite cardinality.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Group</span> <span class=\"n\">Subgroup</span> <span class=\"n\">AddSubgroup</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">multiplicative_mod_zpowers_mulEquiv_multiplicative_mod_zmultiples</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">zpowers</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≃*</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">zmultiples</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zpowersHom_ker_eq</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zpowersHom</span> <span class=\"n\">G</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">zpowers</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span> <span class=\"o\">(</span><span class=\"n\">orderOf</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">mem_zpowers_iff</span><span class=\"o\">,</span> <span class=\"n\">zpowersHom_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">orderOf_dvd_iff_zpow_eq_one</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">orderOf</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- **Isomorphism from ZMod n to any cyclic group of Nat.card equal to n** -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">multiplicative_zmod_mulEquiv_of_cyclic</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiplicative</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"bp\">≃*</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.card</span> <span class=\"n\">G</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f_surj</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.indefiniteDescription</span> <span class=\"n\">_</span> <span class=\"n\">h.exists_generator</span>\n  <span class=\"k\">have</span> <span class=\"n\">f_ker</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">zpowersHom</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">zpowers</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zpowersHom_ker_eq</span><span class=\"o\">]</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.card_zpowers</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.card_congr</span> <span class=\"o\">(</span><span class=\"n\">Equiv.subtypeUnivEquiv</span> <span class=\"n\">f_surj</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">Int.quotientZmultiplesNatEquivZMod</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMultiplicative</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">multiplicative_mod_zpowers_mulEquiv_multiplicative_mod_zmultiples</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.quotientMulEquivOfEq</span> <span class=\"n\">f_ker</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">QuotientGroup.quotientKerEquivOfSurjective</span> <span class=\"o\">(</span><span class=\"n\">zpowersHom</span> <span class=\"n\">G</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">f_surj</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mulEquiv_of_cyclic_same_card</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">IsCyclic</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcard</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.card</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">hcard</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">multiplicative_zmod_mulEquiv_of_cyclic</span> <span class=\"n\">hG</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">multiplicative_zmod_mulEquiv_of_cyclic</span> <span class=\"n\">hH</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">mulEquiv_of_same_prime_order</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hH</span> <span class=\"o\">:</span> <span class=\"n\">Fintype.card</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">≃*</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mulEquiv_of_cyclic_same_card</span> <span class=\"o\">(</span><span class=\"n\">isCyclic_of_prime_card</span> <span class=\"n\">hG</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">isCyclic_of_prime_card</span> <span class=\"n\">hH</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Nat.card_eq_fintype_card</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hG</span> <span class=\"n\">hH</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hG.trans</span> <span class=\"n\">hH.symm</span>\n</code></pre></div>",
        "id": 407807649,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702500693
    },
    {
        "content": "<p>This would be my first time adding something into Mathlib. I would love suggestions on naming and what files would be appropriate to put this in.</p>",
        "id": 407813524,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702503010
    },
    {
        "content": "<p>You can type <code>#find_home zpowersHom_ker_eq</code> etc. to find the appropriate files.<br>\nMind that lots of your lines exceed the 100 character limit ...</p>",
        "id": 407815063,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702503709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Two.20cyclic.20groups.20of.20the.20same.20order.20are.20isomorphic/near/407800843\">said</a>:</p>\n<blockquote>\n<p>I had some work recently where I was trying to make it easier to talk about generator of cyclic groups. I didn't PR it because I ran into an issue with <code>to_additive</code> that I mentioned to <span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> privately. I have just pushed the <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2Fgenerator\">branch#j-loreaux/generator</a>. Probably it would help with the arguments above, but I don't have time to check right now.</p>\n</blockquote>\n<p>This looks quite good to me. I hope the problem with <code>to_additive</code> will be fixed soon...</p>",
        "id": 407815547,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702503906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Two.20cyclic.20groups.20of.20the.20same.20order.20are.20isomorphic/near/407815063\">said</a>:</p>\n<blockquote>\n<p>Mind that lots of your lines exceed the 100 character limit ...</p>\n</blockquote>\n<p>Yep, I did type an egregious line. How strict is the limit? Would this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zpowersHom_ker_eq</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">zpowersHom</span> <span class=\"n\">G</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"n\">zpowers</span> <span class=\"o\">(</span><span class=\"n\">Multiplicative.ofAdd</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">orderOf</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ext</span> <span class=\"n\">n</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">MonoidHom.mem_ker</span><span class=\"o\">,</span> <span class=\"n\">mem_zpowers_iff</span><span class=\"o\">,</span> <span class=\"n\">zpowersHom_apply</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">orderOf_dvd_iff_zpow_eq_one</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">n</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">orderOf</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n  <span class=\"n\">conv</span> <span class=\"k\">in</span> <span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>need the first line broken up since it is 111 characters?</p>",
        "id": 407816038,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702504123
    },
    {
        "content": "<p>The linter will complain about any line over 100 characters.</p>",
        "id": 407816115,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702504159
    },
    {
        "content": "<p>Oh, how do I run the linter locally?</p>",
        "id": 407816138,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702504173
    },
    {
        "content": "<p><code>#lint</code> at the bottom of the file</p>",
        "id": 407816255,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702504210
    },
    {
        "content": "<p>Does that include the line-length linter? I think it didn't in the Lean3 days.</p>",
        "id": 407816348,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702504263
    },
    {
        "content": "<p>Ah I see. It's not identifying character limit issues -- do I have an incorrect setting?</p>",
        "id": 407816353,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702504266
    },
    {
        "content": "<p>No, those you can find by Ctrl + F <code>.{101}</code> with regex turned on.</p>",
        "id": 407816436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702504312
    },
    {
        "content": "<p>It should complain at least one def/lemma issue ... since the last declaration is def it should be named like <code>mulEquivOfPrimeCardEq</code></p>\n<p>You should check out <a href=\"https://leanprover-community.github.io/contribute/naming.html#general-conventions\">https://leanprover-community.github.io/contribute/naming.html#general-conventions</a></p>",
        "id": 407816673,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702504410
    },
    {
        "content": "<blockquote>\n<p>No, those you can find by Ctrl + F .{101} with regex turned on.</p>\n</blockquote>\n<p>If you use VSCode there should be a vertical bar at the 100-char cutoff at the right end. That's usually good enough except in rare cases when the line includes some very special characters (that the monospace font doesn't support, I suppose).</p>",
        "id": 407817194,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1702504627
    },
    {
        "content": "<p>unfortunately this trick is not quite as effective as it used to be because <code>#align</code> lines go over the limit</p>",
        "id": 407817962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702504897
    },
    {
        "content": "<p>although I think you could filter those out in the same regex</p>",
        "id": 407818095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702504932
    },
    {
        "content": "<p>Made my first pull request! <a href=\"https://github.com/leanprover-community/mathlib4/pull/9038\">https://github.com/leanprover-community/mathlib4/pull/9038</a></p>",
        "id": 407823733,
        "sender_full_name": "Yongyi Chen",
        "timestamp": 1702507637
    }
]