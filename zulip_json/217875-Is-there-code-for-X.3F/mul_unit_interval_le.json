[
    {
        "content": "<p>I want to make use of the following lemma. Should I just prove it locally at the point of use, or is it worthy of <code>algebra.ordered_ring</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_unit_interval_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">mul_one</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">h₂</span> <span class=\"n\">h₄</span> <span class=\"n\">h₃</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 232574933,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617190666
    },
    {
        "content": "<p>I think I remember seeing a collection of that style of lemma somewhere</p>",
        "id": 232575776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617191108
    },
    {
        "content": "<p>Searching <code>ordered_ring.lean</code> for <code>one_mul</code> suggests we only covered the cases with two variables, not three</p>",
        "id": 232575958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617191185
    },
    {
        "content": "<p>I think it's ok to have all these variations. Btw, with <code>simpa</code> it's a oneliner:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mul_unit_interval_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">mul_le_mul</span> <span class=\"n\">h₂</span> <span class=\"n\">h₄</span> <span class=\"n\">h₃</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 232576161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1617191291
    },
    {
        "content": "<p>If you want a one-liner, <code>mul_one c ▸ mul_le_mul h₂ h₄ h₃ h₁</code></p>",
        "id": 232576479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617191443
    },
    {
        "content": "<p>If you're going to add that lemma though, you should probably add variations for each argument of <code>mul_le_mul</code> being <code>1</code></p>",
        "id": 232576567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1617191495
    },
    {
        "content": "<p>Ugh, that requires making some of the other variations of <code>mul_le_mul</code> as well.</p>",
        "id": 232579096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1617192759
    },
    {
        "content": "<p>I wonder whether <code>ordered_monoid_with_zero</code> is the right level of generality... <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 232599055,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1617200250
    }
]