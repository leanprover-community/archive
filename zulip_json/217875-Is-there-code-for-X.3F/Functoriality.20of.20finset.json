[
    {
        "content": "<p>For <a href=\"https://github.com/leanprover-community/mathlib/pull/10955\">#10955</a>, I need the fact that <code>finset</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/alternative\">docs#alternative</a>. It seems like the only ingredients we have in that direction are <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.is_lawful_functor\">docs#finset.is_lawful_functor</a> and <a href=\"https://tqft.net/mathlib/src/data/multiset/functor\">file#src/data/multiset/functor</a>.lean. Am I right?</p>",
        "id": 265811687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640183879
    },
    {
        "content": "<p>I'm thinking this might end up being noncomputable, because the obvious choice for <code>or_else</code> is <code>insert</code> (using the list version for reference) and that requires decidability, for which there's no way to accept a <code>decidable</code> instance</p>",
        "id": 265812724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640184477
    },
    {
        "content": "<p>That is: probably worth having anyway, but not necessarily worth using in your PR</p>",
        "id": 265812805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640184509
    },
    {
        "content": "<p>That's what I'm thinking too. It will be noncomputable for sure. Similarly, <a href=\"https://github.com/leanprover-community/mathlib/pull/2997\">#2997</a> provides a computable |equiv_functor.map instead of the noncomputable one coming from <code>finset.is_lawful_functor</code></p>",
        "id": 265813267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640184766
    },
    {
        "content": "<p>Just for reference, I have now proved <code>is_lawful_applicative finset</code>.</p>",
        "id": 265821794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189370
    },
    {
        "content": "<p>Attacking <code>is_lawful_alternative finset</code> now.</p>",
        "id": 265821830,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189388
    },
    {
        "content": "<p>However, I have no clue about <code>traverse</code> and stuff. What should the definition of <code>traverse</code> be?</p>",
        "id": 265821923,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189420
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/traverse\">docs#traverse</a>? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/traversable\">docs#traversable</a>?</p>",
        "id": 265822168,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640189557
    },
    {
        "content": "<p><a href=\"https://hackage.haskell.org/package/base-4.16.0.0/docs/Prelude.html#v:traverse\">!hoogle traverse</a></p>",
        "id": 265822197,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640189581
    },
    {
        "content": "<p>Sorry what! When did this linkification come into existence?</p>",
        "id": 265822239,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189603
    },
    {
        "content": "<p>Both, Eric</p>",
        "id": 265822263,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Functoriality.20of.20finset/near/265822239\">said</a>:</p>\n<blockquote>\n<p>Sorry what! When did this linkification come into existence?</p>\n</blockquote>\n<p>This linkification actually uses a highly-trained neural network (i.e. me)</p>",
        "id": 265822368,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640189663
    },
    {
        "content": "<p>Probably not both since the first doesn't exist!</p>",
        "id": 265822567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640189771
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.traverse\">docs#list.traverse</a> might help</p>",
        "id": 265822591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640189796
    },
    {
        "content": "<p>I mean <code>traversable.traverse</code>!</p>",
        "id": 265822594,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189799
    },
    {
        "content": "<p>Or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.traverse\">docs#multiset.traverse</a></p>",
        "id": 265822613,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189808
    },
    {
        "content": "<p>The <code>traverse</code> that goes in the <code>traversable</code> instance.</p>",
        "id": 265822630,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640189824
    },
    {
        "content": "<p><code>alternative</code> done. Doing <code>is_comm_applicative</code>. However, is there no <code>is_lawful_alternative</code>?</p>",
        "id": 265833453,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640195847
    },
    {
        "content": "<p>(I moved the discussion about changing the functor typeclasses to <a class=\"stream\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general\">#general</a>)</p>",
        "id": 265959618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640298909
    }
]