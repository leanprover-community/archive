[
    {
        "content": "<p>Not that it's hard to prove but do we really not have this anywhere?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.opposites</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">quiver.hom.op</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">op</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">op</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 274967515,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647001474
    },
    {
        "content": "<p>To be honest I don't even understand what this means. The meaningful notion is faithfulness, and we have <a href=\"mailto:docs@category_theory.functor.op.category_theory.faithful\">docs@category_theory.functor.op.category_theory.faithful</a>.</p>",
        "id": 274969356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647002724
    },
    {
        "content": "<p>Sorry, got confused with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.op\">docs#quiver.hom.op</a> and indeed we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.op_inj\">docs#quiver.hom.op_inj</a></p>",
        "id": 274969543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647002847
    },
    {
        "content": "<p>Ah sorry, you mean that \"taking the opposite\" is an injective function!</p>",
        "id": 274969711,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647002950
    },
    {
        "content": "<p>Then this is true because it is idempotent</p>",
        "id": 274969726,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647002963
    },
    {
        "content": "<p>...part of an equiv, you mean? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 274969771,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647002991
    },
    {
        "content": "<p>Ahahah, yes... but beware that this a rare case in category theory, where two categories are really isomorphic (this is what  we probably call an <code>equiv</code>). The correct notion is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.equivalence\">docs#category_theory.equivalence</a> (it is weaker, but the other one, having a bijection between the objects such that blah blah is very often a bad notion).</p>",
        "id": 274970301,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647003222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Injectivity.20of.20functor.2Eop/near/274969543\">said</a>:</p>\n<blockquote>\n<p>Sorry, got confused with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.op\">docs#quiver.hom.op</a> and indeed we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.op_inj\">docs#quiver.hom.op_inj</a></p>\n</blockquote>\n<p>Equality of morphisms <strong>is</strong> well-behaved.</p>",
        "id": 274970581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647003387
    },
    {
        "content": "<p>Yes, sure. I mean that functors form a category (with natural transformation as morphisms), and <code>op</code> gives an equivalence of categories <code>C ⥤ D ≌ Cᵒᵖ ⥤ Dᵒᵖ</code>. In this specific case this is more that an equivalence of categories (indeed nobody usually even consider this operation), but this is pretty rare.</p>",
        "id": 274971345,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1647003763
    },
    {
        "content": "<p>But I'm not talking about functors (anymore)! <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 274971559,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647003909
    },
    {
        "content": "<p>Can you edit your post to explain what you're talking about then? Equality of functors is an evil concept so injectivity of a map between functor types is an evil concept.</p>",
        "id": 274973218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647004806
    },
    {
        "content": "<p>The equivalence is (C ⥤ D)ᵒᵖ ≌ Cᵒᵖ ⥤ Dᵒᵖ (one extra op) at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor.op_unop_equiv\">docs#category_theory.functor.op_unop_equiv</a></p>",
        "id": 274980738,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1647008362
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 274983149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009493
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 274983156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009498
    },
    {
        "content": "<p>Sorry, misread the question. We should have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quiver.hom.op_inj\">docs#quiver.hom.op_inj</a> (and now that I'm catching up on the later comments, I see that it has already been found!)</p>",
        "id": 274983255,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647009559
    }
]