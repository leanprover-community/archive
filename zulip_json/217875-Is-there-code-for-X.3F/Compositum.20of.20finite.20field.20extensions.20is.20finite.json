[
    {
        "content": "<p>(This question is copy-pasted from one in New Members)</p>\n<p>I need the fact that for finite field extensions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E_1/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E_2/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, contained in some larger field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>, we have that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><msub><mi>E</mi><mn>2</mn></msub><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">E_1E_2 / K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is also finite. Here is a statement of the lemma in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_finrank_is_finrank</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"n\">E2</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E1</span> <span class=\"bp\">∧</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E2</span> <span class=\"bp\">→</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">E1</span> <span class=\"bp\">∨</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">E2</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Does anyone know if this lemma already exists in mathlib? I've looked through a few of the field theory entries and I can't find anything that looks like this.</p>",
        "id": 265322898,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1639758760
    },
    {
        "content": "<p><del>Your LaTeX is a sup but your code is an inf.</del>(fixed)</p>",
        "id": 265323171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639758883
    },
    {
        "content": "<p>I think the idiomatic way to ask the LaTeX question is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.galois</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subalgebra.finite_dimensional_sup</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"n\">E2</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and I agree that we don't seem to have it. Note that it won't follow from the corresponding statement about submodules <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule.finite_dimensional_sup\">docs#submodule.finite_dimensional_sup</a> because the submodule sup is in general smaller than the subalgebra sup.</p>",
        "id": 265323480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639759015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Compositum.20of.20finite.20field.20extensions.20is.20finite/near/265323171\">said</a>:</p>\n<blockquote>\n<p>Your LaTeX is a sup but your code is an inf.</p>\n</blockquote>\n<p>Fixed</p>",
        "id": 265323706,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1639759102
    },
    {
        "content": "<p>AFAIR, we have transitivity, so you need to prove that the dimension of <code>E1 ⊔ E2</code> over <code>E1</code> is less than or equal to the dimension of <code>E2</code> over <code>K</code>.</p>",
        "id": 265323914,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639759197
    },
    {
        "content": "<p>But I never used this part of the library.</p>",
        "id": 265323981,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639759209
    },
    {
        "content": "<p>Do we know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>⊗</mo><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">E_1 \\otimes E_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> surjects onto it?</p>",
        "id": 265324097,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639759260
    },
    {
        "content": "<p>Oh I guess it should be called <code>intermediate_field.finite_dimensional_sup</code></p>",
        "id": 265324106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639759266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> did you need this stuff for e.g. normal closure?</p>",
        "id": 265324552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639759465
    },
    {
        "content": "<p>I can't remember seeing/using this sort of thing. We were just working with towers, I think.</p>",
        "id": 265356306,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639772925
    },
    {
        "content": "<p>It's a shame that this isn't there, this is the sort of thing which is quite fiddly if you're not an expert, and Sebastian is just starting.</p>",
        "id": 265378924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639786210
    },
    {
        "content": "<p>I guess the lemma to prove is that if X spans E2 as a K-module then it spans E1 cup E2 as an E1-module</p>",
        "id": 265379032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639786300
    },
    {
        "content": "<p>But stating that is fiddly</p>",
        "id": 265379048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639786318
    },
    {
        "content": "<p>Here's a proof. I can start PRing it tomorrow, if you would like.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">alg_hom.range_comp</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">f.range.map</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_like.coe_injective</span> <span class=\"o\">(</span><span class=\"n\">set.range_comp</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">alg_hom.range_comp_le_range</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">g.comp</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">≤</span> <span class=\"n\">g.range</span> <span class=\"o\">:=</span>\n<span class=\"n\">set_like.coe_mono</span> <span class=\"o\">(</span><span class=\"n\">set.range_comp_subset_range</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subalgebra.mem_sup_left</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sup_left</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subalgebra.mem_sup_right</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">T</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sup_right</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subalgebra.mul_mem_sup</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊔</span> <span class=\"n\">T</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"o\">(</span><span class=\"n\">subalgebra.mem_sup_left</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">subalgebra.mem_sup_right</span> <span class=\"n\">hy</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebra.tensor_product.product_map_range</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"bp\">=</span> <span class=\"n\">f.range</span> <span class=\"bp\">⊔</span> <span class=\"n\">g.range</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">tensor_product.span_tmul_eq_top</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"o\">:=</span>\n    <span class=\"n\">top_le_iff.mp</span> <span class=\"o\">((</span><span class=\"n\">eq_top_iff.mp</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">algebra.span_le_adjoin</span> <span class=\"n\">R</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">algebra.map_top</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">algebra.adjoin_image</span><span class=\"o\">,</span> <span class=\"n\">algebra.adjoin_le_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">_</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">algebra.tensor_product.product_map_apply_tmul</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">subalgebra.mul_mem_sup</span> <span class=\"o\">(</span><span class=\"n\">f.mem_range_self</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g.mem_range_self</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">algebra.tensor_product.product_map_left</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">alg_hom.range_comp_le_range</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">algebra.tensor_product.product_map_right</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">alg_hom.range_comp_le_range</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subalgebra.finite_dimensional_sup</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"n\">E2</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E2</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"n\">E1.val</span> <span class=\"n\">E2.val</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">g.to_linear_map.range</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_submodule</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">g.to_linear_map.finite_dimensional_range</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">key</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">g.range</span> <span class=\"bp\">=</span> <span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.product_map_range</span><span class=\"o\">,</span> <span class=\"n\">E1.range_val</span><span class=\"o\">,</span> <span class=\"n\">E2.range_val</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">intermediate_field.range_val</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S.val.range</span> <span class=\"bp\">=</span> <span class=\"n\">S.to_subalgebra</span> <span class=\"o\">:=</span>\n<span class=\"n\">S.to_subalgebra.range_val</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_integral_closure_iff_is_integral</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">integral_closure</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">↔</span> <span class=\"n\">algebra.is_integral</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">S</span> <span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">is_integral</span> <span class=\"n\">R</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">forall_congr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_integral_algebra_map_iff</span> <span class=\"n\">subtype.coe_injective</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set_like.forall.symm.trans</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_field_of_is_integral_of_is_field'</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">algebra.is_integral</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hRS</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_field</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">⟩,</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key0</span> <span class=\"o\">:=</span> <span class=\"n\">fg_adjoin_singleton_of_integral</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">R</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebra.mem_adjoin_iff.mpr</span> <span class=\"o\">(</span><span class=\"n\">subring.mem_closure.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">T</span> <span class=\"n\">hT</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">set.singleton_subset_iff.mp</span> <span class=\"o\">(</span><span class=\"n\">set.union_subset_iff.mp</span> <span class=\"n\">hT</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))⟩</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mul_smul_comm</span> <span class=\"n\">y</span> <span class=\"n\">_</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">linear_map.ker_eq_bot</span><span class=\"o\">,</span> <span class=\"n\">eq_bot_iff</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">key'</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"n\">A.to_submodule</span> <span class=\"o\">:=</span> <span class=\"n\">is_noetherian_of_fg_of_noetherian</span> <span class=\"n\">A.to_submodule</span>\n    <span class=\"o\">(</span><span class=\"n\">fg_adjoin_singleton_of_integral</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">module.finite</span> <span class=\"n\">R</span> <span class=\"n\">A.to_submodule</span> <span class=\"o\">:=</span> <span class=\"n\">module.is_noetherian.finite</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">module.finite</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">linear_map.surjective_of_injective</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">key</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">subtype.ext_iff.mp</span> <span class=\"n\">hy</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">intermediate_field.sup_to_subalgebra</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"n\">E2</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E2</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra</span> <span class=\"bp\">=</span> <span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">algebra.is_integral</span> <span class=\"n\">K</span> <span class=\"n\">E1</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">is_algebraic_iff_is_integral'</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">algebra.is_algebraic_of_finite</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">algebra.is_integral</span> <span class=\"n\">K</span> <span class=\"n\">E2</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">is_algebraic_iff_is_integral'</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">algebra.is_algebraic_of_finite</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">algebra.is_integral</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">le_integral_closure_iff_is_integral.mp</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span>\n    <span class=\"o\">(</span><span class=\"n\">le_integral_closure_iff_is_integral.mpr</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_integral_closure_iff_is_integral.mpr</span> <span class=\"n\">h2</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:=</span> <span class=\"n\">is_field_of_is_integral_of_is_field'</span> <span class=\"n\">h3</span> <span class=\"o\">(</span><span class=\"n\">ring_hom.injective</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_intermediate_field</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n    <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hx'</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">inv_zero</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_mem</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h4.mul_inv_cancel</span>\n          <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n            <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx'</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext_iff.mp</span> <span class=\"n\">h</span><span class=\"o\">))),</span>\n        <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"n\">eq_inv_of_mul_right_eq_one</span> <span class=\"o\">(</span><span class=\"n\">subtype.ext_iff.mp</span> <span class=\"n\">hy</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">y.2</span> <span class=\"o\">}</span> <span class=\"o\">}),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">sup_le</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">≤</span> <span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sup_left</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">E2.to_subalgebra</span> <span class=\"bp\">≤</span> <span class=\"n\">E1.to_subalgebra</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2.to_subalgebra</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sup_right</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">E1</span> <span class=\"bp\">≤</span> <span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sup_left</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">E2</span> <span class=\"bp\">≤</span> <span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">le_sup_right</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">intermediate_field.finite_dimensional_sup</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"n\">E2</span> <span class=\"o\">:</span> <span class=\"n\">intermediate_field</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E1</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">E2</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">algebra.tensor_product.product_map</span> <span class=\"n\">E1.val</span> <span class=\"n\">E2.val</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">g.to_linear_map.range</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra.to_submodule</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">g.to_linear_map.finite_dimensional_range</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">key</span> <span class=\"o\">},</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">g.range</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">E1</span> <span class=\"bp\">⊔</span> <span class=\"n\">E2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_subalgebra</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">algebra.tensor_product.product_map_range</span><span class=\"o\">,</span> <span class=\"n\">E1.range_val</span><span class=\"o\">,</span> <span class=\"n\">E2.range_val</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">intermediate_field.sup_to_subalgebra</span> <span class=\"n\">E1</span> <span class=\"n\">E2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265397048,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639809699
    },
    {
        "content": "<p>Oh my goodness! Thank you so much Thomas! (<code> ````lean</code> with four backticks to post code in spoilers BTW)</p>",
        "id": 265407578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639818640
    },
    {
        "content": "<p>Thanks Thomas, that’s incredibly helpful!</p>",
        "id": 265409566,
        "sender_full_name": "Sebastian Monnet",
        "timestamp": 1639821433
    },
    {
        "content": "<p>So I can't quite get Thomas' code running because I seem to be missing an instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Am I missing an import?  Everything else is fine.</p>",
        "id": 265416355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639831299
    },
    {
        "content": "<p>You're probably missing <code>linear_algebra/tensor_product_basis.lean</code>. Sorry, I should have added imports.</p>",
        "id": 265434903,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1639852445
    },
    {
        "content": "<p>Here's the PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/10938\">#10938</a></p>",
        "id": 265617486,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1640035429
    },
    {
        "content": "<p>Thanks Thomas!</p>\n<p>I think that to do the stuff with normality we need a little more about splitting fields, for example \"if L/K is an extension, and f in K[X] splits in E_i for a bunch of subfields, then it splits in their Inf\".</p>",
        "id": 265622594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640038735
    },
    {
        "content": "<p>That particular thing doesn't sound too hard, since you can look at the roots of f. One way of doing this is to factor f in L (in terms of a multiset of elements of L), show that each root lies in the Inf, then construct a multiset in the Inf, and finally invoke the lemma about splitting iff there exists a multiset.</p>",
        "id": 265623599,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1640039471
    },
    {
        "content": "<p>Is there a specific goal that all this is building up to?</p>",
        "id": 265623861,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1640039651
    },
    {
        "content": "<p>Topology on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"normal\">G</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">l</mi></mrow><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Gal}(\\overline{\\mathbb{Q}}/\\mathbb{Q}).</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1389em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">Gal</span></span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8889em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.8089em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)</span><span class=\"mord\">.</span></span></span></span></p>",
        "id": 265623888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640039676
    },
    {
        "content": "<p>We already have it, but we're trying to do it properly (i.e. make a better definition for which it will be possible to develop an API)</p>",
        "id": 265623902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640039697
    }
]