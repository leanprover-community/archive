[
    {
        "content": "<p>When working with several equivalence relations on the same type, it often happens that we have <code>⟦u⟧ = ⟦v⟧</code> in the context, <code>⟦u⟧ = ⟦v⟧</code> in the goal but they have different meanings. One can always click in the info view and figure it out, but is there a way to always have it displayed?</p>",
        "id": 269571430,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643290242
    },
    {
        "content": "<p>It sounds like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. Normally, you should never work with different equivalence relations on a tpy e(and most often you won't work with equivalence relations at all). Can you explain quickly what you are trying to do?</p>",
        "id": 269572238,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643290665
    },
    {
        "content": "<p>Yes, definitely an XY problem here... I am trying to clean up composition of equivalence relations, I have this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">setoid.comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n    <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">quotient.mk</span>\n<span class=\"k\">in</span> <span class=\"n\">setoid.ker</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I want to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">setoid.comp.iso</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">s.comp</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(i.e., somehow <code>⟦⟦u⟧⟧ = ⟦⟦v⟧⟧ &lt;-&gt; ⟦u⟧ = ⟦v⟧</code>)</p>",
        "id": 269572777,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643290940
    },
    {
        "content": "<p>Maybe doing something like <code>let V' : Type := V</code> somewhere would help, but as I understand it that would change the definition and I would have to trade my problem for a lot of <code>(x : V')</code> all over the place to select which relation I am talking about.</p>",
        "id": 269573020,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291067
    },
    {
        "content": "<p>Following a previous hint here, I am in fact doing <code>let f : V -&gt; quotient s := quotient.mk'</code> and replacing the bracket notation with <code>f u</code>, which makes input clearer but confuses <code>rw</code> a lot</p>",
        "id": 269573260,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291138
    },
    {
        "content": "<p>(and then applying lemmas from mathlib ends up with brackets in the context anyway)</p>",
        "id": 269573389,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291186
    },
    {
        "content": "<p>If you are trying to clean up composition of equivalence relations, I am not surprised you run into difficulties related to equivalence relations. To un-xy even more, why would you want to work with equivalence relations? (Essentially, these show up very seldom, and that's probably why you run into API problems).</p>",
        "id": 269573704,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643291325
    },
    {
        "content": "<p>I am playing around with graphs and I want to define the transitivity of the contraction operation (as in, the contraction of a contraction can be obtained as a contraction of the initial graph). It felt natural to define the contraction of a graph as a graph on the quotient by whatever I am contracting.</p>",
        "id": 269574159,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291510
    },
    {
        "content": "<p>Like so,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotient_graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"n\">x'</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">⟦</span><span class=\"n\">y'</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">G.adj</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">,</span>\n    <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₃</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h₀.symm</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₃.symm</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">h₀</span> <span class=\"n\">rfl</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269574405,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291597
    },
    {
        "content": "<p>Do you imply that I should rather do this instead,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">push_graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span>\n</code></pre></div>\n<p>or something similar?</p>",
        "id": 269574697,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643291737
    },
    {
        "content": "<p>Yes, your last proposition would seem more natural (since it is strictly more general). But I've not played at all with our graph library, so I am not in a good position to give a better advice, sorry!</p>",
        "id": 269575083,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643291886
    },
    {
        "content": "<p>Indeed it is better that way because it doesn't constrain the end type.</p>",
        "id": 269575478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643292049
    },
    {
        "content": "<p>Ah, and in addition <code>push G (f.comp g)</code> ends up being exactly the same as <code>push (push G g) f</code> rather than isomorphic by some abstract nonsense stuff.</p>",
        "id": 269575629,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643292120
    },
    {
        "content": "<p>By the way, do you really need surjectivity of <code>f</code> for your definition?</p>",
        "id": 269578679,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643293378
    },
    {
        "content": "<p>OK, it does feel a <em>lot</em> more natural:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">simple_graph</span>\n    <span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"n\">V''</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">}</span>\n\n    <span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">simple_graph</span> <span class=\"n\">V'</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span>\n        <span class=\"n\">adj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">y'</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∧</span> <span class=\"n\">G.adj</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span><span class=\"o\">,</span>\n        <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₃</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">h₀.symm</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₃.symm</span><span class=\"o\">⟩,</span>\n        <span class=\"n\">loopless</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">h₀</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"n\">h₀</span> <span class=\"n\">rfl</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">∗</span><span class=\"n\">g</span> <span class=\"bp\">`</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">push</span> <span class=\"n\">f</span> <span class=\"n\">G</span>\n\n    <span class=\"kd\">lemma</span> <span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V'</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V''</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">g</span><span class=\"bp\">∘</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∗</span><span class=\"n\">g</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">∗</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∗</span><span class=\"n\">g</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n        <span class=\"n\">ext</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₃</span><span class=\"o\">,</span><span class=\"n\">h₄</span><span class=\"o\">⟩,</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₃</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">h₄</span><span class=\"o\">⟩,</span>\n            <span class=\"n\">substs</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">g</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₁</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">x'</span><span class=\"o\">,</span><span class=\"n\">y'</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">,</span><span class=\"n\">h₃</span><span class=\"o\">,</span><span class=\"n\">h₄</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">h₅</span><span class=\"o\">,</span><span class=\"n\">h₆</span><span class=\"o\">,</span><span class=\"n\">h₇</span><span class=\"o\">⟩,</span> <span class=\"n\">substs</span> <span class=\"n\">x'</span> <span class=\"n\">y'</span> <span class=\"n\">x''</span> <span class=\"n\">y''</span><span class=\"o\">,</span>\n            <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">h₇</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">simple_graph</span>\n</code></pre></div>",
        "id": 269578769,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643293410
    },
    {
        "content": "<p>(and indeed there is no need for surjectivity at this point)</p>",
        "id": 269578909,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643293447
    },
    {
        "content": "<p>Shouldn't it just be called <code>image</code>? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 269579121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643293530
    },
    {
        "content": "<p>I would call it <code>f G</code></p>",
        "id": 269579270,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643293587
    },
    {
        "content": "<p>so yes, image, push-forward, kind of adjoint of <code>on_fun</code> or something along these lines.</p>",
        "id": 269579783,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643293801
    },
    {
        "content": "<p>A little trick : <code>rfl</code> works in <code>rintro</code> (it identifies variables that can be identified), so you won't need the <code>substs</code>. For instance, the last two lines can be replaced with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">y'</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₇</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₇</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(You could also add spaces after the commas and choose meaningful names for the assumptions, but that's less important :-)</p>",
        "id": 269579903,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643293832
    },
    {
        "content": "<p>And since you won't need <code>h₄</code>, you can tell Lean to dismiss it right now, with <code>-</code>, as in </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₇</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">h₇</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269580217,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1643293936
    },
    {
        "content": "<p>I will do that. So far it was a write-only proof adding stuff inside the <code>⟨⟩</code> as long as I could <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 269580838,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643294172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> has marked this topic as resolved.</p>",
        "id": 269583829,
        "sender_full_name": "Notification Bot",
        "timestamp": 1643295357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.9C.94.20Pretty.20printing.20of.20equivalence.20classes/near/269579121\">said</a>:</p>\n<blockquote>\n<p>Shouldn't it just be called <code>image</code>? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>What is the semantic difference between image and push-forward? I always felt like they were kind of synonymous and push-forward carried the additional implication that you are transporting a structure onto a pre-existing object (in which case, here I am transporting the graph structure onto an existing type), that might be from the probabilistic tradition of saying image measure or push-forward measure for the same thing...</p>",
        "id": 269588659,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643297201
    },
    {
        "content": "<p>I mentioned this last time, but your <code>setoid.comp</code> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.comap\">docs#setoid.comap</a>, isn't it?</p>",
        "id": 269594037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1643299307
    },
    {
        "content": "<p>I've just never seen <code>push_forward</code> as a name, and your definition is very similar to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.image\">docs#set.image</a></p>",
        "id": 269596143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643300085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/.E2.9C.94.20Pretty.20printing.20of.20equivalence.20classes/near/269594037\">said</a>:</p>\n<blockquote>\n<p>I mentioned this last time, but your <code>setoid.comp</code> is just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.comap\">docs#setoid.comap</a>, isn't it?</p>\n</blockquote>\n<p>Yes, pretty much, it's a special case of it (I kept the <code>setoid.ker</code> version because I find it more intuitive). My issue occurred in defining the isomorphism (corresponding to <code>comap_quotient_equiv</code>) without having to make it <code>noncomputable</code>.</p>",
        "id": 269630862,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1643314263
    },
    {
        "content": "<p>Yaël, push-forward and pull-back is the normal terminology for *manyù things in math. It's only here that they are called map and comap.</p>",
        "id": 269638709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643317932
    },
    {
        "content": "<p>Searching for <code>pushforward</code> in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>rg pushforward <span class=\"p\">|</span> wc -l\n<span class=\"m\">276</span>\n</code></pre></div>",
        "id": 269682040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643340715
    },
    {
        "content": "<p>I'm willing to bet the words <code>pushforward</code> and <code>pullback</code> are even more common than <code>regular</code> and <code>normal</code>.</p>",
        "id": 269684186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643342927
    }
]