[
    {
        "content": "<p>Looking for a lemma like... is it even true <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 310173022,
        "sender_full_name": "Ben",
        "timestamp": 1668509081
    },
    {
        "content": "<p>In general it is (much) better to have a math proof before starting formalizing stuff. So first of all you should find a pen and paper proof, and then think about the formalization (for example, do you know that <code>a ≠ 0</code> means <code>a = 0 → false</code> in Lean?).</p>",
        "id": 310173695,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668509325
    },
    {
        "content": "<p>Ya I sort of understand all the parts. Hoping writing it out in Lean makes me see how it all goes together. I now have the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">division_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">eq_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:=</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But it fails here because <code>zero_ne_one</code> is based on <code>mul_zero_one_class</code> (or something like that) and doesn't like it that I am using it in the context of a ring.</p>",
        "id": 310175775,
        "sender_full_name": "Ben",
        "timestamp": 1668510083
    },
    {
        "content": "<p><code>zero_ne_one</code> is the correct lemma to use. Don't worry about the scaring <code>mul_zero_one_class</code>: mathlib is full of absurdly general notions, that are useful because of formalization, but are usually ridiculous in mathematics. The point is that Lean is able to realize by itself that a <code>ring</code> is also a <code>mul_zero_one_class</code>.</p>\n<p>The error comes from the fact that when you write <code>have h2 := zero_ne_one</code> Lean cannot figure out which ring (or to which <code>mul_zero_one_class</code> to be precise) you are talking about (if you only look at this line this is completely impossible). You can just write <code>exact zero_ne_one h1</code> and should work.</p>",
        "id": 310177297,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668510615
    },
    {
        "content": "<p>The difference is that now <code>h1</code> is <code>0 = 1</code> <em>in <code>R</code></em>, so Lean can guess the ring to use in <code>zero_ne_one</code>.</p>",
        "id": 310177414,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1668510678
    },
    {
        "content": "<p>At yes I see the inference won't work with just <code>have h2</code>. Works now <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 310177815,
        "sender_full_name": "Ben",
        "timestamp": 1668510842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 310177833,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668510846
    }
]