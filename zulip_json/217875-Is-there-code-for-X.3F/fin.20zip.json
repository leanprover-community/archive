[
    {
        "content": "<p>Does something like this already exist in mathlib that I did not see?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fin_zip</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">σ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span>\n    <span class=\"n\">function.update</span>\n        <span class=\"o\">(</span><span class=\"n\">fin_zip</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"n\">i</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 299687209,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663652931
    },
    {
        "content": "<p>I'd guess not.</p>",
        "id": 299691253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663655809
    },
    {
        "content": "<p>It's supposed to be a <code>function.update</code> at a finite number of points. Is there a simpler way to define it?</p>",
        "id": 299693091,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663657001
    },
    {
        "content": "<p>The pair of tuples seems an inconvenient way to provide the data. Why not just a <code>list (\\a \\times \\b)</code>? (Which you would then <code>fold</code> over.)</p>",
        "id": 299693461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663657193
    },
    {
        "content": "<p>Yeah, that might work. I assumed I needed tuples because I needed them in other places in the project, but they might not be necessary here.</p>",
        "id": 299694313,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663657638
    },
    {
        "content": "<p>Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">function.update_list</span>\n    <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">pairs</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">list.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">σ'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">function.update</span> <span class=\"n\">σ'</span> <span class=\"n\">p.fst</span> <span class=\"n\">p.snd</span><span class=\"o\">)</span> <span class=\"n\">σ</span> <span class=\"n\">pairs</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">function.update_list</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)])</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 299700082,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663660479
    },
    {
        "content": "<p>I think I still need one that takes tuples after all though.</p>",
        "id": 299700361,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663660623
    },
    {
        "content": "<p>You can call that function with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.of_fn\">docs#list.of_fn</a> if you have two tuples</p>",
        "id": 299701184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663661023
    },
    {
        "content": "<p>Yeah, I guess. I was trying to make it as direct as possible because I need to deal with it in proofs.</p>",
        "id": 299702667,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663661675
    },
    {
        "content": "<p>Thank you for the suggestion though.</p>",
        "id": 299702977,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663661809
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 300067125,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663813703
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 300067328,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1663813920
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 300077743,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1663823354
    }
]