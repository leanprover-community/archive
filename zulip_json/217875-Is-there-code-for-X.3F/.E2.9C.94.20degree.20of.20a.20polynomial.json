[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> What is the best proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>?<br>\nI think you were implementing a tactic for stuff like this, but I can't find the topic right now...</p>",
        "id": 281553013,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651946722
    },
    {
        "content": "<p>The tactic is very simple at the moment and is <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/sorting.20.60expr.60s.20that.20.22are.22.20.60nat.60s/near/281393258\">here</a>.</p>",
        "id": 281553127,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651946876
    },
    {
        "content": "<p>For the moment, it works with <code>nat_degree</code> and equalities.  So, it might prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 281553189,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651946917
    },
    {
        "content": "<p>The tactic linked above does not yet \"work out of the box\".  Let me see if I can get the statement that I wrote to work.</p>",
        "id": 281553208,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651946972
    },
    {
        "content": "<p>If you want to prove your statement, I still think that you might find it easier to prove the stronger</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 281553268,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651947029
    },
    {
        "content": "<p>(I know my way around <code>nat_degree</code> better than <code>degree</code> and would use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_add_eq_left_of_nat_degree_lt\">docs#polynomial.nat_degree_add_eq_left_of_nat_degree_lt</a>.)</p>",
        "id": 281553299,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651947089
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_add_eq_left_of_degree_lt\">docs#polynomial.degree_add_eq_left_of_degree_lt</a> seems to exist.</p>",
        "id": 281553349,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651947139
    },
    {
        "content": "<p>After that, you are left with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_X_pow\">docs#polynomial.degree_X_pow</a> (?) and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_C\">docs#polynomial.degree_C</a> (?).  Edit: the links should work.</p>",
        "id": 281553369,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651947196
    },
    {
        "content": "<p>OK, a first attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₄</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.degree_X_pow</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₀</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">polynomial.degree_C</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcomp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₀</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">],</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">polynomial.degree_add_eq_left_of_degree_lt</span> <span class=\"n\">hcomp</span><span class=\"o\">,</span> <span class=\"n\">h₄</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Still looks a bit clumsy...</p>",
        "id": 281553726,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651947702
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degree_add_eq_left_of_degree_lt</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">degree_X_pow</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">degree_C</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">with_bot.coe_lt_coe.mpr</span> <span class=\"n\">zero_lt_four</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281553795,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651947759
    },
    {
        "content": "<p>A little shorter.</p>",
        "id": 281553798,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651947763
    },
    {
        "content": "<p>For your initial statement, you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">ne_of_gt</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">with_bot.coe_lt_coe.mpr</span> <span class=\"n\">zero_lt_four</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degree_add_eq_left_of_degree_lt</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"n\">degree_X_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">degree_C</span> <span class=\"o\">(</span><span class=\"n\">one_ne_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">with_bot.coe_lt_coe.mpr</span> <span class=\"n\">zero_lt_four</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 281554243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651948330
    },
    {
        "content": "<p>However, I agree: these lemmas are clumsy to prove, no matter how much golfing you attempt.</p>",
        "id": 281554283,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651948414
    },
    {
        "content": "<p>Thanks!<br>\n(I need this to show that the polynomial has a root, assuming <code>F</code> to be algebraically closed...)</p>",
        "id": 281554338,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651948473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> has marked this topic as resolved.</p>",
        "id": 281554362,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651948544
    },
    {
        "content": "<p>For the record, this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">C</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">compute_degree</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note the tweaking: <code>F</code> is no longer a field, but a non-trivial semiring <em>and</em> I replaced <code>C 1</code> with <code>C 1 * X ^ 0</code>. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 281554431,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651948613
    },
    {
        "content": "<p>Of course, once the tactic is polished, neither of these changes should be needed.</p>",
        "id": 281554445,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651948642
    },
    {
        "content": "<p>Btw, Michael, if you</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span>\n</code></pre></div>\n<p>then you can simply write <code>C 1</code> and <code>X ^ 5</code> as well as <code>f : R[X]</code>.<br>\n(I changed the code above to highlight this.)</p>",
        "id": 281554526,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651948719
    },
    {
        "content": "<p>I just need this within a single proof, but it may still be a good idea to do that.</p>",
        "id": 281554632,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651948887
    },
    {
        "content": "<p>If you merge <a href=\"https://github.com/leanprover-community/mathlib/pull/14040\">#14040</a> into your branch, then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nat_degree</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span> <span class=\"bp\">^</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">polynomial.C</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">compute_degree</span>\n</code></pre></div>\n<p>works!</p>",
        "id": 281643965,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1652077768
    },
    {
        "content": "<p>OK, but this is needed in some stuff that is supposed to go into mathlib fairly soon...</p>",
        "id": 281671595,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652097141
    }
]