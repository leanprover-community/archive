[
    {
        "content": "<p>Is it possible to put something like <code>C</code> <code>#ifdef</code>s around blocks of code? For example, I have a number of theorems that can apply to both natural deduction and Hilbert style first order logic formulas, and I would like to include those theorems in separate natural deduction and Hilbert proofs without copying and pasting and removing the induction cases that don't apply. My thought was to put <code>#ifdefs</code> around the induction cases that apply to each, and a <code>#define</code> statement in the files that import these common proofs. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Hilbert.lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Example.lean</span>\n\n<span class=\"c1\">-- ND.lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">eq_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">not_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">imp_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">forall_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n  <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n\n<span class=\"bp\">#</span><span class=\"n\">define</span> <span class=\"n\">ND</span>\n<span class=\"kn\">import</span> <span class=\"n\">Example.lean</span>\n\n<span class=\"c1\">-- Example.lean</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">blah</span>\n  <span class=\"bp\">...</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">...</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">F</span>\n  <span class=\"n\">case</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">|</span> <span class=\"n\">pred_var_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n  <span class=\"n\">case</span> <span class=\"n\">eq_</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n  <span class=\"n\">case</span>\n    <span class=\"n\">true_</span>\n    <span class=\"c1\">-- ifdef ND</span>\n    <span class=\"bp\">|</span> <span class=\"n\">false_</span>\n    <span class=\"c1\">-- endif</span>\n  <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n  <span class=\"n\">case</span> <span class=\"n\">not_</span> <span class=\"n\">_</span> <span class=\"n\">phi_ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n  <span class=\"n\">case</span>\n    <span class=\"n\">imp_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"n\">phi_ih</span> <span class=\"n\">psi_ih</span>\n    <span class=\"c1\">-- ifdef ND</span>\n    <span class=\"bp\">|</span> <span class=\"n\">and_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"n\">phi_ih</span> <span class=\"n\">psi_ih</span>\n    <span class=\"bp\">|</span> <span class=\"n\">or_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"n\">phi_ih</span> <span class=\"n\">psi_ih</span>\n    <span class=\"bp\">|</span> <span class=\"n\">iff_</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"n\">phi_ih</span> <span class=\"n\">psi_ih</span>\n    <span class=\"c1\">-- endif</span>\n  <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n  <span class=\"n\">case</span>\n    <span class=\"n\">forall_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"n\">phi_ih</span>\n    <span class=\"c1\">-- ifdef ND</span>\n    <span class=\"bp\">|</span> <span class=\"n\">exists_</span> <span class=\"n\">x</span> <span class=\"n\">phi</span> <span class=\"n\">phi_ih</span>\n    <span class=\"c1\">-- endif</span>\n  <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 378258107,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1690229051
    },
    {
        "content": "<p>I realize that the logic doesn't work with the imports, but I hope it describes the problem I am trying to solve.</p>",
        "id": 378310320,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1690247611
    },
    {
        "content": "<p>I suppose one could replace the imports with calls to some kind of macro template?</p>",
        "id": 378310901,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1690247828
    }
]