[
    {
        "content": "<p>A feature that I found very useful when meta-programming in Lean3, was the ability to \"enter meta mode\" inside tactic proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">do</span> <span class=\"o\">{</span>  <span class=\"c1\">-- meta code here</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">%%</span><span class=\"n\">lhs</span> <span class=\"bp\">=</span> <span class=\"bp\">%%</span><span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">target</span><span class=\"o\">,</span>\n      <span class=\"n\">trace</span> <span class=\"n\">lhs</span><span class=\"o\">,</span>\n      <span class=\"n\">skip</span> <span class=\"o\">},</span>\n  <span class=\"c1\">--  back to tactic</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is something similar available in Lean4?  I find it a little laborious to have to produce a stub of a tactic to be able to test what it does, rather than \"trying it out\" directly.</p>",
        "id": 363352222,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685813010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I'm not sure if there's already something built-in, but here's something I came up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Qq</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"run \"</span> <span class=\"n\">colGt</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTermEnsuringType</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n  <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">tac</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">tac</span>\n  <span class=\"k\">let</span> <span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">←</span> <span class=\"n\">mkAuxName</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">getCurrNamespace</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mkStr</span> <span class=\"s2\">\"_run\"</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span>\n    <span class=\"o\">{</span> <span class=\"n\">name</span>        <span class=\"o\">:=</span> <span class=\"n\">declName</span>\n      <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n      <span class=\"n\">type</span>        <span class=\"o\">:=</span> <span class=\"n\">ty</span>\n      <span class=\"n\">value</span>       <span class=\"o\">:=</span> <span class=\"n\">tac</span>\n      <span class=\"n\">hints</span>       <span class=\"o\">:=</span> <span class=\"n\">ReducibilityHints.opaque</span>\n      <span class=\"n\">safety</span>      <span class=\"o\">:=</span> <span class=\"n\">DefinitionSafety.unsafe</span> <span class=\"o\">}</span>\n  <span class=\"n\">Term.ensureNoUnassignedMVars</span> <span class=\"n\">decl</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">try</span>\n      <span class=\"n\">addAndCompile</span> <span class=\"n\">decl</span>\n      <span class=\"n\">unsafe</span> <span class=\"n\">evalConst</span> <span class=\"o\">(</span><span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">declName</span>\n    <span class=\"n\">finally</span>\n      <span class=\"n\">setEnv</span> <span class=\"n\">env</span>\n  <span class=\"n\">res</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getMainTarget</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"target is {t}\"</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">rhs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Tactic.getMainTarget</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">return</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"lhs = {lhs}\"</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 363369762,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685820351
    },
    {
        "content": "<p>Wow Kyle, thank you so much!  I'm on mobile, but I'm looking forward to trying it out!</p>",
        "id": 363371637,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685821225
    },
    {
        "content": "<p>This feels like meta-meta-programming!</p>",
        "id": 363373752,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685822174
    },
    {
        "content": "<p>Thanks again Kyle: I've tried is very briefly and it looks awesome!  I'll be using it very often!</p>",
        "id": 363375533,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685823087
    },
    {
        "content": "<p>I'm curious though if you had an alternative way of creating a local context to develop and debug some meta-code.</p>\n<p>Until <code>run</code> I would create a tactic via <code>elab</code> and then use it in an example later: it feels somewhat clubky.</p>\n<p>Do you have a more direct approach?</p>",
        "id": 363376737,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685823658
    },
    {
        "content": "<p><code>run_tac</code></p>",
        "id": 363378140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685824408
    },
    {
        "content": "<p>is in std I think</p>",
        "id": 363378157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685824419
    },
    {
        "content": "<p><code>Mathlib.Tactic.RunCmd</code></p>",
        "id": 363378291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685824495
    },
    {
        "content": "<p>there are a few variations:</p>\n<ul>\n<li><code>run_tac code</code> is a tactic that runs <code>code : TacticM Unit</code></li>\n<li><code>run_cmd code</code> is a command that runs <code>code : CommandElabM Unit</code></li>\n<li><code>by_elab code</code> is a term that runs <code>code : TermElabM Expr</code></li>\n</ul>",
        "id": 363378539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685824625
    },
    {
        "content": "<p>Thanks Mario!  I was a little surprised that it did not exist, given how useful I thought that it was!</p>",
        "id": 363378919,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685824845
    }
]