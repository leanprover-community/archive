[
    {
        "content": "<p>As a way of teaching myself some tactic-writing, I have been toying around with <code>extractGoal</code>.  Has this tactic already been ported?  I could not find it...</p>",
        "id": 362824507,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685639047
    },
    {
        "content": "<p>It looks like it hasn't (it's not in std4, mathlib4, nor either of their lists of pending PRs)</p>",
        "id": 362825715,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685639315
    },
    {
        "content": "<p>Ok, so I'll give it a try!</p>",
        "id": 362825888,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685639358
    },
    {
        "content": "<p>Here is a first attempt: there are some issues, but I don't have more time today!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dict</span> <span class=\"o\">:</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"(\"</span><span class=\"o\">,</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"{\"</span><span class=\"o\">,</span> <span class=\"s2\">\"}\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">strictImplicit</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"⦃\"</span><span class=\"o\">,</span> <span class=\"s2\">\"⦄\"</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">instImplicit</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"[\"</span><span class=\"o\">,</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ppLdecl</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">LocalDecl</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Format</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">d.binderInfo.isInstImplicit</span> <span class=\"k\">then</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"\"</span>\n            <span class=\"k\">else</span>\n              <span class=\"k\">let</span> <span class=\"n\">prename</span> <span class=\"o\">:=</span> <span class=\"n\">d.userName.toString</span>\n              <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">prename</span> <span class=\"bp\">==</span> <span class=\"s2\">\"this\"</span> <span class=\"k\">then</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"_this\"</span> <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{prename}\"</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\" : \"</span>\n<span class=\"k\">let</span> <span class=\"n\">middle</span> <span class=\"o\">:=</span> <span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">d.type</span><span class=\"o\">)</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">dict</span> <span class=\"n\">d.binderInfo</span>\n<span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">++</span> <span class=\"n\">middle</span> <span class=\"bp\">++</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: Deal with universes</span>\n<span class=\"c1\">-- TODO: Deal with `let`</span>\n<span class=\"c1\">-- TODO: Add tactic code actions?</span>\n<span class=\"c1\">-- TODO: Deal with named instances</span>\n<span class=\"c1\">-- TODO: `extractGoal thmName`</span>\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">extractGoal</span><span class=\"o\">)</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"s2\">\"extractGoal\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"k\">let</span> <span class=\"n\">dc</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.decls.toList.reduceOption.drop</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">names</span> <span class=\"bp\">←</span> <span class=\"n\">dc.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ppLdecl</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n  <span class=\"k\">let</span> <span class=\"n\">targ</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{← ppExpr g}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">bod</span> <span class=\"o\">:=</span> <span class=\"o\">((</span><span class=\"n\">names.drop</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">    \"</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"example \"</span> <span class=\"bp\">++</span> <span class=\"n\">names</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span><span class=\"o\">))</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\" :</span><span class=\"se\">\\n</span><span class=\"s2\">    \"</span> <span class=\"bp\">++</span> <span class=\"n\">targ</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">bod</span> <span class=\"bp\">++</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\" := by</span><span class=\"se\">\\n</span><span class=\"s2\">  sorry\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">tr1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">⦃</span><span class=\"n\">_g</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">⦄</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_d</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"n\">_x</span> <span class=\"bp\">∧</span> <span class=\"mi\">74</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"mi\">14</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">37</span>\n  <span class=\"n\">extractGoal</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">example {α : Type u_1}</span>\n<span class=\"cm\">    [Add α]</span>\n<span class=\"cm\">    ⦃_g : Int⦄</span>\n<span class=\"cm\">    {s : Nat}</span>\n<span class=\"cm\">    {a : Int}</span>\n<span class=\"cm\">    {_d : Expr}</span>\n<span class=\"cm\">    (_x : Nat)</span>\n<span class=\"cm\">    (_this : 3 + 5 = 5)</span>\n<span class=\"cm\">    (y : Nat) :   -- ok, this requires some work!</span>\n<span class=\"cm\">    s ≠ _x ∧ 74 = 3 ∨ 14 = 0 := by</span>\n<span class=\"cm\">  sorry</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">6</span> <span class=\"bp\">∧</span> <span class=\"mi\">74</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"mi\">14</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">extractGoal</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">example  :</span>\n<span class=\"cm\">    4 ≠ 6 ∧ 74 = 3 ∨ 14 = 0 := by</span>\n<span class=\"cm\">  sorry</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 362857896,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685646933
    },
    {
        "content": "<p>Any comments are really really welcome: I feel like I have no idea what I am doing!</p>",
        "id": 362857986,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685646951
    },
    {
        "content": "<p>I have a first PR ready for <code>extractGoal</code>: it does not have the full functionality of what it had in mathlib3, but I would like to get feedback on it.</p>",
        "id": 363060423,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685714447
    },
    {
        "content": "<p>What should I do with the copyright headers?  I personally do not care, but I also do not know who implemented the mathlib3 version or whether they even want to be associated with the current version!</p>",
        "id": 363061238,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685714596
    },
    {
        "content": "<p>I'm pretty sure the Lean 3 version was written by <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span></p>",
        "id": 363066522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685715619
    },
    {
        "content": "<p>Ok, so should I leave Simon as copyright and author and add my name to the author's list?  I certainly do not intend to give someone else more work, simply because I decided to port this!</p>",
        "id": 363066903,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685715702
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4595\">!4#4595</a></p>",
        "id": 363082085,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685718713
    },
    {
        "content": "<p>If the context contains autoimplicit/hygienic <code>Sort/Type/variable</code>s, how should <code>extract_goal</code> print them?  Currently, this is how I implemented it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>   <span class=\"c1\">-- an autoImplicit `x` and its `Sort`</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span>   <span class=\"c1\">-- to generate a hygienic `n`</span>\n  <span class=\"bp\">.</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">.</span> <span class=\"n\">extract_goal</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- state at `extract_goal`:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">α✝: Sort ?u.266</span>\n<span class=\"cm\">x: α✝</span>\n<span class=\"cm\">n✝: ℕ</span>\n<span class=\"cm\">⊢ x = x ∨ Nat.succ n✝ = Nat.succ n✝</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- `extract_goal` output:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">example {α_hyg : Sort univ_α_hyg}</span>\n<span class=\"cm\">    {x : α_hyg}</span>\n<span class=\"cm\">    (n_hyg : ℕ) :</span>\n<span class=\"cm\">    x = x ∨ Nat.succ n_hyg = Nat.succ n_hyg := by</span>\n<span class=\"cm\">  sorry</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Thus, hygienic stuff gets the <code>_hyg</code> suffix, implicit universe levels get a <code>univ_</code>-prefix, followed by the name of the corresponding <code>Sort</code>.</p>",
        "id": 363211973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685768941
    },
    {
        "content": "<p>That sounds like a reasonable idea...</p>",
        "id": 363222200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685775367
    },
    {
        "content": "<p>I tried as much as possible to get a copy-pasteable output: the hygienic daggers do not work.</p>",
        "id": 363224880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685776608
    },
    {
        "content": "<p>there is a function for getting names with <code>_1</code> etc based on what is in the context. I would just use <code>eraseMacroScopes</code> to get the base name and then add <code>_1</code> <code>_2</code> to make them unique if there are overlaps.</p>",
        "id": 363229383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685778321
    },
    {
        "content": "<p>Mario, I am failing to implement your suggestion.  In particular, I have been unable to reach universe levels and give them unique names.  Below is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of where I am stuck</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Tactic</span> <span class=\"n\">LocalContext</span> <span class=\"n\">Name</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ppOpts</span><span class=\"o\">)</span> <span class=\"s2\">\"ppOpts\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx</span>\n  <span class=\"k\">let</span> <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.decls.toList.reduceOption.drop</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">decls.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">d</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"username:    {d.userName}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"eraseScopes: {d.userName.eraseMacroScopes}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"type:        {(← ppExpr d.type)}\"</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"unused:      {(getUnusedName ctx d.userName.eraseMacroScopes)}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ppOpts</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- state is</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">α✝¹: Sort ?u.4531</span>\n<span class=\"cm\">x: α✝¹</span>\n<span class=\"cm\">α✝: Sort ?u.4534</span>\n<span class=\"cm\">y: α✝</span>\n<span class=\"cm\">⊢ x = x ∨ y = y</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- output of `ppOpts is</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">username:    α._@.Mathlib.mwe_extractGoal._hyg.423</span>\n<span class=\"cm\">eraseScopes: α</span>\n<span class=\"cm\">type:        Sort ?u.4531</span>\n<span class=\"cm\">unused:      α</span>\n\n<span class=\"cm\">username:    x</span>\n<span class=\"cm\">eraseScopes: x</span>\n<span class=\"cm\">type:        α✝¹</span>\n<span class=\"cm\">unused:      x_1</span>\n\n<span class=\"cm\">username:    α._@.Mathlib.mwe_extractGoal._hyg.424</span>\n<span class=\"cm\">eraseScopes: α</span>\n<span class=\"cm\">type:        Sort ?u.4534</span>\n<span class=\"cm\">unused:      α</span>\n\n<span class=\"cm\">username:    y</span>\n<span class=\"cm\">eraseScopes: y</span>\n<span class=\"cm\">type:        α✝</span>\n<span class=\"cm\">unused:      y_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Some issues with my code:</p>\n<ul>\n<li>the two autoimplicit <code>Sort</code>s appear to get the same \"unused name\";</li>\n<li>I do not know how to access the universe levels of their <code>Sort</code>s;</li>\n<li><code>getUnusedName</code> gives a new name to <code>x</code> and <code>y</code>, whereas using their original names would have been ok.</li>\n</ul>",
        "id": 363361513,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685816829
    },
    {
        "content": "<p>I'm no longer at my computer, but I guess that I see now why the unused names are repeated: the variable α is not in context -- the hygienic one is.  Thus, it is available as unused.  I should maybe recreate the local context with the new declarations, but maybe then the version that I had is not so bad...</p>\n<p>The issue with renaming <code>Level</code>s I still cannot figure out.</p>",
        "id": 363379841,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1685825320
    }
]