[
    {
        "content": "<p>I'm applying <code>aesop</code> to a theorem with a bunch of <code>if</code>s, which generate a bunch of fresh hypotheses via <code>split_ifs</code>.  I'd like to do the following with the hypotheses:</p>\n<ol>\n<li>Generate all consequences of them according to a list of functions.  E.g., if there are two hypotheses <code>h0 h1</code>, <code>f</code> is in the list of functions, and <code>f h0 h1</code> type checks, I want <code>f h0 h1</code> to become a hypothesis.</li>\n<li>simplify using all available hypotheses</li>\n</ol>\n<p>Is there a good way to do that?</p>\n<p>For example, if there are hypotheses</p>\n<ol>\n<li><code>t : ℕ</code></li>\n<li><code>_ : t &lt; 128</code></li>\n<li><code>_ : ↑t &amp;&amp;&amp; 127 = 0  -- In UInt64</code></li>\n</ol>\n<p>I want to use a lemma that takes these and produces <code>t = 0</code>, then have <code>aesop</code> <code>simp</code> using that.</p>",
        "id": 404271697,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1701015586
    },
    {
        "content": "<p>Ah, there is a <code>forward</code> rule builder.</p>",
        "id": 404288073,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1701030976
    },
    {
        "content": "<p>Yes, <code>forward</code> is what you're looking for. The current implementation is very inefficient, so you may run into trouble if you have big goals or many forward rules. We're designing a better implementation right now. (In fact, if you run into performance issues, I'd appreciate a ping because the issues might make for a good case study.)</p>",
        "id": 404386862,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701082761
    },
    {
        "content": "<p>Hmm, actually <code>aesop</code> seems to be doing this forward chaining automatically, but inconsistently.  I can make a MWE if it seems worth it, but it'd be a nontrivial amount of work so I want to check first.  Here's what's happening.</p>\n<p>The (very non-closed, and thus nonworking!) code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `shiftRight` rounds down -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt128.toNat_shiftRight</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt128</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">128</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x.shiftRight</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">s.toNat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">s.toNat</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n  <span class=\"k\">have</span> <span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">UInt64.cast_toNat</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">t64</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ht</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">UInt64.toNat_lt_2_pow_64</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">t64'</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt64.size</span> <span class=\"o\">:=</span> <span class=\"n\">t64</span>\n  <span class=\"k\">have</span> <span class=\"n\">p64</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">p127</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">127</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">127</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">p128</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">128</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">128</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">st</span><span class=\"o\">,</span> <span class=\"n\">UInt64.lt_iff_toNat_lt</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span> <span class=\"n\">p128</span><span class=\"o\">,</span> <span class=\"n\">st</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">sl</span> <span class=\"bp\">⊢</span>\n  <span class=\"k\">have</span> <span class=\"n\">t127</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">sl</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">Nat.land_eq_mod</span> <span class=\"n\">_</span> <span class=\"mi\">7</span>\n  <span class=\"k\">have</span> <span class=\"n\">t127'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.eq_iff_toNat_eq</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_land</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span>\n      <span class=\"n\">p127</span><span class=\"o\">,</span> <span class=\"n\">t127</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.eq_of_testBit_eq</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">e0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t0</span> <span class=\"n\">t64</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">UInt64.toNat_sub</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p64</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_succ_eq_iff_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.mpr</span> <span class=\"n\">t0</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.le_iff_toNat_le</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">t64.le</span>\n  <span class=\"k\">have</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.sub_sub_self</span> <span class=\"n\">h.le</span>\n  <span class=\"k\">have</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_sub_assoc</span> <span class=\"n\">h.le</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">e3</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"bp\">↦</span> <span class=\"n\">not_lt.mpr</span> <span class=\"n\">le</span> <span class=\"n\">lt</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt128.shiftRight</span><span class=\"o\">,</span> <span class=\"n\">UInt128.testBit_eq</span><span class=\"o\">,</span> <span class=\"n\">bif_eq_if</span><span class=\"o\">,</span> <span class=\"n\">beq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64.toNat</span><span class=\"o\">),</span> <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span><span class=\"o\">)),</span>\n    <span class=\"n\">UInt64.toNat_shiftRight'</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_lor</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_lor</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_div_two_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.testBit_mul_two_pow</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_shiftLeft'</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_mod_two_pow</span><span class=\"o\">,</span> <span class=\"n\">apply_decide</span><span class=\"o\">,</span>\n    <span class=\"n\">UInt64.land_eq_hand</span><span class=\"o\">,</span> <span class=\"n\">UInt64.eq_iff_toNat_eq</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_zero</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_land</span><span class=\"o\">,</span> <span class=\"n\">p127</span><span class=\"o\">,</span>\n    <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span> <span class=\"n\">UInt64.lt_iff_toNat_lt</span><span class=\"o\">,</span> <span class=\"n\">t127</span><span class=\"o\">,</span> <span class=\"n\">p64</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_true</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_zero'</span><span class=\"o\">,</span> <span class=\"n\">t127'</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>\n</code></pre></div>\n<p>Right before the <code>aesop</code>, the state is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">UInt128</span>\n<span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">s.toNat</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">st</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t</span>\n<span class=\"n\">t64</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span>\n<span class=\"n\">t64'</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt64.size</span>\n<span class=\"n\">p64</span><span class=\"o\">:</span> <span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span>\n<span class=\"n\">p127</span><span class=\"o\">:</span> <span class=\"mi\">127</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">127</span>\n<span class=\"n\">p128</span><span class=\"o\">:</span> <span class=\"mi\">128</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">128</span>\n<span class=\"n\">sl</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">128</span>\n<span class=\"n\">t127</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">t127'</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">e0</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n<span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">e2</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span>\n<span class=\"n\">e3</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">a0</span><span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.lo.toNat</span> <span class=\"n\">i</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span>\n            <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span>\n              <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"k\">then</span>\n                  <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.hi.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">true</span>\n                <span class=\"k\">else</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.hi.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n                <span class=\"n\">true</span> <span class=\"k\">then</span>\n          <span class=\"n\">true</span>\n        <span class=\"k\">else</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.lo.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.hi.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.hi.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.lo.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.hi.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>As <code>aesop</code> splits the ifs, it produces hypotheses like <code>t &lt; 64</code> or the reverse, and <code>e0, e1, e2, e3</code> are supposed to fire in order to simplify in ways that needed the conditional hypotheses.  However, <code>aesop</code> appears to be dropping them sometimes.  For example, one of the produced non-closed goals is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">UInt128</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">t64</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"mi\">64</span>\n<span class=\"n\">t64'</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt64.size</span>\n<span class=\"n\">sl</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">128</span>\n<span class=\"n\">t127</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">t127'</span><span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t</span>\n<span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">e0</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"bp\">↑</span><span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span>\n<span class=\"n\">e1</span><span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">e2</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span>\n<span class=\"n\">a0</span><span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">False</span>\n<span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"n\">UInt64.size</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n<span class=\"n\">h</span><span class=\"bp\">✝⁵</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span>\n<span class=\"n\">h</span><span class=\"bp\">✝⁴</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span>\n<span class=\"n\">h</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span>\n<span class=\"n\">h</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.hi.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.lo.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x.lo.toNat</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Ideally <code>e3</code> would have fired and simplified <code>t % 64</code> to <code>t</code> to close the goal, but <code>e3</code> is gone for some reason.</p>",
        "id": 404493842,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1701121326
    },
    {
        "content": "<p>To say it explicitly, let me know if an MWE is worth it and I’ll make one if so.</p>",
        "id": 404497462,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1701123121
    },
    {
        "content": "<p>This should be handled by <code>simp_all</code>, which Aesop calls internally -- it should use <code>t &lt; 64</code> to simplify <code>t &lt; 64 -&gt; t % 64 = t</code> to <code>True -&gt; t % 64 = t</code>, then to <code>t % 64 = t</code>, and finally use this equation to rewrite everywhere in the goal.</p>\n<p>Maybe the <code>subst</code> rule kicks in and rewrites the equation right to left before <code>simp_all</code> gets a chance? You can try whether <code>aesop (erase Aesop.BuiltinRules.subst)</code> makes more progress.</p>\n<p>For more debugging, I'll need a WE (doesn't need to be minimal, a branch will do).</p>",
        "id": 404976497,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701304515
    },
    {
        "content": "<p>I tried that erase, but it didn’t have any effect.</p>\n<p>Here's a WE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.UInt</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.IteSimp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Bitwise</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">ext</span><span class=\"kd\">]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">UInt128</span> <span class=\"n\">where</span>\n  <span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">pp_dot</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">UInt128.toNat</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt128</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x.hi.toNat</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">x.lo.toNat</span>\n\n<span class=\"sd\">/-- Divide by `2^(s % 128)`, rounding down -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">pp_dot</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">UInt128.shiftRight</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt128</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt128</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s.land</span> <span class=\"mi\">127</span>\n  <span class=\"o\">{</span> <span class=\"n\">lo</span> <span class=\"o\">:=</span> <span class=\"n\">bif</span> <span class=\"n\">s</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">x.lo</span>\n          <span class=\"k\">else</span> <span class=\"n\">bif</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span> <span class=\"n\">x.lo</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">|||</span> <span class=\"n\">x.hi</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"o\">(</span><span class=\"mi\">64</span><span class=\"bp\">-</span><span class=\"n\">s</span><span class=\"o\">)</span>\n          <span class=\"k\">else</span> <span class=\"n\">x.hi</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span><span class=\"o\">)</span>\n    <span class=\"n\">hi</span> <span class=\"o\">:=</span> <span class=\"n\">bif</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span> <span class=\"n\">x.hi</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.cast_toNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n.toNat</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_lt_2_pow_64</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.prop</span> <span class=\"n\">_</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.eq_iff_toNat_eq</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m.toNat</span> <span class=\"bp\">=</span> <span class=\"n\">n.toNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.le_iff_toNat_le</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m.toNat</span> <span class=\"bp\">≤</span> <span class=\"n\">n.toNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.lt_iff_toNat_lt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">m.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n.toNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_cast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">UInt64.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_land</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">y.toNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_sub</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">-</span> <span class=\"n\">y.toNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.land_eq_mod</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">Nat.sub_sub_assoc</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Nat.testBit_div_two_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">testBit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">testBit</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Nat.testBit_mul_two_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">testBit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">testBit</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt128.testBit_eq</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt128</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">x.toNat.testBit</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"k\">then</span> <span class=\"n\">x.lo.toNat.testBit</span> <span class=\"n\">i</span> <span class=\"k\">else</span> <span class=\"n\">x.hi.toNat.testBit</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">bif_eq_if</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_shiftRight'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span>\n    <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">s.toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_shiftLeft'</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">s.toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">s.toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_lor</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">|||</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">|||</span> <span class=\"n\">y.toNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Nat.testBit_mod_two_pow</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">testBit</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">testBit</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">apply_decide</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">dp</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"n\">dp</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.land_eq_hand</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">UInt64.land</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">UInt64.toNat_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">Nat.testBit_zero'</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">testBit</span> <span class=\"mi\">0</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- `shiftRight` rounds down -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">UInt128.toNat_shiftRight</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">UInt128</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">sl</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">128</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">x.shiftRight</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">s.toNat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">s.toNat</span> <span class=\"bp\">=</span> <span class=\"n\">t</span>\n  <span class=\"k\">have</span> <span class=\"n\">st</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">UInt64.cast_toNat</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">t64</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ht</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">UInt64.toNat_lt_2_pow_64</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">t64'</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">UInt64.size</span> <span class=\"o\">:=</span> <span class=\"n\">t64</span>\n  <span class=\"k\">have</span> <span class=\"n\">p64</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">p127</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">127</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">127</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"n\">p128</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">128</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">=</span> <span class=\"mi\">128</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">st</span><span class=\"o\">,</span> <span class=\"n\">UInt64.lt_iff_toNat_lt</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span> <span class=\"n\">p128</span><span class=\"o\">,</span> <span class=\"n\">st</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">sl</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">clear</span> <span class=\"n\">st</span> <span class=\"n\">ht</span> <span class=\"n\">s</span>\n  <span class=\"k\">have</span> <span class=\"n\">t127</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nth_rw</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">sl</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">Nat.land_eq_mod</span> <span class=\"n\">_</span> <span class=\"mi\">7</span>\n  <span class=\"k\">have</span> <span class=\"n\">t127'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;&amp;</span> <span class=\"mi\">127</span> <span class=\"bp\">=</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.eq_iff_toNat_eq</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_land</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span>\n      <span class=\"n\">p127</span><span class=\"o\">,</span> <span class=\"n\">t127</span><span class=\"o\">]</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Nat.eq_of_testBit_eq</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"n\">e0</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">t0</span> <span class=\"n\">t64</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">UInt64.toNat_sub</span><span class=\"o\">]</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">p64</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_succ_eq_iff_lt</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Nat.sub_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.pos_iff_ne_zero.mpr</span> <span class=\"n\">t0</span><span class=\"o\">)</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt64.le_iff_toNat_le</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"n\">t64.le</span>\n  <span class=\"k\">have</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.sub_sub_self</span> <span class=\"n\">h.le</span>\n  <span class=\"k\">have</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">64</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_sub_assoc</span> <span class=\"n\">h.le</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">e3</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">64</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">a0</span> <span class=\"o\">:</span> <span class=\"mi\">64</span> <span class=\"bp\">≤</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">64</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">le</span> <span class=\"n\">lt</span> <span class=\"bp\">↦</span> <span class=\"n\">not_lt.mpr</span> <span class=\"n\">le</span> <span class=\"n\">lt</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">UInt128.shiftRight</span><span class=\"o\">,</span> <span class=\"n\">UInt128.testBit_eq</span><span class=\"o\">,</span> <span class=\"n\">bif_eq_if</span><span class=\"o\">,</span> <span class=\"n\">beq_iff_eq</span><span class=\"o\">,</span> <span class=\"n\">decide_eq_true_eq</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">UInt64.toNat</span><span class=\"o\">),</span> <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">apply_ite</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">Nat.testBit</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">64</span><span class=\"o\">)),</span>\n    <span class=\"n\">UInt64.toNat_shiftRight'</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_lor</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_lor</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_div_two_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">Nat.testBit_mul_two_pow</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_shiftLeft'</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_mod_two_pow</span><span class=\"o\">,</span> <span class=\"n\">apply_decide</span><span class=\"o\">,</span>\n    <span class=\"n\">UInt64.land_eq_hand</span><span class=\"o\">,</span> <span class=\"n\">UInt64.eq_iff_toNat_eq</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_zero</span><span class=\"o\">,</span> <span class=\"n\">UInt64.toNat_land</span><span class=\"o\">,</span> <span class=\"n\">p127</span><span class=\"o\">,</span>\n    <span class=\"n\">UInt64.toNat_cast</span><span class=\"o\">,</span> <span class=\"n\">Nat.mod_eq_of_lt</span> <span class=\"n\">t64'</span><span class=\"o\">,</span> <span class=\"n\">UInt64.lt_iff_toNat_lt</span><span class=\"o\">,</span> <span class=\"n\">t127</span><span class=\"o\">,</span> <span class=\"n\">p64</span><span class=\"o\">,</span> <span class=\"n\">Bool.or_true</span><span class=\"o\">,</span>\n    <span class=\"n\">Bool.or_false</span><span class=\"o\">,</span> <span class=\"n\">Nat.testBit_zero'</span><span class=\"o\">,</span> <span class=\"n\">t127'</span><span class=\"o\">]</span>\n  <span class=\"n\">aesop</span>  <span class=\"c1\">-- There is a `t % 64` under a `t &lt; 64` assumption in the first goal, but `e3` is gone</span>\n</code></pre></div>",
        "id": 405526750,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1701515757
    }
]