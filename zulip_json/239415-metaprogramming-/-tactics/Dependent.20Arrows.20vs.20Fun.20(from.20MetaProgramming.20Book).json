[
    {
        "content": "<p>How does a dependent arrow expression differ from the lambda abstraction in <code>Expr</code>?</p>",
        "id": 360236195,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684754275
    },
    {
        "content": "<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.forallE#doc\">docs4#Lean.Expr.forallE</a> (pi types, i.e. dependent arrows) vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.lam#doc\">docs4#Lean.Expr.lam</a> ?</p>\n<p>They're very similar and there is a lot of shared metaprogramming functionality (like <code>e.bindingName!</code>, <code>e.bindingDomain!</code>, and <code>e.bindingBody!</code>) but they behave differently in the type theory.</p>",
        "id": 360237323,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684754546
    },
    {
        "content": "<p>The main difference is that <code>Expr.lam</code> gives a term whose type is an <code>Expr.forallE</code>, and <code>Expr.forallE</code> gives a type that is some <code>Expr.sort</code>.</p>\n<p>Also, among these two only <code>Expr.lam</code> can participate in the LHS of an <code>Expr.app</code>.</p>",
        "id": 360238946,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684754944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Dependent.20Arrows.20vs.20Fun.20.28from.20MetaProgramming.20Book.29/near/360237323\">said</a>:</p>\n<blockquote>\n<p>Do you mean <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.forallE#doc\">docs4#Lean.Expr.forallE</a> (pi types, i.e. dependent arrows) vs <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.lam#doc\">docs4#Lean.Expr.lam</a> ?</p>\n<p>They're very similar and there is a lot of shared metaprogramming functionality (like <code>e.bindingName!</code>, <code>e.bindingDomain!</code>, and <code>e.bindingBody!</code>) but they behave differently in the type theory.</p>\n</blockquote>\n<p>Yeah. I initially guessed that this would be for product types vs lambda terms. This is also how Martin Lof Type theory presentations seem to introduce them. But then I noticed that the type signatures of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.forallE#doc\">docs4#Lean.Expr.forallE</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.lam#doc\">docs4#Lean.Expr.lam</a> are identical.</p>",
        "id": 360240061,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684755230
    },
    {
        "content": "<p>And it got me wondering if they weren't interchangeable. Hence the question.</p>",
        "id": 360240881,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684755423
    },
    {
        "content": "<p>yes, because their signatures are identical also in Martin Lof dependent type theories (a Pi type needs a \"type family\" that is a type-valued function, not too different from a \"value-valued\" function)<br>\nbut as explained by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> the semantics are different, hence they are not interchangeable</p>",
        "id": 360241327,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1684755523
    },
    {
        "content": "<p>It's possible to define a coercion from functions to types using <code>Expr.forallE</code> though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.not_lt_zero</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 360242222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684755766
    },
    {
        "content": "<p>So while they're not interchangeable, at least there's a possible conversion rule from lambdas to pis.</p>",
        "id": 360242616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684755856
    },
    {
        "content": "<p>I think I get that they are semantically different on an abstract level. in MLTT there is a type <code>Type</code>, then there are types say <code>A</code> and values <code>a</code>. So it makes sense that in the language, some elements have type <code>Type</code> and others have terms in <code>A</code> and then the identification type <code>Id_A(a,b)</code>. So there are different sorts of terms and the sort of terms that go into an expression determine whether we are dealing with a lambda type or a dependent product type. </p>\n<p>But in Lean this raises the following question in my mind: Let us say I have a <code>def f (x : Bool) : Type := ...</code> and later I have <code>def g (x : Bool) : f x := ...</code>.  Will lean interpret <code>f</code> as a <code>Lam</code> or a <code>forallE</code></p>",
        "id": 360242639,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684755861
    },
    {
        "content": "<p><code>f</code> itself is an <code>Expr.lam</code></p>",
        "id": 360242891,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684755908
    },
    {
        "content": "<p>But the type of <code>g</code> is <code>\\Pi (x : Bool), f x</code>?</p>",
        "id": 360243276,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684755999
    },
    {
        "content": "<p>Yes</p>",
        "id": 360243558,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684756083
    },
    {
        "content": "<p>Something like this in full: <code>.forallE `x (.const `Bool []) (.app (.const `f []) (.bvar 0)) .default</code></p>",
        "id": 360243777,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684756140
    },
    {
        "content": "<p>So if I understand this correctly, the distinction is important for the lean typechecker to distinguish between terms that appear on the left and right of the <code>:</code> in a typing judgement like <code>\\Gamma \\entails a : A</code> ?</p>",
        "id": 360244325,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684756269
    },
    {
        "content": "<p>Yeah (with the caveat that <code>.forallE</code> can appear both the LHS and RHS of <code>:</code>), and in particular I think is so that if you have a term <code>t</code> you can solve for a unique <code>T</code> such that <code>t : T</code>.</p>",
        "id": 360244509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684756313
    },
    {
        "content": "<p>Here's an ambiguity if you only had lambdas: if you have <code>fun (x : Nat) =&gt; 0 &lt; x</code>, is its type <code>fun (x : Nat) =&gt; Prop</code> or <code>Prop</code>?</p>",
        "id": 360244905,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684756399
    },
    {
        "content": "<p>The two constructs look similar because <code>λ (x : T), u</code> and <code>forall (x : T), U</code> look similar. But they have completely different typing rules: <code>forall (x : T), U</code> is a <code>Sort</code> while <code>λ (x : T), u</code> is a <code>forall (x : T), U</code> (under suitable conditions). This also means different evaluation behaviour: lambdas have a β rule (so <code>(λ (x : T), u) v == u[x := v]</code>) but pi types don't.</p>",
        "id": 360245212,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684756468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Dependent.20Arrows.20vs.20Fun.20.28from.20MetaProgramming.20Book.29/near/360245212\">said</a>:</p>\n<blockquote>\n<p>The two constructs look similar because <code>λ (x : T), u</code> and <code>forall (x : T), U</code> look similar. But they have completely different typing rules: <code>forall (x : T), U</code> is a <code>Sort</code> while <code>λ (x : T), u</code> is a <code>forall (x : T), U</code> (under suitable conditions). This also means different evaluation behaviour: lambdas have a β rule (so <code>(λ (x : T), u) v == u[x := v]</code>) but pi types don't.</p>\n</blockquote>\n<p>Isn't there an elimination rule for dependent product types similar to \\beta-reduction, at least in MLTT? (see : <a href=\"https://ncatlab.org/nlab/show/Martin-L%C3%B6f+dependent+type+theory#dependent_product_types\">https://ncatlab.org/nlab/show/Martin-L%C3%B6f+dependent+type+theory#dependent_product_types</a>)</p>",
        "id": 360257102,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684759484
    },
    {
        "content": "<p>Although this is a rule for type judgement rather than evaluation, can't we say that this rule  \"evaluates\" the type of <code>f(a)</code> to be <code>B[a/x]</code> from <code>f  : \\Pi x : A, B x</code> and <code>a : A</code>?</p>",
        "id": 360259109,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684759933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Dependent.20Arrows.20vs.20Fun.20.28from.20MetaProgramming.20Book.29/near/360244905\">said</a>:</p>\n<blockquote>\n<p>Here's an ambiguity if you only had lambdas: if you have <code>fun (x : Nat) =&gt; 0 &lt; x</code>, is its type <code>fun (x : Nat) =&gt; Prop</code> or <code>Prop</code>?</p>\n</blockquote>\n<p>Thanks, this example helps</p>",
        "id": 360261088,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684760345
    },
    {
        "content": "<p>Typing and evaluation(/reduction/defeq/operational semantics/probably other jargon) are separate judgements and separate concepts. The  evaluation rule for dependent functions is the one under the heading 'Computation rules for dependent product types' and it says (with somewhat confusing notation) that we have a β law for <code>λ</code>. You won't find an equivalent rule for pi.</p>",
        "id": 360261953,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1684760508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Dependent.20Arrows.20vs.20Fun.20.28from.20MetaProgramming.20Book.29/near/360261953\">said</a>:</p>\n<blockquote>\n<p>Typing and evaluation(/reduction/defeq/operational semantics/probably other jargon) are separate judgements and separate concepts. The  evaluation rule for dependent functions is the one under the heading 'Computation rules for dependent product types' and it says (with somewhat confusing notation) that we have a β law for <code>λ</code>. You won't find an equivalent rule for pi.</p>\n</blockquote>\n<p>Thanks. this helps. My confusion probably comes from the fact that in Lean (and CIC in general), types of  terms in <code>Sort (u)</code> are also terms  of <code>Sort (u+1)</code> whereas in MLTT there is a clear(easier to understand) distinction between terms of type <code>Type</code> and terms of type <code>A : Type</code> for some <code>A</code> and even though types can depend on terms, the distinction between type and term is clear. So the confusion is mostly \"why can't I apply evaluation rules for typing judgements as well\" since after all the same terms can also be types of terms at a lower Sort level.   But  I can see now that the rules for type judgement can differ from those of term evaluation. It helps to keep track of which side of the type judgement  expressions appear on.</p>",
        "id": 360266048,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684761403
    },
    {
        "content": "<p><em>The</em> type <code>Sort u</code> is <em>a</em> term of <code>Sort (u+1)</code>. What are \"types of <code>Sort u</code>\"?</p>",
        "id": 360266896,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1684761596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Dependent.20Arrows.20vs.20Fun.20.28from.20MetaProgramming.20Book.29/near/360266896\">said</a>:</p>\n<blockquote>\n<p><em>The</em> type <code>Sort u</code> is <em>a</em> term of <code>Sort (u+1)</code>. What are \"types of <code>Sort u</code>\"?</p>\n</blockquote>\n<p>I corrected it. Types of <strong>terms in Sort u</strong></p>",
        "id": 360267526,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684761730
    },
    {
        "content": "<p>The type of terms in <code>Sort u</code> is just <code>Sort u</code>, right? Otherwise what would \"in\" mean in the sentence?</p>",
        "id": 360267979,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1684761829
    },
    {
        "content": "<p>Maybe my usage of terms is incorrect. So I'll clarify with an example (put together hastily): Let <code>f</code> be an inductive type defined as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">f</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>then <code>f</code> is the type of terms like <code>f.cons true</code> and <code>f.cons false</code>. But <code>f</code> is also a term of type <code>Type 1</code>. My initial question has already been answered by Jannis and Kyle (or at least I think they have been for now).</p>",
        "id": 360276941,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684763423
    },
    {
        "content": "<p>That is also true for <a href=\"https://en.wikipedia.org/wiki/Intuitionistic_type_theory\">Martin-Lof type theories</a>, <code>Bool</code> is the type of terms like <code>true</code>, but <code>Bool</code> is also a term of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">U</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal U_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 360290356,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1684765850
    },
    {
        "content": "<p>True, but there are no further levels in the hierarchy. There is <code>Type</code>, which contains all terms that serve the purpose of Types like Bool, Nat etc. The type construction and elimination rules work with these types (and terms of these types, because it is dependent and all that). The evaluation rules are applied to the terms of these types. So it is easy to see that there are two distinct sets of rules, one for deducing types and one for evaluation of terms (ignoring Id_A)</p>",
        "id": 360297514,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1684767408
    },
    {
        "content": "<p>Aside: are there any systems that have two different kinds of typing judgments? Let's say <code>t ∈ T</code> means that <code>t</code>, as a term, has type <code>T</code> and <code>t : U</code> means that <code>t</code>, as a type, is in universe <code>U</code>.</p>\n<p>Then we could say <code>(fun (x ∈ Nat) =&gt; x &lt; x + 1) ∈ (fun (x ∈ Nat) =&gt; Prop)</code> and <code>(fun (x ∈ Nat) =&gt; Prop) : Type</code> as well as <code>(fun (x ∈ Nat) =&gt; x &lt; x + 1) : Prop</code>.</p>\n<p>It seems to me that the lambda/pi distinction serves as a way to collapse these judgments into a single one. (And also it simplifies binders -- would there now be two different types of lambdas for quantifying with respect to <code>∈</code> or to <code>:</code>?)</p>",
        "id": 360314204,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684771100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Dependent.20Arrows.20vs.20Fun.20.28from.20MetaProgramming.20Book.29/near/360314204\">said</a>:</p>\n<blockquote>\n<p>Aside: are there any systems that have two different kinds of typing judgments? Let's say <code>t ∈ T</code> means that <code>t</code>, as a term, has type <code>T</code> and <code>t : U</code> means that <code>t</code>, as a type, is in universe <code>U</code>.</p>\n</blockquote>\n<p>Yes, most M-L type theories that don't have a universe hierarchy have separate judgments for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>t</mi><mo>:</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma \\vdash t : T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> (\"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> has type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>\") and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>T</mi><mtext> </mtext><mrow><mi mathvariant=\"bold\">t</mi><mi mathvariant=\"bold\">y</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\Gamma\\vdash T\\ {\\bf type}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">type</span></span></span></span></span></span> (\"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span> is a type\"). You can also stick a universe index on the latter. The advantage of this form is that not all types have to have types and hence it is okay if you only have 1 or 2 universes instead of an infinite hierarchy</p>",
        "id": 360366634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684786521
    },
    {
        "content": "<p>The original MLTT also makes a distinction between terms and types, and has a coercion function you could think of as <code>CoeSort</code> to allow terms to appear on the right side of a typing judgment. So universes are not really types containing types but rather types containing codes for types, i.e. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>A</mi><mo>:</mo><mi>U</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi mathvariant=\"normal\">Γ</mi><mo>⊢</mo><mi>T</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mrow><mi mathvariant=\"bold\">t</mi><mi mathvariant=\"bold\">y</mi><mi mathvariant=\"bold\">p</mi><mi mathvariant=\"bold\">e</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\Gamma\\vdash A : U\\implies \\Gamma\\vdash T(A)\\ {\\bf type}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7073em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">type</span></span></span></span></span></span></p>",
        "id": 360367274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684786750
    },
    {
        "content": "<p>Even type theories that do have universes are most often presented on paper with separate type and term-of-type judgments. (It is an important distinction for the categorical semantics, e.g. a context <code>Γ</code> is interpreted as an object <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span> of a category, a type <code>A</code> in context <code>Γ</code> is interpreted as a \"display map\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span>, a term <code>t : A</code> in context <code>Γ</code> is interpreted as a section <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>:</mo><mi mathvariant=\"normal\">Γ</mi><mo>→</mo><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">t : \\Gamma \\to A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> of the display map. There is also the universe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">U</mi><mo>×</mo><mi mathvariant=\"normal\">Γ</mi><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{U} \\times \\Gamma \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span>, and a section of this is a different sort of thing than a display map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>→</mo><mi mathvariant=\"normal\">Γ</mi></mrow><annotation encoding=\"application/x-tex\">A \\to \\Gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Γ</span></span></span></span>.)</p>",
        "id": 360504231,
        "sender_full_name": "Reid Barton",
        "timestamp": 1684841944
    }
]