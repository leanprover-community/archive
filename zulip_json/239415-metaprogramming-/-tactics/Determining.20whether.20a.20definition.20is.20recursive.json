[
    {
        "content": "<p>I'm trying to determine whether a name <code>d</code> refers to a recursive definition. My first idea was to check whether <code>d</code> occurs in its own value, but that doesn't work for well-founded and mutual recursion. E.g. the <code>mutual</code> block</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>compiles to <code>f x = f._mutual ... x ...</code> with <code>f_mutual</code> an application of <code>WellFounded.fix</code> and <code>f</code> nowhere in sight.</p>\n<p>I think I can work around this for my actual application, but I'd still be curious whether there's a nice way to figure this out.</p>",
        "id": 398478481,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698238382
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.isRec#doc\">docs#Lean.isRec</a> help?</p>",
        "id": 398478912,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698238545
    },
    {
        "content": "<p>no, that tells you if a definition is an inductive recursor</p>",
        "id": 398479061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698238587
    },
    {
        "content": "<p>you could either look at the equation lemmas, or you could look at the compiled IR to find the self reference</p>",
        "id": 398479155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698238627
    },
    {
        "content": "<p>Although, <code>f._mutual</code> in the definition is also a clear indicator that the definition is recursive</p>",
        "id": 398479214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698238655
    },
    {
        "content": "<p>You could also recursively search through definitions of constants occuring in the value (knowing that you can ignore declarations defined in some dependent module)</p>",
        "id": 398479588,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698238797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> that won't help, the kernel definition is in fact acyclic</p>",
        "id": 398480852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698239185
    },
    {
        "content": "<p>that's what the <code>fix</code> reduction is about</p>",
        "id": 398480894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698239197
    },
    {
        "content": "<p>Oh right!</p>",
        "id": 398480928,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698239210
    },
    {
        "content": "<p>I think you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Compiler.mkUnsafeRecName#doc\">docs#Lean.Compiler.mkUnsafeRecName</a> to get the name of the compiler's <code>partial def</code> corresponding to a recursive function, if it exists and/or is a <code>mutualDefnDecl</code> then I think you found a recursive function</p>",
        "id": 398481436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698239397
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"n\">n</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g'</span> <span class=\"n\">n</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g'</span> <span class=\"n\">n</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"n\">env.contains</span> <span class=\"o\">(</span><span class=\"n\">Lean.Compiler.mkUnsafeRecName</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Elab.Command.CommandElabM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">f</span> <span class=\"c1\">-- true</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">g</span> <span class=\"c1\">-- true</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Nat.add</span> <span class=\"c1\">-- true</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Nat.succ</span> <span class=\"c1\">-- false</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"c1\">-- false</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">f'</span> <span class=\"c1\">-- false</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">isRecursive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">g'</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 398482487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698239742
    }
]