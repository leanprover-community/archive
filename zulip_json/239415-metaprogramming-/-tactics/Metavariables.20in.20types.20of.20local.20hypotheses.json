[
    {
        "content": "<p>Is this expected behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">do</span> <span class=\"o\">{</span>\n    <span class=\"o\">[</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">tactic.local_context</span><span class=\"o\">,</span>\n    <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">tactic.trace</span> <span class=\"n\">t.is_mvar</span> <span class=\"o\">},</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This traces <code>tt</code>, which foils attempts at matching on <code>t</code> syntactically</p>",
        "id": 374266729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689081958
    },
    {
        "content": "<p>This isn't hypothetical: the following code fails because <code>interval_cases</code> expects <code>infer_type</code> not to contain metavariables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.interval_cases</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>  <span class=\"c1\">-- replace with `intros y hy` and it works</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 374267225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689082052
    },
    {
        "content": "<p>Probably needs an <code>instantiate_mvars</code>. As a general rule, it's safer to assume that mvars are never fully instantiated except directly after <code>instantiate_mvars</code>.</p>",
        "id": 374268080,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689082237
    },
    {
        "content": "<p>So in general, matching against an expression without a <code>instantiate_mvars</code> is pretty much always a bug?</p>",
        "id": 374284046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689085159
    },
    {
        "content": "<p>Syntactic matching yes, very likely.</p>",
        "id": 374286576,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689085634
    },
    {
        "content": "<p>Another failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"mi\">37</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">40</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span>    <span class=\"c1\">-- replace with `intros y hy` and it works</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 374287410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689085794
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/pull/19232\">!3#19232</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/19233\">!3#19233</a></p>",
        "id": 374442075,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689114282
    },
    {
        "content": "<p>These won't need forward-porting, but for anyone still working on downstream projects in Lean 3 I think they're worth merging</p>",
        "id": 374442129,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689114302
    },
    {
        "content": "<p>Just found <a href=\"#narrow/stream/113488-general/topic/Variables.20introduced.20in.20lambda.20in.20refine/near/355374805\">this old thread</a></p>",
        "id": 374632051,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689170789
    }
]