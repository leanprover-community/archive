[
    {
        "content": "<p>I wrote a <code>norm_num</code> extension in Lean 4.  It's for teaching purposes so its scope is very limited, and paradoxically this makes it messier to write:  I want it to disprove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≡</mo><mi>b</mi><mspace></mspace><mspace width=\"0.6667em\"/><mrow><mi mathvariant=\"normal\">m</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mtext> </mtext><mtext> </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">a \\equiv b \\mod n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4637em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≡</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace allowbreak\"></span><span class=\"mspace\" style=\"margin-right:0.6667em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">mod</span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> only in the \"obvious\" case when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>a</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le a &lt; n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>b</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le b &lt; n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo mathvariant=\"normal\">≠</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\ne b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>.</p>\n<p>My code is basically copy-pasta and I feel like I have made rather heavy weather of it, with clunky handling of <code>Qq</code>. Does anyone with some experience have time to look at it and teach me some tricks?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Int.ModEq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"kn\">hiding</span> <span class=\"n\">Rat</span> <span class=\"n\">mkRat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Tactic</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInt_ModEq_true</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">=</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">dsimp</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hab</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">]</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Int.ModEq.refl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isInt_ModEq_false</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a'</span> <span class=\"n\">b'</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">a</span> <span class=\"n\">a'</span> <span class=\"bp\">→</span> <span class=\"n\">IsInt</span> <span class=\"n\">b</span> <span class=\"n\">b'</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">b'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span>\n    <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">a'</span> <span class=\"bp\">≠</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">Int.ModEq</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">⟩,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">han</span><span class=\"o\">,</span> <span class=\"n\">hbn</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hab</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kd\">by</span>\n      <span class=\"n\">change</span> <span class=\"n\">a'</span> <span class=\"bp\">%</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">b'</span> <span class=\"bp\">%</span> <span class=\"n\">n</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hn</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hn</span>\n      <span class=\"n\">replace</span> <span class=\"n\">han</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">han</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hbn</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hbn</span>\n      <span class=\"n\">replace</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">ha</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hb</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hb</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hab</span> <span class=\"o\">:=</span> <span class=\"n\">of_decide_eq_true</span> <span class=\"n\">hab</span>\n      <span class=\"n\">intro</span> <span class=\"n\">H</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hab</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Int.ediv_emod_unique</span> <span class=\"n\">hn</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">⟨</span><span class=\"n\">Int.ediv_eq_zero_of_lt</span> <span class=\"n\">ha</span> <span class=\"n\">han</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">⟩</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:=</span> <span class=\"n\">Int.emod_add_ediv</span> <span class=\"n\">b'</span> <span class=\"n\">n</span>\n      <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">Int.ediv_eq_zero_of_lt</span> <span class=\"n\">hb</span> <span class=\"n\">hbn</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h₃</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₂</span>\n      <span class=\"n\">linarith</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.NormNum</span>\n\n<span class=\"sd\">/-- The `norm_num` extension which identifies expressions of the form `a ≡ b [ZMOD n]`,</span>\n<span class=\"sd\">such that `norm_num` successfully recognises both `a` and `b` and they are small compared to `n`. -/</span>\n<span class=\"kd\">@[norm_num Int.ModEq _ _ _]</span> <span class=\"kd\">def</span> <span class=\"n\">evalModEq</span> <span class=\"o\">:</span> <span class=\"n\">NormNumExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">withNewMCtxDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">f</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"n\">rb</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">b</span>\n  <span class=\"k\">let</span> <span class=\"n\">rn</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">derive</span> <span class=\"n\">n</span>\n  <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ring</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.instRingInt</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">za</span><span class=\"o\">,</span> <span class=\"n\">na</span><span class=\"o\">,</span> <span class=\"n\">pa</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">ra.toInt</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zb</span><span class=\"o\">,</span> <span class=\"n\">nb</span><span class=\"o\">,</span> <span class=\"n\">pb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">rb.toInt</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">zn</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">rn.toInt</span> <span class=\"n\">i</span>\n  <span class=\"k\">if</span> <span class=\"n\">za</span> <span class=\"bp\">=</span> <span class=\"n\">zb</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- reduce `a ≡ b [ZMOD n]` to `true` if `a` and `b` reduce to the same integer</span>\n    <span class=\"k\">let</span> <span class=\"n\">pab</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isInt_ModEq_true</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span> <span class=\"bp\">$</span><span class=\"n\">pab</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"k\">else</span>\n    <span class=\"c1\">-- reduce `a ≡ b [ZMOD n]` to `false` if `0 &lt; n`, `a` reduces to `a'` with `0 ≤ a' &lt; n`,</span>\n    <span class=\"c1\">-- and `b` reduces to `b'` with `0 ≤ b' &lt; n`</span>\n    <span class=\"k\">let</span> <span class=\"n\">pab</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">≠</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">≤</span> <span class=\"n\">za</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pan</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">na</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zn</span> <span class=\"bp\">≤</span> <span class=\"n\">zb</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pbn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nb</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">za</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pa0</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">na</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">zb</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"n\">pb0</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">nb</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">isInt_ModEq_false</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span> <span class=\"bp\">$</span><span class=\"n\">pn</span> <span class=\"bp\">$</span><span class=\"n\">pan</span> <span class=\"bp\">$</span><span class=\"n\">pbn</span> <span class=\"bp\">$</span><span class=\"n\">pa0</span> <span class=\"bp\">$</span><span class=\"n\">pb0</span> <span class=\"bp\">$</span><span class=\"n\">pab</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">isFalse</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Result</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">¬</span><span class=\"n\">Int.ModEq</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>\n</div></div>",
        "id": 329614634,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677116125
    }
]