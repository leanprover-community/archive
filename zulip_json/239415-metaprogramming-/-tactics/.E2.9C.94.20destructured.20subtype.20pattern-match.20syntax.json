[
    {
        "content": "<blockquote>\n<p>from <a href=\"#narrow/stream/113489-new-members/topic/Notation.20for.20subtype.20arguments/near/396863632\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Notation.20for.20subtype.20arguments/near/396863632</a></p>\n</blockquote>\n<p>I'd some help defining \"destructured\" pattern-match syntax  for subtypes that would be used like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>This mean exactly the same thing as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Subtype</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 398127854,
        "sender_full_name": "Somo S.",
        "timestamp": 1698081486
    },
    {
        "content": "<p>is there a simple way to do this?</p>",
        "id": 398139115,
        "sender_full_name": "Somo S.",
        "timestamp": 1698086819
    },
    {
        "content": "<p>There might be—one direction (turning the <code>{}</code> notation into <code>Subtype</code>) could just be a macro which uses the same parser to the left of <code>//</code> as <code>fun</code> does for its binder. (Does that make sense?)</p>",
        "id": 398140285,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698087356
    },
    {
        "content": "<p>(Though I’m not totally familiar with how <code>fun</code> parses, so there could be snags.)</p>",
        "id": 398140402,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698087399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>  Yeah I had that idea, but I also couldn't find the parser that fun uses for its binder.</p>",
        "id": 398404392,
        "sender_full_name": "Somo S.",
        "timestamp": 1698206000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/destructured.20subtype.20pattern-match.20syntax/near/398404392\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span>  Yeah I had that idea, but I also couldn't find the parser that fun uses for its binder.</p>\n</blockquote>\n<p>I believe it’s called <code>funBinder</code>; if the macro by itself isn’t enough, you might find the definitions and docstrings <a href=\"https://github.com/leanprover/lean4/blob/d126c099f4d15282ed5051c8c440107cf514da2b/src/Lean/Elab/Binders.lean#L324\">here</a> helpful</p>",
        "id": 398406552,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698207123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> here is what I finally came up with (it is kind of working, except for the <code>example</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.notation</span> <span class=\"n\">false</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{ \"</span> <span class=\"n\">withoutPosition</span><span class=\"o\">(</span><span class=\"n\">Lean.Parser.Term.funBinder</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>  <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"s2\">\" }\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(⟨</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">es</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">))</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>  <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">//</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{a} {b} {c}\"</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"c1\">-- Subtype fun (⟨a, b, c⟩ : Foo) =&gt; s!\"{a} {b} {c}\".length &gt; 4</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"c1\">-- Subtype fun (⟨a,b⟩ : Nat × Nat) =&gt; 5 ≤ a + b</span>\n<span class=\"k\">#check</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"mi\">5</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"c1\">-- Subtype fun (a,b) =&gt; 5 ≤ a + b</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"k\">#reduce</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"c1\">-- Subtype fun x =&gt; p x.1 x.2</span>\n<span class=\"k\">#reduce</span>  <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"c1\">-- Subtype fun x =&gt; p x.1 x.2</span>\n\n<span class=\"c1\">--  cannot even state the following theorem because it is \"stuck solving universe constraint\"</span>\n<span class=\"kd\">example</span>  <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>  <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- HELP</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 398728950,
        "sender_full_name": "Somo S.",
        "timestamp": 1698338990
    },
    {
        "content": "<p>there should be a better way for me to exhaustively state valid <code>macro_rules</code> but I could not decipher it</p>",
        "id": 398729280,
        "sender_full_name": "Somo S.",
        "timestamp": 1698339106
    },
    {
        "content": "<p>Nice! Hmm, iirc, <code>funBinder</code> already includes the optional type annotation. But for some reason, it demands parentheses: <code>{ ((a,b) : A × B) // p a b }</code> and not <code>{ (a,b) : A × B // p a b }</code>. I'm not completely sure why; I'm not completely familiar with how the different parts of the parser work yet, though.</p>\n<p>Maybe my initial suggestion was off base—perhaps it's worth just writing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>  <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"n\">pat</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">//</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Subtype</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span>  <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The universe contraints issue is actually evidence it's working—if you replace both sides in your example with an explicit <code>Subtype</code>, you get the same issue! :)</p>",
        "id": 398769483,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698355323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Excellent this is perfect. Thanks for pointing out that fact about universe constraints as well. This has been very helpful!</p>",
        "id": 398867470,
        "sender_full_name": "Somo S.",
        "timestamp": 1698401396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 398867479,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698401399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as unresolved.</p>",
        "id": 398881182,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698406713
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span>, this is resulting in a conflict with the original definition of subtype notation. Basically, where the original parser definition is something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>  <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>yours has <code>term</code> instead of <code>ident</code>.. </p>\n<p>So, Is there a way to state in the parser.. something like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"o\">(</span><span class=\"n\">terms</span><span class=\"bp\">-</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"s2\">\" : \"</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>  <span class=\"s2\">\" // \"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>Where I am using <code>(terms-ident)</code> to mean \"all terms that are not identifiers\"?</p>",
        "id": 398881955,
        "sender_full_name": "Somo S.",
        "timestamp": 1698407009
    },
    {
        "content": "<p>You can do <code>syntax (priority := high)</code> to override the pre-existing notation</p>",
        "id": 398950772,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698432012
    },
    {
        "content": "<p>awesome! the more i learn!</p>",
        "id": 398950884,
        "sender_full_name": "Somo S.",
        "timestamp": 1698432066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582386\">Somo S.</span> has marked this topic as resolved.</p>",
        "id": 399300714,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698672215
    }
]