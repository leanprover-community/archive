[
    {
        "content": "<p>Would someone kindly explain me how to use Qq in <code>positivity</code> extensions? Every time I try to write an extension, I'm fairly confident I can adapt an existing extension, and every time I hit a different stumbling block.</p>",
        "id": 407867917,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702526770
    },
    {
        "content": "<p>Here's my attempt at an extension for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.card#doc\">docs#Finset.card</a>, which fails because I don't know how to tell Qq that <code>e</code> is <code>Finset.card s</code>, which I can't do because <code>e</code> is supposed to have type <code>β2 : Type u</code> while <code>Finset.card s</code> is supposed to have type <code>ℕ : Type</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity.Core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">Finset.card</span>\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">Finset.card</span> <span class=\"n\">_</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Mathlib.Meta.Positivity.evalFinsetCard</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">β2</span><span class=\"o\">}</span> <span class=\"n\">zβ</span> <span class=\"n\">pβ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_v</span><span class=\"o\">,</span> <span class=\"n\">_l</span><span class=\"o\">,</span> <span class=\"n\">_r</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Expr.getAppArgs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `Finset.card`\"</span>\n\n  <span class=\"n\">haveI'</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">=</span><span class=\"n\">Q</span> <span class=\"n\">Finset.card</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  type mismatch</span>\n<span class=\"cm\">    card «$s»</span>\n<span class=\"cm\">  has type</span>\n<span class=\"cm\">    ℕ : Type</span>\n<span class=\"cm\">  but is expected to have type</span>\n<span class=\"cm\">    «$β2» : Type u</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">so</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">do</span> <span class=\"c1\">-- TODO: if I make a typo it doesn't complain?</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span>\n      <span class=\"k\">let</span> <span class=\"n\">_fi</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fintype</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">_no</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span>\n      <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset.univ_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span> <span class=\"o\">}</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">fv</span> <span class=\"bp\">←</span> <span class=\"n\">findLocalDeclWithType</span><span class=\"bp\">?</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fv</span><span class=\"o\">))</span>\n  <span class=\"k\">match</span> <span class=\"n\">so</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">fi</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.Nonempty.card_pos.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">$</span><span class=\"n\">fi</span><span class=\"o\">))</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    type mismatch</span>\n<span class=\"cm\">      Nonempty.card_pos «$fi»</span>\n<span class=\"cm\">    has type</span>\n<span class=\"cm\">      0 &lt; card «$s» : Prop</span>\n<span class=\"cm\">    but is expected to have type</span>\n<span class=\"cm\">      0 &lt; «$e» : Prop</span>\n<span class=\"cm\">    -/</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n</code></pre></div>",
        "id": 407868267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702526864
    },
    {
        "content": "<p>I must say I am confounded by the fiercely displayed \"intuitive\" in the description of <a href=\"https://github.com/leanprover-community/quote4\">https://github.com/leanprover-community/quote4</a> <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 407868457,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702526915
    },
    {
        "content": "<p>It says \"the intuitiveness of modal sequent calculus\". I've always interpreted that as a very fine example of Gabriel's sense of humor.</p>",
        "id": 407869530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702527206
    },
    {
        "content": "<p>As far as I'm concerned, it could just as well say \"the intuitiveness of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord\">∞</span></span></span></span>-categories\".</p>",
        "id": 407869708,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702527251
    },
    {
        "content": "<p><span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> It pays to lie</p>",
        "id": 407874430,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529244
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity.Core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">Finset.card</span> <span class=\"n\">_</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Mathlib.Meta.Positivity.evalFinsetCard</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">_l</span><span class=\"o\">,</span> <span class=\"n\">_r</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Expr.getAppArgs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_f</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `Finset.card`\"</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">so</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">do</span> <span class=\"c1\">-- TODO: if I make a typo it doesn't complain?</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span>\n      <span class=\"k\">let</span> <span class=\"n\">_fi</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fintype</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">_no</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span>\n      <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset.univ_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span> <span class=\"o\">}</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">fv</span> <span class=\"bp\">←</span> <span class=\"n\">findLocalDeclWithType</span><span class=\"bp\">?</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fv</span><span class=\"o\">))</span>\n  <span class=\"k\">match</span> <span class=\"n\">so</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">fi</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.Nonempty.card_pos.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">$</span><span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 407874443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529251
    },
    {
        "content": "<p>This is bad, but type-ascripting with <code>: Expr</code> unblocks me at least.</p>",
        "id": 407874614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529309
    },
    {
        "content": "<p>Instead of <code>Expr</code>, you can simply use the correct <code>Q</code> type: <code>Q(0 &lt; card $s)</code>!</p>",
        "id": 407875422,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702529599
    },
    {
        "content": "<p><span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span> Where do you learn your tricks?</p>",
        "id": 407875522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529642
    },
    {
        "content": "<p><code>norm_num</code> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 407875655,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702529680
    },
    {
        "content": "<p>We, as a community, have a documentation issue <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 407875768,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529720
    },
    {
        "content": "<p>(Just kidding, we actually lie a lot there to make the refl proofs work!) What tipped me off here was the presence of <code>$e</code>.</p>",
        "id": 407875812,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702529736
    },
    {
        "content": "<p>you just noticed? I'm hoping that if I do enough oral teaching eventually someone will write the docs :D</p>",
        "id": 407875935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529773
    },
    {
        "content": "<p>Oh that's certainly not news to me! I've been a big advocate of docs in the past and I've written a lot myself. But here I had no idea what repo to even look into.</p>",
        "id": 407876141,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529865
    },
    {
        "content": "<p>most examples of use of Qq are in mathlib tactics</p>",
        "id": 407876245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529893
    },
    {
        "content": "<p>Yeah but I was hoping I could find something in the metaprogramming book, typically.</p>",
        "id": 407876366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529948
    },
    {
        "content": "<p>I don't think it covers Qq</p>",
        "id": 407876396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529961
    },
    {
        "content": "<p>... or the Qq readme</p>",
        "id": 407876454,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702529987
    },
    {
        "content": "<p>Mario, while you are here, how do I extract the <code>u</code> from an expression <code>e</code> whose type is <code>{ι : Type u} → {α : Type v} → [Semifield α] → Finset ι → (ι → α) → α</code>?</p>",
        "id": 407876764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530070
    },
    {
        "content": "<p>I tried <code>let ⟨v, _l, _r⟩ ← inferTypeQ' &lt;| (Expr.getAppArgs (← withReducible (whnf e))).get! 1</code> but it doesn't seem to work</p>",
        "id": 407876839,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530093
    },
    {
        "content": "<p><code>(&lt;- whnf (&lt;- whnf (&lt;- inferType e)).bindingDomain!).sortLevel!</code> maybe?</p>",
        "id": 407877274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530199
    },
    {
        "content": "<p>it's a bit of a weird situation to be in</p>",
        "id": 407877346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530221
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Positivity.20extension.20for.20Finset.2Ecard/near/407877274\">said</a>:</p>\n<blockquote>\n<p><code>(&lt;- whnf (&lt;- inferType (&lt;- whnf e).bindingDomain!)).sortLevel!</code> maybe?</p>\n</blockquote>\n<p>Wait sorry to be dump but what is the full line supposed to look like?</p>",
        "id": 407877521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530273
    },
    {
        "content": "<p><code>let u := (&lt;- whnf (&lt;- whnf (&lt;- inferType e)).bindingDomain!).sortLevel!</code></p>",
        "id": 407877567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530290
    },
    {
        "content": "<p>Okay, this does not seem to work because it does not cooperate nicely with Qq. I assume this is what <code>inferTypeQ'</code> is about.</p>",
        "id": 407877692,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530351
    },
    {
        "content": "<p>you can coerce the types once you have all the exprs and levels you need</p>",
        "id": 407877768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530380
    },
    {
        "content": "<p>Sorry, you will to be more precise. I'm a Lean 4 noob and I learn by seeing code.</p>",
        "id": 407877792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530414
    },
    {
        "content": "<p>I assume you are talking about the code you posted above... but then what is this function of type <code>{ι : Type u} → {α : Type v} → [Semifield α] → Finset ι → (ι → α) → α</code> you are referring to?</p>",
        "id": 407878095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530640
    },
    {
        "content": "<p>you can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">Finset.card</span> <span class=\"n\">_</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Mathlib.Meta.Positivity.evalFinsetCard</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not `Finset.card`\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">so</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"n\">try</span>\n      <span class=\"k\">let</span> <span class=\"n\">_fi</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fintype</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span>\n      <span class=\"k\">let</span> <span class=\"n\">_no</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">))</span>\n      <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset.univ_nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)))</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">fv</span> <span class=\"bp\">←</span> <span class=\"n\">findLocalDeclWithType</span><span class=\"bp\">?</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fv</span><span class=\"o\">))</span>\n  <span class=\"k\">match</span> <span class=\"n\">so</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">fi</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Finset.Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Finset.Nonempty.card_pos.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">s</span> <span class=\"bp\">$</span><span class=\"n\">fi</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">card</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n</code></pre></div>",
        "id": 407878156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530697
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Positivity.20extension.20for.20Finset.2Ecard/near/407878095\">said</a>:</p>\n<blockquote>\n<p>I assume you are talking about the code you posted above... but then what is this function of type <code>{ι : Type u} → {α : Type v} → [Semifield α] → Finset ι → (ι → α) → α</code> you are referring to?</p>\n</blockquote>\n<p>Sorry, this is referring to <a href=\"#narrow/stream/287929-mathlib4/topic/Could.20positivity.20handle.20sums.20of.20squares.3F/near/407860166\">this message</a> where the function is basically <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.sum#doc\">docs#Finset.sum</a> (except that I divide by the cardinality of the finset to get an average).</p>",
        "id": 407878302,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530817
    },
    {
        "content": "<p>Oh I see! Is this a general solution?</p>",
        "id": 407878385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530876
    },
    {
        "content": "<p>at the beginning of one of these matches you usually know that the input is a constant applied to some stuff so you can use that to get the main universe levels</p>",
        "id": 407878436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530922
    },
    {
        "content": "<p>because it seems</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">_l</span><span class=\"o\">,</span> <span class=\"n\">_r</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">inferTypeQ'</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">Expr.getAppArgs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">some_small_number</span>\n</code></pre></div>\n<p>does actually work, except that I have no way other than trial and error to figure out <code>some_small_number</code>.</p>",
        "id": 407878438,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530925
    },
    {
        "content": "<p><code>some_small_number</code> should be the arity of the constant</p>",
        "id": 407878449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530948
    },
    {
        "content": "<p>What's a constant in that context?</p>",
        "id": 407878450,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530950
    },
    {
        "content": "<p>?</p>",
        "id": 407878455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530957
    },
    {
        "content": "<p><code>.const</code></p>",
        "id": 407878457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530960
    },
    {
        "content": "<p>in this case, it is <code>Finset.sum.{u}</code></p>",
        "id": 407878508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530978
    },
    {
        "content": "<p>and we use that to nab the <code>u</code></p>",
        "id": 407878517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702530985
    },
    {
        "content": "<p>Yes but does correspond to a declaration in the environment, a variable in the local context... ?</p>",
        "id": 407878523,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702530994
    },
    {
        "content": "<p>it's a level expression, whatever level happens to be used on this <code>Finset.sum</code> application found in the goal or whatever</p>",
        "id": 407878557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702531033
    },
    {
        "content": "<p>Okay so what if I have a declaration with two universe variables and I want to nab the second one?</p>",
        "id": 407878582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702531063
    },
    {
        "content": "<p>you would use a list with two elements</p>",
        "id": 407878592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702531077
    },
    {
        "content": "<p>The length of the list should match the constant's number of universes</p>",
        "id": 407878644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702531094
    },
    {
        "content": "<p>if you mouse over <code>Finset.card</code> you can see it has one universe argument</p>",
        "id": 407878659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702531106
    },
    {
        "content": "<p>Okay great! This was very instructive. I shall come back to complain if need arises.</p>",
        "id": 407878660,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702531106
    },
    {
        "content": "<p>Here I am again with a MWE (that I've already shown to <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Normed.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">ENNReal</span> <span class=\"n\">NNReal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span> <span class=\"n\">Function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lp</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lp_nonneg</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">lp</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lp_pos</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lp</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lp_pos_of_pos</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lp</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">lp_pos</span> <span class=\"n\">hf.ne'</span>\n\n<span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `lp p f`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">lp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalLp</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"n\">z</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">fi</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Fintype</span> <span class=\"bp\">$</span><span class=\"n\">ι</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">no</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">withReducible</span> <span class=\"o\">(</span><span class=\"n\">whnf</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not lp\"</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">zα</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n    <span class=\"k\">let</span> <span class=\"n\">pα</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">PartialOrder</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n    <span class=\"k\">let</span> <span class=\"n\">pα'</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)))</span>\n    <span class=\"n\">assumeInstancesCommute</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zα</span> <span class=\"n\">pα</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lp_pos_of_pos</span> <span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">$</span><span class=\"n\">fi</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">no</span> <span class=\"bp\">$</span><span class=\"n\">pα'</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonzero</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lp_pos</span> <span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">$</span><span class=\"n\">fi</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">no</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">pf</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lp_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">$</span><span class=\"n\">fi</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">no</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">try</span> <span class=\"o\">{</span>\n    <span class=\"k\">let</span> <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">findLocalDeclWithType</span><span class=\"bp\">?</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">pf</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">lp_pos</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">pf</span><span class=\"o\">])</span>\n  <span class=\"o\">}</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lp_nonneg</span> <span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">$</span><span class=\"n\">fi</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">no</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">NormedAddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- All of these are expected to work</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">lp</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lp</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"bp\">∞</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">lp</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">‖</span><span class=\"n\">f</span><span class=\"bp\">‖</span><span class=\"n\">_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n</code></pre></div>",
        "id": 407933911,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702551173
    },
    {
        "content": "<p>I don't know how to tell Qq that the <code>PartialOrder (∀ i, α i)</code> and <code>∀ i, Preorder (α i)</code> instances result in the same <code>Preorder (∀ i, α i)</code> instance. I would have hoped <code>assumeInstancesCommute</code> does this, but maybe that only works for instances existing in the local context, not derived ones?</p>",
        "id": 407934160,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702551249
    },
    {
        "content": "<p>Not answering the question directly, but here's how to avoid all the <code>app</code> stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `lp p f`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">lp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalLp</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">z</span> <span class=\"n\">p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">u</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"c1\">-- lean4#3060 means we can't use `|` here</span>\n    <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not lp\"</span>\n    <span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lp</span> <span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">$</span><span class=\"n\">instι</span> <span class=\"bp\">$</span><span class=\"n\">αi</span> <span class=\"bp\">$</span><span class=\"n\">instnorm</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not lp\"</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"not lp\"</span>\n</code></pre></div>",
        "id": 407936960,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702552167
    },
    {
        "content": "<p>Here's an error-free version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The `positivity` extension which identifies expressions of the form `lp p f`. -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">lp</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalLp</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">_z</span> <span class=\"n\">_p</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">u</span> <span class=\"k\">then</span> <span class=\"k\">do</span> <span class=\"c1\">-- lean4#3060 means we can't combine this with the match below</span>\n    <span class=\"k\">match</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">lp</span> <span class=\"bp\">$</span><span class=\"n\">ι</span> <span class=\"bp\">$</span><span class=\"n\">instι</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">instnorm</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">try</span> <span class=\"o\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">_pα</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">PartialOrder</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)))</span>\n        <span class=\"n\">assumeInstancesCommute</span>\n        <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">lp_pos_of_pos</span> <span class=\"bp\">$</span><span class=\"n\">pf</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nonzero</span> <span class=\"n\">pf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">lp_pos</span> <span class=\"bp\">$</span><span class=\"n\">pf</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">lp_nonneg</span><span class=\"o\">))</span>\n      <span class=\"o\">}</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">assumeInstancesCommute</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">findLocalDeclWithType</span><span class=\"bp\">?</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n          <span class=\"k\">let</span> <span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">pf</span>\n          <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">lp_pos</span> <span class=\"bp\">$</span><span class=\"n\">pf</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nonnegative</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">lp_nonneg</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not lp\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">throwError</span> <span class=\"s2\">\"not lp\"</span>\n</code></pre></div>",
        "id": 407938134,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702552615
    },
    {
        "content": "<p>Note the trick here: only use <code>synthInstanceQ</code> for when you need <em>new</em> instances that require a global isntance lookup; if the instance you want is a consequence of a local instance, then use <code>q(inferInstance)</code> instead</p>",
        "id": 407938675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702552820
    },
    {
        "content": "<p>And now what if I want to pattern-match on whether my type is a pi-type?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity.Core</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">zα</span> <span class=\"n\">pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  stuck at solving universe constraint</span>\n<span class=\"cm\">    imax ?u.573 ?u.575 =?= u+1</span>\n<span class=\"cm\">  while trying to unify</span>\n<span class=\"cm\">    Sort (imax ?u.573 ?u.575) : Type (imax ?u.573 ?u.575)</span>\n<span class=\"cm\">  with</span>\n<span class=\"cm\">    Type u : Type (u + 1)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">instβfin</span> <span class=\"bp\">$</span><span class=\"n\">instβdec</span> <span class=\"bp\">$</span><span class=\"n\">instβgroup</span> <span class=\"bp\">$</span><span class=\"n\">instγring</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not conv\"</span>\n</code></pre></div>",
        "id": 407954327,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702558671
    },
    {
        "content": "<p>Does this work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">TypeFunction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">zα</span> <span class=\"n\">pα</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u1</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">u2</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">TypeFunction.</span><span class=\"o\">{</span><span class=\"n\">u2</span><span class=\"o\">,</span><span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">instβfin</span> <span class=\"bp\">$</span><span class=\"n\">instβdec</span> <span class=\"bp\">$</span><span class=\"n\">instβgroup</span> <span class=\"bp\">$</span><span class=\"n\">instγring</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not conv\"</span>\n</code></pre></div>",
        "id": 407956784,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702559395
    },
    {
        "content": "<p>I think this raises that matching on universes is a bad idea, because <code>max 1 1</code> is not equal to <code>1</code></p>",
        "id": 407959386,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702560310
    },
    {
        "content": "<p>Here's a non-working minimal example based off your idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Positivity.Core</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Defs</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">conv</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">OrderedCommSemiring</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_nonneg</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_nonneg_of_pos_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">conv_nonneg</span> <span class=\"n\">hf.le</span> <span class=\"n\">hg</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_nonneg_of_nonneg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">conv_nonneg</span> <span class=\"n\">hf</span> <span class=\"n\">hg.le</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">OrderedCommSemiring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">StrictOrderedCommSemiring</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">conv_pos</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">StrictOrderedCommSemiring</span>\n<span class=\"kd\">end</span> <span class=\"n\">Defs</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">abbrev</span> <span class=\"n\">TypeFunction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">positivity</span> <span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">evalConv</span> <span class=\"o\">:</span> <span class=\"n\">PositivityExt</span> <span class=\"n\">where</span> <span class=\"n\">eval</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">u1</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">u2</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span><span class=\"n\">QL</span> <span class=\"n\">max</span> <span class=\"n\">u1</span> <span class=\"n\">u2</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n  <span class=\"k\">match</span> <span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">TypeFunction.</span><span class=\"o\">{</span><span class=\"n\">u2</span><span class=\"o\">,</span> <span class=\"n\">u1</span><span class=\"o\">}</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">instαfin</span> <span class=\"bp\">$</span><span class=\"n\">instαdec</span> <span class=\"bp\">$</span><span class=\"n\">instαgrp</span> <span class=\"bp\">$</span><span class=\"n\">instβring</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">instβstrictring</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u2</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"n\">instβordring</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">OrderedCommSemiring</span> <span class=\"bp\">$</span><span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)</span>\n    <span class=\"n\">assumeInstancesCommute</span>\n    <span class=\"k\">let</span> <span class=\"n\">ra</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">f</span>\n    <span class=\"k\">let</span> <span class=\"n\">rb</span> <span class=\"bp\">←</span> <span class=\"n\">core</span> <span class=\"n\">zπ</span> <span class=\"n\">pπ</span> <span class=\"n\">g</span>\n    <span class=\"k\">match</span> <span class=\"n\">ra</span><span class=\"o\">,</span> <span class=\"n\">rb</span> <span class=\"k\">with</span> <span class=\"c1\">-- unknown free variable '_uniq.3469'</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">pa</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">pb</span> <span class=\"bp\">=&gt;</span>\n       <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">positive</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">conv_pos</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"bp\">$</span><span class=\"n\">β</span> <span class=\"bp\">$</span><span class=\"n\">instαfin</span> <span class=\"bp\">$</span><span class=\"n\">instαdec</span> <span class=\"bp\">$</span><span class=\"n\">instαgrp</span> <span class=\"bp\">$</span><span class=\"n\">instβstrictring</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">g</span> <span class=\"bp\">$</span><span class=\"n\">pa</span> <span class=\"bp\">$</span><span class=\"n\">pb</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- | .positive pa, .nonnegative pb =&gt; return .nonnegative q(conv_nonneg_of_pos_of_nonneg $pa $pb)</span>\n    <span class=\"c1\">-- | .nonnegative pa, .positive pb =&gt; return .nonnegative q(conv_nonneg_of_nonneg_of_pos $pa $pb)</span>\n    <span class=\"c1\">-- | .nonnegative pa, .nonnegative pb =&gt; return .nonnegative q(conv_nonneg $pa $pb)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"not conv\"</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Mathlib.Meta.Positivity</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Examples</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">OrderedCommSemiring</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">OrderedCommSemiring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">StrictOrderedCommSemiring</span>\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StrictOrderedCommSemiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">conv</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">positivity</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">StrictOrderedCommSemiring</span>\n<span class=\"kd\">end</span> <span class=\"n\">Examples</span>\n</code></pre></div>",
        "id": 407971675,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702564100
    },
    {
        "content": "<p>If you uncomment the three branches, you instead get a timeout.</p>",
        "id": 407974501,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702564811
    },
    {
        "content": "<p><code>let zπ : Q(Zero ($α → $β)) := zπ </code> seems to help</p>",
        "id": 407983795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702567336
    }
]