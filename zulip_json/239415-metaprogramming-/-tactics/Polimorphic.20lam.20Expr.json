[
    {
        "content": "<p>Hello Everybody!<br>\nI am learning metaprogramming with the <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">book</a> and I am stuck in the MetaM exercises, where I need to create a Expr of for the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>But as of my understanding, the way to create a lambda expressions forces us to pass the type, so I am stuck with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">const5</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">`</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkNatLit</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"n\">BinderInfo.default</span>\n</code></pre></div>\n<p>Any suggestions?</p>",
        "id": 405436898,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1701464253
    },
    {
        "content": "<p>I think <code>.const ``Nat []</code> is what you want for your sorry</p>",
        "id": 405437102,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701464363
    },
    {
        "content": "<p>well, depending on what type you want <code>x</code> to have :)</p>",
        "id": 405437131,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701464388
    },
    {
        "content": "<p>Yes, that will work and yield a </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>I was thinking there could be a fully polimorphic answer that could yield :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 405437447,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1701464505
    },
    {
        "content": "<p>Ah, but in that case <code>a</code> should be another free variable in the function.</p>",
        "id": 405437582,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701464545
    },
    {
        "content": "<p>Oh, and is it possible to combine this free variable with the Expr.lam ? I never used it.</p>",
        "id": 405437704,
        "sender_full_name": "Bernardo Borges",
        "timestamp": 1701464591
    },
    {
        "content": "<p>It'd be a nested lambda, where the first is a <code>BinderInfo.implicit</code> for the argument <code>a</code> whose type is <code>.sort levelOne</code> (or whatever universe you want). You can't define a lambda that's also universe polymorphic.</p>\n<p>In Lean syntax, it's <code>fun {a : Type} (x : a) =&gt; 5</code></p>",
        "id": 405439275,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701465384
    }
]