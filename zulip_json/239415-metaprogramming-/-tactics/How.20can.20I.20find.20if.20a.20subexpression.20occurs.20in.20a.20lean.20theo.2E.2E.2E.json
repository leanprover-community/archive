[
    {
        "content": "<p>I want to see if the \"<a href=\"http://combinatorics.simple_graph.degree\">combinatorics.simple_graph.degree</a>\" shows up in any theorems.</p>\n<p>The way I did it was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">check_for_degree</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">bool</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">{</span>\n  <span class=\"n\">degree_decl</span> <span class=\"bp\">‚Üê</span>  <span class=\"n\">tactic.get_decl</span> <span class=\"bp\">``</span><span class=\"n\">degree</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">degree_expr</span> <span class=\"o\">:=</span> <span class=\"n\">degree_decl.type</span><span class=\"o\">,</span>\n  <span class=\"n\">return</span> <span class=\"bp\">$</span> <span class=\"n\">expr.occurs</span> <span class=\"n\">degree_expr</span> <span class=\"n\">e</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>But, Lean prints \"false\" in the working example <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20tactic.interactive%20%0Aimport%20combinatorics.simple_graph.basic%0Aimport%20combinatorics.simple_graph.degree_sum%0Aopen_locale%20big_operators%20--%20enable%20%E2%88%91%20notation%0A.%0A%0Aopen%20simple_graph%0A%0A-----------------------------%20SAMPLE%20THEOREMS%20---------------------------%20%0A%0Auniverses%20u%0Avariables%20%7BV%20%3A%20Type%20u%7D%20%20%0A%20%20%20%20%20%20%20%20%20%20--%7BG%20%3A%20simple_graph%20V%7D%20%20--%20the%20graph%20is%20simple%0A%20%20%20%20%20%20%20%20%20%20--%5Bfintype%20V%5D%20%20%20%20%20%20%20%20%20%20%20--%20the%20graph%20is%20finite%20%28necessary%20for%20vertex%20set%20cardinality%20to%20be%20computed%29%0A%20%20%20%20%20%20%20%20%20%20--%5Bdecidable_rel%20G.adj%5D%20--%20whether%20two%20vertices%20are%20adjacent%20is%20decidable%20%28necessary%20for%20vertex%20degree%20to%20be%20computed%29%0A%20%20%20%20%20%20%20%20%20%20--%5Bdecidable_eq%20V%5D%20%20%20%20%20%20--%20whether%20two%20vertices%20are%20equal%20is%20decidable%20%28necessary%20for%20edge_set%20cardinality%20to%20be%20computed%29%0A%0A--%20Setting%20up%20shorthand%20notations.%20--%0Anotation%20%20X%20%60%5BG%5D%60%20%3A%3D%20%40finset.univ%20X%20_%20%20%20--%20V%5BG%5D%0Anotation%20%60E%5B%60%20X%20%60%5D%60%20%20%20%3A%3D%20X.edge_finset%20--%20E%5BG%5D%0Anotation%20%60%E2%88%A3%E2%88%A3%60%20X%20%60%E2%88%A3%E2%88%A3%60%20%20%3A%3D%20X.card%20%20%20%20%20%20%20%20%20--%20%E2%88%A3%E2%88%A3%28V%5BG%5D%29%E2%88%A3%E2%88%A3%20or%20%E2%88%A3%E2%88%A3E%5BG%5D%E2%88%A3%E2%88%A3%0A%0A--%20Tag%20allowable%20graph%20theory%20notations%20--%0A%40%5Buser_attribute%5D%0Ameta%20def%20graph_theory_attr%20%3A%20user_attribute%20%3A%3D%0A%7B%20name%20%3A%3D%20%60graph_theory%2C%0A%20%20descr%20%3A%3D%20%22A%20tag%20for%20all%20allowable%20graph_theory%20theorems%20our%20machine%20can%20use.%22%20%7D%0A%0A--%20In%20a%20simple%20graph%2C%20a%20vertex%20connects%20to%20at%20most%20%28n-1%29%20other%20vertices%20--%0A%40%5Bgraph_theory%5D%20%0Atheorem%20degree_bound%20%28G%20%3A%20simple_graph%20V%29%20%5Bfintype%20V%5D%20%5Bdecidable_rel%20G.adj%5D%20%5Bdecidable_eq%20V%5D%3A%20%0A%20%20%E2%88%80%20v%20%3A%20V%2C%20G.degree%20v%20%E2%89%A4%20%E2%88%A3%E2%88%A3%28V%5BG%5D%29%E2%88%A3%E2%88%A3%20-%201%20%3A%3D%0Abegin%0A%20%20intros%20v%2C%0A%20%20have%20%3A%3D%20simple_graph.degree_lt_card_verts%20G%20v%2C%20%0A%20%20rw%20finset.card_univ%2C%20apply%20nat.le_pred_of_lt%2C%20assumption%2C%0Aend%0A%0A--%20The%20degree-sum%20formula%3A%20the%20sum%20of%20the%20degrees%20%3D%20twice%20the%20number%20of%20edges%20--%0A%40%5Bgraph_theory%5D%20%0Atheorem%20degree_sum%20%28G%20%3A%20simple_graph%20V%29%20%5Bfintype%20V%5D%20%5Bdecidable_rel%20G.adj%5D%20%5Bdecidable_eq%20V%5D%3A%20%0A%20%20%E2%88%91v%2C%20%20G.degree%20v%20%3D%202%20*%20%E2%88%A3%E2%88%A3E%5BG%5D%E2%88%A3%E2%88%A3%20%3A%3D%0Abegin%0A%20%20apply%20sum_degrees_eq_twice_card_edges%20G%2C%0Aend%0A%0A--------------------%20%20TACTIC%3A%20PRINT%20MATCHING%20THEOREMS%20--------------------%20%0A%0A%23check%20degree%20--%20output%20%3A%20%CE%A0%20%28G%20%3A%20simple_graph%20%3Fm_1%29%20%28v%20%3A%20%3Fm_1%29%20%5B_inst_1%20%3A%20fintype%20%E2%86%A5%28G.neighbor_set%20v%29%5D%2C%20%E2%84%95%0A%0Ameta%20def%20check_for_degree%20%28e%20%3A%20expr%29%20%3A%20tactic%20bool%20%3A%3D%0Ado%20%7B%0A%20%20degree_decl%20%E2%86%90%20%20tactic.get_decl%20%60%60degree%2C%0A%20%20let%20degree_expr%20%3A%3D%20degree_decl.type%2C%0A%20%20--tactic.trace%20degree_expr%2C%0A%20%20return%20%24%20expr.occurs%20degree_expr%20e%0A%7D%0A%0Ameta%20def%20print_all_theorems_with_degree%20%3A%20tactic%20unit%20%3A%3D%0Ado%20%7B%0A%20%20names%20%E2%86%90%20attribute.get_instances%20%60graph_theory%2C%20--%20get%20all%20names%20of%20graph%20theory%20theorems%0A%20%20decls%20%E2%86%90%20names.mmap%20%28%CE%BB%20n%2C%20tactic.get_decl%20n%29%2C%20--%20get%20all%20graph%20theory%20theorems%0A%0A%0A%20%20decls.mmap'%20%24%20%CE%BB%20d%2C%20match%20d%20with%0A%20%20%7C%20declaration.thm%20n%20_%20e%20_%20%3A%3D%20do%20%7B%0A%20%20%20%20%20%20tactic.trace%20%28check_for_degree%20e%29%2C%0A%20%20%20%20%20%20tactic.trace%20e%2C%20--%20e%20is%20%22d.type%22%20which%20is%20the%20theorem.%20%20%22d.value%22%20is%20the%20proof.%0A%20%20%20%20%20%20tactic.trace%20%22%22%0A%20%20%20%20%7D%0A%20%20%7C%20_%20%3A%3D%20tactic.skip%20--%20if%20it's%20not%20a%20theorem%2C%20don't%20print%20it%0A%20%20end%2C%0A%0A%20%20tactic.skip%0A%7D%0A%0Atheorem%20test_tactic%20%3A%20true%20%3A%3D%0Abegin%0A%20%20print_all_theorems_with_degree%2C%0A%20%20finish%2C%0Aend%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A%0A\">here</a>.</p>\n<p>What should I change?</p>\n<p>Any help would be much appreciated!</p>",
        "id": 328285008,
        "sender_full_name": "AG",
        "timestamp": 1676565953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420256\">AG</span> has marked this topic as resolved.</p>",
        "id": 328285114,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676565977
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"420256\">AG</span> has marked this topic as unresolved.</p>",
        "id": 328285144,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676565985
    },
    {
        "content": "<p>Why are you looking for the type of the decl?</p>",
        "id": 328323719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676577181
    },
    {
        "content": "<p>Does checking for <code> `degree </code> in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.list_constant\">docs#expr.list_constant</a> do what you need?</p>",
        "id": 328324396,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676577410
    },
    {
        "content": "<p>Oh yes that's perfect!  Thank you very much.  This gives back the desired result now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">constants_in_e</span> <span class=\"o\">:=</span> <span class=\"n\">e.list_constant</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">contains_degree</span> <span class=\"o\">:=</span> <span class=\"n\">constants_in_e.contains</span> <span class=\"bp\">``</span><span class=\"n\">degree</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 328438356,
        "sender_full_name": "AG",
        "timestamp": 1676631241
    }
]