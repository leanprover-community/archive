[
    {
        "content": "<p>Hi, I have this trivial tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">change'</span><span class=\"o\">)</span> <span class=\"s2\">\"change'\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">change'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">sop</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dstx</span> <span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n  <span class=\"n\">addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">dstx</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- unsolved goals  ⊢ f 3 = 4</span>\n  <span class=\"n\">change'</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"c1\">-- Try this: change f 3 = 4</span>\n</code></pre></div>\n<p>Currently, it underlines the entire <code>change' a b c d e</code> part with green. However, when I use \"try this\", instead of the intended behaviour <code>change f 3 = 4</code> appearing, I instead get <code>change f 3 = 4 a b c d e</code>, meaning it's only replacing <code>change'</code>.</p>\n<p>I guess it's because <code>[$sop:term]?</code> is optional? But I don't know how to fix it.</p>",
        "id": 397569360,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697745711
    },
    {
        "content": "<p>Sorry if this is mentioned somewhere, I am new to metaprogramming and still slowly working through the book</p>",
        "id": 397569426,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697745727
    },
    {
        "content": "<p>Also according to the docs of <code>[Std.Tactic.TryThis.]addSuggestion</code>, it says if <code>origSpan?</code> is not provided, then the actual text to be replaced by <code>suggestion</code> will default to <code>ref</code> i.e. the part that's highlighted, and I am not sure why that' snot happening</p>",
        "id": 397570027,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697745965
    },
    {
        "content": "<p>It works for me</p>",
        "id": 397570348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746102
    },
    {
        "content": "<p>It replaces correctly?</p>",
        "id": 397570400,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697746126
    },
    {
        "content": "<p>yes, both the code action and the button replace the whole line</p>",
        "id": 397570425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746142
    },
    {
        "content": "<p>Okay it might be something to do with the Vim plugin I am using instead. Sorry for that!</p>",
        "id": 397570437,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697746148
    },
    {
        "content": "<p>(actually not the whole line, the comment after the tactic is not deleted)</p>",
        "id": 397570511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746187
    },
    {
        "content": "<p>Yea but I think that's not part of the getRef</p>",
        "id": 397570601,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697746223
    },
    {
        "content": "<p>it is</p>",
        "id": 397570633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746238
    },
    {
        "content": "<p>but the code is smart about trailing whitespace</p>",
        "id": 397570654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746252
    },
    {
        "content": "<p>there is also an option to adjust the hover to only cover <code>change'</code> (while still replacing the whole line), basically the opposite of what you are observing</p>",
        "id": 397570734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746290
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">change'</span><span class=\"bp\">%$</span><span class=\"n\">tx</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">sop</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dstx</span> <span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n  <span class=\"n\">addSuggestion</span> <span class=\"n\">tx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">dstx</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">extraMsg</span> <span class=\"o\">:=</span> <span class=\"s2\">\"asdf\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think for that, something like this works? (I copied the tactic <code>change?</code> in Mathlib)</p>",
        "id": 397570955,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697746394
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">change'</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">sop</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">dstx</span> <span class=\"bp\">←</span> <span class=\"n\">delabToRefinableSyntax</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n  <span class=\"n\">addSuggestion</span> <span class=\"n\">tk</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">dstx</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">origSpan</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397571000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746415
    },
    {
        "content": "<p><del>Oh nice, exactly the same :D</del></p>",
        "id": 397571047,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697746441
    },
    {
        "content": "<p>without the <code>origSpan?</code>, it will have the issue you are reporting</p>",
        "id": 397571079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697746444
    },
    {
        "content": "<p>I see, thanks a lot</p>",
        "id": 397571183,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697746499
    },
    {
        "content": "<p>The VSCode plugin uses some tricky heuristics to get all of this correct. I don't really want to focus on reproducing it, what lean.nvim does to approximate is complicated enough --  I'd rather wait and hope someone improves things on the pure-Lean side :)</p>",
        "id": 397574067,
        "sender_full_name": "Julian Berman",
        "timestamp": 1697747947
    },
    {
        "content": "<p>Uhhh I think there is a better way? The diagnostics objects already include <code>end_lnum</code> and <code>end_col</code>, but it seems both your code <em>and</em> VSCode doesn't use it...<br>\nI will make a PR uh soon<br>\n<a href=\"/user_uploads/3121/LqEiJNMvctWkgwFUpMI85LTi/Screenshot-2023-10-19-at-21.42.02.png\">Screenshot-2023-10-19-at-21.42.02.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LqEiJNMvctWkgwFUpMI85LTi/Screenshot-2023-10-19-at-21.42.02.png\" title=\"Screenshot-2023-10-19-at-21.42.02.png\"><img src=\"/user_uploads/3121/LqEiJNMvctWkgwFUpMI85LTi/Screenshot-2023-10-19-at-21.42.02.png\"></a></div>",
        "id": 397574480,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697748159
    },
    {
        "content": "<p>IIRC that doesn't properly handle stuff like trimming unnecessarily entering tactic mode, and also I think the ranges are wrong for some zero-length diagnostics, but it's been awhile since I've looked and I might be misremembering / it may have been fixed. As I say if you PR something happy to merge it if it passes all the tests and some new one, but otherwise I'm waiting for code actions :)</p>",
        "id": 397578493,
        "sender_full_name": "Julian Berman",
        "timestamp": 1697750052
    },
    {
        "content": "<p>I'm confused. The lean code specifies exactly how this is supposed to be handled, none of the work is in the extension</p>",
        "id": 397579644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697750718
    },
    {
        "content": "<p>He is referring to the code <a href=\"https://github.com/leanprover/vscode-lean/blob/8ad0609f560f279512ff792589f06d18aa92fb3f/src/tacticsuggestions.ts#L76\">here</a> which handles replacing suggestions heuristically.</p>",
        "id": 397580111,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1697750991
    }
]