[
    {
        "content": "<p>Hello everyone,</p>\n<p>I was struggling with errors with unexpanders after reading the \"Pretty-Printing\" chapter of the MPIL book and trying to apply them to my own simple language. Then I decided to try to the example language in the chapter of #mpil directly and I get the exact same type mismatch errors.</p>",
        "id": 398990135,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698455265
    },
    {
        "content": "<p>Here's the book example annotated with my own comments marked <code>ERROR</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Elab</span> <span class=\"n\">Term</span>\n\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">lang</span>\n<span class=\"n\">syntax</span> <span class=\"n\">num</span>   <span class=\"o\">:</span> <span class=\"n\">lang</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">lang</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"let \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">lang</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">lang</span><span class=\"o\">:</span> <span class=\"n\">lang</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[Lang| \"</span> <span class=\"n\">lang</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">LangExpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">numConst</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">LangExpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ident</span>    <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">LangExpr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">letE</span>     <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">LangExpr</span> <span class=\"bp\">→</span> <span class=\"n\">LangExpr</span> <span class=\"bp\">→</span> <span class=\"n\">LangExpr</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LangExpr.numConst</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LangExpr.ident</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">x.getId</span><span class=\"o\">)))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">lang</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">lang</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LangExpr.letE</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">x.getId</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">])</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">NumLit</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">lang</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s.raw</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">Ident</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">lang</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">s.raw</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- LangExpr.letE \"foo\" (LangExpr.numConst 12)</span>\n<span class=\"c1\">--   (LangExpr.letE \"bar\" (LangExpr.ident \"foo\") (LangExpr.ident \"foo\")) : LangExpr</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">Lang</span><span class=\"bp\">|</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"k\">in</span>\n  <span class=\"n\">foo</span>\n<span class=\"o\">]</span>\n\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">LangExpr.numConst</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandNumConst</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LangExpr.numConst</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">])</span> <span class=\"c1\">-- ERROR: Big error here about type mismatch</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">LangExpr.ident</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandIdent</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LangExpr.ident</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>               <span class=\"c1\">-- ERROR: Big error here about type mismatch</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">x.getString</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">$</span> <span class=\"n\">Name.mkSimple</span> <span class=\"n\">str</span>\n    <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">LangExpr.letE</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpandLet</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">LangExpr.letE</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">[</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">lang</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">lang</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span>  <span class=\"c1\">-- ERROR: Big error here about type mismatch</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">x.getString</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">$</span> <span class=\"n\">Name.mkSimple</span> <span class=\"n\">str</span>\n    <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"n\">Lang</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- [Lang| let foo := 12 in foo] : LangExpr</span>\n<span class=\"k\">#check</span> <span class=\"o\">[</span><span class=\"n\">Lang</span><span class=\"bp\">|</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">12</span> <span class=\"k\">in</span> <span class=\"n\">foo</span>\n<span class=\"o\">]</span> <span class=\"c1\">--ERROR:  No unexpansion here ofc</span>\n</code></pre></div>",
        "id": 398990564,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698455481
    },
    {
        "content": "<p>I have not touched unexpanders before. So I don't know whether (and if so then what) changed after this chapter was written.</p>",
        "id": 398990820,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698455630
    },
    {
        "content": "<p>UPDATE: Found my mistake.  All that was needed was <code>open Lean.PrettyPrinter</code>. But for some reason lean did not complain about the identifier not being there.</p>",
        "id": 398992262,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698456423
    }
]