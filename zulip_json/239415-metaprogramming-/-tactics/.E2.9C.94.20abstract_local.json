[
    {
        "content": "<p>I  have trouble understanding the semantics of <a href=\"https://leanprover-community.github.io/mathlib_docs/init/meta/expr.html#expr.abstract_local\">https://leanprover-community.github.io/mathlib_docs/init/meta/expr.html#expr.abstract_local</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/init/meta/expr.html#expr.lambdas\">https://leanprover-community.github.io/mathlib_docs/init/meta/expr.html#expr.lambdas</a> in Lean3:</p>\n<p>As I understand it, all appearances of a given local variable should be abstracted to a de Bruijn variable by <code>abstract_local</code> and lambda-bound by <code>expr.lambdas</code>, and the local variable is identified by its unique name.</p>\n<p>But in my code (which is a mess so I hope we can resolve everything without having to look at it), I have the following lines</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">locs</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">list.head</span> <span class=\"n\">locs</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">local_uniq_name</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">trace</span> <span class=\"o\">(</span><span class=\"n\">abstract_local</span> <span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">local_uniq_name</span> <span class=\"n\">b</span><span class=\"o\">)),</span>\n    <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">expr.lambdas</span> <span class=\"n\">locs</span> <span class=\"n\">res</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>with corresponding outputs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">c._fresh.6551.6852</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">ᾰ._fresh.6551.6890</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span>\n <span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"bp\">&lt;</span><span class=\"n\">c._fresh.6551.6852</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"bp\">&lt;</span><span class=\"n\">ᾰ._fresh.6551.6890</span><span class=\"bp\">&gt;</span><span class=\"o\">])</span>\n\n<span class=\"n\">_fresh.6551.6825</span>\n\n<span class=\"n\">g</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span> <span class=\"bp\">#</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span><span class=\"n\">c._fresh.6551.6852</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">ᾰ._fresh.6551.6890</span><span class=\"bp\">&gt;</span>\n\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b_1</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">&lt;</span><span class=\"n\">b_1.b_1</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">c.c</span><span class=\"bp\">&gt;</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">b_1.b_1</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">c.c</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.6551.6825</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">ᾰ.ᾰ</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n<p>The problem is: only one occurrence of <code>b</code> has been replaced by <code>#0</code> with two more occurrences not abstracted. After <code>expr.lambdas</code> that means that there are two local variables <code>b</code> and <code>b_1</code> where there should be only one. (And pprinting the uniq names shows that indeed there was only one <code>b</code> involved prior to the <code>expr.lambdas</code> call.)</p>\n<p>I have tried to come up with a MWE, but here I did not get the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">non_mwe</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">conc</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">e</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">mk_local_pis</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"n\">conc</span><span class=\"o\">,</span>\n  <span class=\"n\">trace</span> <span class=\"bp\">$</span> <span class=\"n\">abstract_local</span> <span class=\"n\">conc</span> <span class=\"o\">(</span><span class=\"n\">local_uniq_name</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">non_mwe</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Have you encountered something like this before? Did I misunderstand the semantics of these functions? How would one lambda-bind <code>b</code> in the example above? Are there other debugging tricks?</p>\n<p>Any help is greatly appreaciated!!</p>",
        "id": 338651108,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1677606365
    },
    {
        "content": "<p>This approach should work and your understanding of these functions is correct afaict, so this is a bit mysterious. Maybe a missing <code>instantiate_mvars</code> before <code>abstract_locals</code>? My hypothesis is that <code>trace</code> instantiates mvars before printing, leading to a discrepancy between the <code>expr</code> printed by <code>trace</code> and the <code>expr</code> that <code>abstract_locals</code> sees.</p>",
        "id": 338854586,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677680633
    },
    {
        "content": "<p>Ohh you may have found exactly the right issue!! I'll check!</p>",
        "id": 338875178,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1677684812
    },
    {
        "content": "<p>There we go</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.7640.13151</span><span class=\"bp\">&gt;</span> <span class=\"bp\">&lt;</span><span class=\"n\">c._fresh.7640.13178</span><span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span><span class=\"n\">ᾰ._fresh.7640.13216</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span>\n <span class=\"o\">[</span><span class=\"bp\">&lt;</span><span class=\"n\">b._fresh.7640.13151</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"bp\">&lt;</span><span class=\"n\">c._fresh.7640.13178</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"bp\">&lt;</span><span class=\"n\">ᾰ._fresh.7640.13216</span><span class=\"bp\">&gt;</span><span class=\"o\">])</span>\n</code></pre></div>\n<p>you are a hero!!</p>\n<p><code>set_option pp.instantiate_mvars false</code></p>",
        "id": 338875768,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1677684931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> has marked this topic as resolved.</p>",
        "id": 338875801,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677684938
    }
]