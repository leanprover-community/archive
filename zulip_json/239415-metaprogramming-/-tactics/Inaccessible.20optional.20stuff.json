[
    {
        "content": "<p>In the following code, why is the <code>dbg_trace</code> returning <code>none</code>? Removing the <code>\"with\"</code> part works.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">new</span><span class=\"o\">:(</span><span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">new</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">c</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 404895077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701272382
    },
    {
        "content": "<p>It seems that <code>elab</code> might not be generating the right pattern, but I don't really know exactly what I'm looking at.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.command</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">new</span><span class=\"o\">:(</span><span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{new}\"</span>\n\n<span class=\"c1\">-- Generated pattern:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[[(Term.quot</span>\n<span class=\"cm\">      \"`(\"</span>\n<span class=\"cm\">      (tacticFoo__With_</span>\n<span class=\"cm\">        (token_antiquot \"foo\" \"%\" \"$\" `x._@.Mathlib.foo._hyg.4)</span>\n<span class=\"cm\">        (ident.antiquot \"$\" [] `x₁ [])</span>\n<span class=\"cm\">        (ident.antiquot \"$\" [] `x₂ [])</span>\n<span class=\"cm\">        [(optional.antiquot_suffix_splice (pseudo.antiquot \"$\" [] `new []) \"?\")])</span>\n<span class=\"cm\">      \")\")]]</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">x₁</span> <span class=\"bp\">$</span><span class=\"n\">x₂</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">new</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{new}\"</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- Generated pattern:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">[[(Tactic.quot</span>\n<span class=\"cm\">    \"`(tactic|\"</span>\n<span class=\"cm\">    (tacticFoo__With_</span>\n<span class=\"cm\">    \"foo\"</span>\n<span class=\"cm\">    (ident.antiquot \"$\" [] `x₁ [])</span>\n<span class=\"cm\">    (ident.antiquot \"$\" [] `x₂ [])</span>\n<span class=\"cm\">    [(optional.antiquot_scope \"$\" [] \"[\" [\"with\" (ident.antiquot \"$\" [] `new [])] \"]\" \"?\")])</span>\n<span class=\"cm\">    \")\")]]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 404918903,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701279552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">new</span><span class=\"o\">:((</span><span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span>  <span class=\"n\">new</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">asd</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>at least does something, no idea how to get precisely what you want though</p>",
        "id": 404931027,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701284141
    },
    {
        "content": "<p>You can at least use <code>.raw.getArg 1</code> to get the ident</p>",
        "id": 404931188,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701284211
    },
    {
        "content": "<p>This seems to be creating a null node that's either length-0 or length-2, so I guess you can do cases on the length.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">new'</span><span class=\"o\">:((</span><span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">new</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">new'.raw.getNumArgs</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">none</span> <span class=\"k\">else</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">new'.raw.getArg</span> <span class=\"mi\">1</span><span class=\"o\">⟩</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">new</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">asd</span>\n  <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 404933389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701285058
    },
    {
        "content": "<p>Thanks Alex and Kyle. Maybe I should have said I know how to work around this issue, but I'm completely puzzled about the issue and wanted to understand what's going on. I guess we need to ping <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>.</p>",
        "id": 404936699,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701286491
    },
    {
        "content": "<p>I don't think it's clear at all here what <code>new</code> should bind to, should it be something of type <code>Option (Syntax \\x Ident)</code> where <code>Syntax</code> is the <code>with</code> keyword? I believe it would be better to reject such complex patterns in <code>macro/elab</code> and point users to using separate <code>syntax+macro_rules/elab_rules</code> instead.</p>",
        "id": 404952374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701293079
    },
    {
        "content": "<p>Is using <code>elab</code> evil? This is news to me.</p>",
        "id": 404960402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701296702
    },
    {
        "content": "<p>Only its implementation</p>",
        "id": 404960467,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701296743
    },
    {
        "content": "<p>so it is better to restrict it than somehow fix this case</p>",
        "id": 404960623,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701296815
    },
    {
        "content": "<p>To answer your question, I was hoping <code>new</code> to have type <code>Option Syntax</code>.</p>",
        "id": 404960719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701296864
    },
    {
        "content": "<p>I don't understand. I thought any non trivial tactic code would benefit from using <code>elab</code>. What sort of footguns should we watch out for?</p>",
        "id": 404963965,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701298453
    },
    {
        "content": "<p>If we shouldn't allow <code>new:(\"with\" ident)?</code>, would it be possible to allow <code>elab \"foo\" x₁:ident x₂:ident (\"with\" new:ident)? : tactic =&gt; ...</code> in parallel to the syntax match <code> `(tactic| foo $x₁:ident $x₂:ident $[with $new:ident]?) </code>?</p>",
        "id": 404966288,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701299493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Inaccessible.20optional.20stuff/near/404960719\">said</a>:</p>\n<blockquote>\n<p>To answer your question, I was hoping <code>new</code> to have type <code>Option Syntax</code>.</p>\n</blockquote>\n<p>This doesn't quite answer the question; what should the <code>Syntax</code> be referring to? (My guess: the overall syntax node)</p>",
        "id": 404966403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701299567
    },
    {
        "content": "<p>I would assume the overall syntax node in that case too—I think it's fairly natural to expect chunks of syntax (like <code>with</code> together with the ident) to be grouped into a whole by the structure of (<code>T</code>)<code>Syntax</code>, not <code>×</code></p>",
        "id": 404966807,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701299820
    },
    {
        "content": "<p>Yes, I meant the whole thing. I would hope to access the interesting bit using <code>new.raw[1]</code>. But of course the ideal situation would be to be allowed to write <code>elab \"foo\" x₁:ident x₂:ident (\"with\" new:ident)? : tactic =&gt; ...</code> as Thomas wrote.</p>",
        "id": 405019784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701318561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Inaccessible.20optional.20stuff/near/405019784\">said</a>:</p>\n<blockquote>\n<p>I would hope to access the interesting bit using <code>new.raw[1]</code>.</p>\n</blockquote>\n<p>The point of these convenience commands is to never require access to <code>raw</code>. It would be better to nudge people towards <code>elab_rules</code> for these more complex matches than towards <code>raw</code>.</p>\n<blockquote>\n<p>But of course the ideal situation would be to be allowed to write <code>elab \"foo\" x₁:ident x₂:ident (\"with\" new:ident)? : tactic =&gt; ...</code> as Thomas wrote.</p>\n</blockquote>\n<p>I don't see this happening, it would require effectively a copy of the entire <code>stx</code> category adjusted for macro/elab with naming for subparts. Easier to nudge people towards <code>elab_rules</code>.</p>",
        "id": 405064978,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701333058
    },
    {
        "content": "<p>Could you nudge me a bit more explicitly then? What's wrong with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">new</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 405139236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701357404
    },
    {
        "content": "<p>Is it the \"specify category\" error?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">new</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 405142137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701358271
    },
    {
        "content": "<p>No difference</p>",
        "id": 405142405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701358347
    },
    {
        "content": "<p>Works on my machine</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">ident</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\"with\"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">x₁</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">x₂</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">new</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405142551,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701358394
    },
    {
        "content": "<p>Sorry, I tried so many variations that I ended up in a state missing a question mark.</p>",
        "id": 405142789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701358459
    },
    {
        "content": "<p>Thanks for your help.</p>",
        "id": 405143155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701358574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Inaccessible.20optional.20stuff/near/405064978\">said</a>:</p>\n<blockquote>\n<p>I don't see this happening, it would require effectively a copy of the entire <code>stx</code> category adjusted for macro/elab with naming for subparts. Easier to nudge people towards <code>elab_rules</code>.</p>\n</blockquote>\n<p>My thought on this (and what I had hoped was the long-term plan) was to merge the macro and syntax categories for these and just produce an warning/error post-parse if subpart is named in a <code>syntax</code> declaration.</p>",
        "id": 406219802,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701835691
    },
    {
        "content": "<p>(In the longer-term, one could even hope to allow subpart naming in <code>syntax</code> declarations and automatically generate the respective projection functions to derive them from the <code>TSyntax</code> of declared syntax kind.)</p>",
        "id": 406220130,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701835816
    }
]