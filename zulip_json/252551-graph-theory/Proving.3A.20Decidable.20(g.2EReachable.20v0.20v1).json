[
    {
        "content": "<p>Hello!<br>\nHoping to get some advice/guidance on how to prove that checking whether one vertex is reachable from another is Decidable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidable_reachable</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v0</span> <span class=\"n\">v1</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">g.Reachable</span> <span class=\"n\">v0</span> <span class=\"n\">v1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Specifically how to do this without using Classical.dec which trivializes the problem, but makes it non-computable.<br>\nI.e. I would like to be able to get an answer from #eval g.Reachable v0 v1.<br>\nI have been able to rely on 'deriving' to get my Decidable instances so far, so apologies if there is an obvious answer but I don't have much experience with Decidable proofs.</p>",
        "id": 407157065,
        "sender_full_name": "Owen Randall",
        "timestamp": 1702269032
    },
    {
        "content": "<p>Mathlib has this as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.instDecidableRelReachable#doc\">docs#SimpleGraph.instDecidableRelReachable</a>, but it needs <code>DecidableRel g.Adj</code></p>",
        "id": 407160108,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702270912
    },
    {
        "content": "<p>It's an algorithm, but it's not a good one. It enumerates all walks up to a particular length (I think the number of vertices minus one).</p>",
        "id": 407160265,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702270966
    },
    {
        "content": "<p>It would be better if it did a real graph algorithm like BFS if you're wanting to evaluate it.</p>",
        "id": 407160353,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702271011
    },
    {
        "content": "<p>By the way, <code>DecidableRel g.Adj</code> is saying that there is a boolean function <code>V -&gt; V -&gt; Bool</code> that implements the adjacency relation for the graph. To decide whether two vertices are reachable from one another, certainly you need to be able to compute the adjacency relation, which is why it makes sense you would need this additional piece of data.</p>",
        "id": 407160539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702271081
    },
    {
        "content": "<p>Perfect, that's what I was looking for, thank you!<br>\nI skimmed through that connectivity file already but must have missed that, probably could have searched a little harder but I mistakenly assumed it would have shown up as an existing instance if it was already implemented.</p>",
        "id": 407162746,
        "sender_full_name": "Owen Randall",
        "timestamp": 1702272626
    }
]