[
    {
        "content": "<p>Hey, in some proof I'm doing, I think it would have been easier to have one endpoint be a parameter (so that to induct over walks, I don't have to leave it free). Is there any reason for this choice?</p>",
        "id": 327018881,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1676026740
    },
    {
        "content": "<p>The silly reason is that if <code>G.walk u v</code> is a walk from <code>u</code> to <code>v</code>, and <code>walk.cons</code> puts edges onto the front of a walk, then you'd want <code>u</code> to be an index and <code>v</code> to be a parameter, which you can't do in this order. And one reason <code>walk.cons</code> puts things onto the front is so that it parallels <code>list</code>, since there are definitions like <code>walk.support</code>, which is a list of vertices in order of appearance.</p>",
        "id": 339287086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677834617
    },
    {
        "content": "<p>I'm not sure I've run into this being a problem. I'm not sure exactly why that is exactly.</p>\n<p>But one workaround that comes to mind is to use <code>generalize</code> to turn the endpoints into variables before your induction.</p>",
        "id": 339287629,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677834764
    },
    {
        "content": "<p>Another is to write the recursor you want and then do <code>induction p using myrecursor</code></p>",
        "id": 339287824,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677834821
    },
    {
        "content": "<p>I see, so it was mostly a practical choice at that point, and it doesn't seem to hurt. Thanks!</p>",
        "id": 339289154,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677835190
    },
    {
        "content": "<p>It wouldn't hurt to have that recursor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">walk.rec'</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hnil</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">v</span> <span class=\"n\">walk.nil</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">G.adj</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">w</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">walk.cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G.walk</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">),</span> <span class=\"n\">motive</span> <span class=\"n\">u</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">walk.nil</span> <span class=\"o\">:=</span> <span class=\"n\">hnil</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">walk.cons</span> <span class=\"n\">h</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hcons</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">walk.rec'</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span><span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">measure_wf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x.snd.length</span><span class=\"o\">)⟩]}</span>\n</code></pre></div>\n<p>(though the Lean 4 version in mathlib4)</p>",
        "id": 339293179,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677836321
    },
    {
        "content": "<p>Maybe it'd be good to do this for <code>walk.concat_rec</code> too, which is the tail-centric version.</p>",
        "id": 339293376,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677836383
    }
]