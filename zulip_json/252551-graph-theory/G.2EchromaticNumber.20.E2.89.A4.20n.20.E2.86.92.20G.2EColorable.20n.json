[
    {
        "content": "<p>Hello, I'm trying to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">chromaticNumber_le_then_colorable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">SimpleGraph</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">G.chromaticNumber</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">G.Colorable</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But I'm not being able to<br>\nThere is a theorem that says <code>(hc : G.Colorable m) → G.Colorable G.chromaticNumber</code> but I'm not being able to us it because what I have is different<br>\nHow could I do?</p>",
        "id": 406590245,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701970244
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Colorable.mono#doc\">docs#SimpleGraph.Colorable.mono</a></p>",
        "id": 406590354,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701970316
    },
    {
        "content": "<p>I'm not able to get that G is colorable with some number, so I don't no how to get the <code>hc</code> parameter for <code>Colorable.mono</code></p>",
        "id": 406590658,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701970457
    },
    {
        "content": "<p>Do you have any other hypotheses which imply the graph can be coloured with finitely many colours?</p>",
        "id": 406591242,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701970721
    },
    {
        "content": "<p>If not, then the theorem is wrong as it could be that <code>G.chromaticNumber = 0</code>.</p>",
        "id": 406591318,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701970771
    },
    {
        "content": "<p>I can add that α is not empty</p>",
        "id": 406591444,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701970835
    },
    {
        "content": "<p>So with that I think that <code>G.chromaticNumber &gt; 0</code></p>",
        "id": 406591569,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701970898
    },
    {
        "content": "<p>I can also add that α is finite, but the I think that the theorem should be valid with α infinity, it's correct that?</p>",
        "id": 406591840,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701971022
    },
    {
        "content": "<p>If G is an infinite complete graph and n is any positive integer, then the theorem is false</p>",
        "id": 406591974,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701971067
    },
    {
        "content": "<p>If <code>G</code> is not colorable with finitely many colors, then you'd have <code>G.chromaticNumber = 0</code> but not <code>G.Colorable n</code>.</p>",
        "id": 406592031,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701971099
    },
    {
        "content": "<p>I've been meaning to get around to upgrading this API by making <code>chromaticNumber</code> be a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ENat#doc\">docs#ENat</a></p>",
        "id": 406592110,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701971128
    },
    {
        "content": "<p>Another solution would be to have a <code>G.chromaticNumberLE n</code> style of predicate, but that's more limited than an ENat I think</p>",
        "id": 406592231,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701971170
    },
    {
        "content": "<p>Okey, I didn't had in mind that \"If <code>G</code> isn't colorable with finitely many colors, this will be 0.\"</p>",
        "id": 406592398,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701971248
    },
    {
        "content": "<p>I will add that α is finite</p>",
        "id": 406592403,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701971251
    },
    {
        "content": "<p>Thank you vary much</p>",
        "id": 406592410,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701971255
    },
    {
        "content": "<p>One way the library works right now is to include the assumption that the chromatic number is positive, or to include the assumption that there exists some <code>n'</code> such that <code>G.colorable n'</code></p>",
        "id": 406592434,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701971268
    },
    {
        "content": "<p>This can be useful for you: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.colorable_of_chromaticNumber_pos#doc\">docs#SimpleGraph.colorable_of_chromaticNumber_pos</a></p>",
        "id": 406592446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701971274
    },
    {
        "content": "<p>Yes, it seems good idea</p>",
        "id": 406592594,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701971338
    },
    {
        "content": "<p>Thanks</p>",
        "id": 406592605,
        "sender_full_name": "Iván Renison",
        "timestamp": 1701971346
    },
    {
        "content": "<p>If anyone wants to help clean this up (or maybe finish it -- I haven't checked if mathlib builds completely), <a href=\"https://github.com/leanprover-community/mathlib4/pull/8883\">#8883</a> refactors <code>chromaticNumber</code> to be <code>ENat</code>-valued.</p>",
        "id": 406633127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701989057
    }
]