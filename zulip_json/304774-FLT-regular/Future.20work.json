[
    {
        "content": "<p>Dear all, I think it's a good idea to write down a list of things we should do, maybe in order of priority. In my opinion our main goal now should be to help <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s work on full flt. A lot of the stuff we proved will help Kevin's project, so this should be moved to mathlib as soon as possible (and we all know this is not a fast process...). Here is a short list</p>\n<ul>\n<li>Update the blueprint. This is important to make clear what we proved and what we didn't (in particular I would not bother a lot with proofs, we can just say \"see the Lean proof\" or give a reference, but we want the \"Lean\" button).</li>\n<li>Opening PRs for the miscellaneous prerequisites (those in <code>AuxLemmas.lean</code>). This can be parallelized and hopefully it will relatively fast.</li>\n<li>Polish the code (checking that everything is in full generality and so on)</li>\n<li>Thinking about the most serious stuff. Maybe ramification is the most basic thing we have?</li>\n</ul>",
        "id": 406497807,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701939598
    },
    {
        "content": "<p>Yes this is a good idea. I tried adding more <code>\\leanok</code>s to the blueprint proof to turn them green, but it didn't seem to work, so I need to see what the problem is. Also some of the links to the code aren't working, which again I'm not sure why is the case.</p>",
        "id": 406499097,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1701939969
    },
    {
        "content": "<p>I've added <code>\\leanok</code> to Hilbert90 and Hilbert92 and everything worked fine.</p>",
        "id": 406500486,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701940480
    },
    {
        "content": "<p>Oh weird they are green now. For some reason when I looked last time they still had a white background. Ok that's good then.</p>",
        "id": 406500727,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1701940572
    },
    {
        "content": "<p>Does the blueprint follow the actual Lean proof?</p>",
        "id": 406504944,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701942069
    },
    {
        "content": "<p>Yes in spirit, but we did not prove everything in the blueprint, and the blueprint missed quite a few details.</p>",
        "id": 406505567,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1701942288
    },
    {
        "content": "<p>Ah what bits did we not use from the blueprint? I'm guessing some of the ramification results?</p>",
        "id": 406506824,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1701942691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389019\">Chris Birkbeck</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Future.20work/near/406500727\">said</a>:</p>\n<blockquote>\n<p>Oh weird they are green now. For some reason when I looked last time they still had a white background. Ok that's good then.</p>\n</blockquote>\n<p>I just realised the problem, I was looking at the test blueprint site not the official one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 406507196,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1701942800
    },
    {
        "content": "<p>If nobody is specifically thinking of PRing homogenisation, I would like to do it. I need it for like three separate things now.</p>",
        "id": 406611896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701979132
    },
    {
        "content": "<p>No problem!</p>",
        "id": 406612250,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701979253
    },
    {
        "content": "<p>I need FLT3 -- this is going to be a blue node on the forthcoming FLT blueprint :-)</p>",
        "id": 406615130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701980573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> yes please pr it, and sorry to everyone I told I'd manage to do so myself xD</p>",
        "id": 406617592,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701981778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Future.20work/near/406615130\">said</a>:</p>\n<blockquote>\n<p>I need FLT3 -- this is going to be a blue node on the forthcoming FLT blueprint :-)</p>\n</blockquote>\n<p>We need to think about it. There are three possibilities:</p>\n<ul>\n<li>PRing <span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> proof: it is totally elementary, it stays in <code>Z</code>.</li>\n<li>Our proof of case II works for <code>p = 3</code> (but of course it will take a while to put everything in mathlib). Case I is very easy for <code>p=3</code> (reasoning modulo 9).</li>\n<li>The last possibility is to work in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, but doing case II by hand.</li>\n</ul>\n<p>In my opinion the last option is the best one, it is mathematically OK (we don't want to port to mathlib all the small details of flt-regular if the final goal is flt, we only want the relevant prerequisites) and not that long.</p>\n<p>Of course we need that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a PID in option 2 and 3, but I am confident <span class=\"user-mention\" data-user-id=\"488648\">@Xavier Roblot</span> will give soon the right tool for that (and at worst it's surely doable by hand in a couple of hours).</p>",
        "id": 406620691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701983117
    },
    {
        "content": "<p>Anyway we can take care of that, our techniques are more than enough.</p>",
        "id": 406620864,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701983200
    },
    {
        "content": "<p>Happy to help with any of those</p>",
        "id": 406629393,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701987033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Future.20work/near/406620691\">said</a>:</p>\n<blockquote>\n<p>Of course we need that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a PID in option 2 and 3, but I am confident <span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> will give soon the right tool for that (and at worst it's surely doable by hand in a couple of hours).</p>\n</blockquote>\n<p>Well, Hermite-Minkowski is ready (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8478\">#8478</a>) and to prove the classical bound on norm of integral ideals in ideal classes you need to do essentially the same proof with the ring of integers replaced by an integral ideal so it should be relatively easy to get. I'll start working on it soon.</p>",
        "id": 406707393,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702022329
    },
    {
        "content": "<p>Having a look.</p>",
        "id": 406709415,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702023176
    },
    {
        "content": "<p>Btw could I have access to the repository so that I can clean up homogenisation while making sure everything else still builds?</p>",
        "id": 406709610,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702023275
    },
    {
        "content": "<p>Sure!</p>",
        "id": 406709621,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702023282
    },
    {
        "content": "<p>YaelDillies • Already has access to this repository</p>",
        "id": 406709757,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702023344
    },
    {
        "content": "<p>Whoops <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 406709872,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702023393
    },
    {
        "content": "<p>Feel free to push to master. As soon it compiles and it looks reasonable no problem.</p>",
        "id": 406709926,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702023422
    },
    {
        "content": "<p>BTW, one of my students in the formalization \"seminar\" is working on properties of the Eisenstein integers (in particular that they form a euclidean domain), but this will not be ready (and in mathlib-ready form) soon. This will use a more direct (pederstrian?) approach, following Ireland-Rosen.</p>",
        "id": 406722503,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702028716
    },
    {
        "content": "<p>Nice! Even if we obtain PID almost for free by Minkowski bound, having euclidean domain is better.</p>",
        "id": 406722602,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702028762
    },
    {
        "content": "<p>We probably want that <code>K</code> is euclidean if <code>IsCyclotomicExtension {3} Q K</code></p>",
        "id": 406722829,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702028854
    },
    {
        "content": "<p>To avoid DTT hell, he is building the ring from a structre like <code>Zsqrtd</code>, but it should be easy to link this up with other definitions.</p>",
        "id": 406723248,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702029015
    },
    {
        "content": "<p>One could be optimistic that a route would be: prove that the concrete structure R is Euclidean, prove <code>IsCyclotomicExtension 3 \\Q (FractionField R)</code> and then get a bunch of stuff for free.</p>",
        "id": 406751890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702039682
    },
    {
        "content": "<p>Possibly. But first the Euclidean property!</p>",
        "id": 406752096,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702039744
    },
    {
        "content": "<p>Yeah, it's a nice project for a student. I've had several students prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> (the concrete structure) is Euclidean over the years.</p>",
        "id": 406752364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702039819
    },
    {
        "content": "<p>Would you be able to make sure the student's work doesn't disappear with them? Even if it's not mathlib-ready, it might be easier to start from something rather than nothing</p>",
        "id": 406753114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1702040043
    },
    {
        "content": "<p>I can take his work and try to turn it into something suitable for Mathlib eventually. (I did something similar with Pell's equation a while back.)</p>",
        "id": 406753656,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1702040206
    },
    {
        "content": "<p>What is the concrete definition? We can in parallel show that it is a cyclotomic extension</p>",
        "id": 406778149,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702048165
    },
    {
        "content": "<p>My understanding is that it's a structure with an integer \"real part\" field and an integer \"omega part\" field.</p>",
        "id": 406780385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702048872
    },
    {
        "content": "<p>I understand the idea, we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Zsqrtd#doc\">docs#Zsqrtd</a>, I just wanted a Lean definition to work with. Is it literally <code>Zsqrtd -3</code>?</p>",
        "id": 406780672,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702048955
    },
    {
        "content": "<p>no because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msqrt><mrow><mo>−</mo><mn>3</mn></mrow></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[\\sqrt{-3}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1156em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8656em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">−</span><span class=\"mord\">3</span></span></span><span style=\"top:-2.8256em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1744em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> isn't <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[\\zeta_3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 406781988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702049397
    },
    {
        "content": "<p>Ah yes, <code>Zsqrtd</code> has no <code>/2</code></p>",
        "id": 406782195,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702049453
    },
    {
        "content": "<p>The ZSqrtd thing was all set up by Mario because he had to say something about Pell in some very special cases to do Matiyesevich's theorem. There is an argument for doing integers in quadratic fields concretely in this way</p>",
        "id": 406782257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702049476
    },
    {
        "content": "<p>In the class group diophantine project we used a generalized version of zsqrtD see <a href=\"https://github.com/lean-forward/class-group-and-mordell-equation/blob/main/src/number_theory/quad_ring/basic.lean\">https://github.com/lean-forward/class-group-and-mordell-equation/blob/main/src/number_theory/quad_ring/basic.lean</a> . Though most of our results were for numbers 3 mod 4 for simplicity anyway</p>",
        "id": 406782920,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702049702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Future.20work/near/406707393\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/304774-FLT-regular/topic/Future.20work/near/406620691\">said</a>:</p>\n<blockquote>\n<p>Of course we need that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a PID in option 2 and 3, but I am confident <span class=\"user-mention silent\" data-user-id=\"488648\">Xavier Roblot</span> will give soon the right tool for that (and at worst it's surely doable by hand in a couple of hours).</p>\n</blockquote>\n<p>Well, Hermite-Minkowski is ready (<a href=\"https://github.com/leanprover-community/mathlib4/pull/8478\">#8478</a>) and to prove the classical bound on norm of integral ideals in ideal classes you need to do essentially the same proof with the ring of integers replaced by an integral ideal so it should be relatively easy to get. I'll start working on it soon.</p>\n</blockquote>\n<p>I was able to prove the following </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">exists_ideal_in_class_of_norm_le</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ClassGroup</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">)):</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span><span class=\"bp\">⁰</span><span class=\"o\">,</span> <span class=\"n\">ClassGroup.mk0</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">Ideal.absNorm</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"bp\">𝓞</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">/</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">NrComplexPlaces</span> <span class=\"n\">K</span> <span class=\"bp\">*</span>\n        <span class=\"o\">((</span><span class=\"n\">finrank</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">factorial</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">finrank</span> <span class=\"n\">ℚ</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">Real.sqrt</span> <span class=\"bp\">|</span><span class=\"n\">discr</span> <span class=\"n\">K</span><span class=\"bp\">|</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>I guess that should be enough to prove that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mn>3</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\zeta_3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is principal. The PR (<a href=\"https://github.com/leanprover-community/mathlib4/pull/9084\">#9084</a>) is still WIP as there are quite a number of auxiliary lemmas that need to find their place (and probably should be generalised, golfed, etc.)</p>",
        "id": 408215651,
        "sender_full_name": "Xavier Roblot",
        "timestamp": 1702656855
    },
    {
        "content": "<p>Nice! <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> have you proved anything about the embedding of a cyclotomic field (I mean that they're all complex)?</p>",
        "id": 408215913,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702656949
    },
    {
        "content": "<p>No but it should be easy using <code>pow_eq_one_iff_of_nonneg</code> in R.</p>",
        "id": 408236929,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1702665163
    },
    {
        "content": "<p>Yes, it is surely not hard, I just wanted to not duplicate your work</p>",
        "id": 408236970,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1702665191
    }
]