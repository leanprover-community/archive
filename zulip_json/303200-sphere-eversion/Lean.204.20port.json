[
    {
        "content": "<p>I'm now settled in Pittsburgh, so I now have time to work on the sphere eversion port. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> could you describe the current status of your efforts? I see you worked in the lean4 branch of the project, and I also saw commits in mathlib clearly coming from this project. Could you tell me more?</p>",
        "id": 388166852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693418063
    },
    {
        "content": "<p>The beginning isn't too promising:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sphere</span><span class=\"bp\">-</span><span class=\"n\">eversion4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">dependency</span> <span class=\"n\">mathlib</span> <span class=\"n\">of</span> <span class=\"n\">SphereEversion</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">manifest</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update</span>\n\n<span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sphere</span><span class=\"bp\">-</span><span class=\"n\">eversion4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Qq</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">JLimperg</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">aesop</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">mhuisi</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">cli.git</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">Cli</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">EdAyers</span><span class=\"bp\">/</span><span class=\"n\">ProofWidgets4</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 388167670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693418388
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> any idea?</p>",
        "id": 388167801,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693418425
    },
    {
        "content": "<p>I had a similar error today -- I think you need to make sure your <code>lean-toolchain</code> file matches mathlib's?</p>",
        "id": 388170540,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693419453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I believe <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> is right: the <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/3acb4129d3a79a4824b0e8d01ef7f8589642e5bc/lean-toolchain\"><code>lean-toolchain</code> is not up-to-date</a> with mathlib's.</p>",
        "id": 388173814,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693420659
    },
    {
        "content": "<p>It's not meant to be up to date with current mathlib.</p>",
        "id": 388174003,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693420723
    },
    {
        "content": "<p>I believe the problem is that Yury didn't commit the manifest file.</p>",
        "id": 388174037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693420739
    },
    {
        "content": "<p>I'm trying to create a manifest by hand.</p>",
        "id": 388174085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693420760
    },
    {
        "content": "<p>But I think it is still a serious problem that lake suggests commands that make things worse.</p>",
        "id": 388174133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693420790
    },
    {
        "content": "<p>I give up. I'll wait to see whether <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  has a copy of the project that works (presumably including a lake-manifest.json)</p>",
        "id": 388174700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693420996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Lean.204.20port/near/388174133\">said</a>:</p>\n<blockquote>\n<p>But I think it is still a serious problem that lake suggests commands that make things worse.</p>\n</blockquote>\n<p>Interesting. The thought process with the current errors is: (1) The initial problem is that there is no manifest, so Lake suggests running <code>lake update</code> to create it. (2) Running <code>lake update</code> downloads mathlib, but the mathlib is too new, so it reports it does not know anything about the newer manifest version (5) being used by mathlib.</p>\n<p>What were you hoping it would report? I would be happy to adjust the error messages here to make things clearer!</p>",
        "id": 388205869,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693434409
    },
    {
        "content": "<p>I think in the absence of manifest there is nothing to suggest apart from asking whoever forgot to commit the manifest to do it.</p>",
        "id": 388226534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693445782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The problem here is that Lake cannot easily tell the difference between a user who checkout a repository without a manifest (and thus needs to ask for it) and a developer who needs to generate it (which is essentially what Lake is currently assuming you are).</p>",
        "id": 388238289,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693452452
    },
    {
        "content": "<p>Sorry, I had an untracked manifest. Pushed.</p>",
        "id": 388255819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693461749
    },
    {
        "content": "<p>It would be nice if someone who knows how it works will setup CI.</p>",
        "id": 388255839,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693461766
    },
    {
        "content": "<p>I have a WIP mathlib branch with equivariant (w.r.t <code>+c</code>) maps. I'll try to make it compile &amp; open a CI tomorrow.</p>",
        "id": 388255990,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693461857
    },
    {
        "content": "<p>Updated to the latest version. Let's see how many files compile...</p>",
        "id": 388257045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693462459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> It could tell you about this -- here's a possibility:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sphere</span><span class=\"bp\">-</span><span class=\"n\">eversion4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">Dependency</span> <span class=\"n\">mathlib</span> <span class=\"n\">of</span> <span class=\"n\">SphereEversion</span> <span class=\"n\">not</span> <span class=\"k\">in</span> <span class=\"n\">manifest</span> <span class=\"n\">since</span> <span class=\"n\">a</span> <span class=\"n\">manifest</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">exist.</span>\n<span class=\"n\">If</span> <span class=\"n\">this</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">checked</span><span class=\"bp\">-</span><span class=\"n\">out</span> <span class=\"n\">repository</span><span class=\"o\">,</span> <span class=\"n\">check</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">developer</span> <span class=\"n\">of</span> <span class=\"n\">SphereEversion</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"k\">if</span> <span class=\"n\">they</span> <span class=\"n\">forgot</span> <span class=\"n\">to</span> <span class=\"kn\">include</span> <span class=\"n\">a</span> <span class=\"n\">manifest</span> <span class=\"n\">file.</span>\n<span class=\"n\">Otherwise</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">a</span> <span class=\"n\">manifest.</span>\n</code></pre></div>",
        "id": 388275882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693470856
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">sphere</span><span class=\"bp\">-</span><span class=\"n\">eversion4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span> <span class=\"n\">to</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">file</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">match</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 388276147,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693470952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> Thanks for the suggestions! I thin your improvement of the <code>lake build</code> error is great!</p>\n<blockquote>\n<p>warning: lean-toolchain file does not match lake-packages/mathlib/lean-toolchain</p>\n</blockquote>\n<p>This is probably too strict, we generally want Lake to permit packages to have mismatched toolchains. Even in mathlib, all of its dependencies are rarely on the same toolchain.</p>",
        "id": 388277478,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693471444
    },
    {
        "content": "<p>It's just a warning, but an <code>info:</code> would be great too. It's something I'd like to be aware of when doing <code>lake update</code> (bonus: have it say what the toolchain differences are? maybe do it only in some verbose mode?)</p>",
        "id": 388277862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693471590
    },
    {
        "content": "<p>Thanks Yury! I'll take a look but avoid files about equivariant maps.</p>",
        "id": 388320967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693487373
    },
    {
        "content": "<p>Actually I won't because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">Error</span><span class=\"o\">(</span><span class=\"n\">Download</span><span class=\"o\">(</span><span class=\"n\">Msg</span><span class=\"o\">(</span><span class=\"s2\">\"error during download\"</span><span class=\"o\">)),</span> <span class=\"n\">State</span> <span class=\"o\">{</span> <span class=\"n\">next_error</span><span class=\"o\">:</span> <span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"n\">Error</span> <span class=\"o\">{</span> <span class=\"n\">description</span><span class=\"o\">:</span> <span class=\"s2\">\"Timeout was reached\"</span><span class=\"o\">,</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">28</span><span class=\"o\">,</span> <span class=\"n\">extra</span><span class=\"o\">:</span> <span class=\"n\">Some</span><span class=\"o\">(</span><span class=\"s2\">\"Connection timeout after 30000 ms\"</span><span class=\"o\">)</span> <span class=\"o\">}),</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span> <span class=\"n\">InternalBacktrace</span> <span class=\"o\">{</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span> <span class=\"n\">None</span> <span class=\"o\">}</span> <span class=\"o\">})</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">download</span> <span class=\"n\">file</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">releases</span><span class=\"bp\">/</span><span class=\"n\">expanded_assets</span><span class=\"bp\">/</span><span class=\"n\">v4.0.0</span><span class=\"bp\">-</span><span class=\"n\">rc4'</span> <span class=\"n\">to</span> <span class=\"bp\">'/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">pmassot</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">nsceebrvvvd3xbmf_file'</span>\n</code></pre></div>",
        "id": 388321270,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693487454
    },
    {
        "content": "<p>Using <code>elan toolchain install leanprover/lean4:v4.0.0-rc4</code> worked but it's hard to know whether this is due to a GitHub glitch.</p>",
        "id": 388322858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693487927
    },
    {
        "content": "<p>I just pushed <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/b221ceb4dcc346644824bdb68919fdd44f2b2da1\">https://github.com/leanprover-community/sphere-eversion/commit/b221ceb4dcc346644824bdb68919fdd44f2b2da1</a> which is very weird since it mostly reverts <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/8d4eba3f477ef75892f68986257e10480b83cd1c\">https://github.com/leanprover-community/sphere-eversion/commit/8d4eba3f477ef75892f68986257e10480b83cd1c</a> that was meant to fix that file.</p>",
        "id": 388377836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693504214
    },
    {
        "content": "<p>I started to port the file defining 1-jet bundles <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/f16b50c35ec3ec53b59f80c0c54558ea0ceaf87d\">here</a>. It's no longer uniformly red, but there are lots of errors remaining, especially simp failures. I would really appreciate getting some help there. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 388397947,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693512370
    },
    {
        "content": "<p>I'm busy this week-end. I can have a look on Monday.</p>",
        "id": 388399781,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693513195
    },
    {
        "content": "<p>Thanks. Hopefully someone else isn't in a time-zone where it's already week-end.</p>",
        "id": 388400062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693513301
    },
    {
        "content": "<p>it's always the weekend somewhere <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 388401197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693513774
    },
    {
        "content": "<p>I meant, I'm busy before and on weekend (teaching, preparing tests, family).</p>",
        "id": 388402051,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693514127
    },
    {
        "content": "<p>It seems I ported everything that didn't depend on either equivariant or 1-jet bundles so I''ll probably fix the equivariant map file without waiting for your branch.</p>",
        "id": 388407773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693516914
    },
    {
        "content": "<p>I need to stop for today since it's time to take care of my family and then finish preparing my next lecture. But I made very good progress. If you set aside differential geometry files, fixing the mathport output is very easy. It requires patience but very little thinking.</p>",
        "id": 388416210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693521521
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6143\">#6143</a> needed some thinking</p>",
        "id": 388418123,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693522818
    },
    {
        "content": "<p>I was getting very strange error messages in the SEP.</p>",
        "id": 388418199,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693522862
    },
    {
        "content": "<p>Possibly, I renamed some vars before fixing it in mathlib.</p>",
        "id": 388418221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693522878
    },
    {
        "content": "<p>BTW, <code>find build/lib/SphereEversion -name \\*.olean | wc -l</code> gives <code>61</code> (out of 86) now</p>",
        "id": 388454011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1693544306
    },
    {
        "content": "<p>I finished porting the loop chapter.</p>",
        "id": 390630670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694571316
    },
    {
        "content": "<p>I try to take the opportunity to discuss many regressions that people didn't fully solved when porting mathlib, as can be seen in the lean4 and mathlib4 streams. However this afternoon I got tired of minimizing and discussing, so I rushed through the last two files, as you can see from the porting notes, especially in the <a href=\"https://github.com/leanprover-community/sphere-eversion/commit/5b2fecb9619f1cae58ab51c406b9db714f9abe0a\">Loops.Exists file</a>. It's good to see files ported, but it is not realistic to continue without at least some fixes to <code>simp</code>. This simply won't work for manifold files.</p>",
        "id": 390630904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694571444
    },
    {
        "content": "<p>In addition to issues with <code>simp</code>, I'm faced with lots tactic state explosion issues. I would appreciate some help from <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> or <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>. In Lean 3 I can see things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑𝓕</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">𝓕₀.</span><span class=\"n\">uncurry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑𝓕</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">𝓕₀.</span><span class=\"n\">uncurry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">𝓕.</span><span class=\"n\">curry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑𝓕₀</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">𝓕.</span><span class=\"n\">curry</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">⇑𝓕₀</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n</code></pre></div>\n<p>which become in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">FamilyJetSec.f</span> <span class=\"bp\">𝓕.</span><span class=\"n\">toFamilyJetSec</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f_diff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">↿𝓕.</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">))),</span>\n            <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">FamilyJetSec.φ</span> <span class=\"bp\">𝓕.</span><span class=\"n\">toFamilyJetSec</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">φ_diff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">↿𝓕.</span><span class=\"n\">φ</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">=</span>\n    <span class=\"n\">JetSec.f</span> <span class=\"o\">(</span><span class=\"n\">FamilyFormalSol.uncurry</span> <span class=\"bp\">𝓕₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toJetSec</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">FamilyJetSec.f</span> <span class=\"bp\">𝓕.</span><span class=\"n\">toFamilyJetSec</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f_diff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">↿𝓕.</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">))),</span>\n            <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">FamilyJetSec.φ</span> <span class=\"bp\">𝓕.</span><span class=\"n\">toFamilyJetSec</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">φ_diff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">↿𝓕.</span><span class=\"n\">φ</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span>\n    <span class=\"n\">JetSec.φ</span> <span class=\"o\">(</span><span class=\"n\">FamilyFormalSol.uncurry</span> <span class=\"bp\">𝓕₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toJetSec</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">JetSec.φ</span> <span class=\"o\">(</span><span class=\"n\">FamilyFormalSol.uncurry</span> <span class=\"bp\">𝓕₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toJetSec</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">FamilyJetSec.f</span> <span class=\"bp\">𝓕₀.</span><span class=\"n\">toFamilyJetSec</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f_diff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">↿𝓕₀.</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">))),</span>\n          <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">FamilyJetSec.φ</span> <span class=\"bp\">𝓕₀.</span><span class=\"n\">toFamilyJetSec</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">φ_diff</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">𝒞</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">↿𝓕₀.</span><span class=\"n\">φ</span> <span class=\"bp\">∘</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_root_.id</span> <span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"o\">}</span>\n      <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span>\n</code></pre></div>\n<p>Note that I can do <code>change ((𝓕.curry (t, s)) x).1 = (𝓕₀ s x).1 ∧ ((𝓕.curry (t, s)) x).2 = (𝓕₀ s x).2</code>, but the tactic state display stays the same. This is <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/52338b0dff1c856eef41a8764310d4737323c72e/SphereEversion/Local/ParametricHPrinciple.lean#L277\">here</a>.</p>",
        "id": 390994595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694715125
    },
    {
        "content": "<p>I really doesn't help debugging the sea of simp failures.</p>",
        "id": 390994639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694715147
    },
    {
        "content": "<p>I unfortunately have no time at all to investigate this right now... Good luck!</p>",
        "id": 390996369,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1694715924
    },
    {
        "content": "<p>I think the typical fix is to give a name to the coercion, tag it as <code>@[coe]</code>, and then use that in the <code>Coe</code>/<code>CoeTC</code>/... instance.</p>",
        "id": 391006434,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694720260
    },
    {
        "content": "<p>I really think it would help if the default for <code>pp.proofs.withType</code> was <code>false</code> not <code>true</code></p>",
        "id": 391006738,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694720386
    },
    {
        "content": "<p>I don't know whether we should campaign for a core change, or just add that to mathlib's <code>lakefile.lean</code></p>",
        "id": 391006869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694720429
    },
    {
        "content": "<p>But for that specific goal, it looks like the <code>coe_mk</code> simp lemma sending <code>↑{ f := f, f_diff := _} x</code> to <code>f x</code> is missing</p>",
        "id": 391007023,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694720496
    },
    {
        "content": "<p>Missing simp lemmas don't explain why tactic state is impossible to read. This seems to be a printing issue.</p>",
        "id": 391009469,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694721546
    },
    {
        "content": "<p>The printing issue is <code>pp.proofs.withType</code></p>",
        "id": 391009827,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694721691
    },
    {
        "content": "<p>But the goal state is genuinely different as well</p>",
        "id": 391009936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694721732
    },
    {
        "content": "<p>It's true that the tactic state seems different, but I've tested adding <code>@[coe]</code> attributes and it brings back the goal to two lines</p>",
        "id": 391010092,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694721810
    },
    {
        "content": "<p><code>pp.proofs.withType</code> makes things worse, but the true issue is that we shouldn't see the actual implementation of the coercions at all (that's the point of coercions)</p>",
        "id": 391010275,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694721887
    },
    {
        "content": "<p>Is the real problem here that we're not using <code>FunLike</code>?</p>",
        "id": 391010376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694721922
    },
    {
        "content": "<p>Where did you add the <code>coe</code> attribute?</p>",
        "id": 391010377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694721922
    },
    {
        "content": "<p>Eric, you're looking in the wrong direction. We are talking about regression from Lean 3 to Lean 4. In Lean 3 everything worked.</p>",
        "id": 391010521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694721980
    },
    {
        "content": "<p>So there is a fundamental issue independent of FunLike.</p>",
        "id": 391010581,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694722010
    },
    {
        "content": "<p>FunLike is pretty much our workaround to make <code>coe</code> behave like it did in Lean 3 though (as well as solving the problems it solved in Lean 3)</p>",
        "id": 391010584,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722011
    },
    {
        "content": "<p>Otherwise Lean4 just unfolds everything, which is even worse due to nested structures</p>",
        "id": 391010625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722030
    },
    {
        "content": "<p>But FunLike already existed in Lean 3.</p>",
        "id": 391010716,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694722075
    },
    {
        "content": "<p>We added a lot of FunLike instances when porting for this reason</p>",
        "id": 391010731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722077
    },
    {
        "content": "<p>Ok, I see. It still looks like a very serious regression to me. The fact that a workaround was found during porting instead of fixing Lean 4 may be bad in the long run.</p>",
        "id": 391010981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694722172
    },
    {
        "content": "<p>I just pushed to <code>anatole/lean4</code> branch. Changes are <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/78291a59e5a5cdcfb9a39291ab8d5d9318281c31/SphereEversion/Local/Relation.lean#L51\">here</a>, <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/78291a59e5a5cdcfb9a39291ab8d5d9318281c31/SphereEversion/Local/Relation.lean#L72C7-L72C7\">here</a> and <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/78291a59e5a5cdcfb9a39291ab8d5d9318281c31/SphereEversion/Local/Relation.lean#L121\">here</a></p>",
        "id": 391011110,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694722218
    },
    {
        "content": "<p>Basically this is a consequence of <code>coe</code> not existing as a function anymore. The up arrow is now replaced inline by the actual definition of the coercion. But to be displayed back as an arrow, this definition needs to be given a name and the <code>@[coe]</code> attribute. The <code>FunLike</code> trick is just a way to \"undo\" this by saying that a bunch of coercions are actually just defined as <code>FunLike.coe</code>.</p>",
        "id": 391011490,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694722404
    },
    {
        "content": "<p>You mean <a href=\"https://github.com/leanprover-community/sphere-eversion/compare/lean4...anatole/lean4\">https://github.com/leanprover-community/sphere-eversion/compare/lean4...anatole/lean4</a><br>\nWhat is this new <code>@[coe] abbrev </code> dance?</p>",
        "id": 391011514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694722415
    },
    {
        "content": "<blockquote>\n<p>Basically this is a consequence of <code>coe</code> not existing as a function anymore. The up arrow is now replaced inline by the actual definition of the coercion. But to be displayed back as an arrow, this definition needs to be given a name and the <code>@[coe]</code> attribute. </p>\n</blockquote>\n<p><span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> </p>\n<p>Essentially, ignoring any <code>FunLike</code> shenanigans, the new rule is that all <code>CoeX</code> instances should look like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeX</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>where <code>foo</code> is a def/abbrev with <code>@[coe]</code>.</p>",
        "id": 391012108,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694722699
    },
    {
        "content": "<p>I think it would be better to replace that <code>CoeFun</code> instance with a <code>FunLike</code> instance, rather than putting <code>coe</code> on an abbrev</p>",
        "id": 391012203,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722754
    },
    {
        "content": "<p>Though maybe it's not injective, in which case I'd suggest that <code>abbrev</code> might still be asking for trouble and <code>def</code> would be safer</p>",
        "id": 391012269,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722795
    },
    {
        "content": "<p>It is definitely injective.</p>",
        "id": 391012351,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694722825
    },
    {
        "content": "<p>In fact, its base class already has a funlike instance</p>",
        "id": 391012366,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722835
    },
    {
        "content": "<p>Note that it doesn't work for the first coercion in this file though (so we need to do it manually)</p>",
        "id": 391012482,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694722891
    },
    {
        "content": "<p>even replacing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelLoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">FamilyFormalSol</span> <span class=\"n\">P</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">JetSec</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">S.f</span> <span class=\"n\">t</span>\n      <span class=\"n\">f_diff</span> <span class=\"o\">:=</span> <span class=\"n\">S.f_diff.comp</span> <span class=\"o\">(</span><span class=\"n\">contDiff_const.prod</span> <span class=\"n\">contDiff_id</span><span class=\"o\">)</span>\n      <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"n\">S.φ</span> <span class=\"n\">t</span>\n      <span class=\"n\">φ_diff</span> <span class=\"o\">:=</span> <span class=\"n\">S.φ_diff.comp</span> <span class=\"o\">(</span><span class=\"n\">contDiff_const.prod</span> <span class=\"n\">contDiff_id</span><span class=\"o\">)</span> <span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelLoc</span> <span class=\"n\">E</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"o\">(</span><span class=\"n\">FamilyFormalSol</span> <span class=\"n\">P</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">JetSec</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">S</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">S.toFamilyJetSec</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>would help a lot</p>",
        "id": 391012500,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694722896
    },
    {
        "content": "<p>Indeed it makes things a lot nicer.</p>",
        "id": 391012781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694723039
    },
    {
        "content": "<p>Thanks Anatole and Eric!</p>",
        "id": 391012829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694723047
    },
    {
        "content": "<p>I wasn't very active during the port, but do I remember correctly that the point of having this unique <code>FunLike.coe</code> name for <code>FunLike</code> coercions was to make sure that generic lemmas like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=map_add#doc\">docs#map_add</a> would still apply?</p>",
        "id": 391012884,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694723079
    },
    {
        "content": "<p>I am still really worried that all this makes Lean 4 a lot harder to use than Lean 3.</p>",
        "id": 391012934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694723108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Lean.204.20port/near/391012269\">said</a>:</p>\n<blockquote>\n<p>Though maybe it's not injective, in which case I'd suggest that <code>abbrev</code> might still be asking for trouble and <code>def</code> would be safer</p>\n</blockquote>\n<p>I went with abbrev because I didn't want to fix failures later due to slightly-heavier <code>rfl</code>s, I don't know if it's worse than <code>def</code></p>",
        "id": 391013013,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1694723162
    },
    {
        "content": "<p>I also don't understand why dot notation became opt-in (using <code>@[pp_dot]</code>) instead of opt-out as in Lean 3. This also make a lot of goals hard to read.</p>",
        "id": 391013100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694723205
    },
    {
        "content": "<p>After another rather frustrating and intense day of work, I'm pleased to announce the local story is fully ported. This includes the appendix, so Lean 4 knows about to turn a sphere inside-out!</p>",
        "id": 391021585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727310
    },
    {
        "content": "<p>But it still doesn't know this follows from a much more general theorem since this would involve fixing files using the differential geometry part of Mathlib. I don't think I can do that without help from either <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> or <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>.</p>",
        "id": 391021634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727335
    },
    {
        "content": "<p>The good news is we are only 10 files away from porting the whole project.</p>",
        "id": 391021769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727403
    },
    {
        "content": "<p>But everything is blocked on <code>SphereEversion.Global.OneJetBundle</code>.</p>",
        "id": 391021878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694727473
    },
    {
        "content": "<p>When I was doing initial port, I left some <code>sorry</code>s.</p>",
        "id": 391294619,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1694825127
    },
    {
        "content": "<p><code>'sphere_eversion_of_loc' depends on axioms: [propext, Classical.choice, Quot.sound]</code></p>",
        "id": 391298839,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694826713
    },
    {
        "content": "<p>No sorry there.</p>",
        "id": 391298934,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694826737
    },
    {
        "content": "<p>Congratulations to Patrick and the team! Porting is a lot of effort and this work is nontrivial.</p>",
        "id": 391333471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694843294
    },
    {
        "content": "<p>I have some porting update. Since Leo worked on the simplifier recently, I decided to resume the sphere eversion porting effort. I'm trying a new strategy to get help. I am fixing definitions and statement but putting sorries on proofs whose fix isn't obvious. This includes a lot of failing <code>simp</code> of course. Most of them probably come from Lean 4 being a lot more picky about not abusing defEq, but some may also come from little differences in definitions coming from the way Lean 4 handles coercions for instance. The files that are currently in this state are:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/Global/OneJetBundle.lean\">OneJetBundle</a></li>\n<li><a href=\"https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/Global/TwistOneJetSec.lean\">TwistedOneJet</a></li>\n<li><a href=\"https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/Global/Relation.lean\">Relation</a></li>\n<li><a href=\"https://github.com/leanprover-community/sphere-eversion/blob/lean4/SphereEversion/Global/ParametricityForFree.lean\">ParametricityForFree</a></li>\n</ul>",
        "id": 398897438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698412776
    },
    {
        "content": "<p>An interesting problem <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/4ff559348c53d7e8bfc98bde4714da60340c7750/SphereEversion/Global/ParametricityForFree.lean#L68-L73\">in ParametrictyForFree</a> is that heterogeneous operations in Lean 4 makes life a lot harder for the elaborator when the Lean 3 version used several nested defEq. This is the only place in Lean code I wrote since 2017 where I had to manually use a hard type ascription with <code>id</code>.</p>",
        "id": 398897831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698412905
    },
    {
        "content": "<p>Help removing those sorries would be very much appreciated. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 398897974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698412945
    },
    {
        "content": "<p>I looked at one proof and got it to work:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- SphereEversion/Global/OneJetBundle.lean</span>\n<span class=\"gi\">+++ SphereEversion/Global/OneJetBundle.lean</span>\n<span class=\"gu\">@@ -224,13 +224,28 @@ theorem oneJetBundle_chartAt_apply (v v' : OneJetBundle I M I' M') :</span>\n<span class=\"w\"> </span>theorem oneJetBundle_chart_source (x₀ : J¹MM') :\n<span class=\"w\"> </span>    (chartAt HJ x₀).source =\n<span class=\"w\"> </span>      π (E →L[𝕜] E') FJ¹MM' ⁻¹' (chartAt (ModelProd H H') x₀.proj).source := by\n<span class=\"gd\">-  sorry</span>\n<span class=\"gd\">-  /- simp only [FiberBundle.chartedSpace_chartAt, trivializationAt_one_jet_bundle_source, mfld_simps]</span>\n<span class=\"gd\">-  simp_rw [prod_univ, ← preimage_inter, ← Set.prod_eq, preimage_preimage, inter_eq_left_iff_subset,</span>\n<span class=\"gi\">+  -- Porting note: was</span>\n<span class=\"gi\">+  -- simp only [FiberBundle.chartedSpace_chartAt, trivializationAt_one_jet_bundle_source, mfld_simps]</span>\n<span class=\"gi\">+  rw [FiberBundle.chartedSpace_chartAt]</span>\n<span class=\"gi\">+  simp_rw [</span>\n<span class=\"gi\">+    LocalHomeomorph.trans_toLocalEquiv,</span>\n<span class=\"gi\">+    LocalEquiv.trans_source,</span>\n<span class=\"gi\">+    LocalHomeomorph.prod_toLocalEquiv,</span>\n<span class=\"gi\">+    LocalEquiv.prod_source,</span>\n<span class=\"gi\">+    LocalHomeomorph.coe_coe,</span>\n<span class=\"gi\">+    Trivialization.coe_coe,</span>\n<span class=\"gi\">+    LocalHomeomorph.refl_localEquiv,</span>\n<span class=\"gi\">+    LocalEquiv.refl_source,</span>\n<span class=\"gi\">+    prodChartedSpace_chartAt,</span>\n<span class=\"gi\">+    LocalHomeomorph.prod_toLocalEquiv,</span>\n<span class=\"gi\">+    trivializationAt_one_jet_bundle_source,</span>\n<span class=\"gi\">+    LocalEquiv.prod_source,</span>\n<span class=\"gi\">+    Set.preimage_inter]</span>\n<span class=\"gi\">+  simp_rw [prod_univ, ← preimage_inter, ← Set.prod_eq, preimage_preimage, inter_eq_left,</span>\n<span class=\"w\"> </span>    subset_def, mem_preimage]\n<span class=\"w\"> </span>  intro x hx\n<span class=\"w\"> </span>  rwa [Trivialization.coe_fst]\n<span class=\"gd\">-  rwa [trivializationAt_one_jet_bundle_source, mem_preimage, ← Set.prod_eq] -/</span>\n<span class=\"gi\">+  rwa [trivializationAt_one_jet_bundle_source, mem_preimage, ← Set.prod_eq]</span>\n\n<span class=\"w\"> </span>/-- In `J¹(M, M')`, the target of a chart has a nice formula -/\n<span class=\"w\"> </span>theorem oneJetBundle_chart_target (x₀ : J¹MM') :\n</code></pre></div>\n<p>Pretty labour-intensive to find a working <code>simp_rw</code> order on the lean 3 side first, unfortunately.</p>\n<p>Not sure if it would be desirable to land this (or whether I have push access anyway)</p>",
        "id": 398959996,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698436440
    },
    {
        "content": "<p>Thanks a lot Ruben. Unfortunately I don't have a more efficient approach to \"Pretty labour-intensive to find a working <code>simp_rw</code> order on the lean 3 side first, unfortunately.\". Could you open a PR? I'll try to get a better proof, but I'll start with yours.</p>",
        "id": 398960199,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698436544
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/sphere-eversion/pull/86\">https://github.com/leanprover-community/sphere-eversion/pull/86</a></p>",
        "id": 398960568,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698436726
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 398964214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698438495
    },
    {
        "content": "<p>Porting update: all definitions and statements are now ported. Concretely it means the full project compiles in Lean 4 but there are about 50 to 60 sorries in proofs. Those sorries are not meant to be coming from name issues. Most of them are failing <code>simp</code> or <code>rw</code>. Help is still very welcome. <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>, <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>, <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>.</p>",
        "id": 401019243,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699475920
    },
    {
        "content": "<p>Actually a more precise number of sorries upper bound is 44. All hits outside of the <code>Global</code> folder are either in commented out code or unused code.</p>",
        "id": 401026856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699479260
    },
    {
        "content": "<p>The real nightmare is any proof that involved <code>simp .. with mfld_simps</code>. They all fail in Lean 4 and there is no way to see which lemmas where applied in Lean 3 because <code>squeeze_simp</code> simply repeats <code>with mfld_simps</code>.</p>",
        "id": 401034430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699482802
    },
    {
        "content": "<p>Down to 21 sorries.</p>",
        "id": 401068738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699501992
    },
    {
        "content": "<p>what is the issue with <code>mfld_simps</code>?</p>",
        "id": 401071361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699502962
    },
    {
        "content": "<p>The syntax has changed but it should still work</p>",
        "id": 401071415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699502995
    },
    {
        "content": "<p>Mario, the issue is first that <code>simp using mfld_simps</code> typically hides a <code>simp</code> with 20 to 50 lemmas, so there are lots of opportunity for a simp regression to show up. And then the <em>huge</em> issue is that in Lean 3, <code>squeeze_simp</code> will not report any of those 50 lemmas.</p>",
        "id": 401176765,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699542892
    },
    {
        "content": "<p>painful, but can't a list of all <code>mfld_simps</code> be gathered, and then copy-pasted round the Lean3 codebase to see what <code>squeeze_simp</code> uses?</p>",
        "id": 401179030,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1699543514
    },
    {
        "content": "<p>I will probably end up doing something like this, but I'm not looking forward to it.</p>",
        "id": 401179653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699543676
    },
    {
        "content": "<p>rather than copy paste, you could make a macro <code>squeeze_simp'</code> which calls <code>squeeze_simp</code> with those 50 lemmas</p>",
        "id": 401181176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699544091
    },
    {
        "content": "<p>I would guess the issue is that <code>@[mfld_simps]</code> means \"call <code>simp [my_lemma, my_other_lemma]</code>\", but you're in a situation where you actually need <code>simp [(my_lemma), (my_other_lemma)]</code></p>",
        "id": 401185587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699545449
    },
    {
        "content": "<p>Do we have a Lean 4 issue about this crazy parentheses thing?</p>",
        "id": 401186323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699545614
    },
    {
        "content": "<p>I couldn't find one. It seems that a recent lean patch removed the need for ~90% of the workarounds we had in mathlib (my PR removing them was recently merged), but there's still one left, and I've been seeing the problem in my PR branches. I suspect there are lots of cases where the person porting wasn't aware of the <code>()</code> trick, and so found a different solution without leaving a breadcrumb to the issue</p>",
        "id": 401189281,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699546286
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.squeeze</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"n\">setup_tactic_parser</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">interactive</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">split_brackets</span> <span class=\"o\">:</span> <span class=\"n\">option</span> <span class=\"n\">string.iterator</span> <span class=\"bp\">→</span> <span class=\"n\">string.iterator</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">string</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"n\">it</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">it.has_next</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">it.prev.curr</span> <span class=\"bp\">=</span> <span class=\"sc\">'\\n'</span> <span class=\"bp\">∧</span> <span class=\"n\">it.curr</span> <span class=\"bp\">=</span> <span class=\"sc\">'['</span> <span class=\"k\">then</span>\n      <span class=\"n\">split_brackets</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">it.next</span><span class=\"o\">)</span> <span class=\"n\">it.next</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">split_brackets</span> <span class=\"n\">none</span> <span class=\"n\">it.next</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"n\">it</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">it.has_next</span> <span class=\"k\">then</span>\n    <span class=\"k\">if</span> <span class=\"n\">it.curr</span> <span class=\"bp\">=</span> <span class=\"sc\">']'</span> <span class=\"k\">then</span>\n      <span class=\"o\">(</span><span class=\"n\">start.extract</span> <span class=\"n\">it</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get_or_else</span> <span class=\"s2\">\"\"</span> <span class=\"o\">::</span> <span class=\"n\">split_brackets</span> <span class=\"n\">none</span> <span class=\"n\">it.next</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">split_brackets</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"n\">it.next</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">[]</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">parse_simp_lemmas</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">simp_lemmas</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">simp_lemmas.pp</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">f.to_string</span> <span class=\"o\">(</span><span class=\"n\">options.mk.set_nat</span> <span class=\"bp\">`</span><span class=\"n\">pp.width</span> <span class=\"mi\">100000</span><span class=\"o\">),</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">split_brackets</span> <span class=\"n\">none</span> <span class=\"n\">s.mk_iterator</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">name.from_string</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">squeeze_simp'</span>\n  <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cur_pos</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">slow_and_accurate</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"?\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use_iota_eqn</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">no_dflt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">only_flag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">struct_inst</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"n\">hs</span> <span class=\"bp\">←</span> <span class=\"n\">attr_names.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"n\">attr</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"n\">S</span> <span class=\"bp\">←</span> <span class=\"n\">get_user_simp_lemmas</span> <span class=\"n\">attr</span><span class=\"o\">,</span>\n  <span class=\"n\">names</span> <span class=\"bp\">←</span> <span class=\"n\">parse_simp_lemmas</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">hs</span> <span class=\"bp\">++</span> <span class=\"n\">names.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">simp_arg_type.expr</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">c</span> <span class=\"o\">[]))</span>\n<span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"n\">squeeze_simp</span> <span class=\"n\">key</span> <span class=\"n\">slow_and_accurate</span> <span class=\"n\">use_iota_eqn</span> <span class=\"n\">no_dflt</span> <span class=\"n\">hs</span> <span class=\"o\">[]</span> <span class=\"n\">locat</span> <span class=\"n\">cfg</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">interactive</span>\n<span class=\"kd\">end</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_univ</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">@</span><span class=\"n\">univ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">squeeze_simp'</span> <span class=\"k\">with</span> <span class=\"n\">mfld_simps</span>\n<span class=\"c1\">-- Try this: simp only [set.mem_univ]</span>\n</code></pre></div>",
        "id": 401190070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699546428
    },
    {
        "content": "<p>Thank you very much Mario!</p>",
        "id": 401190508,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699546504
    },
    {
        "content": "<p>I'm down to four sorries, all involving <code>mfld_simps</code>. It's time to play with Mario's macro...</p>",
        "id": 401440649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699652644
    },
    {
        "content": "<p>And now some bad news: Mario's macro works in an empty file, but trying to use it on a real example leads to deterministic timeout.</p>",
        "id": 401441497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699653407
    },
    {
        "content": "<p>Here's another version of the tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">explain_simp</span>\n  <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">cur_pos</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">slow_and_accurate</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"?\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">use_iota_eqn</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">\"!\"</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">no_dflt</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">only_flag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">simp_arg_list</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">attr_names</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">with_ident_list</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">locat</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">location</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">struct_inst</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n<span class=\"o\">(</span><span class=\"n\">cfg'</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">parse_config</span> <span class=\"n\">cfg</span><span class=\"o\">,</span>\n<span class=\"n\">args</span> <span class=\"bp\">←</span> <span class=\"n\">attr_names.mfoldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hs</span> <span class=\"n\">attr</span><span class=\"o\">,</span> <span class=\"k\">do</span>\n  <span class=\"n\">S</span> <span class=\"bp\">←</span> <span class=\"n\">get_user_simp_lemmas</span> <span class=\"n\">attr</span><span class=\"o\">,</span>\n  <span class=\"n\">names</span> <span class=\"bp\">←</span> <span class=\"n\">parse_simp_lemmas</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">hs</span> <span class=\"bp\">++</span> <span class=\"n\">names.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">simp_arg_type.expr</span> <span class=\"o\">(</span><span class=\"n\">expr.const</span> <span class=\"n\">c</span> <span class=\"o\">[]))</span>\n<span class=\"o\">)</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">use_iota_eqn'</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">use_iota_eqn.is_some</span> <span class=\"k\">then</span> <span class=\"s2\">\"!\"</span> <span class=\"k\">else</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">loc</span> <span class=\"o\">:=</span> <span class=\"n\">loc.to_string</span> <span class=\"n\">locat</span><span class=\"o\">,</span>\n<span class=\"n\">mk_suggestion</span> <span class=\"o\">(</span><span class=\"n\">key.move_left</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"Try this: simp{use_iota_eqn'} only\"</span>\n  <span class=\"n\">sformat</span><span class=\"bp\">!</span><span class=\"s2\">\"{loc}{c}\"</span> <span class=\"n\">args</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">use_iota_eqn</span> <span class=\"n\">none</span> <span class=\"n\">no_dflt</span> <span class=\"n\">hs</span> <span class=\"n\">attr_names</span> <span class=\"n\">locat</span> <span class=\"n\">cfg'</span>\n</code></pre></div>\n<p>This one doesn't try to do any squeezing, it just gives you the whole list of lemmas</p>",
        "id": 401446245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699657001
    },
    {
        "content": "<p>Thanks. I've manage to reprove many lemmas by hand, using lots of <code>rw?</code> (unfortunately <code>rw_search</code> never managed to do it). There is a very nasty remaining one but I made good progress. I need to go now, but I hope I'll have a sorry-free version tonight.</p>",
        "id": 401449090,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699659420
    },
    {
        "content": "<p>I just finished porting the sphere eversion project to Lean 4! The master branch is now using Lean 4, and the main theorem are fully sorry-free.  Huge thanks to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> for his crucial help during summer.</p>",
        "id": 401539140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699732823
    },
    {
        "content": "<p>An interesting data point for people interested in mathport (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>). Yury ran mathport on July 16th and then we never ran it again. There were many bumps of lean4+Mathlib4 during the port, but I never felt the need to re-run mathport. I simply fixed stuff after each bump in the same way I would be have been fixing a project outside a porting effort.</p>",
        "id": 401539444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699733002
    },
    {
        "content": "<p>Congratulations! Are there more parts of it which should move to mathlib? Do you intend to keep it compiling with mathlib master?</p>",
        "id": 401543352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699737458
    },
    {
        "content": "<p>I think all of it could move to mathlib, but not all of it is ready.</p>",
        "id": 401545607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699740372
    },
    {
        "content": "<p>I think it makes sense that you wouldn't be re-running mathport, since the aligns aren't being updated much - doing the bumps by hand is probably the best we can do at the moment. I am hoping that we get better automatic migration tooling for mathlib, because the instability of mathlib is a major issue for using it as a library</p>",
        "id": 401585615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699771835
    },
    {
        "content": "<p>My point was precisely to give one more data point suggesting it is not useful to keep aligns around, or work on maintaining them. The question of having better tooling for Mathlib bumps in projects depending on Mathlib is different, and certainly very important.</p>",
        "id": 401622754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699804144
    },
    {
        "content": "<p>I'm not sure that this is true at all / can be derived from your observation. If the <code>#align</code>s weren't present I think you would have more difficulty running mathport if you were starting the port today instead of in july</p>",
        "id": 401787626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889309
    },
    {
        "content": "<p>Also, the difficulty of mathlib bumping will grow linearly with time since port-complete or whenever we decide to stop updating mathport. You were staying up to date the entire time from july until now, so the bumps were not so bad, but doing it all in one go would probably have been a lot harder and that's what most people are faced with going forward</p>",
        "id": 401788153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699889431
    },
    {
        "content": "<p>I don't say we can derive anything from this observation. this is why I was careful to speak about \"one data point\".</p>",
        "id": 401789105,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699889654
    },
    {
        "content": "<p>It would be really useful to know whether there is any big project that want to be ported to Lean 4 but hasn't started yet.</p>",
        "id": 401789625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699889777
    },
    {
        "content": "<p>Thank you for pushing forward the port Patrick! I'm sorry I couldn't help at all lately.</p>",
        "id": 401853959,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699913652
    },
    {
        "content": "<p>Thank you Patrick!</p>",
        "id": 401854453,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1699913933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Lean.204.20port/near/401789625\">said</a>:</p>\n<blockquote>\n<p>It would be really useful to know whether there is any big project that want to be ported to Lean 4 but hasn't started yet.</p>\n</blockquote>\n<p>LeanAPAP was ported in September, fwiw.</p>",
        "id": 401858819,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699916045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/303200-sphere-eversion/topic/Lean.204.20port/near/401789625\">said</a>:</p>\n<blockquote>\n<p>It would be really useful to know whether there is any big project that want to be ported to Lean 4 but hasn't started yet.</p>\n</blockquote>\n<p>LTE is the elephant in the room here, no?</p>",
        "id": 401862472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699918064
    },
    {
        "content": "<p>I'm guessing that it doesn't \"want to be ported\", but we still have a ToMathlib folder to mathlib</p>",
        "id": 401862641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699918158
    },
    {
        "content": "<p>Ditto for flypitch</p>",
        "id": 401862680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699918193
    },
    {
        "content": "<p>I think nobody plans to port LTE.</p>",
        "id": 401867171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699920327
    },
    {
        "content": "<p>People are directly implementing lessons learnt from LTE, e.g. Joel Riou has made a heroic effort getting a lot of basic concepts of homological algebra into mathlib; these were all very experimental in LTE, and it took people a while to find the best approach. For example the understanding that the cohomology of a complex was both a limit and a colimit, and needed to be formalised as such in order to minimise pain, was a lesson learnt in LTE. All of this is now in mathlib, but it's not in LTE which set things up in what we now regard as a suboptimal way. So in order to port that part of LTE the entire thing would need to be refactored using Joel's approach first, and that is not high on anyone's job list.</p>\n<p>Here's another thing: LTE proved a random theorem about liquid vector spaces, but solid abelian groups are more fundamental so we should probably do those first -- and Dagur is indeed doing this. Even the solid theory is not stable -- Scholze is giving some talks now about \"light\" versions of these ideas. Somehow parts of the theory are still in flux.</p>",
        "id": 402035557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699983417
    }
]