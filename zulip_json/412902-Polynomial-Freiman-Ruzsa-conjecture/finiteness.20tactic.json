[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> , the new version of the finiteness tactic you have cooked up with <code>aesop</code> does not close some goals the naive version used to close. For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"bp\">∞</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">finiteness</span>\n</code></pre></div>\n<p>fails. Do you have an idea how to fix this?</p>",
        "id": 404095888,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1700909190
    },
    {
        "content": "<p>I can look later today. I turned off the default Aesop intros rule because it seemed to also be introducing <code>A ≠ ∞</code> to a hypothesis of <code>A = ∞</code> and goal of <code>False</code>. There's hopefully a reducibility setting to tweak which avoids this.</p>",
        "id": 404115022,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700921625
    },
    {
        "content": "<p>Note: <code>positivity</code> doesn't do this; eventually we should make a consistent choice for the two tactics.</p>",
        "id": 404115096,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700921699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Done, <a href=\"https://github.com/teorth/pfr/pull/85\">https://github.com/teorth/pfr/pull/85</a></p>",
        "id": 404282878,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701025803
    },
    {
        "content": "<p>Thanks a lot! As a test case, can you remove the explicit argument in <a href=\"https://github.com/teorth/pfr/blob/24cfc61a0815fa6be19dd50e6e1e48861f1bf059/PFR/main.lean#L39C5-L39C33\">https://github.com/teorth/pfr/blob/24cfc61a0815fa6be19dd50e6e1e48861f1bf059/PFR/main.lean#L39C5-L39C33</a>?</p>",
        "id": 404283978,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701027046
    },
    {
        "content": "<p>Yes, now added to PR!</p>",
        "id": 404284502,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1701027595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/finiteness.20tactic/near/404284502\">said</a>:</p>\n<blockquote>\n<p>Yes, now added to PR!</p>\n</blockquote>\n<p>By the way, <code>finiteness</code> worked out of the box when I was proving a lemma and needed that <a href=\"https://github.com/teorth/pfr/blob/24cfc61a0815fa6be19dd50e6e1e48861f1bf059/PFR/Entropy/Basic.lean#L1295\">the probability of some event was finite</a>.  Not a particularly challenging application, but just wanted to report a use case \"in the wild\".</p>",
        "id": 404285350,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701028516
    }
]