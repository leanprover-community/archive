[
    {
        "content": "<p>I just realized there is a non-trivial technical issue required to even formalize the weak PFR over Z stuff: all of our entropy machinery currently requires the random variables to take values in a finite set (or more precisely a <code>Fintype</code>), but of course the integers (or Z^d) are infinite.  So we may have to generalize the entirety of our entropy and Ruzsa distance machinery to random variables that have finite image, as opposed to taking values in a <code>Fintype</code>. (This is also the natural extension from a mathematical point of view - one could even extend further to random variables with countable image, but finite image should suffice for many applications.)</p>\n<p>Hopefully this won't be utterly painful.  I guess we need to create instances <code>[FiniteImage X]</code> for our random variables and show that they are automaticallly instantiated when the range <code>G</code> is a Fintype, and are also automatically preserved by pointwise operations such as <code>X+Y</code>, <code>X-Y</code>, and <code>⟨ X, Y ⟩</code>.  For most of our entropy/Ruzsa distance stuff it should then just be OK to replace various <code>[Fintype G]</code> hypotheses with <code>[FiniteImage X]</code> hypotheses; it should only be the very foundational entropy inequality stuff where some actual work is required.</p>\n<p>If there are any Lean experts who are familiar with this sort of refactoring experience, any advice would be appreciated.  I'm guessing the first step should be to define the <code>FiniteImage</code>  property (it doesn't already seem to be in Mathlib) and create some instances?</p>",
        "id": 407276586,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702312259
    },
    {
        "content": "<p>the standard technique is to create a typeclass.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">FiniteImage</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"kt\">Type</span> <span class=\"n\">Signature</span> <span class=\"n\">of</span> <span class=\"n\">f</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n     <span class=\"n\">property1</span> <span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">Property</span><span class=\"bp\">&gt;</span>\n     <span class=\"n\">property2</span> <span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">Property</span><span class=\"bp\">&gt;</span>\n     <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 407276887,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702312349
    },
    {
        "content": "<p>Do we want finite image, or rather finite measure?</p>",
        "id": 407277885,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702312676
    },
    {
        "content": "<p>OK, so something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FiniteImage</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hfinite</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">''</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I guess?  Then we would need instances that say for instance if <code>G</code> is a <code>Fintype</code> then <code>X</code> is automatically <code>FiniteImage</code>, if <code>X</code> has <code>FiniteImage</code> then so does <code>f ∘ X</code> for any function <code>f</code>, and so forth.</p>",
        "id": 407278178,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702312772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.207.2E0/near/407277885\">said</a>:</p>\n<blockquote>\n<p>Do we want finite image, or rather finite measure?</p>\n</blockquote>\n<p>Actually the most natural property would be finite entropy, i.e., that the sum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>x</mi><mo>∈</mo><mi>G</mi></mrow></msub><mi mathvariant=\"bold\">P</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo>∈</mo><mi>G</mi><mo stretchy=\"false\">]</mo><mi>log</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mi mathvariant=\"bold\">P</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo>∈</mo><mi>G</mi><mo stretchy=\"false\">]</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\"> H[X] = \\sum_{x \\in G} {\\bf P}[x \\in G] \\log \\frac{1}{{\\bf P}[x \\in G]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0771em;vertical-align:-0.3271em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1786em;\"><span style=\"top:-2.4003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">G</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3271em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.3651em;vertical-align:-0.52em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathbf mtight\">P</span></span></span><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\">x</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathnormal mtight\">G</span><span class=\"mclose mtight\">]</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> is finite.  But finite image would suffice for our application here.</p>",
        "id": 407278539,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702312906
    },
    {
        "content": "<p>I'm not sure what the pros and cons of either approach are.</p>\n<p>Actually, if we're going to use typeclasses, then I could package other things as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">DiscreteRandomVariable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">h</span><span class=\"bp\">Ω</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span>\n  <span class=\"n\">hG</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span>\n  <span class=\"n\">hG_singleton</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSingletonClass</span> <span class=\"n\">G</span>\n  <span class=\"n\">hmes</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">X</span>\n  <span class=\"n\">hfinite</span> <span class=\"o\">:</span> <span class=\"n\">Set.Finite</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">''</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(or maybe I should move <code>hΩ</code>, <code>hG</code>, <code>hG_singleton</code> into instances in the class definition?)</p>\n<p>This would require a bit more refactoring but could potentially be a cleaner and more conceptual way to proceed in the long run.</p>",
        "id": 407279690,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702313283
    },
    {
        "content": "<p>Just to clarify, when I claimed Improved PFR, I meant the missing content in the file <code>ImprovedPFR.lean</code> (corresponding roughly to B.2, B.3, B.4, B.5, B.6, B.7 and C.1, C.2, C.3). I started on the file, but of course I'm not nearly done yet, and I can definitely share it with whoever would like to work on it! The current state of things is in <a href=\"https://github.com/teorth/pfr/pull/141\">https://github.com/teorth/pfr/pull/141</a>, in case other people want to start from there.</p>",
        "id": 407279860,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1702313338
    },
    {
        "content": "<p><code>f '' Set.univ</code> is also known as <code>Set.range f</code> by the way, so you could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FiniteRange</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span>\n</code></pre></div>\n<p>Regarding the design decision between a definition and a class:</p>\n<ul>\n<li>If you're going to rw terms or otherwise manipulate algebraic expressions, use a def (like how <code>Set.Finite</code> is a def)</li>\n<li>Otherwise, if you're going to avoid manipulating the terms, and also having it infer instances based on the syntactic structure of terms would be very convenient (like the <code>X+Y</code>, <code>X-Y</code>, etc you mentioned), you can use a class (like how <code>Finite</code> is a class)</li>\n</ul>",
        "id": 407283992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702314547
    },
    {
        "content": "<p>The problem with classes is that instance search isn't stable under rewriting. You might start with a term for which there is an instance, but after a rewrite typeclass inference might no longer be able to find an instance. You have to weigh out whether the convenience of getting instances is enough to counteract this issue.</p>",
        "id": 407284222,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702314618
    },
    {
        "content": "<p>Don't forget to include <code>: Prop</code> to make sure the class is a proposition. Otherwise I think it defaults to <code>Type</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">FiniteRange</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">hfinite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span>\n</code></pre></div>",
        "id": 407284655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702314747
    },
    {
        "content": "<p>Hmm.  If we have an instance lemma that automatically gives <code>FiniteRange X</code> whenever <code>Fintype G</code>, then hopefully every single previous usage of entropy stuff in PFR won't break, and so it's only the new stuff in the PFR over the integers that needs some attention.  I imagine we can always add more instance lemmas if the rewrite issue shows up, so I'm leaning towards the typeclass solution.  (Being able to automatically handle measurability is another bonus, but not really necessary since we already developed the entire entropy library with measurability hypotheses manually added as side conditions as needed.)</p>",
        "id": 407285356,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702314973
    },
    {
        "content": "<p>I'll also mention that I bring up <code>Set.Finite</code> and <code>Finite</code> as examples because they illustrate that sometimes you want both. Part of the API of these is to be able to easily go back and forth between them, hence <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinite#doc\">docs#Set.toFinite</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.to_subtype#doc\">docs#Set.Finite.to_subtype</a></p>\n<p>That might not be too representative though since <code>Finite</code> is for types in general, and using <code>Set.Finite</code> saves needing to worry about that coercion to type.</p>",
        "id": 407285441,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702315000
    },
    {
        "content": "<p>OK.  I have to attend to other things for a few hours but later today I might get started on a basic <code>FiniteRange</code> API.  I would also be interested in <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>'s opinion on how difficult it would be to refactor the foundational entropy inequality stuff to handle <code>FiniteRange</code> random variables as opposed to <code>Fintype</code> ranges.  I'm hoping that only the most basic tools need to be actually modified, and all the other lemmas that are built on top will automagically carry over through the power of polymorphism or something.</p>",
        "id": 407287253,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702315612
    },
    {
        "content": "<p>(If you need to create local <code>Fintype</code> instances during this refactor, then it's worth knowing that the pattern is, given <code>h : Set.Finite s</code>, you write <code>have := h.fintype</code> in your proof. You could create such a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite.fintype#doc\">docs#Set.Finite.fintype</a> function specialized for your typeclass too. I'm thinking you'd write <code>have := FiniteRange.fintype X</code> to get <code>Fintype (Set.range X)</code> from <code>FiniteRange X</code>?)</p>",
        "id": 407288006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702315871
    },
    {
        "content": "<p>Feel free to name that field <code>finite</code> instead of <code>hfinite</code>, so then you could write <code>have := FiniteRange.finite X</code> to get <code>Finite (Set.range X)</code> by parallelism.</p>",
        "id": 407288218,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702315927
    },
    {
        "content": "<p>So would you recommend something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FiniteRange</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">FiniteRange.fintype</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hX</span><span class=\"o\">:</span> <span class=\"n\">FiniteRange</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">Set.range</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hX.finite.fintype</span>\n</code></pre></div>",
        "id": 407291730,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702317141
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 407291758,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702317159
    },
    {
        "content": "<p>17 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"412902\" href=\"/#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.207.2E0\">#Polynomial Freiman-Ruzsa conjecture &gt; Outstanding tasks, version 7.0</a> by <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>.</p>",
        "id": 407296691,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702319106
    },
    {
        "content": "<p>I do not quite grasp yet why finite range is the correct generality here. It seems to me like it would be much easier (and not involve any new class) to use <span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>'s entropy of a measure instead of the fintype entropy we've been using so far. See  <a href=\"https://github.com/teorth/pfr/blob/master/PFR/ForMathlib/Entropy/Measure.lean\"><code>PFR.ForMathlib.Entropy.Measure</code></a>.</p>",
        "id": 407297019,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702319243
    },
    {
        "content": "<p>The entropy of a random variable would then be the measure entropy of its law.</p>",
        "id": 407297144,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702319287
    },
    {
        "content": "<p>Rémy, does that sound reasonable?</p>",
        "id": 407297162,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702319297
    },
    {
        "content": "<p>Rémy's definition currently only makes sense on a fintype, right?</p>",
        "id": 407297486,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1702319432
    },
    {
        "content": "<p>Oh you're right. We need Kullback-Leibler in general <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 407297817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702319569
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Definition\">https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Definition</a> seems pretty palatable. Sébastien, do you see any obvious obstruction to just doing it? That would let us have entropy in a good enough generality for mathlib (I'm currently not very happy with our generality).</p>",
        "id": 407298087,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702319680
    },
    {
        "content": "<p>I suppose we could try to replace all <code>Finset.sum</code> appearances in the foundational entropy material with <code>tsum</code> and hope for the best (inserting hypotheses of finite entropy whenever necessary, and having an additional lemma that the entropy is finite whenever either the range is a <code>Fintype</code> or the random variable has finite range).</p>",
        "id": 407303230,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702321724
    },
    {
        "content": "<p>Also we would need that the finite entropy hypothesis is preserved by pairing (if <code>X</code>, <code>Y</code> have finite entropy, then so does <code>⟨X, Y⟩</code>) and by applying measurable functions (if <code>X</code> has finite entropy then so does <code>f ∘ X</code>) but these look doable.</p>",
        "id": 407303605,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702321893
    },
    {
        "content": "<p>I think the finite range approach would be slightly quicker to implement if we only cared about PFR, but I see that the general approach (inserting finite entropy hypotheses as needed) would be better for Mathlib.</p>",
        "id": 407303819,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702321965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Entropy.20on.20an.20infinite.20type/near/407298087\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Definition\">https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence#Definition</a> seems pretty palatable. Sébastien, do you see any obvious obstruction to just doing it? That would let us have entropy in a good enough generality for mathlib (I'm currently not very happy with our generality).</p>\n</blockquote>\n<p>Defining the Kullback-Leibler divergence is the goal I have been working towards with my recent mathlib PRs about <code>rnDeriv</code>, <code>withDensity</code> and tilted measures. There is more work on <a href=\"https://github.com/leanprover-community/mathlib4/tree/RD_kl\">branch#RD_kl</a> (warning: that branch is a mess that also contains unrelated things), where I prove that KL is nonnegative and prove a Donsker-Varadhan variational formula.</p>\n<p>For PFR, extending to functions with finite ranges seems far simpler. And once the measure entropy definition is changed, most of the other definitions should require only minimal modifications.</p>",
        "id": 407304666,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1702322310
    },
    {
        "content": "<p>I am attending a conference this week and will do only minimal coding, so someone else should write the generalization.</p>",
        "id": 407305067,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1702322478
    },
    {
        "content": "<p>Perhaps a compromise is to extend the basic definitions of entropy to handle infinite ranges, but add for now a finite range hypothesis to most of the foundational methods, and as a future project seek to relax these hypotheses to a finite entropy hypothesis (and possibly some methods may even work in the infinite entropy case if the definitions are chosen correctly).</p>",
        "id": 407305816,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702322778
    },
    {
        "content": "<p>So one could imagine the following refactoring process:</p>\n<ol>\n<li>Keep the <code>Fintype G</code> type hypotheses in place, but replace <code>Finset.sum</code> with <code>tsum</code> in the core definitions and do whatever modifications are needed to make everything build.</li>\n<li>Now remove <code>Fintype</code> hypotheses from the core definitions, but move them to all of the methods (or the ambient hypotheses in whatever section the methods appear in).  This should not affect the build significantly.</li>\n<li>For each method, gradually replace <code>Fintype G</code> with <code>FiniteRange X</code> type hypotheses.  Ideally this would only require actual changes in code for the first few methods, and many of the downstream methods would not need any modification other than the hypothesis change.  This would be enough to get started on the PFR over the integers extension.  This part of the process could potentially be parallelized through the \"Outstanding tasks\" board.</li>\n<li>At some much later date, see if <code>FiniteRange X</code> type hypotheses can be relaxed further to <code>FiniteEntropy X</code> type hypotheses.</li>\n</ol>\n<p>Alternatively one could try to do 2 + 3 in one go which might be a little faster overall, but create a longer gap in which one no longer has a working build.</p>",
        "id": 407309939,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702324504
    },
    {
        "content": "<p>When mathlib redefined the concept of a group we always had a working build because the development was done on a feature branch and only merged to master once it was completely working.</p>",
        "id": 407320255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1702328951
    },
    {
        "content": "<p>I guess I have a technical question then - if I already have administrator privileges on a repository, what is the best way in VsCode to create a branch of the repository to do a complex refactoring that would temporarily break the build?</p>",
        "id": 407322447,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702329955
    },
    {
        "content": "<p>I would simply click on the branch name <code>master</code> in the lower left and create a branch from <br>\n<a href=\"/user_uploads/3121/sInghMIBj5eNEuaCFbTa0xBT/image.png\">this interface</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sInghMIBj5eNEuaCFbTa0xBT/image.png\" title=\"this interface\"><img src=\"/user_uploads/3121/sInghMIBj5eNEuaCFbTa0xBT/image.png\"></a></div>",
        "id": 407322672,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702330066
    },
    {
        "content": "<p>Our CI didn't run on branches (this was semi-intentional). I now have activated CI for branches. Tell me if it works!</p>",
        "id": 407323991,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702330745
    },
    {
        "content": "<p>OK, I created a branch.  So on the local side I would create a completely new folder to hold the branch, and open that folder within VSCode?</p>",
        "id": 407324845,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702331170
    },
    {
        "content": "<p>Nonono, you would kill one of the very points of Git <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> You use the VSCode interface to \"checkout\" different branches, by clicking on the branch name in the lower left.</p>",
        "id": 407324988,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702331247
    },
    {
        "content": "<p>It should be all the same files/folder paths; the branch bookkeeping is done by git (technically in the hidden folder <code>.git</code>)</p>",
        "id": 407324995,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702331250
    },
    {
        "content": "<p>git checkout just swaps out the files</p>",
        "id": 407325100,
        "sender_full_name": "llllvvuu",
        "timestamp": 1702331286
    },
    {
        "content": "<p>OK. I think I checked out the \"entropy_refactor\" branch and made a small edit (breaking the build, haha).  Let's see if this works.</p>",
        "id": 407325940,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702331666
    },
    {
        "content": "<p>OK I think I only messed up the branch and not the master.  Thanks, I think I can work with this.</p>",
        "id": 407326082,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702331739
    },
    {
        "content": "<p>CI is working as expected!</p>",
        "id": 407326252,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702331814
    },
    {
        "content": "<p>OK.  I think I can steadily go through the broken build (in which I replaced <code>Finset.sum</code> with <code>tsum</code> in the definition of entropy of a measure) fixing each lemma as I go along, either by replacing a <code>Finset.sum</code> method with a <code>tsum</code> counterpart, or by adding a suitable <code>Fintype</code> or <code>FiniteRange</code> hypothesis.   It's surprisingly smooth going so far (got 200 lines of measure.lean refactored already).  Will be a while before the branch has a fully working build again, but that's not a problem as long as the master remains untouched.</p>",
        "id": 407328648,
        "sender_full_name": "Terence Tao",
        "timestamp": 1702332738
    }
]