[
    {
        "content": "<p>Yet another rollover of the \"outstanding tasks\" thread. The previous thread can be found <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0\">here</a>.</p>\n<p>While the primary aims of the PFR project are nearly complete, I'm now adding a few mostly expository tasks to the queue to help showcase the achievements of the project to outsiders.  Following a suggestion of <span class=\"user-mention\" data-user-id=\"458865\">@Thomas Bloom</span> , I have also just written a <a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html\">quick blueprint</a> to formalize a consequence of the PFR conjecture that is used by computer scientists, as well as stubs of lemmas in <a href=\"https://github.com/teorth/pfr/blob/master/PFR/homomorphism.lean\">https://github.com/teorth/pfr/blob/master/PFR/homomorphism.lean</a> , but it is very rudimentary and in particular even the statements of the lemmas (not just the proofs) need formalizing. [EDIT: the statements are now formalized.]</p>\n<p>A. Existing claims:</p>\n<ol>\n<li><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  have established <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">Entropic Balog-Szemeredi-Gowers</a> (and also claim combinatorial Balog-Szemeredi-Gowers, which is currently not covered by the Blueprint)</li>\n<li><span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> and <span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span>  claim <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#total-dist\">Bound on distance increments</a> </li>\n</ol>\n<p>B. Outstanding proof formalization tasks:</p>\n<ol>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html#hb-thm\">Hahn-Banach type theorem</a>  This should be a routine induction on the order of the group (there may also be a slick homological algebra proof). <strong>Established by <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html#goursat-thm\">Goursat type theorem</a>  This is a mostly algebraic lemma, which will also require an induction on the order of the group at some point. <strong>Established by <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html#hom-pfr\">Homomorphism form of PFR</a> A reasonably straightforward application of <a href=\"https://teorth.github.io/pfr/blueprint/sect0007.html#pfr\">PFR</a> to a graph of a function, manipulating homomorphisms and subgroups in simple ways, and using the previous two lemmas. <strong>Established by <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> </strong></li>\n</ol>\n<p>C. Outstanding documentation/blueprint/examples/statement formalization tasks: </p>\n<ol>\n<li><del>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate probability kernels.</del></li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate Shannon entropy. <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate Ruzsa distance. <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate the <code>finiteness</code> tactic. <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate real-valued measures. <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li>Formalizing the statement of <a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html#hb-thm\">Hahn-Banach type theorem</a>  <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li>Formalizing the statement of <a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html#goursat-thm\">Goursat type theorem</a> <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong> </li>\n<li>Formalizing the statement of <a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html#hom-pfr\">Homomorphism form of PFR</a> <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n</ol>\n<p>D. Outstanding administrative tasks:  none currently</p>\n<p>Note: one can of course simultaneously claim the task of formalizing the statement of a lemma, and also proving it.</p>",
        "id": 404901573,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701274304
    },
    {
        "content": "<p>The file <a href=\"https://github.com/teorth/pfr/blob/master/PFR/endgame.lean\">endgame.lean</a> introduces notation for variables using the <code>notation3</code> command. Wouldn't it be better to just define them using <code>def</code> or <code>abbrev</code>? Earlier I tried instantiating a lemma from a different file and had to explicitly provide the argument S. But that wasn't possible since S is custom notation...</p>",
        "id": 404914781,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1701278281
    },
    {
        "content": "<p>If, for example, you made <code>local notation3 \"W\" =&gt; X₁' + X₁</code> be a <code>def</code>, then you'd have to pass <code>X₁'</code> and <code>X₁</code> to it, which defeats the purpose of defining it. The <code>notation</code> trick is how you can make <code>W</code> refer to these specific variables.</p>\n<p>What problem are you running into? If you're in another module you shouldn't see <code>S</code> at all. You could copy all the <code>local notation</code> lines to that module if they make sense there, if you did want to refer to <code>S</code>.</p>",
        "id": 404920393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701280096
    },
    {
        "content": "<p>I've formalized the statement of the three lemmas needed to derive the homomorphism version of PFR from the combinatorial version.  The first two are purely algebraic and could potentially be obtained in some slick fashion from existing homological algebra machinery (but I don't know how well developed that machinery is in Mathlib, and in any event I don't know how to wield homological algebra very well even at the informal level), but should also be provable by a brute force induction.  The third result is hopefully not too challenging given all the other results as black boxes.</p>\n<p>I also wrote up some examples for entropy, Ruzsa distance, and finiteness (where in the latter I mostly just copied from the existing unit tests for the tactic).  It might be worth adding a few more examples to the latter in order to aid in further development of that tactic, if anyone has some good ideas for such examples in mind.  I'll leave the example section for probability kernels and real-valued measures to others (presumably the people who worked the most on those sections will have some ideas for representative <code>example</code>s to illustrate the machinery).</p>",
        "id": 404944048,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701289533
    },
    {
        "content": "<p>The first lemma should be easy with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_leftInverse_of_injective#doc\">docs#LinearMap.exists_leftInverse_of_injective</a> if the project already has a <code>ZMod 2</code>-module structure on an elementary abelian 2 group. I looked around for a few minutes but didn't see one :-/</p>",
        "id": 404951441,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701292579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.205.2E0/near/404951441\">said</a>:</p>\n<blockquote>\n<p>The first lemma should be easy with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_leftInverse_of_injective#doc\">docs#LinearMap.exists_leftInverse_of_injective</a> if the project already has a <code>ZMod 2</code>-module structure on an elementary abelian 2 group. I looked around for a few minutes but didn't see one :-/</p>\n</blockquote>\n<p>Ah, right, who needs homological algebra when linear algebra is available instead! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>We have the reverse implication to what you say in <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ElementaryAddCommGroup.ofModule#doc\">pfr#ElementaryAddCommGroup.ofModule</a> .  So I guess one just has to work out the converse to <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ElementaryAddCommGroup.ofModule#doc\">pfr#ElementaryAddCommGroup.ofModule</a> and apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LinearMap.exists_leftInverse_of_injective#doc\">docs#LinearMap.exists_leftInverse_of_injective</a>  to get task B.1.  [The lazier option is to simply rewrite all the claims here in terms of modules instead of elementary 2-groups, but the converse sounds like a natural thing to prove anyway.] Unfortunately I can't attend to this any time soon, but hopefully someone will volunteer...</p>\n<p>EDIT: task B.2 might also be treatable by this approach, though I don't know if the relevant lemma (about the existence of complementing vector subspaces) is already in Mathlib.</p>",
        "id": 404951802,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701292793
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/pull/119/files\">https://github.com/teorth/pfr/pull/119/files</a></p>",
        "id": 404954521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701294038
    },
    {
        "content": "<p><del>It's still building on my end, so don't merge just yet :)</del> Ok, it built successfully</p>",
        "id": 404954542,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701294047
    },
    {
        "content": "<p>Oof... <code>endgame.lean</code> takes quite a while to build!</p>",
        "id": 404954716,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701294125
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.205.2E0/near/404954716\">said</a>:</p>\n<blockquote>\n<p>Oof... <code>endgame.lean</code> takes quite a while to build!</p>\n</blockquote>\n<p>Hmm, maybe we need to do a stack trace and work out what is causing the delay?  I have to sign off now unfortunately, but perhaps someone else can diagnose the issue.</p>",
        "id": 404955677,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701294629
    },
    {
        "content": "<p>It seems that there are already some comments in that file pointing to some slowness, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--(Mantas) this times out in the proof below</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">hmeas2</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">measurability</span>\n</code></pre></div>",
        "id": 404956001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701294804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.205.2E0/near/404956001\">said</a>:</p>\n<blockquote>\n<p>It seems that there are already some comments in that file pointing to some slowness, e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--(Mantas) this times out in the proof below</span>\n<span class=\"kn\">private</span> <span class=\"kd\">lemma</span> <span class=\"n\">hmeas2</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"mi\">3</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">measurability</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah, I also had discovered some slowness issues with <code>measurability</code>, see <a href=\"#narrow/stream/287929-mathlib4/topic/measurability.20tactic.20times.20out.20on.20Prod.2Efst.20.5Ccirc.20Prod.2Efst\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/measurability.20tactic.20times.20out.20on.20Prod.2Efst.20.5Ccirc.20Prod.2Efst</a> .  Hopefully they can be fixed eventually, but a short-term fix I guess would just be to prove these measurability claims by hand.</p>",
        "id": 404956492,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701295009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.205.2E0/near/404920393\">said</a>:</p>\n<blockquote>\n<p>If, for example, you made <code>local notation3 \"W\" =&gt; X₁' + X₁</code> be a <code>def</code>, then you'd have to pass <code>X₁'</code> and <code>X₁</code> to it, which defeats the purpose of defining it. The <code>notation</code> trick is how you can make <code>W</code> refer to these specific variables.</p>\n<p>What problem are you running into? If you're in another module you shouldn't see <code>S</code> at all. You could copy all the <code>local notation</code> lines to that module if they make sense there, if you did want to refer to <code>S</code>.</p>\n</blockquote>\n<p>This makes sense, thank you for the explanation! The concrete problem that I was having was that I wanted to use the lemma <code>iIndepFun.prod</code> which Floris van Dorn had stated and that I inserted in the Independence file. It uses <code>S</code> as an implicit variable and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myS</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"k\">#check</span> <span class=\"n\">iIndepFun.prod</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"n\">myS</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>didn't work. I'm quite sure that this must be because of the notation since changing <code>S</code> to something else in <code>iIndepFun.prod</code> helped. Of course, for the final proof, one probably won't have to instantiate <code>S</code> explicitly. However, for exploration purposes, it is nice to have the possibility of incrementally building up the objects and hypotheses that get inserted in the theorem.</p>",
        "id": 405104568,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1701346336
    },
    {
        "content": "<p>Oh, I misunderstood the problem you were running into from the short description of it. It's that since <code>S</code> is a local notation it's now a keyword, making it no longer be an identifier that you can use. That's annoying.</p>\n<p>One option is to change the notation to use symbols that aren't identifiers. For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"!V\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X₁'</span> <span class=\"bp\">+</span> <span class=\"n\">X₂</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"!W\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X₁'</span> <span class=\"bp\">+</span> <span class=\"n\">X₁</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"!S\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X₁</span> <span class=\"bp\">+</span> <span class=\"n\">X₂</span> <span class=\"bp\">+</span> <span class=\"n\">X₁'</span> <span class=\"bp\">+</span> <span class=\"n\">X₂'</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"!I₁\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">I</span><span class=\"o\">[</span> <span class=\"bp\">!</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"bp\">!</span><span class=\"n\">V</span> <span class=\"bp\">|</span> <span class=\"bp\">!</span><span class=\"n\">S</span> <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 405179881,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701370411
    },
    {
        "content": "<p>I don't know what we should write about Markov kernels in the example file, and I think we might simply want to remove the section.</p>\n<ul>\n<li>Kernels are not defined in the project but in Mathlib. The project adds several simp lemmas and simple helper definitions that should be added to mathlib, but the theory of kernels is mostly from mathlib.</li>\n<li>The only significant result for kernels in the project is the disintegration of kernels in discrete measurable spaces (we only have it for constant kernels in mathlib) but in the discrete setting it's a direct consequence of the constant kernel case. The reason it's not in mathlib is that I want to add the general version in standard Borel spaces.</li>\n<li>What the project contains related to kernels are developments of entropy, mutual information and Ruzsa distance. But in the example file we probably don't want to talk about those: we should only mention simple properties of those objects for random variables, not for kernels.</li>\n</ul>",
        "id": 405322859,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701423580
    },
    {
        "content": "<p>In summary, I don't think that the example file is the right place. I have started writing a blog post about the use of kernels for entropy and independence (conditional independence using kernels just landed in mathlib!). <a href=\"https://leanprover-community.github.io/blog/\">https://leanprover-community.github.io/blog/</a> could be the right place to talk about that.</p>",
        "id": 405323630,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701423843
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.205.2E0/near/405323630\">said</a>:</p>\n<blockquote>\n<p>In summary, I don't think that the example file is the right place. I have started writing a blog post about the use of kernels for entropy and independence (conditional independence using kernels just landed in mathlib!). <a href=\"https://leanprover-community.github.io/blog/\">https://leanprover-community.github.io/blog/</a> could be the right place to talk about that.</p>\n</blockquote>\n<p>OK, I will remove the section.</p>",
        "id": 405386766,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701444650
    },
    {
        "content": "<p>Today I managed to finish proving the independence condition necessary for establishing <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=sum_dist_diff_le#doc\">pfr#sum_dist_diff_le</a> which you can find in <a href=\"https://github.com/teorth/pfr/pull/124\">this pr</a>. I'd be very happy about any feedback on code style and how to simplify the proofs of <code>ineq1</code>, <code>independenceCondition1</code> and <code>independenceCondition1'</code>. If these proofs can be shortened this would likely simplify the proofs of the remaining inequalities.</p>",
        "id": 405411616,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1701453067
    },
    {
        "content": "<p>I started to give <code>goursat</code> a shot (WIP: <a href=\"https://github.com/teorth/pfr/pull/125\">https://github.com/teorth/pfr/pull/125</a>)</p>\n<p>by the way, i'm seeing a build issue in endgame.lean which i just commented out for now</p>",
        "id": 405462729,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701478185
    },
    {
        "content": "<p><code>goursat</code> is complete</p>",
        "id": 405511886,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701505071
    },
    {
        "content": "<p>I'm making good progress towards the homomorphism form of PFR at the moment</p>",
        "id": 405563285,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1701547890
    },
    {
        "content": "<p>And <a href=\"https://github.com/teorth/pfr/pull/126\">here</a> it is!</p>",
        "id": 405660731,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1701605590
    }
]