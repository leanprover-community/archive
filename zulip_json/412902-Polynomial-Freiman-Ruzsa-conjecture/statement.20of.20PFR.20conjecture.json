[
    {
        "content": "<p>I think this is a way to state the theorem in Lean.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.GroupTheory.OrderOfElement</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Pointwise</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ElementaryAddGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">orderOf_of_ne</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">addOrderOf</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">PFR_conjecture</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ElementaryAddGroup</span> <span class=\"n\">G</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀A</span> <span class=\"o\">:</span> <span class=\"n\">A.Nonempty</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.card</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">),</span>\n    <span class=\"n\">Nat.card</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">K</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">∧</span> <span class=\"n\">Nat.card</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.card</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 401851192,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699912424
    },
    {
        "content": "<p>Some considerations:</p>\n<ul>\n<li>This is using the formulation using elementary 2-groups instead of an explicit vector space. I think that will be nicer, if the vector space structure is not actually needed.</li>\n<li>Saying that <code>A</code> is covered by <code>D</code> cosets of <code>H</code> means that <code>A ⊆ c + H</code> where <code>c</code> is some set of cardinality at most <code>D</code>.</li>\n<li>Since we're working in a finite group, writing <code>Set</code> and <code>Finset</code> is equivalent. Not sure if the API for <code>Nat.card</code> is as strong as the API for <code>Finset.card</code>, but probably sets is nicer (note that I'm coercing <code>H</code> to Set in the last expression, it will be less nice to coerce it to Finset)</li>\n<li><del>Because the exponent is even, we don't even need to assume that <code>A</code> is nonempty or <code>K</code> is nonnegative :-)</del> Oh wait, we do need that <code>A</code> is nonempty for <code>|H| ≤ |A|</code></li>\n</ul>",
        "id": 401852998,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699913148
    },
    {
        "content": "<p>For <code>ElementaryAddGroup</code> wouldn't it be better to state that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>⋅</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\cdot x = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> for all $x$? Is there a standard definition for $n$-elementary when $n$ is not prime?</p>",
        "id": 401853169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1699913219
    },
    {
        "content": "<p>That is probably easier. I just wrote the statement I found on Wikipedia :-)</p>",
        "id": 401853247,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699913259
    },
    {
        "content": "<p>Theorem 1.2 will look less nice, but I saw that Yael already contributed a version of Ruzsa triangle inequality to mathlib here:<br>\n<a href=\"https://tqft.net/mathlib4files/Mathlib/Combinatorics/Additive/PluenneckeRuzsa\">file#Mathlib/Combinatorics/Additive/PluenneckeRuzsa</a><br>\nIt is not formulated for random variables, but only for finite subsets (which presumably correspond to uniform random variables), so it might need some generalization.</p>",
        "id": 401856636,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1699914920
    },
    {
        "content": "<p>I'd strongly advise using <code>Finset</code> here. It's probably better to make <code>AddSubgroup</code> fit than the other way around. To be thought about...</p>",
        "id": 401857888,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699915569
    },
    {
        "content": "<p>I also strongly advise using finset - this was what Yaël and I planned when we talked about other Freiman and Ruzsa statements, and what I did for the sum-product problem which has similarities as well. The <em>main</em> advantage is that the Finset API is much more developed for combinatorics (partially by design because Yaël and I use it a lot for this kind of thing), see for example the statement of the Ruzsa covering lemma in mathlib</p>",
        "id": 401860826,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699917117
    },
    {
        "content": "<p>Not hugely satisfying, but whenever talking about a finite subgroup, I found it workable to have <code>s : Finset α</code>, <code>H : Subgroup α</code> and <code>hsH : (s : Set α) = H</code>.</p>",
        "id": 401862379,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699918016
    },
    {
        "content": "<p>By the way, we won't need too many elementary 2-groups in the argument.  Besides the original group <code>G</code> and the eventual subgroup <code>H</code>, we will also work with the Cartesian square <code>G × G</code>... and that's about it, actually.  We will need the addition homomorphism <code>π : G × G → G := fun ⟨ x, y ⟩ ↦ x+y</code> and the coordinate projection homomorphisms... and I think that's about it as far as group theory is concerned, aside from easy group identities such as <code>(x+y) + (y+z) = (x+z)</code> in a 2-group.</p>",
        "id": 401863231,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699918475
    },
    {
        "content": "<p>We could consider having a <code>Finsubgroup</code> type with the same relation to <code>Subgroup</code> than <code>Finset</code> and <code>Set</code>.</p>",
        "id": 401866483,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699920133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/statement.20of.20PFR.20conjecture/near/401863231\">said</a>:</p>\n<blockquote>\n<p>aside from easy group identities such as <code>(x+y) + (y+z) = (x+z)</code> in a 2-group.</p>\n</blockquote>\n<p>It seems like a fun tactic-writing project would be to extend <code>abel</code> to know that <code>y + y = 0</code> in an elementary 2-group.  If anyone is looking for one ...</p>",
        "id": 401866992,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1699920259
    },
    {
        "content": "<p>This is good opportunity to emphasize from the symmetric project that tactic writing is definitely possible and one shouldn't wait too long before asking for them. Some waiting is needed in order to understand which tactic is needed, but then maximizing pain is not a goal per se.</p>",
        "id": 401891872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699929620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/statement.20of.20PFR.20conjecture/near/401866992\">said</a>:</p>\n<blockquote>\n<p>It seems like a fun tactic-writing project would be to extend <code>abel</code> to know that <code>y + y = 0</code> in an elementary 2-group.  If anyone is looking for one ...</p>\n</blockquote>\n<p>Similarly to simplify numerals in characteristic p using <code>ring</code>. I think <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> made some progress towards this?</p>",
        "id": 401895837,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699931582
    },
    {
        "content": "<p><code>reduce_mod_char</code> was added in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5376\">mathlib4#5376</a></p>",
        "id": 401897073,
        "sender_full_name": "David Renshaw",
        "timestamp": 1699932243
    },
    {
        "content": "<p>Oh amazing, thanks for the heads-up!</p>",
        "id": 401897714,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699932606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/statement.20of.20PFR.20conjecture/near/401866483\">said</a>:</p>\n<blockquote>\n<p>We could consider having a <code>Finsubgroup</code> type with the same relation to <code>Subgroup</code> than <code>Finset</code> and <code>Set</code>.</p>\n</blockquote>\n<p>Yeah, that would be quite an improvement! But of course we don't want to need duplicating too much API. On the other, people do care about the collection of finite subgroups sometimes, no?</p>",
        "id": 401924670,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699948204
    },
    {
        "content": "<p>If we do create <code>Finsubgroup</code> I'd like to advocate for it be a non-constructive <code>Prop</code>-only extension of <code>Subgroup</code>.</p>",
        "id": 401938386,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1699952565
    }
]