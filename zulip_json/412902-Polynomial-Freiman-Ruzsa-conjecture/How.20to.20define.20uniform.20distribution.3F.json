[
    {
        "content": "<p>Given</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSingletonClass</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would like to define the assertion that <code>X</code> has the uniform distribution on <code>H</code>.  So basically<br>\n<code>μ.map X {x} = μ Set.univ / (Finset.card H)</code> when <code>x ∈ H</code> and <code>μ.map X {x} = 0</code> otherwise.  Is there a slick way to define this?  In practice <code>H</code> will be non-empty, <code>X</code> measurable, and <code>μ</code> a probability measure, but for various technical reasons it would be nice to have a definition that did not require these hypotheses.</p>",
        "id": 402785862,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700258231
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.pdf.IsUniform#doc\">docs#MeasureTheory.pdf.IsUniform</a> exists. I think that might be verbatim what you want?</p>",
        "id": 402787037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700258769
    },
    {
        "content": "<p>In particular, it does not need singletons (or finite sets) to be measurable, does not assume <code>H</code> is nonempty and <code>X</code> is any function.</p>",
        "id": 402787205,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700258869
    },
    {
        "content": "<p>Beware that I dont know how useable the definition of pdf is in that file. I wrote that definition of pdf to work with abstract pdfs and it works fine for that purpose. I don't think anyone has used it for specific distributions yet (e.g. the Gaussian distribution file does not import that file at all).  So for finsets it might be easier to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PMF.uniformOfFinset#doc\">docs#PMF.uniformOfFinset</a> instead</p>",
        "id": 402790918,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700260745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243312\">@Jason KY.</span> was faster than me <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> </p>\n<p>I agree that using the Mathib canonical spelling is the right thing to do, and Yaël located the canonical spelling. (Although Jason says maybe it is not so canonical after all... But I think it should be.)</p>\n<p>However, (as Jason said) it is likely that there is API missing for uniform distributions on finite sets, so there is some work to tie the canonical spelling to a useful spelling for the PFR project. I can try to fill in some API (unless others are quicker as they usually are).</p>",
        "id": 402791048,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700260818
    },
    {
        "content": "<p>I have also always been at least slightly unconvinced about the canonical spelling of distributions involving the random variable itself rather than just the law of the random variable. In particular, I don't understand why the type of <code>IsUniform</code> is essentially</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>instead of the simpler</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Measure</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>With the latter spelling, one could</p>\n<ul>\n<li>speak of uniformity of a measure <code>ν</code> (which currently requires inserting an artificial identity random variable, <code>IsUniform id s ν μ</code>)</li>\n<li>spell the uniformity of the distribution of a random variable <code>X : Ω → E</code> as <code>IsUniform s (ℙ.map X) μ</code> (for comparison, the current spelling is <code>IsUniform X s ℙ μ</code>).</li>\n</ul>",
        "id": 402791092,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700260849
    },
    {
        "content": "<p>The same design goes for other distributions than uniform. I'd like to be able to say that a measure is gaussian or that a measure is exponential --- not just that a random variable is gaussian or exponential.</p>",
        "id": 402791174,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700260895
    },
    {
        "content": "<p>Yeah, it is probably better to define uniform as a prop on measure rather than a random variable and then asserting the pushforward measure is uniform. Although in that case, it might be harder if you want to work simultaniously with specific pdfs and abstract pdf with the same API</p>",
        "id": 402791925,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700261345
    },
    {
        "content": "<p>...or in fact even better, I guess the uniformity of the law of <code>X : Ω → E</code> would be the <code>Prop</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ℙ.map</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">uniform</span> <span class=\"n\">s</span> <span class=\"n\">μ</span>\n</code></pre></div>\n<p>where <code>(uniform : Set E → Measure E)</code> is just an explicit construction of the uniform measure on <code>s : Set E</code> (w.r.t. reference measure <code>μ := by volume_tac</code>).</p>\n<p>Similarly X gaussian distributed could be <code>ℙ.map X = gaussian mean var</code>, where <code>gaussian</code> explicitly constructs the gaussian measure, etc.</p>",
        "id": 402792117,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700261451
    },
    {
        "content": "<p>I think it will be more difficult to prove properties about how transforming a random variable affects the pdf. E.g. adding random variables corresponds to convolution</p>",
        "id": 402792216,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700261514
    },
    {
        "content": "<p>But I agree that the spelling of a specific distribution should be a prop on measures rather than with pdfs</p>",
        "id": 402792295,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700261557
    },
    {
        "content": "<p>If there would be a lemma <code>(h : Indep X Y) : (X + Y).map ℙ = convolution (X.map ℙ) (Y.map ℙ)</code>, I'm not sure how much more work it would be.</p>",
        "id": 402792381,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700261604
    },
    {
        "content": "<p>My point is that is not a property about pdfs but about the law of the random variables.</p>",
        "id": 402792513,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700261675
    },
    {
        "content": "<p>In any case, I think we should scrap pdf.IsUniform and do what was done for the Gaussian instead</p>",
        "id": 402792620,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700261747
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.gaussianReal#doc\">docs#ProbabilityTheory.gaussianReal</a></p>",
        "id": 402792790,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700261861
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"650529\">@Claus Clausen</span> is working on this.</p>",
        "id": 402792892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700261918
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8330\">#8330</a></p>",
        "id": 402792926,
        "sender_full_name": "Jason KY.",
        "timestamp": 1700261945
    },
    {
        "content": "<p>On changing the spelling of distributions of random variables to be in terms of their laws?</p>",
        "id": 402792953,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700261962
    },
    {
        "content": "<p>Hmm.  I think for the short term I will punt on this by defining</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ProbabilityTheory.isUniform</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and try to formalize other things that use that definition, and then maybe it will be clearer how to connect this to existing Mathlib methods.  Thanks for the input!</p>",
        "id": 402793283,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700262100
    },
    {
        "content": "<p>I agree that the approach taken in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8330\">#8330</a> to e.g. the exponential distribution looks good!</p>\n<p>For <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.pdf.IsUniform#doc\">docs#MeasureTheory.pdf.IsUniform</a>, I think the only change I'd like to see is to \"generalize\" in the sense that it applies to any measure instead of just a measure that is the push-forward of another measure. And then one needs to add API for special cases such as uniform measures on finite sets.</p>",
        "id": 402794033,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700262401
    },
    {
        "content": "<p>Btw, using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PMF.uniformOfFinset#doc\">docs#PMF.uniformOfFinset</a>, as Jason suggests, probably has an advantage of simplifying the (implementation of the) compactness argument in this project. And it maybe requires less to add also otherwise to make it usable here.</p>\n<p>(But in Mathlib, I think we should tie the general Radon-Nikodym density-based approach written by Jason to the probability mass function based one.)</p>",
        "id": 402795787,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700263354
    },
    {
        "content": "<p>Hmm, I'm encountering a weird issue with the requirement <code>H : Finset S</code> that <code>H</code> be a finset in my proposed definition of uniform distribution.  Later in PFR we need to consider a uniform distribution on a subgroup <code>H: AddSubgroup G</code> of a finite abelian group <code>{G : Type*} [AddCommGroup G] [Fintype G]</code>.  However I can't seem to easily coerce <code>H</code> to a <code>Finset</code>; <code>H.carrier</code> lies in <code>Set G</code>, but not <code>Finset G</code>, even though <code>H</code> is obviously finite, being a subset of <code>G</code>.  One way around it is to define <code>isUniform</code> for <code>H: Set S</code> rather than <code>H: Finset S</code> but make <code>isUniform</code> false if <code>H</code> is infinite.  Otherwise I have to figure out the coercion.  What would be the best way to proceed here?  Is this one of these <code>Classical.choice</code> issues?</p>",
        "id": 402800000,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700265733
    },
    {
        "content": "<p>one option is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.Finite#doc\">docs#Set.Finite</a> as opposed to <code>Finset</code>. That's a predicate on sets.</p>",
        "id": 402800346,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700265896
    },
    {
        "content": "<p>There is a \"good enough\" API to go back and forth between sets satisfying this predicate and <code>Finset</code>s</p>",
        "id": 402800409,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700265923
    },
    {
        "content": "<p>And I'm sure there is a lemma saying that any subset of a finite type is finite in this sense of finiteness.</p>",
        "id": 402800523,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700265975
    },
    {
        "content": "<p>OK that seems to work since there is a casting operator from <code>Finset S</code> to <code>Set S</code>. As long as <code>Set.Finite H</code> is part of the definition of <code>isUniform</code> everything seems to work (at least on the level of being able to state things). Thanks!</p>",
        "id": 402800907,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700266170
    },
    {
        "content": "<p>If you want to stick with finsets, you could do this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toFinite.toFinset</span>\n</code></pre></div>",
        "id": 402801074,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700266259
    },
    {
        "content": "<p>OK.  The point is that there is a canonical certificate that <code>H</code> is finite, but not a canonical enumeration of <code>H</code>, which is why one cannot automatically make <code>H</code> a <code>Finset</code> without doing something noncomputable?</p>",
        "id": 402802010,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700266700
    },
    {
        "content": "<p>But wait, <code>G</code> is a <code>Fintype</code> so it has a canonical enumeration already, so there doesn't seem to be any constructive obstruction to making <code>H</code> an element of <code>Finset G</code>.</p>",
        "id": 402802143,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700266783
    },
    {
        "content": "<p>In any case, working with sets <code>H</code> that are not necessarily assumed to be finite when defining uniform distribution seems consistent with the philosophy already used in the project, where random variables are not necessarily assumed to be measurable, and the measure is not necessarily assumed to be a probability measure.  It's weird to think in this way by including all the degenerate, useless, and/or nonsensical cases but it does seem to avoid a lot of annoying coercion.</p>",
        "id": 402802797,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700267062
    },
    {
        "content": "<p>I thought we had a computable version of the code above given enough decidability instances, but I can’t seem to find it…</p>",
        "id": 402803398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700267338
    }
]