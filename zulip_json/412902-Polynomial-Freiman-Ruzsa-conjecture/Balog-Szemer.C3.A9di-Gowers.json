[
    {
        "content": "<p>I just wrote most of the proof of entropic BSG. There's three sorries left:</p>\n<ul>\n<li>The last one is just rewriting under a sum, but I wasn't feeling like doing it</li>\n<li>The first two are wrong, I'm afraid. The prerequisite lemma <code>condIndependent_copies (fun ω ↦ (A ω, B ω)) Z (hA.prod_mk hB) hZ μ</code> gives me</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">AB₁</span> <span class=\"n\">AB₂</span><span class=\"o\">:</span> <span class=\"bp\">Ω'</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span>\n<span class=\"n\">Z'</span><span class=\"o\">:</span> <span class=\"bp\">Ω'</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n<span class=\"n\">ν</span><span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω'</span>\n<span class=\"n\">left</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">ν</span>\n<span class=\"n\">hAB₁</span><span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">AB₁</span>\n<span class=\"n\">hAB₂</span><span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">AB₂</span>\n<span class=\"n\">hZ'</span><span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">Z'</span>\n<span class=\"n\">hABZ</span><span class=\"o\">:</span> <span class=\"n\">condIndepFun</span> <span class=\"n\">AB₁</span> <span class=\"n\">AB₂</span> <span class=\"n\">Z'</span>\n<span class=\"n\">hAB₁Z</span><span class=\"o\">:</span> <span class=\"n\">IdentDistrib</span> <span class=\"o\">(⟨</span><span class=\"n\">AB₁</span><span class=\"o\">,</span> <span class=\"n\">Z'</span><span class=\"o\">⟩)</span> <span class=\"o\">(⟨</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">ω</span><span class=\"o\">),</span> <span class=\"n\">Z</span><span class=\"o\">⟩)</span>\n<span class=\"n\">hAB₂Z</span><span class=\"o\">:</span> <span class=\"n\">IdentDistrib</span> <span class=\"o\">(⟨</span><span class=\"n\">AB₂</span><span class=\"o\">,</span> <span class=\"n\">Z'</span><span class=\"o\">⟩)</span> <span class=\"o\">(⟨</span><span class=\"k\">fun</span> <span class=\"n\">ω</span> <span class=\"bp\">↦</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">ω</span><span class=\"o\">),</span> <span class=\"n\">Z</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>but nothing is ensuring that <code>∀ ω, (AB₁ ω).1 + (AB₁ ω).2 = (AB₂ ω).1 + (AB₂ ω).2</code> (<code>A₁ + B₁ = A₂ + B₂</code> in the blueprint), which is what I need later in the proof.</p>",
        "id": 405437398,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701464484
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> who is taking over the proof for now</p>",
        "id": 405437467,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701464513
    },
    {
        "content": "<p>I think the way this should work is that because <code>A ω + B ω = Z ω</code>, one should get from <code>hAB₁Z</code> that <code>(AB₁ ω).1 + (AB₁ ω).2 = Z' ω</code> for almost all (but not all) <code>ω</code>, and  similarly <code>(AB₂ ω).1 + (AB₂ ω).2 = Z' ω</code> for almost all <code>ω</code>, so that <code>∀ᵐ ω, (AB₁ ω).1 + (AB₁ ω).2 = (AB₂ ω).1 + (AB₂ ω).2</code>, which should hopefully be enough.</p>",
        "id": 405472985,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701482801
    },
    {
        "content": "<p>After a two days fight against the measure theory API...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">ent_bsg</span>\n<span class=\"c1\">-- 'ent_bsg' depends on axioms: [Quot.sound, propext, Classical.choice]</span>\n</code></pre></div>",
        "id": 405670713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701613851
    },
    {
        "content": "<p>Wow, it looks like we are down to just one outstanding task, for which there is already a lot of partial progress (and an outstanding PR).  Well done everybody!</p>\n<p><span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> and <span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span> , let us know if there is any component of the remaining task that could be done in parallel, in particular filling in a <code>sorry</code> for a sublemma that one knows how to use in the rest of the argument.  </p>\n<p>Concurrently with all the formalization contributions, I have added content to each of the sections of the <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples file</a>.  But there may still be some illustrative examples of what was accomplished in this project that could still go in this file, so feel free to propose such contributions (either here or as PRs).</p>",
        "id": 405676965,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701619310
    },
    {
        "content": "<p>For your information, I am now formalising the combinatorial version of BSG. So we could also aim for the last version of PFR you were mentioning.</p>",
        "id": 405677176,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701619412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Balog-Szemer.C3.A9di-Gowers/near/405676965\">said</a>:</p>\n<blockquote>\n<p>Wow, it looks like we are down to just one outstanding task, for which there is already a lot of partial progress (and an outstanding PR).  Well done everybody!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> and <span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> , let us know if there is any component of the remaining task that could be done in parallel, in particular filling in a <code>sorry</code> for a sublemma that one knows how to use in the rest of the argument.  </p>\n<p>Concurrently with all the formalization contributions, I have added content to each of the sections of the <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples file</a>.  But there may still be some illustrative examples of what was accomplished in this project that could still go in this file, so feel free to propose such contributions (either here or as PRs).</p>\n</blockquote>\n<p>Sure! I think the current PR should deal with the last annoying technical issues (notably the independence proofs) so the remainder of the proof should be relatively quick! </p>\n<p>Concerning <code>sorries</code> that people could help fill in, the PR adds a lemma called <code>iIndepFun.prod</code> which I don't think we've proven yet (although it might be best to check with <span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span> in case he has a proof locally). The other remaining <code>sorries</code> should be relatively easy (they are in the proof of the main result we've been working on) and I'm planning on finishing them off tomorrow (together with fixing the merge conflicts in the PR)</p>",
        "id": 405679994,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701622037
    },
    {
        "content": "<p>Currently, I don't have a proof of <code>iIndepFun.prod</code> yet, so if someone else wants to work on that they're very welcome. I would also be interested in looking into this, but I won't be able to spend much time on it before Thursday.</p>",
        "id": 405686442,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1701627385
    },
    {
        "content": "<p>Just for reference, here is what I believe is the specification for <code>iIndepFun.prod</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Independence.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.IdentDistrib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n  <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ST</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">ST</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iIndepFun.prod</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">iIndepFun</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n    <span class=\"n\">iIndepFun</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">MeasurableSpace.pi</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In principle I think this can be deduced from <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.iIndepFun_iff_map_prod_eq_prod_map_map#doc\">pfr#ProbabilityTheory.iIndepFun_iff_map_prod_eq_prod_map_map</a> but there are some reindexing and dependent type issues.  It also generalizes <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.iIndepFun.indepFun_finset#doc\">docs#ProbabilityTheory.iIndepFun.indepFun_finset</a> but it is not clear to me how to get from that special case to the general case.</p>",
        "id": 405690547,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701630792
    },
    {
        "content": "<p>Oh I can probably do that</p>",
        "id": 405696806,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701636820
    },
    {
        "content": "<p><code>sum_dist_diff_le</code> is now sorry free!</p>",
        "id": 405789676,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701684309
    },
    {
        "content": "<p>(except for <code>iIndepFun.prod</code> of course)</p>",
        "id": 405789772,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701684340
    },
    {
        "content": "<p>(still working on it)</p>",
        "id": 405790187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701684478
    },
    {
        "content": "<p>That means that <code>iIndepFun.prod</code> is the last sorry in the project?</p>",
        "id": 405790922,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701684705
    },
    {
        "content": "<p>I think so!</p>",
        "id": 405791015,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701684725
    },
    {
        "content": "<p>This lemma is pretty horrible. I think it's stated suboptimally for proving purposes. I have just merged your PR and will try to find a better statement.</p>",
        "id": 405800478,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701687928
    },
    {
        "content": "<p>Yeah the independence part of the proof is rather horrendous so feel free to improve it!</p>",
        "id": 405809359,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701691324
    },
    {
        "content": "<p>I think it boils down to the fact that you're using a finset-indexed collection of finsets instead of a type-indexed collection of types (namely a sigma type). Tinkering...</p>",
        "id": 405815801,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701693814
    },
    {
        "content": "<p>Giving up for now. I've written three different approaches that people can try.</p>",
        "id": 405849604,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701703833
    },
    {
        "content": "<p>I'd like to work on <code>iIndepFun.pi'</code>, unless someone is already on it.</p>",
        "id": 405885109,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701713268
    },
    {
        "content": "<p>Please do, Sébastien! I already know what lemma I'll be having nightmares about tonight...</p>",
        "id": 405895792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701717337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Balog-Szemer.C3.A9di-Gowers/near/405895792\">said</a>:</p>\n<blockquote>\n<p>Please do, Sébastien! I already know what lemma I'll be having nightmares about tonight...</p>\n</blockquote>\n<p>By the way, it seems that <a href=\"https://teorth.github.io/pfr/docs/PFR/Mathlib/Probability/Independence/Basic.html\">PFR's version of ProbabilityTheory/Independence/Basic</a> now differs (rather substantially) from <a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Probability/Independence/Basic.html\">Mathlib's version</a>.  Is the plan eventually to merge the two somehow?</p>\n<p>Also, I wonder if <code>iIndepFun.prod</code> could be established from <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.iIndepFun_iff%27#doc\">pfr#ProbabilityTheory.iIndepFun_iff'</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.prod_disjiUnion#doc\">docs#Finset.prod_disjiUnion</a> EDIT: Ah, one also needs to mess around with Pi systems in order to reduce to the case of testing with rectangles and not arbitrary measurable sets. So some tool like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.iIndepSets.iIndep#doc\">docs#ProbabilityTheory.iIndepSets.iIndep</a> may also be needed.</p>",
        "id": 405915922,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701725944
    },
    {
        "content": "<p>Oh, sorry if that wasn't clear! Everything in file <code>PFR.Mathlib.X.Y.Z</code> is meant to be upstreamed to the mathlib file <code>Mathlib.X.Y.Z</code>. So yeah, they diverge, by definition.</p>",
        "id": 405919713,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701727714
    },
    {
        "content": "<p>Yes, exactly. I got stuck because I needed to apply something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace.induction_on_inter#doc\">docs#MeasurableSpace.induction_on_inter</a> through an induction on the number of elements of <code>ι</code>. Not very appetising.</p>",
        "id": 405919823,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701727790
    },
    {
        "content": "<p>Of course our end use only requires one application of <code>MeasurableSpace.induction_on_inter</code>, but the general case is probably easier to prove anyway. In case, it is not, you can try proving <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=hopelessly_specific#doc\">pfr#hopelessly_specific</a>.</p>",
        "id": 405919976,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701727859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Balog-Szemer.C3.A9di-Gowers/near/405919823\">said</a>:</p>\n<blockquote>\n<p>Yes, exactly. I got stuck because I needed to apply something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasurableSpace.induction_on_inter#doc\">docs#MeasurableSpace.induction_on_inter</a> through an induction on the number of elements of <code>ι</code>. Not very appetising.</p>\n</blockquote>\n<p>I see now.  It does seem like one really does have to get into the bowels of measure theory if we want to prove the statement in full generality.  (For our application of course we only need finite probability spaces and in the worst case we could retreat to that setting, though it would be a shame since these lemmas are certainly true and worth having in mathlib.)</p>\n<p>I took a look at the proof of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.kernel.iIndepFun.indepFun_finset#doc\">docs#ProbabilityTheory.kernel.iIndepFun.indepFun_finset</a> (which would cover the special case of breaking up into two disjoint families rather than finitely many) and it does indeed go through a lot of Pi system machinery.  So this looks sort of inevitable that one has to do something similar here (but perhaps we can reuse some of the subresults proved there?)</p>",
        "id": 405929864,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701731358
    },
    {
        "content": "<p>I was able to get somewhere with <code>iIndepFun.prod</code> but I don't want to touch endgame.lean as it is giving me a lot of build errors right now and was hoping I could either hand this off to someone else or get some advice on how to do the next step.  Basically I managed to adapt the pi system reduction from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.kernel.iIndepFun.indepFun_finset#doc\">docs#ProbabilityTheory.kernel.iIndepFun.indepFun_finset</a> to reduce to showing that the preimages of boxes coming from disjoint index sets are independent sets.  This remaining task should be straightforward, the only issue is that I am not sufficiently good with dependent types (or classical choice) to <code>obtain</code> the various sets needed to describe the boxes.  Basically once one can extract the analogues of the data <code>sets_s'</code>, <code>hs1</code>, <code>hs2</code>, <code>sets_t'</code>, <code>ht1</code>, <code>ht2</code> that appears in the source code from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.kernel.iIndepFun.indepFun_finset#doc\">docs#ProbabilityTheory.kernel.iIndepFun.indepFun_finset</a> , I believe one can continue adapting the rest of that code to finish off the proof.  [Specifically, at the <code>sorry</code> in the code below, I am stuck in trying to express <code>E k</code> (for <code>k ∈ s</code>) as the preimage <code>(fun a (i : (ST k)) =&gt; f i a) ⁻¹' (Set.pi (Set.univ : Set (ST k)) (sets k) )</code> for some <code>sets k ∈ Set.pi Set.univ fun i ↦ {s | MeasurableSet s}</code>.]</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Independence.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.IdentDistrib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">ST</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">ST</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iIndepFun.prod</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">iIndepFun</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n    <span class=\"n\">iIndepFun</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">MeasurableSpace.pi</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n      <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">MeasurableSpace.pi</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ProbabilityTheory.iIndepFun_iff_iIndep</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">πβ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set.pi</span> <span class=\"o\">(</span><span class=\"n\">Set.univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">''</span>\n    <span class=\"n\">Set.pi</span> <span class=\"o\">(</span><span class=\"n\">Set.univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">MeasurableSet</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n      <span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">πβ</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n      <span class=\"n\">apply</span> <span class=\"n\">ProbabilityTheory.iIndepSets.iIndep</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">measurable_iff_comap_le</span><span class=\"o\">,</span> <span class=\"n\">measurable_pi_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">intro</span> <span class=\"n\">i</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span>\n        <span class=\"n\">apply</span> <span class=\"n\">IsPiSystem.comap</span>\n        <span class=\"n\">apply</span> <span class=\"n\">isPiSystem_pi</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">MeasurableSpace.generateFrom</span> <span class=\"o\">(</span><span class=\"n\">πβ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">generateFrom_pi.symm</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace.comap_generateFrom</span><span class=\"o\">]</span>\n        <span class=\"n\">congr</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iIndepSets_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">E</span> <span class=\"n\">hE</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 405954230,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701742652
    },
    {
        "content": "<p>Ohh, I need to invoke the axiom of choice now. <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> OK, I think I'm unstuck.</p>",
        "id": 405958741,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701744592
    },
    {
        "content": "<p>I have a (rather convoluted) proof of <code>iIndepFun.prod</code> (see below for a self-contained treatment) but I'm having a weird local problem in that endgame.lean is reporting a huge number of build errors and so I can't merge directly.  If someone with a working build could merge this in that would be great.  (Note that the code should probably go somewhere else than endgame.lean, such as Mathlib.Probability.Independence.Basic, especially since it uses the symbol \"k\" which was used for something else in endgame.lean.  Also my set of hypotheses for <code>iIndepFun.prod</code> is slightly different from what it was before, so the application of this lemma in endgame.lean will also need to be tweaked.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.Independence.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Probability.IdentDistrib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span> <span class=\"n\">Function</span> <span class=\"n\">Set</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ProbabilityTheory</span>\n\n\n<span class=\"c1\">-- The following lemma has a completely inefficient proof; should be done better</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_indexfn</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">ι'</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hι'</span><span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ι'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">ST</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">ST</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ι'</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">K</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">classical</span>\n  <span class=\"k\">let</span> <span class=\"n\">inv</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ι'</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">k</span> <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"k\">then</span>   <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">Set.Nonempty.to_subtype</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"n\">Classical.choice</span> <span class=\"n\">hι'</span>\n  <span class=\"n\">use</span> <span class=\"n\">K</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Set.Nonempty</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">nonempty_of_mem</span> <span class=\"n\">hi</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">set</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">Set.Nonempty.to_subtype</span> <span class=\"n\">this</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">k'</span> <span class=\"bp\">∈</span> <span class=\"n\">inv</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Subtype.mem</span> <span class=\"o\">(</span><span class=\"n\">Classical.choice</span> <span class=\"o\">(</span><span class=\"n\">Nonempty.to_subtype</span> <span class=\"n\">this</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Pairwise.eq</span> <span class=\"n\">hS</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">Disjoint</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">use</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">ι</span> <span class=\"n\">ι'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hι'</span><span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">ι'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)}</span>  <span class=\"o\">{</span><span class=\"n\">ST</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hS</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">ST</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">iIndepFun.prod</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">iIndepFun</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"k\">let</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n    <span class=\"n\">iIndepFun</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">MeasurableSpace.pi</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">set</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span>\n      <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">MeasurableSpace.pi</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iIndepFun_iff_iIndep</span><span class=\"o\">]</span>\n      <span class=\"k\">let</span> <span class=\"n\">πβ</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Set.pi</span> <span class=\"o\">(</span><span class=\"n\">Set.univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">''</span>\n    <span class=\"n\">Set.pi</span> <span class=\"o\">(</span><span class=\"n\">Set.univ</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">MeasurableSet</span><span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n      <span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"bp\">Ω</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">πβ</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n      <span class=\"n\">apply</span> <span class=\"n\">iIndepSets.iIndep</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">π</span><span class=\"o\">)</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">measurable_iff_comap_le</span><span class=\"o\">,</span> <span class=\"n\">measurable_pi_iff</span><span class=\"o\">]</span>\n        <span class=\"n\">intro</span> <span class=\"n\">i</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">i</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span>\n        <span class=\"n\">apply</span> <span class=\"n\">IsPiSystem.comap</span>\n        <span class=\"n\">apply</span> <span class=\"n\">isPiSystem_pi</span>\n      <span class=\"bp\">.</span> <span class=\"n\">intro</span> <span class=\"n\">k</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">MeasurableSpace.generateFrom</span> <span class=\"o\">(</span><span class=\"n\">πβ</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">generateFrom_pi.symm</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace.comap_generateFrom</span><span class=\"o\">]</span>\n        <span class=\"n\">congr</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iIndepSets_iff</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">s</span> <span class=\"n\">E</span> <span class=\"n\">hE</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hE</span>\n      <span class=\"k\">have</span> <span class=\"n\">hE'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hE</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">Finset.coe_mem</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n      <span class=\"n\">classical</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">h_sets</span> <span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.axiomOfChoice</span> <span class=\"n\">hE'</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">exists_indexfn</span> <span class=\"n\">hS</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">hK</span> <span class=\"o\">⟩</span>\n      <span class=\"k\">let</span> <span class=\"n\">sets'</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">sets</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h'</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">Set.univ</span>\n      <span class=\"k\">let</span> <span class=\"n\">sets''</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sets'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n      <span class=\"k\">have</span> <span class=\"n\">box</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ι'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">sets''</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"o\">(</span><span class=\"n\">h_sets</span> <span class=\"o\">⟨</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span> <span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">]</span>\n        <span class=\"n\">ext1</span> <span class=\"n\">ω</span>\n        <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">Set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_univ_pi</span><span class=\"o\">,</span> <span class=\"n\">Set.mem_iInter</span><span class=\"o\">]</span>\n        <span class=\"n\">constructor</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n        <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"o\">⟩</span>\n        <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"n\">k</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this</span>\n      <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">sets''</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∏</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">sets''</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"bp\">.</span> <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n        <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n          <span class=\"n\">exact</span> <span class=\"n\">box</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n        <span class=\"o\">}</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iIndepFun_iff_measure_inter_preimage_eq_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n      <span class=\"k\">have</span> <span class=\"n\">hS'</span> <span class=\"o\">:</span> <span class=\"n\">PairwiseDisjoint</span> <span class=\"n\">s</span> <span class=\"n\">ST</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">_</span> <span class=\"n\">k'</span> <span class=\"n\">_</span> <span class=\"n\">hkk'</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hS</span> <span class=\"n\">hkk'</span>\n      <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.disjiUnion</span> <span class=\"n\">s</span> <span class=\"n\">ST</span> <span class=\"n\">hS'</span>\n      <span class=\"k\">have</span> <span class=\"n\">big_inter</span> <span class=\"o\">:</span> <span class=\"bp\">⋂</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">sets''</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">⁻¹'</span> <span class=\"o\">(</span><span class=\"n\">sets''</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">big_inter</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Finset.prod_disjiUnion</span><span class=\"o\">]</span>\n      <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.prod_congr</span> <span class=\"n\">rfl</span>\n        <span class=\"n\">intro</span> <span class=\"n\">k</span> <span class=\"n\">hk</span>\n        <span class=\"n\">symm</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ST</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n        <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n        <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h_sets</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n        <span class=\"n\">convert</span> <span class=\"n\">this</span>\n        <span class=\"n\">simp</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">]</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">i</span> <span class=\"n\">hi</span>\n      <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">hi</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hi</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hik</span> <span class=\"o\">⟩</span>\n      <span class=\"n\">simp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"n\">k</span> <span class=\"n\">i</span> <span class=\"n\">hik</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">hik</span><span class=\"o\">]</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h_sets</span> <span class=\"o\">⟨</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">hk</span> <span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span> <span class=\"n\">hik</span>\n</code></pre></div>",
        "id": 405983238,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701757230
    },
    {
        "content": "<p>Actually, I think I can get my local build to compile now.  Working on it...</p>",
        "id": 405984645,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701757835
    },
    {
        "content": "<p>Does this mean we should get the champagne ready?</p>",
        "id": 405985339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701758152
    },
    {
        "content": "<p>Very nearly!  I just got <code>iIndepFun.Prod</code> to work.  There is just one <code>sorry</code> left I think, which is to prove that the sets {0}, {1}, and {2,3} are pairwise disjoint.  I tried to bash this out with <code>fin_cases</code> but it got very tedious, surely there is a better way?</p>",
        "id": 405988352,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701759404
    },
    {
        "content": "<p>Ouch, that shouldn't be hard. Do you have the formal statement?</p>",
        "id": 405988593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701759503
    },
    {
        "content": "<p>Statements like <code>Finset.disjoint_singleton_left</code> and <code>Finset.disjoint_singleton_right</code> should help.</p>",
        "id": 405988997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701759653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.disjoint_singleton_left</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 405989422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701759773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> Are these sets of natural numbers? Or real numbers? Or something else?</p>",
        "id": 405989562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701759823
    },
    {
        "content": "<p>Natural numbers.  We need</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">S1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">S1</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>There's some slight problem with the build because I also put in some measurability conditions that now need to propagate downstream, working on that now.</p>",
        "id": 405989888,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701759942
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">S1</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">S1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">@</span><span class=\"n\">pairwise_disjoint_on</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 405990726,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701760308
    },
    {
        "content": "<p>Golfed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span><span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">Disjoint</span> <span class=\"n\">on</span> <span class=\"n\">S1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pairwise_disjoint_on</span><span class=\"o\">]</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 405990854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701760357
    },
    {
        "content": "<p>OK that worked.  Just need to paste in a bunch of measurability conditions and should be done soon <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 405991189,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701760529
    },
    {
        "content": "<p>OK I think I removed all the sorries from endgame.lean.  Is there an easy way to see that there are no essential sorries in the entire project?</p>",
        "id": 405992321,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701760996
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">your_theorem_name</span>\n</code></pre></div>",
        "id": 405992366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701761024
    },
    {
        "content": "<p>You hope to see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 'PFR' depends on axioms: [propext, Quot.sound, Classical.choice]</span>\n</code></pre></div>\n<p>or something like that.</p>",
        "id": 405992594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701761109
    },
    {
        "content": "<p>(Building lean files)</p>",
        "id": 405992956,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701761283
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/ZHSjNHCMHaQR6dOiCZlOHuwO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZHSjNHCMHaQR6dOiCZlOHuwO/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ZHSjNHCMHaQR6dOiCZlOHuwO/image.png\"></a></div>",
        "id": 405993521,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701761533
    },
    {
        "content": "<p>Congratulations to all contributors!</p>",
        "id": 405994684,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701762072
    },
    {
        "content": "<p>And that took quite precisely three weeks! <span aria-label=\"running\" class=\"emoji emoji-1f3c3\" role=\"img\" title=\"running\">:running:</span></p>",
        "id": 405995011,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701762223
    },
    {
        "content": "<p>And the \"Build project\" CI step for the last commit is also successful, so it looks like the online version is good as well (there are still a few sorry in independence, but I guess they are the alternative approaches that were not used in the end).<br>\nAll green: <a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">https://teorth.github.io/pfr/blueprint/dep_graph_document.html</a> :)</p>",
        "id": 405995834,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701762585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Balog-Szemer.C3.A9di-Gowers/near/405895792\">said</a>:</p>\n<blockquote>\n<p>Please do, Sébastien! I already know what lemma I'll be having nightmares about tonight...</p>\n</blockquote>\n<p>If you want to see how it can be done, you can have a look at <a href=\"https://github.com/teorth/pfr/pull/131\">https://github.com/teorth/pfr/pull/131</a>. In the end it wasn't too bad using the right pi_system lemmas.</p>",
        "id": 405998845,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701763834
    },
    {
        "content": "<p>Very impressive :) I genuinely had no clue here</p>",
        "id": 405999296,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701764044
    }
]