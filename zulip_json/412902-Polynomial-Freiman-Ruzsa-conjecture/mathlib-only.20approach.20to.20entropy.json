[
    {
        "content": "<p>I saw that the PFR repository contains definitions of new classes like ProbabilitySpace, and I wanted to see what an implementation of entropy would look like without those, with only the classes defined in mathlib. The goal is to have a baseline against which we can compare the new classes, to see what they bring.</p>\n<p>The code is here: <a href=\"https://github.com/leanprover-community/mathlib4/compare/RD_entropy\">https://github.com/leanprover-community/mathlib4/compare/RD_entropy</a> (on <a href=\"https://github.com/leanprover-community/mathlib4/tree/RD_entropy\">branch#RD_entropy</a>). This is a branch of mathlib and not of the pfr project because that code does not use anything from the project, so it was faster for me that way.</p>\n<p>What the file contains:</p>\n<ul>\n<li>several auxiliary lemmas about x* log x and <code>ProbabilityTheory.cond</code>. Ignore those.</li>\n<li>a definition of the entropy of a measure.</li>\n<li>a definition of the entropy of a random variable (as entropy of its law)</li>\n<li>a definition of conditional entropy</li>\n<li>a proof of the chain rule, to check that the definitions can be used together</li>\n<li>one <code>sorry</code>, but it is not on the path to the chain rule and corresponds to something already proved in the pfr project</li>\n</ul>\n<p>I implemented the entropy of a measure as an intermediate step because I wanted to get rid of all the <code>Y ⁻¹' {y}</code> when possible.</p>\n<p>Some observations on this mathlib-only approach:</p>\n<ul>\n<li>overall, it works well. In particular there is no type theory hell</li>\n<li>writing <code>volume.map X</code> for the law of X is not ideal, we need some notation</li>\n<li>the <code>toReal</code> everywhere are annoying, as are all the <code>rw</code> steps to juggle with ENNReal and Real</li>\n<li>all measures coming from conditioning are written explicitly in proofs, which is not very readable. We see things like <code>(ℙ[|Y ⁻¹' {y}]).map X {x}</code> (this is the probability that <code>X = x</code> given <code>Y = y</code>)</li>\n</ul>",
        "id": 402212263,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700048215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402212263\">said</a>:</p>\n<blockquote>\n<p>I saw that the PFR repository contains definitions of new classes like ProbabilitySpace, and I wanted to see what an implementation of entropy would look like without those, with only the classes defined in mathlib. The goal is to have a baseline against which we can compare the new classes, to see what they bring.</p>\n</blockquote>\n<p>Thanks for this!  I quite like this approach, and it is good for me to see how the Mathlib methods (and style) can be used to address the problems I was facing (in particular, the need to consider \"probability spaces\" with zero measure). Particularly liked</p>\n<ul>\n<li>The use of Mathlib naming conventions (e.g., <code>negMulIdLog</code> to denote the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>↦</mo><mo>−</mo><mi>x</mi><mi>log</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x \\mapsto -x \\log x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>, which had called <code>h</code>)</li>\n<li>The separate introduction of a <code>measureEntropy</code> function (which also makes sense mathematically as a useful concept), and how it can handle arbitrary measures (including infinite measures), not just probability measures and the zero measure</li>\n<li>Use of existing Mathlib methods and classes like <code>MeasureTheory.Measure.Map</code>, <code>integral_nonneg</code> and <code>MeasurableSingletonClass</code> (and the existing conditional probability notation)</li>\n</ul>\n<p>It's a shame that all the <code>ENNReal</code>s come back now that one is going through the Mathlib <code>Measure</code> theory (my initial thought was to develop a restricted subset of that theory for <code>ProbabilitySpace</code> that only uses <code>NNReal</code>) but I can live with this.  Perhaps all that is needed is a separate suite of helper lemmas relating <code>ENNReal</code> with <code>Real</code> (though once one gets out of the foundations of conditioning, the <code>ENNReal</code>s should hopefully become invisible).  This seems more like an issue concerning further development of the <code>MeasureTheory</code> section of Mathlib than for this specific project, though.</p>\n<p>Using more conventional Mathlib notation like <code>entropy X</code> or <code>condEntropy X Y</code> in place of <code>H[ X ]</code> or <code>H[ X | Y ]</code> works for me.  Mathematically one would typically use something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>μ</mi><mi>X</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to denote the law <code>volume.map X</code> of <code>X</code>, perhaps some notation to that effect could be used.  I initially didn't like <code>(fun ω ↦ (X ω, Y ω))</code> so much, which is why I sought a more compact notation <code>(X,Y)</code> for it, but I think I can get used to it.</p>\n<p>The one mild concern I have going forward is how to deduce conditional results quickly from unconditional results.  A typical example would be that starting with the unconditional Shannon inequality <code>entropy (fun ω ↦ (X ω, Y ω)) ≤ entropy X + entropy Y</code>, to deduce as a corollary the conditional Shannon entropy <code>condEntropy (fun ω ↦ (X ω, Y ω)) Z ≤ condEntropy X Z + condEntropy Y Z</code>.  My old approach was designed with the intention to facilitate this type of deduction (which occurs frequently in the paper) by applying the unconditional result to conditioned random variables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mi mathvariant=\"normal\">∣</mi><mi>Z</mi><mo>=</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>Y</mi><mi mathvariant=\"normal\">∣</mi><mi>Z</mi><mo>=</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> (X|Z=z), (Y|Z=z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span> for all <code>z</code>, and then integrating over the law of <code>Z</code>.  As I now realize this generates a certain amount of \"dependent type hell\".  In your current writeup I notice that you don't directly use the unconditional lemmas to prove the conditional ones, but instead adapt the proofs of the former to establish the latter.  This is fine at this level, but later in the paper there will be unconditional entropy inequalities that have rather complicated proofs, and the quickest way to derive their conditional analogues will be to apply the unconditional inequalities (as a \"black box\") to conditioned variables and then integrate.  Do you expect your framework to be able to support this type of argument?  If so, then I am 100% sold on this approach and would be happy to accept a PR that replaces the probability space and entropy stuff I had already written with your version.</p>",
        "id": 402264668,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700060975
    },
    {
        "content": "<p>I think my approach needs one more definition: <code>def entropy' (μ : Measure Ω) (X : Ω → S) := measureEntropy (μ.map X)</code>. <br>\nThen the unconditional definition is an example of this and the conditional definition is simply the expectation of another example of this. That way I should be able to avoid most duplication of proofs.</p>",
        "id": 402266391,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700061442
    },
    {
        "content": "<p>Also, I added notations to my code in the last few minutes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">Hm</span><span class=\"o\">[</span><span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">measureEntropy</span> <span class=\"n\">μ</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">entropy</span> <span class=\"n\">X</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"bp\">←</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">Hm</span><span class=\"o\">[(</span><span class=\"n\">ℙ</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"bp\">⁻¹'</span> <span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">}])</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">X</span><span class=\"o\">]</span><span class=\"bp\">`</span>\n<span class=\"bp\">*</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">condEntropy</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">such</span> <span class=\"n\">that</span> <span class=\"bp\">`</span><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">volume.map</span> <span class=\"n\">Y</span><span class=\"o\">)[</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"bp\">←</span> <span class=\"n\">y</span><span class=\"o\">]]</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 402266597,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700061492
    },
    {
        "content": "<p>I tried to introduce a notation for <code>volume.map X</code>, but when I use the notation lean apparently cannot guess what measure space I am talking about. I am not very experienced with notations so the problem might come from me.</p>",
        "id": 402267558,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700061730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402267558\">said</a>:</p>\n<blockquote>\n<p>I tried to introduce a notation for <code>volume.map X</code>, but when I use the notation lean apparently cannot guess what measure space I am talking about. I am not very experienced with notations so the problem might come from me.</p>\n</blockquote>\n<p>Yeah, I encountered this problem a lot and had to manually fill in the <code>MeasureSpace</code> type instances using <code>@</code> notation.  Also I discovered that all this notation is unfolded anyway in the Infoview, so it was less useful than I expected.  I guess the path of least resistance is to not use much notation and just use the default MathLib syntax most of the time.</p>\n<p>I have backed up my now obsolete versions of probability_space.lean, entropy_basic.lean, etc. and will try not to touch them for a while (I need to work on the blueprint, which is not building :-(), so feel free to work on a merge.  (I guess the intent is to update the Mathlib files and then have the PFR code just refer to the updated Mathlib file?)</p>\n<p>One thing looking beyond this project: for this project, it is enough to work with entropies on a <code>Fintype</code>, in which case the entropies are <code>Real</code> (or <code>NNReal</code>).  In principle one could eventually consider entropies on a <code>MeasurableSingletonClass</code> in which case they would take values instead in our friend <code>ENNReal</code>.  But developing entropy for this project in the <code>ENNReal</code> category brings back all these lovely casting issues.  If we wanted to eventually move the entropy stuff to mathlib, would this be implemented using two different versions of <code>entropy</code> and some coercion lemmas?</p>",
        "id": 402275561,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700063910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402266391\">said</a>:</p>\n<blockquote>\n<p>I think my approach needs one more definition: <code>def entropy' (μ : Measure Ω) (X : Ω → S) := measureEntropy (μ.map X)</code>. <br>\nThen the unconditional definition is an example of this and the conditional definition is simply the expectation of another example of this. That way I should be able to avoid most duplication of proofs.</p>\n</blockquote>\n<p>To go further in that direction: I think that the clean way to proceed is to work only with definitions parametrized by a measure. That is, instead of entropy with respect to the volume, use entropy wrt some arbitrary measure. Same for the conditional entropy. Then when you want a result about a conditional quantity you apply the generic result to the conditional measure (and integrate).<br>\nI tried to work with MeasureSpace because I did not want to depart too much from what was in the PFR repository, but imposing a preferred measure is restrictive.</p>",
        "id": 402276627,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700064152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402275561\">said</a>:</p>\n<blockquote>\n<p>I have backed up my now obsolete versions of probability_space.lean, entropy_basic.lean, etc. and will try not to touch them for a while (I need to work on the blueprint, which is not building :-(), so feel free to work on a merge.  (I guess the intent is to update the Mathlib files and then have the PFR code just refer to the updated Mathlib file?)</p>\n</blockquote>\n<p>The intent is not necessarily to merge to mathlib, no. That would mean deciding on the correct generality beyond Fintype, etc. I wrote that code in a mathlib branch purely because that's my usual way to code. I'll make a PR to the PFR repository.</p>",
        "id": 402277452,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700064313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402276627\">said</a>:</p>\n<blockquote>\n<p>To go further in that direction: I think that the clean way to proceed is to work only with definitions parametrized by a measure. That is, instead of entropy with respect to the volume, use entropy wrt some arbitrary measure. Same for the conditional entropy. Then when you want a result about a conditional quantity you apply the generic result to the conditional measure (and integrate).<br>\nI tried to work with MeasureSpace because I did not want to depart too much from what was in the PFR repository, but imposing a preferred measure is restrictive.</p>\n</blockquote>\n<p>Is there some way to have the best of both worlds - an <code>entropy</code> functional defined for arbitrary measures, but some way to automatically use the default measure when working in a <code>MeasureSpace</code>?  If one has to specify the measure every time we use <code>entropy</code> then this will create clutter when proving the main theorems.</p>",
        "id": 402277613,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700064353
    },
    {
        "content": "<p>There is <code>volume_tac</code> for definitions. For example <code>Integrable f</code> is short for <code>Integrable f volume</code> thanks to that tactic. I don't know how it interacts with notations.</p>",
        "id": 402277982,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700064443
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Integrable#doc\">docs#MeasureTheory.Integrable</a> (it's not clear in the doc, but you see volume_tac if you look at the source)</p>",
        "id": 402278065,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700064466
    },
    {
        "content": "<p>There is a potentially a minor issue when performing double conditioning, e.g., moving from <code>condEntropy X Y ≤  entropy X</code> to <code>condEntropy X (fun ω ↦ (Y ω, Z ω))  ≤  condEntropy X Z</code>, which is that conditioning is currently defined only for probability measures, when one conditions on <code>Z</code> one could potentially be conditioning to an empty event and one no longer gets a probability measure.  One may possibly need to extend <code>condEntropy</code> to non-probability measures the same way it is already done for <code>entropy</code>.</p>\n<p>Oh wait, never mind, you don't actually assume you have a probability measure when defining <code>condEntropy</code>.</p>",
        "id": 402278555,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700064599
    },
    {
        "content": "<blockquote>\n<p>Also I discovered that all this notation is unfolded anyway in the Infoview, so it was less useful than I expected.</p>\n</blockquote>\n<p>This means that some \"delaborator\" is missing. I still don't know how to write those, but there are plenty people here who do. So I don't think you have to give up on nice notation yet (-;</p>",
        "id": 402280392,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700065098
    },
    {
        "content": "<p>Which notation is missing a delaborator?</p>",
        "id": 402280728,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700065171
    },
    {
        "content": "<p>Probably the notation in the file that Remy wrote, like here: <a href=\"https://github.com/leanprover-community/mathlib4/compare/RD_entropy#diff-c6edb06aa151c687d884bd60c05ef9525002a8c7ea5c8d8b9bd076b4f5d3419aR222\">https://github.com/leanprover-community/mathlib4/compare/RD_entropy#diff-c6edb06aa151c687d884bd60c05ef9525002a8c7ea5c8d8b9bd076b4f5d3419aR222</a></p>",
        "id": 402282014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700065520
    },
    {
        "content": "<p>Aha ok.</p>",
        "id": 402282234,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700065586
    },
    {
        "content": "<p>I don't know if it's that one. The simple notations I introduced here look fine in the infoview on my end.</p>",
        "id": 402282285,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700065607
    },
    {
        "content": "<p>In my (now obsolete) build, notation like <code>P[E]</code> is automatically unfolded for some reason to <code>(fun s ↦ ENNReal.toNNReal (↑↑↑(finiteMeasure Ω) s)) E</code> in the infoview.</p>",
        "id": 402282628,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700065695
    },
    {
        "content": "<p>I suspect it has something to do with the <code>finiteMeasure</code> class, which seems like it is held together with Lean's equivalent of duct tape</p>",
        "id": 402282913,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700065774
    },
    {
        "content": "<p>subtype or coe? coe is a very common duct tape in  lean</p>",
        "id": 402284080,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700066122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span> If you change <code>notation</code> to <code>notation3</code>, I just checked that it makes your <code>H[X | Y ← y]</code> notation pretty printable. Right now, mathlib's <code>notation3</code> command tends to be better at making pretty printable notations.</p>",
        "id": 402284331,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700066188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402277613\">said</a>:</p>\n<blockquote>\n<p>Is there some way to have the best of both worlds - an <code>entropy</code> functional defined for arbitrary measures, but some way to automatically use the default measure when working in a <code>MeasureSpace</code>?  If one has to specify the measure every time we use <code>entropy</code> then this will create clutter when proving the main theorems.</p>\n</blockquote>\n<p>A little more specifically: I estimate about 90% of the arguments in the paper (outside of the Shannon entropy appendix) take place in a <code>MeasureSpace</code> with a preferred measure, and then there are 10% that proceed by saying \"by applying the previous unconditional inequality to a conditioned measure and integrating, we obtain the following conditional inequality as a corollary\".  So a \"best of both worlds\" approach would be preferable in which we can work with a preferred measure by default, but make it easy to apply the conditioning argument whenever necessary.</p>",
        "id": 402284471,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700066231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> notation3 doesn't properly generate the unexpander for <code>P[ E ]</code> unfortunately in the way it's currently defined.</p>",
        "id": 402284622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700066281
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 402284711,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700066299
    },
    {
        "content": "<p>It looks like all the coercions there might be throwing something off.</p>",
        "id": 402284876,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700066358
    },
    {
        "content": "<p>If you point me to the line I can take a look</p>",
        "id": 402285370,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700066502
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/blob/e9e89403c9cf0f3b9e07cb4bae8a3189cb28ccb7/PFR/probability_space.lean#L54\">https://github.com/teorth/pfr/blob/e9e89403c9cf0f3b9e07cb4bae8a3189cb28ccb7/PFR/probability_space.lean#L54</a></p>",
        "id": 402285638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700066582
    },
    {
        "content": "<p>The notation is used here, for example: <a href=\"https://github.com/teorth/pfr/blob/e9e89403c9cf0f3b9e07cb4bae8a3189cb28ccb7/PFR/probability_space.lean#L61C6-L61C6\">https://github.com/teorth/pfr/blob/e9e89403c9cf0f3b9e07cb4bae8a3189cb28ccb7/PFR/probability_space.lean#L61C6-L61C6</a></p>",
        "id": 402285702,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700066610
    },
    {
        "content": "<p>I just tried changing that to <code>notation3</code> and there is no change in behavior in the infoview.</p>",
        "id": 402285804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700066642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402284471\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402277613\">said</a>:</p>\n<blockquote>\n<p>Is there some way to have the best of both worlds - an <code>entropy</code> functional defined for arbitrary measures, but some way to automatically use the default measure when working in a <code>MeasureSpace</code>?  If one has to specify the measure every time we use <code>entropy</code> then this will create clutter when proving the main theorems.</p>\n</blockquote>\n<p>A little more specifically: I estimate about 90% of the arguments in the paper (outside of the Shannon entropy appendix) take place in a <code>MeasureSpace</code> with a preferred measure, and then there are 10% that proceed by saying \"by applying the previous unconditional inequality to a conditioned measure and integrating, we obtain the following conditional inequality as a corollary\".  So a \"best of both worlds\" approach would be preferable in which we can work with a preferred measure by default, but make it easy to apply the conditioning argument whenever necessary.</p>\n</blockquote>\n<p>I just pushed an update to the file to not use MeasureSpace, but use volume_tac. At the end of the file, I added an example in a MeasureSpace, to show that we don't need to write the measure explicitly.</p>",
        "id": 402285850,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700066646
    },
    {
        "content": "<p>Regarding variadic notation that handles a proof obligation (using a tactic) based on the inputs, there is the <code>c[1, 2, 3, 4]</code> cycle notation that only works if the inputs are nodup:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/3fbcf0e064d06994e24f42a8b5c0245ddc9115d0/Mathlib/GroupTheory/Perm/Cycle/Concrete.lean#L521C1-L522\">https://github.com/leanprover-community/mathlib4/blob/3fbcf0e064d06994e24f42a8b5c0245ddc9115d0/Mathlib/GroupTheory/Perm/Cycle/Concrete.lean#L521C1-L522</a><br>\nImplemented thanks to Kyle and Patrick</p>",
        "id": 402287282,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1700067111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402285850\">said</a>:</p>\n<blockquote>\n<p>I just pushed an update to the file to not use MeasureSpace, but use volume_tac. At the end of the file, I added an example in a MeasureSpace, to show that we don't need to write the measure explicitly.</p>\n</blockquote>\n<p>Looks good.  This does seem like the \"best of both worlds\" I was looking for.  (I also assume it would be a trivial matter to take a result proven for a <code>MeasureSpace</code> and conclude the analogous result for an arbitrary measure, by building the <code>MeasureSpace</code> associated with the measure.)</p>\n<p>One tangentially related thing.  I chose 100 rather arbitrarily as the precedence for notation like <code>P[ E ]</code> because I didn't really understand this precedence concept (in particular, I didn't find a way to easily look up the precedence for other notations such as the arithmetic operations).  Are there any conventions on this?  One thing I noted was that <code>(P[ E ])⁻¹</code> required parentheses no matter what precedence I chose.  It's a very minor thing, but it would have been nice to not have to need these extra parentheses.</p>",
        "id": 402290201,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700067930
    },
    {
        "content": "<p>I copied 100 from your code <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . I don't know what are the precedences of usual things. Does anyone know if we have documentation about that somewhere?</p>",
        "id": 402290423,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700067998
    },
    {
        "content": "<p>I'm not sure you need precedence for a notation that has enclosed brackets like this -- you probably can omit giving one.</p>",
        "id": 402290781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700068125
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Init/Notation.lean#L274-L277\">Here are the basic arithmetic operators</a>, which shows their precedences. Unfortunately there's no central documentation with all Lean syntax and precedences yet.</p>",
        "id": 402291478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700068345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402282628\">said</a>:</p>\n<blockquote>\n<p>notation like <code>P[E]</code> is automatically unfolded for some reason to <code>(fun s ↦ ENNReal.toNNReal (↑↑↑(finiteMeasure Ω) s)) E</code> in the infoview.</p>\n</blockquote>\n<p>If you hand-simplify what it unfolds to, beta reducing it, then at least this pretty prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"P[ \"</span> <span class=\"n\">E</span> <span class=\"s2\">\" ]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"n\">finiteMeasure</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMeasure.measureOf</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNNReal</span>\n</code></pre></div>\n<p>It seems to be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.FiniteMeasure.instCoeFun#doc\">docs#MeasureTheory.FiniteMeasure.instCoeFun</a> that's introducing this non-beta-reduced term.</p>\n<p>Similarly, there's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span> <span class=\"s2\">\"P[ \"</span> <span class=\"n\">E</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">X</span> <span class=\"s2\">\" ]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">((</span><span class=\"bp\">@</span><span class=\"n\">finiteMeasure</span> <span class=\"n\">_</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMeasure.measureOf</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNNReal</span>\n</code></pre></div>\n<p>but then this overrides the first notation when pretty printing (e.g. <code>P[E]</code> comes out as <code>P[ E ; inst✝¹ ]</code>).</p>\n<p>The <code>notation3</code> command should be able to handle <code>fun</code>s, but that's a new feature and hasn't been tested in practice.</p>",
        "id": 402292795,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700068800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/mathlib-only.20approach.20to.20entropy/near/402290781\">said</a>:</p>\n<blockquote>\n<p>I'm not sure you need precedence for a notation that has enclosed brackets like this -- you probably can omit giving one.</p>\n</blockquote>\n<p>Right now, omitting the parentheses to give <code>P[ E ]⁻¹</code> returns the error <code>unexpected token '⁻¹'; expected ':=', 'where' or '|'</code>.  It's moot because this notation is now obsolete, but I am still curious as to what the issue is. It doesn't seem to be a whitespace issue; adding or removing spaces doesn't fix the problem.</p>",
        "id": 402294330,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700069366
    },
    {
        "content": "<p>I guess you need <code>max</code> precedence to meet the precedence of <code>⁻¹</code>. The barest of testing makes me think this doesn't lead to any other problems.</p>",
        "id": 402295443,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700069748
    },
    {
        "content": "<p>(<code>max</code> is a constant that stands for 1024, which is the precedence for function application)</p>",
        "id": 402295533,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700069767
    }
]