[
    {
        "content": "<p>Many of the \"Ruzsa calculus estimates\" will require using identities such as <code>H[X+Y|Y] = H[X|Y]</code>, <code>H[X-Y|Y] = H[X|Y]</code>, <code>H[-X]=H[X]</code>, and so forth.  I was wondering if it was possible to create <code>@simp</code> lemmas to automate a lot of this.  I tried this with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">condEntropy_of_sum_eq</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">[</span> <span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">condEntropy_of_inj_map</span> <span class=\"n\">μ</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">exact</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">↦</span> <span class=\"n\">add_left_injective</span> <span class=\"n\">y</span>\n\n<span class=\"sd\">/-- $$H[X] - I[X:Y] \\leq H[X+Y].$$ -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">entropy_sub_mutualInformation_le_entropy_add</span>\n    <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">I</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mutualInformation_eq_entropy_sub_condEntropy</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span><span class=\"o\">]</span>\n  <span class=\"n\">ring_nf</span>\n  <span class=\"k\">calc</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span>\n    <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">condEntropy_of_sum_eq</span> <span class=\"n\">hX</span> <span class=\"n\">hY</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">Y</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">condEntropy_le_entropy</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hX.add</span> <span class=\"n\">hY</span><span class=\"o\">)</span> <span class=\"n\">hY</span>\n</code></pre></div>\n<p>but for some reason I could not get the first step of the <code>calc</code> to resolve purely by <code>simp</code>.  It may be that I do not understand how pattern matching interacts with the entropy notation.  Is there a way to make <code>simp</code> work here?</p>",
        "id": 403064268,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700438662
    },
    {
        "content": "<p>The first step looks like it is in the opposite direction of your <code>simp</code>-lemma --- replacing a \"simpler\" expression by a \"more complicated one\".</p>\n<p>Oh, sorry, it should still work for the equality proof...</p>",
        "id": 403065969,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700439708
    },
    {
        "content": "<p>It seems (unsurprisingly) that <code>simp [condEntropy_of_sum_eq hX hY]</code> works at this equality goal. But <code>simp [condEntropy_of_sum_eq _ _]</code> fails. This probably at least explains why the tagging as a <code>@[simp]</code>-lemma doesn't help make it fire automatically.</p>\n<p>So I think <code>simp</code> doesn't use the assumptions <code>hX</code> and <code>hY</code> here --- but I don't know why and whether it should... </p>\n<p>Also just <code>simp [hX, hY]</code> fails. This is a bit strange to me, since think I remember similar situations where just providing hypotheses of lemmas helps simp find new applicable simp-lemmas. But again, I understand neither what simp actually does nor what it can reasonably be assumed to do...</p>\n<p>I hope someone else can answer this...</p>",
        "id": 403068775,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700441032
    },
    {
        "content": "<p>I think this is just not going to work: to a first approximation, <code>simp</code> can't use lemmas which require side conditions.</p>\n<p>If the <code>measurability</code> tactic is good enough for all the side conditions which arise, then it should be possible to do these proofs using <code>simp</code> with <code>measurability</code> as a discharger.  I've forgotten the exact syntax, something like <code>simp (config := {discharge := measurability})</code>.  If that pattern is reliably useful in the project, we can introduce a short-form name for it to make it a standalone tactic.</p>",
        "id": 403071057,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700442045
    },
    {
        "content": "<p>Thanks, this is clarifying. Im away from a computer right now but i will try to compile a list of all the “obvious” entropy identities such as H[ X, Y+Z |Y] = H[X,Z|Y] (this is a made up example, but you get the idea) that actually show up in the proofs to see if there is a simp or similar tactic approach to clearing these non-painfully</p>",
        "id": 403071952,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700442395
    },
    {
        "content": "<p>one can of course write a dozen little helper lemmas and play the Rubik cube game of finding exactly the right sequence of rw’s that get from one to another, but i played that game a lot in the symmetric polynomials project and am not super keen to play it again</p>",
        "id": 403072251,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700442528
    },
    {
        "content": "<p>Note that you need to be careful that the lemmas you choose for your simp-set have a coherent \"directionality\" -- as I understand it, the simp algorithm assumes there will be no looping (keyword \"confluence\") and may cease to operate usefully if there is looping.</p>",
        "id": 403074473,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700443664
    },
    {
        "content": "<p>OK, here is a rough pile of entropy identities show up as being \"obvious\" in the argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">|</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"bp\">+</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"bp\">+</span><span class=\"n\">Z</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Z</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"bp\">+</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Z</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"bp\">+</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Z</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">Z</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"bp\">-</span><span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n<span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"bp\">-</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I can probably write down some spanning set of helper lemmas (many of which are already in the project) that would establish all these through a sequence of rewrites (and some way to handle all the measurability conditions).  The question is whether it is worth it to try a smarter tactic than a sequence of six or so rewrites for a typical such identity.</p>",
        "id": 403076954,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700445237
    },
    {
        "content": "<p>Of course, if the side conditions were bundled then these would be perfectly valid and useful simp lemmas.</p>",
        "id": 403077368,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700445545
    },
    {
        "content": "<p>Do we not have bundled measurable maps in mathlib?</p>",
        "id": 403077391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700445574
    },
    {
        "content": "<p>So (considering just the unconditional identities), is the situation that entropies of tuples are the same if one tuple is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span></span></span></span> invertible matrix times the other?</p>",
        "id": 403078023,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700445875
    },
    {
        "content": "<p>Does Gaussian elimination over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span></span></span></span> boil down to anything nice?</p>",
        "id": 403078584,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700446267
    },
    {
        "content": "<p>Do let me know if <code>rw_search</code> is/isn't useful for these Rubik's cube puzzles!</p>",
        "id": 403079735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700447085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/.40simp.20lemmas.20for.20entropy.20of.20sums.3F/near/403078023\">said</a>:</p>\n<blockquote>\n<p>So (considering just the unconditional identities), is the situation that entropies of tuples are the same if one tuple is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span></span></span></span> invertible matrix times the other?</p>\n</blockquote>\n<p>I guess if we restrict to characteristic two, then yes, any linear transformation that is invertible (or even just injective) over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">F</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">{\\bf F}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8361em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">F</span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> would preserve the entropy.  In general characteristic, um, I think any linear transformation over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">{\\bf Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span></span> that had a left inverse over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">{\\bf Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span></span> would be fine.   How much linear algebra can tactics do?  If the tactic could figure out the linear transforms needed just from the shape of the terms then that would be a convenient tactic on the level of <code>ring</code> or <code>linarith</code>, but I don't know how hard this would be to code.</p>\n<p>In principle any identity of this type involving conditional entropy  could then be established by using the chain rule to write everything in terms of unconditional entropies and using whatever tactic worked in the unconditional case.</p>\n<p>Here is perhaps a simpler problem where some automation could be useful.  We already have shown in the project  <code>entropy_comm : H[⟨X, Y⟩] = H[⟨Y, X⟩]</code> and <code>entropy_assoc : H[⟨X, ⟨Y,Z⟩ ⟩] = H[⟨⟨X,Y⟩, Z⟩]</code> assuming some measurability side conditions.  Would it be difficult to then create a tactic to verify any identity that is a consequence of just these two axioms?  Basically, show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo><mo>=</mo><mi>H</mi><mo stretchy=\"false\">[</mo><msub><mi>X</mi><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mrow><mi>σ</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">H[X_1,\\dots,X_n] = H[X_{\\sigma(1)},\\dots,X_{\\sigma(n)}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> for any permutation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> and any measurable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_1,\\dots,X_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.  I could imagine solving these identities in terms of a relatively small number of lemmas by repeatedly permuting so that the two variables one wants to manipulate at any given time are always at the end of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-tuple.  There's this one case (in proving the entropic Balog-Szemeredi-Gowers lemma) that one might want to permute around a 5-tuple, and that could be quite an annoying set of rewrites to do directly from <code>entropy_comm</code> and <code>entropy_assoc</code>.</p>",
        "id": 403082574,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700449119
    },
    {
        "content": "<p>Perhaps for this one should <em>define</em> a notion of entropy for a finset of random variables, using the <code>comm</code> and <code>assoc</code> lemmas to show it's well-defined.</p>",
        "id": 403083053,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700449361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/.40simp.20lemmas.20for.20entropy.20of.20sums.3F/near/403082574\">said</a>:</p>\n<blockquote>\n<p>How much linear algebra can tactics do?  If the tactic could figure out the linear transforms needed just from the shape of the terms then that would be a convenient tactic on the level of <code>ring</code> or <code>linarith</code>, but I don't know how hard this would be to code.</p>\n</blockquote>\n<p>One approach (used in <code>polyrith</code>) is to outsource the work to a computer algebra package.</p>",
        "id": 403083382,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700449600
    },
    {
        "content": "<p>Ooh that's an intriguing idea.  Might need a multiset, to avoid the really stupid issue of two random variables not being provably different from each other.</p>",
        "id": 403083386,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700449605
    },
    {
        "content": "<p>A multiset is by definition a quotient of a list by the agreement-up-to-permutation equivalence relation <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.Perm#doc\">docs#List.Perm</a>, so if you define entropy of a list and then show it's invariant under permutation, the entropy will descend to be a function on multisets.</p>",
        "id": 403083698,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700449826
    },
    {
        "content": "<p>Let's see.  I think for multisets there are two basic lemmas needed.  One is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">{</mo><mi>X</mi><mo separator=\"true\">,</mo><msub><mi>Y</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>Y</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">]</mo><mo>=</mo><mi>H</mi><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">{</mo><mi>X</mi><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>Y</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mi>Y</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>Y</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>Y</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">H[\\{X,Y_1,\\dots,Y_n\\}] = H[\\{X+a_1Y_1+\\dots+a_nY_n,Y_1,\\dots,Y_n\\}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[{</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[{</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}]</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo>∈</mo><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">a_1,\\dots,a_n \\in {\\bf Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span></span>.  The other is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">{</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">]</mo><mo>=</mo><mi>H</mi><mo stretchy=\"false\">[</mo><mo stretchy=\"false\">{</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><msub><mi>X</mi><mn>1</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">H[\\{X_1,\\dots,X_n\\}] = H[\\{X_1,\\dots,X_n,a_1 X_1 + \\dots + a_n X_n\\}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}]</span></span></span></span> for any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo>∈</mo><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">a_1,\\dots,a_n \\in {\\bf Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span></span>.  I think in most use cases, once one can reduce to multisets one just has to apply some combination of these lemmas like two or three times at most.</p>",
        "id": 403083786,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700449907
    },
    {
        "content": "<p>By the way, is <code>H[X,X]=H[X]</code>? Because if so, I guess repeats don't matter, and it's fine to work with finsets rather than multisets?</p>",
        "id": 403084259,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700450234
    },
    {
        "content": "<p>Oh yeah, that's true. Huh.</p>",
        "id": 403084296,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700450263
    },
    {
        "content": "<p>Is there a tactic for verifying \"obvious\" multiset identities such as <code>insert A { B, C, D } = {B, C, A, D}</code> (not sure if I have the syntax right here), where <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code> are arbitrary expressions of a given type?</p>",
        "id": 403084666,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700450512
    },
    {
        "content": "<p>In my experience simp goes a long way with such things.</p>",
        "id": 403085019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700450742
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.decidableEq#doc\">docs#Finset.decidableEq</a> says that if equality is decidable in a type, then equality of finsets of that type is also decidable.</p>",
        "id": 403085160,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700450823
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n</code></pre></div>",
        "id": 403085220,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700450856
    },
    {
        "content": "<p><code>aesop</code> does a good job as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">insert</span> <span class=\"n\">a</span> <span class=\"o\">({</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">aesop</span>\n</code></pre></div>",
        "id": 403085391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700450952
    },
    {
        "content": "<p>Hmm I'm trying to figure out whether it is more work to solve twelve Rubik's cube puzzles, or to develop an overengineered notion of joint entropy of multisets of random variables that probably won't see much use outside of this project.</p>",
        "id": 403085623,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700451096
    },
    {
        "content": "<p>The former is probably faster, but the latter might be more fun?</p>",
        "id": 403085700,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700451133
    },
    {
        "content": "<p>And it's probably not right to say that it won't see much use outside the project. Certainly some of the ideas would translate to work in mathlib at some point, even if the precise definitions/theorems aren't ported over.</p>",
        "id": 403085783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700451204
    },
    {
        "content": "<p>Okay.  Here is a general theorem that would handle all the use cases we would need for unconditional entropy equalities of linear combinations of tuples of random variables.  If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X = (X_1,\\dots,X_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is a vector of random variables in some group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>r</mi></msub><mo>∈</mo><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">v_1,\\dots,v_r \\in {\\bf Z}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>w</mi><mi>s</mi></msub><mo>∈</mo><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">w_1,\\dots,w_s \\in {\\bf Z}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> are vectors that generate precisely the same subgroup of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">{\\bf Z}^n,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8805em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>r</mi></msub><mo stretchy=\"false\">⟩</mo><mo>=</mo><mo stretchy=\"false\">⟨</mo><msub><mi>w</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>w</mi><mi>s</mi></msub><mo stretchy=\"false\">⟩</mo><mo separator=\"true\">,</mo><mspace width=\"1em\"/><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> \\langle v_1,\\dots,v_r \\rangle = \\langle w_1,\\dots,w_s\\rangle, \\quad (1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">⟩</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>then</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">[</mo><msub><mi>v</mi><mn>1</mn></msub><mo>⋅</mo><mi>X</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>r</mi></msub><mo>⋅</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>H</mi><mo stretchy=\"false\">[</mo><msub><mi>w</mi><mn>1</mn></msub><mo>⋅</mo><mi>X</mi><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>w</mi><mi>s</mi></msub><mo>⋅</mo><mi>X</mi><mo stretchy=\"false\">]</mo><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\"> H[ v_1 \\cdot X, \\dots, v_r \\cdot X ] = H [w_1 \\cdot X, \\dots, w_s \\cdot X ].</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mord\">.</span></span></span></span></p>\n<p>The equality (1) is decidable (the algorithm has to do with Smith normal form, I'd have to look it up).   I could imagine the effort to code the decidablility of (1) into Lean (basically, that finitely generated subgroups of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">Z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">{\\bf Z}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> have decidable equality) could be useful for other projects.  Or maybe someone already did this already, which would be even better, then one could invoke the theorem and verify the side condition (1) by <code>decide</code> to handle every single Rubik's cube problem.</p>",
        "id": 403086663,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700451794
    },
    {
        "content": "<p>Hmm it's possible my notion of decidability may not coincide with Lean's notion.  But for specific numerical values of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>v</mi><mi>r</mi></msub><mo separator=\"true\">,</mo><msub><mi>w</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>w</mi><mi>s</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_1,\\dots,v_r,w_1,\\dots,w_s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> there is certainly an algorithm to verify or disprove (1) that should also be able to generate a Lean certificate in either case.</p>",
        "id": 403086963,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700451982
    },
    {
        "content": "<p>For our specific application, there is also a sort of \"Schroder-Bernstein\" way to proceed.  If one wants to show that <code>H[X] = H[Y]</code>, it's enough to find functions<code>f, g</code> such that <code>X = f(Y)</code> and <code>Y = g(X)</code>, as this shows that <code>H[X} \\leq H[Y]</code> and <code>H[Y] \\leq H[X]</code>.  Here we don't directly have to verify any injectivity hypotheses on <code>f</code> and <code>g</code>.  That's a fairly easy lemma to formally prove (especially since Remy already kindly provided the data processing inequality <code>H[f(X)] \\leq H[X]</code>), and to use it one just has to explicitly write down transformations <code>f</code> and <code>g</code> and the identities <code>X = f(Y)</code> and <code>Y = g(X)</code> will basically follow from <code>congr</code> and <code>abel</code>.  That's probably good enough for the current project.</p>",
        "id": 403088157,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700452876
    },
    {
        "content": "<p>e.g. to show <code>H[X-Z, Y, X-Y] = H[X,Y,Z]</code> one would apply this \"entropy Schroder-Bernstein\" lemma with <code>f = fun ( x, y, z ) ↦ (z-x, y, x-y)</code> and <code>g = fun (a, b, c) ↦ (b+c, b, b+c-a)</code>, since <code>(X-Z, Y, X-Y) = f (X, Y, Z)</code> and <code>(X, Y, Z) = g (X-Z, Y, X-Y)</code> then is immediate from <code>congr</code> and <code>abel</code> I think.</p>",
        "id": 403088886,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700453262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/.40simp.20lemmas.20for.20entropy.20of.20sums.3F/near/403071057\">said</a>:</p>\n<blockquote>\n<p>I think this is just not going to work: to a first approximation, <code>simp</code> can't use lemmas which require side conditions.</p>\n</blockquote>\n<p>Sorry, but this is plain wrong? If you give <code>simp</code> the lemma <code>a → b = c</code> and the assumption <code>h : a</code>, then it will rewrite <code>b</code> to <code>c</code>.</p>",
        "id": 403116840,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700468221
    },
    {
        "content": "<p>If I were you, I would define <code>iEntropy {ι : Type*} (s : Finset ι) (X : Π i, Ω i → ℝ) : ℝ</code>, or maybe <code>iEntropy {ι : Type*} (s : Finset ι) (X : ι → Ω → ℝ) : ℝ</code>.</p>",
        "id": 403118552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700468853
    },
    {
        "content": "<p>And indeed, we can mark lemmas as <code>@[simp]</code> that are not of the form <code>X = Y</code>, and <code>simp</code> will use them to discharge side conditions (even recursively).</p>",
        "id": 403120590,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700469631
    },
    {
        "content": "<p>I did say \"to first approximation\".  The <code>simp</code> logic to fill side conditions is pretty flaky:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.MeasureSpace</span>\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">measure_union</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Disjoint</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSet</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">∪</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">measure_union</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 403226163,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1700505959
    },
    {
        "content": "<p><code>simp only ...</code> does work in the second example. I would say that's unexpected behavior.</p>",
        "id": 403229089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700507077
    },
    {
        "content": "<p>(that = the fact that <code>simp ...</code> fails with no progress made, but <code>simp only ...</code> solves the goal)</p>",
        "id": 403229279,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700507177
    },
    {
        "content": "<p>Ah sorry, I thought you meant that \"it doesn't work to first approximation\", not that\"simp doesn't use side conditions to first approximation\".</p>",
        "id": 403243680,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700513530
    }
]