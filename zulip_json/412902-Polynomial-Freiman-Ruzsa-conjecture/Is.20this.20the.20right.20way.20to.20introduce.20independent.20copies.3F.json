[
    {
        "content": "<p>In <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#a0000000014\">https://teorth.github.io/pfr/blueprint/sect0006.html#a0000000014</a> we will need the following construction: starting with two random variables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_1,X_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (on different probability spaces), create four independent variables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>X</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><msubsup><mi>X</mi><mn>2</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><msubsup><mi>X</mi><mn>1</mn><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msubsup><mo separator=\"true\">,</mo><msubsup><mi>X</mi><mn>2</mn><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msubsup></mrow><annotation encoding=\"application/x-tex\"> X&#x27;_1, X&#x27;_2, X&#x27;&#x27;_1, X&#x27;&#x27;_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>X</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">X_1,X_2,X_1,X_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> respectively on the same space.  There are also a number of places elsewhere where we will generate two independent copies of two variables, or three independent copies of three variables.</p>\n<p>I was trying to think about the general procedure for creating independent copies of some finite number of variables and came up with this beast of a statement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">independent_copies'</span> <span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">Ω</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">List.TProd</span> <span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">ν</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">X'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">List.TProd</span> <span class=\"n\">S</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">iIndepFun</span> <span class=\"n\">mS</span> <span class=\"n\">X'</span> <span class=\"n\">ν</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">IdentDistrib</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">ν</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(The <code>Measurable</code> conclusions are perhaps redundant, being almost covered by the <code>IdentDistrib</code> hypothesis, except that that hypothesis only gives almost everywhere measurability.)</p>\n<p>II am wondering if I am overthinking this and there is some simpler way to create four independent copies of some random variables.  For creating copies of just two random variables, the situation is a little bit better but still rather cumbersome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">independent_copies</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω'</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hY</span><span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ'</span><span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">X'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">Y'</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n  <span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">ν</span> <span class=\"bp\">∧</span> <span class=\"n\">Measurable</span> <span class=\"n\">X'</span> <span class=\"bp\">∧</span> <span class=\"n\">Measurable</span> <span class=\"n\">Y'</span>\n  <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">IndepFun</span> <span class=\"n\">X'</span> <span class=\"n\">Y'</span> <span class=\"n\">ν</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">IdentDistrib</span> <span class=\"n\">X'</span> <span class=\"n\">X</span> <span class=\"n\">ν</span> <span class=\"n\">μ</span> <span class=\"bp\">∧</span> <span class=\"n\">IdentDistrib</span> <span class=\"n\">Y'</span> <span class=\"n\">Y</span> <span class=\"n\">ν</span> <span class=\"n\">μ'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In this latter case one can also explicitly describe <code>\\nu</code> as  <code>(μ.map X).prod (μ'.map Y)</code> and <code>X'</code>, <code>Y'</code> as <code>fun x ↦ x.1</code> and <code>fun x ↦ x.2</code> respectively.  If there was a similarly compact way to describe four independent copies then perhaps the first big lemma could be broken up into more manageable looking pieces.</p>",
        "id": 402824149,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700277842
    },
    {
        "content": "<p>I think your approach is good. I started doing the 4 variables case by hand, and it was really cumbersome. A more general statement like the one you give will probably be nicer to prove. I would probably hide the implementation detail that the space we get is <code>List.TProd</code>, though, with something like that: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">independent_copies'</span> <span class=\"o\">{</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">mS</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n    <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"bp\">Ω</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">mA</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μA</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">μA</span> <span class=\"bp\">∧</span>\n    <span class=\"o\">(</span><span class=\"n\">iIndepFun</span> <span class=\"n\">mS</span> <span class=\"n\">X'</span> <span class=\"n\">μA</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">IdentDistrib</span> <span class=\"o\">(</span><span class=\"n\">X'</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">μA</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When trying to use this in the concrete situation of four random variables, I stumbled on a notational issue, though. When <code>A, B, C, D</code> have the same type, we have the notation <code>![A, B, C, D]</code> to form the function from <code>Fin 4 = {0, 1, 2, 3}</code> mapping <code>0</code> to <code>A</code> and <code>1</code> to <code>B</code> and so on. So, when applying the lemma, we can use <code>![Ω, Ω, Ω', Ω']</code> to say which space we want to use on each coordinate. However, we can <em>not</em> use <code>![X, X, X', X']</code> to write which variables we want to copy, because these don't have the same type (the first two have type <code>Ω → G</code>, the other ones <code>Ω' → G</code>). It's certainly just a matter of setting up the right notation.</p>",
        "id": 402847342,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1700294398
    },
    {
        "content": "<p>Why not first state this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">pre_exindep</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MeasurableSpace</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Measure</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"bp\">Ω'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"bp\">Ω'</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω'</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ν</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω'</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">Ω'</span> <span class=\"bp\">→</span> <span class=\"bp\">Ω</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">IsProbabilityMeasure</span> <span class=\"n\">ν</span> <span class=\"bp\">∧</span> <span class=\"n\">iIndepFun</span> <span class=\"n\">m</span><span class=\"bp\">Ω</span> <span class=\"n\">X</span> <span class=\"n\">ν</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">Measurable</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">ν.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">μ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and then instantiate it where the <code>μ i</code> are the laws of the <code>X i</code>?</p>",
        "id": 402857875,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1700301656
    },
    {
        "content": "<p>Yes, that's one of the workarounds I had in mind. There is a tension that things look easier to formalize by using measures (i.e., the distribution of the random variables instead of the random variables themselves), but the intuition is much better in terms of random variables, and the conditioning is also much more natural to phrase with random variables. </p>\n<p>For another example, I'm formalizing the existence of a minimizer for the tau functional (whatever that is), and in the end you want to get a random variable with a minimizing distribution, but the proof is naturally done in the space of probability measures on <code>G</code>.</p>",
        "id": 402861058,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1700303711
    },
    {
        "content": "<p>This is very far from my area, but I do wonder if we can make Lean keep track of taking products of the sample spaces? I know that the infrastructure for this project has already been set up, so this isn't a suggestion, but more a curiosity -- what do people think about the following approach? It lets you write <code>x + y</code> for random variables <code>x</code> and <code>y</code>, and automatically takes the product of the sample spaces (modulo some sorries): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ProbCat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:</span> <span class=\"n\">MeasCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"n\">vol</span> <span class=\"o\">:</span> <span class=\"n\">ProbabilityMeasure</span> <span class=\"n\">carrier</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RV</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">ProbCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Ω.</span><span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MeasCat.prod</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">MeasCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">MeasCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ProbCat.prod</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">ProbCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">ProbCat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">where</span>\n  <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">X.carrier.prod</span> <span class=\"n\">Y.carrier</span>\n  <span class=\"n\">vol</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Measure.prod</span> <span class=\"n\">X.vol.val</span> <span class=\"n\">Y.vol.val</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableAdd₂</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">RV</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"bp\">Ω</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"bp\">Ω'</span><span class=\"o\">,</span> <span class=\"n\">f'</span><span class=\"o\">,</span><span class=\"n\">hf'</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"bp\">Ω.</span><span class=\"n\">prod</span> <span class=\"bp\">Ω'</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f'</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableAdd₂</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">RV</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.Ω</span> <span class=\"bp\">=</span> <span class=\"n\">x.</span><span class=\"bp\">Ω.</span><span class=\"n\">prod</span> <span class=\"n\">y.</span><span class=\"bp\">Ω</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableAdd₂</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">RV</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">x.</span><span class=\"bp\">Ω.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">y.</span><span class=\"bp\">Ω.</span><span class=\"n\">carrier</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x.f</span> <span class=\"n\">u</span> <span class=\"bp\">+</span> <span class=\"n\">y.f</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 402885326,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700320741
    },
    {
        "content": "<p>I would guess that the most common situation would be to have RVs defined on the same probability space and we would like to add them the usual way as functions (so <code>x + y</code> would also be defined on the same space), which I'm not sure is compatible with your suggestion. But perhaps a related option would be to define the \"independent pair\" of RVs with bundled probability space (and then compose with addition or multiplication or whatever if needed).</p>\n<p>In general I do not believe that bundling the probability space would fit the usual mathematical way that probability is done. It's true that we usually don't make it explicit, but it is still there :-)</p>",
        "id": 402887497,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1700322050
    },
    {
        "content": "<p>Again, I’m not at all a probability theorist :) but I was under the impression that talking explicitly about a sample space of a random variable is as “evil” as talking about equality of objects in a category. Is that not the case?</p>",
        "id": 402888127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700322574
    },
    {
        "content": "<p>In any case, bundling would at lease solve the issue raised by Sebastien about matrix notation.</p>",
        "id": 402888486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700322891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Is.20this.20the.20right.20way.20to.20introduce.20independent.20copies.3F/near/402847342\">said</a>:</p>\n<blockquote>\n<p>I think your approach is good. I started doing the 4 variables case by hand, and it was really cumbersome. A more general statement like the one you give will probably be nicer to prove. I would probably hide the implementation detail that the space we get is <code>List.TProd</code>, though, with something like that: </p>\n</blockquote>\n<p>OK, thanks.  I had initially tried this but couldn't figure out what type to assign to <code>A</code> without explicitly constructing it, but with the universes made explicit it works.  (Amusing to me, though, that such a concrete piece of mathematics requires just a little bit of awareness about universes.)</p>\n<blockquote>\n<p>When trying to use this in the concrete situation of four random variables, I stumbled on a notational issue, though. When <code>A, B, C, D</code> have the same type, we have the notation <code>![A, B, C, D]</code> to form the function from <code>Fin 4 = {0, 1, 2, 3}</code> mapping <code>0</code> to <code>A</code> and <code>1</code> to <code>B</code> and so on. So, when applying the lemma, we can use <code>![Ω, Ω, Ω', Ω']</code> to say which space we want to use on each coordinate. However, we can <em>not</em> use <code>![X, X, X', X']</code> to write which variables we want to copy, because these don't have the same type (the first two have type <code>Ω → G</code>, the other ones <code>Ω' → G</code>). It's certainly just a matter of setting up the right notation.</p>\n</blockquote>\n<p>Well, in this specific project we only ever take copies of at most four variables, so we could just set up a few helper lemmas to use <code>independent_copies'</code> in a way that hides all the notational issues, hopefully.</p>",
        "id": 402895998,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700328211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Is.20this.20the.20right.20way.20to.20introduce.20independent.20copies.3F/near/402888127\">said</a>:</p>\n<blockquote>\n<p>Again, I’m not at all a probability theorist :) but I was under the impression that talking explicitly about a sample space of a random variable is as “evil” as talking about equality of objects in a category. Is that not the case?</p>\n</blockquote>\n<p>Yeah, I think so.  The way I like to think of it (outside of Lean) is that in probability theory that there are one or more ambient probability spaces in play at a given time, with each random variable being studied attached to one of these spaces.  (Some notions between random variables, such as independence, only make sense if they are attached to the same space; other notions, such as identical distribution or convergence in distribution, make sense even if they are attached to different spaces.)  However, these spaces should be viewed as \"dynamic\" or \"fluid\"; at any given time, one has the right to \"flip some more coins\" and replace any one of the probability spaces with an extension of that space, with all random variables that were attached to the previous space, now attached to the extension.  All probability theory concepts are designed to be invariant under this \"base change\" operation: for instance, if the original random variable <code>X</code> had an expectation <code>E[X]</code>, this expectation would remain unchanged under such an extension operation.  The main reason one would perform such an extension is to introduce new random variables that were independent of the preceding ones.  With this setup it becomes possible to not refer to the underlying probability spaces at all, with the understanding that they are automatically being managed by the ambient context.</p>\n<p>(I had some thoughts about actually setting up a filter on the category of probability spaces (where the morphisms are extension maps) and defining a random variable to be something like a \"pro-functor\" on this category (defined on certain probability spaces and their extensions, but not on all probability spaces), to try to capture this picture formally, but I've never quite figured out exactly how to do it properly.)</p>\n<p>In this project we aren't taking this approach (I imagine it would generate way too much \"dependent type hell\" in Lean) but an intermediate approach in which every time one needs to introduce some variables that are independent of each other and have the distribution of some existing random variables, we use a product space construction to create independent copies of those random variables, and then work with that space going forward.    I was persuaded to not try to introduce custom structures to explicitly attach the probability spaces to the random variables, but keep everything deconstructed into existing Mathlib classes and just record the probability spaces and measures in the statements of the lemmas.  This makes the statements a little longer than they would in Mathematical English probability, where one would indeed hide the probability space as much as possible, but I think it is a tolerable compromise.</p>",
        "id": 402897004,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700328889
    },
    {
        "content": "<p>Thanks! In general I think there are a number of people here (myself included) who are very interested in figuring out how to formalize things in a way that’s as close as possible to the way humans usually do mathematics, not just in probability theory but also in sheaf/topos theory, condensed mathematics, etc. It would be nice to keep this discussion going but I don’t want to distract too much from this project so I’ll post something in another stream.</p>",
        "id": 402900626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700331573
    },
    {
        "content": "<p>I think we should be able to switch from <code>[MeasurableSpace]</code> to <code>[MeasureSpace]</code> in most statements, thereby hiding the measure from the notation and making them much closer to the paper notation. I'll experiment on this later.</p>",
        "id": 402906442,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1700335656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Is.20this.20the.20right.20way.20to.20introduce.20independent.20copies.3F/near/402906442\">said</a>:</p>\n<blockquote>\n<p>I think we should be able to switch from <code>[MeasurableSpace]</code> to <code>[MeasureSpace]</code> in most statements, thereby hiding the measure from the notation and making them much closer to the paper notation. I'll experiment on this later.</p>\n</blockquote>\n<p>Yes, Remy did some proof of concept demonstrations of this in entropy_basic.lean using <code>:= by volume_tac</code> to hide the measure in case one had a <code>MeasureSpace</code> instance.  It should be doable, and perhaps worth switching to if the notation becomes too cluttered.</p>",
        "id": 402907096,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700336119
    }
]