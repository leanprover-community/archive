[
    {
        "content": "<p>Yael has set up a skeletal Blueprint for the project at <a href=\"https://teorth.github.io/pfr/blueprint/\">https://teorth.github.io/pfr/blueprint/</a> as well as autodocumentation of the Lean methods in <a href=\"https://teorth.github.io/pfr/docs/\">https://teorth.github.io/pfr/docs/</a> .  I'll work on filling out the blueprint with lemmas and definitions that need to be filled in.  It should be possible very soon to have doable tasks regarding Shannon entropy and jensen's inequality; I'm still figuring out how to implement conditioning a probability space to an event, but once that is done, most of the steps should be at least statable in Lean, if not provable.  More soon.</p>",
        "id": 402134453,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700021011
    },
    {
        "content": "<p>Thanks to Yael's tireless efforts, a partial blueprint is now available at <a href=\"https://teorth.github.io/pfr/blueprint/\">https://teorth.github.io/pfr/blueprint/</a> , with an impressively complex looking dependency graph already at <a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">https://teorth.github.io/pfr/blueprint/dep_graph_document.html</a></p>\n<p>Right now it mostly focuses on the Appendix A material (Shannon entropy and Ruzsa distance), but I plan to work today to fill in skeletal versions of the rest of the paper, and to create stub Lean files and stub theorems/definitions to connect more tightly with the blueprint. </p>\n<p><del>There is at least one task that could already be done independently of the rest of the project: stating and proving the Ruzsa covering lemma (currently a stub at ruzsa_covering.lean). </del> (This lemma is already on Mathlib)</p>\n<p>Most of the rest of the project will require using the Ruzsa distance (currently defined as a stub at ruzsa_distance.lean), however it may be possible to start formalizing some parts of the argument without actually having a working definition of Ruzsa distance, by introducing a bunch of stub lemmas about the distance.</p>\n<p>One portion of the paper that could be relatively easy to formalize is Appendix B.  This is where the PFR conjecture is derived (in about a page of argument) from the entropic formulation of the PFR conjecture.  The main tasks needed are</p>\n<ol>\n<li>\n<p>To formalize the statement (if not the proof) of the entropic PFR conjecture (currently a stub in entropy_pfr.lean)<br>\n2.<del>Formalizing the statement of the aforementioned Ruzsa covering lemma</del> (This is already on Mathlib)</p>\n</li>\n<li>\n<p>Formalizing a few simple lemmas about entropy.</p>\n</li>\n</ol>\n<p>Perhaps we could focus on this portion of the proof first in order to get some practice with workflow.  If anyone here has prior experience with working with a collaborative formalization project, any advice here would be welcome.</p>",
        "id": 402324944,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700081273
    },
    {
        "content": "<p>In my experience, the best thing you can do to encourage collaboration is what you are already doing: writing the blueprint and stating lemmas. Then people can fill in proofs. Of course this is not a 100% reliable process. You are bound to do small mistakes in the statements (either stating slightly wrong lemmas or correct lemmas that are not exactly what you need), but this can be fixed later.</p>",
        "id": 402328440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700082649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Blueprint.20is.20starting!/near/402328440\">said</a>:</p>\n<blockquote>\n<p>In my experience, the best thing you can do to encourage collaboration is what you are already doing: writing the blueprint and stating lemmas. Then people can fill in proofs. Of course this is not a 100% reliable process. You are bound to do small mistakes in the statements (either stating slightly wrong lemmas or correct lemmas that are not exactly what you need), but this can be fixed later.</p>\n</blockquote>\n<p>OK.  I am seeing that I can add a lot of entropy lemmas as \"sorries\" to be filled in to entropy_basic.lean, which thanks to Remy is already in quite good shape.  I will do that over the next few hours, already there are about four or five lemmas with sorries that people are welcome to take a crack at (I guess via pull requests would be the best option here).</p>",
        "id": 402328964,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700082854
    },
    {
        "content": "<p>I suppose to avoid redundancy people should announce somewhere in this stream if they are working on anything in particular?  Right now I am focusing on converting lemmas in the blueprint into stubs in the lean files (and by stubs, I really mean stubs: basically only the lemma name and description is present).</p>",
        "id": 402329103,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700082919
    },
    {
        "content": "<p>I am going through the blueprint right now to reference lemmas that are already in mathlib.</p>",
        "id": 402330437,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700083469
    },
    {
        "content": "<p>Also thanks to <span class=\"user-mention\" data-user-id=\"492774\">@Sky Wilshaw</span> for squashing the bugs I couldn't squash myself.</p>",
        "id": 402330560,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700083516
    },
    {
        "content": "<p>Yes, it is important that people announce on Zulip that they want to work on something. They can create new topics in this stream.</p>",
        "id": 402330933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700083654
    },
    {
        "content": "<p>what is the preferred contribution mechanism? PRs from github forks of the repo or commits to non-master branches (since that was used in mathlib for some reason)?</p>",
        "id": 402331664,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700083980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Blueprint.20is.20starting!/near/402331664\">said</a>:</p>\n<blockquote>\n<p>what is the preferred contribution mechanism? PRs from github forks of the repo or commits to non-master branches (since that was used in mathlib for some reason)?</p>\n</blockquote>\n<p>I don't know enough about github to express a preference, as long as it finds a way to the master repository eventually I'm happy.  I imagine that it might depend on whether one is planning to do only a small localized contribution or to work on a large chunk of the files at a time?</p>\n<p>By the way, I have finished adding stubs in entropy_basic.lean and tied them into blueprint (though it may take a while for this to propagate to the online version of the blueprint).  So one set of tasks that are quite actionable right now would be to fill in the sorries (in the definitions, statements, and proofs) of the various stubs present.  I'll take a break for now, and later work on adding new sections of the blueprint to cover the main proof (Sections 2-7, basically).</p>",
        "id": 402332647,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700084425
    },
    {
        "content": "<p>I think it depends on the CI setup.</p>",
        "id": 402332799,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700084489
    },
    {
        "content": "<p>Roughly, the stuff that automatically checks that all the i's are dotted and t's are crossed before merging commits.</p>",
        "id": 402332961,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700084565
    },
    {
        "content": "<p>I am doing that just now.</p>",
        "id": 402333124,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700084638
    },
    {
        "content": "<p>There's CI for both commits and PRs, so that won't be the discriminating factor.</p>",
        "id": 402333204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700084660
    },
    {
        "content": "<p>The fact that Mathlib uses PR from branches of the main repo is a very unusual setup that comes only from our olean cache mechanism (the thing you use with <code>lake exe cache get</code>). There is no reason to do that unless the project becomes so huge that you need a way to distribute a precompiled version using the <code>lake exe cache get</code> mechanism.</p>",
        "id": 402333531,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700084798
    },
    {
        "content": "<p>It is really great to see how fast this project is moving. The dependency graph indeed looks impressive.<br>\nOne silly suggestion by an enthusiastic bystander: There are many outgoing edges from <code>entropy-def</code> and <code>ruz-dist-def</code>. It might be helpful to apply a bit of transitive reduction to the graph, so that it will look less cluttered, and become easier to grok.</p>",
        "id": 402428821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700128679
    },
    {
        "content": "<p>I was thinking this as well. I was going to message Terence with two remarks but let me put them here:</p>\n<ul>\n<li>A blueprint is useful when there aren't too many items. We may want to not make one blueprint item per theorem/lemma if the results are easy. Typically, I think we could state the mutual information inequalities as corollaries of the corresponding entropy ones. </li>\n<li>The labels should be quite meaningful since it's the first way someone will interact with the blueprint.</li>\n</ul>",
        "id": 402437343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700130993
    },
    {
        "content": "<p>I have a few ideas how to improve the blueprint from the software point of view:</p>\n<ol>\n<li>We should automatically eliminate transitive edges (and maybe throw a warning). We need to be careful so as to what counts as transitive, since there are two types of edges.</li>\n<li>We should throw a warning when a theorem is marked as proved but not stated (this will disappear if we use better macros.</li>\n<li>We should record what part of the blueprint an item is coming from, either manually by user input in the macros or by looking at the section numper (could make that a default behavior). This will help scale the blueprint because we could then allow several filtered views of the online blueprint.</li>\n</ol>",
        "id": 402437587,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700131075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>, how does that fit with your plans? (and how long will it take until I can play with your documentation things?)</p>",
        "id": 402437850,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700131154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Blueprint.20is.20starting!/near/402437343\">said</a>:</p>\n<blockquote>\n<p>I was thinking this as well. I was going to message Terence with two remarks but let me put them here:</p>\n<ul>\n<li>A blueprint is useful when there aren't too many items. We may want to not make one blueprint item per theorem/lemma if the results are easy. Typically, I think we could state the mutual information inequalities as corollaries of the corresponding entropy ones. </li>\n<li>The labels should be quite meaningful since it's the first way someone will interact with the blueprint.</li>\n</ul>\n</blockquote>\n<p>I agree.  To be honest I've been spending almost all my time dumping content into the blueprint, and have put almost zero effort into making it presentable or cleaning it up.  In particular I have no particular attachment to the labels or the Lean method names, these were placeholders that I threw together quickly in order to proceed with the mathematical content.  </p>\n<p>I had assumed that transitive reduction was already taking place so I tried to be maximalist with what definitions were needed to formulate results.  But I have a question: a number of results whose statement requires only definition X, but whose proof requires lemma Y that use definition X.    In such cases should I still put <code>\\uses{X}</code> in the statement, even if the proof will have <code>uses{Y}</code> and thus, by transitivity, <code>uses{X}</code>?  I ask because in the intermediate stage in which the lemma is stated but not proved, it only needs <code>X</code>, but I am not sure whether the dependency graph relies on both the \\uses statements in the statement, or in both the statement and the proof.</p>\n<p>I had similarly taken a maximalist approach to stating all the lemmas used, even the trivial corollaries, in the blueprint, but again I am not attached to this practice.  Is it possible to tie multiple lean lemmas to one blueprint lemma?  In that case I could concatenate several closely related statements into one blueprint lemma while still keeping all the lean lemmas separate.  For instance a blueprint lemma might say \"If hypothesis H is true, the conclusions C1, C2, and C3 are true\" which would be linked to three lean lemmas <code>H_implies_C1</code>, <code>H_implies_C2</code>, <code>H_implies_C3</code>.</p>\n<p>I guess the broader philosophical question is where the blueprint stands on the spectrum between the human-readable proof and the Lean-compiling proof.  I had assumed it was closer to the latter than the former so I tried to make it be roughly in one-to-one correspondence with the Lean code, but if something more intermediate is desirable, I can certainly work towards that instead.</p>",
        "id": 402501895,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700150063
    },
    {
        "content": "<p>I could work on the graph infrastructure to do transitive reduction if needed (I wrote the Lean blueprint tool). You can already attach multiple Lean declaration to a single LaTeX statement. See an example <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/blueprint/src/loops.tex#L15\">here</a>.</p>",
        "id": 402502594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700150294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Blueprint.20is.20starting!/near/402502594\">said</a>:</p>\n<blockquote>\n<p>I could work on the graph infrastructure to do transitive reduction if needed (I wrote the Lean blueprint tool). You can already attach multiple Lean declaration to a single LaTeX statement. See an example <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/blueprint/src/loops.tex#L15\">here</a>.</p>\n</blockquote>\n<p>OK, good to know.  Once I finish dumping in all the mathematical content into the blueprint (there's just one section of the paper to go, namely the \"Endgame\"), and also get the blueprint to compile (I've been having significant technical issues with that, but that's another story), I can try to streamline the blueprint by concatenating closely related results into single lemmas, and maybe demoting some trivial observations to remarks (and moving their links to lean methods to some other logical location).</p>",
        "id": 402503143,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700150442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Blueprint.20is.20starting!/near/402501895\">said</a>:</p>\n<blockquote>\n<p>To be honest I've been spending almost all my time dumping content into the blueprint, and have put almost zero effort into making it presentable or cleaning it up.</p>\n</blockquote>\n<p>I think you should continue like that. The software has to get smarter, rather than the human working harder.</p>",
        "id": 402503876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700150614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Blueprint.20is.20starting!/near/402437850\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span>, how does that fit with your plans? (and how long will it take until I can play with your documentation things?)</p>\n</blockquote>\n<p>As far as concrete features in the blueprint system go, my goal is to make it easy for you to build them, rather than to build them myself - that way, different users with different needs can all be well-served. If you'd like to set up a call to go over details and make sure everything important is on my radar, then let's do so!</p>\n<p>I hope to have a release ready for people to play with and test by the end of the year, but I expect large improvements early next year too.</p>",
        "id": 402642744,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1700210948
    },
    {
        "content": "<p>Has the graph at <a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">https://teorth.github.io/pfr/blueprint/dep_graph_document.html</a> gone missing for everyone or just me?</p>",
        "id": 402866991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1700306677
    },
    {
        "content": "<p>Missing for me.</p>",
        "id": 402867105,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700306760
    },
    {
        "content": "<p>Uh oh. Let me see.</p>",
        "id": 402868988,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700307995
    },
    {
        "content": "<p>There's a bad interaction between the HTML and one of the item names in the blueprint. A missing <code>)</code> bracket, but I can't see it yet.</p>",
        "id": 402869598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700308524
    },
    {
        "content": "<p>The troublesome item name is <code>uniform-entropy'</code> (the single quote in particular).</p>",
        "id": 402871479,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700309791
    },
    {
        "content": "<p>I don't have a local copy of blueprint and so can't diagnose the problem, but for now I just replaced <code>uniform-entropy'</code> with <code>uniform-entropy-II</code> throughout and hopefully we at least get the blueprint built again while we wait for a proper explanation of what is going on.  [EDIT: I see the graph again!]</p>",
        "id": 402897410,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700329203
    },
    {
        "content": "<p>The issue is with the dot graph source string. In dot, double quotes <code>\"</code> are used, but when it's emitted to JavaScript by Python, it's a single quote <code>'</code> string in JS, unescaped,  causing the parse error in JS. I tried a naive fix to replace all <code>'</code> to <code>\\'</code> but it didn't work, so I pushed a fix <a href=\"https://github.com/utensil/leanblueprint/pull/3\">here</a> using backtick quote string which doesn't interfere with both <code>\"</code> in dot and <code>'</code> in theorem name.</p>",
        "id": 403094488,
        "sender_full_name": "Utensil Song",
        "timestamp": 1700456834
    },
    {
        "content": "<p>I just added instructions to <a href=\"https://github.com/teorth/pfr/blob/master/README.md\">the README</a> to build the blueprint locally. Please tell me if they don't work for you!</p>",
        "id": 403118238,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700468735
    },
    {
        "content": "<p><a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">https://teorth.github.io/pfr/blueprint/dep_graph_document.html</a> suggests that the project is ~50% done. Is that a reasonable guesstimate?</p>",
        "id": 403215667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1700501706
    },
    {
        "content": "<p>The blueprint is a bit inflated towards the start by the fact that every entropy lemma is its own item.</p>",
        "id": 403216439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700502019
    },
    {
        "content": "<p>On the other hand, many of the later theorems are basically proven by applying a sequence of a half-dozen entropy lemmas and doing some basic algebra.  Modulo technical issues (e.g. right now I am struggling slightly to get from joint independence of three variables to pairwise independence of any two of them, the issue being techical due to manipulation of a vector type) I could imagine the latter part being rather straightforward and also quite crowdsourceable, though the low-level implementation details may well be a stumbling block.</p>",
        "id": 403216900,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700502220
    }
]