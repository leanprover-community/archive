[
    {
        "content": "<p>I am not very convinced that <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#copy-def\">Copy</a> deserves a new definition: we already have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.Measure.map#doc\">docs#MeasureTheory.Measure.map</a>, which gives the law of a random variable (and more general push-forwards of measures). Maybe the only thing I'd consider is using <code>:= by volume_tac</code> for the <code>Measure</code>-argument of <code>Measure.map</code>, so that one can omit referring to it if one prefers to have <code>volume</code> as the canonical (probability) measure on the sample space.</p>\n<p>Specifically, does \"Copy\" need to do anything besides the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Measure.MeasureSpace</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IsCopy</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"bp\">Ω₁</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"bp\">Ω₂</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">μ₁</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω₁</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ₂</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">μ₁.map</span> <span class=\"n\">X₁</span> <span class=\"bp\">=</span> <span class=\"n\">μ₂.map</span> <span class=\"n\">X₂</span>\n\n\n<span class=\"kn\">section</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"bp\">Ω₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasureSpace</span> <span class=\"bp\">Ω₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"o\">:</span> <span class=\"bp\">Ω₁</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"bp\">Ω₂</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">IsCopy</span> <span class=\"n\">X₁</span> <span class=\"n\">X₂</span> <span class=\"c1\">-- IsCopy X₁ X₂ : Prop</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>",
        "id": 402472771,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700142229
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.IdentDistrib#doc\">docs#ProbabilityTheory.IdentDistrib</a> which does otherwise the same thing, but it further packages a.e.-measurability properties of the random variables.</p>",
        "id": 402472904,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700142256
    },
    {
        "content": "<p>Indeed, <code>IsCopy</code> does not look very useful as a new definition, given that we already have <code>IdentDistrib</code>. What might be more useful though is a definition <code>copy X</code>, which returns a new random variable with same law as <code>X</code>, independent of <code>X</code> (and of other things passed as parameters? I am not sure and need to look at the paper to see why copy exists).</p>",
        "id": 402473454,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700142437
    },
    {
        "content": "<p>I'd tend to think that that construction is just defining binary products of probability spaces and the component maps from them. But maybe I have to understand the use cases better, too.</p>",
        "id": 402474097,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700142637
    },
    {
        "content": "<p>looks like copy is defined in order to get 3.8 here: <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#ruz-dist-def\">https://teorth.github.io/pfr/blueprint/sect0003.html#ruz-dist-def</a></p>",
        "id": 402474432,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700142737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Copy.20.2F.20identically.20distributed/near/402474432\">said</a>:</p>\n<blockquote>\n<p>looks like copy is defined in order to get 3.8 here: <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#ruz-dist-def\">https://teorth.github.io/pfr/blueprint/sect0003.html#ruz-dist-def</a></p>\n</blockquote>\n<p>Yeah, the main thing is to have a method (<a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#independent-exist\">https://teorth.github.io/pfr/blueprint/sect0003.html#independent-exist</a>) that starts with <code>k</code> random variables <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\"> X_1,\\dots,X_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> defined on various probability spaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Ω</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">Ω</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Omega_1,\\dots,\\Omega_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and return <code>k</code> copies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>X</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>X</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\"> X&#x27;_1,\\dots,X&#x27;_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.035em;vertical-align:-0.2831em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4169em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831em;\"><span></span></span></span></span></span></span></span></span></span>  all defined on a single space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span> which are in addition jointly independent.  The canonical choice would be to take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Ω</span></span></span></span> to be the product of the probability distribution spaces of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>X</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">X_1,\\dots,X_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>X</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>X</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">X&#x27;_1,\\dots,X&#x27;_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.035em;vertical-align:-0.2831em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4519em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-2.4169em;margin-left:-0.0785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831em;\"><span></span></span></span></span></span></span></span></span></span> the coordinate maps.  This construction is key to defining Ruzsa distance, and in the main argument we also require some additional copies of existing variables (and to prove the entropic Balog-Szemeredi-Gowers lemma <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg</a> we also need a more general conditional copy construction, <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-indep-exist\">https://teorth.github.io/pfr/blueprint/sect0003.html#cond-indep-exist</a>). The precise choice of copy constructed is not important, but I guess in order to make the definition of Ruzsa distance well defined (or to avoid using <code>Classical.Choice</code>) we would like to have a canonical construction, and the above choice seems to be the natural one to use.</p>\n<p>But \"isCopy\" is, indeed, just a synonym for <code>μ₁.map X₁ = μ₂.map X₂</code> and we could just use that instead and delete it from the blueprint (or just add an informal sentence saying what we mean by a \"copy\" of a random variable.  I don't know whether it is preferable to introduce lots of trivial wrappers like <code>isCopy X₁ X₂</code> for frequently used concepts like this, or to unfold all such wrappers into existing Mathlib routines to use <code>μ₁.map X₁ = μ₂.map X₂</code> instead.  Happy to defer to whatever is common practice already.</p>",
        "id": 402504893,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700150844
    },
    {
        "content": "<p>The Ruzsa distance is just this, no?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Ruzsa distance `dist X Y` between two random variables is defined as</span>\n<span class=\"sd\">$H[X'-Y'] - H[X']/2 - H[Y']/2$, where $X',Y'$ are independent copies of $X, Y$. -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω'</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">μ'</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.2</span> <span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">μ'.map</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Y</span> <span class=\"bp\">;</span> <span class=\"n\">μ'</span><span class=\"o\">]</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>I'm not writing this to say that copying random variables is not useful in general though. I can also imagine that this measure based definition might not scale when conditioning, etc.</p>",
        "id": 402510167,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1700152408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Copy.20.2F.20identically.20distributed/near/402510167\">said</a>:</p>\n<blockquote>\n<p>The Ruzsa distance is just this, no?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Ruzsa distance `dist X Y` between two random variables is defined as</span>\n<span class=\"sd\">$H[X'-Y'] - H[X']/2 - H[Y']/2$, where $X',Y'$ are independent copies of $X, Y$. -/</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">dist</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω'</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.2</span> <span class=\"bp\">;</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">μ'.map</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Y</span> <span class=\"bp\">;</span> <span class=\"n\">μ'</span><span class=\"o\">]</span><span class=\"bp\">/</span><span class=\"mi\">2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Actually the proof of the triangle inequality is a good test case.  Starting with three different random variables <code>X</code>, <code>Y</code>, <code>Z</code> on different probability spaces, one passes to the product measure (something like <code>(μ.map X).prod ((μ'.map Y).prod (μ''.map Z)</code>) to create three new variables (something like <code>fun x ↦ x.1</code>, <code>fun x ↦ x.2.1</code>, <code>fun x ↦ x.2.2</code> with my product conventions, though I may have the dot notation slightly incorrect).  One can call these variables <code>X'</code>, <code>Y'</code>, <code>Z'</code>, and one can introduce some helper lemmas stating that these variables are independent and have the laws of <code>X</code>, <code>Y</code>, <code>Z</code> respectively.  Then one can start the rest of the proof of the triangle inequality.</p>\n<p>There is a later point in the paper where one has to work with independent copies of four different variables (see Section 6.0.2 of <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html\">https://teorth.github.io/pfr/blueprint/sect0006.html</a>), so it could be good to have a more systematic way of doing this than just working with iterated products.</p>",
        "id": 402513568,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700153453
    }
]