[
    {
        "content": "<p>Seems like the \"outstanding tasks\" list needs to refresh every 48 hours or so.  Here is the new list. The previous thread can be found <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/New.20version.20of.20.22outstanding.20tasks.22\">here</a>.</p>\n<p>Existing claims:</p>\n<ol>\n<li><span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span>, <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> , and <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span>  are working on <a href=\"https://teorth.github.io/pfr/blueprint/sect0002.html#bound-conc\">Bounded entropy implies concentration</a>, though not quite with a complete proof yet.</li>\n<li><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  claim <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">Entropic Balog-Szemeredi-Gowers</a></li>\n<li><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>  has partially established <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-dist-alt\">Alternate form of distance</a></li>\n<li><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> has established <a href=\"https://teorth.github.io/pfr/blueprint/sect0005.html#cor-fibre\">Special case of Fibring identity</a> </li>\n<li><span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> claims <a href=\"https://teorth.github.io/pfr/blueprint/sect0002.html#uniform-entropy-II\">Entropy of uniform random variable</a></li>\n<li><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> has almost established <a href=\"https://teorth.github.io/pfr/blueprint/sect0007.html#pfr\">Polynomial Freiman-Ruzsa conjecture</a></li>\n</ol>\n<p>Outstanding tasks:</p>\n<ol>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#symm-lemma\">Symmetry identity</a>  This should follow from <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#copy-ent\">Copy preserves entropy</a> and definitions; some partial progress had already been made on this by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, but more remains to be done.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-indep-exist\">Existence of conditionally independent trials</a>  This is a variant of <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#independent-exist\">Existence of independent copies</a> that is needed for the Balog-Szemeredi-Gowers lemma (so it may make sense for whoever is working on this to coordinate with Yael and Bhavik on this). <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#first-fibre\">Fibring identity for first estimate</a>  This should be an immediate application of <a href=\"https://teorth.github.io/pfr/blueprint/sect0005.html#cor-fibre\">Special case of Fibring identity</a> <strong>Established by <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#first-estimate\">First estimate</a> This should be a linear combination of existing inequalities. <strong>Established by <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#foursum-bound\">Entropy bound on quadruple sum</a> This should be a linear combination of existing inequalities. <strong>Completed by <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> and <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span></strong> .</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#cond-distance-lower\">Conditional distance lower bound</a> This inequality should follow from applying <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-dist-def\">definition of conditional distance</a> and then averaging <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#distance-lower\">Distance lower bound</a>.  <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#total-dist\">Bound on distance increments</a>  This should be a straightforward linear combination of <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#foursum-bound\">Entropy bound on quadruple sum</a> and <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#second-useful\">Comparison of Ruzsa distances, II</a></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#dist-sums\">Distance between sums</a> - This should be a routine linear combination of <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#distance-lower\">Distance lower bound</a> and <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#first-useful\">Comparison of Ruzsa distances, I</a>. <strong> Established by <span class=\"user-mention\" data-user-id=\"646363\">@Ben Eltschig</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#second-estimate\">Second estimate</a> This is a linear combination of existing inequalities. <strong>Claimed by <span class=\"user-mention\" data-user-id=\"646363\">@Ben Eltschig</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">tau decrement</a> This combines a number of difficult estimates to produce a new pair of random variables with a smaller tau-functional than the initial pair.  While this is a substantial result in the paper, the derivation from previous lemmas is relatively straightforward and this result may only be of moderate difficulty to formalize. <strong>Claimed by <span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#construct-good-prelim\">Constructing good variables. I</a> This is a technical inequality that is currently blocked due to the lack of formalization of <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">Entropic Balog-Szemeredi-Gowers</a>.   It is a moderately complicated linear combination of previous inequalities.</li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#construct-good\">Constructing good variables, II</a>  This is obtained by averaging <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#construct-good-prelim\">Constructing good variables. I</a> over 3!=6 permutations.  <strong>Completed by <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> </strong></li>\n</ol>\n<p>Making good progress - at this rate we should be largely done by the end of next week!</p>",
        "id": 404022843,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700862532
    },
    {
        "content": "<p>Bhavik and I are still pondering about the proof. We'll start actually writing Lean code next Thursday.</p>",
        "id": 404028537,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1700866878
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/pull/77\">Here is 4</a>. A very easy one from a bystander! It's fun watching this come together.</p>",
        "id": 404030525,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1700868618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404028537\">said</a>:</p>\n<blockquote>\n<p>Bhavik and I are still pondering about the proof. We'll start actually writing Lean code next Thursday.</p>\n</blockquote>\n<p>OK, good to know.  If you are able to write down a statement of entropic BSG before that date, that would unblock item 11 as well, which would be helpful.</p>",
        "id": 404030722,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700868835
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/pull/78\">Here's 3</a></p>",
        "id": 404035409,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1700872245
    },
    {
        "content": "<p>I'm going to go ahead and claim 2.</p>\n<p>EDIT: This is now done, though it was lengthier than I expected.</p>",
        "id": 404057333,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700888344
    },
    {
        "content": "<p>8 should be done as well now with <a href=\"https://github.com/teorth/pfr/pull/79\">#79</a></p>",
        "id": 404073260,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1700898402
    },
    {
        "content": "<p>I'll try doing the second estimate tomorrow, if no one else has claimed it by then</p>",
        "id": 404073348,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1700898443
    },
    {
        "content": "<p>I could try to fill in (5) entropy bound on quadruple sums (i.e. I'd like to claim it for a while).</p>",
        "id": 404160878,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700946899
    },
    {
        "content": "<p>I think I'll have to call it a day. The missing part towards quadruple sums is the \"obvious\" lemma below, I'll PR the rest. Thanks a lot also to <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span> for sharing work.</p>\n<p>So I will not currently claim the remaining part of the quadruple sums (which is the lemma below). But if no one picks this up, I could try to fill in the remaining sorry tomorrow evening.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_sum_indep_of_iIndep</span> <span class=\"o\">(</span><span class=\"n\">h_indep</span> <span class=\"o\">:</span> <span class=\"n\">iIndepFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hG</span><span class=\"o\">)</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">X₁</span><span class=\"o\">,</span> <span class=\"n\">X₂</span><span class=\"o\">,</span> <span class=\"n\">X₂'</span><span class=\"o\">,</span> <span class=\"n\">X₁'</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">IndepFun</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"bp\">+</span> <span class=\"n\">X₂'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"bp\">+</span> <span class=\"n\">X₁'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404177783,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1700958733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404177783\">said</a>:</p>\n<blockquote>\n<p>I think I'll have to call it a day. The missing part towards quadruple sums is the \"obvious\" lemma below, I'll PR the rest. Thanks a lot also to <span class=\"user-mention silent\" data-user-id=\"398581\">Mantas Baksys</span> for sharing work.</p>\n<p>So I will not currently claim the remaining part of the quadruple sums (which is the lemma below). But if no one picks this up, I could try to fill in the remaining sorry tomorrow evening.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">sum_sum_indep_of_iIndep</span> <span class=\"o\">(</span><span class=\"n\">h_indep</span> <span class=\"o\">:</span> <span class=\"n\">iIndepFun</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hG</span><span class=\"o\">)</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">X₁</span><span class=\"o\">,</span> <span class=\"n\">X₂</span><span class=\"o\">,</span> <span class=\"n\">X₂'</span><span class=\"o\">,</span> <span class=\"n\">X₁'</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n    <span class=\"n\">IndepFun</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"bp\">+</span> <span class=\"n\">X₂'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X₂</span> <span class=\"bp\">+</span> <span class=\"n\">X₁'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks for the update!  We already have the tool <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.iIndepFun.indepFun_prod_prod#doc\">pfr#ProbabilityTheory.iIndepFun.indepFun_prod_prod</a> that another contributor helpfully wrote up which could be useful here...  hopefully one just has to combine it with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.IndepFun.comp#doc\">docs#ProbabilityTheory.IndepFun.comp</a> ?</p>",
        "id": 404188494,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700965421
    },
    {
        "content": "<p>Hi everyone, I saw <code>prob_ge_exp_neg_entropy</code> on Twitter and jumped in to try it in order to learn Lean. I didn't realize it was already claimed by <span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span> so I'll close off here for now (this is fun though)</p>\n<p>Here's what I came up with if it helps (now that I look at it, contradiction would be much shorter): <a href=\"https://github.com/llllvvuu/pfr/blob/e625ed53746919b82692a2e794e5289c401bcc7f/PFR/Entropy/Basic.lean#L278-L342\">https://github.com/llllvvuu/pfr/blob/e625ed53746919b82692a2e794e5289c401bcc7f/PFR/Entropy/Basic.lean#L278-L342</a></p>",
        "id": 404268706,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701013090
    },
    {
        "content": "<p>Yeah I also accidentally proved that one (I misread the list of claimed lemmas) - I have a sorry free version locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 404272001,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701015878
    },
    {
        "content": "<p>Deducing combinatorial PFR from entropic PFR is essentially done in <a href=\"https://github.com/teorth/pfr/pull/83\">https://github.com/teorth/pfr/pull/83</a> (two sorries remaining, but they have nothing to do with the main line of the argument).</p>",
        "id": 404274434,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701018206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404272001\">said</a>:</p>\n<blockquote>\n<p>Yeah I also accidentally proved that one (I misread the list of claimed lemmas) - I have a sorry free version locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Oops!  Well, I guess it happens, and we can't actually prevent people from working to prove whatever they like, and having multiple proofs for the same result happens all the time in unformalized mathematics as well.  <span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span> , how far are you along in your formalization?  Depending on the situation, we could try to merge the different attempts, or help you complete any missing gaps in the argument.</p>",
        "id": 404275650,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701019356
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404274434\">said</a>:</p>\n<blockquote>\n<p>Deducing combinatorial PFR from entropic PFR is essentially done in <a href=\"https://github.com/teorth/pfr/pull/83\">https://github.com/teorth/pfr/pull/83</a> (two sorries remaining, but they have nothing to do with the main line of the argument).</p>\n</blockquote>\n<p>That's great progress! Are you planning to close off these sorries yourself, or would you prefer to return them to the list of outstanding tasks?  If the latter, then it may make sense to write them as standalone lemmas (and perhaps also update the blueprint accordingly).</p>",
        "id": 404276517,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701020186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404274434\">said</a>:</p>\n<blockquote>\n<p>Deducing combinatorial PFR from entropic PFR is essentially done in <a href=\"https://github.com/teorth/pfr/pull/83\">https://github.com/teorth/pfr/pull/83</a> (two sorries remaining, but they have nothing to do with the main line of the argument).</p>\n</blockquote>\n<p>By the way, the finiteness assumption of <code>G</code> can be removed from the final theorem, for stupid reasons: an infinite set <code>c</code> satisfies <code>Nat.card c = 0</code>, so taking <code>c = G</code> and <code>H = {0}</code> works when the group is infinite. Not so interesting mathematically, though :-)</p>\n<p>I guess it can also be removed in a more reasonable way by adding the conclusion that <code>c</code> is finite (by taking the subgroup spanned by <code>A</code>, which is finite, and working there).</p>",
        "id": 404276695,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701020362
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404276517\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404274434\">said</a>:<br>\nThat's great progress! Are you planning to close off these sorries yourself, or would you prefer to return them to the list of outstanding tasks?  If the latter, then it may make sense to write them as standalone lemmas (and perhaps also update the blueprint accordingly).</p>\n</blockquote>\n<p>I'll try to close them off. I'm less familiar with this part of mathlib, but hopefully it shouldn't be hard.</p>",
        "id": 404276934,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701020593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404276695\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404274434\">said</a>:</p>\n<blockquote>\n<p>Deducing combinatorial PFR from entropic PFR is essentially done in <a href=\"https://github.com/teorth/pfr/pull/83\">https://github.com/teorth/pfr/pull/83</a> (two sorries remaining, but they have nothing to do with the main line of the argument).</p>\n</blockquote>\n<p>By the way, the finiteness assumption of <code>G</code> can be removed from the final theorem, for stupid reasons: an infinite set <code>c</code> satisfies <code>Nat.card c = 0</code>, so taking <code>c = G</code> and <code>H = {0}</code> works when the group is infinite. Not so interesting mathematically, though :-)</p>\n<p>I guess it can also be removed in a more reasonable way by adding the conclusion that <code>c</code> is finite (by taking the subgroup spanned by <code>A</code>, which is finite, and working there).</p>\n</blockquote>\n<p>We could perhaps add a <code>PFR_conjecture'</code> corollary that removes the finiteness hypothesis on <code>G</code> and instead imposes finiteness on <code>c</code> (and <code>H</code>) as you suggest and add it to the blueprint and list of outstanding tasks.  It seems like a fairly straightforward derivation from <code>PFR_conjecture</code>; the trickiest things I see are to verify that every finite set in an elementary 2-group generates a finite group, and to handle the various coercions between subsets of a subgroup and subsets of the whole group (the latter is not fundamentally difficult, but it still trips me up sometimes).</p>",
        "id": 404277642,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701021231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404275650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404272001\">said</a>:</p>\n<blockquote>\n<p>Yeah I also accidentally proved that one (I misread the list of claimed lemmas) - I have a sorry free version locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Oops!  Well, I guess it happens, and we can't actually prevent people from working to prove whatever they like, and having multiple proofs for the same result happens all the time in unformalized mathematics as well.  <span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> , how far are you along in your formalization?  Depending on the situation, we could try to merge the different attempts, or help you complete any missing gaps in the argument.</p>\n</blockquote>\n<p>If it helps, here's the formalization I wrote: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">Finset.Nonempty_image</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s.image</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.Nonempty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hs</span> <span class=\"bp\">⊢</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Finset.mem_image_of_mem</span> <span class=\"n\">f</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Finset.image_min'_le_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">s.image</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">min'</span> <span class=\"o\">(</span><span class=\"n\">Finset.Nonempty_image</span> <span class=\"n\">hs</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">s.sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Measure.eq_zero_of_map_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">AEMeasurable</span> <span class=\"n\">X</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hμ</span> <span class=\"o\">:</span> <span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">μ</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.preimage_null_of_map_null</span> <span class=\"n\">hX</span> <span class=\"o\">(</span><span class=\"n\">Measure.measure_univ_eq_zero.mpr</span> <span class=\"n\">hμ</span><span class=\"o\">)</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">preimage_univ</span><span class=\"o\">,</span> <span class=\"n\">Measure.measure_univ_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">negIdMulLog_le_neg_log_of_mem_Icc</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">negIdMulLog</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"sd\">/-- If $X$ is an $S$-valued random variable, then there exists $s \\in S$ such that</span>\n<span class=\"sd\">$P[X=s] \\geq \\exp(-H[X])$. -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">prob_ge_exp_neg_entropy</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">Measurable</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hμ'</span> <span class=\"o\">:</span> <span class=\"n\">IsFiniteMeasure</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NeZero</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">rexp</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]))</span><span class=\"bp\">.</span><span class=\"n\">toNNReal</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- A few helper lemmas for later</span>\n  <span class=\"k\">have</span> <span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.image</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">log</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toReal</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">Nonempty</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">Finset.Nonempty_image</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ_nonempty</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Measure.isFiniteMeasure_map</span> <span class=\"n\">μ</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">pos'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">Measure.preimage_null_of_map_null</span> <span class=\"n\">hX.aemeasurable</span> <span class=\"n\">h</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">preimage_univ</span><span class=\"o\">,</span> <span class=\"n\">Measure.measure_univ_eq_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">NeZero.ne</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"n\">this</span>\n  <span class=\"k\">have</span> <span class=\"n\">mul_pos</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ENNReal.toReal_mul</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.toReal_pos</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.inv_ne_zero.mpr</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">ENNReal.inv_ne_top.mpr</span> <span class=\"n\">pos'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.toReal_pos</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"n\">prob_mem_Icc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span> <span class=\"bp\">∈</span> <span class=\"n\">Set.Icc</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">s</span>\n    <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_Icc.mpr</span> <span class=\"o\">⟨</span><span class=\"n\">ENNReal.toReal_nonneg</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ENNReal.toReal_mul</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.toReal_inv</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_le_iff</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.toReal_pos</span> <span class=\"n\">pos'</span>\n      <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.toReal_le_toReal</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">measure_mono</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Set.singleton_subset_iff</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">Set.mem_univ</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- First notice that H[X] = ∑ s, - ℙ[X = s] log ℙ[X = s] ≥ min - log ℙ[X = s]</span>\n  <span class=\"k\">have</span> <span class=\"n\">ineq</span> <span class=\"o\">:</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.image</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toReal</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">min'</span> <span class=\"n\">nonempty</span>\n  <span class=\"bp\">·</span> <span class=\"k\">calc</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">negIdMulLog</span> <span class=\"o\">(((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">entropy_def</span><span class=\"o\">,</span> <span class=\"n\">measureEntropy_def</span><span class=\"o\">,</span> <span class=\"n\">Measure.smul_toOuterMeasure</span><span class=\"o\">,</span>\n            <span class=\"n\">OuterMeasure.coe_smul</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.toReal_mul</span><span class=\"o\">]</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"o\">(((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">toReal</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n           <span class=\"n\">Finset.sum_le_sum</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">negIdMulLog_le_neg_log_of_mem_Icc</span> <span class=\"o\">(</span><span class=\"n\">prob_mem_Icc</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n      <span class=\"n\">_</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.image</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toReal</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">min'</span> <span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n          <span class=\"n\">Finset.image_min'_le_sum</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ_nonempty</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neg_nonneg_of_nonpos</span>\n          <span class=\"o\">(</span><span class=\"n\">log_nonpos</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_Icc.mp</span> <span class=\"o\">(</span><span class=\"n\">prob_mem_Icc</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">(</span><span class=\"n\">Set.mem_Icc.mp</span> <span class=\"o\">(</span><span class=\"n\">prob_mem_Icc</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">))</span>\n  <span class=\"c1\">-- Take s that attains the minimum. This is the element we are after</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Finset.mem_image.mp</span> <span class=\"o\">(</span><span class=\"n\">Finset.min'_mem</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ.image</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">log</span> <span class=\"o\">((</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span> <span class=\"n\">Set.univ</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toReal</span><span class=\"o\">)))</span> <span class=\"n\">nonempty</span><span class=\"o\">))</span>\n  <span class=\"n\">use</span> <span class=\"n\">s</span>\n  <span class=\"c1\">-- Apply x ↦ exp(- x) on both sides</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">neg_le_neg_iff</span><span class=\"o\">,</span> <span class=\"n\">neg_neg</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span>\n  <span class=\"n\">replace</span> <span class=\"n\">ineq</span> <span class=\"o\">:=</span> <span class=\"n\">exp_monotone</span> <span class=\"n\">ineq</span>\n  <span class=\"c1\">-- Rewrite the inequality in terms of ENNReal</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Real.exp_log</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">ENNReal.toReal_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">ineq</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.mul_le_iff_le_inv</span> <span class=\"n\">pos'</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">ENNReal.ofNNReal</span><span class=\"o\">,</span>\n    <span class=\"bp\">←</span><span class=\"n\">ENNReal.toReal_le_toReal</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.mul_ne_top</span> <span class=\"o\">(</span><span class=\"n\">ENNReal.inv_ne_top.mpr</span> <span class=\"n\">pos'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measure_ne_top</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n    <span class=\"n\">ENNReal.some_eq_coe'</span><span class=\"o\">,</span> <span class=\"n\">ENNReal.coe_toReal</span><span class=\"o\">,</span> <span class=\"n\">coe_toNNReal'</span><span class=\"o\">,</span>\n    <span class=\"n\">ENNReal.toReal_mul</span><span class=\"o\">,</span> <span class=\"n\">max_le_iff</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">ineq</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">ENNReal.toReal_mul</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">ENNReal.toReal_nonneg</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ENNReal.coe_ne_top</span>\n</code></pre></div>",
        "id": 404279707,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701022802
    },
    {
        "content": "<p>Pretty printing note: <code>attribute [pp_dot] Measure.map</code> doesn't work correctly since <code>Measure.map</code> doesn't take a <code>Measure</code> as its first explicit argument. This is a limitation of <code>pp_dot</code>.</p>",
        "id": 404280201,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701023246
    },
    {
        "content": "<p>Ah, so that is what was going on!  I was wondering why <code>μ.map X</code> kept pretty printing as <code>X.map μ</code>.</p>",
        "id": 404280817,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701023792
    },
    {
        "content": "<p>I found it quite confusing at first too (especially when copy and pasting from the infoview!)</p>",
        "id": 404280879,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701023875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404275650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404272001\">said</a>:</p>\n<blockquote>\n<p>Yeah I also accidentally proved that one (I misread the list of claimed lemmas) - I have a sorry free version locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Oops!  Well, I guess it happens, and we can't actually prevent people from working to prove whatever they like, and having multiple proofs for the same result happens all the time in unformalized mathematics as well.  <span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> , how far are you along in your formalization?  Depending on the situation, we could try to merge the different attempts, or help you complete any missing gaps in the argument.</p>\n</blockquote>\n<p>I started working on this locally, but haven't completed the proof yet. Since <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> has a complete proof I believe the most natural thing to do would just be to merge his formalization and then focus our effort on the remaining open lemmas.</p>",
        "id": 404280998,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1701024000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404280998\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404275650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404272001\">said</a>:</p>\n<blockquote>\n<p>Yeah I also accidentally proved that one (I misread the list of claimed lemmas) - I have a sorry free version locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Oops!  Well, I guess it happens, and we can't actually prevent people from working to prove whatever they like, and having multiple proofs for the same result happens all the time in unformalized mathematics as well.  <span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> , how far are you along in your formalization?  Depending on the situation, we could try to merge the different attempts, or help you complete any missing gaps in the argument.</p>\n</blockquote>\n<p>I started working on this locally, but haven't completed the proof yet. Since <span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> has a complete proof I believe the most natural thing to do would just be to merge his formalization and then focus our effort on the remaining open lemmas.</p>\n</blockquote>\n<p>OK, sounds good.  Paul, could you set up a PR?  Probably there is some way to make the proof shorter (e.g., by working with the contrapositive formulation, and maybe also taking advantage of the methods in <a href=\"https://teorth.github.io/pfr/docs/PFR/MeasureReal.html\">MeasureReal</a> to remove some of the <code>ENNReal</code> coercions), but a proof is a proof :).  (And anyone can still volunteer to update the proof later if they so choose, even if it might not be listed as a priority item on the outstanding task list any more.)</p>",
        "id": 404281202,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701024171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404281202\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404280998\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404275650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404272001\">said</a>:</p>\n<blockquote>\n<p>Yeah I also accidentally proved that one (I misread the list of claimed lemmas) - I have a sorry free version locally <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>Oops!  Well, I guess it happens, and we can't actually prevent people from working to prove whatever they like, and having multiple proofs for the same result happens all the time in unformalized mathematics as well.  <span class=\"user-mention silent\" data-user-id=\"605003\">Jonas Bayer</span> , how far are you along in your formalization?  Depending on the situation, we could try to merge the different attempts, or help you complete any missing gaps in the argument.</p>\n</blockquote>\n<p>I started working on this locally, but haven't completed the proof yet. Since <span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> has a complete proof I believe the most natural thing to do would just be to merge his formalization and then focus our effort on the remaining open lemmas.</p>\n</blockquote>\n<p>OK, sounds good.  Paul, could you set up a PR?  Probably there is some way to make the proof shorter (e.g., by working with the contrapositive formulation, and maybe also taking advantage of the methods in <a href=\"https://teorth.github.io/pfr/docs/PFR/MeasureReal.html\">MeasureReal</a> to remove some of the <code>ENNReal</code> coercions), but a proof is a proof :).  (And anyone can still volunteer to update the proof later if they so choose, even if it might not be listed as a priority item on the outstanding task list any more.)</p>\n</blockquote>\n<p>Sure!</p>",
        "id": 404281442,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701024381
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/pull/84\">Here</a> is the PR.</p>",
        "id": 404282640,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701025445
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404280817\">said</a>:</p>\n<blockquote>\n<p>Ah, so that is what was going on!  I was wondering why <code>μ.map X</code> kept pretty printing as <code>X.map μ</code>.</p>\n</blockquote>\n<p>I <em>think</em> this is the right incantation to get it to pretty print as <code>μ.map X</code> rather than <code>Measure.map X μ</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">Measure.map</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Measure.map.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">μ</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>(Hopefully Lean will have something easier to invoke than this that's more reliable than <code>pp_dot</code>.)</p>",
        "id": 404282694,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701025543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404188494\">said</a>:</p>\n<blockquote>\n<p>Thanks for the update!  We already have the tool <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=ProbabilityTheory.iIndepFun.indepFun_prod_prod#doc\">pfr#ProbabilityTheory.iIndepFun.indepFun_prod_prod</a> that another contributor helpfully wrote up which could be useful here...  hopefully one just has to combine it with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ProbabilityTheory.IndepFun.comp#doc\">docs#ProbabilityTheory.IndepFun.comp</a> ?</p>\n</blockquote>\n<p>Thank you! That's of course right. It was just very late yesterday and  I had to stop. I'm PRing this now, so the quadruple sums are sorry-free.</p>",
        "id": 404283298,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1701026329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404282640\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/teorth/pfr/pull/84\">Here</a> is the PR.</p>\n</blockquote>\n<p>Hmm, I think there may actually be an issue with the proof, in particular the sorried lemma <code>negIdMulLog_le_neg_log_of_mem_Icc</code> in the PR (claiming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>x</mi><mo>≤</mo><mo>−</mo><mi>x</mi><mi>log</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> -\\log x \\leq -x \\log x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> 0 \\leq x \\leq 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>) looks to be incorrect (the inequality actually goes the other way).  I'm not sure that the argument is easily fixable, in which case we may want to return this task to the \"outstanding\" pile.</p>",
        "id": 404283400,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701026429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404283298\">said</a>:</p>\n<blockquote>\n<p>Thank you! That's of course right. It was just very late yesterday and  I had to stop. I'm PRing this now, so the quadruple sums are sorry-free.</p>\n</blockquote>\n<p>To clarify: not sorry-free globally --- as some prerequisites are still not done. But locally sorry-free.</p>",
        "id": 404283539,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1701026616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404283400\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404282640\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/teorth/pfr/pull/84\">Here</a> is the PR.</p>\n</blockquote>\n<p>Hmm, I think there may actually be an issue with the proof, in particular the sorried lemma <code>negIdMulLog_le_neg_log_of_mem_Icc</code> in the PR (claiming <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mi>log</mi><mo>⁡</mo><mi>x</mi><mo>≤</mo><mo>−</mo><mi>x</mi><mi>log</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\"> -\\log x \\leq -x \\log x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\">−</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>x</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\"> 0 \\leq x \\leq 1 </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>) looks to be incorrect (the inequality actually goes the other way).  I'm not sure that the argument is easily fixable, in which case we may want to return this task to the \"outstanding\" pile.</p>\n</blockquote>\n<p>Whops that was a silly mistake! I'll fix up the proof now!</p>",
        "id": 404284359,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701027454
    },
    {
        "content": "<p>I've pushed a (hopefully mistake-free!) fix to the PR</p>",
        "id": 404286772,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701029839
    },
    {
        "content": "<p>This has however made the proof a bit longer, so I'll try to shorten it a bit (and prove the extra lemmas I added) now</p>",
        "id": 404286854,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701029906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404286854\">said</a>:</p>\n<blockquote>\n<p>This has however made the proof a bit longer, so I'll try to shorten it a bit (and prove the extra lemmas I added) now</p>\n</blockquote>\n<p>For the remaining lemmas you may find <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.measure_biUnion_finset#doc\">docs#MeasureTheory.measure_biUnion_finset</a> to be useful.  I had to prove something a bit similar in <a href=\"https://github.com/teorth/pfr/blob/master/PFR/Entropy/Basic.lean#L1235\">https://github.com/teorth/pfr/blob/master/PFR/Entropy/Basic.lean#L1235</a> (and I got this argument from adapting another contributor's argument in <a href=\"https://github.com/teorth/pfr/blob/master/PFR/Entropy/Basic.lean#L236\">https://github.com/teorth/pfr/blob/master/PFR/Entropy/Basic.lean#L236</a> ).  Eventually it may make sense to make an abstraction of this lemma that could go into <a href=\"https://teorth.github.io/pfr/docs/PFR/Entropy/Measure.html\">https://teorth.github.io/pfr/docs/PFR/Entropy/Measure.html</a> (indeed one could plausibly use <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=integral_eq_sum#doc\">pfr#integral_eq_sum</a> here as well).</p>",
        "id": 404287295,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701030345
    },
    {
        "content": "<p>Ah well I've just found out the first one has already been proven!</p>",
        "id": 404289200,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701031865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"376152\">Paul Lezeau</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404289200\">said</a>:</p>\n<blockquote>\n<p>Ah well I've just found out the first one has already been proven!</p>\n</blockquote>\n<p>Ah, right, we already have <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=sum_measure_singleton#doc\">pfr#sum_measure_singleton</a> and <a href=\"https://teorth.github.io/pfr/docs/find/?pattern=sum_toReal_measure_singleton#doc\">pfr#sum_toReal_measure_singleton</a> (and you inspired me to reroute my own proof of a similar statement through the former, saving a few lines of code).  For the other two lemmas you may find the instance in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MeasureTheory.isProbabilityMeasureSMul#doc\">docs#MeasureTheory.isProbabilityMeasureSMul</a> to automatically help with <code>simp</code> etc..</p>",
        "id": 404293185,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701035413
    },
    {
        "content": "<p>I'm trying my hand at 10 at the moment.</p>",
        "id": 404296970,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1701039165
    },
    {
        "content": "<p>I'm going to try 6.</p>\n<p>EDIT: Done</p>",
        "id": 404297328,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701039526
    },
    {
        "content": "<p>I was idly poking around at </p>\n<blockquote>\n<ol start=\"12\">\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#construct-good\">Constructing good variables, II</a>,</li>\n</ol>\n</blockquote>\n<p>which is very straightforward if the $T_i$s are measurable and thus <code>entropy_comm</code> applies. I'm only following things hyper locally -- I <em>think</em> this lemma ends up being applied to measurable things, but I'm not sure (and there may well be a proof that doesn't assume measurability). Am I on the wrong track here?</p>",
        "id": 404305002,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1701045492
    },
    {
        "content": "<p>I can say quite confidently that we only need measurable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">T_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for this specific lemma. I think people have also generally been assuming measurability throughout.</p>",
        "id": 404306543,
        "sender_full_name": "Arend Mellendijk",
        "timestamp": 1701046262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404305002\">said</a>:</p>\n<blockquote>\n<p>I was idly poking around at </p>\n<blockquote>\n<ol start=\"12\">\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#construct-good\">Constructing good variables, II</a>,</li>\n</ol>\n</blockquote>\n<p>which is very straightforward if the $T_i$s are measurable and thus <code>entropy_comm</code> applies. I'm only following things hyper locally -- I <em>think</em> this lemma ends up being applied to measurable things, but I'm not sure (and there may well be a proof that doesn't assume measurability). Am I on the wrong track here?</p>\n</blockquote>\n<p>We've been careless about inserting measurability hypotheses; at the end of the day, all our random variables are defined on discrete spaces and so measurability is automatic.  So if you want to claim 12, please go ahead and insert whatever measurability hypotheses are needed to make the lemma work.  (For similar reasons, you may need to assume that various ambient measures are probability measures if needed.)</p>",
        "id": 404307195,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701046587
    },
    {
        "content": "<p>Okay! Then, <a href=\"https://github.com/teorth/pfr/pull/92\">https://github.com/teorth/pfr/pull/92</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 404308285,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1701047059
    },
    {
        "content": "<p>I took some pointers from <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> 's code to fill out my version a bit more: <a href=\"https://github.com/teorth/pfr/pull/94/files\">https://github.com/teorth/pfr/pull/94/files</a></p>\n<p>The only remaining assumption is <code>μ Set.univ = μ.map X Set.univ</code> (or replace <code>μ Set.univ</code> in the problem statement)</p>\n<p>It definitely needs some refactor/golfing. I could extract some steps to the global scope like what <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> has done, and/or help fill in his lemmas using my logic</p>",
        "id": 404345514,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701067718
    },
    {
        "content": "<p>If you add the hypothesis that X is measurable you can use Measure.map_apply to prove that remaining sorry</p>",
        "id": 404346300,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701068160
    },
    {
        "content": "<p>Thanks for the tip; the proof compiles now, yay!</p>\n<p>(will golf it later - EDIT: actually I might not have enough experience yet with Lean to golf in the near term. will just leave up for comments for now)</p>",
        "id": 404348305,
        "sender_full_name": "llllvvuu",
        "timestamp": 1701068924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> since you've opened up a PR too shall I just close mine?</p>",
        "id": 404367559,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701076847
    },
    {
        "content": "<p>I've repurposed <a href=\"https://github.com/teorth/pfr/pull/84\">the PR</a> to prove <code>IsUniform.entropy_eq</code></p>",
        "id": 404393230,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701085119
    }
]