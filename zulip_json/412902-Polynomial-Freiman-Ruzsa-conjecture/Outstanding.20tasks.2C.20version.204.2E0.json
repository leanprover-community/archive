[
    {
        "content": "<p>Time for another rollover of the \"outstanding tasks\" thread!  Nearing the finish line! The previous thread can be found <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0\">here</a>.</p>\n<p>It's somewhat moot now that the project is nearing its end, but I have expanded on the format of this \"outstanding task list\" to also include documentation tasks and administrative tasks.  I would imagine that for a larger project, all three sets of tasks would be completed somewhat in parallel (with the administrative tasks covering a somewhat larger region of the project space than the documentatation tasks, which in turn should be covering a larger region than the formalization tasks, so that all three regions can expand concurrently), and be handled by three somewhat independent groups of contributors.</p>\n<p>Existing claims:</p>\n<ol>\n<li><span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span>, <span class=\"user-mention\" data-user-id=\"607118\">@llllvvuu</span> , and <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span>  have established <a href=\"https://teorth.github.io/pfr/blueprint/sect0002.html#bound-conc\">Bounded entropy implies concentration</a>.</li>\n<li><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  and <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>  claim <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">Entropic Balog-Szemeredi-Gowers</a></li>\n<li><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>  has established <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-dist-alt\">Alternate form of distance</a></li>\n<li><span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> has established <a href=\"https://teorth.github.io/pfr/blueprint/sect0002.html#uniform-entropy-II\">Entropy of uniform random variable</a></li>\n<li><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> has established <a href=\"https://teorth.github.io/pfr/blueprint/sect0007.html#pfr\">Polynomial Freiman-Ruzsa conjecture</a></li>\n<li><span class=\"user-mention\" data-user-id=\"646363\">@Ben Eltschig</span>  has established <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#second-estimate\">Second estimate</a> </li>\n<li><span class=\"user-mention\" data-user-id=\"585783\">@Arend Mellendijk</span> has established <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#de-prop\">tau decrement</a></li>\n</ol>\n<p>Outstanding formalization tasks:</p>\n<ol>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#symm-lemma\">Symmetry identity</a>  This should follow from <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#copy-ent\">Copy preserves entropy</a> and definitions; some partial progress had already been made on this by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>, but more remains to be done. <strong>Established by <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#total-dist\">Bound on distance increments</a>  This should be a straightforward linear combination of <a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#foursum-bound\">Entropy bound on quadruple sum</a> and <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#second-useful\">Comparison of Ruzsa distances, II</a>  <strong>Claimed by <span class=\"user-mention\" data-user-id=\"376152\">@Paul Lezeau</span> and <span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span>  </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0006.html#construct-good-prelim\">Constructing good variables. I</a> This is a moderately complicated linear combination of previous inequalities. <strong>Established by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> </strong></li>\n<li><a href=\"https://teorth.github.io/pfr/blueprint/sect0007.html#pfr-cor\">PFR in infinite groups</a>  A (hopefully) quick corollary of PFR in the case of infinite groups.  <strong>Established by <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> </strong></li>\n</ol>\n<p>Outstanding documentation/blueprint/examples tasks: </p>\n<ol>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate probability kernels.</li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate Shannon entropy.</li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate Ruzsa distance.</li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate the <code>finiteness</code> tactic.</li>\n<li>Writing <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> to illustrate real-valued measures.</li>\n</ol>\n<p>Outstanding administrative tasks:</p>\n<ol>\n<li>Scour the code for outstanding sorries and any other issues that warrant placing in this list.  <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span>  </strong></li>\n<li>Add blueprint specification for an extension of PFR to infinite elementary abelian 2-groups. <strong>Established by <span class=\"user-mention\" data-user-id=\"657719\">@Terence Tao</span> </strong></li>\n</ol>",
        "id": 404308015,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701046938
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/pull/96\">https://github.com/teorth/pfr/pull/96</a> removes all sorries in the file <code>main.lean</code> proving the final conjecture.</p>",
        "id": 404396481,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701086246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"605003\">@Jonas Bayer</span> and I would like to claim 2 if no one has made a start on that</p>",
        "id": 404396784,
        "sender_full_name": "Paul Lezeau",
        "timestamp": 1701086357
    },
    {
        "content": "<p>I would like to claim 1 in case no one else has started work on it</p>",
        "id": 404428940,
        "sender_full_name": "Mantas Baksys",
        "timestamp": 1701096955
    },
    {
        "content": "<p>I can work on 3, if that is the last unclaimed tasks left...</p>",
        "id": 404440629,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701100338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404440629\">said</a>:</p>\n<blockquote>\n<p>I can work on 3, if that is the last unclaimed tasks left...</p>\n</blockquote>\n<p>Great!  I've taken the liberty of writing up a provisional formal statement of <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">Entropic Balog-Szemeredi-Gowers</a> which is one of the key inputs in the proof.   Hopefully <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> or <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> can chime in on whether this statement aligns with what they think they could prove (but if there are only minor differences then it should not be too difficult to reconcile afterwards).</p>\n<p>This one might be slightly more tricky than the other \"take linear combinations of existing inequality\" type arguments, so please let us know if you need assistance (e.g., if you find a sublemma that you need but can't prove, you can spin it off with a sorry to put back on the outstanding task list).</p>",
        "id": 404450180,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701103365
    },
    {
        "content": "<p>Great! I was indeed still puzzling on how to write that. I think I'll replace the LHS by <br>\n<code>(μ.map Z)[fun z ↦ d[ A; μ[|Z⁻¹' {z}] # B ; μ[|Z⁻¹' {z}] ]]</code> (using the same notation as I saw in <code>condEntropy</code>).</p>",
        "id": 404452317,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701104057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404450180\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404440629\">said</a>:</p>\n<blockquote>\n<p>I can work on 3, if that is the last unclaimed tasks left...</p>\n</blockquote>\n<p>Great!  I've taken the liberty of writing up a provisional formal statement of <a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#lem-bsg\">Entropic Balog-Szemeredi-Gowers</a> which is one of the key inputs in the proof.   Hopefully <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> or <span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> can chime in on whether this statement aligns with what they think they could prove (but if there are only minor differences then it should not be too difficult to reconcile afterwards).</p>\n<p>This one might be slightly more tricky than the other \"take linear combinations of existing inequality\" type arguments, so please let us know if you need assistance (e.g., if you find a sublemma that you need but can't prove, you can spin it off with a sorry to put back on the outstanding task list).</p>\n</blockquote>\n<p>Speaking of troublesome sublemmas, I think I may have one of those in the second estimate already <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>If I'm seeing things right the proof in the blueprint requires <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂'] ≤ d[X₁ + X₁' # X₂ + X₂']</code> in order to obtain the inequality (2), but I've had no luck proving it so far - is that even right, or am I on the wrong track? If it is, is there an easy proof of this or should I just leave it as a sorry for now?</p>",
        "id": 404460025,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1701106736
    },
    {
        "content": "<p>Other than that the proof is pretty much done by the way, I'm just still in the process of filling in a few technical sorries related to independence. Hopefully I'll be able to PR it later today or tomorrow.</p>",
        "id": 404460485,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1701106904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646363\">Ben Eltschig</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404460025\">said</a>:</p>\n<blockquote>\n<p>Speaking of troublesome sublemmas, I think I may have one of those in the second estimate already <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>If I'm seeing things right the proof in the blueprint requires <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂'] ≤ d[X₁ + X₁' # X₂ + X₂']</code> in order to obtain the inequality (2), but I've had no luck proving it so far - is that even right, or am I on the wrong track? If it is, is there an easy proof of this or should I just leave it as a sorry for now?</p>\n</blockquote>\n<p>That's weird, you should only need a lower bound on <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂']</code> and not an upper bound (certainly not this one).  Could you elaborate a bit more on where that bound is coming up? The bound (2) in the blueprint should be a linear combination of the four preceding inequalities as well as Lemma 6.14.</p>",
        "id": 404463338,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701107969
    },
    {
        "content": "<p>The lower bound on <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂']</code> comes from Lemma 6.7 as you said in the blueprint, but since the rewritten Lemma 5.2 involves <code>d[X₁ + X₁' # X₂ + X₂']</code> too I need a lower bound on that as well. That's what I used the <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂'] ≤ d[X₁ + X₁' # X₂ + X₂']</code> for, to make sure the lower bound from Lemma 6.7 holds for both. Or should some other lower bound be used instead?</p>",
        "id": 404464950,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1701108525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646363\">Ben Eltschig</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404464950\">said</a>:</p>\n<blockquote>\n<p>The lower bound on <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂']</code> comes from Lemma 6.7 as you said in the blueprint, but since the rewritten Lemma 5.2 involves <code>d[X₁ + X₁' # X₂ + X₂']</code> too I need a lower bound on that as well. That's what I used the <code>d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂'] ≤ d[X₁ + X₁' # X₂ + X₂']</code> for, to make sure the lower bound from Lemma 6.7 holds for both. Or should some other lower bound be used instead?</p>\n</blockquote>\n<p>Lemma 6.14 should be used to get the lower bound for  <code>d[X₁ + X₁' # X₂ + X₂']</code>.</p>",
        "id": 404480775,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701115208
    },
    {
        "content": "<p>oh, I see <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nsorry about that then, looks like I've been overthinking it</p>",
        "id": 404481651,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1701115478
    },
    {
        "content": "<p>Do I understand correctly that there is no remaining unclaimed lemma? I wanted to try to prove at least one lemma, but I was on family duty during the Thanksgiving break so I may have missed the opportunity.</p>",
        "id": 404482518,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701115908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404482518\">said</a>:</p>\n<blockquote>\n<p>Do I understand correctly that there is no remaining unclaimed lemma? I wanted to try to prove at least one lemma, but I was on family duty during the Thanksgiving break so I may have missed the opportunity.</p>\n</blockquote>\n<p>Ha, yes the project has proceeded faster than expected and all the main tasks have already been claimed.  But there was one auxiliary lemma that would be appreciated I think. Right now, the <a href=\"https://teorth.github.io/pfr/blueprint/sect0007.html#pfr\">main theorem</a> requires the ambient group <code>G</code> (which is what in the blueprint is called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi mathvariant=\"double-struck\">F</mi><mn>2</mn><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\"> {\\mathbb F}_2^n </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.937em;vertical-align:-0.2481em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">F</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4519em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2481em;\"><span></span></span></span></span></span></span></span></span></span> to be a finite elementary abelian 2-group.  However, it should be possible to remove the finiteness hypothesis on <code>G</code> (but then one has to place finiteness hypotheses on <code>H</code>, <code>A</code>, <code>c</code> as a consequence).  The point is that any finite subset <code>A</code> of an infinite elementary abelian 2-group will generate a finite subgroup and one can work in there.  So if you want to contribute, one possibility is to state and prove such a generalization as a corollary of the main theorem.  This isn't explicitly listed as a goal in the blueprint or in the outstanding tasks, but I can add the precise specifications for it in a few hours if you would like to claim it (but perhaps you see already what the generalization should be and how to prove it).</p>",
        "id": 404488489,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701118714
    },
    {
        "content": "<p>Ok, I will work on that.</p>",
        "id": 404492161,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701120544
    },
    {
        "content": "<p>I was just removing one ad hoc lemma I had introduced earlier, by providing an instance of <code>ElementaryAddCommGroup</code> for functions (random variables) with values in an <code>ElementaryAddCommGroup</code>.</p>\n<p>I made a <a href=\"https://github.com/teorth/pfr/pull/100/files\">PR</a>, which contains a few small lemmas for this purpose. These might or might not be useful for what <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> is doing now, although Patrick probably proves them quicker and more elegantly that I did anyway.</p>",
        "id": 404494571,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1701121733
    },
    {
        "content": "<p>The second estimate should be done too now with <a href=\"https://github.com/teorth/pfr/pull/102\">#102</a>. There's still a few things to clean up, but I probably won't get to those before tomorrow.</p>",
        "id": 404504577,
        "sender_full_name": "Ben Eltschig",
        "timestamp": 1701126860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404492161\">said</a>:</p>\n<blockquote>\n<p>Ok, I will work on that.</p>\n</blockquote>\n<p>I've just uploaded a stub of a statement (see <code>PFR_conjecture'</code> in main.lean) and the blueprint should also update in a few minutes as well.</p>",
        "id": 404505831,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701127605
    },
    {
        "content": "<p>I think your statement is not what you intended because your assumptions do not imply A is finite. The trap is that <code>Nat.card</code> is defined to be zero for infinite types.</p>",
        "id": 404506763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701128125
    },
    {
        "content": "<p>But that's not a problem, I already wrote a statement.</p>",
        "id": 404506797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701128140
    },
    {
        "content": "<p>In reviewing all the Lean files, I came across FiniteMeasureFintype.lean, which does not seem to be linked to from any other file in the project, and still contains some sorries.  Is someone still working on this file, and is there a plan to integrate it into the project and/or to move some or all of it to the Mathlib folder?  Similarly for ProbabilityMeasureProdCont.lean, although here there are no outstanding sorries.</p>",
        "id": 404515458,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701132679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404494571\">said</a>:</p>\n<blockquote>\n<p>I was just removing one ad hoc lemma I had introduced earlier, by providing an instance of <code>ElementaryAddCommGroup</code> for functions (random variables) with values in an <code>ElementaryAddCommGroup</code>.</p>\n</blockquote>\n<p>Oh good! I also realized I needed that to simplify some arguments a bit.</p>",
        "id": 404521351,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701135390
    },
    {
        "content": "<p>In the blueprint, the hypothesis of \"PFR in infinite groups\" includes \"A \\subset A\", but I bet this should be \"A \\subset G\".</p>",
        "id": 404532018,
        "sender_full_name": "Dustin Mixon",
        "timestamp": 1701140190
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657719\">Terence Tao</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404515458\">said</a>:</p>\n<blockquote>\n<p>In reviewing all the Lean files, I came across FiniteMeasureFintype.lean, which does not seem to be linked to from any other file in the project, and still contains some sorries.  Is someone still working on this file, and is there a plan to integrate it into the project and/or to move some or all of it to the Mathlib folder?  Similarly for ProbabilityMeasureProdCont.lean, although here there are no outstanding sorries.</p>\n</blockquote>\n<p>I think you can just remove <code>FiniteMeasureFintype.lean</code>. On the other hand, <code>ProbabilityMeasureProdCont.lean</code> is needed to show that the Rusza distance is continuous as a function of two probability measures (which is useful to show the existence of a tau-minimizer).</p>",
        "id": 404629326,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1701175999
    },
    {
        "content": "<p>I finished deducing the infinite version from the finite one. PR is at <a href=\"https://github.com/teorth/pfr/pull/109\">https://github.com/teorth/pfr/pull/109</a>.</p>",
        "id": 404674262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701189550
    },
    {
        "content": "<p>Only two non-green vertices left in <a href=\"https://teorth.github.io/pfr/blueprint/dep_graph_document.html\">https://teorth.github.io/pfr/blueprint/dep_graph_document.html</a> !</p>",
        "id": 404691613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1701195805
    },
    {
        "content": "<p>There are still 3 sorries (outside comments, outside the Test folder). The third is <code>rdist_triangle</code> which is marked in the tex file as <code>\\leanok</code>, but still is proven by <code>sorry</code>.</p>",
        "id": 404693011,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701196373
    },
    {
        "content": "<p>The version we need for the project is ok. This sorry is for the kernel rdist and is not needed.</p>",
        "id": 404693107,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701196421
    },
    {
        "content": "<p>I thought we needed the triangle inequality for cond_rdist, so I started working on the kernel version to then specialize it to the conditional kernel, but the conditional version is in fact not needed for the project.</p>\n<p>I'm still trying to prove the kernel rdist_triangle even though it's not needed. I have a partial proof here: <a href=\"https://github.com/RemyDegenne/pfr/blob/master/PFR/Entropy/KernelRuzsa.lean#L222\">https://github.com/RemyDegenne/pfr/blob/master/PFR/Entropy/KernelRuzsa.lean#L222</a> . However I am running into issues like proving that the entropy of a Markov kernel from <code>S × T</code> with a product measure to some other space is the same as the entropy of the same kernel seen as a kernel from <code>S × S' × T</code> (where we also augment the measure with an arbitrary measure on S'). There is nothing mathematically difficult there, but the kernel manipulations are tedious.</p>\n<p>This project revealed some friction in the use of Markov kernels. I added several simp lemmas and PRed some to Mathlib, but it's not yet satisfactory. Several <code>ruzsa_triangle_aux</code> lemmas in the same file are also there only because I have trouble proving that some kernels are equal. Like this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruzsa_triangle_aux1</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">T</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">IsMarkovKernel</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsMarkovKernel</span> <span class=\"n\">η</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"bp\">×ₖ</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.1.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measurable_of_finite</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">κ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"n\">measurable_sub</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>The current proof is 13 lines (which could surely be golfed to slightly less), but ideally it should be much shorter.</p>",
        "id": 404695836,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701197318
    },
    {
        "content": "<p>Well, I just found a two-lines proof. Perhaps the issue was simply that I was tired when writing those :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ruzsa_triangle_aux1</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">η</span> <span class=\"o\">:</span> <span class=\"n\">kernel</span> <span class=\"n\">T</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">IsMarkovKernel</span> <span class=\"n\">κ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">IsMarkovKernel</span> <span class=\"n\">η</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"bp\">×ₖ</span> <span class=\"n\">η</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.1.2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measurable_of_finite</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n      <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">κ</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">↦</span> <span class=\"n\">p.1</span> <span class=\"bp\">-</span> <span class=\"n\">p.2</span><span class=\"o\">)</span> <span class=\"n\">measurable_sub</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">×</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">G</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.1.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x.1</span> <span class=\"bp\">-</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">Prod.fst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext1</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">kernel.fst</span><span class=\"o\">,</span> <span class=\"n\">fst_prod</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But the general remark about kernel manipulation is still true: they are not as easy to use as they should be.</p>",
        "id": 404697681,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1701197940
    },
    {
        "content": "<p>Given that we may temporarily have a surplus of volunteers for the PFR project as it nears completion, I thought of one additional small task that someone might be willing to work on.  Right now our main theorem is stated for elementary abelian 2-groups, but in the literature the PFR is stated instead in terms of vector spaces over F_2.  So having a small lemma that says that vector spaces over F_2 are always elementary abelian 2-groups would be nice.  There was previous talk in <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/.22one.20click.20install.22.20of.20project.3F\">this thread</a> about having a lean file with some showcase results from the project (similar to <a href=\"https://github.com/b-mehta/exponential-ramsey/blob/main/src/main_results.lean\">this file for a Ramsey theory project</a>), and being able to state the PFR for vector spaces over F_2 (with the proof outsourced to the other lean files, of course) would be a natural candidate for such a file.</p>",
        "id": 404758199,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701223183
    },
    {
        "content": "<p><a href=\"https://github.com/teorth/pfr/pull/114\">https://github.com/teorth/pfr/pull/114</a></p>",
        "id": 404764577,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701225904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404764577\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/teorth/pfr/pull/114\">https://github.com/teorth/pfr/pull/114</a></p>\n</blockquote>\n<p>Wow, that was quick!  Thanks!</p>",
        "id": 404765551,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701226514
    },
    {
        "content": "<p>It did usefully uncover some missing functionality in <code>exact?</code>. This was my pre-golfed version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofModule</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fact</span> <span class=\"n\">p.Prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ElementaryAddCommGroup</span> <span class=\"n\">G</span> <span class=\"n\">p</span> <span class=\"n\">where</span>\n  <span class=\"n\">orderOf_of_ne</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"k\">suffices</span> <span class=\"n\">p</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">hint</span>\n    <span class=\"c1\">-- Sadly, this didn't work, but should have?</span>\n    <span class=\"c1\">-- have : Basis _ (ZMod p) G := by exact?</span>\n    <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Basis</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofVectorSpace</span> <span class=\"o\">(</span><span class=\"n\">ZMod</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">G</span>\n    <span class=\"c1\">-- Finding `Basis.ext_elem` was most of the work: what search tool could have helped?</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Basis.ext_elem</span> <span class=\"n\">b</span>\n    <span class=\"n\">hint</span>\n</code></pre></div>\n<p>The problem with using <code>exact?</code> to find the basis was that I knew that I had to leave the indexing type blank, because I wouldn't know that until I found the relevant function. However <code>exact?</code> appears to be unwilling to unify that blank.</p>",
        "id": 404767371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701227178
    },
    {
        "content": "<p>I'm not sure how similar this is to LTE in this sense, but I wonder if there is some definitions that could have some explicit theorems listed out and collected in a file to show that the definitions are correct?</p>",
        "id": 404811816,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701246945
    },
    {
        "content": "<p>Something like <a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/examples/Ext.lean\">https://github.com/leanprover-community/lean-liquid/blob/master/src/examples/Ext.lean</a></p>",
        "id": 404811827,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1701246949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404811816\">said</a>:</p>\n<blockquote>\n<p>I'm not sure how similar this is to LTE in this sense, but I wonder if there is some definitions that could have some explicit theorems listed out and collected in a file to show that the definitions are correct?</p>\n</blockquote>\n<p>I like this idea!  I have just created an <a href=\"https://github.com/teorth/pfr/blob/master/examples.lean\">examples</a> file on the github repository in which we could put examples to illustrate various results and methods established as a consequence of the PFR project.  Right now the only code it contains is a self-contained statement of the PFR conjecture (phrased using modules instead of elementary abelian groups), but it contains empty sections to illustrate probability kernels, Shannon entropy, Ruzsa distance, the <code>finiteness</code> tactic, and real-valued measures. I have therefore added to the outstanding task list the task of writing up some examples for each of these sections, in case there are volunteers to do so.  Feel free to also propose other sections to showcase other byproducts of the project!</p>",
        "id": 404882303,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701269276
    },
    {
        "content": "<p>I think for LTE the examples folder was mostly there to show that the <em>statement</em> of the main theorem was correct, by showing that the definitions used in it have the properties that one would expect. Lean checks that the definitions used in the proof (but that do not occur in the statement) are \"correct\" in the sense that they suffice to prove the final statement.<br>\nIn this project, the final statement is very elementary.</p>",
        "id": 404890168,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701271023
    },
    {
        "content": "<p>It would be nice to also have the equivalent formulation of PFR in terms of approximate homomorphisms (see e.g. Proposition 10.2(4) of Ben Green's notes <a href=\"https://arxiv.org/abs/math/0409420\">https://arxiv.org/abs/math/0409420</a>), this is often the form in which it is applied in computer science for example.</p>",
        "id": 404890314,
        "sender_full_name": "Thomas Bloom",
        "timestamp": 1701271069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.204.2E0/near/404890168\">said</a>:</p>\n<blockquote>\n<p>I think for LTE the examples folder was mostly there to show that the <em>statement</em> of the main theorem was correct, by showing that the definitions used in it have the properties that one would expect. Lean checks that the definitions used in the proof (but that do not occur in the statement) are \"correct\" in the sense that they suffice to prove the final statement.<br>\nIn this project, the final statement is very elementary.</p>\n</blockquote>\n<p>Right, the only custom definition we actually used to state PFR was <code>ElementaryAddCommGroup</code>, but now that we have that every instance of <code>Module (ZMod 2)</code> is also an instance of <code>ElementaryAddCommGroup 2</code>, it was easy to write a completely self-contained version of PFR, which I did in the examples file.  But in addition to PFR we did also develop a lot of tools regarding Shannon entropy, Ruzsa distance, etc. that could potentially be useful for other projects as well, and I thought that the examples file could be used to illustrate that the definitions we have for say <code>d[ X # Y ]</code> or <code>I[ X : Y | Z]</code> do in fact agree with the standard definitions, using only the standard Mathlib functions to state the equivalence. In many cases this just amounts to restating some of the helper lemmas that we already have in the code, but those lemmas are buried amongst dozens of other lemmas and might not be easily discernable to the casual reader.</p>\n<p><span class=\"user-mention\" data-user-id=\"458865\">@Thomas Bloom</span> : Good idea.  If I have time in the next day or two I may try to write up a blueprint of how to derive the approximate homomorphism version of PFR from the combinatorial version.  (I'm glad you didn't request 10.2(5) though, as that requires the combinatorial Balog-Szemeredi-Gowers lemma which we don't have formalized yet.)</p>\n<p>EDIT: in order to take advantage of the great volunteer community we have here, I have gone ahead and quickly written up a blueprint which should appear shortly at <a href=\"https://teorth.github.io/pfr/blueprint/sect0008.html\">https://teorth.github.io/pfr/blueprint/sect0008.html</a> (or at <a href=\"https://github.com/teorth/pfr/blob/master/blueprint/src/chapter/homomorphism.tex\">https://github.com/teorth/pfr/blob/master/blueprint/src/chapter/homomorphism.tex</a> if you are too impatient to wait for the blueprint to compile), and started a new thread to announce the new tasks.</p>",
        "id": 404892804,
        "sender_full_name": "Terence Tao",
        "timestamp": 1701271742
    },
    {
        "content": "<p>Yes, what  Eric and Floris said is correct: the examples folder in LTE is there to illustrate that the definitions are correct. But it may still be worthwhile to do this for PFR for similar reasons, even if the definitions are more elementary.</p>",
        "id": 404893669,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701271966
    },
    {
        "content": "<p>For example, the statement</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">PFR_conjecture'</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ElementaryAddCommGroup</span> <span class=\"n\">G</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₀A</span> <span class=\"o\">:</span> <span class=\"n\">A.Nonempty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Afin</span> <span class=\"o\">:</span> <span class=\"n\">A.Finite</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">Nat.card</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">K</span> <span class=\"bp\">*</span> <span class=\"n\">Nat.card</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">AddSubgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">c.Finite</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Finite</span> <span class=\"bp\">∧</span>\n      <span class=\"n\">Nat.card</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">K</span> <span class=\"bp\">^</span> <span class=\"mi\">12</span> <span class=\"bp\">∧</span> <span class=\"n\">Nat.card</span> <span class=\"n\">H</span> <span class=\"bp\">≤</span> <span class=\"n\">Nat.card</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>involves a \"nonstandard\" (meaning not in mathlib) definition <code>ElementaryAddCommGroup</code> which could be (easily) described with some nice exampels (e.g. showing that an additive group satisfies this if and only if the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-module structure \"descends\" to a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/2</span></span></span></span>-module structure).</p>",
        "id": 404896475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701272770
    },
    {
        "content": "<p>Re combinatorial BSG: Bhavik and I are also working on that</p>",
        "id": 404915574,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701278547
    }
]