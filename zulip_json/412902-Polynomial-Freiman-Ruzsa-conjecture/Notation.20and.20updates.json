[
    {
        "content": "<p>Update: I've managed to complete a first draft of the blueprint, in the sense that it now contains all the mathematical steps.  Only a fraction of the lemmas are formally stated in Lean at present, but I can work on doing that soon.</p>\n<p>Separately, I have been trying to implement some notation for pairs and for conditional Ruzsa distance to stop the notation from becoming extremely cluttered.  For pairs I am currently using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prod</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span> <span class=\"o\">)</span> <span class=\"o\">(</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ω</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">×</span> <span class=\"n\">T</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">ω</span><span class=\"o\">,</span> <span class=\"n\">Y</span> <span class=\"n\">ω</span><span class=\"o\">)</span>\n\n<span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"⟨ \"</span> <span class=\"n\">X</span> <span class=\"s2\">\" , \"</span> <span class=\"n\">Y</span> <span class=\"s2\">\" ⟩\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">prod</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>though it has the downside that the angled brackets are occasionally interpreted as a constructor (in which case an extra pair of parentheses are needed).  Another minor issue is that the <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Measurable.prod_mk#doc\">docs#Measurable.prod_mk</a> method does not directly establish measurability of <code>⟨ X, Y ⟩</code> without first applying <code>unfold prod</code>, so I had to add a wrapper <code>mes_prod_mk</code> to fix this.  </p>\n<p>For the Ruzsa distance between two random variables <code>X</code>, <code>Y</code> associated with probability measures <code>μ</code>, <code>μ'</code> I am trialing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"d[\"</span> <span class=\"n\">X</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">μ</span> <span class=\"s2\">\" # \"</span> <span class=\"n\">Y</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">μ'</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rdist</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">μ</span> <span class=\"n\">μ'</span>\n</code></pre></div>\n<p>and for conditional Ruzsa distance I am trialing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"d[\"</span> <span class=\"n\">X</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">Z</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">μ</span> <span class=\"s2\">\" # \"</span> <span class=\"n\">Y</span> <span class=\"s2\">\" | \"</span> <span class=\"n\">W</span> <span class=\"s2\">\" ; \"</span> <span class=\"n\">μ'</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cond_rdist</span> <span class=\"n\">X</span> <span class=\"n\">Z</span> <span class=\"n\">Y</span> <span class=\"n\">W</span> <span class=\"n\">μ</span> <span class=\"n\">μ'</span>\n</code></pre></div>\n<p>so that a typical result about Ruzsa distance (<a href=\"https://teorth.github.io/pfr/blueprint/sect0003.html#cond-dist-alt\">https://teorth.github.io/pfr/blueprint/sect0003.html#cond-dist-alt</a>) now looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cond_rdist_of_indep</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">IndepFun</span> <span class=\"o\">(⟨</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">⟩)</span> <span class=\"o\">(⟨</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"o\">⟩)</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"o\">[</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Z</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"bp\">#</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">W</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"bp\">-</span><span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"o\">]</span> <span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">Z</span><span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"o\">]</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">H</span><span class=\"o\">[</span><span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"n\">W</span><span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"o\">]</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>This is something of a mess, but it was even worse without the above notational abbreviations.<br>\nI'm not completely sold on using <code>#</code> as a delimiter, but I couldn't think of a better choice right now (in the paper we use semicolons, but that delimiter has now been repurposed to specify the measure).  Any suggestions are of course welcome.</p>",
        "id": 402620306,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700200043
    },
    {
        "content": "<p>I'm not sure if the spacing is intentional, but just to mention it, the spaces before and after quoted tokens in notation is a pretty printing hint for where to insert a space (and it's worth mentioning it has no impact on parsing). For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"d[\"</span> <span class=\"n\">X</span> <span class=\"s2\">\"; \"</span> <span class=\"n\">μ</span> <span class=\"s2\">\" # \"</span> <span class=\"n\">Y</span> <span class=\"s2\">\"; \"</span> <span class=\"n\">μ'</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rdist</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">μ</span> <span class=\"n\">μ'</span>\n</code></pre></div>\n<p>would print things like <code>d[X; μ # Y; μ']</code> instead of <code>d[X ; μ # Y ; μ']</code>.</p>\n<p>Since throwing out notation suggestions is fun, perhaps <code>d[X; μ ;; Y; μ']</code>?</p>",
        "id": 402621914,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700200919
    },
    {
        "content": "<p>I see some issues with hyphens in lean definitions, for example <code>rusza-triangle</code> is listed as the lean name, which leads to a 404 because the real name is <code>rusza_triangle</code></p>",
        "id": 402622208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700201066
    },
    {
        "content": "<p>Thanks for the pointers and heads up!  I think I fixed all the hyphens in the Lean links, and reduced the whitespace in the notation.</p>",
        "id": 402622896,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700201484
    },
    {
        "content": "<p>For pairs, you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">notation3</span><span class=\"o\">:</span><span class=\"mi\">100</span> <span class=\"s2\">\"p(\"</span> <span class=\"n\">X</span> <span class=\"s2\">\", \"</span> <span class=\"n\">Y</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">prod</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>to avoid conflicts with angle bracket notation. Having no whitespace between an identifier and <code>(</code> is reserved for notations and macros.</p>",
        "id": 402622909,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700201492
    },
    {
        "content": "<p>Re the minor issue about unfolding, you could make <code>prod</code> be an <code>abbrev</code> instead of a <code>def</code>. (<code>abbrev</code> is the same as <code>def</code> but it makes the definition become more transparent in many computations)</p>",
        "id": 402623077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700201608
    }
]