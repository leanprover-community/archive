[
    {
        "content": "<p>The PFR conjecture is a statement about non-empty subsets <code>A</code> of finite dimensional vector spaces <code>F_2^n</code> over the field <code>F_2</code> of two elements: it says that if <code>A</code> has doubling at most <code>K</code> in the sense that <code>|A+A| ≤ K * |A|</code> (where <code>A+A</code> is the Minkowski sum of <code>A</code> with itself), then <code>A</code> can be covered by at most <code>2 K^12</code> cosets of a subgroup <code>H</code> of <code>F_2^n</code> of cardinality at most <code>A</code>.  (The specific constant 12 is what came out of our proof (see Theorem 1.1 of <a href=\"https://arxiv.org/abs/2311.05762\">https://arxiv.org/abs/2311.05762</a>); it is not optimal.)  </p>\n<p>That's the standard way of stating the theorem, but the vector space structure is not really used in the proof.  Basically, what is needed is that <code>A</code> lives in a finite abelian group <code>G</code> in which every element has order at most 2, i.e. one has an axiom <code>∀ x:G, x+x=0</code> in the group.  The rest of the proof basically takes place in this category (the category of elementary 2-groups, if you will). So perhaps the simplest thing to do is just to state the theorem in lean for subsets of a finite abelian group obeying this additional axiom, and not have to deal with vector spaces or finite fields at all.</p>\n<p>In particular, it should be rather simple to at least <em>state</em> the PFR conjecture in Lean, even if the proof may take a little longer than that.  I guess that would be one very early goal of the project.</p>",
        "id": 401842021,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699908355
    },
    {
        "content": "<p>But there isn't much downside to working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-vector spaces either, right?</p>",
        "id": 401842668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699908588
    },
    {
        "content": "<p>Do you use that <code>G</code> is finite in the proof? Because you could drop it from the statement, right? (And just look at the subgroup/subspace generated by <code>A</code>, as first step of the proof.)</p>",
        "id": 401842944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1699908688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Formalizing.20F_2.5En/near/401842668\">said</a>:</p>\n<blockquote>\n<p>But there isn't much downside to working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-vector spaces either, right?</p>\n</blockquote>\n<p>No.  And we will have a future paper working with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>-vector spaces for other primes <code>p</code>, so that's a case for phrasing things in that language.  It seems that mathlib has vector spaces and finite fields pretty well covered.</p>\n<p>It's convenient to make <code>G</code> finite for two reasons, one minor and one only moderately significant.  The minor one is that it makes it slightly easier to set up the theory of Shannon entropy, as all random variables will take only finitely many values and so we can do everything with <code>Finset.sum</code> instead of <code>tsum</code> or whatever.  (Though even when <code>G</code> is infinite, <code>A</code> will still be finite and all the random variables we will consider come from some finite number of operations applied to <code>A</code>, so they will still only take finitely many values within an infinite set.)  I guess if one of the goals is to have a satisfactory library of Shannon information theory we would eventually want to generalize beyond the finite case, but at least in the near-term it is a minor convenience.</p>\n<p>The more significant reason is that there is a compactness argument used in the proof.  At some point (see Section 2 of <a href=\"https://arxiv.org/abs/2311.05762\">https://arxiv.org/abs/2311.05762</a> ) we will use the fact that the set of all probability measures on <code>G</code> is compact, so that a certain continuous functional on those measures is guaranteed to have a minimizer.  It is possible to get around this compactness argument by a number of ways (for instance, as you say, you could restrict attention to the group generated by <code>A</code>), but it is a minor convenience to be able to exploit this compactness (this might potentially make the proof <code>Classical</code> though.  We do have a variant \"algorithmic\" proof that has slightly worse bounds but avoids compactness that one might also try to formalize as an additional side project perhaps.).  One could perhaps state the main theorem in the finite case (and prove it using completely finitary methods), but then establish as a corollary that it also holds for infinite groups of characteristic 2.</p>",
        "id": 401843868,
        "sender_full_name": "Terence Tao",
        "timestamp": 1699909060
    },
    {
        "content": "<p>For what it's worth, formalizing Shannon theory has been on my todo list for a while now, so maybe this project is the push I needed to actually start coding! In any case I'd be happy to contribute.</p>",
        "id": 401856844,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1699915001
    }
]