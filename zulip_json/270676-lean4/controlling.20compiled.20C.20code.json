[
    {
        "content": "<p>This is a very convoluted question so my apologies if it isn't formulated the most clearly / in the best way. Happy to provide more details, there's just a lot going on and I'm not sure what would be useful information.</p>\n<p>I need to be able to call functions in the C code that my Lean code compiles to. Unfortunately it seems quite unreadable and unworkable. I technically only need a function signature that looks like C code, but the only function that has a remotely useful signature is my main function that is the entry point for a binary executable, which is just <code>int main(int argc, char ** argv)</code>, compiled from the lean signature <code>def main (args : List String) : IO Unit</code>. I need to externally call a function that returns a value. All functions except this main function are compiled into a weird signature that returns a <code>lean_object*</code>, even if the type I'm using in lean is a primitive type. </p>\n<p>is there a way to either a) make a function excluding the <code>main</code> function have a readable C-like signature, so it can be called relatively normally in code; or b) have the main function explicitly return a value via the lean code that isn't just the C exit code?</p>\n<p>for a bit more context the C code I'm working with is the one that is found in <code>build/ir</code> after compilation (i hope this is the right code to use because I couldn't really find any documentation or any other ways to extract it)</p>\n<p>thank you!</p>",
        "id": 380897010,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690948540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"578936\">@Bhakti Shah</span> Some notes:</p>\n<ol>\n<li>Some details on translating between C and Lean can be found in the <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html?highlight=uint8#translating-types-from-lean-to-c\">Lean 4 manual</a>.</li>\n<li>Lean only has a few primitive types: <code>UInt8/16/31/64</code>, <code>USize</code>, <code>Char</code>, and <code>Float</code>, which are <code>uint8/16/32/64_t</code>, <code>size_t</code>, <code>uint32_t</code>, and <code>double</code>, respectively. Also, structures with a single (non-<code>Prop</code>) primitive field are that primitive type, and enum-like inductives (e.g., <code>inductive Color | red | blue | green</code>) are smallest of <code>uint8/16/32/64_t</code> which is sufficient to contain the number of constructors. All other types are boxed (i.e., <code>lean_object*</code>).</li>\n<li>You can give a Lean definition a clean, human-readable C symbol name via the <code>@[export]</code> attribute. For example:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[export my_add]</span> <span class=\"kd\">def</span> <span class=\"n\">myLeanAdd</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Will produce essentially the C function:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"nf\">my_add</span><span class=\"p\">(</span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_uint32_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_uint32_add</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">b</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 380899001,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690949578
    },
    {
        "content": "<p>Does (3) mean that Lean 4 has code extraction to (nice) C or C++ code.  Someone asked me about this recently and I told them that Lean doesnâ€™t have the ability to extract (nice) code from Lean functions.</p>",
        "id": 381038750,
        "sender_full_name": "Jason Rute",
        "timestamp": 1690982665
    },
    {
        "content": "<p>I have successfully used lean generated code in C++ project. To exchange more complicated objects use <code>lean_external_object</code>. Have a look at this example project <a href=\"https://github.com/leanprover/lean4/tree/17602d9f2844566a4ea496f989c37afc8115f35f/tests/compiler/foreign\">https://github.com/leanprover/lean4/tree/17602d9f2844566a4ea496f989c37afc8115f35f/tests/compiler/foreign</a></p>",
        "id": 381045141,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1690983803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/270676-lean4/topic/controlling.20compiled.20C.20code/near/381038750\">said</a>:</p>\n<blockquote>\n<p>Does (3) mean that Lean 4 has code extraction to (nice) C or C++ code.</p>\n</blockquote>\n<p>Not sure how Lean compilation compares to Agda/Coq code extraction, but Lean has a pretty specific ABI as laid out in the FFI section of the manual. So the generated C code is usually easy to interact with, and the interface is very stable across Lean versions (assuming the Lean signature remains stable).</p>",
        "id": 381068604,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1690987605
    },
    {
        "content": "<p>thank you very much! i wasn't aware of the FFI documentation</p>",
        "id": 381210320,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1690991570
    }
]