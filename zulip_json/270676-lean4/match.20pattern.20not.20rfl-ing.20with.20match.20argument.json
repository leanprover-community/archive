[
    {
        "content": "<p>Hi, very new to lean and got stuck proving pattern match relation to scrutinee.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">True</span>\n</code></pre></div>\n<p>// UPDATE: this one works, was missing \":= match x\" with <br>\nin the end I want to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- this currently fails</span>\n    <span class=\"k\">have</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">bs.length</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">eq</span><span class=\"o\">]</span>\n    <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 314757262,
        "sender_full_name": "Dmitry Ivankov",
        "timestamp": 1670528662
    },
    {
        "content": "<p>Extra debugging</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">bs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"c1\">-- this one is ok</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"c1\">-- this one fails</span>\n<span class=\"c1\">--    have : x = (a::bs) := by rfl</span>\n<span class=\"c1\">--    have : bs.length.succ = (a::bs).length := by apply List.length_cons</span>\n<span class=\"c1\">--    have lt : bs.length &lt; x.length := by simp</span>\n    <span class=\"n\">True</span>\n</code></pre></div>\n<p>fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsolved</span> <span class=\"n\">goals</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.55</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>other commented-out have-s also fail</p>\n<p>this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">True</span>\n</code></pre></div>\n<p>and this fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n    <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 314766568,
        "sender_full_name": "Dmitry Ivankov",
        "timestamp": 1670531814
    },
    {
        "content": "<p>Can you explain what you're trying to accomplish here?</p>",
        "id": 314771142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670533395
    },
    {
        "content": "<p>In particular, it's confusing that there is no type declared for any of your functions</p>",
        "id": 314771558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1670533508
    },
    {
        "content": "<p>The issue in the original code is that lean has no way of telling what you're trying to define</p>",
        "id": 314771565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1670533512
    },
    {
        "content": "<p>overall context is trying to prove termination for code like following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prob</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">l</span> <span class=\"n\">where</span>\n  <span class=\"n\">gozeroes</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n   <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">rst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gozeroes</span> <span class=\"n\">acc.succ</span> <span class=\"n\">rst</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">acc</span> <span class=\"n\">l</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n   <span class=\"bp\">|</span> <span class=\"n\">q</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">rst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>  <span class=\"c1\">-- skip one zero and process zeroes</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">::</span> <span class=\"n\">rst</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span>\n        <span class=\"c1\">--all below fails</span>\n        <span class=\"c1\">--have : q = x :: rst := by rfl</span>\n        <span class=\"c1\">--have : q = l := by rfl</span>\n        <span class=\"c1\">--have : l = (0 :: rst) := by simp_all</span>\n        <span class=\"c1\">--have : l = (x :: rst) := by simp_all</span>\n        <span class=\"c1\">--have : rst.length &lt; l.length := by ...</span>\n        <span class=\"n\">gozeroes</span> <span class=\"n\">acc</span> <span class=\"n\">rst</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">acc</span> <span class=\"n\">rst</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n                 <span class=\"n\">gozeroes</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- gozeroes recursed into go without reduction</span>\n</code></pre></div>\n<p>was confused by not being able to give hints to termination checker<br>\nbut actually termination_by can be tweaked to work without extra hints and following resolves my overall goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">prob</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">l</span> <span class=\"n\">where</span>\n  <span class=\"n\">gozeroes</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n   <span class=\"bp\">|</span> <span class=\"n\">l</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">rst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"c1\">-- removing shadowing of l with l@ makes termination checker fail</span>\n     <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gozeroes</span> <span class=\"n\">acc.succ</span> <span class=\"n\">rst</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">acc</span> <span class=\"n\">l</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n   <span class=\"bp\">|</span> <span class=\"n\">q</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">rst</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>  <span class=\"c1\">-- skip one zero and process zeroes</span>\n        <span class=\"n\">gozeroes</span> <span class=\"n\">acc</span> <span class=\"n\">rst</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">acc</span> <span class=\"n\">rst</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">l.length</span>\n                 <span class=\"n\">gozeroes</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">l.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>but I'm still unsure why have-s can't establish scrutinee &lt;-&gt; matched relations</p>",
        "id": 314773028,
        "sender_full_name": "Dmitry Ivankov",
        "timestamp": 1670534088
    },
    {
        "content": "<p>Cleaned up version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- count number of zeroes except for the first zeros in each consecutive run of zeroes</span>\n<span class=\"kd\">def</span> <span class=\"n\">prob</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">go</span> <span class=\"mi\">0</span> <span class=\"n\">l</span> <span class=\"n\">where</span>\n  <span class=\"n\">gozeroes</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n   <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">rst</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gozeroes</span> <span class=\"n\">acc.succ</span> <span class=\"n\">rst</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">rst</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- equality holds but how to prove it?</span>\n        <span class=\"n\">go</span> <span class=\"n\">acc</span> <span class=\"n\">l</span>\n  <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">acc</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span>\n   <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">rst</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span>  <span class=\"c1\">-- skip one zero and process zeroes</span>\n        <span class=\"n\">gozeroes</span> <span class=\"n\">acc</span> <span class=\"n\">rst</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">acc</span> <span class=\"n\">rst</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">l.length</span>\n                 <span class=\"n\">gozeroes</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">l.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>termination checker is happy but I don't see a way to fix \"sorry\", and without that line termination checker isn't happy. Workaround is to alias (x::rst) as l in gozeroes (also can remove l argument and \"match l\" wrapping), then termination checker is happy again</p>",
        "id": 314774699,
        "sender_full_name": "Dmitry Ivankov",
        "timestamp": 1670534692
    },
    {
        "content": "<p>Or even shorter example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">countdown</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"n\">z</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"k\">let</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"n\">x.pred</span> <span class=\"c1\">-- \"y\" would work as well as \"z.pred\", but let's use \"x.pred\" because \"x\" is also in scope</span>\n   <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- is it possible to prove this? or that \"z=x\"?</span>\n   <span class=\"c\">/-</span><span class=\"cm\"> without \"have\" we'll get</span>\n<span class=\"cm\">failed to prove termination, possible solutions:</span>\n<span class=\"cm\">  - Use `have`-expressions to prove the remaining goals</span>\n<span class=\"cm\">  - Use `termination_by` to specify a different well-founded relation</span>\n<span class=\"cm\">  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal</span>\n<span class=\"cm\">x y : Nat</span>\n<span class=\"cm\">x_pred : Nat := Nat.pred x</span>\n<span class=\"cm\">⊢ Nat.pred x &lt; Nat.succ y</span>\n<span class=\"cm\">   -/</span>\n   <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">countdown</span> <span class=\"n\">x_pred</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">countdown</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"c1\">-- same as the default but with better error message</span>\n</code></pre></div>\n<p>For my current thing just not referring to outer name of function argument works well enough, maybe this is never an issue and can be resolved by capturing matched name. But still not sure if it would be possible to automatically have a proof \"x=z\" or is it maybe contradicting how lean works</p>",
        "id": 314782034,
        "sender_full_name": "Dmitry Ivankov",
        "timestamp": 1670537614
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">countdown</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"k\">let</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"n\">x.pred</span>\n   <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x_pred</span> <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 314783169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538073
    },
    {
        "content": "<p>the <code>e :</code> syntax gives you a proof that <code>x</code> is equal to the cases in the match</p>",
        "id": 314783215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670538096
    }
]