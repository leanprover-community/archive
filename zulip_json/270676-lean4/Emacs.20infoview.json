[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/352090410\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andr√©s Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Announcing.20ProofWidgets4/near/352082187\">said</a>:</p>\n<blockquote>\n<p>is there any hope whatsoever for this to work in emacs?</p>\n</blockquote>\n<p>A while ago I conjectured <a href=\"https://github.com/leanprover/lean4/issues/737\">a concrete plan</a> for how that could work, but so far no one has attempted an implementation, as far as I know. One disadvantage of the plan is that it's quite specific to the emacs GUI, requires native, platform-specific code for emacs-webkit, and emacs-webkit itself has not received maintenance since 2021. A potential alternative, which would even work with terminal-based emacs when the terminal emulator is running in an otherwise graphical environment, would be to spawn a separate browser window (probably electron or something like it) and orchestrate its behavior from within emacs.</p>\n</blockquote>\n<p>I'm contemplating writing this integration for emacs, and my inital idea is to just use a http server and websockets (via <a href=\"https://github.com/skeeto/emacs-web-server\"><code>simple-httpd</code></a> and <a href=\"http://emacs-websocket\"><code>websocket</code></a>). This way it would in a browser but also inside emacs built with xwidgets or webkit. Do you think this could work? I'm comfortable with elisp but I have basically zero experience with React, typescript and LSP.</p>\n<p>Also, reading the EditorApi interface in infoviewApi.ts I wonder if it would be possible or better to have the infoview be served in a localhost port by the lean server itself. This way it would have direct access to all those methods in the EditorApi interface and would basically not require writing integrations for new editors, right?</p>",
        "id": 357429764,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1683766407
    },
    {
        "content": "<p>Woo, it would be awesome if someone finally implements this :) Do I understand it correctly that your intention is to build a infoview-server which serves the infoview as a webpage so that it can be opened either from a separate browser, or inside emacs using one of the many browser plugins?</p>\n<blockquote>\n<p>wonder if it would be possible or better to have the infoview be served in a localhost port by the lean server itself.</p>\n</blockquote>\n<p>Do you mean that it would be better for the Lean server to respond to HTTP requests in a manner similar to the proposed infoview-server?</p>",
        "id": 357432339,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683767707
    },
    {
        "content": "<blockquote>\n<p>Do you mean that it would be better for the Lean server to respond to HTTP requests in a manner similar to the proposed infoview-server?</p>\n</blockquote>\n<p>Yes, I wonder if there is something specific to the infoview that requires it to communicate with the editor directly, something that the server itself couldn't do. If the LSP server can handle all the required commands and communicate with the editor then it could also serve a http page with the infoview, right? And communicate with it somehow (websockets for instance).</p>",
        "id": 357433510,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1683768353
    },
    {
        "content": "<p>I think the reason for 'why is it like this' is that 'it was implemented that way' :) I don't believe we really ever considered your proposed architecture. I could see it having some advantages; notably, the editor would no longer have to proxy LSP messages between the infoview and the server, so support for <code>sendClient*/(un)subscribeServer*/(un)subscribe*</code> (infoviewApi.ts) would be put in once, in the Lean server, rather than in every editor. I think <code>create/closeRpcSession</code> might be unavoidably editor-bound by virtue of the fact that we need <em>something</em> on the clientside to keep the RPC session alive. Other functionality such as inserting text or copying to clipboard can be implemented via LSP server-&gt;client messages, possibly custom ones if the LSP standard doesn't support something.</p>\n<p>Having said all that, writing an HTTP server that can reliably host the infoview and linking it into the Lean server, and handle websocket communication with the infoview, would be a serious undertaking. Is it really worth it? The API surface of <code>EditorApi</code> is not that huge. In <code>vscode-lean4</code> the entire implementation is about 150 lines. The server rewrite would be orders of magnitude more work than writing 150 lines.</p>",
        "id": 357435279,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683769275
    },
    {
        "content": "<p>Oh, I guess I was a bit confused with React. I was assuming the infoview could be served like a static web page (with the React app running as JS), that's why I was talking about serving it from emacs or the lean server via HTTP.</p>",
        "id": 357439469,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1683771437
    },
    {
        "content": "<p>Sorry, I think this means I would have to write a wrapper to serve it via something like node, and I'm very unfamiliar with js development. If someone wants to do that perhaps I can help on the emacs side, but I will leave this project aside for now...</p>",
        "id": 357440849,
        "sender_full_name": "Lucas Viana",
        "timestamp": 1683772153
    },
    {
        "content": "<p>No, it totally can be served as a static webpage. There is no server-side rendering. But even just serving a static webpage properly is non-trivial if you want it work across different environments, browsers, with HTTPS, etc. VSCode does this for us with its webview infrastructure. Also, we have to serve a few additional files that the infoview loads (the JS), so the HTTP server has to read those in somehow.</p>",
        "id": 357443054,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683773079
    }
]