[
    {
        "content": "<p>Which one is better?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>   <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Pair2</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>   <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair2</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"n\">q</span>\n</code></pre></div>",
        "id": 323589831,
        "sender_full_name": "Gabriel gomez",
        "timestamp": 1674682830
    },
    {
        "content": "<p>I suppose the difference is option 2 doesn't allow to pattern match on value (a :x) and option 1 allow us  to do it.</p>",
        "id": 323590552,
        "sender_full_name": "Gabriel gomez",
        "timestamp": 1674683141
    },
    {
        "content": "<p>sure you can still pattern match on it, the argument is still down in the <code>mk</code> as an auto implicit, it is just that the result type changed. But I don't see a reason to index a pair by this parameter value in this way from the top of my head.</p>",
        "id": 323592042,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1674683707
    },
    {
        "content": "<p>Well, I was translating bad some haskell code from the paper: <a href=\"http://strictlypositive.org/CJ.pdf\">http://strictlypositive.org/CJ.pdf</a><br>\nI fixed my translation and it's compiling at least. I'll continue checking the paper.</p>",
        "id": 323593326,
        "sender_full_name": "Gabriel gomez",
        "timestamp": 1674684193
    },
    {
        "content": "<p>If I understand the very little of the paper that I read correctly, the most accurate translation would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Pair3</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span>  <span class=\"n\">q</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Pair3</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>since then you have <code>Pair3 x p q : x -&gt; Type</code>. (It probably wouldn't hurt to make <code>x</code> implicit.)</p>",
        "id": 323597120,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674685834
    },
    {
        "content": "<p>There's a big difference between <code>Pair</code> and <code>Pair2</code> by the way. <code>Pair2 x a p q</code> can be thought of as just those terms of <code>Pair x p q</code> of the form <code>Pair.mk {a} _ _</code> (ones with a specific value of <code>a</code>).</p>",
        "id": 323597471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1674686006
    }
]