[
    {
        "content": "<p>Is there a way of having a typeclass inherit two separate <code>OfNat</code> instances? I'm running into the following issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">OfNat</span> <span class=\"n\">K</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">K</span> <span class=\"mi\">4</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">Int</span> <span class=\"n\">where</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">@</span><span class=\"n\">Foo.toOfNat</span> <span class=\"n\">Int</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">ofNat</span> <span class=\"c1\">-- 3</span>\n<span class=\"k\">#eval</span> <span class=\"bp\">@</span><span class=\"n\">Foo.toOfNat_1</span> <span class=\"n\">Int</span> <span class=\"n\">_</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">ofNat</span> <span class=\"c1\">-- 3 (want 4)</span>\n</code></pre></div>\n<p>I think I understand what's going on with the typeclass resolution, but I feel like there should be a way to specify to Lean how I expect each of the <code>OfNat</code> instances to be filled.</p>",
        "id": 328100233,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676492130
    },
    {
        "content": "<p>Something very weird is going on with your type, that is probably not what you expect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">constructor</span> <span class=\"n\">Int.Foo.mk.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">toOfNat</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">K</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">K</span>\n<span class=\"kd\">def</span> <span class=\"n\">Int.Foo.toOfNat_1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">OfNat</span> <span class=\"n\">K</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">K</span> <span class=\"n\">self</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"mi\">3</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 328109181,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1676495442
    },
    {
        "content": "<blockquote>\n<p>Is there a way of having a typeclass inherit two separate OfNat instances? I'm running into the following issue:</p>\n</blockquote>\n<p>As you've observed, no.  There is a name clash between the two <code>ofNat</code> fields.</p>",
        "id": 328129586,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676504636
    },
    {
        "content": "<p>This is the reason why we have the <code>Zero</code> and <code>One</code> type classes in mathlib btw.</p>",
        "id": 328129648,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676504651
    },
    {
        "content": "<p>Thanks! I figured it was some name clash issue.</p>",
        "id": 328130045,
        "sender_full_name": "Matej Penciak",
        "timestamp": 1676504881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455674\">Matej Penciak</span> has marked this topic as resolved.</p>",
        "id": 328130125,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676504924
    }
]