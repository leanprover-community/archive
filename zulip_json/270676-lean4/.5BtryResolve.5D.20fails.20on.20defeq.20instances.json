[
    {
        "content": "<p>This is a minimised version of the issue raised by <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span>  <a href=\"#narrow/stream/287929-mathlib4/topic/Diamond.20issue.20in.20Algebra.2EStar.2EBasic/near/319487321\">here</a>, which <span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> alerted me to during the mathlib porting meeting today. Lean 4 is failing to solve</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommSemiring.toNonUnitalSemiring</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toNonUnitalCommSemiring</span> <span class=\"n\">R</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"n\">R</span>\n                <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))</span> <span class=\"bp\">≟</span> <span class=\"bp\">@</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalRing.toNonUnitalSemiring</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalRing</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>even though the proof is <code>rfl</code>. There are two routes CommRing -&gt; B -&gt; C -&gt; NonUnitalSemiring and CommRing -&gt; D -&gt; E -&gt; NonUnitalSemiring and they're defeq. Here's a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalCommRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalRing</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">NonUnitalCommRing.toNonUnitalCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalCommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NonUnitalCommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">CommSemiring.toNonUnitalCommSemiring</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">NonUnitalCommSemiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">CommRing.toNonUnitalCommRing</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalCommRing</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- Two routes from CommRing to NonUnitalSemiring:</span>\n<span class=\"c1\">-- 1 : via CommSemiring -&gt; NonUnitalCommSemiring</span>\n<span class=\"c1\">-- 2 : via NonUnitalCommRing -&gt; NonUnitalRing</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">StarRing'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">starGizmo</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">starGizmo_foo</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">starGizmo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- error: failed to synthesize instance</span>\n<span class=\"c1\">--  StarRing' R</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n\n<span class=\"cm\">set_option pp.all true</span>\n<span class=\"cm\">set_option pp.universes false</span>\n<span class=\"cm\">set_option trace.Meta.synthInstance true</span>\n\n<span class=\"cm\">[Meta.synthInstance] ❌ @StarRing' R</span>\n<span class=\"cm\">      (@NonUnitalCommSemiring.toNonUnitalSemiring R</span>\n<span class=\"cm\">        (@CommSemiring.toNonUnitalCommSemiring R (@CommRing.toCommSemiring R inst✝¹))) ▼</span>\n<span class=\"cm\">  [] new goal @StarRing' R</span>\n<span class=\"cm\">        (@NonUnitalCommSemiring.toNonUnitalSemiring R</span>\n<span class=\"cm\">          (@CommSemiring.toNonUnitalCommSemiring R (@CommRing.toCommSemiring R inst✝¹))) ▶</span>\n<span class=\"cm\">  [] ❌ apply inst✝ to @StarRing' R</span>\n<span class=\"cm\">        (@NonUnitalCommSemiring.toNonUnitalSemiring R</span>\n<span class=\"cm\">          (@CommSemiring.toNonUnitalCommSemiring R (@CommRing.toCommSemiring R inst✝¹))) ▼</span>\n<span class=\"cm\">    [tryResolve] ❌ @StarRing' R</span>\n<span class=\"cm\">          (@NonUnitalCommSemiring.toNonUnitalSemiring R</span>\n<span class=\"cm\">            (@CommSemiring.toNonUnitalCommSemiring R</span>\n<span class=\"cm\">              (@CommRing.toCommSemiring R</span>\n<span class=\"cm\">                inst✝¹))) ≟ @StarRing' R</span>\n<span class=\"cm\">          (@NonUnitalRing.toNonUnitalSemiring R</span>\n<span class=\"cm\">            (@NonUnitalCommRing.toNonUnitalRing R (@CommRing.toNonUnitalCommRing R inst✝¹)))</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommSemiring.toNonUnitalSemiring</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toNonUnitalCommSemiring</span> <span class=\"n\">R</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"n\">R</span>\n                <span class=\"n\">inst</span><span class=\"o\">)))</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalRing.toNonUnitalSemiring</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalRing</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>This is not a contrived example: this happens in mathlib4. Is this a bug in typeclass resolution, or a feature?</p>\n<p>Remark: the issue was worked around in the original post (nobody seems to be entirely sure how but the relevant PR is now merged), but it's come up again in <a href=\"https://github.com/leanprover-community/mathlib4/pull/1860\">mathlib4#1860</a>. Here the failing [tryResolve] is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">DivisionSemiring.toSemiring</span> <span class=\"n\">R</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semifield.toDivisionSemiring</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toSemifield</span> <span class=\"n\">R</span>\n                  <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))))</span> <span class=\"bp\">≟</span> <span class=\"bp\">@</span><span class=\"n\">StarRing</span> <span class=\"n\">R</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalRing.toNonUnitalSemiring</span> <span class=\"n\">R</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalCommRing.toNonUnitalRing</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toNonUnitalCommRing</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Field.toCommRing</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p>so it's Field -&gt; A -&gt; B -&gt; C -&gt; D -&gt; NonUnitalSemiring vs Field -&gt; E -&gt; F -&gt; G -&gt; NonUnitalSemiring and again these paths are defeq (they are both \"forget a bunch of stuff\").</p>",
        "id": 323920295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674771618
    },
    {
        "content": "<p>In case my original message was too noisy, here's the issue highlighted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">starGizmo_foo</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">StarRing'</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">starGizmo</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- error: failed to synthesize instance</span>\n<span class=\"c1\">--  StarRing' R</span>\n</code></pre></div>\n<p>That shouldn't happen. The issue isn't a universe issue, it's that Lean seems to be finding the correct instance and then rejecting it for reasons which I can't diagnose.</p>",
        "id": 324087062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674835042
    }
]