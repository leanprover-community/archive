[
    {
        "content": "<p>I haven't followed the discussions about the very complicated issue of having a Lean library requiring more than Mathlib (and its dependency). What is the state of the art? Concretely, does anyone knows how to start a library depending on Mathlib and Partax? Right now Partax has lean toolchain 4.3.0 and Mathlib has lean toolchain 4.4.0-rc1. I would like to tell lake: use Lean 4.3.0 in my project with the latest Mathlib compatible with 4.3.0 and the latest Partax. I tried various things but without any luck. Note that using any version of Mathlib compatible with 4.3.0 would already be a good start. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 407769234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702485881
    },
    {
        "content": "<p>Note this should be a trivial case since Mathlib and Partax have no common dependency.</p>",
        "id": 407769371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702485934
    },
    {
        "content": "<p>Also, fortunately, Mathlib has <a href=\"https://github.com/leanprover-community/mathlib4/tags\">release tags</a> that mirror the Lean 4 version, so you should just be able to <code>require mathlb from &lt;url&gt; @ \"v4.3.0\"</code>.</p>",
        "id": 407769613,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702486009
    },
    {
        "content": "<p>This is the very first thing I tried.</p>",
        "id": 407769709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486037
    },
    {
        "content": "<p>I tried editing the project lean-toolchain and lakefile to put 4.3.0 everywhere.</p>",
        "id": 407769819,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486080
    },
    {
        "content": "<p>Oh! What happened?</p>",
        "id": 407769881,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702486091
    },
    {
        "content": "<p>But somehow std still gets messed up.</p>",
        "id": 407769891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486094
    },
    {
        "content": "<p>That's weird.</p>",
        "id": 407770116,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702486173
    },
    {
        "content": "<p>I'll try again from the beginning.</p>",
        "id": 407770168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486192
    },
    {
        "content": "<p>There are so many steps and each step can mess up the work of the previous step so the order is crucial.</p>",
        "id": 407770283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486213
    },
    {
        "content": "<p>Weirdly enough, it looks like it worked this time.</p>",
        "id": 407770591,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486315
    },
    {
        "content": "<p>As an aside, if you plan to use Partax for compiling large parser categories (e.g., ones including <code>term</code>), I want to warn you that it will take some time (a few minutes), as I have not had time to work on optimizing the parser compiler.</p>",
        "id": 407771573,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702486614
    },
    {
        "content": "<p>I understand this needs to be avoided. I'd like to define my own syntax category and compile that.</p>",
        "id": 407771712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486659
    },
    {
        "content": "<p>Great! In that case, it should hopefully work well!</p>",
        "id": 407771866,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702486698
    },
    {
        "content": "<p>Is there any documentation besides the README?</p>",
        "id": 407771925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486721
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">test</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">compile_parser</span> <span class=\"n\">Lean.Parser.Category.test</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">testParser</span>\n</code></pre></div>\n<p>fails <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 407772145,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702486802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Current.20state.20of.20dependency.20management/near/407771573\">said</a>:</p>\n<blockquote>\n<p>As an aside, if you plan to use Partax for compiling large parser categories (e.g., ones including <code>term</code>), I want to warn you that it will take some time (a few minutes), as I have not had time to work on optimizing the parser compiler.</p>\n</blockquote>\n<p>Actually maybe I misunderstood that comment. The syntax I want to be able to parse obviously <em>contain</em> terms. Does that mean I can't use Partax? And those few minutes, are they only when building the parser or also whenever using the parser?</p>",
        "id": 407773993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702487342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Current.20state.20of.20dependency.20management/near/407771925\">said</a>:</p>\n<blockquote>\n<p>Is there any documentation besides the README?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Sadly, not much. However, this case is covered by the README. To compile parser categories, one uses <code>compile_parser_category</code> instead of <code>compile_parser</code>.</p>",
        "id": 407774168,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702487399
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">test</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">compile_parser_category</span> <span class=\"n\">Lean.Parser.Category.test</span>\n</code></pre></div>\n<p>but it also fails</p>",
        "id": 407774429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702487483
    },
    {
        "content": "<p>It says: <code>parser 'Lean.Parser.Category.test' is missing a 'keywords : NameSet' definition</code></p>",
        "id": 407774473,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702487502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Current.20state.20of.20dependency.20management/near/407773993\">said</a>:</p>\n<blockquote>\n<p>The syntax I want to be able to parse obviously <em>contain</em> terms. Does that mean I can't use Partax? And those few minutes, are they only when building the parser or also whenever using the parser?</p>\n</blockquote>\n<p>You can use Partax, it just means compiling the <code>term</code> category will take a few minutes.  The compiled parser will be fast, just the building is slow. You can cache the result by sticking the compilation of <code>term</code> in a separate module. (Partax does this with <code>Partax.Test.LCompile</code>.)</p>",
        "id": 407774497,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702487517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Current.20state.20of.20dependency.20management/near/407774429\">said</a>:</p>\n<blockquote>\n<p>I tried<br>\n[...]<br>\nbut it also fails</p>\n</blockquote>\n<p>Sorry, I should have been more specific. To compile a category, use <code>compile_parser_category &lt;category-name&gt;</code>. For instance, <code>compile_parser_category test</code> in your example.</p>",
        "id": 407774733,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702487599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Also, I did verify that Partax builds on <code>v4.4.0-rc1</code>, so you should also be able to use it with the latest Mathlib.</p>",
        "id": 407774998,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702487701
    },
    {
        "content": "<p>Ok, <code>compile_parser_category test</code> works (I mean it does not bring any error message), thanks.</p>",
        "id": 407775134,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702487746
    },
    {
        "content": "<p>Is the next step to put <code>import Partax.Test.LCompile</code> to get terms?</p>",
        "id": 407775222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702487764
    },
    {
        "content": "<p>Here is a complete version of your example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">test</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">test</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">compile_parser_category</span> <span class=\"n\">test</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test.run'</span> <span class=\"s2\">\"foo\"</span> <span class=\"c1\">-- Except String (TSyntax `test)</span>\n</code></pre></div>",
        "id": 407775252,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702487774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Current.20state.20of.20dependency.20management/near/407775222\">said</a>:</p>\n<blockquote>\n<p>Is the next step to put <code>import Partax.Test.LCompile</code> to get terms?</p>\n</blockquote>\n<p>That will only get you the core terms/commands. If you wan tthe Mathlib ones, you will need to do the same as <code>LCompile</code> but after an <code>import Mathlib</code> (and an <code>open scoped</code> of any relevant namespace defining more scoped terms/commands).</p>",
        "id": 407775363,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702487825
    },
    {
        "content": "<p>Did you actually ever tried that? How long did it take?</p>",
        "id": 407776922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702488394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> No, I have not tried compiling Mathlib parsers. I do not imagine it will take orders of magnitude longer (e.g., it will likely take several minutes rather than a few). The definitions Partax creates are not <code>mutual</code>, so the time should scale approximately linearly (especially as the primary time sink is elaboration time).</p>",
        "id": 407777260,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702488518
    },
    {
        "content": "<p>I can go give it a shot an report back if you want.</p>",
        "id": 407777957,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702488794
    },
    {
        "content": "<p>I can already tell you 15 minutes are not enough on my computer.</p>",
        "id": 407778057,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702488834
    },
    {
        "content": "<p>wow</p>",
        "id": 407778149,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702488854
    },
    {
        "content": "<p>I'll have lunch now and see whether a lunch time is enough.</p>",
        "id": 407778164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702488863
    },
    {
        "content": "<p>I wonder how many parsers mathlib defines...</p>",
        "id": 407778226,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702488896
    },
    {
        "content": "<p>not that many</p>",
        "id": 407778404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702488965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Note this includes <code>syntax</code>/<code>notation</code> declarations.</p>",
        "id": 407778453,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702488992
    },
    {
        "content": "<p>at least not term parsers, but I suppose the term grammar is mutual with <code>tactic</code> and mathlib defines a lot of those</p>",
        "id": 407778459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702488995
    },
    {
        "content": "<p>Ah, yes, <code>term</code> includes <code>tactic</code>.</p>",
        "id": 407778522,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702489027
    },
    {
        "content": "<p>is it possible to not go through the elaborator here?</p>",
        "id": 407778609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702489064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, that would be the optimization I should spend time on.</p>",
        "id": 407778651,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702489081
    },
    {
        "content": "<p>I just haven't had the time (no pun intended).</p>",
        "id": 407778744,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702489104
    },
    {
        "content": "<p>I'm sure you have better things to do with your time <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 407778787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702489123
    },
    {
        "content": "<p>35 minutes is not enough, so I'll declare this approach unsuitable for anything involving Mathlib.</p>",
        "id": 407780863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702489915
    },
    {
        "content": "<p>what is your motivation for using Partax in the first place?</p>",
        "id": 407781026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702489961
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  That's probably fair.</p>",
        "id": 407781035,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702489965
    },
    {
        "content": "<p>Mario, the context is Lean verbose, my controlled natural language for teaching library. I ported the help tactic which suggest tactics. Currently this help tactic outputs strings but there is nothing checking that those strings are valid tactics. If I modify the syntax of a tactic and forget to update the help tactic then users get misleading advice. So I tried to build syntax in the help tactic. But this is super painful. So my next idea was to keep producing strings but try to parse them before suggesting them. This is where Partax sounded useful. But I guess I should simply try <code>runParserCategory</code>.</p>",
        "id": 407781634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490188
    },
    {
        "content": "<p>yes you should</p>",
        "id": 407781691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490213
    },
    {
        "content": "<p>although, it's also strange that your syntax wouldn't parse</p>",
        "id": 407781783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490245
    },
    {
        "content": "<p>Yes, in the context of a tactic, <code>runParserCategory</code> is probably much better anyway (as there is already a proper Lean environment).</p>",
        "id": 407781796,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702490251
    },
    {
        "content": "<p>in what way is it painful to build syntax?</p>",
        "id": 407781857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Current.20state.20of.20dependency.20management/near/407781783\">said</a>:</p>\n<blockquote>\n<p>although, it's also strange that your syntax wouldn't parse</p>\n</blockquote>\n<p>I don't understand what you mean.</p>",
        "id": 407782262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490383
    },
    {
        "content": "<p>if you pretty print syntax it always parses (outside a few rare edge cases)</p>",
        "id": 407782375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490412
    },
    {
        "content": "<p>so it is definitely recommended to construct syntax and pretty print it instead of building a string</p>",
        "id": 407782506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490453
    },
    {
        "content": "<p>this is how <code>tryThis</code> works</p>",
        "id": 407782570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490466
    },
    {
        "content": "<p>The problem is not to pretty-print syntax, it is to build syntax. Mostly because the quotation syntax is so brittle and needs random type ascriptions all over the place.</p>",
        "id": 407782606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490473
    },
    {
        "content": "<p>hm, my recommendation is still to use syntax quotations but maybe there is a specific issue that comes up?</p>",
        "id": 407782932,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490545
    },
    {
        "content": "<p>It always end up working, sometimes after getting help, but it's a huge work compared to building a string.</p>",
        "id": 407783203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490614
    },
    {
        "content": "<p>So building a string and parsing it seems a lot easier.</p>",
        "id": 407783264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490625
    },
    {
        "content": "<p>well you are talking about brittle solutions, producing a string is very brittle</p>",
        "id": 407783432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490653
    },
    {
        "content": "<p>I know that string production alone is super brittle, this is why I'm trying various ways to produce syntax.</p>",
        "id": 407783794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490749
    },
    {
        "content": "<p>well reparsing won't help, it will just change the way that the tactic breaks</p>",
        "id": 407783919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490789
    },
    {
        "content": "<p>The goal is to catch breaking before users see it.</p>",
        "id": 407783970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490812
    },
    {
        "content": "<p>it really sounds to me like syntax quotations are the right way to go, even if they are fiddly</p>",
        "id": 407784090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490857
    },
    {
        "content": "<p>The library has tests, but currently they don't try the suggestions.</p>",
        "id": 407784121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490860
    },
    {
        "content": "<p>because only you have to deal with that, not users</p>",
        "id": 407784143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702490869
    },
    {
        "content": "<p>Ok, I'll try again quotations. Let's pick an example. Given <code>n : Name</code>, a string such as \" ≥ \" and <code>e : Expr</code>, how would you produce syntax for <code>n ≥ e</code>?</p>",
        "id": 407784414,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702490976
    },
    {
        "content": "<p>there is no \"such as\" for syntax in that position, you would have to pattern match it and handle them separately</p>",
        "id": 407784553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702491018
    },
    {
        "content": "<p>I mean without first producing a string and then parsing it...</p>",
        "id": 407784555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702491019
    },
    {
        "content": "<p>Ok, let's say the relation is fixed.</p>",
        "id": 407784626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702491061
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"n\">n</span>\n<span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"s2\">\"≥\"</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">≥</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 407784634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702491064
    },
    {
        "content": "<p>Does that really work without delaborating <code>e</code> first?</p>",
        "id": 407784702,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702491095
    },
    {
        "content": "<p>oh I missed that <code>e</code> is not syntax</p>",
        "id": 407784747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702491112
    },
    {
        "content": "<p>no you need to call <code>delab</code> on it first</p>",
        "id": 407784786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702491122
    },
    {
        "content": "<p>Ok, so this is indeed a lot of work. Doable but a lot of work.</p>",
        "id": 407785014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702491213
    },
    {
        "content": "<p>A related question: is there a convenient method similar to <code>runParserCategory</code> but which parses a maximal initial piece matching the syntax? Currently I solve this by copy-pasting and modifying from <code>runParserCategory</code>.</p>",
        "id": 407865066,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1702525932
    },
    {
        "content": "<p>no</p>",
        "id": 407865113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702525952
    }
]