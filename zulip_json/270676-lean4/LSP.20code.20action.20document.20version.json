[
    {
        "content": "<p>Here's the core Lean 4 code that constructs a <code>WorkspaceEdit</code> (part of the language server's response to a <code>textDocument/codeAction</code> request from the editor to implement \"Try this:\" suggestions):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofTextEdit</span> <span class=\"o\">(</span><span class=\"n\">uri</span> <span class=\"o\">:</span> <span class=\"n\">DocumentUri</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">te</span> <span class=\"o\">:</span> <span class=\"n\">TextEdit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WorkspaceEdit</span> <span class=\"o\">:=</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> [note], there is a bug in vscode where not including the version will cause an error,</span>\n<span class=\"cm\">  even though the version field is not used to validate the change.</span>\n\n<span class=\"cm\">  References:</span>\n<span class=\"cm\">  - [a fix in the wild](https://github.com/stylelint/vscode-stylelint/pull/330/files).</span>\n<span class=\"cm\">    Note that the version field needs to be present, even if the value is `undefined`.</span>\n<span class=\"cm\">  - [angry comment](https://github.com/tsqllint/tsqllint-vscode-extension/blob/727026fce9f8c6a33d113373666d0776f8f6c23c/server/src/server.ts#L70)</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">uri</span><span class=\"o\">,</span> <span class=\"n\">version</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n  <span class=\"n\">ofTextDocumentEdit</span> <span class=\"o\">{</span> <span class=\"n\">textDocument</span> <span class=\"o\">:=</span> <span class=\"n\">doc</span><span class=\"o\">,</span> <span class=\"n\">edits</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">te</span><span class=\"o\">]}</span>\n</code></pre></div>\n<p>I'd like to replace it with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofTextEdit</span> <span class=\"o\">(</span><span class=\"n\">doc</span> <span class=\"o\">:</span> <span class=\"n\">VersionedTextDocumentIdentifier</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">te</span> <span class=\"o\">:</span> <span class=\"n\">TextEdit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WorkspaceEdit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ofTextDocumentEdit</span> <span class=\"o\">{</span> <span class=\"n\">textDocument</span> <span class=\"o\">:=</span> <span class=\"n\">doc</span><span class=\"o\">,</span> <span class=\"n\">edits</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">te</span><span class=\"o\">]}</span>\n</code></pre></div>\n<p>Here are all the changes that would be needed: in <a href=\"https://github.com/bustercopley/lean4/commit/91367ccc1e611d63d1614cbc506808618ea40fd6\">core</a>[edit: updated] and in <a href=\"https://github.com/bustercopley/std4/commit/24f06b6cf99b12ba6af4f0114e36bd2fb21fff47\">Std</a>.</p>\n<ul>\n<li>I think the code is easier to understand, even without a comment</li>\n<li>It conforms to the LSP specification</li>\n<li>There is at least one LSP client which does validate the version number here, namely the Eglot client included in Emacs</li>\n</ul>\n<p>I have a <a href=\"https://github.com/bustercopley/lean4-mode\">fork</a> of <code>lean4-mode</code> which uses Eglot. It has a <a href=\"https://github.com/bustercopley/lean4-mode/commit/91367ccc1e611d63d1614cbc506808618ea40fd6\">workaround</a> for this issue. I <a href=\"https://debbugs.gnu.org/cgi/bugreport.cgi?bug=66552\">discussed</a> it with the author of Eglot and he encouraged me to raise it with the Lean 4 community.</p>",
        "id": 397333801,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697641684
    },
    {
        "content": "<p>The lean4-mode/Eglot workaround also addresses an issue that affects VS Code. All the code edits generated by <code>apply?</code> and friends have the same title, \"Apply 'Try this'\",  so they are indistinguishable in the menu. The official <code>lean4-mode</code> based on <code>lsp-mode</code> isn't affected. Here is a VS code screenshot.<br>\n<a href=\"/user_uploads/3121/ZeCFeZWm88wd9At00UkOGT5K/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ZeCFeZWm88wd9At00UkOGT5K/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ZeCFeZWm88wd9At00UkOGT5K/image.png\"></a></div>",
        "id": 397384255,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697663641
    },
    {
        "content": "<p>It might be worth opening a PR for this (with links to this Zulip thread to avoid duplicating discussion) so that it doesn't get forgotten</p>",
        "id": 397465401,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697707551
    },
    {
        "content": "<p><del>I won't forget <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. I don't want to rebase it onto <code>origin/master</code>, so I'll PR this if and when my existing PRs are accepted or rejected.</del><br>\n[Sorry, thinking of something else.]</p>",
        "id": 397466636,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697708004
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>. In <code>lean4</code>? (There's also a patch for <code>std4</code>.) Will I get in trouble if I don't open an RFC issue first?</p>",
        "id": 397467852,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697708462
    },
    {
        "content": "<p>You certainly won't get into trouble for opening the std4 PR. I can't comment on the RFC process for lean4.</p>",
        "id": 397469410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697709087
    },
    {
        "content": "<p>Great! I opened a self-contained std4 PR, <a href=\"https://github.com/leanprover/std4/pull/306\">#306</a></p>",
        "id": 397490694,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697716942
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>. Joe and Marc will make sure that the code ends up in the right places between Std and core.</p>",
        "id": 397591902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697758487
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span> should you ask to add Lean in the list <a href=\"https://github.com/joaotavora/eglot#connecting-to-a-server\">https://github.com/joaotavora/eglot#connecting-to-a-server</a>?</p>",
        "id": 397716380,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1697810494
    },
    {
        "content": "<p>I don't think so. You get <em>something</em> with out-of-the-box Eglot in Lean 4 files, but I wouldn't like to spend much time there. But try it for yourself and see what you think, if you want.</p>",
        "id": 397717414,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697810789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397467852\">said</a>:</p>\n<blockquote>\n<p>Thanks <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>. In <code>lean4</code>? (There's also a patch for <code>std4</code>.) Will I get in trouble if I don't open an RFC issue first?</p>\n</blockquote>\n<p>As discussed in the std4 issue, it's fine to open a core PR for the parts that belong in core without a corresponding RFC.</p>",
        "id": 397719801,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1697811512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397719801\">said</a>:</p>\n<blockquote>\n<p>As discussed in the std4 issue, it's fine to open a core PR for the parts that belong in core without a corresponding RFC.</p>\n</blockquote>\n<p>The sequencing is delicate. Ultimately I want to modify <code>WorkspaceEdit.ofTextEdit</code> in core, to take a <code>VersionedTextDocumentIdentifier</code> instead of a uri. This is a natural change there: it streamlines and simplifies. But it breaks Std and Mathlib. This sequence would work:</p>\n<ul>\n<li>Std merges [#306]</li>\n<li>Mathlib adopts the new Std functions <code>WorkspaceEdit.ofVersionedTextEdit</code> and <code>EditableDocument.versionedIdentifier</code> [*]</li>\n<li>Core modifies <code>.ofTextEdit</code> (which now has no uses in Std or Mathlib) and adds <code>EditableDocument.versionedIdentifier</code> [*]</li>\n<li>Mathlib switches back to using the core functions</li>\n<li>Std deletes the two new functions and uses the core versions</li>\n</ul>\n<p>[*] One of these would need a different name</p>\n<p>The alternative is to have three PRs (in core, std, mathlib) which all need to be merged at the same time.</p>",
        "id": 397735505,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697816023
    },
    {
        "content": "<p>I believe the typical process for these kinds of breaking changes so far is that the PR to core is merged and the PR to the downstream project waits until the next release (right <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>?).</p>",
        "id": 397736859,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1697816418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397719801\">said</a>:</p>\n<blockquote>\n<p>As discussed in the std4 issue, it's fine to open a core PR for the parts that belong in core without a corresponding RFC.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2721\">#2721</a></p>",
        "id": 397770609,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697832897
    },
    {
        "content": "<p>Yes. We typically just do the three PRs simultaneously. If you add the <code>blocked-by-core-release</code> label  on Mathlib, and the <code>depends on core changes</code> label on Std, it makes it easier to track.</p>",
        "id": 397777885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697837032
    },
    {
        "content": "<p>Best also to ping me directly so I know about them. :-)</p>",
        "id": 397777908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697837043
    },
    {
        "content": "<p>Ok. I will re-use the existing Std PR <a href=\"https://github.com/leanprover/std4/pull/306\">#306</a>. Will you send me an invitation for mathlib please?</p>",
        "id": 397782551,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697840210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> , <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I have updated (and squashed and rebased) std <a href=\"https://github.com/leanprover/std4/pull/306\">#306</a> to depend on core <a href=\"https://github.com/leanprover/lean4/pull/2721\">#2721</a>. I don't think I have the permission to add the <code>depends on core changes</code> label.</p>\n<p>The mathlib change is fairly tiny:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">index 6925f79f2..5a68902c5 100644</span>\n<span class=\"gd\">--- a/Mathlib/Tactic/Widget/Calc.lean</span>\n<span class=\"gi\">+++ b/Mathlib/Tactic/Widget/Calc.lean</span>\n<span class=\"gu\">@@ -21,7 +21,7 @@ open Lean Server RequestM</span>\n\n<span class=\"w\"> </span>/-- Code action to create a `calc` tactic from the current goal. -/\n<span class=\"w\"> </span>@[tactic_code_action calcTactic]\n<span class=\"gd\">-def createCalc : TacticCodeAction := fun params _snap ctx _stack node =&gt; do</span>\n<span class=\"gi\">+def createCalc : TacticCodeAction := fun _ _snap ctx _stack node =&gt; do</span>\n<span class=\"w\"> </span>  let .node (.ofTacticInfo info) _ := node | return #[]\n<span class=\"w\"> </span>  if info.goalsBefore.isEmpty then return #[]\n<span class=\"w\"> </span>  let eager := {\n<span class=\"gu\">@@ -37,7 +37,7 @@ def createCalc : TacticCodeAction := fun params _snap ctx _stack node =&gt; do</span>\n<span class=\"w\"> </span>      let goal := info.goalsBefore[0]!\n<span class=\"w\"> </span>      let goalFmt ← ctx.runMetaM {} &lt;| goal.withContext do Meta.ppExpr (← goal.getType)\n<span class=\"w\"> </span>      return { eager with\n<span class=\"gd\">-        edit? := some &lt;|.ofTextEdit params.textDocument.uri</span>\n<span class=\"gi\">+        edit? := some &lt;|.ofTextEdit doc.versionedIdentifier</span>\n<span class=\"w\"> </span>          { range := ⟨tacPos, endPos⟩, newText := s!\"calc {goalFmt} := by sorry\" }\n<span class=\"w\"> </span>      }\n<span class=\"w\"> </span>  }]\n</code></pre></div>",
        "id": 397785274,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697842161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, if you'd like to test it in place, you can edit the <code>lean-toolchain</code> in the std PR to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">releases</span><span class=\"o\">:</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"mi\">2721</span>\n</code></pre></div>\n<p>Then CI will run against your update to Lean.</p>",
        "id": 397806311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697857186
    },
    {
        "content": "<p>(Same applied if you want to make a Mathlib PR.)</p>",
        "id": 397806321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697857197
    },
    {
        "content": "<p>The next release will be at the end of October.</p>",
        "id": 397806420,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697857248
    },
    {
        "content": "<p>I can do that if you want, but I have built and tested Lean and run the steps of Std's CI, locally, so I'm satisfied both PRs will pass CI.</p>",
        "id": 397806615,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697857354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, can you send me an invitation to the Mathlib github repo?</p>",
        "id": 397806711,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697857440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, done!</p>",
        "id": 397808226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697858583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397806311\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span>, if you'd like to test it in place, you can edit the <code>lean-toolchain</code> in the std PR to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">releases</span><span class=\"o\">:</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"mi\">2721</span>\n</code></pre></div>\n<p>Then CI will run against your update to Lean.</p>\n</blockquote>\n<p>Done, <del>but the CI is not running. I introduced and then resolved a merge conflict when I changed <code>lean-toolchain</code>. Maybe it needs a maintainer to remove the <code>merge-conflict</code> label?</del> and the CI is passing.</p>",
        "id": 397811328,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697861098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397806321\">said</a>:</p>\n<blockquote>\n<p>(Same applied if you want to make a Mathlib PR.)</p>\n</blockquote>\n<p>Done, Mathlib <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a>.</p>",
        "id": 397811384,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697861155
    },
    {
        "content": "<p>For the Mathlib CI for <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> to succeed on the <a href=\"https://github.com/leanprover-community/mathlib4/pull/2721\">#2721</a> toolchain, I would need to point its lakefile/manifest to the Std branch for <a href=\"https://github.com/leanprover-community/mathlib4/pull/306\">#306</a>, and rebase the Mathlib branch for <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> onto any other Mathlib4 commits that are required by recent changes to core or Std. I think. Seems tricky! Is there a script to help?</p>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, is there a Mathlib branch corresponding to Std <a href=\"https://github.com/leanprover/std4/pull/304\">#304</a>, for example?</p>",
        "id": 397816651,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697865302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Richard Copley</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397816651\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>, is there a Mathlib branch corresponding to Std <a href=\"https://github.com/leanprover/std4/pull/304\">#304</a>, for example?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7771\">#7771</a>, for reference</p>",
        "id": 397824313,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697871878
    },
    {
        "content": "<p>Sorry, this is a bit of a mess.</p>",
        "id": 397826952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697874731
    },
    {
        "content": "<p>The <code>nightly-testing</code> branch is very often a good place to start from. I try to keep that building against the latest nightly release.</p>",
        "id": 397826974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697874754
    },
    {
        "content": "<p>But if you use the automatically generated <code>lean-pr-testing-2721</code> branch, it should already have been started from <code>nightly-testing</code>.</p>",
        "id": 397827005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697874783
    },
    {
        "content": "<p>If there are Std bumps in flight then ... you have to bug me. :-)</p>",
        "id": 397827026,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697874801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397826952\">said</a>:</p>\n<blockquote>\n<p>Sorry, this is a bit of a mess.</p>\n</blockquote>\n<p>It has a certain terrible beauty. I hope I'm not making things more difficult.</p>\n<p>Current state of my 3 PRs:<br>\nThe 3 changes to be merged are single commits.</p>\n<h1>Core <a href=\"https://github.com/leanprover/lean4/pull/2721\">#2721</a></h1>\n<ul>\n<li>CI OK</li>\n</ul>\n<h1>Std <a href=\"https://github.com/leanprover/std4/pull/306\">#306</a></h1>\n<ul>\n<li>Has a \"do not merge\" commit, to use the 2721 toolchain</li>\n<li>CI OK</li>\n</ul>\n<h1>Mathlib <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a></h1>\n<ul>\n<li>Branch and PR based on <code>lean-pr-testing-2721</code></li>\n<li>Has a \"do not merge\" commit, to use the 306 branch</li>\n<li>CI failing in an unrelated area, but does build the changed file <code>Mathlib\\Tactic\\Widget\\Calc.lean</code></li>\n</ul>\n<p>Is that good enough?</p>",
        "id": 397862081,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697905655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, thank you for your patience with this. :-)</p>\n<p>Unfortunately the <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> PR CI failures do seem to be related, could you please check those again?</p>",
        "id": 397886776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697933822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397886776\">said</a>:</p>\n<blockquote>\n<p>Unfortunately the <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> PR CI failures do seem to be related, could you please check those again?</p>\n</blockquote>\n<p>Thanks for catching that! After I wrote that message, I did a sneaky rebase which I assumed would work. Unfortunately I forgot to run <code>lake update</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> is now in the state that I meant it to be in. CI is queued and I'm away to bed. <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 397896439,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697940694
    },
    {
        "content": "<p>Trying again, but with the <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> branch and PR based on <code>nightly-testing</code> instead of <code>lean-pr-testing-2721</code> (because I need the <a href=\"https://github.com/leanprover/std4/pull/304\">std#304</a> changes) .<br>\nI also reordered the commits on the <a href=\"https://github.com/leanprover/std4/pull/306\">std#306</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> branches so that the commit to be merged is the tip.<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a> CI <del>queued</del> <span aria-label=\"green circle\" class=\"emoji emoji-1f7e2\" role=\"img\" title=\"green circle\">:green_circle:</span> , <a href=\"https://github.com/leanprover/std4/pull/306\">std#306</a> awaiting approval.</p>",
        "id": 397931013,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697968234
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"400544\">@Richard Copley</span>, one final thing that would make this perfect: the Mathlib PR should use the branch <code>lean-pr-testing-2721</code>. Then when the Mathlib CI checks out, the Lean PR will automatically lose its <code>breaks-mathlib</code> label and gain a <code>builds-mathlib</code> label.</p>\n<p>(Sorry none of this is documented properly: we're working on it!)</p>",
        "id": 397975480,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013071
    },
    {
        "content": "<p>Unfortunately one can't change the base branch of a PR without closing and opening a new one, so for now I'm just going to reset <code>lean-pr-testing-2721</code> to match your <code>richard-copley/code-action-document-version</code></p>",
        "id": 397975543,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LSP.20code.20action.20document.20version/near/397975543\">said</a>:</p>\n<blockquote>\n<p>Unfortunately one can't change the base branch of a PR without closing and opening a new one, so for now I'm just going to reset <code>lean-pr-testing-2721</code> to match your <code>richard-copley/code-action-document-version</code></p>\n</blockquote>\n<p>I think you can ... just click Edit next to the PR title.</p>",
        "id": 397975669,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698013316
    },
    {
        "content": "<p>That lets you change what you are proposing merging <em>into</em>, but not <em>from</em>.</p>",
        "id": 397975720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013363
    },
    {
        "content": "<p>That is, I still want the PR to say it is merging into <code>master</code>.</p>",
        "id": 397975731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013383
    },
    {
        "content": "<p>But the branch name containing the changes needs to be <code>lean-pr-testing-2721</code>, so our automation knows to report back to <a href=\"https://github.com/leanprover-community/lean/pull/2721\">lean#2721</a>.</p>",
        "id": 397975752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013410
    },
    {
        "content": "<p>(We could definitely fix this by e.g. directly inspecting the <code>lean-toolchain</code>, but no one has had the time to set this up.)</p>",
        "id": 397975829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698013450
    },
    {
        "content": "<p>Right, I think I see. Do you want me to close the PR and open a new one, or not?</p>",
        "id": 397976125,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698013877
    },
    {
        "content": "<p>No, it's fine as is. Thank you for your patience. Our workflow for changes touching 3 repos at once still needs some work. :-)</p>",
        "id": 397977529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698015483
    },
    {
        "content": "<p>Richard I know you are a relatively new user -- thanks so much for your patience here! This entire lean 4 thing is very bleeding edge and a lot of independent parts are moving very fast right now making things somewhat chaotic and exciting at the minute.</p>",
        "id": 398014289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698040012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, It looks like I missed another <code>lake update</code>. <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a>'s <code>lake-manifest.json</code> points at a commit in my std fork that has been garbage-collected. I won't touch anything for now. If you would like me to update <a href=\"https://github.com/leanprover-community/mathlib4/pull/7812\">#7812</a>, to try to get its CI green again, please let me know.</p>",
        "id": 398295672,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698156092
    },
    {
        "content": "<p>I'm hoping we're good to go. I'll merge the Std and Mathlib PRs into the respective <code>nightly-testing</code> branches tonight, and let you know if I run into trouble.</p>",
        "id": 398372415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698188278
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, how can I rerun the mathlib CI on a lean4 PR (specifically <a href=\"https://github.com/leanprover/lean4/pull/2964\">lean4#2964</a>)? (Sorry if this isn't the right thread: there has been some related discussion here.) EDIT: I have a guess now: create a branch <code>lean-pr-testing-2964</code> on mathlib, and builds on that will be written back into the core thread by the bot.</p>",
        "id": 407681738,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1702459957
    },
    {
        "content": "<p>Yes!</p>",
        "id": 407844084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702518209
    },
    {
        "content": "<p>That branch should be automatically created by the bot.</p>",
        "id": 407844117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702518225
    },
    {
        "content": "<p>As it is a slightly older PR, I would recommend to rebase the Lean PR onto <code>nightly-with-mathlib</code></p>",
        "id": 407845449,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702518865
    },
    {
        "content": "<p>Now I am really derailing this thread, but; what is the established practice for PRs that require a patch to mathlib4 to work? Should I push directly to <code>lean-pr-testing-xyzw</code>, or should I make a new branch and mention it in the original lean4 PR?</p>",
        "id": 408282368,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1702688389
    },
    {
        "content": "<p>Please push directly to <code>lean-pr-testing-NNNN</code>. It doesn't hurt to message me anytime you're working on a PR that requires this.</p>",
        "id": 408283386,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702688785
    },
    {
        "content": "<p>My attempt at documenting our system is at <a href=\"https://leanprover-community.github.io/contribute/tags_and_branches.html\">https://leanprover-community.github.io/contribute/tags_and_branches.html</a>. Please complain! :-)</p>",
        "id": 408283436,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702688820
    }
]