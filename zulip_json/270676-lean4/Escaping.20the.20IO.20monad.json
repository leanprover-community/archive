[
    {
        "content": "<p>Suppose I have <code>getMagicNumber :  IO Nat</code>. How do I use it to  define <code>cow : Nat</code> whose value is whatever <code>getMagicNumber</code> returns? I am not asking how to do this inside <code>main</code>, but rather what meta-level incantation is needed to add a new declaration in the kernel. I already know how to use <code>Lean.addDecl</code>, but that one requires quoted expressions.  Background: I defined functions that load Lean objects from JSON files (yes, I am using <code>FromJson</code>) – but how do I load them from files?</p>",
        "id": 395748468,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696876958
    },
    {
        "content": "<p>You can define a term elaborator</p>",
        "id": 395748607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696877046
    },
    {
        "content": "<p>It’s possible to lift from IO to termElabM</p>",
        "id": 395748625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696877066
    },
    {
        "content": "<p>Is that the <code>elab</code> thing? I could do that, but once I've got the object loaded from a JSON file and loaded, how do I do the equivalent of <code>addDecl</code>?</p>",
        "id": 395748993,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696877285
    },
    {
        "content": "<p>You can use <code>initialize</code> to initialize a global variable with the result of executing <code>getMagicNumber</code></p>",
        "id": 395749653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696877633
    },
    {
        "content": "<p>using a term elaborator will resolve the value at compile time, the result will be put in the .olean file. Using <code>initialize</code> will resolve the value in every downstream module as well as at runtime, effectively it is calculated on the spot at import time</p>",
        "id": 395749956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696877784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span> From what I know about your application, I think the term elaborator is the way to go. In fact IIRC you already have one, and are using it for exactly this purpose already</p>",
        "id": 395750049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696877836
    },
    {
        "content": "<p>I can't seem to find any documentation about <code>initalize</code>.</p>",
        "id": 395754316,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880215
    },
    {
        "content": "<p>there might not be any... the short version is that <code>initialize foo : A &lt;- getFoo</code> creates a new value <code>foo : A</code> from <code>getFoo : IO A</code></p>",
        "id": 395754830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880542
    },
    {
        "content": "<p>Ok, looking at the source, it looks like it's going to be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">cow</span> <span class=\"o\">:</span> <span class=\"n\">GraphCertificate</span> <span class=\"bp\">←</span> <span class=\"n\">loadGraphCertificate</span> <span class=\"s2\">\"cert.json\"</span>\n</code></pre></div>\n<p>but this triggers <code>failed to synthesize Inhabited GraphCertificate</code>.</p>",
        "id": 395754846,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880557
    },
    {
        "content": "<p>oh, I guess it uses <code>opaque</code> under the hood so you will need an inhabited instance</p>",
        "id": 395754882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880582
    },
    {
        "content": "<p>Does it want to be fail-safe by obtaining a default value?</p>",
        "id": 395754891,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880587
    },
    {
        "content": "<p>that should be easy for <code>GraphCertificate</code></p>",
        "id": 395754906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880597
    },
    {
        "content": "<p>it doesn't use the default value AFAIK, but it should not be allowed to break the logic by constructing <code>False</code></p>",
        "id": 395754934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880633
    },
    {
        "content": "<p>Yes, and it would be a crime if the default were anything other than Petersen graph. Just one more question while I have your attention: what if I'd like to initialize instances?</p>",
        "id": 395754993,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880650
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 395755015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880665
    },
    {
        "content": "<p>I'd like to install instances of type classes obtained from loading JSON files.</p>",
        "id": 395755039,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880689
    },
    {
        "content": "<p>is <code>GraphCertificate</code> a class?</p>",
        "id": 395755064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880705
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">cow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"mi\">42</span>\n<span class=\"k\">#eval</span> <span class=\"n\">cow</span>\n</code></pre></div>\n<p>gives me \"Server process for untitled:Untitled-1 crashed, likely due to a stack overflow or a bug.\".</p>",
        "id": 395755209,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880788
    },
    {
        "content": "<p>Ah right I was going to mention that: you can't use <code>initialize</code> values in the same file they were declared</p>",
        "id": 395755239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880812
    },
    {
        "content": "<p>you need to make another file, import the first one and then try <code>#eval</code> / etc</p>",
        "id": 395755262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880831
    },
    {
        "content": "<p>for... reasons</p>",
        "id": 395755281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880842
    },
    {
        "content": "<p><code>GraphCertificate</code> is not a class, but it has stuff in it from which I'd like to construct some instances of some other classes.</p>",
        "id": 395755316,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880870
    },
    {
        "content": "<p>This whole thing is beginning to look like someone's PhD thesis.</p>",
        "id": 395755398,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880903
    },
    {
        "content": "<p>in that case I think the term elaborator or command elaborator is the best way to construct all those values</p>",
        "id": 395755402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880906
    },
    {
        "content": "<p>again, last I checked you were doing exactly this</p>",
        "id": 395755418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880918
    },
    {
        "content": "<p>it really isn't supposed to be PhD-level complicated but the documentation is sparse</p>",
        "id": 395755473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880956
    },
    {
        "content": "<p>Ok, but last time around I had quoted stuff, and now I have directly constructed values. I failed to \"quote\" them, and did not find any way to stick them inside <code>addDecl</code>.</p>",
        "id": 395755479,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696880959
    },
    {
        "content": "<p>Ah, you have to quote them to put them in a declaration to be checked by the kernel</p>",
        "id": 395755506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880982
    },
    {
        "content": "<p>or quote something derived from them</p>",
        "id": 395755529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696880997
    },
    {
        "content": "<p>(BTW, many many thanks, and also, I am asking this barrage of questions because I followed your advice and now I have funky <code>fromJson</code> instances all around.)</p>",
        "id": 395755578,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696881004
    },
    {
        "content": "<p>because the kernel typechecker only understands <code>Expr</code></p>",
        "id": 395755599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881008
    },
    {
        "content": "<p>when you use <code>initialize</code> you directly get a value of the type, not an <code>Expr</code> denoting it. The value is not really in the kernel / logical system, only an <code>opaque</code> which stands in for it (whence the <code>Inhabited</code> requirement)</p>",
        "id": 395755722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881093
    },
    {
        "content": "<p>So let me see if I understand the process. Working in <code>elab</code>:</p>\n<ol>\n<li>Load a <code>cow</code> from JSON file, using Mario-inspired <code>FromJson</code> instances, obtain a bona fide kernel-blessed object of type <code>Cow</code>.</li>\n<li>\"Quote\" <code>cow</code> to something like <code>cowQ</code> (how?)</li>\n<li>Submit the quoted thing to the kernel, just like before.</li>\n</ol>",
        "id": 395755742,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696881111
    },
    {
        "content": "<p>Ah, I probably misunderstood step 1 then.</p>",
        "id": 395755814,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696881141
    },
    {
        "content": "<blockquote>\n<p>obtain a bona fide kernel-blessed object of type Cow.</p>\n</blockquote>\n<p>This object is not kernel-blessed</p>",
        "id": 395755824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881144
    },
    {
        "content": "<p>it is a well typed lean object in the runtime but not a symbolic object the kernel understands</p>",
        "id": 395755856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881168
    },
    {
        "content": "<p>So the question is, how do I \"quote\" it? It's not <code>q($cow)</code>.</p>",
        "id": 395755924,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696881216
    },
    {
        "content": "<p>You can provide a generic quotation instance to turn <code>cow</code> into <code>cowQ</code></p>",
        "id": 395755927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881219
    },
    {
        "content": "<p>if you have such an instance I believe Qq will use it, so <code>q($cow)</code> should just work</p>",
        "id": 395756002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881247
    },
    {
        "content": "<p>if not you can still just call <code>quote cow</code></p>",
        "id": 395756014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881255
    },
    {
        "content": "<p>Aha! <code>quote</code> is the magic word.</p>",
        "id": 395756037,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696881270
    },
    {
        "content": "<p>The relevant typeclass is <code>Quote</code> IIRC</p>",
        "id": 395756045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881277
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Quote#doc\">docs#Lean.Quote</a> to be precise</p>",
        "id": 395756163,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696881354
    },
    {
        "content": "<p>Oh wait no that's the wrong typeclass, that one targets <code>Syntax</code> not <code>Expr</code></p>",
        "id": 395756956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696881842
    },
    {
        "content": "<p>you want <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ToExpr#doc\">docs#Lean.ToExpr</a></p>",
        "id": 395757222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882002
    },
    {
        "content": "<p><code>Quote</code> seems to do some pretty weird things</p>",
        "id": 395758009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696882557
    },
    {
        "content": "<p><code>quote #[1, 2]</code> gives the syntax <code>mkArray2 1 2</code> or similar</p>",
        "id": 395758078,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696882583
    },
    {
        "content": "<p>I think that might be used by the compiler? I'm not sure what this class is used for</p>",
        "id": 395758105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882611
    },
    {
        "content": "<p>well, I use it in mathport but besides that</p>",
        "id": 395758124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882624
    },
    {
        "content": "<p>It's used in polyrith (!)</p>",
        "id": 395758316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696882776
    },
    {
        "content": "<p>unfortunately it's hard to grep for uses of <code>quote</code> by type</p>",
        "id": 395758319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882778
    },
    {
        "content": "<p>there are a ton of uses of the instances for <code>Name</code>, <code>String</code>, <code>Nat</code>, <code>Bool</code> but I'm not sure about the other instances</p>",
        "id": 395758393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882813
    },
    {
        "content": "<p>Do you know how <code>quote</code> compares with <code>toExpr</code> followed by delaboration?</p>",
        "id": 395758480,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696882887
    },
    {
        "content": "<p>it's not monadic for one</p>",
        "id": 395758496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882902
    },
    {
        "content": "<p>Aha, Lean/Elab/Quotation.lean has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.Quotation.ArrayStxBuilder.build#src\">src#Lean.Elab.Term.Quotation.ArrayStxBuilder.build</a> which calls <code>quote</code> on a <code>Array Term</code></p>",
        "id": 395758593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696882961
    },
    {
        "content": "<p>there is also a <code>Quote (List String)</code> used later down in the same file</p>",
        "id": 395758746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696883049
    },
    {
        "content": "<p>which is used in elaborating quotations: <code> `(stuff)</code> is a macro so it needs to create syntax for all the types used inside <code>Syntax</code> in order to create syntax to construct a <code>Syntax</code> object</p>",
        "id": 395758849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696883148
    },
    {
        "content": "<p>so it makes sense that this would have a funny instance for creating <code>Array</code> values, because we want to optimize the size of the generated term (both the syntax itself and also the term it elaborates to)</p>",
        "id": 395759182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696883257
    },
    {
        "content": "<p>syntax quotations (and syntax match) routinely generate some really massive expressions</p>",
        "id": 395759211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696883271
    },
    {
        "content": "<p>To summarize, should I really be trying to parse JSON to create Lean objects , use <code>Quote</code> or some such, and then pass them to the kernel? Or is it better to parse JSON directly to quoted stuff that is passed to kernel?</p>",
        "id": 395762243,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696885226
    },
    {
        "content": "<p>BTW, I am pretty certain that the objects created from JSON are blessed. It looks like <code>initialize</code> might be the way to go (as clumsy as it is).</p>",
        "id": 395762558,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696885455
    },
    {
        "content": "<p>I mean, the function that does the blessing is <code>addDecl</code></p>",
        "id": 395766414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696887887
    },
    {
        "content": "<p>and <code>initialize</code> only passes a stub to <code>addDecl</code></p>",
        "id": 395766473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696887931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Escaping.20the.20IO.20monad/near/395762243\">said</a>:</p>\n<blockquote>\n<p>To summarize, should I really be trying to parse JSON to create Lean objects , use <code>Quote</code> or some such, and then pass them to the kernel? Or is it better to parse JSON directly to quoted stuff that is passed to kernel?</p>\n</blockquote>\n<p>I don't understand the distinction being made here</p>",
        "id": 395766493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696887948
    },
    {
        "content": "<p>either way you have JSON in and <code>Expr</code> out, generally mediated by some meta lean type which may or may not coincide with the type you are constructing an <code>Expr</code> for</p>",
        "id": 395766595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696888013
    },
    {
        "content": "<p>I have <code>FromJson</code> instances which, in addition to converting JSON to \"info\", also verify that the info is valid, which requires running some decision procedures in the kernel, as validity is in general kernel-verified. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">GraphData</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">vertexSize</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">edgeTree</span> <span class=\"o\">:</span> <span class=\"n\">SetTree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"n\">vertexSize</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.FromJson</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"kd\">extends</span> <span class=\"n\">GraphData</span> <span class=\"n\">where</span>\n  <span class=\"n\">edgeCorrect</span> <span class=\"o\">:</span> <span class=\"n\">edgeTree.isCorrect</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Graph.fromJson</span> <span class=\"o\">:</span> <span class=\"n\">Lean.FromJson</span> <span class=\"n\">Graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">json</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">graphData</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.FromJson.fromJson</span><span class=\"bp\">?</span> <span class=\"n\">json</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">GraphData</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">graphData.edgeTree.isCorrect</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Graph.mk</span> <span class=\"n\">graphData</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throw</span> <span class=\"s2\">\"invalid edges in a graph\"</span>\n</code></pre></div>\n<p>This seems to be a general strategy: split the certificate into two parts, \"data\" and \"validation\". The data is in JSON, validation is done by the kernel (as above). I like this way of doing things, <em>except</em>  that importing JSON from a file seems like such a monadic headache.</p>",
        "id": 395815903,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696919245
    },
    {
        "content": "<p>the <code>isCorrect</code> call is going to happen in untrusted lean here, unless you have the kernel running the <code>FromJson</code> implementation</p>",
        "id": 395817007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696919907
    },
    {
        "content": "<p>which means you will be doing the check twice</p>",
        "id": 395817028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696919918
    },
    {
        "content": "<p>although you can probably assume the cost of running the check in the interpreter is negligible compared to the kernel check</p>",
        "id": 395817081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696919955
    },
    {
        "content": "<p>but the important part is that validating the data structure in untrusted lean doesn't help you to produce a proof, it only safeguards against producing a bad proof / can help improve the error message if GAP / your input source has a bug</p>",
        "id": 395817238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696920052
    },
    {
        "content": "<p>If you really wanted to have \"kernel-verified validity\" in this instance, it would need to look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">GraphData</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">vertexSize</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">edgeTree</span> <span class=\"o\">:</span> <span class=\"n\">SetTree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"n\">vertexSize</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.FromJson</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"kd\">extends</span> <span class=\"n\">GraphData</span> <span class=\"n\">where</span>\n  <span class=\"n\">edgeCorrect</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">edgeTree</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isCorrect</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Graph.fromJson</span> <span class=\"o\">:</span> <span class=\"n\">Lean.FromJson</span> <span class=\"n\">Graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">json</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">graphData</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.FromJson.fromJson</span><span class=\"bp\">?</span> <span class=\"n\">json</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">GraphData</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">edgeTreeQ</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"n\">graphData.edgeTree</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">mkFreshName</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">addDecl</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span>\n        <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">edgeTreeQ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isCorrect</span><span class=\"o\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">decide</span><span class=\"o\">)</span>\n      <span class=\"o\">}</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Graph.mk</span> <span class=\"n\">graphData</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span> <span class=\"o\">[]))</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">throw</span> <span class=\"s2\">\"invalid edges in a graph\"</span>\n</code></pre></div>",
        "id": 395817834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696920416
    },
    {
        "content": "<p>but there are a few issues with this:</p>\n<ol>\n<li><code>FromJson</code> instances are basically pure functions, but <code>addDecl</code> needs access to the environment</li>\n<li>The type of <code>Graph</code> is now some hybrid of meta-level and object-level definitions, it's not just a subtype anymore (and indeed you can't even recover the subtype from this without actually doing the check again, because meta lean doesn't reflect the correctness of the kernel)</li>\n</ol>",
        "id": 395818124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696920581
    },
    {
        "content": "<p>I am confused by your saying I don't get a kernel-blessed graph. Wouldn't that (at the very least) depend how I run the code. For example, isn't <code>bessie</code> kernel-blessed in the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CowData</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.FromJson</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Cow</span> <span class=\"kd\">extends</span> <span class=\"n\">CowData</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">heavy</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span><span class=\"o\">:</span> <span class=\"n\">Lean.FromJson</span> <span class=\"n\">Cow</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">json</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.FromJson.fromJson</span><span class=\"bp\">?</span> <span class=\"n\">json</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">CowData</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">data.weight</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">42</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Cow.mk</span> <span class=\"n\">data</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throw</span> <span class=\"s2\">\"the cow is too lean\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bessieJ</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Lean.Json.parse</span> <span class=\"s2\">\"{</span><span class=\"se\">\\\"</span><span class=\"s2\">weight</span><span class=\"se\">\\\"</span><span class=\"s2\"> : 666}\"</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">j</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">null</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bessie</span> <span class=\"o\">:</span> <span class=\"n\">Cow</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Lean.FromJson.fromJson</span><span class=\"bp\">?</span> <span class=\"n\">bessieJ</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">weight</span> <span class=\"o\">:=</span> <span class=\"mi\">666</span><span class=\"o\">,</span> <span class=\"n\">heavy</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 395821489,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696922253
    },
    {
        "content": "<p>I agree the hybrid thing is strange. Perhaps a good trade-off is to have all the data slurped in with <code>FromJson</code>, but then to generate quoted stuff with bare hands and submitted for validation to the kernel (sort of like what we had in Dagstuhl).</p>",
        "id": 395821785,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696922395
    },
    {
        "content": "<p>Yes, the kernel has blessed that <code>bessie</code> is a valid object of type <code>Cow</code>, but it has not checked that it is equal to anything in particular, and in particular it has not checked that the <code>fromJson?</code> function is not in the error case</p>",
        "id": 395822101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696922533
    },
    {
        "content": "<p>it's just some symbolic object representing a computation but nothing has forced it to a normal form</p>",
        "id": 395822206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696922583
    },
    {
        "content": "<p>The trick with these deserialization methods is to get the kernel to bless some <em>normal form</em> object as having a property</p>",
        "id": 395822332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696922638
    },
    {
        "content": "<p>To force the object to a normal form we could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">bessie.weight</span> <span class=\"bp\">=</span> <span class=\"mi\">666</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(although in this case this is not so contentful because the error case also happens to have the same value). But the main reason not to do this is that we don't want to run the JSON parser inside the kernel, it's really bad at string handling and I wouldn't be surprised if it just fails to terminate</p>",
        "id": 395822826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696922848
    },
    {
        "content": "<p>in fact, this doesn't work at all, because attempting to force <code>bessie</code> to a value gets stuck on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Json.Parser.anyCore</span> <span class=\"o\">(</span><span class=\"n\">Lean.Parsec.skipWs</span> <span class=\"o\">(</span><span class=\"n\">String.mkIterator</span> <span class=\"s2\">\"{</span><span class=\"se\">\\\"</span><span class=\"s2\">weight</span><span class=\"se\">\\\"</span><span class=\"s2\"> : 666}\"</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>because <code>anyCore</code> is a <code>partial def</code>, which means it is opaque to the kernel.</p>",
        "id": 395823565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696923216
    },
    {
        "content": "<p>I am still under the influence of call-by-value, having programmed in OCaml on the way back from Dagstuhl. Thanks again! I'll stick with the quoted stuff.</p>",
        "id": 395824570,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1696923642
    },
    {
        "content": "<p>lean is extra special because meta lean uses call-by-value evaluation while the kernel uses call-by-name <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 395826053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696924225
    }
]