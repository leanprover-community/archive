[
    {
        "content": "<p>how can I author a macro that produces multiple <code>doElem</code>s, suitable for using within a do-block?</p>\n<p>this is not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" ⟵ \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<ul>\n<li>I tried using the doSeq class from the Lean internal parser but then I got a panic</li>\n<li>I tried generating both bindings on a single line separated by <code>;</code> but that didn't work either</li>\n</ul>\n<p>any thoughts? thanks!</p>",
        "id": 328543571,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676660585
    },
    {
        "content": "<p>This doesn't answer your immediate question, but I tested this out using the coercion from <code>Subtype A</code> to <code>A</code> in <code>hashmap_test1_fwd</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" ⟵ \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Result.attach</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And that doesn't seem to fix the elaboration time issue. After poking it some more there seems to just be a blowup in the later <code>do</code> blocks in the else branches of your larger definition, so I think it's a <code>do</code> elaboration issue and not the <code>let</code> desugaring.</p>",
        "id": 328550122,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1676662984
    },
    {
        "content": "<p>thanks Chris this is super helpful!</p>",
        "id": 328557826,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676665794
    },
    {
        "content": "<blockquote>\n<p>how can I author a macro that produces multiple doElems, suitable for using within a do-block?</p>\n</blockquote>\n<p>This is maybe a tiny bit confusing, but <code>do</code> is heavily overloaded and you can use a \"nested do\" to combine multiple do-elems:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" ⟵ \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n  <span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Option</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">⟵</span> <span class=\"mi\">42</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 328573468,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676672336
    },
    {
        "content": "<p>thanks Gabriel, that's great to know! indeed, equipped with this, I can confirm that my other issue (elaboration taking a long while for nested do-s) isn't related to the overloaded \\langle, \\rangle operator</p>",
        "id": 328575013,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676672986
    },
    {
        "content": "<p>(see my most recent message in <a href=\"#narrow/stream/270676-lean4/topic/naming.20hypotheses.20when.20using.20do-notation/near/328123483\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/naming.20hypotheses.20when.20using.20do-notation/near/328123483</a>)</p>",
        "id": 328575111,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676673011
    }
]