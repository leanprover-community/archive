[
    {
        "content": "<p>The following produces an error message (I am sorry its a bit long; I couldn't minimize it more):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">LeftDistribHMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LeftDistribHMul</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_distrib</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mul_add</span> <span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Whole</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Whole</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HMul</span> <span class=\"o\">(</span><span class=\"n\">Whole</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Whole</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Whole</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hMul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">a.1</span> <span class=\"bp\">*</span> <span class=\"n\">b.1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Whole</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">a₁.1</span> <span class=\"bp\">+</span> <span class=\"n\">a₂.1</span><span class=\"o\">)</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">left_distrib</span>\n  <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">LeftDistribHMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Whole</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">Whole</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b₂</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Subtype.eq</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">LeftDistribHMul.left_distrib</span> <span class=\"n\">a.1</span> <span class=\"n\">b₁.1</span> <span class=\"n\">b₂.1</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Whole</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">Whole</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">LeftDistribMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Whole</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">HMul.hMul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LeftDistribMul</span> <span class=\"o\">(</span><span class=\"n\">Whole</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_distrib</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Whole.left_distrib</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"c1\">-- invalid projection (x * y).1</span>\n</code></pre></div>\n<p>The error goes away if either</p>\n<ul>\n<li>remove <code>attribute [irreducible] Whole</code> line, or</li>\n<li>replace the proof by <code>by rw [Whole.left_distrib]</code></li>\n</ul>",
        "id": 392664428,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695459323
    },
    {
        "content": "<p>Why does <code>isDefEq</code> not go beyond the irreducibility?</p>",
        "id": 392664701,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695459406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"433695\">Jun Yoshida</span> <a href=\"#narrow/stream/270676-lean4/topic/invalid.20projection.20on.20irreducible.20structures/near/392664701\">said</a>:</p>\n<blockquote>\n<p>Why does <code>isDefEq</code> not go beyond the irreducibility?</p>\n</blockquote>\n<p>This is the whole point of irreducibility!</p>",
        "id": 392669717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695461721
    },
    {
        "content": "<p>Hmm, right. Does it mean the error in this example is expected?</p>",
        "id": 392672880,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695462922
    },
    {
        "content": "<p>I didn't look at the example in detail but changing reducibility between instance declaration and use is highly problematic; don't do it. Same goes for <code>[simp]</code> etc.</p>",
        "id": 392674316,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695463452
    },
    {
        "content": "<p>You mean <code>attribute [irreducible] X</code> should not be anywhere other than just after the declaration of <code>X</code>?</p>",
        "id": 392675751,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695464049
    },
    {
        "content": "<p>That is indeed what they mean. In mathlib3 we used to do this all the time: define a thing, make the API, and then make the thing irreducible afterwards. Then the CS purists caught us doing it and told us it was terrible and evil, because there are now proofs that used to be <code>rfl</code> but <code>rfl</code> doesn't work any more. My reaction to this was always \"so what? It all still works fine\" but in Lean 4 they have really attempted to ban this kind of thing (for example I don't think you even <em>can</em> make a declaration irreducible if it's defined in another file). I have no idea why they get so upset about this, it didn't seem to cause any problems in practice in mathlib3 and actually helped to solve problems.</p>",
        "id": 392680356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695466552
    },
    {
        "content": "<p>What I described above is purely related to data structures making these subsystems much faster in Lean 4. Sometimes you can't have fast and flexible at the same time.</p>",
        "id": 392683874,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695467987
    },
    {
        "content": "<p>I didn't know that this \"making decls irreducible afterward\" pattern got deprecated. The news makes me sad since I was used to it since Lean 2 &amp; 3, too. Anyway, I understand the current Lean 4 behavior about reducibility; the kernel assumes it would be unchanged after declaration. Thank you for letting me know. So, what is the recommended design pattern hiding implementation details? For example, how about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[unbox]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Whole</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"kn\">private</span> <span class=\"n\">mk</span> <span class=\"o\">::</span> <span class=\"kn\">private</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 392694502,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695473105
    },
    {
        "content": "<p>Yes, newtype-style structures are much preferred over <code>[irreducible]</code>. <del>Note though that <code>private</code> is not as restricting as one might expect, e.g. you can still construct the type using anonymous constructors.</del></p>",
        "id": 392694762,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695473293
    },
    {
        "content": "<p>Fortunately, I successfully got errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Another file -/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Whole</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Whole</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Both lines produce the following error:</span>\n<span class=\"cm\">invalid ⟨...⟩ notation, constructor for `Whole` is marked as private</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 392695369,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1695473825
    },
    {
        "content": "<p>Hah, thanks for checking! It is not bullet-proof, but neither is it in other languages with reflection</p>",
        "id": 392697469,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695474833
    }
]