[
    {
        "content": "<p>I've got a proof with a lot of cases that look like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">constructor_55</span> <span class=\"n\">IA</span> <span class=\"n\">IB</span> <span class=\"bp\">=&gt;</span>\n   <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IA</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IB</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">some_lemma</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>I wanted to automate this with something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">I</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span>\n   <span class=\"n\">constructor</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IA</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">IB</span><span class=\"bp\">;</span>\n   <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"n\">lemmas</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n   <span class=\"n\">apply</span> <span class=\"n\">some_lemma</span><span class=\"bp\">;</span>\n   <span class=\"n\">assumption</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>The problem is, ofc, the variables IA and IB are not bound, and I do not know how to make them bound. Any help?</p>",
        "id": 272193525,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645053531
    },
    {
        "content": "<p>It is hard to tell without seeing the actual goals, but the following tactics may be relevant. They both have doc strings.<br>\n<code>rename</code> and <code>rename_i</code>.</p>",
        "id": 272194647,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1645054327
    },
    {
        "content": "<p>Thanks for the quick reply! I'm away from my machine rn, but assuming it works like Coq or such, the problem is that I don't have the initial names for the inductive hypotheses; what I need is an apply * analogue to simp [*]</p>",
        "id": 272196533,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645055857
    },
    {
        "content": "<p>I see that rename_i doesn't have that problem now, but now I've got a new problem: <code>try rename_i A B</code> fails when there's less than two inaccessible variables. Is this a bug? If not, how can I count inaccessible variables (my cases have either 0, 1, 2, or 3; I can handle 0 first but the other ones I don't know how to distinguish)</p>",
        "id": 272206929,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645065175
    },
    {
        "content": "<p>Would it help if you had a tactic that just tries to apply every hyp from the context, using the first that works? (So like <code>assumption</code> but the application doesn't have to close the goal.) I have something like that lying around.</p>\n<p>More generally, this sounds like a problem that my <a href=\"https://github.com/JLimperg/aesop\">Aesop tactic</a> would be a good fit for. It's basically Coq/Isabelle's <code>auto</code> with bells and whistles. It's still unpolished and changing quickly, so I hesitate to recommend it, but if you'd like to try it, I'd be curious to hear whether it works for you.</p>",
        "id": 272234184,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645090485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>  that would actually be perfect; as a Lean noob, how do I do this?</p>",
        "id": 272334247,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645137232
    },
    {
        "content": "<p>Also in general is there a nice page where I can see a list of tactics? Those <code>rename</code> tactics were also very helpful, but I don't know where I would have found them if not told about their existence</p>",
        "id": 272334572,
        "sender_full_name": "Jad Ghalayini",
        "timestamp": 1645137438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20variable.20bindings/near/272334247\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span>  that would actually be perfect; as a Lean noob, how do I do this?</p>\n</blockquote>\n<p>This info should be in the readme in the Aesop repo. But it's a bit unfriendly right now, mixing implementation and usage, and doesn't have good examples. I'll write a better readme today or early next week. (I'm currently changing a part of the UI as well, so I'd like to wait for that.)</p>",
        "id": 272378486,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645176312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"461231\">Jad Ghalayini</span> <a href=\"#narrow/stream/270676-lean4/topic/inductive.20variable.20bindings/near/272334572\">said</a>:</p>\n<blockquote>\n<p>Also in general is there a nice page where I can see a list of tactics? Those <code>rename</code> tactics were also very helpful, but I don't know where I would have found them if not told about their existence</p>\n</blockquote>\n<p>Afaik no (and I regularly discover new stuff as well). For tactics defined in Core, <code>Init/Notation.lean</code> in the stdlib lists most (all?) tactics. Look for the <code>Parser.Tactic</code> namespace. For mathlib4, check <code>Mathlib/Tactic/*.lean</code>, particularly <code>Basic.lean</code>.</p>",
        "id": 272378832,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1645176530
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">https://leanprover.github.io/theorem_proving_in_lean4/</a> is a very good reference.</p>",
        "id": 272397443,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1645188664
    },
    {
        "content": "<p>Wow!! #tpil4 is revamped!<br>\nIt's looking great <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span></p>\n<p>Edit: actually, looking at the commit history, I can't find a particularly big commit. But it has very few holes marked with \"TODO: waiting for well-founded support in Lean 4\". Those are the only ones I can find.</p>",
        "id": 272399191,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1645189740
    },
    {
        "content": "<p>Leo fixed lots of those TODOs in quite a short time quite a bit ago.</p>",
        "id": 272422167,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1645201259
    }
]