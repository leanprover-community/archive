[
    {
        "content": "<p>During the porting meeting we discussed a problem I'd encountered where <code>simp</code> was failing to find instances when <code>etaExperiment</code> was on, even though <code>inferInstance</code> found these instances fine (with or with <code>etaExperiment</code>).</p>",
        "id": 355385305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683108751
    },
    {
        "content": "<p>During the meeting I could only show an example within mathlib4, but I've now minimised.</p>",
        "id": 355385363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683108765
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">eq_iff_true_of_subsingleton</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟩,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton.elim</span> <span class=\"bp\">..</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">default</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unique.uniq</span> <span class=\"n\">a</span> <span class=\"bp\">▸</span> <span class=\"n\">Unique.uniq</span> <span class=\"n\">b</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Cat</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"bp\">→</span> <span class=\"n\">obj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Cat.Hom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">ULift</span> <span class=\"o\">(</span><span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"bp\">⟶</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">x</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">congr</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"c1\">-- This instance is found by `inferInstance`:</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Cat</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n  <span class=\"c1\">-- Succeeds with:</span>\n  <span class=\"c1\">-- [Meta.synthInstance] ✅ Subsingleton.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--   [] new goal Subsingleton.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--     [instances] #[instSubsingleton, @instSubsingleton_1.{?u.8281}, @instSubsingletonHomInstCat.{?u.8282}]</span>\n  <span class=\"c1\">--   [] ❌ apply @instSubsingletonHomInstCat.{?u.8282} to Subsingleton.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--     [tryResolve] ❌ Subsingleton.{?u.8236 + 1}</span>\n  <span class=\"c1\">--           (Cat.Hom.{?u.8233, ?u.8236} X Y) ≟ Subsingleton.{?u.8282 + 1} (Cat.Hom.{?u.8282, ?u.8282} ?m.8284 ?m.8285)</span>\n  <span class=\"c1\">--   [] ✅ apply @instSubsingleton_1.{?u.8236 + 1} to Subsingleton.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--     [tryResolve] ✅ Subsingleton.{?u.8236 + 1}</span>\n  <span class=\"c1\">--           (Cat.Hom.{?u.8233, ?u.8236} X Y) ≟ Subsingleton.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y)</span>\n  <span class=\"c1\">--     [] new goal Unique.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--       [instances] #[inst✝]</span>\n  <span class=\"c1\">--   [] ✅ apply inst✝ to Unique.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--     [tryResolve] ✅ Unique.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ≟ Unique.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y)</span>\n  <span class=\"c1\">--   [resume] propagating Unique.{?u.8236 + 1}</span>\n  <span class=\"c1\">--         (Cat.Hom.{?u.8233, ?u.8236} X</span>\n  <span class=\"c1\">--           Y) to subgoal Unique.{?u.8236 + 1}</span>\n  <span class=\"c1\">--         (Cat.Hom.{?u.8233, ?u.8236} X Y) of Subsingleton.{?u.8236 + 1} (Cat.Hom.{?u.8233, ?u.8236} X Y) ▼</span>\n  <span class=\"c1\">--     [] size: 1</span>\n  <span class=\"c1\">--   [] result instSubsingleton_1.{?u.8236 + 1}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Cat</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n  <span class=\"c1\">-- Still works with etaExperiment, with the same trace.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Cat</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Succeeds with identical trace.</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.etaExperiment</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Cat</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_iff_true_of_subsingleton</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Fails with</span>\n  <span class=\"c1\">-- [Meta.synthInstance] 💥 Subsingleton.{?u.8454 + 1} (Cat.Hom.{?u.8451, ?u.8454} X Y) ▼</span>\n  <span class=\"c1\">--   [] new goal Subsingleton.{?u.8454 + 1} (Cat.Hom.{?u.8451, ?u.8454} X Y) ▼</span>\n  <span class=\"c1\">--     [instances] #[instSubsingleton, @instSubsingleton_1.{?u.8566}, @instSubsingletonHomInstCat.{?u.8567}]</span>\n  <span class=\"c1\">--   [] 💥 apply @instSubsingletonHomInstCat.{?u.8567} to Subsingleton.{?u.8454 + 1} (Cat.Hom.{?u.8451, ?u.8454} X Y) ▼</span>\n  <span class=\"c1\">--     [tryResolve] 💥 Subsingleton.{?u.8454 + 1}</span>\n  <span class=\"c1\">--           (Cat.Hom.{?u.8451, ?u.8454} X Y) ≟ Subsingleton.{?u.8567 + 1} (Cat.Hom.{?u.8567, ?u.8567} ?m.8569 ?m.8570)</span>\n</code></pre></div>",
        "id": 355385395,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683108773
    },
    {
        "content": "<p>Just pinging <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  and <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> as you were interested in this during the meeting.</p>",
        "id": 355386229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683108972
    },
    {
        "content": "<p><code>apply Subsingleton.elim</code> works in these cases, with or without <code>etaExperiment</code>, so that can be used as a workaround at least.</p>",
        "id": 355404788,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683113395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Well this is a bit hairy. There is nothing wrong with <code>etaExperiment</code> here fundamentally, it simply makes the unifier make more progress, which has it encounter a universe constraint it would not encounter otherwise and which it cannot solve, bailing out instead.<br>\nBasically, with the experiment it tries harder to apply <code>instSubsingletonHomInstCat</code>, eventually testing whether the <code>[Cat C]</code> parameter is defeq to <code>instance (α : Type u) : Cat.{u, u} α</code>. But to check whether they even have the same type, it would have to tell whether <code>[Cat C]</code>'s objects and morphisms are in the same universe, which is unknown at this point, so it refuses to definitely answer whether this instance can be applied and does not try any further instances. Thus <code>[Cat.{u,v] C]</code> is another workaround.</p>",
        "id": 356679363,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683546882
    },
    {
        "content": "<p>I'm a bit surprised that \"refuses to definitely answer\" for one instance causes later instances to be ignored!</p>",
        "id": 356688345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683549038
    },
    {
        "content": "<p>(i.e. shouldn't uncertainty about an instance be treated as a failure, rather than an abort?)</p>",
        "id": 356688605,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683549088
    },
    {
        "content": "<p>Preferring more certain instances would change the instance order, it refuses to do that</p>",
        "id": 356690529,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683549541
    },
    {
        "content": "<p>I see. In this particular case, we can teach <code>aesop</code> that it is allowed to use <code>Subsingleton.elim</code> directly, so it won't matter that it can't simplify using <code>eq_iff_true_of_subsingleton</code>. But still it's fairly worrying. Add the explicit universe annotations <code>[Cat.{u, v} C]</code> is really not good: I think that's proposing we have to annotate every single instance in the library, because these simp lemmas are firing \"unseen\" in auto_param proofs, so it's hard to predict where the problems will be...</p>",
        "id": 356695327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683550560
    },
    {
        "content": "<p>Some observations: the <code>Cat</code> instance is in an unnecessarily high universe, but this doesn't make a difference.  Changing it to <code>Cat.{u,0}</code> causes the same error.  <code>?u =?= 0</code> is just as stuck as <code>?u =?= ?v</code> after all (with <code>?u</code>, <code>?v</code> nonassignable).</p>",
        "id": 356781415,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683569072
    },
    {
        "content": "<p>Changing <code>example</code> to <code>theorem xample</code> fixes the error.  However, <code>def xample</code> doesn't.  That's because <code>theorem</code> fixes the universes levels before elaborating the proof.  Maybe we should do that for <code>def</code>/<code>example</code> as well.</p>",
        "id": 356781639,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683569143
    }
]