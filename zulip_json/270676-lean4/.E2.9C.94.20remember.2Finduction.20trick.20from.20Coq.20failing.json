[
    {
        "content": "<p>While going through this file of plf: <a href=\"https://softwarefoundations.cis.upenn.edu/plf-current/MoreStlc.html\">https://softwarefoundations.cis.upenn.edu/plf-current/MoreStlc.html</a> I attempted to replicate the proof of the progress theorem in Lean. It is stated in Coq as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"n\">progress</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n     <span class=\"n\">empty</span> <span class=\"bp\">⊢</span> <span class=\"n\">t</span> <span class=\"bp\">\\</span><span class=\"k\">in</span> <span class=\"n\">T</span> <span class=\"bp\">→</span>\n     <span class=\"n\">value</span> <span class=\"n\">t</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"c1\">--&gt; t'.</span>\n<span class=\"n\">Proof</span> <span class=\"k\">with</span> <span class=\"n\">eauto.</span>\n  <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">T</span> <span class=\"n\">Ht.</span>\n  <span class=\"n\">remember</span> <span class=\"n\">empty</span> <span class=\"n\">as</span> <span class=\"n\">Gamma.</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">dependent</span> <span class=\"n\">HeqGamma.</span>\n  <span class=\"n\">induction</span> <span class=\"n\">Ht</span><span class=\"bp\">;</span> <span class=\"n\">intros</span> <span class=\"n\">HeqGamma</span><span class=\"bp\">;</span> <span class=\"n\">subst.</span>\n</code></pre></div>\n<p>At first I tried to do the proof without this <code>remember</code> dance (it basically introduces a variable <code>Gamma</code> + a proof that <code>Gamma=empty</code> to the local context and rewrites the occurences of <code>empty</code> into <code>Gamma</code>) because maybe Leans <code>induction</code> is smart enough but in this case it sadly failed me. I have a minified version here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">def</span> <span class=\"n\">Context.empty</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n<span class=\"kd\">def</span> <span class=\"n\">Context.update</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Typing</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body_type</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">(</span><span class=\"n\">ctx.update</span> <span class=\"n\">x</span> <span class=\"o\">())</span> <span class=\"n\">body</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">Context.empty</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Gives: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">target's</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">cases</span><span class=\"bp\">`</span> <span class=\"n\">tactic</span> <span class=\"n\">instead</span><span class=\"o\">)</span>\n  <span class=\"n\">Context.empty</span>\n</code></pre></div>\n<p>which would force me to do manual recursion in the real proof of course which is a little annoying so instead I tried to imitate the remember approach with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">Context.empty</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span> <span class=\"n\">Context.empty</span>\n  <span class=\"k\">have</span> <span class=\"n\">hctx</span> <span class=\"o\">:</span> <span class=\"n\">Context.empty</span> <span class=\"bp\">=</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hctx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>which gave me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">when</span> <span class=\"n\">assigning</span> <span class=\"n\">motive</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">Context.empty</span><span class=\"bp\">;</span>\n  <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">e</span><span class=\"o\">}</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Context.empty</span> <span class=\"bp\">=</span> <span class=\"n\">ctx</span> <span class=\"bp\">→</span> <span class=\"n\">True</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"n\">Context.empty</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Typing</span> <span class=\"n\">ctx</span> <span class=\"n\">e</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Typing</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Note that I did not generalize over my <code>heqGamma</code> equivalent on purpose because Lean is telling me it is already doing this anyways.</p>\n<p>I guess I should open a bug for this? Unless someone here has a smart idea for how to get it working properly.</p>",
        "id": 338005188,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677333168
    },
    {
        "content": "<p>Let bindings usually seem to obstruct things, but there's the <code>generalize</code> tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">Context.empty</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hctx</span> <span class=\"o\">:</span> <span class=\"n\">Context.empty</span> <span class=\"bp\">=</span> <span class=\"n\">ctx</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 338009250,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677334611
    },
    {
        "content": "<p>Oh that does work indeed! Awesome, thank you.</p>",
        "id": 338009412,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677334665
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 338009421,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677334668
    }
]