[
    {
        "content": "<p>Is there a <code>ForIn</code> instance on <code>Fin n</code> somewhere? Or are we meant not to need it?</p>",
        "id": 354825348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682933208
    },
    {
        "content": "<p>Are we meant to rather use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Range.forIn#doc\">docs4#Std.Range.forIn</a> or something like this?</p>",
        "id": 354825609,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682933327
    },
    {
        "content": "<p>It's a bit weird to have an instance directly on numbers, what does it mean to say <code>for x in (2 : Fin 5) do ...</code>?</p>",
        "id": 354834275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682936019
    },
    {
        "content": "<p>I meant <code>for x in Fin 5 do ...</code> of course.</p>",
        "id": 354837087,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682936622
    },
    {
        "content": "<p>So I guess I meant \"a <code>ForIn</code> instance on <code>Fin</code>\" not \"on <code>Fin n</code>\".</p>",
        "id": 354837217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682936644
    },
    {
        "content": "<p>It is a bit unfortunate that the current version of <code>ForIn</code> depends on a type rather than a value, since it means you can't have an instance for types directly to support <code>for x in Fin 5 do ...</code>. One way to work around this is to have a wrapper type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AsType</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but then you still have to write <code>for x in AsType.mk (Fin 5) do ...</code>. The most ergonomic version of the syntax under the current constraints that I can think of is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Elems</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">σ</span>\n<span class=\"kn\">open</span> <span class=\"n\">Elems</span> <span class=\"o\">(</span><span class=\"n\">elems</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FinStream</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Stream</span> <span class=\"o\">(</span><span class=\"n\">FinStream</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">some</span> <span class=\"o\">(⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">⟩)</span> <span class=\"k\">else</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Elems</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">FinStream</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">elems</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">j.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">pure</span> <span class=\"n\">j</span>\n<span class=\"c1\">-- #[0, 1, 2, 3, 4]</span>\n</code></pre></div>",
        "id": 354838469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682936907
    },
    {
        "content": "<p>Thanks. Do you know whether such a solution would compile to something much slows than using <code>Std.range</code>?</p>",
        "id": 354839640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682937131
    },
    {
        "content": "<p>It is approximately the same as the <code>Std.Range</code> implementation, probably faster since it doesn't need a step size, except that this one uses the stream version instead of the direct ForIn impl.</p>",
        "id": 354840045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682937239
    },
    {
        "content": "<p>Ok, nice.</p>",
        "id": 354841200,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682937597
    },
    {
        "content": "<p>Here's an version which uses a direct implementation of <code>ForIn</code>. It is annoying that there are two ways to make forIn impls...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[specialize]</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">FinStream.forIn</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ForInStep.done</span> <span class=\"n\">b</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ForInStep.yield</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FinStream.forIn</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"n\">b</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">FinStream</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">forIn</span> <span class=\"n\">i</span> <span class=\"n\">b</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">FinStream.forIn</span> <span class=\"n\">f</span> <span class=\"n\">i.1</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#reduce</span> <span class=\"k\">show</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">elems</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">j.push</span> <span class=\"n\">i</span>\n  <span class=\"n\">pure</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 354841209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682937600
    },
    {
        "content": "<p>you can tell it is working because the <code>#reduce</code> at the end doesn't get stuck, unlike the previous example</p>",
        "id": 354841410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682937659
    },
    {
        "content": "<p>The stream version gets stuck in <code>#reduce</code> because it is using a <code>partial</code> function to implement the iteration. Making it work without partial requires <a href=\"https://github.com/leanprover/std4/pull/127\">std4#127</a></p>",
        "id": 354841724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682937756
    },
    {
        "content": "<p>Can we hook into <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=FinEnum#doc\">docs4#FinEnum</a> here?</p>",
        "id": 354842461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682937965
    },
    {
        "content": "<p>yeah, the idea is similar to that, except not as antagonistic to producing fast code</p>",
        "id": 354842642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682938026
    },
    {
        "content": "<p>it wouldn't be hard to layer a <code>LawfulElems</code> typeclass over top which basically asserts that it produces all the elements, or alternatively it is given a <code>FinEnum</code> and asserts that it produces the same elements in the same order</p>",
        "id": 354843005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682938118
    },
    {
        "content": "<p>Do you mean such a layer would allow to prove stuff about programs using your <code>ForIn</code>?</p>",
        "id": 354844607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682938644
    },
    {
        "content": "<p>well I should hope so</p>",
        "id": 354844746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682938684
    },
    {
        "content": "<p>any approach that doesn't use <code>partial</code> (either well founded streams or forIn instances) can in principle be proved to have some behavior, and you probably want to have <code>LawfulElems</code> if you actually need to know it exhausts the type</p>",
        "id": 354845089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682938803
    },
    {
        "content": "<p>This is very nice! <br>\nI don't know the guidelines for what gets included in mathlib, but if Fin i -&gt; alpha is the recommended tuple type, should these definitions be added to Mathlib.Data.Fin.Tuple.Reflection?</p>",
        "id": 397376891,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1697659707
    },
    {
        "content": "<p>This sort of stuff is definitely desirable in Mathlib or Std. I think there is quite a bit of design work to do it, however: in the examples above Mario introduces <code>Elems</code> and <code>FinStream</code> which would both require API and integration with the library.</p>",
        "id": 397389414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697666854
    },
    {
        "content": "<p>I think it could be better handled by changing the desugaring of <code>for ... in</code> so that you can pass a type there</p>",
        "id": 397390838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697667777
    }
]