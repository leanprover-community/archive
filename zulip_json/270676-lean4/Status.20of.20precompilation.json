[
    {
        "content": "<p>Something I would love a summary of (<span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, if you're in the mood, your last one was great! :-) is where we are at in terms of running the <em>compiled</em> versions of mathlib tactics, in other mathlib proofs. I know something is preventing us from doing this, but I don't understand what.</p>",
        "id": 345534671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680134413
    },
    {
        "content": "<p>I dont know the specifics of that but the idea actually originates from the talk where I stole the picture from: <a href=\"http://leanprover.github.io/talks/WITS2022.pdf\">http://leanprover.github.io/talks/WITS2022.pdf</a> I was under the impression that even though it is difficult Sebastian can do it though?</p>",
        "id": 345572172,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680156628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20kernel.2C.20really.3F.E2.80.94and.20other.20fundamental.20questions/near/345534671\">said</a>:</p>\n<blockquote>\n<p>Something I would love a summary of (<span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>, if you're in the mood, your last one was great! :-) is where we are at in terms of running the <em>compiled</em> versions of mathlib tactics, in other mathlib proofs. I know something is preventing us from doing this, but I don't understand what.</p>\n</blockquote>\n<p>I think (but don't quote me on this) that this is a Lake issue. Lake currently knows how to pre-compile a whole package, so Std and Aesop are pre-compiled. But it does not know how to pre-compile individual files. And mathlib tactics can't easily be split into their own package since they depend on a lot of definitions and lemmas.</p>",
        "id": 345620194,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680170097
    },
    {
        "content": "<p>It is actually the other way around - lake knows how to precompile individual modules (thus the option name) but not whole packages <a href=\"https://github.com/leanprover/lake/issues/136\">https://github.com/leanprover/lake/issues/136</a></p>",
        "id": 345627359,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680172147
    },
    {
        "content": "<p>It appears that for current mathlib4 the overhead from the current precompilation scheme is larger than the speedup from avoiding interpretation. This is not too surprising to me as by the <a href=\"#narrow/stream/287929-mathlib4/topic/port.20benchmark/near/340915580\">numbers</a> I got the last time, \"only\" around 10% of the mathlib4 build is spent in the interpreter, so the margin for introducing additional overhead is not high.</p>",
        "id": 345628725,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680172556
    },
    {
        "content": "<p>But this is for the one-size-fits-all solution of precompiling every computable definition in mathlib4; a more selective scheme should be able to get closer to saving those 10%</p>",
        "id": 345629222,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680172695
    },
    {
        "content": "<p>Is it possible, though, that expensive search tactics (e.g. <code>library_search</code>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/2898\"><code>propose</code></a>, and <a href=\"https://github.com/leanprover-community/mathlib4/pull/3119\"><code>rewrites</code></a> are the ones that could benefit most from compilation? And these will never show up in your statistics because their uses are solely during exploration, and are not committed to the repo.</p>",
        "id": 345629323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680172734
    },
    {
        "content": "<p>On the other hand, <code>ring</code> and <code>linarith</code> are slow tactics that do make it into the repo.</p>",
        "id": 345629460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680172773
    },
    {
        "content": "<p>Yes, good point. Unfortunately without the doomed PR linked in my second link, it's hard to measure the potential impact accurately.</p>",
        "id": 345630153,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680172964
    },
    {
        "content": "<p>Well, it would not be hard to experiment with it though - set <code>precompileModules := true</code> in the lakefile, then use one of these tactics in a file importing the tactic. You can copy Lake's <code>lean</code> cmdline and remove the <code>--load-dynlib</code> arguments to compare the performance without having to change the lakefile again.</p>",
        "id": 345630727,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680173120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20kernel.2C.20really.3F.E2.80.94and.20other.20fundamental.20questions/near/345629222\">said</a>:</p>\n<blockquote>\n<p>But this is for the one-size-fits-all solution of precompiling every computable definition in mathlib4; a more selective scheme should be able to get closer to saving those 10%</p>\n</blockquote>\n<p>Good news: if I hard-code precompilation only for <code>Aesop.*</code>, <code>Mathlib.Tactic.*</code>, and <code>Mathlib.Mathport.Rename</code>, a full rebuild is 2% wall clock and 3.5% task clock faster than without precompilation</p>",
        "id": 345661402,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680180565
    },
    {
        "content": "<p>It precompiled 453 modules into 35MB of shared libraries; that seems like an amount we could put in the cache even per platform, but also I should probably be more selective for <code>Mathlib.Tactic</code> in order to exclude tactics that are not performance-critical but come with a ton of dependencies.</p>",
        "id": 345663347,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680180974
    },
    {
        "content": "<p>14 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/What.20is.20the.20kernel.2C.20really.3F.E2.80.94and.20other.20fundamental.20questions\">#lean4 &gt; What is the kernel, really?—and other fundamental questions</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 345663583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680181029
    },
    {
        "content": "<p>What is still completely unclear at this point:</p>\n<ul>\n<li>What is the impact on other platforms?</li>\n<li>How much specifically is the linking and compilation overhead, and how much interpretation is left?</li>\n<li>What should be the proper Lake API for this? <code>precompileModuleGlobs</code>? /cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></li>\n</ul>",
        "id": 345665328,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680181353
    },
    {
        "content": "<p>I'm a bit surprised that this doesn't have a bigger impact (though 2% is nothing to scoff at). Any theories? I guess many tactics spend most of their time in core routines, which are pre-compiled anyway?</p>",
        "id": 345677109,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680183709
    },
    {
        "content": "<p>Again, 10% is the limit. I'm sure much of that is lost by the newly introduced overhead, but I intend to have the speedcenter give us more detailed figures there.</p>",
        "id": 345677938,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680183875
    },
    {
        "content": "<p>What speedup do we usually experienced with something purely compiled vs something purely interpreted? Do we have numbers on that?</p>",
        "id": 345682444,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680184828
    },
    {
        "content": "<p>20x is definitely possible AFAIR</p>",
        "id": 345685192,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1680185321
    },
    {
        "content": "<p>:O</p>",
        "id": 345687150,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1680185589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Status.20of.20precompilation/near/345663347\">said</a>:</p>\n<blockquote>\n<p>I should probably be more selective for <code>Mathlib.Tactic</code> in order to exclude tactics that are not performance-critical but come with a ton of dependencies.</p>\n</blockquote>\n<p>If you push somewhere the setup that precompiles only <code>Mathlib.Tactic.*</code>, I'm happy to do the curation down to a smaller subset.</p>",
        "id": 345786981,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680210365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span>, a conclusion from today's porting meeting is the precompilation of tactics is not compatible with our current olean caching strategy, and so if we bump the dependency on aesop, as in the PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/3236\">https://github.com/leanprover-community/mathlib4/pull/3236</a> (which we won't merge!), then <code>lake exe cache get</code> is not going to work anymore.</p>",
        "id": 346686267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680559127
    },
    {
        "content": "<p>Could you turn off tactic precompilation again, so we can continue tracking <code>aesop</code> while this is addressed?</p>",
        "id": 346686313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680559151
    },
    {
        "content": "<p>Precompilation is now disabled again. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I've also removed the trace messages that Aesop would print  when <code>profiler</code> is enabled.</p>\n<p>Btw, the <code>destructProducts</code> transparency change is coming next week since I'm on holiday this week.</p>",
        "id": 347112868,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1680694979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Status.20of.20precompilation/near/345665328\">said</a>:</p>\n<blockquote>\n<ul>\n<li>What should be the proper Lake API for this? <code>precompileModuleGlobs</code>? /cc <span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span></li>\n</ul>\n</blockquote>\n<p>Sorry, I just realized I missed the email notification for this mention during the flurry of discussion about the Lake subtree. The way I was thinking this would be done is something like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"n\">Mathlib.Tactic</span> <span class=\"n\">where</span>\n   <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n   <span class=\"c1\">-- any other options</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">Mathlib</span> <span class=\"n\">where</span>\n   <span class=\"c1\">--- normal mathlib configuration</span>\n</code></pre></div>\n<p>However, I have tested that this works. I think Lean (and Lake) may not currently permit two libraries to have the same prefix. If so, <code>Mathlib.Tactic</code> would likely have to be named <code>MathlibTatic</code> for now.</p>",
        "id": 348388411,
        "sender_full_name": "Mac Malone",
        "timestamp": 1681201027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Status.20of.20precompilation/near/345677938\">said</a>:</p>\n<blockquote>\n<p>Again, 10% is the limit. I'm sure much of that is lost by the newly introduced overhead, but I intend to have the speedcenter give us more detailed figures there.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3575\">!4#3575</a>. This is for <code>Mathlib.Mathport.Rename</code> only for now, which is a perfect first test case as it has no dependencies that have to be precompiled first but is perhaps the most-interpreted code in mathlib4.</p>",
        "id": 351675021,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682093541
    },
    {
        "content": "<p><code>ToAdditive</code> in contrast has a dependency closure of size 72, benchmarking now</p>",
        "id": 351675064,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682093550
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s new Lake progress display is the simplest way I'm aware of for computing the closure size of a module</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span>lake<span class=\"w\"> </span>clean<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Mathlib.Tactic.LibrarySearch\n<span class=\"go\">[0/13] Building Std.Lean.Expr</span>\n<span class=\"go\">[0/17] Building Std.Tactic.OpenPrivate</span>\n<span class=\"go\">[0/13] Building Std.Util.ExtendedBinder</span>\n<span class=\"go\">[0/13] Building Std.Tactic.TryThis</span>\n<span class=\"go\">[0/19] Building Std.Data.Option.Init.Lemmas</span>\n<span class=\"go\">[0/20] Building Std.Tactic.HaveI</span>\n<span class=\"go\">[0/28] Building Std.Lean.TagAttribute</span>\n<span class=\"go\">[0/28] Building Std.Tactic.Unreachable</span>\n<span class=\"go\">[0/32] Building Std.Tactic.SeqFocus</span>\n<span class=\"go\">[0/34] Building Std.Tactic.ByCases</span>\n<span class=\"go\">[0/38] Building Std.Lean.Parser</span>\n<span class=\"go\">[0/38] Building Std.Tactic.GuardExpr</span>\n<span class=\"go\">[0/169] Building Std.Lean.Meta.Basic</span>\n<span class=\"go\">...</span>\n<span class=\"go\">[168/169] Building Mathlib.Tactic.LibrarySearch</span>\n</code></pre></div>\n<p>That's not small!</p>",
        "id": 351684313,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682096133
    },
    {
        "content": "<p>is that a progress bar? because it seems to be going the wrong direction</p>",
        "id": 351684519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096181
    },
    {
        "content": "<p>ideally std should be precompiled though, does it really need to be counted here?</p>",
        "id": 351684883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Status.20of.20precompilation/near/351684519\">said</a>:</p>\n<blockquote>\n<p>is that a progress bar? because it seems to be going the wrong direction</p>\n</blockquote>\n<p>Bad cropping on my part, it seems to go the right direction after hitting 169</p>",
        "id": 351685306,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682096372
    },
    {
        "content": "<p>is that the number of files that have been discovered so far or something?</p>",
        "id": 351685885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Status.20of.20precompilation/near/351684883\">said</a>:</p>\n<blockquote>\n<p>ideally std should be precompiled though, does it really need to be counted here?</p>\n</blockquote>\n<p>That's a good question, it depends on whether loading the shared libs is negligible. But I'm assuming that generic meta programs like <code>to_additive</code> will not change all that often either, at least going forward.</p>",
        "id": 351686261,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682096590
    },
    {
        "content": "<p>So the way I should read this is that <code>Mathlib.Tactic.LibrarySearch</code> depends on 169 other files</p>",
        "id": 351686312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096605
    },
    {
        "content": "<p>I believe so</p>",
        "id": 351686374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682096622
    },
    {
        "content": "<p>because if I kept reading the output the number stops growing after <code>[.../169]</code></p>",
        "id": 351686462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682096642
    },
    {
        "content": "<p>It does hit <code>168/169</code> in the end</p>",
        "id": 351686810,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682096713
    },
    {
        "content": "<p>The progress bar is [completed/discovered], which is counter intuitive for parallel compilation</p>",
        "id": 351690732,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1682097785
    },
    {
        "content": "<p><span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span>  for a progress bar!</p>",
        "id": 351702034,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1682100927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Status.20of.20precompilation/near/351684883\">said</a>:</p>\n<blockquote>\n<p>ideally std should be precompiled though, does it really need to be counted here?</p>\n</blockquote>\n<p>Note that if we actually want to cache the shared libraries for <em>all</em> platforms, that effectively requires cross-compilation on CI</p>",
        "id": 351702330,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682101005
    },
    {
        "content": "<p>The platform caching support is certainly the largest unsolved issue with this entire approach. Using precompilation only on some platforms is probably untenable, it would demote those other platforms to a second class with wildly differing performance profiles from the first class. Caching precompilation only on some or on no platforms is only acceptable if recompilation is fast enough, ideally a fraction of the time it takes to acquire the cache; as the PR is already at 85s native compilation, this does not appear feasible either without finding a sweet spot of optimization options. Cross-compilation finally <em>should be</em> achievable thanks to LLVM being a native cross-compiler and our toolchain being standalone, but I'm not sure yet how the actual caching would work.</p>",
        "id": 351722646,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682107499
    }
]