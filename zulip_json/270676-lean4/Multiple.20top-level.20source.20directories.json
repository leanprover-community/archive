[
    {
        "content": "<p>I'm trying to set up a lean project like a monorepo, kinda like Mathlib I guess but hopefully less complicated. I'm reading through the FPIL book and watching the new videos for Lean for the Curious Mathematician and I have a directory for notes for each. I want all files in both directories to have access to Mathlib but I'm having trouble making it work with my project structure.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>├── build\n├── lake-packages\n├── Functional Programming in Lean\n│   ├── 5.0\n│   ├── 5.1\n│   └── 5.2\n├── Lean for the Curious Mathematician\n│   └── Structures and Classes.lean\n└── lakefile.lean\n</code></pre></div>\n<p>This is what I've tried adding to the lakefile but my source files still can't see Mathlib</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Also I would prefer if I didn't need to have a top-level lean file of the same name that imports every new file, but I can't get that to work either anyway. I want to be able to create a new file and have it see Mathlib without any extra work. Is this possible with Lake?</p>",
        "id": 399641854,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1698806055
    },
    {
        "content": "<p>That folder hierarchy should work. You should just add <code>globs := #[.submodules `«Functional Programming in Lean»]</code> to the <code>«Functional Programming in Lean»</code> lib, and your LFTCM lean lib will look similar.</p>",
        "id": 399642359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698806322
    },
    {
        "content": "<p>I now have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">sandbox</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">`«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Lean</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">Curious</span> <span class=\"n\">Mathematician</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">`«</span><span class=\"n\">Lean</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">Curious</span> <span class=\"n\">Mathematician</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>But I'm still seeing errors that would be resolved if Mathlib were available</p>",
        "id": 399643054,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1698806680
    },
    {
        "content": "<p>Are you opening the entire folder in VSCode? If you open individual files that will not work.</p>",
        "id": 399645745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698808082
    },
    {
        "content": "<p>I needed <code>import Mathlib</code> and it resolved my errors. Silly mistake. It actually looks like I can import anything from Mathlib and it works.</p>\n<p>The reason I hadn't imported anything was because my error was about a missing instance and I had no idea which specific thing I needed to import to fix it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.564</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.565</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>Then I found out you can just import the whole Mathlib. It feels a little hacky, is that bad practice?</p>",
        "id": 399650168,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1698810622
    },
    {
        "content": "<p>Once your work is done you should carefully reduce imports again, but during development it is fine.</p>",
        "id": 399650607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698810895
    },
    {
        "content": "<p>(Certainly if you want to contribute your work to Mathlib, then <code>import Mathlib</code> is not allowed. :-)</p>",
        "id": 399650660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698810918
    }
]