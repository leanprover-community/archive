[
    {
        "content": "<p>Does this matter? I just noticed it in the port. The LHS can be beta-reduced.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Bicategory.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Category</span> <span class=\"n\">Bicategory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bicategory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">w₁</span> <span class=\"n\">w₂</span> <span class=\"n\">w₃</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₃</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₃</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₁</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">v₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">Quiver.</span><span class=\"o\">{</span><span class=\"n\">w₂</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">)]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">Prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">zipWith</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">⟶</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- The prefunctor between the underlying quivers. -/</span>\n<span class=\"n\">add_decl_doc</span> <span class=\"n\">PrelaxFunctor.toPrefunctor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">PrelaxFunctor</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">coe</span><span class=\"o\">]</span> <span class=\"n\">CategoryTheory.PrelaxFunctor.toPrefunctor</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">hasCoeToPrefunctor</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">PrelaxFunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">toPrefunctor</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">PrelaxFunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">to_prefunctor_obj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Prefunctor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">=</span> <span class=\"n\">F.obj</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- ⊢ (↑F).obj = (↑F).obj</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">But LHS has two unapplied lambdas</span>\n\n<span class=\"cm\">⊢ @Eq.{max (u₁ + 1) (u₂ + 1)} (B → C)</span>\n<span class=\"cm\">  (@Prefunctor.obj.{v₁ + 1, v₂ + 1, u₁, u₂} B inst✝⁵ C inst✝³</span>\n<span class=\"cm\">    (@CategoryTheory.PrelaxFunctor.toPrefunctor.{w₁, w₂, v₁, v₂, u₁, u₂} B inst✝⁵</span>\n<span class=\"cm\">      (fun (a b : B) =&gt; (fun (a b : B) =&gt; inst✝⁴ a b) a b) C inst✝³ (fun (a b : C) =&gt; (fun (a b : C) =&gt; inst✝² a b) a b)</span>\n<span class=\"cm\">      F))</span>\n<span class=\"cm\">  (@Prefunctor.obj.{v₁ + 1, v₂ + 1, u₁, u₂} B inst✝⁵ C inst✝³</span>\n<span class=\"cm\">    (@CategoryTheory.PrelaxFunctor.toPrefunctor.{w₁, w₂, v₁, v₂, u₁, u₂} B inst✝⁵ (fun (a b : B) =&gt; inst✝⁴ a b) C inst✝³</span>\n<span class=\"cm\">      (fun (a b : C) =&gt; inst✝² a b) F))</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">PrelaxFunctor</span>\n</code></pre></div>",
        "id": 328029291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676472701
    },
    {
        "content": "<p>The difference is only in the instance arguments right? So I think it should be fine, since those are more aggressively unfolded and checked for defeq when rewriting</p>",
        "id": 328057890,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1676479763
    }
]