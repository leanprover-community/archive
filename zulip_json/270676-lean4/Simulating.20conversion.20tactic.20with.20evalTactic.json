[
    {
        "content": "<p>Consider this example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">congr</span>\n    <span class=\"n\">rfl</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>After <code>conv =&gt;</code>, the current proof state shows the conversion goal <code>| a * (b * c) = a * (c * b)</code>. I would like to simulate this with <code>Tactic.evalTactic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">start_tactic_state</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span> <span class=\"bp\">→</span> <span class=\"n\">MVarId</span> <span class=\"bp\">→</span> <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">TermElabM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">syn</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">goal</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">elabType</span> <span class=\"n\">syn</span>\n  <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expr</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">expr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mvarId</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.run</span> <span class=\"n\">g</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"s2\">\"Tactic state started\"</span>\n      <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">)</span> <span class=\"n\">g</span>\n  <span class=\"k\">if</span> <span class=\"n\">goals.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"goals accomplished\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">goals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"goals not solved: {goals}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">execute_tactic</span> <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">Tactic.SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Tactic.TacticM</span> <span class=\"o\">(</span><span class=\"n\">Tactic.SavedState</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">state.restore</span>\n  <span class=\"n\">Tactic.setGoals</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Parser.runParserCategory</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">tactic</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">stx</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← e.toMessageData.toString}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages.hasErrors</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getThe</span> <span class=\"n\">Core.State</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">messages</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList.toArray</span>\n    <span class=\"k\">let</span> <span class=\"n\">errors</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">messages.map</span> <span class=\"n\">Message.data</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mapM</span> <span class=\"k\">fun</span> <span class=\"n\">md</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">md.toString</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{errors}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">unsolvedGoals</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.getUnsolvedGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">unsolvedGoals.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppGoal</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Tactic succeeded with goals {goals}\"</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">saveState</span><span class=\"o\">,</span> <span class=\"n\">unsolvedGoals</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proof_1</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (p q: Prop), p ∨ q → q ∨ p\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"intro p q h\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">g2</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"cases h\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g1</span> <span class=\"s2\">\"apply Or.inr\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g1</span> <span class=\"s2\">\"assumption\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g2</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g2</span> <span class=\"s2\">\"apply Or.inl\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g2</span> <span class=\"s2\">\"assumption\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proof_2</span><span class=\"o\">:</span> <span class=\"n\">CoreM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">start_tactic_state</span> <span class=\"s2\">\"∀ (a b c: Nat), a * (b * c) = a * (c * b)\"</span> <span class=\"k\">fun</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"intro a b c\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">g1</span><span class=\"o\">])</span> <span class=\"bp\">←</span> <span class=\"n\">execute_tactic</span> <span class=\"n\">state</span> <span class=\"n\">g</span> <span class=\"s2\">\"conv =&gt; lhs\"</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Init\"</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span> <span class=\"o\">:</span> <span class=\"n\">Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;onion&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">proof_2.toIO</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>However, this outputs</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span> <span class=\"n\">started</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">succeeded</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n<span class=\"n\">Tactic</span> <span class=\"n\">succeeded</span> <span class=\"k\">with</span> <span class=\"n\">goals</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n<span class=\"n\">goals</span> <span class=\"n\">not</span> <span class=\"n\">solved</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>which shows that the state has exited conversion mode. If I replace <code>conv =&gt; lhs</code> by <code>conv</code>, The tactic fails.</p>\n<p>Is there a way to  interactively view the result of conversion mode?</p>",
        "id": 361497693,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685173575
    }
]