[
    {
        "content": "<blockquote>\n<p>Importing is transitive. In other words, if you import Foo and Foo imports Bar, then you also have access to the contents of Bar, and do not need to import it explicitly.</p>\n</blockquote>\n<p>I guess in the theorem proving world, you need to be able to talk about stuff not directly imported, so that kinda makes sense.</p>\n<p>On the other hand, I think it is unfortunate, because a refactoring in one file (e.g. remove unnecessarily imports, or move definitions around) might break other files that depend on the transitive imports. And there's no way to find that out until you compile everything. The break might even occur in a different package...</p>\n<p>Is there a good solution to this issue?</p>",
        "id": 338986750,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1677719792
    },
    {
        "content": "<p>It's not hard to imagine an <a href=\"https://include-what-you-use.org/\">include-what-you-use</a>-style tool existing for lean, which could act as a linter</p>",
        "id": 338987271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677720167
    },
    {
        "content": "<p>But I expect it would be very easy for imports to grow into the hundreds for some mathlib files</p>",
        "id": 338987345,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677720229
    },
    {
        "content": "<p>It's also a little harder to pin down what counts as a \"use\" in the face of metaprogramming. <code>rw [some_lemma]</code> is fairly clearly a \"use\". But is <code>simp</code>, if this calls <code>some_lemma</code> under the hood? What about <code>ring</code>, which uses <code>some_internal.lemma_about_rings</code>; should you have to import the guts of the <code>ring</code> tactic to appease the linter?</p>",
        "id": 338987481,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677720351
    },
    {
        "content": "<p>Well, an approach in a language like Racket is that a macro can expand to code that reference unexported references. But users can't directly reference them, unless they explicitly import them.</p>",
        "id": 338992031,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1677724054
    },
    {
        "content": "<p>This could also be solved by having some kind <code>@[default_import]</code> marker for those lemmas that are implicitly imported. Then you could say that <code>simp</code> et al only has access to those lemmas that were explicitly imported and those that are marked <code>default_import</code>.<br>\nYou could then say that, e.g., the <code>@[simp]</code> attribute also implies <code>@[default_import]</code>.<br>\nThat at least makes it clear which definitions/lemmas should be handled with extra care</p>",
        "id": 339090036,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677761612
    },
    {
        "content": "<blockquote>\n<p>On the other hand, I think it is unfortunate, because a refactoring in one file (e.g. remove unnecessarily imports, or move definitions around) might break other files that depend on the transitive imports. And there's no way to find that out until you compile everything. The break might even occur in a different package...</p>\n</blockquote>\n<p>The problem is that moving around imports can change which <code>simp</code> lemmas are available; so I think probably you _do_ need to consider invisible applications in<code>simp</code> as a \"use\".</p>",
        "id": 339090974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677761896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360581\">Sorawee Porncharoenwase</span> <a href=\"#narrow/stream/270676-lean4/topic/.5Blanguage.20design.5D.20transitive.20import/near/338986750\">said</a>:</p>\n<blockquote>\n<p>Is there a good solution to this issue?</p>\n</blockquote>\n<p>I think it's worth thinking about what the purpose of modules and namespaces are. They're orthogonal to one another, where modules solve the problem of what to load, and namespaces solve the problem of what you can reference.</p>\n<p>One solution (at least theoretically, since I haven't used it myself), is to make sure every declaration occurs in some namespace that's more-or-less unique to the file, and then commit to avoiding fully qualified names (fully qualified names should be considered to be private). When you want to use such a declaration you require that you <code>open</code> that namespace first. If you do want to allow names to be usable transitively, you're able to use the <code>export</code> command  for that.</p>",
        "id": 339101773,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677764527
    },
    {
        "content": "<p>This doesn't solve any problems having to do with simp sets or attributes though.</p>",
        "id": 339101835,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677764545
    },
    {
        "content": "<p>Some recommended readings for this topic:</p>\n<ol>\n<li><a href=\"http://leanprover.github.io/talks/WITS2023.pdf\">Slides</a> from Sebastian's keynote at <a href=\"https://ifl23.github.io/wits.html\">WITS 23</a> about public signatures for Lean modules, <code>private import</code>, <code>import ... for meta</code>, and how to work towards a Lean Interface.</li>\n<li><em>3.3 The (Future of the) Module System</em> in <a href=\"https://leanprover.github.io/papers/thesis-sebastian.pdf\">An Extensible Theorem Proving Frontend ( <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> 's thesis ) </a> about choices, complications and viable solutions to solve the transitive importing issue. (It's dated before the slides, so the proposal is less explicit, but the discussions are more in depth)</li>\n</ol>",
        "id": 391355595,
        "sender_full_name": "Utensil Song",
        "timestamp": 1694857147
    }
]