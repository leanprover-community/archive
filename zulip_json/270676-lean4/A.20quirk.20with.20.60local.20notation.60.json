[
    {
        "content": "<p>This is something that took me some time to figure out while porting a file:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FT</span> <span class=\"o\">(</span><span class=\"n\">_n</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"F\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FT</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FT</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- declaration uses 'sorry'</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span>  <span class=\"c1\">-- `x : FT (sorryAx Unit true)`</span>\n<span class=\"k\">#check</span> <span class=\"n\">y</span>  <span class=\"c1\">-- `y : F`</span>\n</code></pre></div>\n<p>The variable <code>x</code> has a <code>sorry</code> embedded where the <code>p</code> should be.  I imagine that this is due to the fact that <code>p</code> is a local variable.</p>\n<p>If you remove <code>local</code> from the notation, Lean complains with an unknown identifier (expected).<br>\nWith <code>local</code>, Lean just forces through... (I would have preferred the same complaint!)</p>",
        "id": 364186370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686122720
    },
    {
        "content": "<p>Right, you can't use variables in notation, but you're saying you can use them in local notation and they just cause chaos.</p>",
        "id": 364187575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686123069
    },
    {
        "content": "<p>Yes, precisely.  I would have preferred to get the same error that I had without the <code>local</code> also when <code>local</code> was inserted.</p>",
        "id": 364187713,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686123102
    },
    {
        "content": "<p>note that this happened exactly in Witt vectors: the setup is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"n\">stuff</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- mathport name: exprùïé</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"ùïé\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">WittVector</span> <span class=\"n\">p</span>   <span class=\"c1\">-- oh no!</span>\n</code></pre></div>",
        "id": 364187940,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686123167
    },
    {
        "content": "<p>Oh did that work in lean 3?</p>",
        "id": 364188954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686123438
    },
    {
        "content": "<p>It did work, in the sense that it inserted the local variable <code>p</code> correctly, instead of a <code>sorry</code>.</p>",
        "id": 364189316,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686123545
    },
    {
        "content": "<p>There is a note:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> We cannot make this `localized` notation, because the `p` on the RHS doesn't occur on the left</span>\n<span class=\"cm\">Hiding the `p` in the notation is very convenient, so we opt for repeating the `local notation`</span>\n<span class=\"cm\">in other files that use Witt vectors. -/</span>\n</code></pre></div>",
        "id": 364189421,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686123583
    },
    {
        "content": "<p>So, I guess that this is also a warning that this issue will crop up in later Witt vector files!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 364189880,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686123705
    },
    {
        "content": "<p>maybe it can be made to work in Lean 4 with <code>hygiene</code> somehow?</p>",
        "id": 364190289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686123796
    },
    {
        "content": "<p>To see the relevant code:</p>\n<ul>\n<li>in mathlib3 <a href=\"https://leanprover-community.github.io/mathlib_docs/find/witt_vector\">docs#witt_vector</a>,  (the <a href=\"https://github.com/leanprover-community/mathlib/blob/58a272265b5e05f258161260dd2c5d247213cbd3/src/ring_theory/witt_vector/defs.lean#L59\">actual line with the notation</a>)</li>\n<li>in mathlib4 <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=WittVector#doc\">docs4#WittVector</a>  (the <a href=\"https://github.com/leanprover-community/mathlib4/blob/47535ddd6cff5cf523b8914a5269639641b9bb54/Mathlib/RingTheory/WittVector/Defs.lean#L66\">actual line with the notation</a>).</li>\n</ul>",
        "id": 364190404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686123822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/A.20quirk.20with.20.60local.20notation.60/near/364190289\">said</a>:</p>\n<blockquote>\n<p>maybe it can be made to work in Lean 4 with <code>hygiene</code> somehow?</p>\n</blockquote>\n<p>Maybe, I have not thought about how to fix it.</p>",
        "id": 364191228,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686124018
    },
    {
        "content": "<p>wondering if it would be better to introduce a let-bind notation to argument lists where you can do something like<br>\n<code>def foo {p : Nat} (let W := WittVector p) [Bar W] := sorry</code><br>\nbecause then the <code>variable</code> statement can just have <code>(let ùïé := WittVector p)</code>. I'd also find this occasionally useful for programming with really complicated types.</p>",
        "id": 364972896,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686346027
    },
    {
        "content": "<p>Replying to an old thread, but you can do with when disabling hygiene:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FT</span> <span class=\"o\">(</span><span class=\"n\">_n</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">hygiene</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"F\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">FT</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">FT</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>  <span class=\"c1\">-- works</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span>  <span class=\"c1\">-- `x : F`</span>\n<span class=\"k\">#check</span> <span class=\"n\">y</span>  <span class=\"c1\">-- `y : F`</span>\n</code></pre></div>",
        "id": 366150389,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686742647
    }
]