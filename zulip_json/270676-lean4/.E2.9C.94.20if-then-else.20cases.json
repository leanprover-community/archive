[
    {
        "content": "<p>Hi, I'm new here so I hope I'm doing this right.<br>\nI was trying to practice a bit of definitions and theorem proving with a ListNat type. And one of the theorems I tried to prove has an if-then-else on one of the definitions used, and I just don't know what to do. This is what I've done so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lenght_concat_filter_even_odd_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">):</span>\n  <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filterEven</span><span class=\"o\">,</span> <span class=\"n\">filterOdd</span><span class=\"o\">,</span> <span class=\"n\">concat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filterEven</span><span class=\"o\">,</span> <span class=\"n\">filterOdd</span><span class=\"o\">,</span> <span class=\"n\">odd</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>And this is the stage in which lean is telling me I am:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">cons</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">ListNat</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">ListNat</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">xs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">length</span>\n    <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"n\">filterEven</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">if</span>\n          <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n            <span class=\"bp\">!</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n            <span class=\"n\">true</span> <span class=\"k\">then</span>\n        <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span> <span class=\"n\">filterOdd</span> <span class=\"n\">xs</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would really appreciate the help, already looked at the documentation and on what I could find, but got more confusion than answers.</p>",
        "id": 395592245,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696813463
    },
    {
        "content": "<p>You can probably do <code>by_cases hx : even x</code>. But it will become a lot easier to help you after you'll have read <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and updated your code snippet accordingly.</p>",
        "id": 395594367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696814553
    },
    {
        "content": "<p>Note that if you are using Mathlib there is also a <code>split_ifs</code>tactic that would probably help.</p>",
        "id": 395595253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696815045
    },
    {
        "content": "<p>If there were a <code>length_partition</code> or <code>perm_partition</code> lemma, I would link that. But I couldn't find one <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 395599922,
        "sender_full_name": "Chris Wong",
        "timestamp": 1696817924
    },
    {
        "content": "<p>Actually, there is!<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Perm.html#List.filter_append_perm\">https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/List/Perm.html#List.filter_append_perm</a></p>",
        "id": 395654552,
        "sender_full_name": "Chris Wong",
        "timestamp": 1696843213
    },
    {
        "content": "<p>Updating my code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ListNat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">concat</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span> <span class=\"n\">list</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">list</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">list</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"n\">l</span> <span class=\"n\">list</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterEven</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">filterEven</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterOdd</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">filterOdd</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">lenght_concat_filter_even_odd_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">):</span>\n  <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filterEven</span><span class=\"o\">,</span> <span class=\"n\">filterOdd</span><span class=\"o\">,</span> <span class=\"n\">concat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filterEven</span><span class=\"o\">,</span> <span class=\"n\">filterOdd</span><span class=\"o\">,</span> <span class=\"n\">odd</span><span class=\"o\">]</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">case cons</span>\n<span class=\"cm\">x: Nat</span>\n<span class=\"cm\">xs: ListNat</span>\n<span class=\"cm\">h: length (concat (filterEven xs) (filterOdd xs)) = length xs</span>\n<span class=\"cm\">⊢ length</span>\n<span class=\"cm\">    (concat (if even x = true then cons x (filterEven xs) else filterEven xs)</span>\n<span class=\"cm\">      (if</span>\n<span class=\"cm\">          (let n := x;</span>\n<span class=\"cm\">            !even n) =</span>\n<span class=\"cm\">            true then</span>\n<span class=\"cm\">        cons x (filterOdd xs)</span>\n<span class=\"cm\">      else filterOdd xs)) =</span>\n<span class=\"cm\">  length (cons x xs)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 395735688,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696869976
    },
    {
        "content": "<p>Does this help?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">lenght_concat_filter_even_odd_list</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">):</span>\n  <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">concat</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filterEven</span><span class=\"o\">,</span> <span class=\"n\">filterOdd</span><span class=\"o\">,</span> <span class=\"n\">concat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">filterEven</span><span class=\"o\">,</span> <span class=\"n\">filterOdd</span><span class=\"o\">,</span> <span class=\"n\">odd</span><span class=\"o\">]</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">x</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">ite_true</span><span class=\"o\">,</span> <span class=\"n\">ite_false</span><span class=\"o\">]</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395736709,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696870488
    },
    {
        "content": "<p>It helps, but is there a way I can do it without simp?</p>",
        "id": 395737731,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696870950
    },
    {
        "content": "<p>You can <code>rw</code> the lemmas which <code>simp</code> is suggesting.</p>",
        "id": 395737807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696870985
    },
    {
        "content": "<p>And for ite_true, ite_false, that's an import, right?</p>",
        "id": 395737841,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696871011
    },
    {
        "content": "<p>Just right click on them to find out, I'm afraid I don't know.</p>",
        "id": 395737974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696871067
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ite_true#doc\">docs#ite_true</a></p>",
        "id": 395738005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696871081
    },
    {
        "content": "<p>Looks like it's in core (so no import required?)</p>",
        "id": 395738069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696871121
    },
    {
        "content": "<p>Thank you, that will help greatly, just have to make true = true become True now.</p>",
        "id": 395738240,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696871198
    },
    {
        "content": "<p>Oh, wait, I think it's just arguments it's missing, so that's fine.</p>",
        "id": 395738361,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696871277
    },
    {
        "content": "<p>Oh just to clarify -- by \"the lemmas which <code>simp</code> is suggesting\" I meant \"that explicit simp call might have been suggested by <code>simp?</code>\"</p>",
        "id": 395738565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696871375
    },
    {
        "content": "<p>Hannah, do you want to avoid using Mathlib tactics? Otherwise I still claim <code>split_ifs</code> would be useful.</p>",
        "id": 395738576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696871382
    },
    {
        "content": "<p>I tried before and it didn't work, maybe it was because of indentation, I'll try it again.</p>",
        "id": 395738953,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696871556
    },
    {
        "content": "<p>Yep, same problem, it's saying it's an unknown tactic.</p>",
        "id": 395739035,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696871610
    },
    {
        "content": "<p>You need to import <code>Mathlib.Tactic</code>, or at least <code>Mathlib.Tactic.SplitIfs</code>.</p>",
        "id": 395739166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696871667
    },
    {
        "content": "<p>And of course your project need to have Mathlib as a dependency.</p>",
        "id": 395739203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696871686
    },
    {
        "content": "<p>Well.... How can I do that? I tried something like this on another thing I was doing, and looked through some documentation, but I can't use mathlib for some reason, I don't know if I forgot to download something or not.</p>",
        "id": 395739720,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696871952
    },
    {
        "content": "<p>Actually I just tried and <code>split_ifs</code> is not so nice with <code>Bool</code>-valued things (as opposed to <code>Prop</code>-valued).</p>",
        "id": 395739769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696871982
    },
    {
        "content": "<p>Did you follow installation instructions from <a href=\"https://leanprover-community.github.io/get_started.html\">https://leanprover-community.github.io/get_started.html</a>?</p>",
        "id": 395739842,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872006
    },
    {
        "content": "<p>Yes.</p>",
        "id": 395739882,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696872029
    },
    {
        "content": "<p>The end of each OS-specific page sends you to <a href=\"https://leanprover-community.github.io/install/project.html\">https://leanprover-community.github.io/install/project.html</a> which explains how to start a new project depending on Mathlib.</p>",
        "id": 395739887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872035
    },
    {
        "content": "<p>But what if Hannah already correctly made a project which does not depend on mathlib? (maybe we can wait before answering this and find out what the actual situation is)</p>",
        "id": 395739920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696872058
    },
    {
        "content": "<p>Also you definitions of <code>even</code> and <code>odd</code> are mixtures of <code>Bool</code> and <code>Prop</code> since you announce a <code>Bool</code> return type but return <code>True</code> or <code>False</code> which are in <code>Prop</code>.</p>",
        "id": 395740195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872203
    },
    {
        "content": "<p>A <code>lakefile.lean</code> in a project which has mathlib as a dependency might look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">mweSkeletons</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">MweSkeletons</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And then <code>lake exe cache get</code> downloads the compiled mathlib binaries, and then mathlib should hopefully work with <code>import Mathlib</code>.</p>",
        "id": 395740215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696872214
    },
    {
        "content": "<p>I guess you meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 395740240,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872236
    },
    {
        "content": "<p>Aah this might explain the <code>true = true</code> remark earlier! The coercion from <code>bool</code> to <code>Prop</code> sends <code>b</code> to <code>b = true</code>.</p>",
        "id": 395740337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696872285
    },
    {
        "content": "<p>And then your life will be a lot easier if you use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">filterEven</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">filterEven</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">filterEven</span> <span class=\"n\">l</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filterOdd</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">filterOdd</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">filterOdd</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>so that you main proof needs only one case split. But maybe you will consider this is cheating, depending on how you set the challenge.</p>",
        "id": 395740354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872299
    },
    {
        "content": "<p>If you stick to <code>Bool</code> you can do <code>cases even x</code> instead of the <code>by_cases he : even x</code> that has been suggested above and assumes you want to work with <code>Prop</code>.</p>",
        "id": 395740548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872415
    },
    {
        "content": "<p>I'm sorry about this mess but this place is infested with mathematicians like Kevin and I who never think in terms of <code>Bool</code>, that's why we provided conflicting pieces of advice.</p>",
        "id": 395740730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696872494
    },
    {
        "content": "<p>If you replace your <code>if</code>s by <code>bif</code>s and follow Patrick's suggestion of replacing <code>True</code>/<code>False</code> by <code>true</code>/<code>false</code>, then <code>rw [he, cond_true, Bool.cond_not, he, cond_true]</code> works in place of the simp only line I mentioned earlier</p>",
        "id": 395740813,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696872554
    },
    {
        "content": "<p>Patrick, about that even, yes, the rest of my code is on the true/false of Bool, I don't know how I mistyped that one, thank you. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 395740825,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696872565
    },
    {
        "content": "<p>My only problem now is that I have false = true instead, since I chose to put <code>cases even x</code>.</p>",
        "id": 395741550,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696872962
    },
    {
        "content": "<p>And what is that <code>bif</code>, Mauricio? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 395741630,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1696872997
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bif#doc\">docs#bif</a></p>",
        "id": 395741738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696873072
    },
    {
        "content": "<p>Unfortunately Bool.cond_not is from Mathlib, let me find an alternative<br>\nEDIT: Okay, I'm lazy. The best \"alternative\" is probably to copy the one-line theorem/proof into your file: <code>theorem cond_not {α} (b : Bool) (t e : α) : cond (!b) t e = cond b e t := by cases b &lt;;&gt; rfl</code></p>",
        "id": 395741815,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696873103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"656666\">Hannah Santos</span> <a href=\"#narrow/stream/270676-lean4/topic/if-then-else.20cases/near/395741630\">said</a>:</p>\n<blockquote>\n<p>And what is that <code>bif</code>, Mauricio? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>\n</blockquote>\n<p>Quoting from the documentation in Init/Prelude.lean: <code>cond b x y</code> is the same as <code>if b then x else y</code>, but optimized for a boolean condition. It can also be written as <code>bif b then x else y</code>.</p>\n<p>(If that sounds like <code>if</code>, then compare with the documentation for the actual <code>if</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ite</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">c</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p><code>if c then t else e</code> is notation for <code>ite c t e</code>, \"if-then-else\", which decides to return <code>t</code> or <code>e</code> depending on whether <code>c</code> is true or false. The explicit argument <code>c : Prop</code> does not have any actual computational content, but there is an additional <code>[Decidable c]</code> argument synthesized by typeclass inference which actually determines how to evaluate <code>c</code> to <code>true</code> or <code>false</code>).</p>",
        "id": 395742040,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696873217
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=cond#doc\">docs#cond</a></p>",
        "id": 395742105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696873262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">bif</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">cond</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>So <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=bif#doc\">docs#bif</a> is not expected to work here? sorry to go off at a tangent but somehow this isn't ideal I guess.</p>",
        "id": 395742358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696873415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"656666\">Hannah Santos</span> <a href=\"#narrow/stream/270676-lean4/topic/if-then-else.20cases/near/395741550\">said</a>:</p>\n<blockquote>\n<p>My only problem now is that I have false = true instead, since I chose to put <code>cases even x</code>.</p>\n</blockquote>\n<p>You should be able to use <code>have H : false ≠ true := by intro H ; cases H</code> and then <code>rw [if_neg H]</code>. But really this strange situation comes from mixing <code>Bool</code> and <code>Prop</code>.</p>",
        "id": 395744610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696874753
    },
    {
        "content": "<p>it is not expected to work indeed</p>",
        "id": 395744611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696874753
    },
    {
        "content": "<p>Mario, since you're here, I'll point out that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Bool.ff_ne_tt#doc\">docs#Bool.ff_ne_tt</a> from std sounds a bit old-fashioned.</p>",
        "id": 395744763,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696874831
    },
    {
        "content": "<p>there are a few ways to make either this specific example or this class of examples link correctly <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , but the options all seem rather hackish</p>",
        "id": 395744769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696874833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> be the change you wish to see in the world</p>",
        "id": 395744792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696874858
    },
    {
        "content": "<p>I was expecting that answer...</p>",
        "id": 395744809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696874873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> merge the change you wish to see in the world</p>",
        "id": 395745352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696875211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"656666\">Hannah Santos</span> has marked this topic as resolved.</p>",
        "id": 396137567,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697045726
    }
]