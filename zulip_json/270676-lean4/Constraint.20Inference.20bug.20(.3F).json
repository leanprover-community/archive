[
    {
        "content": "<p>Hello everyone</p>\n<p>I've just encountered a weird phenomenon, which seems to be a bug in constraint inference<br>\nI have the following typeclasses (methods are omitted for simplicity)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">CurveGroup</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PointSerialise</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>and also I have instances for types <code>ProjectivePoint</code> and <code>AffinePoint</code> (with required typevariables and constraints defined above in my module)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>\n<p>But when I'm trying to declare instances of <code>PointSerialise</code> in the same module,  <code>instance : PointSerialise C (ProjectivePoint C) where</code> is accepted, whereas <code>instance : PointSerialise C (AffinePoint C) where</code> is rejected with <code>failed to synthesize instance\n  CurveGroup C (AffinePoint C)</code>. That's strange 'cause all required <code>CurveGroup</code> instances are declared in the same module.</p>",
        "id": 341321173,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678646044
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? Your question is much more likely to get a helpful answer that way. Right now all we know is that either you made a mistake somewhere or there's a bug, and it's difficult to diagnose further without being able to see the error on my own computer.</p>",
        "id": 341321536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678646257
    },
    {
        "content": "<p>I've just pushed the commit with that error, I can post the github link here</p>",
        "id": 341321994,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678646493
    },
    {
        "content": "<p>Or let me just post the full listing with required definitions</p>",
        "id": 341322096,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678646533
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">YatimaStdLib.Ring</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Curve</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ProjectivePoint</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">AffinePoint</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">affine</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AffinePoint</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">infinity</span> <span class=\"o\">:</span> <span class=\"n\">AffinePoint</span> <span class=\"n\">C</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CurveGroup</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">K</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n  <span class=\"n\">double</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">K</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ProjectivePoint</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">infinity</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">-</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">⟩</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n  <span class=\"n\">double</span> <span class=\"o\">:=</span> <span class=\"n\">double</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">AffinePoint</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">infinity</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n  <span class=\"n\">double</span> <span class=\"o\">:=</span> <span class=\"n\">double</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">PointSerialise</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">K</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Serialise</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- rejected with \"failed to synthesize instance CurveGroup C (AffinePoint C)\"</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PointSerialise</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- accepted</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PointSerialise</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341322878,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678646918
    },
    {
        "content": "<p>Here it is</p>",
        "id": 341322928,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678646945
    },
    {
        "content": "<p>The full module is in here<br>\n<a href=\"https://github.com/yatima-inc/FF.lean/blob/daniel/restructure-typeclasses/FF/EllipticCurve.lean\">https://github.com/yatima-inc/FF.lean/blob/daniel/restructure-typeclasses/FF/EllipticCurve.lean</a></p>",
        "id": 341322992,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678646988
    },
    {
        "content": "<p>this isn't a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> because it has a random import :-/</p>",
        "id": 341326003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678648721
    },
    {
        "content": "<p>This is a mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Curve</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ProjectivePoint</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">AffinePoint</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">affine</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AffinePoint</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">infinity</span> <span class=\"o\">:</span> <span class=\"n\">AffinePoint</span> <span class=\"n\">C</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CurveGroup</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">ProjectivePoint</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">AffinePoint</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">PointSerialise</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">K</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Serialise</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- rejected with \"failed to synthesize instance CurveGroup C (AffinePoint C)\"</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PointSerialise</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- accepted</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PointSerialise</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341326179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678648845
    },
    {
        "content": "<p>I'm not sure whether importing mathlib counts as more of a mwe compared to importing yatimas lib :P</p>",
        "id": 341326368,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678648951
    },
    {
        "content": "<p>Fair enough, sorry</p>",
        "id": 341326378,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678648961
    },
    {
        "content": "<p>and this is a better one because it doesn't need mathlib. The trick is to get rid of all imports so it works for everyone else and they can see the same error. Note that I'm changing your definitions but keeping the error alive.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Curve</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ProjectivePoint</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n  <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">AffinePoint</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">affine</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AffinePoint</span> <span class=\"n\">C</span>\n  <span class=\"bp\">|</span> <span class=\"n\">infinity</span> <span class=\"o\">:</span> <span class=\"n\">AffinePoint</span> <span class=\"n\">C</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CurveGroup</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">ProjectivePoint</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">AffinePoint</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n\n<span class=\"kd\">class</span> <span class=\"n\">PointSerialise</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">K</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Serialise</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Curve</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- rejected with \"failed to synthesize instance CurveGroup C (AffinePoint C)\"</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PointSerialise</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- accepted</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">PointSerialise</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">serialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">deserialise</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 341326391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678648971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Constraint.20Inference.20bug.20.28.3F.29/near/341326368\">said</a>:</p>\n<blockquote>\n<p>I'm not sure whether importing mathlib counts as more of a mwe compared to importing yatimas lib :P</p>\n</blockquote>\n<p>Well I guess this is a cultural thing: mathlib imports in mwes in lean 3 have always been acceptable. Of course I can see your point (which is why I fixed it) but a lot of people on this chat have got mathlib handy; I suspect rather fewer have got Yatima's library handy. It's all about making it easier for as many other people as possible. Anyway, I removed the mathlib import so maybe you can figure out the problem now :-)</p>",
        "id": 341326612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678649096
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"n\">new</span> <span class=\"n\">goal</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"n\">_tc.0</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">instCurveGroupProjectivePoint</span> <span class=\"n\">to</span> <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n  <span class=\"o\">[]</span> <span class=\"n\">result</span> <span class=\"n\">instCurveGroupProjectivePoint</span> <span class=\"n\">C</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">result</span> <span class=\"n\">type</span>\n        <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">ProjectivePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n      <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span>\n        <span class=\"n\">CurveGroup</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">AffinePoint</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Not that instance Lean! What are you doing??</p>",
        "id": 341326770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678649177
    },
    {
        "content": "<p>Is the issue that the <code>OutParam</code> is being used incorrectly? I've never understood these properly, but my basic understanding is that <code>class CurveGroup {F : Type _} [Field F] (C : Curve F) (K : outParam $ Type _) where</code> means \"you give me F and C and I'm going to figure out what K is later on, and there is going to be one answer so you are going to suffer if you want there to be two\". Don't take my word for it here though.</p>",
        "id": 341326952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678649283
    },
    {
        "content": "<p>Yes that is the reason. Basically when you have parameters p_1, p_2, ... p_n and you declared p_{n+1} as out param what you say is that p_1...p_n uniquely determine p_{n+1} so you do not need it at the beginning of type class synthesis since the first instance you find that matches should give you a value for p_{n+1}. Since in this case this invariant does (obviously) not hold things blow up.</p>",
        "id": 341327900,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678649765
    },
    {
        "content": "<p>If you think of type class instances as a relational database you might also say that the non output parameters form a composite primary key for the outParam ones.</p>",
        "id": 341328057,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678649876
    },
    {
        "content": "<p>Thanks! I think <code>outParam</code> was redundant. The error is no longer relevant after removing <code>outParam</code>.</p>",
        "id": 341328878,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678650349
    },
    {
        "content": "<p>Well it depends really. outParam's can be helpful mostly when type inference isn't strong enough. For example say that you have a <code>HAdd</code> type class with 3 parameters (2 for the addition input, 1 for the addition output). One can argue whether the output one should be an <code>outParam</code> or not. If you can safely rely on type inference managing to infere a value for the third one all the time you can safely let it be a normal parameter and grant your users more freedom in the instances they might declare. If you think this is not the case you might want to declare it an outParam which takes a bit of freedom away from the instances you can write (as you have just experienced yourself) but can make the typeclass &lt;-&gt; type inference interaction more smooth.</p>",
        "id": 341329340,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678650582
    },
    {
        "content": "<p>I think I've gotta learn what <code>outParam</code> does in-depth. TBH, I was using that as a black box thinking that it's somewhat similar to fundeps in Haskell</p>",
        "id": 341331574,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678652042
    },
    {
        "content": "<p>What I explained in my first message is precisely what outParam does. THe second one just describes implications that using or not using outParam can have in applications.</p>",
        "id": 341332376,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678652666
    },
    {
        "content": "<blockquote>\n<p>What I explained in my first message is precisely what outParam does.</p>\n</blockquote>\n<p>Thanks, I got it! </p>\n<p>I meant also playing with more examples to understand deeply how to use <code>outParam</code> in a more appropriate way.</p>",
        "id": 341332991,
        "sender_full_name": "Daniel Rogozin",
        "timestamp": 1678653105
    }
]