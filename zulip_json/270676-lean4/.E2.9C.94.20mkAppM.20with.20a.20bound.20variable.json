[
    {
        "content": "<p>I'm in a situation that I want to use the power of <code>mkAppM</code> so that I don't have to explicit pass all the implicit parameters, but the function application is inside a lambda and the parameter is the variable bounded by the lambda (I can't do something like <code>mkAppM `f #[bvar 0]</code>). I know the type of the variable, but I don't have an expr corresponding to it... Is there a way to inform <code>mkAppM</code> just the type of the argument of the function so that it can infer the implicit args? I thought about creating a metavariable and assert a new hypothesis with the type of the variable I want, so I can pass the new hypothesis to <code>mkAppM</code>, but then I got the error <code>(kernel) declaration has metavariables</code>.</p>",
        "id": 342430722,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1679004238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360938\">@Tomaz Gomes Mascarenhas</span> My understanding is that the interface you're supposed to use is that you introduce new free variables, substitute those in, do your manipulations, and then abstract them away. This is known as the locally nameless approach I believe.</p>\n<p>There are lots of functions to help you do this. One pair you can use for dealing with nested lambdas is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.lambdaTelescope#doc\">docs4#Lean.Meta.lambdaTelescope</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkLambdaFVars#doc\">docs4#Lean.Meta.mkLambdaFVars</a></p>",
        "id": 342436261,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679006822
    },
    {
        "content": "<p>But in general, if you want to create a new free variable that is <code>mkAppM</code>-friendly you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.withLocalDecl#doc\">docs4#Lean.Meta.withLocalDecl</a>, though you have to be sure to abstract it with <code>mkLambdaFVars</code> or something in the end (to create a lambda expression with that variable as the binder)</p>",
        "id": 342436639,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679007004
    },
    {
        "content": "<p>awesome, it works, thanks!</p>",
        "id": 342586307,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1679065424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes Mascarenhas</span> has marked this topic as resolved.</p>",
        "id": 342586353,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679065433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes Mascarenhas</span> has marked this topic as unresolved.</p>",
        "id": 342586364,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679065436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes Mascarenhas</span> has marked this topic as resolved.</p>",
        "id": 342590168,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679066213
    }
]