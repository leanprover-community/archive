[
    {
        "content": "<p>Is there a terse way to handle the following situation in <code>do</code>-notation?:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"s2\">\"error\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">o</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- do something with o</span>\n</code></pre></div>\n<p>I was hoping something like this (pseudo notation) would be possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">o</span> <span class=\"bp\">←</span> <span class=\"n\">o</span> <span class=\"bp\">|</span> <span class=\"s2\">\"error\"</span>\n</code></pre></div>",
        "id": 387542880,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1693153183
    },
    {
        "content": "<p>let some x := foo | throw \"error\"</p>\n<p>Maybe?</p>",
        "id": 387544233,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693154476
    },
    {
        "content": "<p>Yes, that works! What is this <code>|</code>-syntax called?</p>",
        "id": 387544707,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1693154950
    },
    {
        "content": "<p>\"pipe\"?</p>",
        "id": 387544717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693154970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20to.20Except/near/387544717\">said</a>:</p>\n<blockquote>\n<p>\"pipe\"?</p>\n</blockquote>\n<p>:D I meant that more in a conceptual manner. Like if <code>:=</code> is the syntax for an <em>assignment</em>, then <code>|</code> is the syntax for _?</p>",
        "id": 387544840,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1693155082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Option.20to.20Except/near/387544707\">said</a>:</p>\n<blockquote>\n<p>Yes, that works! What is this <code>|</code>-syntax called?</p>\n</blockquote>\n<p>Dont know an official name for it. I would call it let matching or something like that based on the if-let naming</p>",
        "id": 387545706,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693155815
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Do.lean#L1360\">the code</a> there's the variable <code>elseSeq</code> in a few places, so maybe the whole thing could be called a \"let-else\" with the <code>| ...</code> the \"else sequence\"?</p>",
        "id": 387547314,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693157507
    },
    {
        "content": "<p>You can actually put multiple do-elements after the <code>|</code> by the way, hence <code>elseSeq</code> refers to this part of the syntax.</p>",
        "id": 387547387,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693157546
    },
    {
        "content": "<p>“inline alternative” maybe?</p>",
        "id": 387548609,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693158711
    },
    {
        "content": "<p>I think <code>alternative</code> is definitely something in the name. You need a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Alternative#doc\">docs#Alternative</a> instance</p>",
        "id": 387552482,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693162552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> You don't seem to need an Alternative instance to use these else sequences.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Id'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Id'</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n  <span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Id'</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"mi\">0</span>\n  <span class=\"n\">return</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 387553278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693163303
    },
    {
        "content": "<p>Oh!</p>",
        "id": 387553321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693163349
    },
    {
        "content": "<p>Is anything actually needed for <code>|</code>?</p>",
        "id": 387555158,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693165259
    },
    {
        "content": "<p>Nope, it gets translated into a <code>match</code> expression. <code>let patt := x | a; b</code> is <code>match x with | patt =&gt; b; _ =&gt; a</code></p>",
        "id": 387555706,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693165887
    },
    {
        "content": "<p>Oh wait. I was confused. There must be some instance on <code>Option</code>, presumably <code>Alternative</code>. This syntax also works for <code>Except</code>.</p>",
        "id": 387555921,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693166073
    },
    {
        "content": "<p>If I were to name it, I'd call it a \"fallback\", which seems to not conflict with existing terminology</p>",
        "id": 387630139,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1693214478
    }
]