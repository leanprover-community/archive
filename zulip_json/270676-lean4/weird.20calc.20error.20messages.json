[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> function expected at</span>\n<span class=\"cm\">  h</span>\n<span class=\"cm\">term has type</span>\n<span class=\"cm\">  3 = 4 -/</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In this case, the cause of the error is that the <code>_</code> is not aligned properly on the next line; this is not the case where I originally found the issue, and it's very hard indeed to debug what is going on there (still trying to minimise it). Is there any hope to make <code>calc</code> have better error messages than this?</p>",
        "id": 407219164,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702293507
    },
    {
        "content": "<p>Ah, the other thing is that it's very brittle; this _does_ work (and similarly in my larger example):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n      <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407219331,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702293584
    },
    {
        "content": "<p>It seems that the cause is actually the term mode <code>h</code>.</p>",
        "id": 407245215,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702303047
    },
    {
        "content": "<p>but why? term mode works an all subsequent <code>:= ...</code>s</p>",
        "id": 407245642,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702303182
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n    <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 407246104,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702303302
    },
    {
        "content": "<p>Check out this <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> without <code>calc</code></p>",
        "id": 407246125,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702303306
    },
    {
        "content": "<p>This does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407246473,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702303385
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n      <span class=\"mi\">1</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 407247137,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702303566
    },
    {
        "content": "<p>The observation is the next line is being supplied to the term mode <code>a</code> in my example</p>",
        "id": 407247253,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702303616
    },
    {
        "content": "<p>Or in your case, the next line is being supplied to the term mode <code>h</code> due to indentation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">calc</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    function expected at</span>\n<span class=\"cm\">      h</span>\n<span class=\"cm\">    term has type</span>\n<span class=\"cm\">      3 = 4</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">_</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407247411,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702303670
    }
]