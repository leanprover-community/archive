[
    {
        "content": "<p>I know someone, probably Kyle, already answered this question recently but I can't find it. Where is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a.isEmpty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.size</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>hiding? Note that:</p>\n<ol>\n<li>I can prove the lemma, this isn't the question</li>\n<li>The context is I want to do </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">myArray.isEmpty</span> <span class=\"k\">then</span>\n  <span class=\"bp\">...</span>\n<span class=\"k\">else</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">myArray</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">...</span>\n</code></pre></div>\n<p>without getting an error.</p>",
        "id": 391923168,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695133224
    },
    {
        "content": "<p>Note that Array.isEmpty merely checks if <code>0 = a.size</code>not only on a lean level but also in the optimized c version as array size is O(1) so you can rewrite to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">xs.size</span> <span class=\"k\">then</span>\n    <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n</code></pre></div>\n<p>if you want. A quick loogle that checks for <code>|- 0 &lt; Array.size ?a</code> sadly doesn't yield anything so I guess we dont have it (yet)?</p>",
        "id": 391948427,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695140177
    },
    {
        "content": "<p>Indeed I have a lot of code that look like your <code>test</code> function, but is really feels wrong from a readability point of view.</p>",
        "id": 391949943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695140527
    },
    {
        "content": "<p>Especially when the first branch is very long and the second one very short.</p>",
        "id": 391950011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695140561
    },
    {
        "content": "<p>To be honest, if it's just for programming, don't shy away from <code>myArray[0]!</code> when it's convenient</p>",
        "id": 391950160,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695140615
    },
    {
        "content": "<p>Especially since then you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">myArray.isEmpty</span> <span class=\"k\">then</span>\n  <span class=\"n\">return</span> <span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>to avoid indenting the very long branch. We don't have a dependent version of that syntax yet.</p>",
        "id": 391950685,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695140746
    },
    {
        "content": "<p>This solution requires an Inhabited instance, right?</p>",
        "id": 391950955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695140843
    },
    {
        "content": "<p>Ah, but in programming we make everything inhabited!</p>",
        "id": 391954578,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695142082
    },
    {
        "content": "<p>if only.............. <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 391954755,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695142137
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">Inhabited</span> <span class=\"n\">Widget.InteractiveGoal</span>\n</code></pre></div>",
        "id": 391954857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695142184
    },
    {
        "content": "<p>This <code>Widget.InteractiveGoal</code> is in core Lean and sits on top of many structures without Inhabited instances.</p>",
        "id": 391955479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695142402
    },
    {
        "content": "<p>I like this pattern for that specific context, but I realize it might be the opposite of what you want given the branch lengths:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">myArray</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n  <span class=\"bp\">...</span>\n<span class=\"k\">else</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(Alternatively, you could of course match on <code>myArray[0]?</code> and order the branches however you like, but I imagine that’s less readable.)</p>",
        "id": 391982808,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1695152115
    },
    {
        "content": "<p>That could also be resolved with an <code>unless</code> syntax that is <code>if</code> with the actions swapped</p>",
        "id": 391989502,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695155102
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">myArray</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 391990594,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695155556
    }
]