[
    {
        "content": "<p>See the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">template</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">List</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)</span>\n <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n <span class=\"n\">logInfo</span> <span class=\"n\">template</span>\n <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">template</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Failed isDefEq\"</span>\n <span class=\"n\">pure</span> <span class=\"n\">f</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"upLemma% \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">f</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">upLemma</span><span class=\"bp\">%</span> <span class=\"n\">List.toArray</span>\n</code></pre></div>\n<p>the `isDefEq is failing, despite the types looking equal to me, after unification:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.4500</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"bp\">?</span><span class=\"n\">m.4500</span>\n<span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">m.4801</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.4803</span>\n</code></pre></div>\n<p>Maybe this is universe related?  Both metavariables in the first expression are of type<code>Type</code>, but the metavariables in the second expression are of type <code>Sort</code>?</p>",
        "id": 356348864,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683394705
    },
    {
        "content": "<p>How do these types look unifiable to you at all? One is a function from List the other is a function from Nat</p>",
        "id": 356349506,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683395030
    },
    {
        "content": "<p>Ah, apologies, I introduce that mistake when minimizing the example, let me fix it.</p>",
        "id": 356349913,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683395212
    },
    {
        "content": "<p>Ok, fixed it.</p>",
        "id": 356351287,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683395863
    },
    {
        "content": "<p><code>mkConst ``List []</code> does not type check because it's missing a universe parameter.  It should be <code>mkConst ``List [u]</code>.</p>",
        "id": 356357983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683399578
    },
    {
        "content": "<p>Ah ok, again it was a failure of minimizing the example.  Here is something much closer to my original code.  The weird behavior is that <code>ftype</code> will not unify with <code>template2</code> (the actual thing I am trying to fix), but it <em>will</em> unify with <code>template1</code>, however, <code>template1</code> will unify with <code>template2</code>.  So isDefEq is not behaving transitively?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"n\">mapForallTelescope'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ty</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">ty.getAppFnArgs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ftype</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span>\n    <span class=\"k\">let</span> <span class=\"n\">template1</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">List</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">template2</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">ftype</span> <span class=\"n\">template2</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Failed to unify\"</span>\n    <span class=\"n\">pure</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n <span class=\"o\">)</span> <span class=\"n\">w</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"upLemma% \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">f</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">upLemma</span><span class=\"bp\">%</span> <span class=\"n\">List.toArray</span> <span class=\"n\">x</span> <span class=\"bp\">@</span><span class=\"n\">Array.push_data</span>\n</code></pre></div>",
        "id": 356361079,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683401076
    },
    {
        "content": "<p>I'm investigating some more, and I realize that this is probably related to <code>mapForallTelescope'</code> turning the universe parameter to <code>Array.push_data</code> into a concrete parameter, which may be causing weirdness. I'm going to investigate further.</p>",
        "id": 356392602,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683422987
    },
    {
        "content": "<p>Ok, I think what is going on is that it is refusing to unify a metavariable with a free variable.  Here is my MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">withLocalDecl</span> <span class=\"bp\">`</span><span class=\"n\">α</span> <span class=\"n\">BinderInfo.default</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">levelOne</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">listTypeMetavar</span> <span class=\"o\">:=</span> <span class=\"n\">f.getAppArgs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">listTypeMetavar</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">x</span>\n    <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">listTypeMetavar</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"wtf\"</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n <span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"upLemma% \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">f</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">upLemma</span><span class=\"bp\">%</span> <span class=\"n\">List.toArray</span>\n</code></pre></div>\n<p>listTypeMetavar will happily unify with <code>Nat</code>, but it won't unify with <code>α</code>.  I am not 100% sure what is going on here, but it seems like the problem is that the metavariable was introduced too early, so it cannot depend on free variables that were introduced later.</p>\n<p>So I need to replace my metavariable in <code>f</code> with a fresh metavariable for this to work?</p>",
        "id": 356413029,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683437619
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Unification.20with.20.60isDefEq.60\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Unification.20with.20.60isDefEq.60</a><br>\nseems to confirm that this is not allowed.  </p>\n<p>I was looking for a helper function in mathlib to substitute metavariables with fresh ones., but couldn't find it.  Does something like this exist?</p>",
        "id": 356413798,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683438085
    },
    {
        "content": "<p>Ok, I seem to have fixed it!  I had to write the helper function to refresh the metavariables` myself:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">replaceRecM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLiftT</span> <span class=\"n\">MetaM</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadControlT</span> <span class=\"n\">MetaM</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Expr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">Expr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">memoFix</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">e</span> <span class=\"bp\">↦</span>  <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">f</span><span class=\"bp\">?</span> <span class=\"n\">r</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">traverseChildren</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"n\">expr</span>\n\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">replaceMvarsWithFreshMVars</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">replaceRecM</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">term</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">id.getType</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n  <span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"n\">mapForallTelescope'</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">ty</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fnew</span> <span class=\"bp\">←</span> <span class=\"n\">replaceMvarsWithFreshMVars</span> <span class=\"n\">f</span>\n  <span class=\"k\">match</span> <span class=\"n\">ty.getAppFnArgs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Eq</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ftype</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fnew</span>\n    <span class=\"k\">let</span> <span class=\"n\">template1</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"o\">(</span><span class=\"n\">mkApp</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">List</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">template2</span> <span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshTypeMVar</span><span class=\"o\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">ftype</span> <span class=\"n\">template2</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"Failed to unify\"</span>\n    <span class=\"n\">pure</span> <span class=\"n\">e</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"\"</span>\n <span class=\"o\">)</span> <span class=\"n\">w</span>\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"upLemma% \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" x \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">f</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">upLemma</span><span class=\"bp\">%</span> <span class=\"n\">List.toArray</span> <span class=\"n\">x</span> <span class=\"bp\">@</span><span class=\"n\">Array.push_data</span>\n</code></pre></div>",
        "id": 356538935,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683486674
    },
    {
        "content": "<p>I'm a bit suspicious of this solution. Why can't you create the mvar with the correct local context (i.e. such that it has access to all relevant local variables) in the first place?</p>",
        "id": 356708397,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1683552406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/isDefEq.20failing.20on.20unifiable.20types/near/356708397\">said</a>:</p>\n<blockquote>\n<p>I'm a bit suspicious of this solution. Why can't you create the mvar with the correct local context (i.e. such that it has access to all relevant local variables) in the first place?</p>\n</blockquote>\n<p>In this case it was due to the metavariables being created outside of the function call.  I can simplify things later, I just wanted to verify that I was actually understanding the cause of the failure.</p>",
        "id": 356750311,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683560906
    },
    {
        "content": "<p>Fair. Your diagnosis seems correct to me. You can verify it by inspecting the local contexts of the mvars, which contain exactly the fvars which can be used in expressions assigned to the mvars.</p>",
        "id": 356756797,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1683562417
    }
]