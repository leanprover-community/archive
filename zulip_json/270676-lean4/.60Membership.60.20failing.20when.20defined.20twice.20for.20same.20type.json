[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SomeType</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SomeType</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">l</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">SomeType</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">o</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list_thm</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SomeType</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- This fails</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">opt_thm</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SomeType</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Option.none</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- This doesn't</span>\n</code></pre></div>\n<p>Why would <code>Membership</code> fail in this case? If this is not a bug, what would be the workaround?</p>",
        "id": 343711822,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1679498942
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Membership#doc\">docs4#Membership</a> has the elements being <code>outParam</code>s, so <code>SomeType α</code> is supposed to have at most one instance.</p>",
        "id": 343712954,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679499171
    },
    {
        "content": "<p>One workaround is that you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.toList#doc\">docs4#Option.toList</a> when you want to test whether an <code>Option</code> is in a <code>SomeType α</code>, keeping the <code>List</code> instance. This is assuming the two instances are related via <code>Option.toList</code>.</p>",
        "id": 343713334,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679499245
    },
    {
        "content": "<p>So if I understood correctly, <code>outParam</code> restricts the type given non-<code>outParam</code> types. Also I've found <a href=\"#narrow/stream/287929-mathlib4/topic/What.20is.20an.20outParam.3F\">some thread</a> which talks about it in detail.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.60Membership.60.20failing.20when.20defined.20twice.20for.20same.20type/near/343713334\">말함</a>:</p>\n<blockquote>\n<p>One workaround is that you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Option.toList#doc\">docs4#Option.toList</a> when you want to test whether an <code>Option</code> is in a <code>SomeType α</code>, keeping the <code>List</code> instance. This is assuming the two instances are related via <code>Option.toList</code>.</p>\n</blockquote>\n<p>Thanks, I'll take that as an alternative approach.</p>\n<p>One other way that comes to my mind is just to define another infix for <code>∈</code>. Is this an acceptable approach?</p>",
        "id": 343717211,
        "sender_full_name": "Jihoon Hyun",
        "timestamp": 1679500114
    },
    {
        "content": "<p>Yeah, the <code>outParam</code> arguments are supposed to be functions of the non-<code>outParam</code> arguments, among all the instances to a particular typeclass.</p>",
        "id": 343718249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679500351
    },
    {
        "content": "<p>Regarding defining more notation, I think you have to decide based on your particular case what you're trying to model and whether having more notation would make things clearer.</p>",
        "id": 343718507,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679500419
    }
]