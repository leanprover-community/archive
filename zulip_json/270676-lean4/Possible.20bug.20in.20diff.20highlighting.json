[
    {
        "content": "<p>Dear All,</p>\n<p>in the code below, I was expecting <code>4</code> and <code>5</code> to be highlighted as being \"ready to change\", but they are not.  I imagine that the issue is that the \"diff'er\" sees <code>literals</code> and decides that they have not changed, instead of inspecting what the actual literal is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- place the cursor at the beginning of this line: `a` and `b` are diff'ed</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">5</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- place the cursor at the beginning of this line: `4` and `5` are *not* diff'ed</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>Of course, this has little consequence.  However, if I wanted to find the place in the code where the diff'ing happens, how would I go about it?</p>\n<p>Thanks!</p>",
        "id": 382516211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691391123
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span></p>",
        "id": 382517946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691391556
    },
    {
        "content": "<p>I think that I found a <a href=\"#narrow/stream/287929-mathlib4/topic/.60what_changed.3F.60.20tactic/near/374581845\">relevant thread</a>.</p>",
        "id": 382522855,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691392913
    },
    {
        "content": "<p>Possibly, at <a href=\"https://github.com/leanprover/lean4/blob/1f3ef28a1dfe903c0a62663fee4301e6da015942/src/Lean/Widget/Diff.lean#L138\">this line</a> a further case could be added for <code>Expr.lit</code> atoms?</p>",
        "id": 382524091,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691393274
    },
    {
        "content": "<p>I don't think that's the issue; without a <code>.lit</code> case it would just treat every pair of literals as differing</p>",
        "id": 382528876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394478
    },
    {
        "content": "<p>I think what is happening is that the diff is traversing partially inside the term <code>4</code>, so there is no place to show the highlight</p>",
        "id": 382529061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394515
    },
    {
        "content": "<p>Ah, a case of \"I found a beautiful diff for your tactic, but this expression is too small to contain it\"?</p>",
        "id": 382529265,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691394566
    },
    {
        "content": "<p>I'm not sure exactly how to make it work but the diff should be \"rounded up\" somehow to the nearest displayable subexpression; it should never be the case that a diff is hidden because there isn't a syntax for that subexpression</p>",
        "id": 382529396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394603
    },
    {
        "content": "<p>But why does the diff on <code>a</code> and <code>b</code> work then?</p>",
        "id": 382529771,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691394686
    },
    {
        "content": "<p>because <code>a</code> is what changed in that case</p>",
        "id": 382529874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394711
    },
    {
        "content": "<p>and isn't <code>4</code> what changed in the second case?</p>",
        "id": 382529987,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691394731
    },
    {
        "content": "<p>with <code>4</code> what changed is actually the two occurrences of <code>4</code> in <code>OfNat Nat 4 (instOfNat 4)</code></p>",
        "id": 382530115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394759
    },
    {
        "content": "<p>which are <code>.lit</code></p>",
        "id": 382530165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394769
    },
    {
        "content": "<p>Ah, I see and I understand you comment now: the change is embedded further inside.</p>",
        "id": 382530289,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691394797
    },
    {
        "content": "<p>It is \"shielded\" by the <code>OfNat</code> application, right?</p>",
        "id": 382530383,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691394823
    },
    {
        "content": "<p>we want to show a diff that is more fine-grained than we can display</p>",
        "id": 382530487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394843
    },
    {
        "content": "<p>it would be extra cool if you could see the fine grained diff if you hover over the <code>4</code></p>",
        "id": 382530750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691394905
    },
    {
        "content": "<p>So now the marker for the beginning and end of changes get updated to the (two) <code>4</code>s inside the <code>OfNat</code> application, but then the infoview does not show this, right?</p>",
        "id": 382530950,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691394961
    },
    {
        "content": "<p>whereas the diff should only update the begin/end position once it reaches a <em>displayable</em> location, not <em>any</em> location.</p>",
        "id": 382531184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395008
    },
    {
        "content": "<p>And you are saying that the infoview could highlight <code>4</code> in the case above, but then, on hover, highlight the <code>4</code>'s inside the <code>OfNat</code> application?</p>",
        "id": 382531300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395037
    },
    {
        "content": "<p>Am I understanding what is happening?</p>",
        "id": 382531322,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395045
    },
    {
        "content": "<p>Something like duplicating the begin/end markers, one for displayble change, one for actual change.  Possibly, the current one with the actual change determines the \"next-up\" available displayable one, though...</p>",
        "id": 382531635,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395130
    },
    {
        "content": "<p>In this case,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><code>4</code> also gets highlighted.</p>",
        "id": 382532212,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395275
    },
    {
        "content": "<p>which validates my diagnosis</p>",
        "id": 382532336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691395302
    },
    {
        "content": "<p>In this case, <code>4</code> is highlighted because the diff does not enter it?  The diff does not enter <code>4</code> since the arguments of <code>HAdd.hadd</code> have already different heads?</p>",
        "id": 382532695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395377
    },
    {
        "content": "<p>Ok:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.cast</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.cast</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>  <span class=\"c1\">-- no, no highlighting here</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.cast</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>  <span class=\"c1\">-- yes, highlighting here</span>\n</code></pre></div>",
        "id": 382532943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395436
    },
    {
        "content": "<p>So, I think that I now understand better what you said from the very beginning!</p>",
        "id": 382533138,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395463
    },
    {
        "content": "<p>Indeed, this highlights the \"inner-most\" change:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">Nat.zero</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">]</span>  <span class=\"c1\">-- `Nat.zero` vs `Nat.succ Nat.zero`</span>\n</code></pre></div>\n<p>This is very cool!</p>",
        "id": 382535231,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691395998
    },
    {
        "content": "<p>here's another way to see the highlight:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 382535748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691396138
    },
    {
        "content": "<p>Ah, great!  I was doing my own <code>pp.almost_all</code> implementation by hand...</p>",
        "id": 382535946,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691396187
    },
    {
        "content": "<p>So, when the information about the diff reaches the stage where it should be printed, then either</p>\n<ul>\n<li>the diff stained a whole node that gets printed with the current settings and thus gets displayed, or </li>\n<li>the stain is inside something that is displayed and gets ignored, rather than expanding.</li>\n</ul>\n<p>I know that this is probably the content of your first comment, Mario, but I am very unaware of how these things happen!</p>",
        "id": 382539460,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691397081
    },
    {
        "content": "<p>so the question is then, where is the logic that actually does the rendering and how should it be changed to not ignore changes in subterms</p>",
        "id": 382540419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691397287
    },
    {
        "content": "<p>Yes, suddenly I feel like I understand what you say, Mario!</p>",
        "id": 382540545,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691397319
    },
    {
        "content": "<p>Is the idea that whatever takes care of printing should remember whether a subpart was stained and propagate the stain to the whole?</p>",
        "id": 382540837,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691397390
    },
    {
        "content": "<p>The answer to the first part is <code>Lean.Widget.Diff</code></p>",
        "id": 382540867,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691397397
    }
]