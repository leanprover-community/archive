[
    {
        "content": "<p>I'm trying to use ffi api but this simple function isn't working. (value I read is +/- 1 of the value I wrote) debugging seems to show that lean's dec_ref is editing the value stored at the memory address I allocated. Some insight on what's going wrong would be appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_get_8\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">mh_get_8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_set_8\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">mh_set_8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_alloc\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">mh_alloc</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">alloc</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span> <span class=\"n\">mh_alloc</span> <span class=\"n\">size</span>\n<span class=\"kd\">def</span> <span class=\"n\">set8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mh_set_8</span> <span class=\"n\">address</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">get8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt8</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mh_get_8</span> <span class=\"n\">address</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">address</span> <span class=\"o\">:=</span> <span class=\"n\">mh_alloc</span> <span class=\"mi\">100</span>\n  <span class=\"n\">set8</span> <span class=\"n\">address</span> <span class=\"mi\">92</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{‚Üêget8 address}\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">stdlib.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">stdint.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">malloc.h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"n\">void</span><span class=\"bp\">*</span> <span class=\"n\">mh_alloc</span><span class=\"o\">(</span><span class=\"n\">size_t</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">return</span> <span class=\"n\">malloc</span><span class=\"o\">(</span><span class=\"n\">size</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n<span class=\"n\">uint8_t</span> <span class=\"n\">mh_get_8</span><span class=\"o\">(</span><span class=\"n\">uint8_t</span><span class=\"bp\">*</span> <span class=\"n\">address</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">return</span> <span class=\"bp\">*</span><span class=\"n\">address</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n<span class=\"n\">void</span> <span class=\"n\">mh_set_8</span><span class=\"o\">(</span><span class=\"n\">uint8_t</span><span class=\"bp\">*</span> <span class=\"n\">address</span><span class=\"o\">,</span> <span class=\"n\">uint8_t</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"bp\">*</span><span class=\"n\">address</span> <span class=\"bp\">=</span> <span class=\"n\">value</span><span class=\"bp\">;</span> <span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">run</span> <span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">93</span>\n<span class=\"n\">run</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"mi\">93</span>\n<span class=\"n\">run</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">91</span>\n</code></pre></div>",
        "id": 400426318,
        "sender_full_name": "Patrick Ford",
        "timestamp": 1699222837
    },
    {
        "content": "<p><code>void -&gt; Unit</code> is not a correct translation according to <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">https://lean-lang.org/lean4/doc/dev/ffi.html</a>. You need to make this extern function <code>IO</code> and change the C function accordingly.</p>",
        "id": 400430031,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699226461
    },
    {
        "content": "<p>As already mentioned, you use the wrong prototype for a function returning <code>Unit</code>. The correct return type is <code>lean_object_res</code> (or <code>lean_object *</code>)and the result should be <code>lean_box(0)</code> for the first and only constructor index in the <code>Unit</code> type.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nf\">mh_set_8</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>You have another problem as well. All your functions have side effects, so they should be <code>IO</code> functions. You can see this with your allocation function when you call it multiple times with the same argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">a1</span> <span class=\"o\">:=</span> <span class=\"n\">mh_alloc</span> <span class=\"mi\">100</span>\n  <span class=\"k\">let</span> <span class=\"n\">a2</span> <span class=\"o\">:=</span> <span class=\"n\">mh_alloc</span> <span class=\"mi\">100</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"a1: {a1}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"a2: {a2}\"</span>\n</code></pre></div>\n<p>Outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a1</span><span class=\"o\">:</span> <span class=\"mi\">94095139304976</span>\n<span class=\"n\">a2</span><span class=\"o\">:</span> <span class=\"mi\">94095139304976</span>\n</code></pre></div>\n<p>I'm not sure if wrapping the functions in the IO monad like you do it results in the correct behavior all the time. The external functions should be IO functions from the start:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_get_8\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">get8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt8</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_set_8\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">set8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_alloc\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">alloc</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">USize</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">mh_alloc</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">unused</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box_usize</span><span class=\"p\">((</span><span class=\"kt\">size_t</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">mh_get_8</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">unused</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"p\">)));</span>\n<span class=\"p\">}</span>\n<span class=\"n\">lean_obj_res</span><span class=\"w\"> </span><span class=\"nf\">mh_set_8</span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">unused</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">address</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_mk_ok</span><span class=\"p\">(</span><span class=\"n\">lean_box</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 400446504,
        "sender_full_name": "Alexander Fasching",
        "timestamp": 1699238411
    },
    {
        "content": "<p>Thanks for the help. That clears up the issue!</p>",
        "id": 400558924,
        "sender_full_name": "Patrick Ford",
        "timestamp": 1699285362
    },
    {
        "content": "<p>An add-on: since these functions cannot produce Lean-level IO errors (i.e., they do not use <code>lean_io_result_mk_error</code>), they should be in <code>BaseIO</code> rather than <code>IO </code>to communicate this fact to Lean. That is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_get_8\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">get8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">UInt8</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_set_8\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">set8</span> <span class=\"o\">(</span><span class=\"n\">address</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_alloc\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">alloc</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">USize</span>\n</code></pre></div>",
        "id": 400566270,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699287306
    },
    {
        "content": "<p>(Otherwise, code which uses these functions will have to handle potential IO errors despite them not actually being possible.)</p>",
        "id": 400566561,
        "sender_full_name": "Mac Malone",
        "timestamp": 1699287430
    },
    {
        "content": "<p>Doesn't it cause problems that <code>alloc</code> performs its side effect directly rather than encoding some kind of thunk in the <code>BaseIO</code> action? For example something like this might cause problems</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">addr1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">alloc</span> <span class=\"mi\">8</span>\n  <span class=\"k\">let</span> <span class=\"n\">addr2</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">alloc</span> <span class=\"mi\">8</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">addr1</span> <span class=\"bp\">==</span> <span class=\"n\">addr2</span><span class=\"o\">)</span> <span class=\"c1\">-- should always be `false` because `malloc` doesn't give overlapping addresses</span>\n</code></pre></div>\n<p>due to common subexpression elimination, this could get transformed into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">action</span> <span class=\"o\">:=</span> <span class=\"n\">alloc</span> <span class=\"mi\">8</span>\n  <span class=\"k\">let</span> <span class=\"n\">addr1</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">action</span>\n  <span class=\"k\">let</span> <span class=\"n\">addr2</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">action</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"n\">addr1</span> <span class=\"bp\">==</span> <span class=\"n\">addr2</span><span class=\"o\">)</span> <span class=\"c1\">-- will be `true` because calling `alloc` is what has the side effect, not binding the IO action</span>\n</code></pre></div>",
        "id": 400591919,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699296456
    },
    {
        "content": "<p>This is not how CSE in the BaseIO monad works. The entire point of the BaseIO monad is to prevent exactly this bug.</p>",
        "id": 400594352,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1699297502
    },
    {
        "content": "<p>Ahh when we write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_alloc\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">alloc</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"n\">USize</span>\n</code></pre></div>\n<p>is Lean unfolding the definition of <code>BaseIO USize</code> to see that we're really saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"mh_alloc\"</span><span class=\"kd\">]</span> <span class=\"n\">opaque</span> <span class=\"n\">alloc</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RealWorld</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">EstateM</span> <span class=\"n\">Empty</span> <span class=\"n\">RealWorld</span> <span class=\"n\">USize</span>\n</code></pre></div>\n<p>so that extra <code>RealWorld</code> argument is what that <code>lean_object* unused</code> was in the C code?</p>\n<p>And then when we write <code>alloc 8</code>, we're not passing all the necessary arguments to the C function, so Lean automatically creates a partial application shim like <code>fun w : RealWorld =&gt; alloc 8 w</code>? So <code>alloc 8</code> functions as a lazy IO action as desired..</p>",
        "id": 400595040,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1699297835
    }
]