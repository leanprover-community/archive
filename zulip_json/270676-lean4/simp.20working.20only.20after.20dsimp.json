[
    {
        "content": "<p>In a file I'm porting from mathlib (<a href=\"https://github.com/leanprover-community/mathlib/pull/1088\">mathlib#1088</a>), a mathlib proof of the form<code>ext; simp</code> worked in lean 3, but needed to be changed to <code>ext; dsimp; simp</code> to work now.</p>\n<p>A notable thing here is that the goal after <code>ext; dsimp</code> looks exactly the same as it does with just <code>ext; simp</code>; you have to <code>set_option pp.all true</code> to see the difference (not just <code>pp.explicit</code>).</p>\n<p>Is this weird enough to warrant making an mwe for?</p>",
        "id": 316402226,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1671252560
    },
    {
        "content": "<p>In my opinion every simp call which stops working after being ported should at least be flagged with a porting note, and ideally should be investigated. <code>dsimp, simp</code> is strictly speaking not good style because of the nonterminal dsimp. Does <code>dsimp only; simp</code> work?</p>",
        "id": 316419399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671267106
    },
    {
        "content": "<p>Kevin, once again this is all fine.</p>",
        "id": 316419818,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671267370
    },
    {
        "content": "<p>Fancy tactics can be followed by fancy tactics, and arguably <code>dsimp</code> isn't even fancy at all.</p>",
        "id": 316419846,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1671267402
    },
    {
        "content": "<p>You've said this before and then others have said \"no it's not fine\", right? I'm still unclear about this.</p>",
        "id": 316420563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671267827
    },
    {
        "content": "<p>I recall being part of that earlier conversation, and my line is that <code>dsimp</code> is a fancy tactic, but fancy tactics followed by other fancy tactics is okay. (Although <code>dsimp, simp</code> doing something different from <code>simp</code> is probably a bug in any case.)</p>",
        "id": 316440656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1671276925
    },
    {
        "content": "<p>I was talking to Oliver about this recently. Isn't the only reason we do <code>dsimp, simp</code> that <code>dsimp</code> unfolds structure projections but <code>simp</code> doesn't? Oliver suggested making the structure projection unfolding a simp lemma (Amelia was having problems with dsimps taking a long time)</p>",
        "id": 316502718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1671305831
    },
    {
        "content": "<p>Just want to record that I encountered this again, this time in the form of needing to <code>dsimp only [] at</code> hypotheses for <code>simp [*]</code> to use them!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- unsolved goals ...</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(Note that <code>simp only [*, h]</code> also is insufficient to close the goal.)</p>",
        "id": 355901362,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683241834
    },
    {
        "content": "<p>Is there a better workaround than writing <code>dsimp only ...</code>, specifically in the context of using <code>simp</code> inside another tactic? Possibly a config option? If not, I'm considering having the tactic run <code>dsimp only [] at *</code> if the user provides a simp star, though this is imperfect, since it might change hypotheses that the user wouldn't expect to be touched. (If that were a big issue, maybe I could restore all hypotheses that weren't reported as used by simp, if the goal isn't closed? Not necessary for the immediate application, though.)</p>",
        "id": 355901474,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683241885
    },
    {
        "content": "<p>For what it's worth, I'd probably reach for <code>simpa using h</code> here</p>",
        "id": 355902032,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683242227
    },
    {
        "content": "<p>It'd be interesting if <code>simp [*]</code> would run <code>simp</code> on each local hypothesis while creating its simp set (no need to literally simp <code>at *</code>, unless you're just wanting to avoid reaching into internals -- it's possible to run the simplifier on any given Expr).</p>",
        "id": 355902573,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683242560
    },
    {
        "content": "<p><code>simpa</code> seems to work in the example! But in general (and in the real example that prompted this) we need to use <code>simp only [*, simp_lemma1, simp_lemma2]</code> and interleave the hypothesis applications with lemma simps, and there it struggles.</p>",
        "id": 355902582,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683242566
    },
    {
        "content": "<p>It would! (I wonder what happens currently if a hypothesis is not in simp normal form or something, and causes a loop?) Though, I'd even settle for running the internal version of <code>dsimp only []</code> on each hypothesis while creating the simp set. :)</p>",
        "id": 355902859,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683242736
    },
    {
        "content": "<p>Sometimes the best configuration option is simply a composition of tactics. Is there anything that a configuration option would let you do that preceding <code>simp</code> with <code>dsimp only at *</code> wouldn't do?</p>",
        "id": 355902872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683242745
    },
    {
        "content": "<p>If I run <code>dsimp only at *</code> inside the tactic I'm writing, then the user's hypotheses would change unexpectedly, unless I manage goals and the like. Not the biggest problem in the world, but still. Though, I am using <code>simpGoals</code> explicitly, and generating the simp context from syntax, so maybe there's an easy way to do this \"the right way\" somehow?</p>",
        "id": 355903127,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683242889
    },
    {
        "content": "<p>(and regarding trying to put things into simp normal form,  just for comparison one place that does something about it is the <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Elementwise.lean\"><code>@[elementwise]</code> attribute</a>, which uses a function to simp the LHS and RHS of the generated equality lemma separately)</p>",
        "id": 355903158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683242911
    },
    {
        "content": "<p>Another \"lean metaprogramming koan\" for you is that making your tactic less smart makes it a smarter tactic. What feature are you trying to implement that you feel needs <code>dsimp only at *</code>?</p>",
        "id": 355903440,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683243092
    },
    {
        "content": "<p>It just occurred to me that even better than <code>simpa using h</code> for your examples is <code>assumption</code>. Many tactics use <code>assumption</code> to discharge some obvious goals.</p>",
        "id": 355903453,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683243109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20working.20only.20after.20dsimp/near/355903127\">said</a>:</p>\n<blockquote>\n<p>If I run <code>dsimp only at *</code> inside the tactic I'm writing, then the user's hypotheses would change unexpectedly</p>\n</blockquote>\n<p>I was meaning that you'd leave the <code>dsimp only at *</code> to the user, if possible. Though maybe your tactic makes some hypotheses that you know will need simplification before they're useful.</p>",
        "id": 355903601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683243208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20working.20only.20after.20dsimp/near/355903440\">said</a>:</p>\n<blockquote>\n<p>Another \"lean metaprogramming koan\" for you is that making your tactic less smart makes it a smarter tactic. What feature are you trying to implement that you feel needs <code>dsimp only at *</code>?</p>\n</blockquote>\n<p>Ah, very wise. :) So, specifically, <code>mono* using &lt;simpArgs&gt;</code> (where <code>mono*</code> applies <code>mono</code> repetitively) runs (in <code>MetaM</code>, not by macro) <code>simp only [&lt;simpArgs&gt;]</code> before each application of <code>mono</code>. One of the extant usages of <code>mono*</code> is of the above form: there are hypotheses in the context which, if dsimp'd, could be used <code>simp</code> inside this tactic invocation. Moreover, the hypotheses need to be interleaved with other provided simp lemmas—we're running <code>mono* using *, lem1, lem2</code>—so following it by <code>assumption</code> doesn't work.</p>\n<p>So basically, I was thinking I might try to patch what I see as a bug in <code>simp</code> \"by hand\". :)</p>\n<p>In this particular case, <code>mono</code> (being fancy) also relies on <code>solve_by_elim</code>. Maybe it would make sense to pass these simp lemmas to <code>solve_by_elim</code> too, though that seems like overkill. (But if that takes more than a little while I might just say it's fine for now, get <code>mono</code> out there, and enhance it later. :) )</p>",
        "id": 355904590,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683243889
    },
    {
        "content": "<p>I've wished for a feature where <code>simp</code> could be told to simplify local hypotheses before. As a first step, maybe (if it doesn't already exist) there could be a <code>simp%</code> term elaborator that simplifies a term so you could write <code>simp [simp% h, simp% s]</code>.</p>",
        "id": 355904923,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683244093
    },
    {
        "content": "<p>I wonder if <code>*</code> in a simp lemma list is ever \"correct\", or merely convenient. Simp expects simp lemmas, but random hypotheses in the local context surely aren't simp lemmas since what are the chances they're in normal form?</p>",
        "id": 355904988,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683244164
    },
    {
        "content": "<p>That suggests that either it shouldn't be used in non-draft code, or <code>simp</code> should be responsible for trying to transform the lemmas drawn in using <code>*</code> into a simp set.</p>",
        "id": 355905149,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683244251
    },
    {
        "content": "<p>(That said, I use it all the time for one-liner induction arguments: <code>by induction x &lt;;&gt; simp [*]</code> when it works is nice and short. The main purpose of <code>*</code> here is that I wanted to avoid naming the induction hypotheses, and furthermore, each case will have different local contexts.)</p>",
        "id": 355905219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683244294
    },
    {
        "content": "<p>It does seem pretty unsafe! I just wanted to check, and indeed you can make it loop indefinitely in the obvious way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"c1\">-- simp failed, maximum number of steps exceeded</span>\n</code></pre></div>\n<p>Though, I'm not sure that protecting against this sort of thing is worth the overhead. I suppose it depends on how expensive making a simp set is.</p>",
        "id": 355905504,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683244520
    },
    {
        "content": "<p>I do love the feature, though, especially when used in tandem with other lemmas e.g. whose arguments might need to be provided by hypotheses. That sort of interleaving effect can be very useful.</p>",
        "id": 355905844,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683244752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"548935\">@Thomas Murrills</span> Maybe a feature worth looking into is <code>simp</code>'s discharger configuration. Doing <code>simp (discharger := assumption) only</code> is similar to <code>simp only [*]</code> if you're only wanting to use local hypotheses to close goals, but with the difference that <code>assumption</code> is more willing to do things up to defeq.</p>",
        "id": 355982730,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683275949
    }
]