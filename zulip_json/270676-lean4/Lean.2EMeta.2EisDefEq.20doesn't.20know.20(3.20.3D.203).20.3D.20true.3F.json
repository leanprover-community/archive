[
    {
        "content": "<p>I'm trying to write an <code>#assert_eq</code> command that throws an error if its two arguments are not definitionally equal expressions. It uses <code>Lean.meta.isDefEq</code> to try to determine if the arguments are definitionally equal or not. However, <code>isDefEq</code> seems to be telling me that the expression <code>(3 = 3 : Bool)</code> isn't definitionally equal to the expression <code>true</code>. Why not?</p>\n<p>Part of me thinks I need to reduce the input expressions, but isn't <code>isDefEq</code> supposed to usually be able to determine whether or not two expressions are definitionally equal without actually reducing them first?</p>\n<p>Here's my code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"#assert_eq \"</span> <span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l_equals_r</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">l_value</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">l</span>\n    <span class=\"k\">let</span> <span class=\"n\">r_value</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"n\">r</span>\n    <span class=\"n\">Lean.Meta.isDefEq</span> <span class=\"n\">l_value</span> <span class=\"n\">r_value</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">not</span> <span class=\"n\">l_equals_r</span> <span class=\"k\">then</span>\n    <span class=\"n\">throwErrorAt</span> <span class=\"n\">r</span> <span class=\"s2\">\"The value{Lean.indentD l}</span><span class=\"se\">\\n</span><span class=\"s2\">is not definitionally equal to the value{Lean.indentD r}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">assert_eq</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 371307433,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688160192
    },
    {
        "content": "<p>It's probably because you're not synthesizing metavariables before doing the defeq check (like with <code>synthesizeSyntheticMVarsNoPostponing</code>). You need this to get Lean to commit to <code>3</code> being a <code>Nat</code>, which requires it to use a default <code>OfNat</code> instance.</p>",
        "id": 371312562,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688162079
    },
    {
        "content": "<p>There's already such a command in Std4 by the way: <a href=\"https://github.com/leanprover/std4/blob/main/Std/Tactic/GuardExpr.lean#L197\">https://github.com/leanprover/std4/blob/main/Std/Tactic/GuardExpr.lean#L197</a></p>",
        "id": 371312612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688162106
    },
    {
        "content": "<p>Sticking a synthesizeSyntheticMVarsNoPostponing in there seems to do the trick! Thank you!</p>",
        "id": 371312949,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688162268
    },
    {
        "content": "<p>(also, since I plan to do quite a lot of metaprogramming, I figure it's a good idea to try implementing the simple stuff myself)</p>",
        "id": 371318397,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688164336
    }
]