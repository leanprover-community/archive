[
    {
        "content": "<p>Hello!</p>\n<p>I get a type mismatch in the last match expression in this (hopefully not too long) code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">guard</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Method</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">decGuard</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">met</span> <span class=\"o\">:</span> <span class=\"n\">Method</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">guard</span> <span class=\"n\">ret</span> <span class=\"n\">met</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Register</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Method</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Method</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">write</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Method</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Register</span> <span class=\"o\">:</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:=</span> <span class=\"n\">Method</span>\n  <span class=\"n\">guard</span> <span class=\"n\">_</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"n\">decGuard</span> <span class=\"n\">_ret</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Method.read</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Method</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Method</span> <span class=\"n\">α</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Is this expected and is there a solution to this?</p>\n<p>Intrestingly, if I remove the \"ret\" argument on guard it all works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">guard</span> <span class=\"o\">:</span> <span class=\"n\">Method</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">decGuard</span> <span class=\"o\">(</span><span class=\"n\">ret</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">met</span> <span class=\"o\">:</span> <span class=\"n\">Method</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">guard</span> <span class=\"n\">met</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Register</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Method</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">read</span> <span class=\"o\">:</span> <span class=\"n\">Method</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">write</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Method</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Register</span> <span class=\"o\">:</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:=</span> <span class=\"n\">Method</span>\n  <span class=\"n\">guard</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"n\">decGuard</span> <span class=\"n\">_ret</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>Best regards,<br>\nTage</p>",
        "id": 404906934,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1701275969
    },
    {
        "content": "<p>The <code>ret</code> argument is a variable that needs to be specialized during pattern matching, and the way I know how to deal with it is to add it as an extra variable to <code>match</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Register</span> <span class=\"o\">:</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:=</span> <span class=\"n\">Method</span>\n  <span class=\"n\">guard</span> <span class=\"n\">_</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"n\">decGuard</span> <span class=\"n\">ret</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">ret</span><span class=\"o\">,</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 404919382,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701279747
    },
    {
        "content": "<p>Cam you do this with <code>set_option autoImplicit false</code> and ese if that makes the issue go away?</p>",
        "id": 404919418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701279767
    },
    {
        "content": "<p>what is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> in the definition of <code>DataStructure</code></p>",
        "id": 404919705,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701279873
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Register</span> <span class=\"o\">:</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:=</span> <span class=\"n\">Method</span>\n  <span class=\"n\">guard</span> <span class=\"n\">_</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"n\">decGuard</span> <span class=\"n\">_ret</span> <span class=\"n\">met</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">_ret</span><span class=\"o\">,</span> <span class=\"n\">met</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 404920065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701279971
    },
    {
        "content": "<p>Or more concisely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Register</span> <span class=\"o\">:</span> <span class=\"n\">DataStructure</span> <span class=\"n\">where</span>\n  <span class=\"n\">Method</span> <span class=\"o\">:=</span> <span class=\"n\">Method</span>\n  <span class=\"n\">guard</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span>\n  <span class=\"n\">decGuard</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">write</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">isTrue</span> <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 404920183,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701280026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Your first code block is what I posted, right?</p>",
        "id": 404920725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701280223
    },
    {
        "content": "<p>The second one's <code>decGuard</code> is a nice way to write it though.</p>",
        "id": 404920812,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701280258
    },
    {
        "content": "<p>My Zulip has been behaving pretty badly recently, your message wasn't visible to me when I sent mine</p>",
        "id": 404924563,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701281635
    },
    {
        "content": "<p>Thanks alot!</p>",
        "id": 405095324,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1701343022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> has marked this topic as resolved.</p>",
        "id": 405095363,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701343036
    }
]