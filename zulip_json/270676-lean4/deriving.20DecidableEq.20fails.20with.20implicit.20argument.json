[
    {
        "content": "<p>Here's my example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>This fails with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">subst'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">invalid</span> <span class=\"n\">equality</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"n\">or</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n<span class=\"n\">x</span><span class=\"bp\">✝¹</span><span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"n\">a</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"n\">b</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">},</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Decidable</span> <span class=\"o\">({</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">ha</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">✝</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>Is this already known? The equivalent works in Lean 3, and is mentioned in (at least) one porting note in mathlib.</p>",
        "id": 403040642,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700418944
    },
    {
        "content": "<p>I don't see anything in the issue tracker -- want to create an issue?</p>\n<p>It seems it's just the implicit argument. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span>\n<span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>",
        "id": 403041446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700419424
    },
    {
        "content": "<p>Will do.</p>",
        "id": 403041580,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700419493
    },
    {
        "content": "<p>Reported here: <a href=\"https://github.com/leanprover/lean4/issues/2914\">https://github.com/leanprover/lean4/issues/2914</a></p>",
        "id": 403042003,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1700419796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432410\">@Arthur Adjedj</span> or others who've played with these derive handlers --- any ideas what's happening here? I'd be happy to merge a fix.</p>",
        "id": 403084383,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700450302
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2918\">lean4#2918</a></p>",
        "id": 403088897,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700453271
    },
    {
        "content": "<p>Looks great. I'll merge once the test is moved.</p>",
        "id": 403089989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700454151
    }
]