[
    {
        "content": "<p>Is there any <code>set_option</code> that lets one turn off the positivity checker for inductive types ? I know that non-strictly-positive inductives are allowed with <code>unsafe</code>, but I'm wondering if Lean 4 has an option to allow you to bypass this restriction outside of <code>unsafe</code>.</p>",
        "id": 357876569,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683899274
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/possibly.20unsafe.20customizations.20.3F\">#lean4 &gt; possibly unsafe customizations ?</a> by <span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span>.</p>",
        "id": 357876782,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683899312
    },
    {
        "content": "<p>Surely no <code>set_option</code> will enable a possible proof of <code>false</code>, and presumably the point of the positivity checker is to make sure you're not going to be able to prove <code>false</code>.</p>",
        "id": 357904919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683904381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432410\">@Arthur Adjedj</span>  It might be helpful to give you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here.  I think the Lean developers don't want it to be easy to having an inconsistent kernel with just a simple option setting.</p>",
        "id": 358120587,
        "sender_full_name": "Jason Rute",
        "timestamp": 1683988750
    },
    {
        "content": "<p>Note that this is not just an issue with consistency in the kernel, it is also a run time issue. As soon as the strong positivity checker is disabled you can start building cyclic data structures which of course our reference counting approach to memory cannot deal with.</p>",
        "id": 358122167,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683989330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358122167\">said</a>:</p>\n<blockquote>\n<p>Note that this is not just an issue with consistency in the kernel, it is also a run time issue. As soon as the strong positivity checker is disabled you can start building cyclic data structures which of course our reference counting approach to memory cannot deal with.</p>\n</blockquote>\n<p>While this is true, there also exist some datatypes that are both acyclic and sound, but which are not accepted by the positivity checker. Such an example would be :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">:=</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Nat</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>which doesn't get accepted, even though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">:=</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span>  <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>does.<br>\n<span class=\"user-mention silent\" data-user-id=\"115715\">Jason Rute</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358120587\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span>  It might be helpful to give you <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> here.  I think the Lean developers don't want it to be easy to having an inconsistent kernel with just a simple option setting.</p>\n</blockquote>\n<p>I agree that being able to cause unsoundness shouldn't be accessible, but there already are accessible sources of unsoundness, such as <code>implemented_by</code>, and it would be nice to allow the user to define a non-positive inductive type as a \"safe\" type  if he knows that this wouldn't cause unsoundness.</p>",
        "id": 358133596,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683993802
    },
    {
        "content": "<p>Can you show me a proof of <code>false</code>  using <code>implemented_by</code>?</p>",
        "id": 358133859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683993934
    },
    {
        "content": "<p>(This is orthogonal to this discussion, but it would also be preferable IMO for <code>native_compute</code> and <code>native_decide</code>(which are unsound) to be hidden behind an option as well)</p>",
        "id": 358133917,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683993963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">@[implemented_by foo]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span>\n    <span class=\"n\">native_decide</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 358134361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683994134
    },
    {
        "content": "<p>Is <code>native_decide</code> supposed to be disallowed?</p>",
        "id": 358134427,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683994159
    },
    {
        "content": "<p>I don't believe so, but as said previously, it should perhaps be preferable for things that can prove <code>False</code> to not be too easily accessible</p>",
        "id": 358134779,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683994312
    },
    {
        "content": "<p>yeah, I agree</p>",
        "id": 358134798,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683994322
    },
    {
        "content": "<p>Or there should at least be an option for \"safe\" <code>implemented_by</code> that takes a proof that the terms are equal (even if the proof is a <code>sorry</code>), and to only allow <code>native_decide</code> to evaluate using safe implementations.</p>",
        "id": 358134997,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683994427
    },
    {
        "content": "<p>Allowing possibly unsafe features to be hidden behind options (which could perhaps give warning during type-checking) feels like a safe trade-off to me, and that's probably why such options are already available in other, more mature proof-assistants</p>",
        "id": 358135024,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683994441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358134997\">said</a>:</p>\n<blockquote>\n<p>Or there should at least be an option for \"safe\" <code>implemented_by</code> that takes a proof that the terms are equal (even if the proof is a <code>sorry</code>), and to only allow <code>native_decide</code> to evaluate using safe implementations.</p>\n</blockquote>\n<p>How would that work when the \"implementation function\" is unsafe, but the \"interface\" one is safe ?</p>",
        "id": 358135199,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683994519
    },
    {
        "content": "<p>I don't know, it was just an idle thought :)</p>",
        "id": 358135228,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683994533
    },
    {
        "content": "<p>Maybe for unsafe implementations, the proof would be forced to be a <code>sorry</code>.</p>",
        "id": 358135464,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683994617
    },
    {
        "content": "<p><code>native_decide</code> is basically \"take the Lean <code>#eval</code> being correct as an axiom\". You can see if you have a theorem that (transitively) depends on it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"k\">show</span> <span class=\"n\">bar</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span>\n    <span class=\"n\">native_decide</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">baz</span>\n<span class=\"c1\">-- 'baz' depends on axioms: [propext, Lean.ofReduceBool]</span>\n</code></pre></div>",
        "id": 358136754,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683995117
    },
    {
        "content": "<p>In that sense it's perfectly safe, since you should only really trust a theorem if it doesn't have <code>Lean.ofReduceBool</code> as an axiom.</p>",
        "id": 358136932,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683995185
    },
    {
        "content": "<p>Okay, I feel better now :)</p>",
        "id": 358136976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683995202
    },
    {
        "content": "<p>But for the average user who wouldn't be bothered using <code>#print axioms baz</code>, maybe there should be some warning (that can be turned off with an option)?</p>",
        "id": 358137114,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683995274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358136932\">said</a>:</p>\n<blockquote>\n<p>In that sense it's perfectly safe, since you should only really trust a theorem if it doesn't have <code>Lean.ofReduceBool</code> as an axiom.</p>\n</blockquote>\n<p>Isn't the main goal of these axioms to be used to make proofs faster ? If so, what is the meaning behind having these in the first place if you shouldn't trust them ?</p>",
        "id": 358137716,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1683995494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Should this have a warning too then?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">explosion</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"n\">explosion</span>\n</code></pre></div>\n<p>The docstring for <code>native_decide</code> says you should be careful and mentions <code>#print axioms</code>.</p>\n<p>Though maybe it'd be useful having an option that disallows adding new axioms or using <code>native_decide</code>. I'm thinking for Mathlib and for student homework submissions.</p>",
        "id": 358137950,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683995588
    },
    {
        "content": "<p>yeah, teaching is exactly what I had in mind.</p>",
        "id": 358138012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683995618
    },
    {
        "content": "<p>I think it's common to check for extraneous <code>axiom</code> commands in homework submissions. But I wouldn't think to check for uses of built-in tactics.</p>",
        "id": 358138304,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683995759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432410\">@Arthur Adjedj</span> I think there are different levels of trust you can have in a result. I trust that the Lean kernel with no additional axioms except for <code>Classical.choice</code> is extremely likely to be correct. If you use <code>native_decide</code>, then it's on you to verify that every <code>implemented_by</code> is correct and that the compiler and interpreter are producing the correct result. If you show me a Lean proof without <code>native_decide</code>, I'll believe it if Lean accepts it. If you show me a Lean proof with <code>native_decide</code>, I'll have to trust <em>you</em> that you've done all this additional work and haven't made a mistake.</p>\n<p>I think <code>native_decide</code> could be useful, and it's no worse of a situation than writing programs to calculate things to support proofs in traditional math papers.</p>",
        "id": 358140630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683996781
    },
    {
        "content": "<p>I'm surprised that no one mentioned that <code>unsafe inductive</code> literally does what the OP requests and turns off the positivity checker:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">False</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n</code></pre></div>",
        "id": 358155679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684004804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/357876569\">said</a>:</p>\n<blockquote>\n<p>Is there any <code>set_option</code> that lets one turn off the positivity checker for inductive types ? I know that non-strictly-positive inductives are allowed with <code>unsafe</code>, but I'm wondering if Lean 4 has an option to allow you to bypass this restriction outside of <code>unsafe</code>.</p>\n</blockquote>\n<p>this sounded like they already knew and do specifically not want it?</p>",
        "id": 358155841,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684004893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358134997\">said</a>:</p>\n<blockquote>\n<p>Or there should at least be an option for \"safe\" <code>implemented_by</code> that takes a proof that the terms are equal (even if the proof is a <code>sorry</code>), and to only allow <code>native_decide</code> to evaluate using safe implementations.</p>\n</blockquote>\n<p>This exists, it's called <code>@[csimp]</code></p>",
        "id": 358155879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684004917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358136932\">said</a>:</p>\n<blockquote>\n<p>In that sense it's perfectly safe, since you should only really trust a theorem if it doesn't have <code>Lean.ofReduceBool</code> as an axiom.</p>\n</blockquote>\n<p>I think this is a bit too strong, <code>Lean.ofReduceBool</code> is also not supposed to be inconsistent. The thing is, if you are using <code>ofReduceBool</code> then every occurrence of <code>implemented_by</code> or <code>extern</code> should be read as <code>axiom</code> and you should audit it for correctness</p>",
        "id": 358156146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684005093
    },
    {
        "content": "<p>If you want a safe version for <code>unsafe inductive</code>, then you need a design that gets that, because obviously you can't just take the <code>unsafe</code> off. Currently the way lean handles proving that inductives don't introduce inconsistency is the positivity checker; if you want to make an inductive which fails the positivity checker then you have to prove it is sound somehow. How do you intend to do that?</p>",
        "id": 358156394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684005266
    },
    {
        "content": "<p>One common way this is done in mathlib is to define your type as a regular <code>def</code>, and then prove the constructor and recursor as theorems. You can't prove the computation rule, though, and it is almost never the case that it happens to work out to a definitional equality</p>",
        "id": 358156573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684005370
    },
    {
        "content": "<p>Hi Mario, I'm aware of all that, what I'm saying is that the positivity checker doesn't cover all \"sound\" inductive definitions (and I don't expect it to !), and that as such, it would be nice to be able, for people that are confident enough in their inductive definitions and who knows what they're doing, to be able to locally disable it for some inductive types. Both Coq and Agda (with <code>Attribute bypass_check(guard= yes)</code> and <code>{-# NO_POSITIVITY_CHECK #-}</code>) respectively) have such features, and it would be desirable to have that in Lean too in my opinion.</p>",
        "id": 358161005,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684008201
    },
    {
        "content": "<p>you can axiomatize the inductive you want</p>",
        "id": 358161095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008258
    },
    {
        "content": "<p>TBH I don't think it's a good idea to just have it as an option like in Coq + Agda, unless it comes with some really scary warning to never use it in production</p>",
        "id": 358161159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008316
    },
    {
        "content": "<p>I'd gladly take alarming warnings over losing nice reduction rules</p>",
        "id": 358161279,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684008386
    },
    {
        "content": "<p>that's a theory extension</p>",
        "id": 358161290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008400
    },
    {
        "content": "<p>In what sense ?</p>",
        "id": 358161347,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684008441
    },
    {
        "content": "<p>right now it's fine for <code>unsafe inductive</code> to do whatever it wants since it doesn't touch the kernel or the theory, but if you want this in a safe inductive then you have to modify the theory to accomodate it</p>",
        "id": 358161358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008453
    },
    {
        "content": "<p>the only thing you can justify here without a theory change is something you could already do today: an axiomatization, or a def + theorems, and just make an elab which unfolds to that stuff</p>",
        "id": 358161458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008501
    },
    {
        "content": "<p>again, you need to specify what you want the actual syntax of the feature to be. If it is just an option to turn off positivity checking without <code>unsafe</code>, that is unsound, so what is preventing things from going off the rails?</p>",
        "id": 358161664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008614
    },
    {
        "content": "<p><code>axiom</code> does not let you add kernel defeq rules</p>",
        "id": 358161693,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684008645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358161664\">said</a>:</p>\n<blockquote>\n<p>again, you need to specify what you want the actual syntax of the feature to be. If it is just an option to turn off positivity checking without <code>unsafe</code>, that is unsound, so what is preventing things from going off the rails?</p>\n</blockquote>\n<p>Nothing would prevent it, except from the trust in the user, in the same way that <code>axioms</code> are dependent on the trust in the user to not axiomatise something unsound.</p>",
        "id": 358161917,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684008797
    },
    {
        "content": "<p>what would you give the kernel?</p>",
        "id": 358162220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009006
    },
    {
        "content": "<p>the kernel refuses to supply you with an inductive unless you follow the rules</p>",
        "id": 358162268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009042
    },
    {
        "content": "<p>The declared inductive, as well as a tag to not check positivity</p>",
        "id": 358162286,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684009065
    },
    {
        "content": "<p>so what about external kernels? they don't have such a flag</p>",
        "id": 358162361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009106
    },
    {
        "content": "<p>Is the kernel not called whatsoever on <code>unsafe</code> things currently ? I would have thought that the kernel simply turned off some features when checking unsafe things, not that only the elaborator checked them</p>",
        "id": 358162372,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684009115
    },
    {
        "content": "<p>the lean kernel might get called on <code>unsafe</code> things, but IIRC they are not in the export</p>",
        "id": 358162421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009152
    },
    {
        "content": "<p>double checked, yes the kernel has an <code>unsafe</code> mode and is used unconditionally</p>",
        "id": 358162543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358162361\">said</a>:</p>\n<blockquote>\n<p>so what about external kernels? they don't have such a flag</p>\n</blockquote>\n<p>I understand that this might not be a trivial feature, but I am just surprised at how conservative lean is with regards to these things, compared to Coq and Agda which allows many different, possibly unsafe shenanigans, to be manually turned on if an experienced user so wished to use them. An example of this is how Coq UniMath uses type-in-type in its library to have propositional resizing.</p>",
        "id": 358162881,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684009483
    },
    {
        "content": "<p>A lot of it is pushback on that whole ethos, where soundness is a far future goal (or worse, a non-goal) rather than something <a href=\"https://github.com/digama0/lean-type-theory/releases/tag/v1.0\">written up in a paper</a> that you can point to whenever anyone asks</p>",
        "id": 358163479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009904
    },
    {
        "content": "<p>it's an interactive theorem prover for cripes sakes, soundness is the value proposition</p>",
        "id": 358163591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684009962
    },
    {
        "content": "<p>I have still yet to see a proof of soundness of the complete coq kernel (or at least, a subset sufficient for the coq standard library), and agda is not even trying</p>",
        "id": 358163843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358163843\">said</a>:</p>\n<blockquote>\n<p>I have still yet to see a proof of soundness of the complete coq kernel (or at least, a subset sufficient for the coq standard library), and agda is not even trying</p>\n</blockquote>\n<p>Coq has <a href=\"https://github.com/MetaCoq/metacoq\">MetaCoq</a>, in which it proves its own soundness, and the Calculus of (Co)Inductive constructions has many different models nowadays to prove its theoretical soundness. As for Agda, it's unsound in many ways, and doesn't hide from it much</p>",
        "id": 358163990,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684010206
    },
    {
        "content": "<p>To add to this, MetaCoq provides a verified \"safe-checker\", and although it is much slower than the real type-checking, I'm pretty sure it does type-check on the entire stdlib.</p>",
        "id": 358164155,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684010306
    },
    {
        "content": "<p>If anything, I think \"default\" Coq is more trusted than Lean is by its users</p>",
        "id": 358164217,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684010355
    },
    {
        "content": "<p>no, CIC means whatever you want it to mean in those papers, every single one finds some way to be less than the whole</p>",
        "id": 358164235,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010377
    },
    {
        "content": "<p>As a mathematician I am instinctively very suspicious of a prover which can prove <code>false</code>. Programs crashing is not a big deal in CS, but proving false is deadly.</p>",
        "id": 358164413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684010499
    },
    {
        "content": "<p>metacoq is the furthest along I have seen, but it's still assuming a nontrivial axiom about normalization (of course it has to assume some axiom since it is a proof in coq, but it should be something comparable to a large cardinal axiom)</p>",
        "id": 358164429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010511
    },
    {
        "content": "<p>MetaCoq does assume strong normalization, yes. As a side-note, some people are currently working on extending some logical relations formalisations to prove SN on a theory ever so closer to CIC, but it's only in its beginning.</p>",
        "id": 358164655,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684010619
    },
    {
        "content": "<p>and also, is it actually usable to check the standard library / other plain coq developments? Too often people just cover the \"theoretically interesting\" bits and miss out on the part where <code>1 % N</code> overflows when <code>N = 2^32</code></p>",
        "id": 358164677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010634
    },
    {
        "content": "<p>or, implementation bugs aside, stuff like modules, coinductive types, or other \"fringe\" features which are actually used in practice</p>",
        "id": 358164873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010741
    },
    {
        "content": "<p>you can easily play a linguistic game where you say \"I've proved Coq\" when you mean \"I've proved MLTT + inductive types\" and people hear \"I've proved modules + nested mutual co-inductive inductive types\"</p>",
        "id": 358165130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010816
    },
    {
        "content": "<p>this situation is especially bad for PCUIC because it is always changing (well, \"always\" is relative, but it has changed quite a bit across the various versions of Coq)</p>",
        "id": 358165183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684010857
    },
    {
        "content": "<p>MetaCoq has support for CoInductive/CoFix, and I remember meeting an intern that was formalizing Coq modules in MetaCoq, it might have already been merged since then, but even if not, modules aren't present at the kernel level, they only help in avoiding code duplication when writing Coq.</p>",
        "id": 358165190,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684010861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358165183\">said</a>:</p>\n<blockquote>\n<p>this situation is especially bad for PCUIC because it is always changing (well, always is relative, but it has changed quite a bit across the various versions of Coq)</p>\n</blockquote>\n<p>Always expanding might be the right word here.</p>",
        "id": 358165324,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684010944
    },
    {
        "content": "<p>do you know whether you can plug the \"safe checker\" in to the coq frontend and run real stuff on it?</p>",
        "id": 358165425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011010
    },
    {
        "content": "<p>The two last \"fundamental\" issues that differentiate between the \"real\" CIC behind Coq's implementation and PCUIC, as far as I know, are the guard condition, which isn't the exact same between the two because Coq tries many heuristics to accept more things, and eta-conversion.</p>",
        "id": 358165446,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358165425\">said</a>:</p>\n<blockquote>\n<p>do you know whether you can plug the \"safe checker\" in to the coq frontend and run real stuff on it?</p>\n</blockquote>\n<p>You can, as far as I know, though i've never tested myself. There's a <code>MetaCoq SafeCheck &lt;term&gt;</code> command available (if you've imported the safe-checker that is, of course)</p>",
        "id": 358165494,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011082
    },
    {
        "content": "<p>I mean without modifying the coq code, just point at a library</p>",
        "id": 358165519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011105
    },
    {
        "content": "<p>I want to know that every dependency of this term is <code>SafeCheck</code>ed</p>",
        "id": 358165585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011138
    },
    {
        "content": "<p>Not that I know of, I can ask around on the coq zulip</p>",
        "id": 358165605,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011154
    },
    {
        "content": "<p>do you know whether metacoq supports a \"semantic\" model rather than one based on normalization?</p>",
        "id": 358165745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011264
    },
    {
        "content": "<p>that would make it a lot easier to justify stuff like different reduction rules or eta conversion</p>",
        "id": 358165764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358165745\">said</a>:</p>\n<blockquote>\n<p>do you know whether metacoq supports a \"semantic\" model rather than one based on normalization?</p>\n</blockquote>\n<p>What do you mean by \"semantic\" here ?</p>",
        "id": 358165780,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011303
    },
    {
        "content": "<p>types are sets, elements are elements, equality is equality, defeq is also equality</p>",
        "id": 358165808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011333
    },
    {
        "content": "<p>do the terms have a denotational semantics</p>",
        "id": 358165879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011367
    },
    {
        "content": "<p>I do not know, I'm not that knowledgeable when it comes to MetaCoq, but I would believe not.</p>",
        "id": 358165912,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011421
    },
    {
        "content": "<p>In lean this is a major deciding criterion for the theory, if it doesn't have a natural model then it's not ok (hence all kinds of anti-classical things are excluded)</p>",
        "id": 358165953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011463
    },
    {
        "content": "<p>Well, yes, Lean is classical by all means and aims to be. There's nothing stopping Coq, which (appart from Coinductives) doesn't have any theoretical features Lean doesn't have, to also have a model in ZFC+ inaccessible cardinals.</p>",
        "id": 358166163,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011615
    },
    {
        "content": "<p>To add to what <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> said, I think mathematicians want more than simple consistency from their axiom systems, they really want a sensible semantic interpretation of the theory, otherwise how can you say you have proved e.g. brouwer's fixed point theorem and not some bastardized version of it?</p>",
        "id": 358166191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011634
    },
    {
        "content": "<p>I mean, do you believe that Brouwer's fixed point proof in lean translates exactly to the usual ZFC one when embedding the proof though Lean's model ?</p>",
        "id": 358166273,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011697
    },
    {
        "content": "<p>the proof, maybe not, but the statement yes</p>",
        "id": 358166297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011718
    },
    {
        "content": "<p>the lean real numbers embed to exactly the ZFC real numbers (up to isomorphism), and topological spaces, spheres, etc likewise</p>",
        "id": 358166426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011791
    },
    {
        "content": "<p>I can understand why mathematicians like that idea then, it certainly is a desirable property</p>",
        "id": 358166458,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011813
    },
    {
        "content": "<p>But again, nothing stops Coq from being given the same exact interpretation as Lean's</p>",
        "id": 358166481,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011834
    },
    {
        "content": "<p>that would be great if someone could prove it :)</p>",
        "id": 358166533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684011847
    },
    {
        "content": "<p>I find it funny to hear coming from the other isle, where Coq \"type-theorists\" usually doubt Lean's soundness (though mostly in regards to its implementation, not its theory)</p>",
        "id": 358166617,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684011932
    },
    {
        "content": "<p>I think there are reasonable reasons to doubt Lean's implementation correctness, having mostly to do with the fact that it is younger and has a much smaller team behind it</p>",
        "id": 358166725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684012005
    },
    {
        "content": "<p>They do? The only thing I hear from Coq people is that they don't like the fact that Lean does not always have subject reduction but that is not soundness.</p>",
        "id": 358166779,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684012039
    },
    {
        "content": "<p>still, we can at least say that there are no known soundness bugs (which hopefully all major ITPs should also be able to claim)</p>",
        "id": 358166811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684012075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unsafe.20customizations/near/358166811\">said</a>:</p>\n<blockquote>\n<p>still, we can at least say that there are no known soundness bugs (which hopefully all major ITPs should also be able to claim)</p>\n</blockquote>\n<p>*that we didn't fix^^</p>",
        "id": 358166866,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1684012097
    },
    {
        "content": "<p>(all except Agda)</p>",
        "id": 358166867,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1684012098
    },
    {
        "content": "<p>(and <a href=\"https://arxiv.org/abs/2304.08391\">Mizar</a>)</p>",
        "id": 358166922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684012140
    }
]