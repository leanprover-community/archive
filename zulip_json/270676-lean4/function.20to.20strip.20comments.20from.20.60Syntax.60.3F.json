[
    {
        "content": "<p>Is there an existing function that will strip out any comments from a <code>Syntax</code>?</p>\n<p>This is needed for <code>says</code>, which is making mistake when verifying whenever there is a comment on the next line.</p>",
        "id": 382039820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691214390
    },
    {
        "content": "<p>Running the syntax through the formatter will do that as a side effect (but not give you back <code>Syntax</code>). If you want to strip comments <em>while preserving all indentation</em>, that's a bit harder. Could you say more about the use case?</p>",
        "id": 382064207,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691223493
    },
    {
        "content": "<p>During CI, <code>X says Y</code> runs the tactic <code>X</code>, and checks to see if it produces a \"Try this: A\" info message, and then checks that <code>A = Y</code>. Specifically it current checks:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.PrettyPrinter.ppTactic</span> <span class=\"o\">⟨</span><span class=\"n\">A</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">pretty</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.PrettyPrinter.ppTactic</span> <span class=\"o\">⟨</span><span class=\"n\">Y</span><span class=\"o\">⟩)</span><span class=\"bp\">.</span><span class=\"n\">pretty</span>\n</code></pre></div>\n<p>When the source code reads:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span> <span class=\"n\">says</span>\n  <span class=\"n\">Y</span>\n<span class=\"c1\">-- Some comment</span>\n</code></pre></div>\n<p>the <code>-- Some comment</code> is picked up as part of <code>Y</code>. (In fact, this is perhaps a \"bug\" in itself: the syntax for <code>says</code> includes a <code>colGt</code>.)</p>\n<p>Thus I'd like to strip out that comment before comparing with <code>A</code>.</p>",
        "id": 382069711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691224940
    },
    {
        "content": "<p>This leaves me confused, however, as this is running through the formatter!</p>",
        "id": 382078790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691226995
    },
    {
        "content": "<p>Oh, we are more advanced than I remembered: <a href=\"https://github.com/leanprover/lean4/blob/254582c00040609f7012fa4c2e0b26b289fe3842/src/Lean/PrettyPrinter/Formatter.lean#L369\">https://github.com/leanprover/lean4/blob/254582c00040609f7012fa4c2e0b26b289fe3842/src/Lean/PrettyPrinter/Formatter.lean#L369</a>. So removing all <code>SourceInfo</code> should be sufficient. I see Gabriel has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Syntax.stripPos#doc\">docs#Lean.Syntax.stripPos</a></p>",
        "id": 382080887,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691227423
    },
    {
        "content": "<p>Perfect, <code>stripPos</code> does the trick. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6381\">#6381</a></p>",
        "id": 382083671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691227875
    }
]