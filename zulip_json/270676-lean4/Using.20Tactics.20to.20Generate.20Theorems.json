[
    {
        "content": "<p>In the following example, I am able to use tactics to generate a new theorem from an old theorem.  <em>However</em>, if I try to generalize it to a function I can apply to arbitrary lemmas, lean complains that it can't infer the types.  I am curious if this is something that can be worked around, or is there a different approach I need here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">equality</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- This works and generates a theorem `substituted_theorem (n : Nat) : f n`</span>\n<span class=\"kd\">def</span> <span class=\"n\">substituted_theorem</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">thm</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equality</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- This fails to compile</span>\n<span class=\"kd\">def</span> <span class=\"n\">convertLemma</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">lem</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">lem</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equality</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 355819158,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683215658
    },
    {
        "content": "<p>Neither <code>fun</code> nor <code>intro</code> allow this; you could write your own <code>intro</code> variant that can deal with mvar types</p>",
        "id": 355845772,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683222123
    },
    {
        "content": "<p>Could you explain a bit more what you mean? What is the issue with mvar types that <code>intro</code> can't handle, and how would it need to be changed to handle it?</p>",
        "id": 355846524,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683222340
    },
    {
        "content": "<p>For one, <code>intro</code> actually works for both function types and lets, so it wouldn't know what to do when the type is an mvar. If your new tactic should only generate function types, that shouldn't be a problem.</p>",
        "id": 355847135,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683222521
    },
    {
        "content": "<p>I vaguely get the idea that I could try to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">convertLemma</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">lem</span>\n  <span class=\"k\">have</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">lem</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">equality</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>But it wouldn't be able to \"pull out\" an argument from the goal, which is a metavariable? But what would the type of <code>lem</code> even be at that point?</p>",
        "id": 355847705,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683222678
    },
    {
        "content": "<p>Can you say what sorts of things you want to do in general? Will it always be \"apply <code>simp</code> with these lemmas to this theorem\"?</p>",
        "id": 355847830,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683222716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20Tactics.20to.20Generate.20Theorems/near/355847830\">said</a>:</p>\n<blockquote>\n<p>Can you say what sorts of things you want to do in general? Will it always be \"apply <code>simp</code> with these lemmas to this theorem\"?</p>\n</blockquote>\n<p>Yes, basically, but I would probably want to use <code>apply</code> and <code>rw</code> in addition to <code>simp</code>.</p>",
        "id": 355848146,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683222812
    },
    {
        "content": "<p>Here's a mathlib metaprogram that does this for a particular domain (it generalizes the target of the theorem and then applies some simp lemmas): <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Reassoc.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Reassoc.lean</a></p>",
        "id": 355848150,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683222813
    },
    {
        "content": "<p>something that it also gives is a term elaborator, which lets you write <code>theorem foo := reassoc_of% baz</code></p>",
        "id": 355848391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683222869
    },
    {
        "content": "<p>if that sort of setup is good, then you can skip reading the <code>initialize registerBuiltinAttribute</code> part</p>",
        "id": 355848565,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683222918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20Tactics.20to.20Generate.20Theorems/near/355848150\">said</a>:</p>\n<blockquote>\n<p>Here's a mathlib metaprogram that does this for a particular domain (it generalizes the target of the theorem and then applies some simp lemmas): <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Reassoc.lean\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Reassoc.lean</a></p>\n</blockquote>\n<p>Thank you!  This does seem to be doing what I want to.</p>",
        "id": 355848997,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683223021
    },
    {
        "content": "<p>Generally, these sorts of programs aren't written as tactic blocks, but instead using the lower-level <code>MetaM</code> monad (and <code>do</code> notation) to construct a proof. It's possible to execute tactic blocks too if you need them.</p>",
        "id": 355849006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683223023
    },
    {
        "content": "<p>Yeah, I started off trying to write a MetaM command, but then I slowly realized I could do more and more with tactics, and thought it might be possible to do the entire thing with forward-mode tactics!</p>",
        "id": 355849229,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683223079
    },
    {
        "content": "<p>I am curious though, is there a way to enter tactic mode to rewrite an <code>Expr</code> inside of the <code>MetaM</code> monad?</p>",
        "id": 355857942,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683225289
    },
    {
        "content": "<p>Could you give a concrete example of what you want to do?</p>\n<p>Or maybe you're interested in looking at how <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Util/SynthesizeUsing.lean\">synthesizeUsing</a> works? (You could take a look at <a href=\"https://github.com/leanprover-community/mathlib4/blob/72c82cf2a8e2ed4dadce4e12d5fc1a97a84128ba/Mathlib/Util/SynthesizeUsing.lean\">this branch</a> too for some variations.)</p>",
        "id": 355864689,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683227204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20Tactics.20to.20Generate.20Theorems/near/355864689\">said</a>:</p>\n<blockquote>\n<p>Could you give a concrete example of what you want to do?</p>\n<p>Or maybe you're interested in looking at how <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Util/SynthesizeUsing.lean\">synthesizeUsing</a> works? (You could take a look at <a href=\"https://github.com/leanprover-community/mathlib4/blob/72c82cf2a8e2ed4dadce4e12d5fc1a97a84128ba/Mathlib/Util/SynthesizeUsing.lean\">this branch</a> too for some variations.)</p>\n</blockquote>\n<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"n\">mapForallTelescope</span> <span class=\"o\">(</span><span class=\"n\">myMagicFunctionToSwitchToTacticsMode</span> <span class=\"o\">(</span>\n    <span class=\"k\">do</span>\n      <span class=\"k\">have</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"n\">e</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n      <span class=\"n\">apply</span> <span class=\"n\">congrArg</span> <span class=\"n\">my_function</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n      <span class=\"n\">exact</span> <span class=\"n\">bar</span>\n   <span class=\"o\">)</span>\n   <span class=\"o\">)</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I don't think synthesizeUsing is quite what I'm looking for, since it requires you to know the type you are synthesize ahead of time.</p>",
        "id": 355874747,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683230676
    },
    {
        "content": "<p>I believe you can give it a fresh metavariable and make sure the tactic ends up assigning it (like with <code>exact bar</code>, which would do it indirectly via the type of <code>bar</code>)</p>",
        "id": 355875229,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683230852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20Tactics.20to.20Generate.20Theorems/near/355875229\">said</a>:</p>\n<blockquote>\n<p>I believe you can give it a fresh metavariable and make sure the tactic ends up assigning it (like with <code>exact bar</code>, which would do it indirectly via the type of <code>bar</code>)</p>\n</blockquote>\n<p>Ok, thanks,I have got this so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"n\">none</span>\n <span class=\"n\">mapForallTelescope</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">synthesizeUsing</span> <span class=\"n\">mvar</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n  <span class=\"n\">apply</span> <span class=\"n\">e</span>\n  <span class=\"o\">)</span>\n <span class=\"o\">)</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>I am just not sure how to use the tactic syntax to construct a TacticM, since the above treats <code>apply e</code> as a function call, not a tactic application.</p>",
        "id": 355877872,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683231717
    },
    {
        "content": "<p>If you take a look at the branch link, there are some small examples of <code> `(tactic| ... )</code> syntax and <code>evalTactic</code>.</p>",
        "id": 355878471,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683231920
    },
    {
        "content": "<p>Embedding an expression inside the tactic syntax isn't immediate though (and you might consider running the non-interactive tactics that the interactive tactics are frontends to yourself). One function is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.exprToSyntax#doc\">docs4#Lean.Elab.Term.exprToSyntax</a>, but it's in the TermElabM monad, so you need to do some monad lifting to use it.</p>",
        "id": 355879409,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683232236
    },
    {
        "content": "<p>for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.apply#doc\">docs4#Lean.Meta.apply</a> for the non-interactive version</p>",
        "id": 355879747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683232335
    },
    {
        "content": "<p>Hmm, it seems like mapForallTelescope does not work well with this approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshExprMVar</span> <span class=\"n\">none</span>\n <span class=\"n\">mapForallTelescope</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">synthesizeUsing</span> <span class=\"n\">mvar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n <span class=\"o\">)</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>Gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">synthesizeUsing</span> <span class=\"n\">mvar</span> <span class=\"n\">__do_lift</span><span class=\"bp\">✝</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">__do_lift</span><span class=\"bp\">✝</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Tactic.TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>I thought it would be cool to use tactic syntax here, but I think probably it will be simpler to just find the equivalent functions in the MetaM monad.</p>",
        "id": 355881839,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683233090
    },
    {
        "content": "<p>The error here is that <code>synthesizeUsing</code> is expecting a <code>Tactic.TacticM Unit</code>, not a <code>Tactic `tactic</code></p>",
        "id": 355882318,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683233271
    },
    {
        "content": "<p>You need a <code>evalTactic</code> in there to convert, like in the linked branch's code</p>",
        "id": 355882424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683233296
    },
    {
        "content": "<p>But there's another problem that the <code>e</code> inside the tactic syntax is not referring to the <code>e</code> outside. You need to use antiquotations and something like the <code>exprToSyntax</code> I mentioned to link them up.</p>",
        "id": 355882630,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683233393
    },
    {
        "content": "<p>The <code> `(tactic| ...)</code> quotation should be thought of as being of the same sort of thing as a string (though more interesting than just a sequence of characters). You need to use antiquotations to splice things (ideally Syntax, not Exprs) into it.</p>",
        "id": 355882844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683233456
    },
    {
        "content": "<p>Ah, I was misled by the comment here:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/72c82cf2a8e2ed4dadce4e12d5fc1a97a84128ba/Mathlib/Util/SynthesizeUsing.lean#LL42C1-L47C1\">https://github.com/leanprover-community/mathlib4/blob/72c82cf2a8e2ed4dadce4e12d5fc1a97a84128ba/Mathlib/Util/SynthesizeUsing.lean#LL42C1-L47C1</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">synthesizeUsing</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">congr</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Which I think should be </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">gs</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">synthesizeUsingTactic</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">congr</span><span class=\"bp\">!</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I think I understand a bit better now, and I got it working!  Many thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Function</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.AddRelatedDecl</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.SynthesizeUsing</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshTypeMVar</span>\n <span class=\"n\">synthesizeUsing</span> <span class=\"n\">mvar</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">exprToSyntax</span> <span class=\"n\">e</span><span class=\"o\">))))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"upLemma% \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">upLemma</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">upLemma</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Array.push_data</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 355910302,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683247112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"571451\">@Jeremy Salwen</span> Sorry for the documentation being misleading (and for being a beta tester!). I've corrected it and added a more sophisticated example based on your code: <a href=\"https://github.com/leanprover-community/mathlib4/blob/9cb74d7cb7610ada87159591070e2a21da966c79/Mathlib/Util/SynthesizeUsing.lean#L69-L78\">https://github.com/leanprover-community/mathlib4/blob/9cb74d7cb7610ada87159591070e2a21da966c79/Mathlib/Util/SynthesizeUsing.lean#L69-L78</a></p>\n<p>It turns out there's a big gotcha with this approach that took me a while to get to the bottom of. I was testing out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.exprToSyntax</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>for a <code>simpTerm%</code> term elaborator. It looks fine, but in the case I was trying (<code>simpTerm% h</code> where <code>h : a + 0 = b</code>) it didn't appear to be simplifying!</p>\n<p>It turns out that if <code>simp</code> applies a <code>rfl</code> lemma to a local hypothesis, it doesn't really do anything to the proof term and it just changes the type. Since <code>a + 0 = a</code> is true by definition for <code>Nat</code>, then while <code>simp at h</code> was giving <code>h : a = b</code>, the <code>exact h</code> would have the original unsimplified type.</p>\n<p>There's a fix though: do <code>exact id h</code> instead. This captures the type of <code>h</code> as it appears in the local context.</p>",
        "id": 356055744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683292717
    },
    {
        "content": "<p>I thought I'd mention this in case you also run into mysterious errors.</p>",
        "id": 356055901,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683292757
    },
    {
        "content": "<p>there is a function like <code>mkExpectedTypeHint</code> for handling this</p>",
        "id": 356058279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683293260
    },
    {
        "content": "<p>Yeah, I think the underlying issue is that simp uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.replaceLocalDeclDefEq#doc\">docs4#Lean.MVarId.replaceLocalDeclDefEq</a>, which isn't using <code>mkExpectedTypeHint</code> to record the change...</p>",
        "id": 356059813,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683293538
    },
    {
        "content": "<p>so this <code>exact id h</code> thing is a workaround. I guess it could also be used after <code>synthesizeUsing</code> to add a hint using <code>mvar</code> as the new type (part of this is just an exercise to do as much as possible in a tactic script rather than using non-interactive tactics)</p>",
        "id": 356060230,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683293612
    },
    {
        "content": "<p>Here's with <code>mkExpectedTypeHint</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">simpTerm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkFreshTypeMVar</span>\n  <span class=\"k\">let</span> <span class=\"n\">e'</span> <span class=\"bp\">←</span> <span class=\"n\">synthesizeUsing'</span> <span class=\"n\">mvar</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.exprToSyntax</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">)))</span>\n  <span class=\"n\">Meta.mkExpectedTypeHint</span> <span class=\"n\">e'</span> <span class=\"n\">mvar</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"simpTerm% \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">simpTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">simpTerm</span><span class=\"bp\">%</span> <span class=\"n\">h</span>\n<span class=\"c1\">-- ... : a = b</span>\n</code></pre></div>",
        "id": 356065481,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683294651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Thanks so much for helping with this!</p>",
        "id": 356087968,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683299080
    }
]