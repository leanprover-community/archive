[
    {
        "content": "<p>I am debugging some code which uses projections. When the pretty printer encounters a <code>Expr.proj T idx obj</code>, it displays it as <code>x.(idx + 1)</code>, but when you hover over <code>x</code>, it shows the type from type inference, and not what <code>T</code> is. This is not an issue in well-typed expressions, alas, my tactic is buggy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>.<br>\n Can I make the pretty printer show the projection's <code>T</code> value? Is there an option that I missed?</p>",
        "id": 349153665,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1681402117
    },
    {
        "content": "<p>You can always print <code>toString e</code>, where <code>e</code> is the expression you're working with. This gives you the actual <code>Expr</code> with no pretty-printing.</p>",
        "id": 349154483,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1681402307
    },
    {
        "content": "<p>Yeah, those expressions are unfortunately huge and very hard to read. I was hoping there would be some pretty printer option specifically for projections.</p>",
        "id": 349158059,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1681403239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üê∫</span> If you're ok with something that creates potentially-wrong output but at least shows what <code>T</code> is, you could try using this to override the builtin <code>proj</code> delaborator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span>\n<span class=\"kn\">open</span> <span class=\"n\">SubExpr</span>\n<span class=\"kn\">open</span> <span class=\"n\">TSyntax.Compat</span>\n\n<span class=\"kd\">@[delab proj]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabProj'</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Expr.proj</span> <span class=\"n\">T</span> <span class=\"n\">idx</span> <span class=\"n\">_</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">withProj</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.mkLit</span> <span class=\"n\">fieldIdxKind</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">T</span><span class=\"o\">))</span><span class=\"bp\">.$</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">fieldIdx</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 349164598,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681405018
    },
    {
        "content": "<p>Here's what it looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">foo</span> <span class=\"n\">where</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.proj</span> <span class=\"bp\">``</span><span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">foo.mk</span> <span class=\"o\">[])</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">``</span><span class=\"n\">Nat.zero</span> <span class=\"o\">[]))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.PrettyPrinter.ppExpr</span> <span class=\"n\">e</span>\n<span class=\"c1\">-- ({ x := Nat.zero } : foo).1</span>\n</code></pre></div>\n<p>That <code>foo</code> is correct in this case, but note that if your structure has parameters then this delaborator won't show them.</p>",
        "id": 349166020,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681405347
    },
    {
        "content": "<p>That is exactly what I was looking for, amazing, thank you &lt;3! Can we make that an option for the pretty printer?</p>",
        "id": 349213655,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1681420682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> has marked this topic as resolved.</p>",
        "id": 349217550,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681422312
    },
    {
        "content": "<p>A related question: I see the option <code>pp.structureProjections</code> to show the projections given by name as a function application, but I could not find an option or a delaborator to do this for a numbered projection like <code>x.1</code>. Is there already code for this? Or do I have to write a delaborator overriding <code>delabProj</code> in Lean?</p>",
        "id": 389422444,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694007346
    },
    {
        "content": "<p>I just wrote a delaborator for this and it seems okay. Any corrections (or confirmation that it is correct) will be appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[delab proj]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabProj</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Expr.proj</span> <span class=\"n\">typeName</span> <span class=\"n\">idx</span> <span class=\"n\">_</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">withProj</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">field</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">getStructureFields</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">typeName</span><span class=\"o\">)[</span><span class=\"n\">idx</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">idx</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">typeName</span> <span class=\"bp\">++</span> <span class=\"n\">field</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">idx</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 389439303,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694010635
    }
]