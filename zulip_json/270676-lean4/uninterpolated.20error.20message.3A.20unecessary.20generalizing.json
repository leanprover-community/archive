[
    {
        "content": "<p>In a somewhat complex <code>mathlib</code> development that's difficult to MWE, I was able to produce the error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unnecessary</span> <span class=\"bp\">'</span><span class=\"n\">generalizing'</span> <span class=\"n\">argument</span><span class=\"o\">,</span>\n<span class=\"kd\">variable</span> <span class=\"bp\">'</span><span class=\"o\">{</span><span class=\"n\">mkFVar</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">'</span> <span class=\"n\">is</span> <span class=\"n\">generalized</span> <span class=\"n\">automatically</span>\n</code></pre></div>\n<p>which is strange, since one would assume that <code>{mkFVar v}</code> would have been interpolated.<br>\nIn debugging this, I see that the offending line is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Lean/Elab/Tactic/Induction.lean</span>\n<span class=\"c1\">-- process `generalizingVars` subterm of induction Syntax `stx`.</span>\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">generalizeVars</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">targets</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">Ã—</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n     <span class=\"bp\">...</span>\n      <span class=\"k\">if</span> <span class=\"n\">forbidden.contains</span> <span class=\"n\">userFVarId</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"variable cannot be generalized because target depends on it{indentExpr (mkFVar userFVarId)}\"</span>\n      <span class=\"k\">if</span> <span class=\"n\">s.contains</span> <span class=\"n\">userFVarId</span> <span class=\"k\">then</span>\n        <span class=\"n\">throwError</span> <span class=\"s2\">\"unnecessary 'generalizing' argument, variable '{mkFVar userFVarId}' is generalized automatically\"</span>\n</code></pre></div>\n<p>the definition of <code>throwError</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- src/Lean/Exception.lean</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">throwError</span> <span class=\"bp\">$</span><span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.throwError</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">msg</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">throwError</span> <span class=\"bp\">$</span><span class=\"n\">msg</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>            <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Lean.throwError</span> <span class=\"bp\">$</span><span class=\"n\">msg</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>how does <code>throwError</code> actually figure out that the <code>$msg</code> is an <code>interpolatedStr</code>? I'd be happy to fix this, but I'm not sure what the right fix is!</p>",
        "id": 400018518,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698958896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/uninterpolated.20error.20message.3A.20unecessary.20generalizing/near/400018518\">said</a>:</p>\n<blockquote>\n<p>how does <code>throwError</code> actually figure out that the <code>$msg</code> is an <code>interpolatedStr</code>?is!</p>\n</blockquote>\n<p>I guess it looks for <code>s!</code> in the input syntax.</p>",
        "id": 400019803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698959496
    },
    {
        "content": "<p>That's weird -- if you open up that definition in VS Code it highlights like an interpolated string.</p>\n<p>One way to force it to be one is putting <code>m!</code> right in front of the string, but that's not necessary here. In fact, if you <code>#print generalizeVars</code> you can see that it's been interpolated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                <span class=\"n\">Lean.throwError</span>\n                    <span class=\"o\">(</span><span class=\"n\">toMessageData</span> <span class=\"s2\">\"unnecessary 'generalizing' argument, variable '\"</span> <span class=\"bp\">++</span>\n                        <span class=\"n\">toMessageData</span> <span class=\"o\">(</span><span class=\"n\">mkFVar</span> <span class=\"n\">userFVarId</span><span class=\"o\">)</span> <span class=\"bp\">++</span>\n                      <span class=\"n\">toMessageData</span> <span class=\"s2\">\"' is generalized automatically\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Could you try making a mwe?</p>",
        "id": 400019871,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698959522
    },
    {
        "content": "<p>The way to reproduce this is by uncommenting the \"-- generalizing i\" at this PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5920/files#diff-f6a569804f7aec89a2a69cc9f1c115b1da9ff00349ebd8df8845b35c85b3acb5R406\">https://github.com/leanprover-community/mathlib4/pull/5920/files#diff-f6a569804f7aec89a2a69cc9f1c115b1da9ff00349ebd8df8845b35c85b3acb5R406</a></p>",
        "id": 400019940,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698959540
    },
    {
        "content": "<p>Aha, I think I am looking at <code>induction</code> instead of <code>induction'</code>.</p>",
        "id": 400020157,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698959676
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/ec3e666d5e8dca12efcea13b028c27413d3f4bda/Mathlib/Tactic/Cases.lean#L81-L82\">https://github.com/leanprover-community/mathlib4/blob/ec3e666d5e8dca12efcea13b028c27413d3f4bda/Mathlib/Tactic/Cases.lean#L81-L82</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">induction'</span><span class=\"o\">)</span> <span class=\"s2\">\"induction' \"</span> <span class=\"n\">tgts</span><span class=\"o\">:(</span><span class=\"n\">Parser.Tactic.casesTarget</span><span class=\"o\">,</span><span class=\"bp\">+</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>\n          <span class=\"n\">throwError</span> <span class=\"o\">(</span><span class=\"s2\">\"unnecessary 'generalizing' argument, \"</span> <span class=\"bp\">++</span>\n            <span class=\"s2\">\"variable '{mkFVar v}' is generalized automatically\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400020333,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698959771
    },
    {
        "content": "<p>OK, I'll make a PR for this.</p>",
        "id": 400020396,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698959813
    },
    {
        "content": "<p>What's the ideal fix? do I remove the <code>++</code>? call <code>m!</code> on both strings and keep the <code>++</code>?</p>",
        "id": 400020416,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698959832
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>          <span class=\"n\">throwError</span> <span class=\"s2\">\"variable cannot be generalized {\"\"</span>\n<span class=\"s2\">            }because target depends on it{indentExpr (mkFVar v)}\"</span>\n</code></pre></div>",
        "id": 400020472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698959867
    },
    {
        "content": "<p>This is a bit of a hack, but hopefully we'll have proper line continuations for strings at some point, and then we can look for all <code>{\"\"</code> and <code>\"\"}</code></p>",
        "id": 400020575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698959907
    },
    {
        "content": "<p>PRd at <a href=\"https://github.com/leanprover-community/mathlib4/pull/8132\">https://github.com/leanprover-community/mathlib4/pull/8132</a></p>",
        "id": 400027671,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698963888
    },
    {
        "content": "<p>I also audited the other uses of <code>throwError</code>, and <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Tactic/Relation/Trans.lean#L122-L123\">we have some uses</a> that look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Relation</span><span class=\"bp\">/</span><span class=\"n\">Trans.lean</span><span class=\"o\">:</span>      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"transitivity lemmas only apply to FLAG</span>\n<span class=\"s2\">Relation/Trans.lean-        binary relations, not {indentExpr tgt}\"</span>\n</code></pre></div>\n<p>Does this introduce a newline in the error message? Is this something we should also change to the <code>{\"\"}</code> style?</p>",
        "id": 400028064,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1698964105
    },
    {
        "content": "<p>Yeah, that introduces a newline and probably a bunch of whitespace too. That should be fixed.</p>",
        "id": 400028189,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698964191
    }
]