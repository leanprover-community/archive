[
    {
        "content": "<p>In the following example, if you put your cursor on the empty line, indented two spaces (i.e. where the next tactic should be), the goal state shows <code>no goals</code> (i.e. the goal state of finished case <code>zero</code>). <br>\nIt should show the goal state of the remaining goal(s).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">--^</span>\n</code></pre></div>",
        "id": 402192880,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700042773
    },
    {
        "content": "<p>(aside: should I open issues in the Lean 4 repo for minor bugs like this?)</p>",
        "id": 402192922,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700042790
    },
    {
        "content": "<p>Same issue with induction</p>",
        "id": 402193748,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043027
    },
    {
        "content": "<p>I posted a thread and an issue yesterday</p>",
        "id": 402193777,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043036
    },
    {
        "content": "<p><del>In this case the culprit is that because case has no mandatory indentation, you are still inside the block of the case</del> I stand corrected by Mario</p>",
        "id": 402194395,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043164
    },
    {
        "content": "<p>And there are no goals left within this block</p>",
        "id": 402194422,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043175
    },
    {
        "content": "<p>case has indentation though, set by the first token in the <code>tacticSeq</code> (here <code>rfl</code>)</p>",
        "id": 402194815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043269
    },
    {
        "content": "<p>In particular if you write another tactic like <code>done</code> at the <code>--^</code> it will not be interpreted as continuing the <code>case</code> body</p>",
        "id": 402194913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/.5Bsmall.20bug.5D.20can't.20see.20goal.20state.20after.20case.20tactic/near/402192922\">said</a>:</p>\n<blockquote>\n<p>(aside: should I open issues in the Lean 4 repo for minor bugs like this?)</p>\n</blockquote>\n<p>Please do. I'm afraid the current heuristics do not consider such combinator one-liners yet.</p>",
        "id": 402195171,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1700043368
    },
    {
        "content": "<p>I know I had to implement some fancy footwork here for code actions to get the right tactic scope</p>",
        "id": 402195189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043372
    },
    {
        "content": "<p>but that work was not upstreamed to the server</p>",
        "id": 402195217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043384
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/blob/870810643364834bcdc93d791faa6f6de481dfa6/Std/CodeAction/Basic.lean#L174-L176\">https://github.com/leanprover/std4/blob/870810643364834bcdc93d791faa6f6de481dfa6/Std/CodeAction/Basic.lean#L174-L176</a></p>",
        "id": 402195562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700043489
    },
    {
        "content": "<p>Inserting <code>done</code> at the end  throws a proper error in this case so this issue is different from mine.</p>",
        "id": 402195766,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700043550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.5Bsmall.20bug.5D.20can't.20see.20goal.20state.20after.20case.20tactic/near/402195171\">said</a>:</p>\n<blockquote>\n<p>Please do. I'm afraid the current heuristics do not consider such combinator one-liners yet.</p>\n</blockquote>\n<p>Note: this is unrelated to being a oneliner. I also get it in the following case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span>\n  <span class=\"n\">case</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">skip</span>\n    <span class=\"n\">rfl</span>\n\n<span class=\"c1\">--^</span>\n</code></pre></div>",
        "id": 402203632,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700045728
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2881\">lean4#2881</a></p>",
        "id": 402204732,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700046079
    },
    {
        "content": "<p>Here's an example of the code action heuristic in action:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.CodeAction</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">d</span><span class=\"o\">⟩</span>\n  <span class=\"n\">case</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span>\n\n  <span class=\"c1\">--^ inserts 2 goals</span>\n<span class=\"c1\">--^ inserts 3 goals</span>\n</code></pre></div>",
        "id": 402205803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046403
    },
    {
        "content": "<p>Is the parser for the body of case parsing until the end of the file?</p>",
        "id": 402206198,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700046545
    },
    {
        "content": "<p>it parses until the next line which is less indented than the first line</p>",
        "id": 402207025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046837
    },
    {
        "content": "<p>(or until the next thing is not a tactic)</p>",
        "id": 402207217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.5Bsmall.20bug.5D.20can't.20see.20goal.20state.20after.20case.20tactic/near/402207025\">said</a>:</p>\n<blockquote>\n<p>it parses until the next line which is less indented than the first line</p>\n</blockquote>\n<p>Huh? The parser consumes all the trailing whitespace (and comments) at once. Whitespace sensitivity is a post-parse check of the existence of a newline or whitespace and/or a comparison of the new position to the previous saved one.</p>",
        "id": 402338063,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700086884
    },
    {
        "content": "<p>it's not post-parse, <code>colGt</code> is a parser combinator, it happens during parsing</p>",
        "id": 402341362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700088585
    },
    {
        "content": "<p>Maybe you mean post-lex?</p>",
        "id": 402341378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700088596
    },
    {
        "content": "<p>Sort of, I mean that Lean either parsers all the trailing whitespace as part of the previous the syntax element. It doesn't just parse (or lex) until the next line. Here I am using \"parse\" to mean \"construct a <code>Syntax</code> object\". I would generally restrict the term \"lex\" in Lean to mean just parsing tokens. As trailing whitespace is a property of both larger nodes and tokens, \"post-parse\" seems right to me.</p>",
        "id": 405515331,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701508005
    },
    {
        "content": "<p>I agree, but that's not after parsing (construction of <code>Syntax</code> objects), because it is input to more parsing (construction of larger <code>Syntax</code> objects). <code>colGt</code> is a parser, it acts on the parser state during parsing just like any other parser. (Not that it matters. Why are we talking about this?)</p>",
        "id": 405515616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701508273
    }
]