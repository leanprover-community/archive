[
    {
        "content": "<p>I'm interested in traversing the goal (for the purpose of machine learning), including all the goal expressions and their local context expressions (at the level of <code>Expr</code>).  I am very familiar with how to do this in Lean 3, but I'd like to know how to get started in Lean 4.  Is there a good resource or example?  Maybe the metaprogramming book?  Or is the interface very similar to Lean 3, in which case I just need to map from my old code to the new API.  Also, ideally, I'd like to take advantage of pointer-based optimizations, which I think Lean 4 has, to avoid traversing the same subexpression (if it uses the same pointer).</p>",
        "id": 404114738,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700921313
    },
    {
        "content": "<p>To be more clear, I want to work in <code>MetaM</code> and write code to extract information from the current goal.</p>",
        "id": 404114988,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700921565
    },
    {
        "content": "<p><a href=\"https://github.com/jesse-michael-han/lean-tpe-public/blob/87c7bb8dfb8271d8fcf917aae0e731600c4f4c6c/src/tactic_state.lean#L382-L393\">Here is some old code</a> I once used to gather this sort of data in Lean 3 (and serialize it to JSON).</p>",
        "id": 404116247,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700922727
    },
    {
        "content": "<p>Maybe to make it more concrete:</p>\n<ol>\n<li>How do I use <code>MetaM</code> to access the list of current goals (was <code>tactic.get_goals</code> in Lean 3)?</li>\n<li>For each goal, how do I access their expressions and their local contexts?</li>\n<li>Are there any data structures I should be aware of to accurately capture the goal state?</li>\n<li>How do I traverse these structures with pointer optimization?</li>\n</ol>",
        "id": 404116272,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700922764
    },
    {
        "content": "<p>see the examples in hitchhikers guide 2023 version</p>",
        "id": 404116507,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700922993
    },
    {
        "content": "<p>Oh, actually the <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book/blob/master/md/main/09_tactics.md#faq\">Tactics FAQ</a> in the <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">metaprogramming book</a> seems to have exactly the answers to at least questions (1) and (2).  Nice!</p>",
        "id": 404116510,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700922994
    },
    {
        "content": "<p>Ok, those two books seem like a good start!  I can't find stuff about pointer-based optimization in either, but that is probably <a href=\"https://xkcd.com/1691/\">premature optimization</a> anyway.</p>",
        "id": 404117198,
        "sender_full_name": "Jason Rute",
        "timestamp": 1700923696
    },
    {
        "content": "<p>Something you might be interested in is being able to completely extract the main goal's state as a single expression (including eliminating metavariables as additional function arguments).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">captureGoal</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">g.withContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fvars</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx.getFVars.filterM</span> <span class=\"k\">fun</span> <span class=\"n\">fvar</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">fvar.fvarId</span><span class=\"bp\">!.</span><span class=\"n\">getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isImplementationDetail</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">fvars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getType</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">abstractMVars</span> <span class=\"n\">ty</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"n\">res.expr</span>\n  <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Universe level metavariables: {res.paramNames}</span><span class=\"se\">\\n</span><span class=\"s2\">{</span>\n<span class=\"s2\">      \"\"}Number of abstracted metavariables: {res.numMVars}</span><span class=\"se\">\\n</span><span class=\"s2\">{</span>\n<span class=\"s2\">      \"\"}Captured goal:{indentD ty}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">ty</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"goal\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.getMainGoal</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">captureGoal</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"bp\">;</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">z</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  α : Type ?u.4868</span>\n<span class=\"cm\">  x y : Nat</span>\n<span class=\"cm\">  h : x = y</span>\n<span class=\"cm\">  z : Nat := x + y</span>\n<span class=\"cm\">  ⊢ z = y + x</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">goal</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Universe level metavariables: [_abstMVar.0]</span>\n<span class=\"cm\">  Number of abstracted metavariables: 0</span>\n<span class=\"cm\">  Captured goal:</span>\n<span class=\"cm\">    ∀ {α : Type _abstMVar.0} (x y : Nat),</span>\n<span class=\"cm\">      x = y →</span>\n<span class=\"cm\">        let z := x + y;</span>\n<span class=\"cm\">        z = y + x</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 404130776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700933595
    },
    {
        "content": "<p>Here's an example of a complicated metavariable situation that it can handle, so you don't have to wade through all the MetaM state yourself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  α : Type ?u.4954</span>\n<span class=\"cm\">  this : (x : α) → ?m.4966 x</span>\n<span class=\"cm\">  ⊢ True</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">pp.funBinderTypes</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"n\">goal</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  Universe level metavariables: [_abstMVar.0, _abstMVar.1]</span>\n<span class=\"cm\">  Number of abstracted metavariables: 1</span>\n<span class=\"cm\">  Captured goal:</span>\n<span class=\"cm\">    fun (x_0 : {α : Type _abstMVar.0} → α → Sort _abstMVar.1) ↦</span>\n<span class=\"cm\">      ∀ {α : Type _abstMVar.0}, ((x : α) → x_0 x) → True</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 404131264,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700933850
    },
    {
        "content": "<p>Re traversing with optimizations, many core operations use a cache, and the Expr equality operation tries pointer equality first I believe (equality checking even uses a cache).</p>",
        "id": 404132228,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700934399
    }
]