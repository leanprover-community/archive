[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-client-python/issues/24\">https://github.com/leanprover-community/lean-client-python/issues/24</a></p>\n<p>I've tried that for an example, and it fails.</p>",
        "id": 359477243,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684437008
    },
    {
        "content": "<p>(I posted some comments in the repo; the short answer is that there is no Lean Server Protocol any more, so I don't think we need our own client)</p>",
        "id": 359478356,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684437416
    },
    {
        "content": "<p>But someone here might be able to show you how to speak to the Language Server Protocol from Python.</p>",
        "id": 359478418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684437438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Yes, that's what I need the closest related LSP documentation for Python/Lean4 comm.  I'm not sure the architecture.  Would man-in-the-middle be best?   My end goal is to convert my commutative diagram data into Lean4 statements.  I am aware of the CD widgets, but this is completely independent / a different approach from that.  Found this article:  <a href=\"https://medium.com/@malintha1996/understanding-the-language-server-protocol-5c0ba3ac83d2\">https://medium.com/@malintha1996/understanding-the-language-server-protocol-5c0ba3ac83d2</a></p>",
        "id": 359478695,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684437551
    },
    {
        "content": "<p>Why don't you do it from within lean itself?</p>",
        "id": 359492652,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684442351
    },
    {
        "content": "<p>Lean can read in your data just like python, but it can construct Lean4 syntax accurately in a way that Python can't.</p>",
        "id": 359492751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684442397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20can.20we.20use.20Lean4.20from.20Python.3F/near/359492751\">said</a>:</p>\n<blockquote>\n<p>Lean can read in your data just like python, but it can construct Lean4 syntax accurately in a way that Python can't.</p>\n</blockquote>\n<p>That sounds like the best laid plan for now.  I will be learning some more Lean4 with my side project buddy.</p>",
        "id": 359508904,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684448826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  who to ask how to rewrite designated insertion points of a .lean file, or would you just create a web routine that \"grabs the objects\"?  In that case we should be sure that the diagram is pretty much edit locked I think...</p>",
        "id": 359802242,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684553113
    }
]