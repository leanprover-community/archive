[
    {
        "content": "<p>Hi! So, I am trying to profile and compare the performance<br>\nof some tactics that I wrote. For this purpose, I wrote another<br>\nsmall tactic that just reports the current time, then I invoke<br>\nit before and after using the tactic that I want to profile.<br>\nSomething like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">reportTime</span><span class=\"o\">)</span> <span class=\"s2\">\"reportTime\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"kd\">@[tactic reportTime]</span> <span class=\"kd\">def</span> <span class=\"n\">evalReport</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">time</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">IO.monoMsNow</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{time}ms\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">reportTime</span>\n  <span class=\"n\">myTactic1</span>\n  <span class=\"n\">reportTime</span>\n  <span class=\"n\">myTactic2</span>\n  <span class=\"n\">reportTime</span>\n</code></pre></div>\n<p>My question is whether this is an appropriate way to measure<br>\nthe efficiency of each tactic. I'm wondering if there is some<br>\nsort of preprocessing before the tactic <code>reportTime</code> runs,<br>\nthat I would be missing by this approach. I also accept<br>\nsuggestions of other methods to profile my tactics.</p>\n<p>I have also been wanting to use the flag <code>--profile</code> of lean<br>\nto obtain more information, but I couldn't find an explanation for<br>\nwhat each time reported means exactly. For instance, it is not<br>\nclear to me the difference between \"elaboration\" and \"parsing\",<br>\nand what the time report that is labeled \"initialization\" is<br>\nabout.</p>\n<p>Thanks!</p>",
        "id": 325519689,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1675381399
    },
    {
        "content": "<p>I believe your approach should accurately measure the time taken to elaborate each tactic. It excludes parsing since the whole <code>by</code> block is parsed before <code>reportTime</code> is run. But the parsing time should be negligible.</p>\n<p>To explain the different phases:</p>\n<ul>\n<li>Parsing goes from <code>.lean</code> file to <code>Syntax</code>, which is a concrete syntax tree.</li>\n<li>Elaboration goes from <code>Syntax</code> to <code>Expr</code>, which is an abstract syntax tree. Elaboration of commands etc. adds declaration objects to the environment. Elaboration of tactics ultimately construct a proof term, i.e. an <code>Expr</code>.</li>\n<li>Initialisation is a special (and, to me, slightly mysterious) thing that runs before anything else. It should not be relevant to you unless you use environment extensions.</li>\n</ul>",
        "id": 325637305,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675432695
    },
    {
        "content": "<p>What's the best tool to profile tactics right now? Best would be something that's machine independent. We make heavy use of <code>aesop</code> and need some threshold above which we inline proofs</p>",
        "id": 383631785,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1691675306
    },
    {
        "content": "<p>I believe heartbeats are the only machine-independent performance metric we have. Can you just wrap each Aesop call into a pair of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=getNumHeartbeats#doc\">docs4#getNumHeartbeats</a> and set a limit on the difference?</p>",
        "id": 383638758,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1691676533
    }
]