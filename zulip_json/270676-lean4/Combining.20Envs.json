[
    {
        "content": "<p>Suppose I have a lean file with some imports at the top, and later in the file I obtain an environment <code>env</code> from the ether (doesn't really matter how). Do we have something that will update the environment of the given file by incorporating <code>env</code>? </p>\n<p>It seems that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.importModules#doc\">docs#Lean.importModules</a> has some logic for this internally, but I can't find any standalone functions of this sort.</p>",
        "id": 390727691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694612903
    },
    {
        "content": "<p>You want to update the environment in the current file? There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.setEnv#doc\">docs#Lean.setEnv</a>, does that work in your situation?<br>\nAh you want to combine them meaning union the declarations and such? That I don't know</p>",
        "id": 390730483,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694613714
    },
    {
        "content": "<p>Yeah I suppose I just want to add a bunch of declarations, so I could use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.addDecl#doc\">docs#Lean.Environment.addDecl</a> with setEnv and some for loop</p>",
        "id": 390731273,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694613915
    },
    {
        "content": "<p>Do you want to merge the entire environment, or are you just wanting to add in the \"<code>map₂</code>\" entries (i.e., the module-specific entries)?</p>",
        "id": 390732238,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694614159
    },
    {
        "content": "<p>To un-xy, what I want to do is to write a command that fetches some lean project from github, compiles a certain file to obtain an environment, and adds the necessary declarations from that environment to the current file's environment. I already have some code that obtains the environment, and I suppose <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addDecl#doc\">docs#Lean.addDecl</a> should suffice? I'm thinking of this as an \"ad hoc\" import. Kyle, I'm not sure what you mean by <code>map_2</code>...</p>",
        "id": 390740399,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694616452
    },
    {
        "content": "<p>Can you un-xy further? Do you expect that everything works as if you <code>import</code>’ed the file normally (e.g. <code>#eval</code> etc), or do want to do something more narrow?</p>",
        "id": 390747256,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694618425
    },
    {
        "content": "<p>(The hash map <code>env.constants.map₂</code> consists of the constants defined in the current module, and none of the constants that have been imported by the module.)</p>",
        "id": 390749106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694618971
    },
    {
        "content": "<p>Do you just want the declarations? Or do you need attributes and environment extensions too? (My understanding is that you can't add any new environment extensions to the current environment -- they're finalized right after the <code>import</code> block.)</p>",
        "id": 390749478,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694619076
    },
    {
        "content": "<p>That's right Kyle, just the declarations, so it won't actually work in the same way as an import command.</p>",
        "id": 390757893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694621744
    },
    {
        "content": "<p>I hope it would be possible to <code>#eval</code>, but I don't know the internals well enough to be sure. I guess I'll just try it out :)</p>",
        "id": 390758039,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694621791
    },
    {
        "content": "<p>Here's one use case I have in mind: When working on some file in mathlib and I want help from GPT37, I would call</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">import_git</span> <span class=\"s2\">\"https://github.com/leanprover-community/gpt37_ftw\"</span> <span class=\"s2\">\"Main.lean\"</span> <span class=\"c1\">-- or something</span>\n</code></pre></div>\n<p>and be able to use whatever tactics that file introduces without modifying the lakefile to add another dependency.</p>",
        "id": 390758391,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694621919
    },
    {
        "content": "<p>Once I'm done with that file, I would delete that line.</p>",
        "id": 390758521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694621963
    },
    {
        "content": "<p>The robust way to solve this would be some kind of user-wide plugin support in Lake that would automatically be loaded into any server process</p>",
        "id": 390759128,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694622167
    },
    {
        "content": "<p>Ok, that's way beyond my paygrade :)</p>",
        "id": 390759828,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694622406
    },
    {
        "content": "<p>Ultimately I believe it's a far easier problem to solve than importing things in the middle of a file :)</p>",
        "id": 390760087,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694622486
    },
    {
        "content": "<p>Can you say more about what you envision such user-wide Lake plugins would look like?</p>",
        "id": 390760221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694622537
    },
    {
        "content": "<p>Effectively a plugin (as in <code>lean --plugin</code>) is just a package that injects code into the server -- such as a parser and elaborator for some helper command. The remaining task is to register and manage these plugins per user, and to load them into the server automatically after compiling them for that Lean version</p>",
        "id": 390761867,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694623086
    },
    {
        "content": "<p>Can you point me to an example of an existing plugin that I can look at?</p>",
        "id": 390764318,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694624117
    },
    {
        "content": "<p>I played around with the very naive approach of using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.addAndCompile#doc\">docs#Lean.addAndCompile</a> but, as expected, I hit an issue when some declaration depends on another one. Do we have some function which takes a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Declaration#doc\">docs#Lean.Declaration</a> and returns all the declarations that it depends on, the ones those depend on, etc., organized in a tree-like structure?</p>",
        "id": 390807555,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694641622
    }
]