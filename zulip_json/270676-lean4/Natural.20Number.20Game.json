[
    {
        "content": "<p><a href=\"/user_uploads/3121/Gf56-VT_3sHa0Clc0DItxUMG/image.png\">image.png</a><br>\nthere's a natural number game here <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/AdvAddition/level/6\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/AdvAddition/level/6</a><br>\nsurely the tactic tauto solves the problem, but I feel like it is cheating, how are you supposed to solve this level?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Gf56-VT_3sHa0Clc0DItxUMG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Gf56-VT_3sHa0Clc0DItxUMG/image.png\"></a></div>",
        "id": 399264974,
        "sender_full_name": "Kreijstal",
        "timestamp": 1698659558
    },
    {
        "content": "<p>You might use <code>apply False.elim</code> (which I’m not sure was shown in NNG though) and <code>zero_ne_succ</code> if you want all the intermediate steps I guess</p>",
        "id": 399266658,
        "sender_full_name": "Luigi Massacci",
        "timestamp": 1698660039
    },
    {
        "content": "<p>Why's it cheating? The panel on the left suggests using it</p>",
        "id": 399269828,
        "sender_full_name": "Leo Shine",
        "timestamp": 1698661039
    },
    {
        "content": "<p><code>contradiction</code> solved it for me, but I'm also not convinced that that was the way in which we are supposed to solve this level.</p>",
        "id": 399271300,
        "sender_full_name": "David Méndez",
        "timestamp": 1698661523
    },
    {
        "content": "<p>Thank you for this discussion. There are often many ways that you can solve a level and I don't think I have a \"right\" or a \"wrong\" way in my mind when I'm writing worlds, I just have a route through to a solution which uses only tactics which I have introduced so far. I will take a closer look at this thread and see if I can tidy things up, but please bear in mind that right now game development is very active (I have advanced multiplication world ready to go, I am moving where <code>tauto</code> is introduced and encouraging people to use it more) and things are still likely to be shifting around.</p>",
        "id": 399272010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698661719
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/0CDyFOrI8ubGPfgInvMQzN9L/image.png\">image.png</a><br>\nlike this, lol</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0CDyFOrI8ubGPfgInvMQzN9L/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/0CDyFOrI8ubGPfgInvMQzN9L/image.png\"></a></div>",
        "id": 399272718,
        "sender_full_name": "Kreijstal",
        "timestamp": 1698661888
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KbYGtBaQhn58pocpffAH97Hh/image.png\">image.png</a><br>\nyay</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KbYGtBaQhn58pocpffAH97Hh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/KbYGtBaQhn58pocpffAH97Hh/image.png\"></a></div>",
        "id": 399281237,
        "sender_full_name": "Kreijstal",
        "timestamp": 1698664947
    },
    {
        "content": "<p>Hiya, I'm working through the natural number game, I'm up to less than equal world level 5:<br>\n<code>theorem le_zero (x : ℕ) (hx : x ≤ 0) : x = 0 := by</code></p>\n<p>The hint says </p>\n<blockquote>\n<p>It's \"intuitively obvious\" that there are no numbers less than zero, but to prove it you will need a result which you showed in advanced addition world.</p>\n</blockquote>\n<p>The theorems from that world are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I'm a bit stuck on this, can I get another hint? It feels like it's probably referring to the last two but I'm not sure how to start.</p>",
        "id": 405281149,
        "sender_full_name": "James Sully",
        "timestamp": 1701410057
    },
    {
        "content": "<p>from the link <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/399264974\">above</a> it seems like level 6 is <code>a + b = 0 -&gt; a = 0</code> which looks like the right lemma to use here</p>",
        "id": 405282166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410324
    },
    {
        "content": "<p>how is less-equal defined?</p>",
        "id": 405282370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410369
    },
    {
        "content": "<p>a &lt;= b if exists c such that b = a + c</p>",
        "id": 405282615,
        "sender_full_name": "James Sully",
        "timestamp": 1701410414
    },
    {
        "content": "<p>so it introduced me to <code>use</code> in earlier exercises</p>",
        "id": 405282713,
        "sender_full_name": "James Sully",
        "timestamp": 1701410432
    },
    {
        "content": "<p>okay, so you should use that definition to get <code>a + b = 0</code> from the assumption</p>",
        "id": 405282958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410475
    },
    {
        "content": "<p>do you know how to unpack an existence assumption? <code>use</code> is for constructing one</p>",
        "id": 405283232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410523
    },
    {
        "content": "<p>I'm assuming I use <code>cases</code>?</p>",
        "id": 405283410,
        "sender_full_name": "James Sully",
        "timestamp": 1701410550
    },
    {
        "content": "<p>I'm pretty fuzzy on what it means though</p>",
        "id": 405283442,
        "sender_full_name": "James Sully",
        "timestamp": 1701410558
    },
    {
        "content": "<p>the basic idea is that if you are trying to prove goal <code>P</code> and you have an assumption <code>h</code> that says there exists an x such that <code>Q x</code> holds, then <code>cases h</code> will give you such an <code>x</code> and the fact that <code>Q x</code> holds, and your goal is still to prove <code>P</code></p>",
        "id": 405283821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701410632
    },
    {
        "content": "<p>the lean server on the website keeps crashing unfortunately</p>",
        "id": 405283849,
        "sender_full_name": "James Sully",
        "timestamp": 1701410638
    },
    {
        "content": "<p>got it, thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">a</span>\n<span class=\"n\">symm</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">apply</span> <span class=\"n\">eq_zero_of_add_right_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 405284646,
        "sender_full_name": "James Sully",
        "timestamp": 1701410909
    },
    {
        "content": "<p>where <code>hx</code> was <code>x &lt;= 0</code></p>",
        "id": 405284704,
        "sender_full_name": "James Sully",
        "timestamp": 1701410946
    },
    {
        "content": "<p>I guess I don't need the <code>with</code>, I had thought that was a required part of the syntax</p>",
        "id": 405284833,
        "sender_full_name": "James Sully",
        "timestamp": 1701411004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I was thinking of suggesting using induction on <code>n</code>. Is that unadvised?</p>",
        "id": 405287036,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701411986
    },
    {
        "content": "<p>The way this game is structured you generally only have to do one induction per level</p>",
        "id": 405287139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412038
    },
    {
        "content": "<p>and you don't need to write your own inductive hypotheses</p>",
        "id": 405287170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412053
    },
    {
        "content": "<p>in this case the lemma to prove by induction is <code>a + b = 0 -&gt; a = 0</code> by induction on <code>b</code>, and this was done already in a previous level (which is the reason for the hint)</p>",
        "id": 405287308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> What is the motivation behind avoiding induction? Typing <code>induction x</code> in the level autogenerates the case split for you, so there isn't much overhead there.</p>",
        "id": 405287579,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412192
    },
    {
        "content": "<p>induction is the \"creative\" step when it comes to these kind of problems</p>",
        "id": 405287744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412223
    },
    {
        "content": "<p>so it is helpful to control when it is done when teaching</p>",
        "id": 405287836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412252
    },
    {
        "content": "<p>What is a \"creative\" step?</p>",
        "id": 405287940,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412278
    },
    {
        "content": "<p>It's well known in ATPs that the hardest step when reasoning about inductive types like Nat is coming up with the right inductive hypothesis or loop invariant, everything else is just \"follow your nose\"</p>",
        "id": 405288305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412374
    },
    {
        "content": "<p>In this case, you might be tempted to prove <code>a &lt;= 0 -&gt; a = 0</code> by induction on <code>a</code>, but this is the wrong move and you will get stuck</p>",
        "id": 405288405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I did that and it worked. (I passed the level via induction on exactly that).</p>",
        "id": 405288585,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412459
    },
    {
        "content": "<p>if you have the right other lemmas you can still do it</p>",
        "id": 405288613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412472
    },
    {
        "content": "<p>it's true after all</p>",
        "id": 405288644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412486
    },
    {
        "content": "<p>so you can never really get stuck when applying <code>induction</code> with the wrong IH, but the induction might not do you any good</p>",
        "id": 405288679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701412502
    },
    {
        "content": "<p>That's certainly fair and true. In this case, though, induction does help.</p>",
        "id": 405289594,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701412925
    },
    {
        "content": "<p>But I presume your point is that the goal is to avoid cases were it could hurt. However, isn't that true of other theorems as well (i.e., <code>le_trans</code> and the like can be applied ad nauseum to little effect as well if you don't have a plan).</p>",
        "id": 405289981,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701413047
    },
    {
        "content": "<p>not exactly, there is a precise sense in which those are easier from an ATP perspective (and to some extent when hand proving too): you can enumerate all the consequences of what you know until you don't get any new things, and this can handle <code>le_trans</code> reasoning</p>",
        "id": 405290280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701413154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I assume this applies when the strategy is strictly to apply one of the possible theorems to the current goal. Because you could continue building infinite <code>have</code> s by <code>le_trans</code>/<code>le_succ</code> from 0 upwards in the Nats (in a manner similar to inducitng up them). (iirc, one of these is forward reasoning and one is backwards reasoning?)</p>",
        "id": 405290993,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701413375
    },
    {
        "content": "<p>I think the trick that makes saturation work is the subformula property: (under some conditions) if there is a proof then there is a proof which only uses subterms of what you already have</p>",
        "id": 405291402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701413505
    },
    {
        "content": "<p>so you know that just building up big terms doesn't help</p>",
        "id": 405291437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701413518
    },
    {
        "content": "<p>Ok, now I'm stuck on one that definitely does involve induction:<br>\n<a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/LessOrEqual/level/8\">https://adam.math.hhu.de/#/g/hhu-adam/NNG4/world/LessOrEqual/level/8</a></p>\n<p>Here's what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_total</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"c1\">-- base</span>\n<span class=\"n\">right</span>\n<span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- inductive</span>\n<span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">x_le_d</span> <span class=\"n\">d_le_x</span>\n<span class=\"c1\">-- x_le_d case</span>\n<span class=\"n\">left</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">x</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">x_le_d</span> <span class=\"o\">(</span><span class=\"n\">le_succ_self</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now my goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Current</span> <span class=\"n\">Goal</span>\n<span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">xd</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">d_le_x</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">∨</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>but the goal doesn't seem to me to follow from the assumption? It's difficult for me to keep track of what's going on haha</p>",
        "id": 405293214,
        "sender_full_name": "James Sully",
        "timestamp": 1701414253
    },
    {
        "content": "<p>presumably it must and I'm mistaken. But i'm not sure where to go next</p>",
        "id": 405293402,
        "sender_full_name": "James Sully",
        "timestamp": 1701414344
    },
    {
        "content": "<p>Maybe you should have started with <code>induction y with d hd generalizing x</code></p>",
        "id": 405301462,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701417009
    },
    {
        "content": "<p>hmm, that may be a better approach, but I haven't been introduced to <code>generalizing</code> yet and don't know what it is, and the hint says</p>\n<blockquote>\n<p>Start with <code>induction y with d hd</code>.</p>\n</blockquote>\n<p>So presumably it's not the intended solution</p>",
        "id": 405302514,
        "sender_full_name": "James Sully",
        "timestamp": 1701417311
    },
    {
        "content": "<p>Generalizing won't help you here, I think. Do I not offer some hints with this level? It's one of the hardest ones. How do you get over the line with <code>generalizing</code>? Am I pushing people the wrong way?</p>",
        "id": 405304919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701417849
    },
    {
        "content": "<p>My idea was: cases on d_le_x with a and then cases on a</p>",
        "id": 405305206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701417968
    },
    {
        "content": "<p>I didn't actually manage to finish it with generalizing either :)</p>",
        "id": 405311011,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701419660
    },
    {
        "content": "<p>The key for me was realizing how to <code>use</code> numbers to make progress on ≤ goals, then working backwards. Without the usual things accessible, it took a bit to figure out which of the very few tools available were suitable! :P</p>",
        "id": 405311065,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701419682
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/405305206\">said</a>:</p>\n<blockquote>\n<p>My idea was: cases on d_le_x with a and then cases on a</p>\n</blockquote>\n<p>it seems very simple and obvious and mechanical when you put it like that haha. I guess I just lost faith</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">y</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"c1\">-- base</span>\n<span class=\"n\">right</span>\n<span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">x</span>\n<span class=\"c1\">-- inductive</span>\n<span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">x_le_d</span> <span class=\"n\">d_le_x</span>\n<span class=\"c1\">-- x_le_d case</span>\n<span class=\"n\">left</span>\n<span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"n\">x</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">x_le_d</span> <span class=\"o\">(</span><span class=\"n\">le_succ_self</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"n\">cases</span> <span class=\"n\">d_le_x</span> <span class=\"k\">with</span> <span class=\"n\">a</span>\n<span class=\"n\">cases</span> <span class=\"n\">a</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"n\">left</span>\n<span class=\"n\">exact</span> <span class=\"n\">le_succ_self</span> <span class=\"n\">d</span>\n\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">right</span>\n<span class=\"n\">use</span> <span class=\"n\">a_1</span>\n<span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 405311129,
        "sender_full_name": "James Sully",
        "timestamp": 1701419705
    },
    {
        "content": "<p>(Btw, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, typo at the end: \"remarks that with you've\")</p>",
        "id": 405311183,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701419722
    },
    {
        "content": "<p>thanks for the help!</p>",
        "id": 405311357,
        "sender_full_name": "James Sully",
        "timestamp": 1701419784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Natural.20Number.20Game/near/405288405\">said</a>:</p>\n<blockquote>\n<p>In this case, you might be tempted to prove <code>a &lt;= 0 -&gt; a = 0</code> by induction on <code>a</code>, but this is the wrong move and you will get stuck</p>\n</blockquote>\n<p>As an FYI, here is how I solved LE world level 5 via induciton:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">le_zero</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n<span class=\"n\">induction</span> <span class=\"n\">x</span>\n<span class=\"n\">rfl</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">n_ih</span> <span class=\"bp\">$</span> <span class=\"n\">le_trans</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span>\n<span class=\"n\">cases</span> <span class=\"n\">hx</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n<span class=\"n\">exact</span> <span class=\"n\">False.elim</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">zero_ne_succ</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>Noting this here in case <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> desires to forbid such an inductive solution.</p>",
        "id": 405315063,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701420901
    },
    {
        "content": "<p>(One worry is that my use of <code>cases</code> on the <code>≤</code> term may be an unintentional leakage of the underlying definition.)</p>",
        "id": 405316667,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701421345
    },
    {
        "content": "<p>Level 4 explicitly teaches using cases like this</p>",
        "id": 405318446,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1701422017
    },
    {
        "content": "<p>I doubt Kevin actually wants to <em>forbid</em> proofs off the beaten track; finding a solution via an unexpected strategy is one of the joys of gaming</p>",
        "id": 405325226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701424393
    },
    {
        "content": "<p>I finished the game!</p>",
        "id": 405327988,
        "sender_full_name": "James Sully",
        "timestamp": 1701425252
    },
    {
        "content": "<p>that was fun</p>",
        "id": 405328008,
        "sender_full_name": "James Sully",
        "timestamp": 1701425259
    },
    {
        "content": "<p>For one of my goals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Objects</span><span class=\"o\">:</span>\n<span class=\"n\">abn_1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">Assumptions</span><span class=\"o\">:</span>\n<span class=\"n\">n_ih</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span>\n<span class=\"n\">Goal</span><span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am tring rw [mul_comm a b^n_1]  but getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.39929</span>\n<span class=\"n\">case</span> <span class=\"n\">succ</span>\n<span class=\"n\">abn_1</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">n_ih</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n_1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>can someone please explain the error to me and how to apply mul_comm here?</p>",
        "id": 405328238,
        "sender_full_name": "learnreal",
        "timestamp": 1701425322
    },
    {
        "content": "<p><code>rw [mul_comm a (b^n_1)]</code> should work.</p>",
        "id": 405329036,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1701425531
    },
    {
        "content": "<p>You're not the first person who has run into this and I don't know what to do about it :-/</p>",
        "id": 405355142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1701434690
    },
    {
        "content": "<p>Explicitly add example in documenttion? May be it's there but I missed it!</p>",
        "id": 405359517,
        "sender_full_name": "learnreal",
        "timestamp": 1701436074
    },
    {
        "content": "<p>Maybe we could add a custom elaborator that would catch equalities raised to the power of something and then throw a sensible error message?</p>",
        "id": 406920539,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1702117847
    }
]