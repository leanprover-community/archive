[
    {
        "content": "<p>When do I need to call <code>lean_dec</code> or <code>lean_inc</code>?</p>\n<p>I implemented the following C function:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">send_message</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"p\">){</span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_mk_string</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">lean_object</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">game_send_message</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">io_world</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lean_io_result_is_ok</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_io_result_get_value</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">lean_io_result_show_error</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">lean_dec</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here, <code>game_send_message</code> is an exported function implemented in Lean. The idea is that I would like to keep my state in a global variable and have it updated by <code>game_send_message</code>. Are the <code>lean_dec</code> calls correct like this?</p>",
        "id": 403851116,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700770859
    },
    {
        "content": "<p>I think you need <code>lean_inc(state);</code> after you set it since <code>lean_io_result_get_value</code> doesn't increment it itself</p>",
        "id": 403851686,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771270
    },
    {
        "content": "<p>(I'm assuming you're initializing <code>state</code> elsewhere)</p>",
        "id": 403851759,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771304
    },
    {
        "content": "<p>Yes, I have another Lean-exported function that gives me the initial state.</p>",
        "id": 403851818,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700771379
    },
    {
        "content": "<p>Okay, I guess since I am freeing the reference to <code>res</code>, then the <code>state</code> contained in <code>res</code> is also freed. So I need to explicitly <code>lean_inc(state)</code> to keep it, right?</p>",
        "id": 403852145,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700771608
    },
    {
        "content": "<p>Yeah, that's my understanding.</p>",
        "id": 403852165,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771625
    },
    {
        "content": "<p>There's a chance you need to <code>lean_inc(state);</code> before <code>game_send_message</code> too, depending on whether it's doing a <code>lean_dec(state)</code> before returning</p>",
        "id": 403852176,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771631
    },
    {
        "content": "<p>I suppose I should also <code>lean_dec(s)</code>?</p>",
        "id": 403852177,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700771631
    },
    {
        "content": "<p>That depends on what <code>game_send_message</code> does with it</p>",
        "id": 403852241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771656
    },
    {
        "content": "<p>If you didn't annotate <code>game_send_message</code> to borrow particular arguments (with <code>@&amp;</code> syntax), then it'll do <code>lean_dec</code> for you, I believe</p>",
        "id": 403852420,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771805
    },
    {
        "content": "<p>(See <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html#borrowing\">https://lean-lang.org/lean4/doc/dev/ffi.html#borrowing</a>)</p>",
        "id": 403852472,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771852
    },
    {
        "content": "<p>So, if you didn't use that annotation, you need <code>lean_inc(state)</code> before <code>game_send_message</code> and no <code>lean_dec(s)</code> after it.</p>",
        "id": 403852575,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700771904
    },
    {
        "content": "<p>(Oh, I misread, only <code>@[extern]</code> uses <code>@&amp;</code>, and <code>@[export]</code> doesn't -- every argument is owned rather than borrowed in the latter case.)</p>",
        "id": 403852914,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700772206
    },
    {
        "content": "<p>Thanks, I think I got it now!</p>",
        "id": 403853153,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1700772397
    }
]