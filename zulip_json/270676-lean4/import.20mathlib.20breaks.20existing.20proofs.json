[
    {
        "content": "<p>I have the following definition (simplified):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">USize.checked_rem</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span> <span class=\"n\">n.val</span> <span class=\"bp\">%</span> <span class=\"n\">m.val</span><span class=\"o\">,</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">m.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">USize.size</span> <span class=\"o\">:=</span> <span class=\"n\">m.val.isLt</span>\n      <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">n.val.val</span> <span class=\"bp\">%</span> <span class=\"n\">m.val.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.val.val</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">n.val</span> <span class=\"n\">m.val</span> <span class=\"n\">h</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n    <span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">.</span><span class=\"n\">none</span>\n</code></pre></div>\n<p>works fine, except if I add <code>import Mathlib</code> at the top of my file, my proof no longer works, and I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">m.val.isLt</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"n\">m.val</span> <span class=\"bp\">&lt;</span> <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">m.val</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">↑</span><span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>is there any advice on how to debug this? the reason for importing mathlib was to get the benefits of linarith</p>",
        "id": 325021357,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201137
    },
    {
        "content": "<p>you should mouseover the up arrows to see what the types are</p>",
        "id": 325021480,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675201186
    },
    {
        "content": "<p>I think the problem is that <code>m.val &lt; USize.size</code> is not well-typed, so Lean tried inserting a coercion first on the  right, and if that failed, on the left</p>",
        "id": 325021791,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675201276
    },
    {
        "content": "<p>ok, there was an implicit <code>.val</code> that Lean was adding</p>",
        "id": 325021951,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201323
    },
    {
        "content": "<p>and somehow, <code>import Mathlib</code> made it fail... the fix was to write instead <code>have h1: m.val.val</code></p>",
        "id": 325022017,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201339
    },
    {
        "content": "<p>(and leave the rest unchanged)</p>",
        "id": 325022035,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201344
    },
    {
        "content": "<p>If you have mathlib imported, there is a coercion from <code>Nat</code> to <code>Fin n</code> that lean picks before it tries the coercion from <code>Fin n</code> to <code>Nat</code></p>",
        "id": 325022073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675201359
    },
    {
        "content": "<p>ah! that explains a lot... thanks so much</p>",
        "id": 325022158,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201388
    },
    {
        "content": "<p><code>have h1: ↑m.val &lt; USize.size := m.val.isLt</code> or even <code>have h1 := m.val.isLt</code> would be nicer than <code>.val.val</code></p>",
        "id": 325022180,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675201397
    },
    {
        "content": "<p>I'm not familiar with the \\uparrow notation... need to read about it!</p>",
        "id": 325022286,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201439
    },
    {
        "content": "<p>ok that's a nice notation for coercions... and indeed it makes things more pleasant. thanks!</p>",
        "id": 325022519,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675201525
    }
]