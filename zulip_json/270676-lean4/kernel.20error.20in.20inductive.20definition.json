[
    {
        "content": "<p>I am defining some crazy inductive types to try and understand recursors and stuff, and got at the following situation:</p>\n<p>I define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Str</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IndStr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">IndStr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Str</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">s.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">ℕ</span> <span class=\"k\">else</span> <span class=\"n\">IndStr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span>\n</code></pre></div>\n<p>I do not expect Lean to be ok with this definition, but the error message I get is a bit weird:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">IndStr.f'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>Can someone guide me through the definitions to understand the error?  I am assuming it is a \"positivity\" error, but I don't really understand what positivity is.</p>\n<p>Note : the active toolchain is <code>4.0.0-nightly-2023-07-12</code>.</p>",
        "id": 394057946,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696057355
    },
    {
        "content": "<p>My understanding is that <code>(kernel)</code> messages are always bugs. Does it reproduce on current master?</p>",
        "id": 394058542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696057582
    },
    {
        "content": "<p>I will check; the above snippet should be a mwe, there are no imports necessary.</p>",
        "id": 394059058,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696057943
    },
    {
        "content": "<p>Ouch; for some reason, I am downloading at 10kbps, so it's going to take a while to get the current nightly.</p>",
        "id": 394059216,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696058135
    },
    {
        "content": "<p>kernel messages are always bugs, but I happen to know that the elaborator doesn't do any positivity checking, the kernel implementation is the only implementation</p>",
        "id": 394059770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696058633
    },
    {
        "content": "<p>On latest nightly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Str</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myS</span> <span class=\"o\">:</span> <span class=\"n\">Str</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"o\">}</span>\n<span class=\"k\">#eval</span> <span class=\"n\">myS.x</span> <span class=\"bp\">+</span> <span class=\"n\">myS.y</span> <span class=\"c1\">-- sanity check</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IndStr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">IndStr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Str</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">s.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Nat</span> <span class=\"k\">else</span> <span class=\"n\">IndStr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- \"4.3.0-nightly-2023-09-28\"</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">  Error : (kernel) arg #2 of 'IndStr.composite' contains a</span>\n<span class=\"cm\">  non valid occurrence of the datatypes being declared</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 394060090,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696058933
    },
    {
        "content": "<p>In case we are suspicious of universe level mangling, the following variation of <code>IndStr</code> also fails with the same message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IndStr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">IndStr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Str</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">s.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">IndStr</span> <span class=\"k\">else</span> <span class=\"n\">IndStr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span>\n</code></pre></div>",
        "id": 394060318,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696059049
    },
    {
        "content": "<p>In the last variant, the type of <code>IndStr.composite</code> always resolves to <code>Str Nat Nat -&gt; IndStr -&gt; IndStr</code>, which should not produce any errors.  But interpolating the <code>ite</code> makes the definition not pass the kernel.  Interesting!</p>",
        "id": 394060564,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696059341
    },
    {
        "content": "<p>Now, in contrast to the previous definition, I define an obviously non-positive inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NegInd</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">NegInd</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">NegInd</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NegInd</span>\n</code></pre></div>\n<p>Now, I get the expected kernel message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">NegInd.composite'</span> <span class=\"n\">has</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">positive</span> <span class=\"n\">occurrence</span>\n<span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 394061192,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696059818
    },
    {
        "content": "<p>Now fully minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- \"4.3.0-nightly-2023-09-28\"</span>\n\n<span class=\"c1\">-- Expected kernel error</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">NegInd</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">NegInd</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NegInd</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">(kernel) arg #1 of 'NegInd.composite' has a</span>\n<span class=\"cm\">non positive occurrence of the datatypes being declared</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"c1\">-- Unexpected kernel error</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">IndStr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">IndStr</span> <span class=\"k\">else</span> <span class=\"n\">IndStr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">(kernel) arg #2 of 'IndStr.composite' contains a</span>\n<span class=\"cm\">non valid occurrence of the datatypes being declared</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 394061407,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696060044
    },
    {
        "content": "<p>that's an expected error</p>",
        "id": 394061412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696060055
    },
    {
        "content": "<p>that type is not even definitionally equal to <code>IndStr</code></p>",
        "id": 394061423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696060070
    },
    {
        "content": "<p>and I think the kernel requires syntactic equality to <code>IndStr</code> in that position</p>",
        "id": 394061472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696060091
    },
    {
        "content": "<p>although I could be wrong</p>",
        "id": 394061474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696060096
    },
    {
        "content": "<p>This error is <em>kind of</em> expected. Lean can't say that <code>if n = 0 then IndStr else IndStr</code> is strictly positive, because it doesn't check branches of matches for strict positivity. Coq does handle this however, but such criterion isn't specified in their docs AFAIK.</p>",
        "id": 394061799,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696060434
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/270676-lean4/topic/kernel.20error.20in.20inductive.20definition/near/394061799\">said</a>:</p>\n<blockquote>\n<p>This error is <em>kind of</em> expected. Lean can't say that <code>if n = 0 then IndStr else IndStr</code> is strictly positive, because it doesn't check branches of matches for strict positivity. Coq does handle this however, but such criterion isn't specified in their docs AFAIK.</p>\n</blockquote>\n<p>So, if I understand correctly: the kernel does not know if the argument occurs positively, but it also does not know that it <em>doesn't</em>; thus it cannot display the non-positivity error, and gives up and simply says it cannot validate the type.  Is this more-or-less correct?</p>",
        "id": 394061994,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696060628
    },
    {
        "content": "<p>no no, the kernel has a specific criteria as to whether some argument type is strictly positive or not, it just turns out its criteria isn't general enough to accept such definition</p>",
        "id": 394062102,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696060746
    },
    {
        "content": "<p>One solution in your case would be to split branches here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Str</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IndStr</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">single</span> <span class=\"o\">:</span> <span class=\"n\">IndStr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">composite0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Str</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s.x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span>\n  <span class=\"bp\">|</span> <span class=\"n\">compositeS</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Str</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">s.x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span> <span class=\"bp\">→</span> <span class=\"n\">IndStr</span>\n</code></pre></div>",
        "id": 394062110,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696060763
    },
    {
        "content": "<p>That's not ideal, and you do lose some definitional equality, but that's probably your best solution here</p>",
        "id": 394062121,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696060784
    },
    {
        "content": "<p>Thank you for the clarification!</p>\n<p>For the record, I do not have any goal in making these weird definitions other than to understand how Lean inductive types work. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 394062342,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696060950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/kernel.20error.20in.20inductive.20definition/near/394061994\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"432410\">Arthur Adjedj</span> <a href=\"#narrow/stream/270676-lean4/topic/kernel.20error.20in.20inductive.20definition/near/394061799\">said</a>:</p>\n<blockquote>\n<p>This error is <em>kind of</em> expected. Lean can't say that <code>if n = 0 then IndStr else IndStr</code> is strictly positive, because it doesn't check branches of matches for strict positivity. Coq does handle this however, but such criterion isn't specified in their docs AFAIK.</p>\n</blockquote>\n<p>So, if I understand correctly: the kernel does not know if the argument occurs positively, but it also does not know that it <em>doesn't</em>; thus it cannot display the non-positivity error, and gives up and simply says it cannot validate the type.  Is this more-or-less correct?</p>\n</blockquote>\n<p>To be more specific than that: the kernel only knows about recursors, not pattern matching, and since your <code>if</code> condition here reduces to something like <code>Decidable.rec (fun _ =&gt; Nat) (fun _ =&gt; DecidableEq)</code>, it'd pretty hard for the kernel to guess that something like this is indeed strictly positive. The situation is much easier for Coq/Agda since their main checkers do know about pattern-matching.</p>",
        "id": 394062364,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696060975
    },
    {
        "content": "<p>well lean of course does know about pattern matching, after all we are talking about the very module that produces the recursors</p>",
        "id": 394064402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696062891
    },
    {
        "content": "<p>Lean's elaborator layer does know about it, sure, but pattern-matching is non-existent in the kernel, isn't it ? That was the point I was trying to make here</p>",
        "id": 394065315,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696063628
    },
    {
        "content": "<p>no, pattern matching exists in the kernel in the form of recursors with a computation rule</p>",
        "id": 394066197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696064300
    },
    {
        "content": "<p>(this is also basically how the elaborator sees pattern matching)</p>",
        "id": 394066211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696064313
    },
    {
        "content": "<p>Sure, I wasn't arguing otherwise, but the fact still stands that recursors are syntaxically functions (with computational rules, but functions nonetheless), whereas pattern-matches are a distinct syntaxical objects in other ITPs, which makes it easier forthem to handle strict-positivity over them.</p>",
        "id": 394066513,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696064541
    },
    {
        "content": "<p>To be clear, I don't think it'd be impossible for Lean's kernel to extend its positivity-checker to handle the \"branches\" of recursors, simply that recursors aren't ideal to deal with for such things.</p>",
        "id": 394066670,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696064667
    },
    {
        "content": "<p>I don't see why it would make any difference at all</p>",
        "id": 394066740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696064752
    },
    {
        "content": "<p>the better question is why such a pass is justified</p>",
        "id": 394066799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696064779
    },
    {
        "content": "<p>to me, it's not just about positivity, it's about knowing the inductive has a certain shape, which is relevant to computing the recursor. If you have arbitrary functions in the constructors, then even setting aside the consistency issues it's not at all clear what the recursor is supposed to look like</p>",
        "id": 394066919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696064884
    },
    {
        "content": "<p>I don't think I've ever encountered a justification as to why branching over matches for strict positivity is \"okay\" in coq, its page discussing its <a href=\"https://coq.inria.fr/refman/language/core/inductive.html#theory-of-inductive-definitions\">Theory of Inductive Types</a> doesn't discuss anything of the sort.</p>",
        "id": 394067279,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696065239
    },
    {
        "content": "<p>Just guessing here, but maybe because it's equivalent to a (dependent) product with positive occurrence of the inductive? I.e. factor the branch into one that returns a sum type, and the body of the branch into a function type depending on that result?</p>",
        "id": 394070726,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1696068219
    }
]