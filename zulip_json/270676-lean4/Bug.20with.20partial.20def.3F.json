[
    {
        "content": "<p>I can't figure out what's going on with <code>test</code> below.  Adding a bunch of <code>Inhabited</code> instances doesn't seem to help (even though <code>test0</code> and <code>test1</code> work fine).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadExcept</span> <span class=\"n\">ε</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- fails to compile</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">loop</span> <span class=\"n\">p</span>\n  <span class=\"n\">loop</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- fine</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test0</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">q</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">loop</span>\n  <span class=\"n\">loop</span>\n\n<span class=\"c1\">-- fine</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">loop</span> <span class=\"n\">p</span>\n  <span class=\"n\">loop</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 353659349,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1682661094
    },
    {
        "content": "<p>Aha! This one works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n      <span class=\"n\">loop</span> <span class=\"n\">p</span>\n  <span class=\"n\">loop</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>I don't see why the <code>let</code> is necessary. (But ultimately, there is no reason to need <code>β</code> to be inhabited at all.)</p>",
        "id": 353664004,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1682661864
    },
    {
        "content": "<p>Finally! Here is a complete workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">Inhabited.mk</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"o\">((),</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">q</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">try</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n    <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Inhabited</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Unit</span>  <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span>\n      <span class=\"n\">loop</span> <span class=\"n\">p</span>\n  <span class=\"n\">loop</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 354501551,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1682793388
    },
    {
        "content": "<p>I just filed a bug report about this: &lt;<a href=\"https://github.com/leanprover/lean4/issues/2204\">https://github.com/leanprover/lean4/issues/2204</a>&gt;</p>",
        "id": 354516029,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1682796193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> The Inhabited instance is definitely necessary. There is no way for Lean to infer that <code>m (Unit x B)</code> is inhabited by itself (as the evidence of its inhabitant comes from evaluating a function argument). I think the second let is necessary because outer local instances are not automatically captured by <code>let rec</code> (which I think is a deliberate design decision).</p>",
        "id": 354699062,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682865548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  That makes sense. The second one is the one that nags me. When I got the error message, the first thing I tried was adding the first let. Since that didn't work, I scratched my head for hours wondering what other instance was needed. It's only by accident that I stumbled upon  adding the same instance twice.</p>",
        "id": 354734884,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1682879695
    }
]