[
    {
        "content": "<p>I understand that lean4 does not have the <code>parameter</code> keyword anymore? Is there any replacement for this to get the same effect?</p>",
        "id": 402780720,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700255550
    },
    {
        "content": "<p>Here is my mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Polynomial.BigOperators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Vars</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Vars</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">n_wit</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n_wit</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"sd\">/-- t is the polynomial divisibility by which is used to verify satisfaction of the SSP -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n_wit</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"n\">Polynomial.X</span> <span class=\"bp\">-</span> <span class=\"n\">Polynomial.C</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Polynomial.eval₂</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial.X</span> <span class=\"n\">Vars.x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Vars</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"c1\">-- can't synthesize</span>\n  <span class=\"c1\">-- This works, but I prefer not to make the variables explicit</span>\n  <span class=\"c1\">-- (Polynomial.eval₂ (MvPolynomial.C) (MvPolynomial.X Vars.x) (t (n_wit := n_wit) (r := r)) : MvPolynomial Vars F)</span>\n</code></pre></div>",
        "id": 402781455,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700255918
    },
    {
        "content": "<p>If there's a main result, you could use a <code>where</code> clause including all the supporting material. Everything in a <code>where</code> clause has full access to the parameters of the main definition/theorem, and it's similar to the Lean 3 <code>parameter</code>. Here's a contrived example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n  <span class=\"n\">lem1</span> <span class=\"mi\">1</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">lem1</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_add_right</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">k</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 402781524,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700255966
    },
    {
        "content": "<p>You can then refer to <code>lem1</code> after the theorem as <code>foo.lem1</code></p>",
        "id": 402781635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700256011
    },
    {
        "content": "<p>There are a number of downsides, one being that the entire theorem gets elaborated each time you change anything.</p>",
        "id": 402781794,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700256111
    },
    {
        "content": "<p>Hmm, is this just the same as a bunch of <code>let</code>s before my definition?</p>",
        "id": 402781934,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700256181
    },
    {
        "content": "<p>That would at least be golfed, I don't know if I like the idea of such a big single definition.</p>",
        "id": 402782069,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700256244
    },
    {
        "content": "<p><code>where</code> is equivalent to <code>let rec</code> rather than <code>let</code>, and it implies defining additional top-level definitions, but without needing to pass in the additional parameters.</p>",
        "id": 402782276,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700256348
    },
    {
        "content": "<p>I can't find a reference to <code>let rec</code> in tpil, is there a reference for how that works somewhere? nvm, it's <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html?highlight=let%20rec#local-recursive-declarations\">here</a></p>",
        "id": 402782472,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700256431
    },
    {
        "content": "<p>(Normally <code>let</code> values can't refer to the value being defined, but <code>let rec</code> allows recursive let definitions. Mutually recursive ones too.)</p>",
        "id": 402782717,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700256562
    },
    {
        "content": "<p>Another feature you could use is defining <code>local notation</code> that feeds the variables to your <code>foo</code></p>",
        "id": 402783000,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700256684
    },
    {
        "content": "<p>(There are plenty examples of this in mathlib, if you want to evaluate it.)</p>",
        "id": 402783125,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700256736
    }
]