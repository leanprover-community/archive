[
    {
        "content": "<p>Is there a way to rewrite the current goal using the <code>mul</code> from the <code>Mul (Pair A B)</code> instance?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Pair</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">OfNat</span> <span class=\"n\">T</span> <span class=\"mi\">1</span> <span class=\"n\">where</span>\n<span class=\"n\">associativity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n<span class=\"n\">identity</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">Pair</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">g1</span><span class=\"o\">,</span> <span class=\"n\">g2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">g1</span> <span class=\"bp\">*</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">g2</span> <span class=\"bp\">*</span> <span class=\"n\">h2</span><span class=\"o\">)⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">Pair</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ma</span><span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mb</span><span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">Pair</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"n\">identity</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">apply</span> <span class=\"n\">And.intro</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">left1</span><span class=\"o\">,</span> <span class=\"n\">right1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"c1\">-- How to form a proof for this?</span>\n  <span class=\"c1\">-- I need to somehow apply Mul.mul</span>\n  <span class=\"c1\">-- rfl doesn't work</span>\n  <span class=\"c1\">-- Would I use ma and mb instances?</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"n\">associativity</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 392838056,
        "sender_full_name": "Ben",
        "timestamp": 1695565196
    },
    {
        "content": "<p>I would add a<code>mul_def</code> theorem immediately after the instance and prove it with <code>rfl</code>, then you can use that to rewrite</p>",
        "id": 392839060,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695566009
    },
    {
        "content": "<p>Awesome, introducing a intermediate theorem (with rfl) and using it in the rw seems to have fixed it</p>",
        "id": 392850678,
        "sender_full_name": "Ben",
        "timestamp": 1695574195
    },
    {
        "content": "<p>Wonder if there is a way to do without it thought</p>",
        "id": 392850727,
        "sender_full_name": "Ben",
        "timestamp": 1695574208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 392850729,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695574210
    },
    {
        "content": "<p>Your <code>ma</code> and <code>mb</code> should probably be instance parameters (i.e. in <code>[ .. ]</code> brackets).<br>\nYou can use <code>  simp [(· * ·), Mul.mul]</code> to unfold the definitions but what Ruben says is definitely the nicer way to do it</p>",
        "id": 392857507,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695580542
    }
]