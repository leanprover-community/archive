[
    {
        "content": "<p>Attributes can see their own syntax: <a href=\"https://github.com/leanprover/lean4/blob/be977579821440a5529dc1c216fab58f854b2db8/src/Lean/Attributes.lean#L50-L51\">https://github.com/leanprover/lean4/blob/be977579821440a5529dc1c216fab58f854b2db8/src/Lean/Attributes.lean#L50-L51</a></p>\n<p>Is there a way for attributes to see the syntax of the declarations that they decorate?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[my_attribute]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">11</span>\n</code></pre></div>\n<p>Like, I want my implementation of <code>my_attribute</code> to have access to the <code>Syntax</code> of <code>def foo := 11</code>.</p>",
        "id": 391064045,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694747344
    },
    {
        "content": "<p>The approach I've landed on is: I'm going to define my own attribute-like thing using slightly different syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">my_pseudoattribute</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">11</span>\n</code></pre></div>\n<p>Then I can do anything I want in the elaboration of <code>my_pseudoattribute</code>, including stashing the syntax of the decl that it adorns.</p>",
        "id": 391158300,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694781168
    },
    {
        "content": "<p>What do you want to do with the syntax? You can easily get access to the elaborated version through meta programming.</p>",
        "id": 391198497,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694791136
    },
    {
        "content": "<p>This is for <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4\">https://github.com/dwrensha/math-puzzles-in-lean4</a><br>\nI want the checked-in code for a problem to contain the full solution code, and I want to be able to extract problem-only versions of the code from that.<br>\nSo I want to replace the bodies of certain definitions with <code>sorry</code>.</p>",
        "id": 391201147,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694791757
    },
    {
        "content": "<p>My pseudoattribute approach looks promising: I'll store source code spans for the code that I want to end up in the extracted file.</p>",
        "id": 391201880,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694791935
    },
    {
        "content": "<p>Note that MIL solves this via text processing and <code>--SOLUTION</code>/<code>--BOTH</code> markers</p>",
        "id": 391202280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694792037
    },
    {
        "content": "<p>Instead of an attribute, I'd probably implement this using a custom tactic and/or term elaborator, which stores the source code spans of it's argument. This way you could even hide only parts of a definition/proof. <br>\n(Not that I know how to do it, I'd just hope I would find out :-))</p>",
        "id": 391202411,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694792065
    },
    {
        "content": "<p>I would imagine that the <a class=\"stream\" data-stream-id=\"187764\" href=\"/#narrow/stream/187764-Lean-for-teaching\">#Lean for teaching</a> stream has other solutions to this problem</p>",
        "id": 391202437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694792072
    },
    {
        "content": "<p>text processing sounds imprecise :)</p>",
        "id": 391202560,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694792110
    },
    {
        "content": "<p>But yes, comments and regexes may be the better solution <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 391202584,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694792113
    },
    {
        "content": "<p>besides, I can't resist the opportunity to abuse Lean's metaprogramming facilities (and to learn more about them in the process)</p>",
        "id": 391202714,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694792153
    },
    {
        "content": "<p>The comments and python processing approach is clearly a hack and I would love to get rid of it in MIL.</p>",
        "id": 391205132,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694792822
    },
    {
        "content": "<p>I got a basic version of my pseudo-attributes to work: <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/86b0f57678c3e1e8790908b1319ec5aea458c739\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/86b0f57678c3e1e8790908b1319ec5aea458c739</a></p>",
        "id": 391252200,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694807754
    },
    {
        "content": "<p>this dashboard is the result: <a href=\"https://dwrensha.github.io/math-puzzles-in-lean4/\">https://dwrensha.github.io/math-puzzles-in-lean4/</a></p>",
        "id": 391252343,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694807785
    },
    {
        "content": "<p>click on a problem name to get an extracted solution-less version of it</p>",
        "id": 391252402,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694807808
    },
    {
        "content": "<p>click on the check or x-mark next to it to go to the source code, possibly containing a full solution</p>",
        "id": 391252469,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694807830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> I would be worried about the fact that <code>#[...]</code> clashes with the <code>#[...]</code> used for <code>Array</code> literals. I would suggest using <code>@@[...]</code> or <code>@[[...]]</code>  instead.</p>",
        "id": 391340597,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694847645
    },
    {
        "content": "<p>Fair point. <code>@@[...]</code> looks good to me, though I am a bit sad about needing one extra keystroke</p>",
        "id": 391367930,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694864507
    },
    {
        "content": "<p>alternative: <code>%[...]</code>, where the <em>p</em>ercent sign stands for <em>p</em>seudo-attribute</p>",
        "id": 391368669,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694864927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> Yeah, I considered <code>%[...[</code>, my concern there is that if Lean, Std, etc. needs and other List/Array style literal in the future it may use <code>%[...]</code> and the pseudo-attribute would then clash with it. Whereas, t is very unlikely add a <code>@@[...]</code> / <code>@[[...]]</code> except for a similar purpose (and attribute variant).</p>",
        "id": 391405051,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694887022
    },
    {
        "content": "<p>I might suggest <code>@%[...]</code>, because <code>%</code> usually connotes something to do with elaboration, and suggests that the <code>@</code>tribute works “on the same level” as elaboration/has access to syntax</p>",
        "id": 391415363,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694894982
    },
    {
        "content": "<p>I'd rather just use <code>@[...]</code> and pass along the syntax</p>",
        "id": 391421102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694899947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That cannot work in general. Attributes may (and are) applied in places where the syntax of the target is unavailable (e.g., <code>attribute [foo] bar</code>).</p>",
        "id": 391422917,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694902056
    },
    {
        "content": "<p>Though, looking into it more, in <span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span>'s case, since the token he is using is the complete attribute (e.g., <code>#[problem_statement]</code>), any of <code>@[]</code>, <code>#[]</code>, <code>%[]</code>, etc. would work without clashing since that token will always take precedence.</p>",
        "id": 391423209,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694902412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/can.20an.20attribute.20access.20the.20Syntax.20of.20a.20decl.3F/near/391422917\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> That cannot work in general. Attributes may (and are) applied in places where the syntax of the target is unavailable (e.g., <code>attribute [foo] bar</code>).</p>\n</blockquote>\n<p>That seems fine, you would just pass the syntax of the command, whatever it is</p>",
        "id": 391425395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694904260
    },
    {
        "content": "<p>You could pass an <code>Option Syntax</code> to make handling those “nonlocal” attribute applications easier on the person writing the attribute (so <code>attribute [foo] bar</code> would pass <code>none</code>, and you could easily throw an error)</p>",
        "id": 391426117,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1694905205
    },
    {
        "content": "<p>I got rid of my <code>#[problem_statement]</code> pseudo-attribute and now instead have declared <code>problem</code> to be a synonym of <code>theorem</code> (similar to how Mathlib does this for <code>lemma</code>): <a href=\"https://github.com/dwrensha/math-puzzles-in-lean4/commit/4115c93f3c03645420bc5dd84fccc160606416b2\">https://github.com/dwrensha/math-puzzles-in-lean4/commit/4115c93f3c03645420bc5dd84fccc160606416b2</a></p>",
        "id": 391499411,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694955844
    },
    {
        "content": "<p>I intend to do something similar with <code>#[solution_data]</code>, but it's less clear what to do with <code>#[problem_setup]</code>, which can adorn any command (e.g. <code>infix</code>, <code>open</code>, ...).</p>",
        "id": 391499587,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694955975
    },
    {
        "content": "<p>is there a way you can use <code>section</code>s?</p>",
        "id": 391554163,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694975756
    },
    {
        "content": "<p>Maybe! That was in fact going to be my next line of investigation.</p>",
        "id": 391556304,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694977270
    },
    {
        "content": "<p>something like <code>problem_setup_section</code> gets included in an extracted problem, while everything else gets excluded by default</p>",
        "id": 391556443,
        "sender_full_name": "David Renshaw",
        "timestamp": 1694977335
    }
]