[
    {
        "content": "<p>How would I go about adding a new instance programmatically, in the style of <code>addDecl</code>? I've searched around a bit but can't find anything.</p>",
        "id": 355065736,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683015097
    },
    {
        "content": "<p>Well, a class instance is nothing more than a normal definition with the <code>instance</code> attribute. The <code>instance</code> notation is just syntactic sugar for <code>@[instance] def</code>. (You should double check the name of the modifier, it might be <code>inst</code> or some variation instead).</p>",
        "id": 355068109,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1683015560
    },
    {
        "content": "<p>So, to add an instance programatically is to add a definition, with this attribute, programatically</p>",
        "id": 355068397,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1683015611
    },
    {
        "content": "<p>Note you might also want to tag it <code>protected</code> (this was the Lean 3 behavior).</p>",
        "id": 355068870,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1683015711
    },
    {
        "content": "<p>So not <code>Lean.Meta.addInstance</code>?</p>",
        "id": 355077963,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683017705
    },
    {
        "content": "<p>So which function concretely would one use? It looks like <code>addDecl</code> doesn't allow me to provide any attributes.</p>",
        "id": 355078525,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683017856
    },
    {
        "content": "<p>it should be <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.addInstance#doc\">docs4#Lean.Meta.addInstance</a></p>",
        "id": 355082301,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1683018695
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/f9da1d8b55ca6989297fb952985b7d8d6c77e14b/src/Lean/Meta/Instances.lean#L190-L195\">https://github.com/leanprover/lean4/blob/f9da1d8b55ca6989297fb952985b7d8d6c77e14b/src/Lean/Meta/Instances.lean#L190-L195</a><br>\nbelow the code you see what the attribute does: it basically just calls <code>addInstance</code> after figuring out the priority</p>",
        "id": 355082963,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1683018802
    },
    {
        "content": "<p>Thanks. I am trying to do this in <code>Elab.Command.CommandElabM</code> but <code>Meta.addInstance</code> is in <code>MetaM</code> monad. How to get from one to the other?</p>",
        "id": 355091735,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683020884
    },
    {
        "content": "<p>Woohoo, it's <code>Lean.Elab.Command.liftTermElabM</code>. This would be no fun with documentation :-)</p>",
        "id": 355092968,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683021187
    },
    {
        "content": "<p>I am surprised that we need to manually invoke <code>Lean.Elab.Command.liftTermElabM</code>. Ought these not automatically lift with <code>do</code> notation?</p>",
        "id": 355102365,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1683023209
    },
    {
        "content": "<p>Maybe there is no automatic lifting so that people have to make a (more) concious choice between liftTermElabM and runTermElabM?</p>",
        "id": 355216340,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1683047649
    },
    {
        "content": "<p>In case it helps, I had to figure out some of these things to make some derive handlers (for <a href=\"https://github.com/leanprover-community/mathlib4/blob/142e5ada9eec719b88f0689b2683cb9f36152b0c/Mathlib/Tactic/DeriveFintype.lean\">Fintype</a>, for <a href=\"https://github.com/leanprover-community/mathlib4/blob/142e5ada9eec719b88f0689b2683cb9f36152b0c/Mathlib/Tactic/DeriveToExpr.lean\">ToExpr</a>).</p>\n<p>In the Fintype derive handler, I added instances by creating a <code>Syntax</code> object and using <code>elabCommand</code> (see <code>mkFintype</code>).</p>\n<p>The ToExpr derive handler uses various helper functions that are useful for adding additional arguments (like, in this case, adding <code>ToExpr</code> instance arguments when your type has parameters). These functions are not very documented, and I had to read the source...</p>\n<p>You can also look at <a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Elab/Deriving\">Lean 4 core's deriving handlers</a> for more examples of creating instances.</p>",
        "id": 355218839,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683048251
    },
    {
        "content": "<p>Re <code>liftTermElabM</code>, my understanding is that there is additional state in the <code>TermElabM</code> (like the metavariable context and the list of pending synthetic metavariables), so it makes sense that you need to explicitly lift.</p>",
        "id": 355220494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683048627
    }
]