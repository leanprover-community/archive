[
    {
        "content": "<p>Is there a way to ask <code>lake</code> to show the dependencies of a file without building that file and everything below it from scratch?</p>",
        "id": 354840644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682937417
    },
    {
        "content": "<p>There is the builtin</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--deps Mathlib/Data/Nat/Basic.lean</span>\n</code></pre></div>\n<p>but this only shows immediate dependencies (I'm also not sure if it builds as everything is already built for me)</p>",
        "id": 354852423,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1682940996
    },
    {
        "content": "<p>Starting from everything already being built is fine for me</p>",
        "id": 354860853,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682943539
    },
    {
        "content": "<p>I only mentioned a clean build because from that you get all the filenames from the progress messages</p>",
        "id": 354860943,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682943558
    },
    {
        "content": "<p>I tried calling <code>lean --deps</code> recursively, but it's prohibitively slow:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">networkx</span> <span class=\"k\">as</span> <span class=\"nn\">nx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tqdm</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">direct_deps</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">):</span>\n  <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'lean'</span><span class=\"p\">,</span> <span class=\"s1\">'--deps'</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"p\">],</span> <span class=\"n\">capture_output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf8'</span><span class=\"p\">)</span>\n  <span class=\"n\">fixed</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ret</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">():</span>\n    <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">'./build/lib/'</span><span class=\"p\">):</span>\n      <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s1\">'./build/lib/'</span><span class=\"p\">)</span>\n      <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'.olean'</span><span class=\"p\">,</span> <span class=\"s1\">'.lean'</span><span class=\"p\">)</span>\n      <span class=\"n\">fixed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">fixed</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">transitive_deps</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">):</span>\n  <span class=\"n\">to_visit</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">fname</span><span class=\"p\">}</span>\n  <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n  <span class=\"k\">with</span> <span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pbar</span><span class=\"p\">:</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n      <span class=\"n\">next_to_visit</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n      <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">to_visit</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">direct_deps</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">):</span>\n          <span class=\"n\">next_to_visit</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"n\">visited</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n      <span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">to_visit</span><span class=\"p\">))</span>\n      <span class=\"n\">next_to_visit</span> <span class=\"o\">-=</span> <span class=\"n\">visited</span>\n      <span class=\"n\">to_visit</span> <span class=\"o\">=</span> <span class=\"n\">next_to_visit</span>\n      <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">to_visit</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n  <span class=\"k\">return</span> <span class=\"n\">visited</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">transitive_deps</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])))</span>\n</code></pre></div>\n</div></div>",
        "id": 354908016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682955303
    },
    {
        "content": "<p>As I understand it lake as a build system is inherently monadic. That is the dependency graph is dynamic to the point where you cannot know it without executing it. So I would say <em>generally</em> speaking it is impossible to figure this out without executing some part of the build system. But it might be possible in the case where the full power of the monadic part is not used?</p>",
        "id": 354908651,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682955460
    },
    {
        "content": "<p>I'm pretty sure it stages that at least somewhat, i.e. you can get the deps without actually building everything</p>",
        "id": 354908944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955535
    },
    {
        "content": "<p>Hmmm, I mean I can for example define a facet that branches on the execution of some IO operation and based on that decides to add something as a dependency or not. How are you going to figure that out?</p>",
        "id": 354909377,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682955640
    },
    {
        "content": "<p>You run the IO operation</p>",
        "id": 354909464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955657
    },
    {
        "content": "<p>I'm very happy to extract the dependency graph from build artifacts</p>",
        "id": 354909536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682955675
    },
    {
        "content": "<p>I'm not saying that it's a pure function (I mean obviously it's not pure since you have to at the very least read some .lean files), but it doesn't require calling lean on all those files</p>",
        "id": 354909655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682955705
    },
    {
        "content": "<p>I just don't want to have to build all of mathlib from scratch. If <code>lake exe cache get</code> downloads what I need to get the data through Lake, then that's fine for me</p>",
        "id": 354909914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682955767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20show.20dependencies/near/354909536\">said</a>:</p>\n<blockquote>\n<p>I'm very happy to extract the dependency graph from build artifacts</p>\n</blockquote>\n<p>If you figure out how to parse the .trace files that sounds doable</p>",
        "id": 354909954,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682955776
    },
    {
        "content": "<p>Surely Lake already has all the information I need internally?</p>",
        "id": 354910037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682955795
    },
    {
        "content": "<p>Yes the deps of a file are stored in the .trace file accompanying it as I understand</p>",
        "id": 354910131,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682955817
    },
    {
        "content": "<p>I just dont know what the trace file means...but in e.g. the doc gen facet there is a lot of \"mixing of traces\" to basically delacre a dependency</p>",
        "id": 354910336,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682955871
    },
    {
        "content": "<p>A trace is a piece of data (generally a hash) which is used to verify whether a given target is up-to-date. If the trace stored with a built target matches the trace computed during build, then a target is considered up-to-date. A target's trace is derived from its various inputs (e.g., source file, Lean toolchain, imports, etc.).</p>\n<p>ah well, almost /o\\</p>",
        "id": 354910573,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682955956
    },
    {
        "content": "<p>It sounds like you're telling me that lake never actually constructs the transitive build graph</p>",
        "id": 354911011,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956084
    },
    {
        "content": "<p>I wouldn't be surprised if it didn't, IIRC it is somewhat expensive</p>",
        "id": 354911142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682956141
    },
    {
        "content": "<p>Although honestly it feels like I could do pretty well on this problem with a regex parser and no lean calls at all</p>",
        "id": 354911328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682956192
    },
    {
        "content": "<p>I think that's what leanproject does, but it's pretty silly that <code>lean --deps</code> is so slow that it's easier to use regex</p>",
        "id": 354911458,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956216
    },
    {
        "content": "<p>it doesn't <em>feel</em> like it should be a computationally expensive task</p>",
        "id": 354911471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682956222
    },
    {
        "content": "<p>I imagine <code>lake env</code> adds some overhead?</p>",
        "id": 354911530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956239
    },
    {
        "content": "<p>I don't think it is that much, and it is a one time cost</p>",
        "id": 354911596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682956254
    },
    {
        "content": "<p>Not in my script above</p>",
        "id": 354911621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956262
    },
    {
        "content": "<p>I guess I should run my entire script through <code>lake env</code>?</p>",
        "id": 354911643,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956270
    },
    {
        "content": "<p>Either way, it only takes 4 minutes on the file I care about, and I only need to run it twice</p>",
        "id": 354911753,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956307
    },
    {
        "content": "<p>Update: the overhead is almost entirely <code>lake env</code></p>",
        "id": 354913289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956755
    },
    {
        "content": "<p>The script goes from 4 minutes to 20s.</p>",
        "id": 354913371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682956781
    },
    {
        "content": "<p>this is why we can't have nice things</p>",
        "id": 354914226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682957004
    },
    {
        "content": "<p>Looking at the code, it is moderately surprising to me (until I give it a bit of thought) that the lean entry point (and what parses the <code>--deps</code> argument) is part of the C++ part. Has anyone tried to write a lean frontend in lean itself?</p>",
        "id": 354915217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682957270
    },
    {
        "content": "<p>it's doing some stuff like loading shared libraries that make sense for <code>leanc</code> but I don't think would be necessary if you just want to run the initial part of the lean module parser</p>",
        "id": 354915377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682957304
    },
    {
        "content": "<p>oh fun, there is a thing that parses <code>#lang lean4</code> at the start of files in here. I don't think that works...</p>",
        "id": 354915958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682957444
    },
    {
        "content": "<p>Works anymore! iirc it was used for the switch between the old and the new language frontend back in the bootstrapping days</p>",
        "id": 354916208,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682957510
    },
    {
        "content": "<p>Here's a demo: Make a new lake project <code>deps</code> with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"usage: deps &lt;FILE&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">path</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">parseHeader</span> <span class=\"n\">inputCtx</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{x.getIdAt 2}\"</span>\n</code></pre></div>\n<p>result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">deps</span> <span class=\"bp\">../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicTopology</span><span class=\"bp\">/</span><span class=\"n\">MooreComplex.lean</span>\n<span class=\"n\">Mathlib.Algebra.Homology.HomologicalComplex</span>\n<span class=\"n\">Mathlib.AlgebraicTopology.SimplicialObject</span>\n<span class=\"n\">Mathlib.CategoryTheory.Abelian.Basic</span>\n\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>   <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">27</span> <span class=\"n\">millis</span>    <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>   <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">79</span> <span class=\"n\">millis</span>  <span class=\"mi\">271</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>   <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">52</span> <span class=\"n\">millis</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">04</span> <span class=\"n\">millis</span>   <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">millis</span>\n</code></pre></div>",
        "id": 354919154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682958287
    },
    {
        "content": "<p>compare:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--deps Mathlib/AlgebraicTopology/MooreComplex.lean</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mario</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-04-11/lib/lean/Init.olean</span>\n<span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Homology</span><span class=\"bp\">/</span><span class=\"n\">HomologicalComplex.olean</span>\n<span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicTopology</span><span class=\"bp\">/</span><span class=\"n\">SimplicialObject.olean</span>\n<span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Abelian</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span>\n\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>  <span class=\"mi\">349</span><span class=\"bp\">.</span><span class=\"mi\">30</span> <span class=\"n\">millis</span>    <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>  <span class=\"mi\">275</span><span class=\"bp\">.</span><span class=\"mi\">22</span> <span class=\"n\">millis</span>  <span class=\"mi\">320</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>  <span class=\"mi\">274</span><span class=\"bp\">.</span><span class=\"mi\">90</span> <span class=\"n\">millis</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>   <span class=\"mi\">76</span><span class=\"bp\">.</span><span class=\"mi\">69</span> <span class=\"n\">millis</span>   <span class=\"mi\">44</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>   <span class=\"mi\">76</span><span class=\"bp\">.</span><span class=\"mi\">65</span> <span class=\"n\">millis</span>\n</code></pre></div>",
        "id": 354919466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682958373
    },
    {
        "content": "<p>This of course isn't doing anything about transitive dependencies, but it shouldn't be too hard to bolt that on similar to the python implementation</p>",
        "id": 354919614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682958424
    },
    {
        "content": "<p>Okay here's a version that does transitive dependencies (within mathlib):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span> <span class=\"o\">::</span> <span class=\"n\">mod</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">args</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"usage: deps &lt;ROOT&gt; &lt;MODULE&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">to_visit</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mod.toName</span><span class=\"o\">]</span>\n  <span class=\"n\">repeat</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">next_to_visit</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">to_visit</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">p.getRoot</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">modToFilePath</span> <span class=\"n\">root</span> <span class=\"n\">p</span> <span class=\"s2\">\"lean\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n        <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">path.toString</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">parseHeader</span> <span class=\"n\">inputCtx</span>\n        <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c.getIdAt</span> <span class=\"mi\">2</span>\n          <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">visited.contains</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n            <span class=\"n\">next_to_visit</span> <span class=\"o\">:=</span> <span class=\"n\">next_to_visit.push</span> <span class=\"n\">c</span>\n        <span class=\"n\">visited</span> <span class=\"o\">:=</span> <span class=\"n\">visited.insert</span> <span class=\"n\">p</span>\n    <span class=\"n\">to_visit</span> <span class=\"o\">:=</span> <span class=\"n\">next_to_visit</span>\n    <span class=\"k\">if</span> <span class=\"n\">to_visit.isEmpty</span> <span class=\"k\">then</span>\n      <span class=\"n\">break</span>\n  <span class=\"n\">for</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">visited</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{x}\"</span>\n</code></pre></div>",
        "id": 354924003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682959619
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">deps</span> <span class=\"bp\">../</span><span class=\"n\">mathlib4</span> <span class=\"n\">Mathlib.AlgebraicTopology.MooreComplex</span>\n\n<span class=\"n\">Mathlib.Algebra.GroupPower.Ring</span>\n<span class=\"n\">Mathlib.Data.Sigma.Basic</span>\n<span class=\"n\">Mathlib.CategoryTheory.Limits.Preserves.Limits</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">Mathlib.Data.Rat.Defs</span>\n<span class=\"n\">Mathlib.Data.Fintype.Powerset</span>\n<span class=\"n\">Mathlib.CategoryTheory.Preadditive.Basic</span>\n<span class=\"n\">Mathlib.Init.Propext</span>\n<span class=\"n\">Mathlib.CategoryTheory.Limits.Shapes.RegularMono</span>\n<span class=\"n\">Mathlib.Data.List.NodupEquivFin</span>\n<span class=\"n\">Mathlib.Tactic.SimpRw</span>\n<span class=\"n\">Mathlib.Data.Set.NAry</span>\n<span class=\"n\">Mathlib.Init.Algebra.Classes</span>\n<span class=\"n\">Mathlib.Tactic.SplitIfs</span>\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>  <span class=\"mi\">423</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">millis</span>    <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>  <span class=\"mi\">391</span><span class=\"bp\">.</span><span class=\"mi\">22</span> <span class=\"n\">millis</span>  <span class=\"mi\">640</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>  <span class=\"mi\">390</span><span class=\"bp\">.</span><span class=\"mi\">58</span> <span class=\"n\">millis</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>   <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">88</span> <span class=\"n\">millis</span>    <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>   <span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">88</span> <span class=\"n\">millis</span>\n</code></pre></div>",
        "id": 354924309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682959683
    },
    {
        "content": "<p>it's 1.48s to do the transitive closure of <code>Mathlib</code></p>",
        "id": 354924594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682959754
    },
    {
        "content": "<p>Does this print them in the order they populate the environment?</p>",
        "id": 354929916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682961136
    },
    {
        "content": "<p>no, they are I think sorted by <code>Name.quickLt</code></p>",
        "id": 354930068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682961183
    },
    {
        "content": "<p>which is basically random</p>",
        "id": 354930098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682961192
    },
    {
        "content": "<p>if you use <code>RBTree Name Name.cmp</code> instead of <code>NameSet</code> for the type of <code>visited</code> they come out in alphabetical order</p>",
        "id": 354930354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682961256
    },
    {
        "content": "<p>uh... not alphabetical order, looks like length then alphabetical order by component</p>",
        "id": 354930642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682961326
    },
    {
        "content": "<p>meh, just pipe it through <code>sort</code></p>",
        "id": 354930715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682961347
    },
    {
        "content": "<p>Hm, it looks like there were some bugs in the DFS code I borrowed from the python script which were causing it to revisit files multiple times. This version prints the files out in preorder (postorder is a bit more difficult with this work list implementation), if you care about maintaining a topological sort, and it takes only half the time, 574ms for <code>Mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span> <span class=\"o\">::</span> <span class=\"n\">mod</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">args</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"usage: deps &lt;ROOT&gt; &lt;MODULE&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">toVisit</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mod.toName</span><span class=\"o\">]</span>\n  <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"n\">toVisit.isEmpty</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">nextToVisit</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">toVisit</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">visited.contains</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">modToFilePath</span> <span class=\"n\">root</span> <span class=\"n\">p</span> <span class=\"s2\">\"lean\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">path</span>\n        <span class=\"k\">let</span> <span class=\"n\">inputCtx</span> <span class=\"o\">:=</span> <span class=\"n\">mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">path.toString</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">parseHeader</span> <span class=\"n\">inputCtx</span>\n        <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">getArgs</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c.getIdAt</span> <span class=\"mi\">2</span>\n          <span class=\"k\">if</span> <span class=\"n\">c.getRoot</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span> <span class=\"k\">then</span>\n            <span class=\"n\">nextToVisit</span> <span class=\"o\">:=</span> <span class=\"n\">nextToVisit.push</span> <span class=\"n\">c</span>\n        <span class=\"n\">visited</span> <span class=\"o\">:=</span> <span class=\"n\">visited.insert</span> <span class=\"n\">p</span>\n        <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">out</span> <span class=\"bp\">++</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{p}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"n\">toVisit</span> <span class=\"o\">:=</span> <span class=\"n\">nextToVisit</span>\n  <span class=\"n\">IO.print</span> <span class=\"n\">out</span>\n</code></pre></div>",
        "id": 354934568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682962317
    },
    {
        "content": "<p>Does this belong in lake itself as a helper? Or would it go in Std like cache did?</p>",
        "id": 354935959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682962705
    },
    {
        "content": "<p>I think it could just go in whatever script is using it. A lot of the speed boosts it is getting come from it hardcoding various properties of the use case and not being as robust as lake</p>",
        "id": 354936668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682962923
    },
    {
        "content": "<p>I mean, it's basically the same length as your original python script</p>",
        "id": 354936791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682962959
    },
    {
        "content": "<p>We could add some parts of this to std and/or lake to make the script even shorter, but it would have to get quite a bit more complex and probably slower if it was upstreamed wholesale</p>",
        "id": 354937244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682963097
    },
    {
        "content": "<p>There is also another version of this program that could be written, which reads the .olean files instead of the .lean files. This is likely even faster, since <del>the oleans actually contain transitive dependencies</del> (they don't, but they do contain the parsed imports)</p>",
        "id": 354937730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682963248
    },
    {
        "content": "<p>this is a bit closer to what lean itself does</p>",
        "id": 354937877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682963288
    },
    {
        "content": "<p>Actually I'm not sure if it would be faster, 500ms is hard to beat and I think even just loading the oleans for mathlib already takes that long (maybe it is also paying for initialization though)</p>",
        "id": 354938016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682963340
    },
    {
        "content": "<p>wowza, 88ms for <code>Mathlib</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span> <span class=\"o\">::</span> <span class=\"n\">mod</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">args</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">userError</span> <span class=\"s2\">\"usage: deps &lt;ROOT&gt; &lt;MODULE&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">visited</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">toVisit</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">mod.toName</span><span class=\"o\">]</span>\n  <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"n\">toVisit.isEmpty</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">nextToVisit</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"n\">for</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">toVisit</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">visited.contains</span> <span class=\"n\">p</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:=</span> <span class=\"n\">modToFilePath</span> <span class=\"n\">root</span> <span class=\"n\">p</span> <span class=\"s2\">\"olean\"</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mod</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">readModuleData</span> <span class=\"n\">path</span>\n        <span class=\"n\">nextToVisit</span> <span class=\"o\">:=</span> <span class=\"n\">mod.imports.foldr</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">nextToVisit</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"n\">nextToVisit</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">i.module</span>\n          <span class=\"k\">if</span> <span class=\"n\">c.getRoot</span> <span class=\"bp\">==</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib</span> <span class=\"k\">then</span> <span class=\"n\">nextToVisit.push</span> <span class=\"n\">c</span>\n          <span class=\"k\">else</span> <span class=\"n\">nextToVisit</span>\n        <span class=\"n\">visited</span> <span class=\"o\">:=</span> <span class=\"n\">visited.insert</span> <span class=\"n\">p</span>\n        <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">out.push</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{p}\"</span>\n    <span class=\"n\">toVisit</span> <span class=\"o\">:=</span> <span class=\"n\">nextToVisit</span>\n  <span class=\"n\">out.forRevM</span> <span class=\"n\">IO.println</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">deps</span> <span class=\"bp\">../</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span> <span class=\"n\">Mathlib</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">Mathlib.Util.AssertNoSorry</span>\n<span class=\"n\">Mathlib.Util.AtomM</span>\n<span class=\"n\">Mathlib.Util.Export</span>\n<span class=\"n\">Mathlib.Util.IncludeStr</span>\n<span class=\"n\">Mathlib.Util.LongNames</span>\n<span class=\"n\">Mathlib.Util.MemoFix</span>\n<span class=\"n\">Mathlib.Util.Syntax</span>\n<span class=\"n\">Mathlib.Util.SynthesizeUsing</span>\n<span class=\"n\">Mathlib.Util.Tactic</span>\n<span class=\"n\">Mathlib.Util.Time</span>\n<span class=\"n\">Mathlib.Util.WhatsNew</span>\n<span class=\"n\">Mathlib.Util.WithWeakNamespace</span>\n<span class=\"n\">Mathlib</span>\n\n<span class=\"n\">________________________________________________________</span>\n<span class=\"n\">Executed</span> <span class=\"k\">in</span>   <span class=\"mi\">88</span><span class=\"bp\">.</span><span class=\"mi\">77</span> <span class=\"n\">millis</span>    <span class=\"n\">fish</span>           <span class=\"n\">external</span>\n   <span class=\"n\">usr</span> <span class=\"n\">time</span>   <span class=\"mi\">40</span><span class=\"bp\">.</span><span class=\"mi\">51</span> <span class=\"n\">millis</span>  <span class=\"mi\">781</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>   <span class=\"mi\">39</span><span class=\"bp\">.</span><span class=\"mi\">73</span> <span class=\"n\">millis</span>\n   <span class=\"n\">sys</span> <span class=\"n\">time</span>   <span class=\"mi\">47</span><span class=\"bp\">.</span><span class=\"mi\">85</span> <span class=\"n\">millis</span>  <span class=\"mi\">175</span><span class=\"bp\">.</span><span class=\"mi\">00</span> <span class=\"n\">micros</span>   <span class=\"mi\">47</span><span class=\"bp\">.</span><span class=\"mi\">67</span> <span class=\"n\">millis</span>\n</code></pre></div>",
        "id": 354939823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682963842
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20show.20dependencies/near/354911142\">said</a>:</p>\n<blockquote>\n<p>I wouldn't be surprised if it didn't, IIRC it is somewhat expensive</p>\n</blockquote>\n<p>Lake does compute dependencies and it does it in a few different ways. The direct dependencies are available in the <code>deps</code> facet and the transitive dependencies in <code>transDeps</code>. However, using them requires a script; they are not available from the CLI (yet).</p>",
        "id": 356519065,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683477040
    }
]