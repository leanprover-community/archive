[
    {
        "content": "<p>I am working on attempting a Trepplein port (currently reading and documenting the code). For handling the additional Lean 4 export (as described and implemented in <a href=\"https://github.com/leanprover/lean4export\">https://github.com/leanprover/lean4export</a>), it appears to me that I need to add:</p>\n<ul>\n<li>an expression type for projections, and parsing to this.</li>\n<li><strong>reduction rules</strong> for this.</li>\n</ul>\n<p>My guess is that the following is what has to be added. Could <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  or some other expert clarify?</p>\n<ul>\n<li>We have a new type of expressions with two parameters - a name (of a structure) and an index.</li>\n<li>A structure is an inductive type with <em>no indices</em> and a single introduction rule.</li>\n<li>The reduction rule generalizes reducing <code>(Prod.mk x y).2</code> to <code>y</code>, i.e., we have one reduction rule for each structure.</li>\n<li>The automatically generated functions like <code>Prod.fst</code> are not part of the foundations, but are defined using recursion and exported as declarations.</li>\n</ul>\n<p>Also <a href=\"https://github.com/leanprover/lean4export\">https://github.com/leanprover/lean4export</a> is on an old version of lean.</p>",
        "id": 395250522,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696595686
    },
    {
        "content": "<p>Incidentally,  the <a href=\"http://code\">https://github.com/siddhartha-gadgil/trepplein4</a>  and <a href=\"http://api%20documentation\">https://siddhartha-gadgil.github.io/trepplein4/trepplein/index.html</a> are online</p>",
        "id": 395253291,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696596629
    },
    {
        "content": "<p>Do you know about the corresponding section in my thesis?</p>",
        "id": 395253462,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696596695
    },
    {
        "content": "<p>No. Can you link to the thesis and the section? I will read it.</p>",
        "id": 395253554,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696596723
    },
    {
        "content": "<p>My google searching (earlier) had led to various masters theses instead.</p>",
        "id": 395254069,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696596892
    },
    {
        "content": "<p><a href=\"https://lean-lang.org/papers/thesis-sebastian.pdf#subsection.3.2.1\">https://lean-lang.org/papers/thesis-sebastian.pdf#subsection.3.2.1</a></p>",
        "id": 395254254,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696596958
    },
    {
        "content": "<p>One thing I had missed is that <code>inferType</code> also has to be implemented for projections (following the section of the thesis). </p>\n<p>It looks as though for the next section we need further reduction rules.I am guessing that we should reduce, for example <code>Prod.mk x.1 x.2</code> to <code>x</code>. Does that look correct?</p>\n<p>More details and mistakes will emerge once I am running and testing stuff. But this is enough for me to work with the next few days.</p>",
        "id": 395257060,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696597854
    },
    {
        "content": "<p>A related question/clarification: it seems to me that to infer types etc. of the projection map, the kernel environment should have structure information. In trepplein (for Lean 3) there were only declarations and deduction rules.</p>\n<p>Is that correct? If so, should this be added for inductive types if they are structures?<br>\nFinally: am I correct that while a structure can have <em>parameters</em>, it cannot have <em>indices</em>?</p>",
        "id": 395360786,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696647075
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 395361184,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696647359
    },
    {
        "content": "<p>I missed the fact that the export format also has the record type, so this should be part of the expression. Decomposing that as Pis should be enough to infer type.</p>",
        "id": 395362566,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696648186
    },
    {
        "content": "<p>If someone can take a look, either I am misunderstanding something or there is a small error in trepplein at <a href=\"https://github.com/siddhartha-gadgil/trepplein4/blob/c3befdf00821d209d5d8b790be82259c55c31114/src/main/scala/trepplein/typechecker.scala#L258\">https://github.com/siddhartha-gadgil/trepplein4/blob/c3befdf00821d209d5d8b790be82259c55c31114/src/main/scala/trepplein/typechecker.scala#L258</a> (this is code I have not modified).</p>\n<p>It seems to me that for an expression like <code>f a b : P a b</code>, only <code>b</code> is instantiated and the result will have a de Bruin indexed variable in place of <code>a</code>. This is because instantiation is called only once if everything is already in normal form.</p>\n<p>I will work on making testing such things easier.</p>",
        "id": 395398778,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696672980
    }
]