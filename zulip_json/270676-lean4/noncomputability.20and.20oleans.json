[
    {
        "content": "<p>Intrigued by <a href=\"https://github.com/leanprover-community/mathlib4/pull/7265\">#7265</a> I asked Eric W which file in mathlib caused the current <code>maxrss</code>. He said that speedcenter doesn't store this information but suggested instead to look at olean sizes. Right now the largest olean in mathlib master is  <code>LinearAlgebra/TensorProduct/Tower.olean</code>, which is 16 megs. I added the word <code>noncomputable</code> to this definition on line 420:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">tensorTensorTensorComm</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">assoc</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">≪≫ₗ</span> <span class=\"n\">congr</span> <span class=\"o\">(</span><span class=\"n\">rightComm</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"n\">P</span> <span class=\"n\">N</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"bp\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"bp\">≪≫ₗ</span> <span class=\"n\">assoc</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"n\">N</span> <span class=\"n\">Q</span>\n</code></pre></div>\n<p>and recompiled, and the olean was now 11 megs (5 megs smaller). The def on master takes about 9 seconds to compile on my (fast) machine and with <code>noncomputable</code> it drops to under 1 second. I then added <code>noncomputable</code> to all the 14 or so definitions in the file, and recompiled, and the olean went down to 2.4 megs :-)</p>\n<p>I think it's a terrible idea to go through mathlib and add <code>noncomputable</code> everywhere but boy will it decrease the size of the oleans. Is this expected behaviour or worth diagnosing further? Is it worth minimising or is the problem already clear to those who understand what's going on?</p>",
        "id": 392157323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695228500
    },
    {
        "content": "<p>Was there a proposal at some point to separate the \"proof\" oleans from the \"compilation\" oleans?</p>",
        "id": 392157408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695228543
    },
    {
        "content": "<p>Making all <code>def</code>s and <code>instance</code>s irreducible in <code>LinearAlgebra.TensorProduct</code> decreases olean size from 13 megs to 3.5. These are the two largest olean files in the cache if I got it right. I'm guessing that compilation speed also goes down.</p>",
        "id": 392159088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695229151
    },
    {
        "content": "<p>Benchmarking at <a href=\"https://github.com/leanprover-community/mathlib4/pull/7281\">#7281</a> but if <a href=\"https://github.com/leanprover-community/mathlib4/pull/7265\">#7265</a> is anything to go by the results should be fun. Not that I think this is a good PR at all! We should get to the root of the problem really.</p>",
        "id": 392160784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695229771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"https://github.com/leanprover-community/mathlib4/pull/7281\">#7281</a> doesn't build</p>",
        "id": 392161251,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695229957
    },
    {
        "content": "<p>EDIT: this red herring was user error.</p>\n<p>What the heck does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `docBlame` linter reports:</span>\n<span class=\"cm\">DEFINITIONS ARE MISSING DOCUMENTATION STRINGS: -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">TensorProduct.</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">⊗</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">TensorProduct.</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">TensorProduct.addMonoid</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">TensorProduct.</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">⊗ₜ</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">TensorProduct.</span><span class=\"bp\">«</span><span class=\"n\">term_</span><span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">]</span><span class=\"n\">_</span><span class=\"bp\">»</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">TensorProduct.CompatibleSMul.smul_tmul</span> <span class=\"c\">/-</span><span class=\"cm\"> definition missing documentation string -/</span>\n</code></pre></div>\n<p>mean and why does it start happening if I just start throwing <code>noncomputable</code> around the place?</p>",
        "id": 392161308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695229988
    },
    {
        "content": "<p>Searching for <code>term_⊗_</code> gives no results in the file.</p>",
        "id": 392161445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695230039
    },
    {
        "content": "<p>That's notation.</p>",
        "id": 392161545,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695230057
    },
    {
        "content": "<p>It looks like it's complaining that the notation doesn't have a docstring or <code>@[inherit_doc]</code>.</p>",
        "id": 392161609,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695230080
    },
    {
        "content": "<p>And why is this suddenly my problem?</p>",
        "id": 392161669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695230102
    },
    {
        "content": "<p>Those are pretty printers defined by notation commands, the ones with \"term\"</p>",
        "id": 392161711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695230119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392161669\">said</a>:</p>\n<blockquote>\n<p>And why is this suddenly my problem?</p>\n</blockquote>\n<p>Because CI discards any messages that are in the nolints.json, but <code>#lint</code> does not</p>",
        "id": 392162772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695230541
    },
    {
        "content": "<p>Oh, this was in CI!</p>",
        "id": 392162891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695230595
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6251853169/job/16973852869?pr=7281\">https://github.com/leanprover-community/mathlib4/actions/runs/6251853169/job/16973852869?pr=7281</a></p>",
        "id": 392162972,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695230627
    },
    {
        "content": "<p>Did the name change? I guess not</p>",
        "id": 392162977,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695230629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392162891\">said</a>:</p>\n<blockquote>\n<p>Oh, this was in CI!</p>\n</blockquote>\n<p>is it? There is a <code>#lint</code> at the bottom of the file</p>",
        "id": 392163431,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695230817
    },
    {
        "content": "<p>Ah, well there's the explanation then!</p>",
        "id": 392163533,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695230861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> you had a stray <code>#lint</code> that was committed and pushed. I think you have since removed it, so the docstrings <code>foobar</code> are no longer necessary. But the PR still doesn't build because you need to mark downstream definitions as noncomputable.</p>",
        "id": 392167454,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695232347
    },
    {
        "content": "<p>I think probably using the speedcenter is not the way to go here. I think instead you can just profile the file for maxrss before and after your changes.</p>",
        "id": 392167556,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695232387
    },
    {
        "content": "<p>In case it makes testing this sort of thing easier here is a basic implemenation of <code>noncomputable theory</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"noncomputable theory\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)))</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 392167946,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695232563
    },
    {
        "content": "<p>Doesn't <code>noncomputable section</code> already exist?</p>",
        "id": 392171310,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695233944
    },
    {
        "content": "<p>When I tested it it didn't seem to do anything <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 392171791,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695234131
    },
    {
        "content": "<p>to be clear I did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span> <span class=\"n\">aa</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">aa</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 392172001,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695234241
    },
    {
        "content": "<p>I've had to make a bunch more definitions noncomputable in 29 files but I think I'm almost there now</p>",
        "id": 392172244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695234345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392171791\">said</a>:</p>\n<blockquote>\n<p>When I tested it it didn't seem to do anything <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>maybe the difference is that noncomputable section allows defs to be noncomputable, but what I wrote forces them to be noncomputable if that makes sense?</p>",
        "id": 392172664,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695234512
    },
    {
        "content": "<p>Note that's also what<code>noncomputable theory</code> meant</p>",
        "id": 392174238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695235145
    },
    {
        "content": "<p>You mean the former right? <code>noncomputable</code> instead of <code>noncomputable!</code>. In that case yes its probably a misnomer, I just wanted an easy way to make a whole file actually noncomputable</p>",
        "id": 392174489,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695235249
    },
    {
        "content": "<p>How hard is it to make a <code>too_slow_to_compute</code> keyword that means the same thing as <code>noncomputable</code> but has a docstring that explains this performance issue?</p>",
        "id": 392174589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695235302
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/f923c955-6f71-4f1e-8cd4-142ba0fd1e48/to/78372017-b26e-4b9c-aadb-2b620036b07f\">The results are in</a>. This compares my PR against master from about 3 commits ago. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">Benchmark</span>                                                       <span class=\"n\">Metric</span>                 <span class=\"n\">Change</span>\n  <span class=\"bp\">=============================================================================================</span>\n<span class=\"bp\">+</span> <span class=\"n\">build</span>                                                           <span class=\"bp\">.</span><span class=\"n\">olean</span> <span class=\"n\">serialization</span>   <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"n\">build</span>                                                           <span class=\"n\">compilation</span>            <span class=\"bp\">-</span><span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Monoidal.Basic</span>              <span class=\"n\">instructions</span>            <span class=\"bp\">-</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Category.ModuleCat.Monoidal.Closed</span>             <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Category.Ring.Constructions</span>                    <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Lie.BaseChange</span>                                 <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">87</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Lie.TensorProduct</span>                              <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">23</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.Algebra.Lie.Weights</span>                                    <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">80</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.BilinearForm.TensorProduct</span>               <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">85</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.Contraction</span>                              <span class=\"n\">instructions</span>            <span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.DirectSum.Finsupp</span>                        <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">76</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.DirectSum.TensorProduct</span>                  <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">82</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.Multilinear.TensorProduct</span>                <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.QuadraticForm.TensorProduct.Isometries</span>   <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">20</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorAlgebra.ToTensorPower</span>              <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">31</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorPower</span>                              <span class=\"n\">instructions</span>            <span class=\"bp\">-</span><span class=\"mi\">8</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProduct</span>                            <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">35</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Opposite</span>                   <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Prod</span>                       <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProduct.Tower</span>                      <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.LinearAlgebra.TensorProductBasis</span>                       <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">7</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RepresentationTheory.Rep</span>                               <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.Kaehler</span>                                     <span class=\"n\">instructions</span>            <span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.PolynomialAlgebra</span>                           <span class=\"n\">instructions</span>            <span class=\"bp\">-</span><span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"bp\">%</span>\n<span class=\"bp\">+</span> <span class=\"bp\">~</span><span class=\"n\">Mathlib.RingTheory.TensorProduct</span>                               <span class=\"n\">instructions</span>           <span class=\"bp\">-</span><span class=\"mi\">13</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>So how do we proceed? Some of the oleans on this branch are much smaller; is it possible to analyse the difference? Compilation -25% -- did this change make mathlib 25% faster? Is it worth trying to minimise something (this will be some work, as usual, and I'm unlikely to get to it until the weekend because term is looming but I could certainly give it a go).</p>",
        "id": 392201564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695241339
    },
    {
        "content": "<p>The results say that oleans shrinked by 3%, mathlib3 got faster (wall-clock) by 2%</p>",
        "id": 392202710,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695241881
    },
    {
        "content": "<p>No that is 25% against the previous time it took to compile, if you go to the speed center view: <a href=\"http://speed.lean-fro.org/mathlib4/compare/f923c955-6f71-4f1e-8cd4-142ba0fd1e48/to/78372017-b26e-4b9c-aadb-2b620036b07f\">http://speed.lean-fro.org/mathlib4/compare/f923c955-6f71-4f1e-8cd4-142ba0fd1e48/to/78372017-b26e-4b9c-aadb-2b620036b07f</a> you can see the absolute values in seconds. </p>\n<p>I'm also very positively surprised by the fact that this has seemingly had no significant effect on the run time of the new compiler so it seems this slowness is to be attributed to the old one.</p>",
        "id": 392203017,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695242040
    },
    {
        "content": "<p>Lint got faster by 2%? It looks like build wall clock is a little under 1%. Total CPU instructions are down a healthy 1.6%.</p>",
        "id": 392204882,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695242921
    },
    {
        "content": "<blockquote>\n<p>I'm also very positively surprised by the fact that this has seemingly had no significant effect on the run time of the new compiler so it seems this slowness is to be attributed to the old one.</p>\n</blockquote>\n<p>So the fix is \"wait for the new compiler\"?</p>",
        "id": 392208909,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695244862
    },
    {
        "content": "<p>In a sense, but the new compiler is still in a semi frozen state so I think if you can get better perf like this this can be a reasonable workaround until it finally happens</p>",
        "id": 392209133,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695244979
    },
    {
        "content": "<p>But is another conclusion \"there's no point trying to debug this any more because it will probably be fixed by the new compiler\"? So basically mathlib is going to end up littered with unnecessary <code>noncomputable</code>s? In particular should this PR actually be merged, and then reverted at some unspecified time in the future?</p>",
        "id": 392209693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695245236
    },
    {
        "content": "<p>I am not sure they are unnecessary. Arguably we should be using <code>noncomputable</code> a lot more aggressively, e.g. put it on everything that doesn't break the build or on request</p>",
        "id": 392209914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245337
    },
    {
        "content": "<p>I would love it if we could find a heuristic that tracks closer to that so that we don't need to annotate everything, but I don't think one is forthcoming</p>",
        "id": 392210027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245391
    },
    {
        "content": "<p>we should be using <code>noncomputable</code> more aggressively -- on the basis that due to what may well be a bug, making a 4 line definition not noncomputable adds 5 megabytes to an olean?</p>",
        "id": 392210118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695245415
    },
    {
        "content": "<p>we should be using it more aggressively because the compiler is doing pointless work on 90% of mathlib</p>",
        "id": 392210164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245438
    },
    {
        "content": "<p>and bloating oleans and taking compile time while it is at it</p>",
        "id": 392210220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245470
    },
    {
        "content": "<p>And this is because of a bug in the compiler or because this work needs to be done?</p>",
        "id": 392210226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695245474
    },
    {
        "content": "<p>this is because it doesn't know that the work doesn't need to be done</p>",
        "id": 392210261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245489
    },
    {
        "content": "<p>there is no way it could know</p>",
        "id": 392210272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245494
    },
    {
        "content": "<p>it's not a bug in the compiler, everything is working as designed</p>",
        "id": 392210336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245522
    },
    {
        "content": "<p>right, but should that work really add up to 5 megabytes for <code>tensorTensorTensorcomm</code> above?</p>",
        "id": 392210384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695245532
    },
    {
        "content": "<p>but mathlib is not composed of things that would be valuable in an executable and we ought to be telling lean this</p>",
        "id": 392210426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245559
    },
    {
        "content": "<p>in fact, it might fix that \"too many exported symbols\" issue on windows</p>",
        "id": 392210449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245578
    },
    {
        "content": "<p><code>noncomputable</code> is one way to help keep mathlib's carbon footprint lower</p>",
        "id": 392210455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695245579
    },
    {
        "content": "<p>I have a lot of respect for Eric and I can imagine him saying that this is a big step in the wrong direction, but of course I don't care at all</p>",
        "id": 392210503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695245614
    },
    {
        "content": "<p>If the default was <code>noncomputable</code> I wouldn't be too concerned about mathlib PRs that make a handful of things computable so that some <code>#eval</code> works</p>",
        "id": 392210673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392210384\">said</a>:</p>\n<blockquote>\n<p>right, but should that work really add up to 5 megabytes for <code>tensorTensorTensorcomm</code> above?</p>\n</blockquote>\n<p>This is probably a bug or some runaway work. But mathlib has some massive types and I wouldn't be surprised if this is giving the compiler a hard time just like it does everything else</p>",
        "id": 392210889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695245809
    },
    {
        "content": "<p>It's <a href=\"https://gist.github.com/kbuzzard/4e12434acc12a4ee339f5074f7537958\">only 1100 lines</a> with pp.all on. Is that too big?</p>",
        "id": 392212980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695247101
    },
    {
        "content": "<p>I would say its significant :P</p>",
        "id": 392213021,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695247129
    },
    {
        "content": "<p>worth emphasizing mario's point that the less human intensive way to do this would be to separate build oleans from compile oleans so that we can instruct lake/lean to not compile a file unless it's needed to build other files</p>",
        "id": 392214832,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695248154
    },
    {
        "content": "<p>No this is not something that lake has control over</p>",
        "id": 392214905,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695248180
    },
    {
        "content": "<p>When a you declare a definition the code generator is already doing 99% of the work such that you can run <code>#eval</code> on it. The thing that lake does when compiling a file is \"just\" turning the already fully optimized IR into C code and calling a C compiler which as from the benchmarks above is something that takes much less time than the compilation up to that point</p>",
        "id": 392214964,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695248237
    },
    {
        "content": "<p>(that said I did propose before that we do this on demand in some thread and there is some discussion regarding this there as well)</p>",
        "id": 392215085,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695248306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392210503\">said</a>:</p>\n<blockquote>\n<p>I have a lot of respect for Eric and I can imagine him saying that this is a big step in the wrong direction, but of course I don't care at all</p>\n</blockquote>\n<p>I think it's justifiable given the potential performance/resource cost, but if this is going to spread throughout mathlib I think the name of <code>noncomputable</code> might start being a bad description of what's going on</p>",
        "id": 392218675,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695250668
    },
    {
        "content": "<p>\"this can't be computed\" is a much stronger claim than \"this isn't sent to the compiler\", and the current name implies the former</p>",
        "id": 392218816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695250745
    },
    {
        "content": "<p>I guess changing the docstring of the keyword (if it has one?) would be a less dialect-forming choice</p>",
        "id": 392218999,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695250862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392212980\">said</a>:</p>\n<blockquote>\n<p>It's <a href=\"https://gist.github.com/kbuzzard/4e12434acc12a4ee339f5074f7537958\">only 1100 lines</a> with pp.all on. Is that too big?</p>\n</blockquote>\n<p>Adding non-unital actions surely won't make this problem worse...</p>",
        "id": 392219160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695250930
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> is making (?) compilation <a href=\"http://speed.lean-fro.org/mathlib4/compare/17111f65-044f-42f6-8b88-a9c44a8039f8/to/1275d3de-97e6-4f02-95e6-1f380bf3f946\">worse</a> on <code>OperatorNorm</code> so <a href=\"https://github.com/leanprover-community/mathlib4/pull/7299\">#7299</a></p>",
        "id": 392338951,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695308181
    },
    {
        "content": "<p>I'd really rather make whole files noncomputable, as there is no chance that anything around there will be executed any time. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> , you may have objections about that, so what do you think?</p>",
        "id": 392342233,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695309113
    },
    {
        "content": "<p>the trouble is that mathlib does have definitions which should be computable, even when it's pure noncomputable maths, in particular notations and other internal auxiliaries</p>",
        "id": 392342474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695309185
    },
    {
        "content": "<p>But notations and internals wouldn't be affected by a trick like <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392167946\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392167946</a>, right?</p>",
        "id": 392342749,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695309246
    },
    {
        "content": "<p>I'd be ok with Alex's trick as long as we make it clear that it's a hack for a compiler performance issue and not a statement of genuinely noncomputable concepts in the file</p>",
        "id": 392342928,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695309286
    },
    {
        "content": "<p>(that is, call it something different to <code>noncomputable theory</code>)</p>",
        "id": 392342981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695309298
    },
    {
        "content": "<p>(with a better name like \"nonexecutable theory\")</p>",
        "id": 392343016,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695309305
    },
    {
        "content": "<p>If anything that's better than sprinkling <code>noncomputable</code> everywhere because it means we can just stick a docstring on the notation and not repeat it everywhere</p>",
        "id": 392343086,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695309321
    },
    {
        "content": "<p><code>suppress_compilation</code>?</p>",
        "id": 392343220,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695309355
    },
    {
        "content": "<p>Another advantage is that it is much easier to disable (globally or in a specific file) if we want to test if the issue has been solved upstream.</p>",
        "id": 392343387,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695309390
    },
    {
        "content": "<p>Yes, ergonomically that approach is better</p>",
        "id": 392343434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695309408
    },
    {
        "content": "<p>If on master I open the file <code>Mathlib/Analysis/NormedSpace/OperatorNorm.lean</code> and I replace at the top the line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable theory</span>\n</code></pre></div>\n<p>with Alex's trick, i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">$$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)))</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)))</span>\n\n<span class=\"n\">suppress_compilation</span>\n</code></pre></div>\n<p>then I get failures down the file, where Lean complains about a missing <code>noncomputable</code> modifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The operator norm of a continuous linear map is the inf of all its bounds. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">opNorm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>gives the error </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"kd\">definition</span><span class=\"o\">,</span> <span class=\"n\">consider</span> <span class=\"n\">marking</span> <span class=\"n\">it</span> <span class=\"n\">as</span> <span class=\"bp\">'</span><span class=\"kd\">noncomputable</span><span class=\"bp\">'</span> <span class=\"n\">because</span> <span class=\"n\">it</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"bp\">'</span><span class=\"n\">Real.instInfSetReal'</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">executable</span> <span class=\"n\">code</span>\n</code></pre></div>\n<p>I don't understand what is going on, because Alex's trick is precisely designed to add <code>noncomputable</code> to all definitions.</p>",
        "id": 392353239,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695312382
    },
    {
        "content": "<p>Is it a problem of a <code>section</code> ending? (Probably not, just want to rule out the obvious possibility.)</p>",
        "id": 392353709,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695312522
    },
    {
        "content": "<p>I think thats probably just my code not being robust enough to handle this syntax for defs for some reason, I can try and improve it, it just gets a bit mind bending for me when you have nested antiquotations lol</p>",
        "id": 392353795,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695312552
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n<span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"bp\">$$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"bp\">$$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>should be a version that actually works <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 392356140,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695313481
    },
    {
        "content": "<p>It doesn't like <code>opNorm</code> still and <code>protected def</code>'s</p>",
        "id": 392357065,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695313820
    },
    {
        "content": "<p>How hard is this <code>try</code> going? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">compileDecl</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:</span> <span class=\"n\">Declaration</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">Lean.compileDecl</span> <span class=\"n\">decl</span>\n  <span class=\"n\">catch</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">read</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isNoncomputableSection</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span> <span class=\"n\">false</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throw</span> <span class=\"n\">ex</span>\n  <span class=\"n\">return</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=compileDecl#doc\">docs#compileDecl</a></p>",
        "id": 392368114,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695318202
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 392369292,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695318662
    },
    {
        "content": "<p>I should probably just look at <code>Lean.compileDecl</code> to see but what are the classes of errors it throws and when does it throw them. Is there some short circuit? </p>\n<p>Would it be a terrible thing to move the <code>if</code> up a couple of levels?</p>",
        "id": 392369561,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695318769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392215085\">said</a>:</p>\n<blockquote>\n<p>(that said I did propose before that we do this on demand in some thread and there is some discussion regarding this there as well)</p>\n</blockquote>\n<p>I think on-demand compilation (of IR) and a command that could request the compilation of a definition from another file (and its dependencies, if there compiled definition does not already exist0 would be great and be likely the most principled way to solve this problem in mathlib. This could be turn on/off via a lean option like <code>compileByDefault=true/false</code>.</p>",
        "id": 392384709,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695324933
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I think the reason you code may not be working in <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s example is that it is not transferring declaration modifiers through the transformation (e.g., the doc comment).</p>",
        "id": 392385157,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695325133
    },
    {
        "content": "<p>And the attributes also?</p>",
        "id": 392385238,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695325177
    },
    {
        "content": "<p>Yeah, both attributes and doc comments are <code>declModifiers</code>.</p>",
        "id": 392385391,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695325242
    },
    {
        "content": "<p>Indeed I just don't know the syntax to fix it!</p>",
        "id": 392386819,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695325903
    },
    {
        "content": "<p>Here is what is hopefully a working example (and a comparison of the problem):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Declaration</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ex1</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">elab</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabCommand</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">local</span> <span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"bp\">$$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$$</span><span class=\"n\">a</span> <span class=\"bp\">$$</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">$$</span><span class=\"n\">c</span><span class=\"o\">)))</span>\n\n<span class=\"n\">suppress_compilation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"sd\">/-- hi -/</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- errors</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">--- errors</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ex1</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabSuppressCompilationDef</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">``</span><span class=\"n\">declaration</span>\n  <span class=\"k\">let</span> <span class=\"n\">etor</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">elabSuppressCompilationDef</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">command_elab</span> <span class=\"bp\">$</span><span class=\"n\">kind</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">etor</span><span class=\"o\">)</span>\n\n<span class=\"n\">suppress_compilation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"sd\">/-- hi -/</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ex2</span>\n</code></pre></div>",
        "id": 392387677,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695326272
    },
    {
        "content": "<p>Nice! It looks this syntax doesn't translate directly to <code>instance</code> and I can't poke at right now</p>",
        "id": 392393493,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695329011
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7316\">#7316</a> has <code>set_option compiler.suppress</code> for experimentation</p>",
        "id": 392416150,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695342670
    },
    {
        "content": "<p>Is there a way to set a built in option for all files in a folder?</p>",
        "id": 392420120,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695344657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392416150\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7316\">#7316</a> has <code>set_option compiler.suppress</code> for experimentation</p>\n</blockquote>\n<p>Can you link to the lean4 changes?</p>",
        "id": 392420192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695344697
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/commit/c02bcb6b679eed0f7a7c2f812d63ac3b06a15ed6\">Commit</a></p>",
        "id": 392420942,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695345109
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/noncomputability.20and.20oleans/near/392353239\">said</a>:</p>\n<blockquote>\n<p>with Alex's trick, i.e., [...] then I get failures down the file, where Lean complains about a missing <code>noncomputable</code> modifier:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The operator norm of a continuous linear map is the inf of all its bounds. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">opNorm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₂</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">sInf</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‖</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">x</span><span class=\"bp\">‖</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It's because Alex's macros don't account for docstrings. These are part of the <code>def</code> notation. <em>Edit: I missed that Mac already explained this.</em></p>\n<p>(<span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Implementation note: you could define a scoped macro rule in some namespace <code>NS</code> and then have <code>suppress_complication</code> do <code>open scoped NS</code>, which would save you from nested quotations.)</p>",
        "id": 392436921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695355895
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> . This works on most definitions in the file, but not all (there are always edge cases, right?): it fails on</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Flip the order of arguments of a continuous bilinear map.</span>\n<span class=\"sd\">This is a version bundled as a `LinearIsometryEquiv`.</span>\n<span class=\"sd\">For an unbundled version see `ContinuousLinearMap.flip`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">flipₗ</span><span class=\"bp\">ᵢ'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₃</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₂₃</span><span class=\"o\">]</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">≃ₗᵢ</span><span class=\"o\">[</span><span class=\"bp\">𝕜₃</span><span class=\"o\">]</span> <span class=\"n\">F</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₂₃</span><span class=\"o\">]</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">SL</span><span class=\"o\">[</span><span class=\"n\">σ₁₃</span><span class=\"o\">]</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span>\n  <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">flip</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">flip_add</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"n\">flip_smul</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"n\">flip_flip</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">flip_flip</span>\n  <span class=\"n\">norm_map'</span> <span class=\"o\">:=</span> <span class=\"n\">op_norm_flip</span>\n</code></pre></div>\n<p>with the error message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">compiler</span> <span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">ContinuousLinearMap.flipₗ</span><span class=\"bp\">ᵢ'.</span><span class=\"n\">_rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">ContinuousLinearMap.flip'</span>\n</code></pre></div>\n<p>And also, I am unable to adapt your code to instances, just because I am incompetent.</p>",
        "id": 392446306,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695362790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Here are some additional fixes. I cannot figure out at the moment how to get an <code>optDefDeriving</code> in a <code>def</code> to match optionally so there is some undesired duplication, but  everything else should be supported:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">elabSuppressCompilationDecl</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"n\">deriving</span> <span class=\"bp\">$</span><span class=\"n\">derivs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"n\">deriving</span> <span class=\"bp\">$</span><span class=\"n\">derivs</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">decr</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"kd\">noncomputable</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">elabDeclaration</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"bp\">?</span><span class=\"o\">:</span><span class=\"n\">docComment</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrs</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">vis</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">noncomputable</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">unsafe</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">recKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n    <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">attrKind</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">prio</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">declSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">declVal</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"suppress_compilation\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">``</span><span class=\"n\">declaration</span>\n  <span class=\"k\">let</span> <span class=\"n\">etor</span> <span class=\"o\">:=</span> <span class=\"n\">mkCIdent</span> <span class=\"bp\">``</span><span class=\"n\">elabSuppressCompilationDecl</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">local</span> <span class=\"n\">command_elab</span> <span class=\"bp\">$</span><span class=\"n\">kind</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">etor</span><span class=\"o\">)</span>\n\n<span class=\"n\">suppress_compilation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/\"</span>\n<span class=\"sd\">/-- hi -/</span> <span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span> <span class=\"n\">where</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"c1\">--- works</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ex2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"n\">ex2.foo</span> <span class=\"c1\">-- properly noncomputable</span>\n</code></pre></div>",
        "id": 392451565,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695365429
    },
    {
        "content": "<p>Looks great, thanks!</p>",
        "id": 392454388,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695366733
    },
    {
        "content": "<p>Agda also seems to have this problem because cubical Agda requires extra code to be generated at every pattern matching, which in some cases drastically slows things down when the user just wants to be \"cubical compatible\" instead of using any cubical features.</p>",
        "id": 392455841,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1695367384
    },
    {
        "content": "<p>Implemented in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7326\">#7326</a>, and tested on <code>OperatorNorm.lean</code> there.</p>",
        "id": 392539396,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1695395052
    }
]