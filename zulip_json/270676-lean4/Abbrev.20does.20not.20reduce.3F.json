[
    {
        "content": "<p>I ran into the above while working throug <a href=\"https://leanprover.github.io/functional_programming_in_lean/dependent-types/typed-queries.html\">FPIL4</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DBType</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">DBType.asType</span> <span class=\"o\">:</span> <span class=\"n\">DBType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NDBType</span> <span class=\"n\">where</span>\n  <span class=\"n\">underlying</span> <span class=\"o\">:</span> <span class=\"n\">DBType</span>\n  <span class=\"n\">nullable</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NDBType.asType</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">NDBType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">t.nullable</span> <span class=\"k\">then</span>\n    <span class=\"n\">Option</span> <span class=\"n\">t.underlying.asType</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">t.underlying.asType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">underlying</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">nullable</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">NDBType</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">asType</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">underlying</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">nullable</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">NDBType</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">asType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>The above code works until test3, where it yields:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">And</span> <span class=\"n\">a</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">NDBType.asType</span> <span class=\"o\">{</span> <span class=\"n\">underlying</span> <span class=\"o\">:=</span> <span class=\"n\">DBType.bool</span><span class=\"o\">,</span> <span class=\"n\">nullable</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Because the type definitions use <code>abbrev</code> I thought I understood the above type should just reduce to Bool, but I'm probably overlooking something. This only occurs with the double \"asType\" constructions, just the one layer doesn't cause this problem. Any pointers?</p>",
        "id": 366149895,
        "sender_full_name": "Pim Otte",
        "timestamp": 1686742560
    },
    {
        "content": "<p>Even though <code>NBDType.asType</code> does reduce here, it reduces to its definition, which makes use of <code>if ... then ... else</code>, which itself is syntactic sugar for the <code>ite</code> function. Since <code>ite</code> is not reducible, the whole thing doesn't reduce to <code>Bool</code> here. Changing your definition to use a match instead of <code>ite</code> fixes the problem here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">DBType</span> <span class=\"n\">where</span>\n <span class=\"bp\">|</span> <span class=\"n\">bool</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">DBType.asType</span> <span class=\"o\">:</span> <span class=\"n\">DBType</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NDBType</span> <span class=\"n\">where</span>\n  <span class=\"n\">underlying</span> <span class=\"o\">:</span> <span class=\"n\">DBType</span>\n  <span class=\"n\">nullable</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">NDBType.asType</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">NDBType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t.nullable</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">true</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Option</span> <span class=\"n\">t.underlying.asType</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">false</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">t.underlying.asType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">underlying</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">bool</span><span class=\"o\">,</span> <span class=\"n\">nullable</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">NDBType</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">asType</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span> <span class=\"c1\">--works</span>\n</code></pre></div>\n<p>Maybe it would make sense to mark <code>ite</code> as reducible ? it would make its behaviour more in line with matches.</p>",
        "id": 366184593,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1686749467
    }
]