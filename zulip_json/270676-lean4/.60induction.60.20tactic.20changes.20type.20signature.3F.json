[
    {
        "content": "<p>Here's some behavior that's gotten in the way of porting a file. It seems that when you use the <code>induction</code> tactic, it considers everything in scope, even those variables not mentioned in the theorem statement itself?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Walk</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Walk</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Walk</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Walk</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">⊢ ∀ (V : Type) (R : V → V → Prop) {u v : V} (q : Walk V R u v), q = q</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Walk</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">⊢ ∀ (V : Type) (R : V → V → Prop) {x y : V}, Walk V R x y → ∀ (q : Walk V R x y), q = q</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo'</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Walk</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 338448701,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677531409
    },
    {
        "content": "<p>This affects <code>induction'</code> as well (from <code>Mathlib.Tactic.Cases</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">⊢ ∀ (V : Type) (R : V → V → Prop) {x y : V}, Walk V R x y → ∀ (q : Walk V R x y), q = q</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo''</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Walk</span> <span class=\"n\">V</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">q</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 338449699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677531776
    },
    {
        "content": "<p>For some context, I was porting <a href=\"https://github.com/leanprover-community/mathlib4/pull/2514/files#diff-d49b8cd68da3f31f9a6c2cd6c7d63042904148dd481f0724bfd62c6f97a70c99R1691\">the section starting from this <code>variable</code> line</a> without stopping to think, but then later realized that the induction hypotheses and theorem statements didn't make sense (they included too many variables).</p>",
        "id": 338450863,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677532213
    },
    {
        "content": "<p>this is a known issue. The workaround is to clear variables you don't want to be generalized in the induction</p>",
        "id": 338451270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677532363
    },
    {
        "content": "<p>Got it.</p>\n<p>Is there any idea yet what the non-workaround might look like? I've been curious for other reasons whether we're going to have the Lean 3 behavior again for the body of a proof.</p>",
        "id": 338452577,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677532873
    },
    {
        "content": "<p>no, this is a pretty fundamental interaction between \"tactics inspect and sometimes generalize the whole context\" and \"all <code>variable</code>s are in the context and only the ones that are used in the term are actually abstracted in the result\"</p>",
        "id": 338452854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677532969
    },
    {
        "content": "<p>One thing we might consider is to say that all included variables should be determined already by elaborating the type of the expression, not the body. That would be more consistent with the way we handle elaboration of the type itself</p>",
        "id": 338453340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677533160
    },
    {
        "content": "<p>It is still not the case today that we know the type of <code>def foo : Nat := ...</code> without inspecting the <code>...</code> because of variables</p>",
        "id": 338453532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677533221
    },
    {
        "content": "<p>At least autoimplicits and some other consequences of unification lessen the blow in my specific case.</p>\n<p>I know there have been times when I've wanted Lean to work this way, at least for instance variables, so it's hard to say that there's anything wrong here. It's just quite a surprise from Lean 3!</p>",
        "id": 338454153,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677533458
    },
    {
        "content": "<p>\"Use less <code>variable</code>s\" is actually a lot more palatable option in lean 4 than lean 3</p>",
        "id": 338454626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677533649
    },
    {
        "content": "<p>Doesn't it make sense to disable automatic generalization of section variables?<br>\nBecause of <code>variable</code> command is an absolutely legal way to introduce unused variables, that could be accidentally generalized.</p>",
        "id": 338543886,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1677578612
    },
    {
        "content": "<p>I think it is very worrying that tactics like <code>induction</code> and <code>aesop</code> can use of variables that shouldn't be used in a particular result. Especially since it can include variables and the user might not realize this until this result is used. We don't have a linter that checks whether any variables have been introduced like this (the unused variable linter is not going to complain if <code>cases</code> or <code>revert</code> was used on a variable).</p>\n<p>It would be nice if the local context contained information about which variables were explicitly mentioned by the user. Then a tactic like <code>aesop</code> could be implemented so that it wouldn't use the variables that were never mentioned.</p>",
        "id": 339066623,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677755083
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/Single.20issue.20in.20!4.23.232565.20Combinatorics.2ESimpleGraph.2EProd\">This thread</a> contains an example where <code>aesop</code> introduces unnecessary variables in a proof</p>",
        "id": 339066911,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677755166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/.60induction.60.20tactic.20changes.20type.20signature.3F/near/339066623\">said</a>:</p>\n<blockquote>\n<p>It would be nice if the local context contained information about which variables were explicitly mentioned by the user. Then a tactic like <code>aesop</code> could be implemented so that it wouldn't use the variables that were never mentioned.</p>\n</blockquote>\n<p>In the end this can only be another approximation. For tactics we don't know what variables are referenced, even explicitly, until the tactic is executed.</p>",
        "id": 339069198,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677755937
    },
    {
        "content": "<p>Tactics could update this information in the local context when they use a new variable.</p>",
        "id": 339071966,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677756591
    },
    {
        "content": "<p>But especially for <code>induction</code> generalization we usually want to know what variables are used <em>after</em>/inside of it, not before</p>",
        "id": 339073050,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677756880
    },
    {
        "content": "<p>That is true. I think it's better for <code>induction</code> to be conservative with the variables it generalizes, and then the user has to specify explicitly which extra variables you want to generalize (so in my proposal <code>induction</code> would clear all variables that depend on the major premise but are unused).</p>\n<p>I just think that the status quo is bad, where adding a variable at the top of a file can break proofs in various ways.</p>",
        "id": 339077473,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677757999
    },
    {
        "content": "<p>I don't know yet how much we can avoid declaring variables at the top of a file, because Lean 4 supports auto-implicits. But my understanding is that we at least want to declare a whole bunch of type-class variables at the top of the file, and that <a href=\"https://github.com/leanprover-community/mathlib/blob/e7f0ddbf65bd7181a85edb74b64bdc35ba4bdc74/src/geometry/manifold/cont_mdiff.lean#L50-L75\">can involve a whole bunch of variables in Lean 3</a></p>",
        "id": 339077870,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1677758098
    },
    {
        "content": "<p>Yes, I can see how the current approximation can be problematic. It's unfortunate how problematic <code>variable</code> is in general for the implementation, <a href=\"https://github.com/leanprover/lean4/issues/1876\">https://github.com/leanprover/lean4/issues/1876</a> turned out to be another perhaps unsolvable issue.</p>",
        "id": 339128719,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677770294
    },
    {
        "content": "<p>Why was this not an issue in lean 3?</p>",
        "id": 339133586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677771284
    },
    {
        "content": "<p>Lean3 used <code>include</code> / <code>omit</code> instead of the \"everything is in the context unless it's not used\" semantics</p>",
        "id": 339133913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677771359
    },
    {
        "content": "<p>In Lean 3, the only variables you had access to were the ones implied by the type signature of the theorem. Now the body of a theorem can use any <code>variable</code>.</p>",
        "id": 339134048,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677771381
    },
    {
        "content": "<p>(strictly speaking) that's not true:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- ok in Lean 3</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">⟩</span>  <span class=\"c1\">-- fails in Lean 3</span>\n</code></pre></div>",
        "id": 339134394,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677771469
    },
    {
        "content": "<p>Lean3 didn't look inside <em>tactic blocks</em> to work out which variables are relevant though.</p>",
        "id": 339134542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677771497
    },
    {
        "content": "<p>Isn't it that Kyle was implicitely refering to tactic mode only?</p>",
        "id": 339135655,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1677771787
    },
    {
        "content": "<p>Eric's correcting that I said \"only the type signature\". The non-tactic part of the body of a theorem is important too (and I'm not sure I could have told you that Eric's first example would have worked).</p>",
        "id": 339136930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677772103
    }
]