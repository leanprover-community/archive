[
    {
        "content": "<p>This is in #general because I am not sure where it belongs. Often when I am working on a proof in lean 4 (with mathlib), after all the setup is complete, if I make an error, lean's CPU usage goes up. On activity monitor, I have seen %CPU go as high as 1400. This number stays high even a few minutes after the bug has been fixed and the proof works. I am not using simp or library_search like tactics that would have to search all of mathlib. My question: Why does Lean's CPU usage remain high, well after all proofs are complete and lean has checked them?</p>",
        "id": 341804021,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678802855
    },
    {
        "content": "<p>What often works is killing the <code>lean</code> process and restarting it from inside VSCode.</p>",
        "id": 341804456,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678802932
    },
    {
        "content": "<p>For instance, right now, I just fixed an error in a file. No other lean files are open. And since the last error came up, lean has had 17 open threads and has been causing my system to heat up.</p>",
        "id": 341805831,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678803170
    },
    {
        "content": "<p>I did not encounter this issue on a different linux machine.</p>",
        "id": 341806066,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678803221
    },
    {
        "content": "<p>These sorts of issues are really annoying but really hard to debug without a way to reproduce them reliably. Do you think you can produce a test case that shows this behavior every time? Ideally this would be a small self contained project with simple instructions to produce this spike in usage every time</p>",
        "id": 341810615,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1678804195
    },
    {
        "content": "<p>It is hard to produce a test case that might reliably reproduce this bug as you say. I encountered this issue when writing long propositions involving Finsets, powersets of Finsets, and quantifiers over subsets of Finsets.</p>",
        "id": 341812319,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678804546
    },
    {
        "content": "<p>But the quantifier depth was \\leq 2</p>",
        "id": 341812479,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678804573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/113488-general/topic/Lean.20Mac.20OS.20Ventura.20.28Intel.29.20CPU.20usage/near/341804456\">said</a>:</p>\n<blockquote>\n<p>What often works is killing the <code>lean</code> process and restarting it from inside VSCode.</p>\n</blockquote>\n<p>The reason it is hard for me to reliable reproduce the issue is that while the CPU usage stays high for a long time after fixing proofs or expressions, as soon as I kill the lean process and restart it, for the exact same code, the CPU usage is suddenly low.</p>",
        "id": 341813380,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678804760
    },
    {
        "content": "<p>So the issue might very well not be with the specific code, just that somewhere deep down some threads which were assigned some work, were never stopped long after the need for those threads passed.</p>",
        "id": 341814093,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678804894
    },
    {
        "content": "<p>For example after restarting now, I still have 17 threads in the lean process, but CPU usage is 0%.</p>",
        "id": 341814305,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678804933
    },
    {
        "content": "<p>Here's the file I am working on :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">IndivisibleGoods</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Agents</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Goods</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Finset</span> <span class=\"n\">β</span>\n\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Valuation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">values</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n    <span class=\"n\">empty_zero_val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">values</span> <span class=\"n\">i</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Allocation</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n    <span class=\"n\">alloc</span> <span class=\"o\">:</span> <span class=\"n\">Goods</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span>\n\n\n  <span class=\"kd\">structure</span> <span class=\"n\">Alloc</span>\n    <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n      <span class=\"n\">alloc</span> <span class=\"o\">:</span> <span class=\"n\">Goods</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span>\n      <span class=\"n\">valuation</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NNReal</span>\n      <span class=\"n\">empty_zero_val</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">valuation</span> <span class=\"n\">i</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Monotonicity</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⊆</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n    <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"n\">X</span> <span class=\"bp\">≤</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"n\">Y</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Submodularity</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">)),</span>\n      <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">Additivity</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">)),</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"n\">Y</span> <span class=\"bp\">-</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">additive_alloc_monotone_alloc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">Additivity</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">Monotonicity</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">Additivity</span> <span class=\"n\">Monotonicity</span>\n    <span class=\"n\">intros</span> <span class=\"n\">valuation</span> <span class=\"n\">additivity</span> <span class=\"n\">agent</span>\n    <span class=\"n\">intros</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">X_subseteq_Y</span>\n    <span class=\"k\">have</span> <span class=\"n\">additivity'</span> <span class=\"o\">:=</span> <span class=\"n\">additivity</span> <span class=\"n\">agent</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">X_union_Y_eq_Y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"n\">Y</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Set.union_eq_self_of_subset_left</span> <span class=\"n\">X_subseteq_Y</span>\n    <span class=\"k\">have</span> <span class=\"n\">X_union_exists_Y</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Set.union_diff_cancel</span> <span class=\"n\">X_subseteq_Y</span>\n    <span class=\"k\">have</span> <span class=\"n\">X_intersect_Y_minus_X</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">exact</span> <span class=\"n\">Set.inter_diff_self</span> <span class=\"n\">X</span> <span class=\"n\">Y</span>\n    <span class=\"n\">rw</span><span class=\"o\">[</span><span class=\"n\">X_intersect_Y_minus_X</span><span class=\"o\">,</span> <span class=\"n\">X_union_exists_Y</span><span class=\"o\">,</span> <span class=\"n\">valuation.empty_zero_val</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">additivity'</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">nonpos_iff_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">add_eq_zero_iff</span><span class=\"o\">,</span> <span class=\"n\">tsub_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">additivity'</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_iff_exists_add.mpr</span>\n    <span class=\"n\">use</span> <span class=\"n\">Valuation.values</span> <span class=\"n\">valuation</span> <span class=\"n\">agent</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"n\">exact</span> <span class=\"n\">additivity'</span>\n\n\n\n  <span class=\"kd\">def</span> <span class=\"n\">bundle</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">):=</span>\n    <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Goods</span> <span class=\"n\">β</span> <span class=\"bp\">|</span> <span class=\"n\">a.alloc</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">}</span>\n\n  <span class=\"c1\">-- EF = Envy Free</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">isEnvyRemovalSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">⊆</span> <span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">isMinimalSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Y</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">Y</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">isMinimumSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">P</span> <span class=\"n\">X</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Y.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">X.card</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">Y</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">isMinimalEnvyRemovalSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">isMinimalSet</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">isEnvyRemovalSet</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n\n\n<span class=\"c1\">-- CPU Consumption goes up. There is a type error in this definition. The error is not shown. Instead VSCode marks every line from this point with a yellow bar on the left</span>\n  <span class=\"kd\">def</span> <span class=\"n\">isMinimumEnvyRemovalSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Alloc</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">isMinimumSet</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">isEnvyRemovalSet</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">EF_alloc</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">EF1</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}))</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">EFX</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span> <span class=\"bp\">∈</span> <span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">≥</span> <span class=\"o\">(</span><span class=\"n\">v.values</span> <span class=\"n\">i</span> <span class=\"o\">((</span><span class=\"n\">bundle</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">\\</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}))</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">non_EF_allocs_exist</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Alloc</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"bp\">¬</span> <span class=\"n\">EF_alloc</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">IndivisibleGoods</span>\n</code></pre></div>",
        "id": 341841723,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678810145
    },
    {
        "content": "<p>This below is the fix:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- CPU Consumption goes up. There is a type error in this definition. The error is not shown. Instead VSCode marks every line from this point with a yellow bar on the left</span>\n  <span class=\"kd\">def</span> <span class=\"n\">isMinimumEnvyRemovalSet</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Valuation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Allocation</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Agents</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Goods</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">isMinimumSet</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">isEnvyRemovalSet</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341842113,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678810211
    },
    {
        "content": "<p>Here is the CPU usage after a minute of fixing the error. VScode still shows the lines below the comment in yellow:<br>\n<a href=\"/user_uploads/3121/PFQH78cPfSBpQXIR2hiHdVMT/telegram-cloud-photo-size-5-6091620157244945458-y.jpg\">telegram-cloud-photo-size-5-6091620157244945458-y.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PFQH78cPfSBpQXIR2hiHdVMT/telegram-cloud-photo-size-5-6091620157244945458-y.jpg\" title=\"telegram-cloud-photo-size-5-6091620157244945458-y.jpg\"><img src=\"/user_uploads/3121/PFQH78cPfSBpQXIR2hiHdVMT/telegram-cloud-photo-size-5-6091620157244945458-y.jpg\"></a></div>",
        "id": 341842929,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678810382
    },
    {
        "content": "<p>Further, after letting this happen for a few minutes. All I did was kill this process , go to VSCode, and restart lean through the VSCode notification. It immediately started and accepted the corrected definition.</p>",
        "id": 341845268,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678810919
    },
    {
        "content": "<p>No more yellow lines</p>",
        "id": 341845381,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678810936
    },
    {
        "content": "<p>Now it is able to highlight the error in the last line without CPU usage climbing up</p>",
        "id": 341845603,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678811007
    },
    {
        "content": "<p>It would be interesting to get stack traces from these stuck threads, but the issue most likely is that elaboration of a single command currently cannot be interrupted. So if you manage to temporarily produce very expensive input, threads can get stuck processing it. We need more interaction between the elaborator and language server to fix this.</p>",
        "id": 341845935,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678811097
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Lean.20Mac.20OS.20Ventura.20.28Intel.29.20CPU.20usage\">#general &gt; Lean Mac OS Ventura (Intel) CPU usage</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 341847184,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678811364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.20Mac.20OS.20Ventura.20.28Intel.29.20CPU.20usage/near/341845935\">said</a>:</p>\n<blockquote>\n<p>It would be interesting to get stack traces from these stuck threads, but the issue most likely is that elaboration of a single command currently cannot be interrupted. So if you manage to temporarily produce very expensive input, threads can get stuck processing it. We need more interaction between the elaborator and language server to fix this.</p>\n</blockquote>\n<p>In general this happens whenever I am either writing Predicates or proofs where there is quantification over sets or finsets.</p>",
        "id": 341849412,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678811896
    },
    {
        "content": "<p>I reconstructed the above example to illustrate the point with two errors, one with such quantification and another without. The server only got stuck on the one with such (higher order?) quantification</p>",
        "id": 341850002,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678812050
    },
    {
        "content": "<p>As an aside, I wrote this file to demonstrate lean4 to a group of colleagues who work on fair division problems. So this issue kind of defeats the purpose, if I can't show them how lean catches mistakes or checks proofs</p>",
        "id": 341851034,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678812297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  Additional information : I opened this in the lean4 web playground. It worked perfectly well. So this issue might be specific to macOS</p>",
        "id": 341853564,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1678812885
    }
]