[
    {
        "content": "<p>It will suggest <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.MetaM.toIO#doc\">docs#Lean.Meta.MetaM.toIO</a> if you wait long enough, which perhaps could be accelerated by not downloading (and more importantly parsing?) the same big file four times :) /cc <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> <br>\n<a href=\"/user_uploads/3121/PFbhCtKZyd1fNkacvXdj_D9D/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/PFbhCtKZyd1fNkacvXdj_D9D/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/PFbhCtKZyd1fNkacvXdj_D9D/image.png\"></a></div>",
        "id": 377006231,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689864171
    },
    {
        "content": "<p>Well the download is cached after the first time (as the timing diagram on the rhs shows you dont actually wait), I guess one could try to clean up the HTML to fix that tho. Regarding the parsing iirc the DeclarationDataCenter in the js is a singleton so it should also not be parsed several times. I've tried to take a look at the Firefox flame graph before (they have an integrated thing) but I dont usually frontend dev so it was rather unclear to me what the thing was actually spending time on.</p>",
        "id": 377008686,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689864490
    },
    {
        "content": "<p>I'll check whether the declaration data gets parsed multiple times later just to be sure. That said if someone can tell me how professionals <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> figure out what is slow in such static pages I'd be very grateful^^, its been bothering me for a while as well.</p>",
        "id": 377009177,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689864574
    },
    {
        "content": "<p>No professionals in this room, but it seems to be very busy with parsing JS, perhaps the response result (four times, maybe?)? The solid blue part later on is <code>cacheDeclarationData</code> <br>\n<a href=\"/user_uploads/3121/5frLCLeupqfm8v6Nw8_sA343/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/5frLCLeupqfm8v6Nw8_sA343/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/5frLCLeupqfm8v6Nw8_sA343/image.png\"></a></div>",
        "id": 377014154,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689865298
    },
    {
        "content": "<p>Oh well thats pretty cool then, I'll check out the parsing issue when I'm home. That said it will at best be a linear speedup and since I expect mathlib to keep growing quite a bit we probably need a better solution sooner or later. I'd be very interested in how rust does this type of stuff if someone knows. The only thing I know about rustdoc is that unlike doc-gen it does not do things like rendering the instance lists on demand but instead its basically a big rust to HTML compiler. Doc-gen used to be like this but I decided to split it up into a per file tool later on so that it could profit from the lake dependency graph and inherent parallelism more. And then in the end a final doc-gen command will accumulate all of the json files into a single big one. I guess an optimization one could do here is to only have the decl name -&gt; module mapping in the accumulated file  and load only the module specific full declaration data for the module that is getting vievwed right now. That should severly cut the size of the accumulated file</p>",
        "id": 377022950,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689866744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20monads/near/377014154\">said</a>:</p>\n<blockquote>\n<p>No professionals in this room, but it seems to be very busy with parsing JS, perhaps the response result (four times, maybe?)? The solid blue part later on is <code>cacheDeclarationData</code> <br>\n<a href=\"/user_uploads/3121/5frLCLeupqfm8v6Nw8_sA343/image.png\">image.png</a></p>\n</blockquote>\n<p>Okay I have an update! It seems that in fact the singleton implementation is not working for some reason, so now to figure out how to properly <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> do a singleton in JS</p>",
        "id": 377093135,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689881716
    },
    {
        "content": "<p>I have updates! The declaration singleton <em>does</em> in fact work, however all of the files start their null check in parallel and will notice that it is in fact null and then start their HTTP request and will finally all set the singleton in parallel once their request is done and all of them have parsed the file. So if you do this: <a href=\"https://github.com/leanprover/doc-gen4/commit/5ce54e8e10ffe4c2c91766275f4a0d93aabd65dc\">https://github.com/leanprover/doc-gen4/commit/5ce54e8e10ffe4c2c91766275f4a0d93aabd65dc</a> it actually works</p>",
        "id": 377107833,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689885952
    },
    {
        "content": "<p>Nice. Awaiting the finished request is probably cheap enough that the first singleton isn't necessary anymore? And yes, I'm just guessing here from exactly zero experience with async JS...</p>",
        "id": 377108177,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689886062
    },
    {
        "content": "<p>fixed that and another thing that should store the database in local storage. So once both of these deploy it should be instant <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 377112028,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689887353
    },
    {
        "content": "<p>And eh, thanks to <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> for spotting the race condition for me :D it was quite fun because of course once you enable the debugger it doesn't occur anymore, a true Heisenbug.</p>",
        "id": 377112606,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689887555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> should be better now</p>",
        "id": 377116942,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1689889009
    },
    {
        "content": "<p>11 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Lean.204.20monads\">#lean4 &gt; Lean 4 monads</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 377127113,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689892797
    },
    {
        "content": "<p>Is the goal for this file to be downloaded only once and then cached for all future page visits? I don't know how doc-gen4 is currently implemented, but that sounds like something a service-worker could be used for.</p>",
        "id": 377401700,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1689966061
    },
    {
        "content": "<p>That's what mathlib3 did, but the worker needed you to keep a second tab open to keep it alive while you navigate in the first tab</p>",
        "id": 377445941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689980921
    },
    {
        "content": "<p>Otherwise it was killed in the instant where neither the old nor new page was loaded</p>",
        "id": 377446016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689980958
    },
    {
        "content": "<p>We had an idea to basically build a hash based cache as an indexed db? so you can basically request to get the hash of one of the declaration data files and if it did not update you can use stuff from your local storage. But I do not know if that is a reasonable approach</p>",
        "id": 377537075,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690018421
    },
    {
        "content": "<p>I used to do webdev, so I think I might be able to help here, but I don't really have enough context about doc-gen4 to understand what you're suggesting. This is about speeding up the search, right? Can we look at how, say, <code>rustdoc</code> works and steal their ideas, or is Lean sufficiently different that won't work?</p>",
        "id": 377663515,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690051532
    },
    {
        "content": "<p>No no we can do that. I already have an idea for how we can reduce the loading time of declaration information drastically outlined above. But I would also be curious how rustdoc does as mentioned above.</p>",
        "id": 377663935,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690051662
    },
    {
        "content": "<p>Let me know if there is anything I can help with!<br>\nOne thing I noticed is that currently there is a very noticeable latency between pressing a key and the letter appearing in the search box. I suspect the search suggestion is either blocking the UI thread, or at least blocking some event handler. Making this more asyncronous can already help a lot with search feeling more responsive.</p>",
        "id": 377666335,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690052700
    },
    {
        "content": "<p>Well I am pretty much blank regarding frontend things so if you want to do any javascript changes go for it. The JS part is rather self contained. The search itself lives here: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/static/search.js\">https://github.com/leanprover/doc-gen4/blob/main/static/search.js</a></p>",
        "id": 377666923,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690052977
    },
    {
        "content": "<p>The wait is for it to download all the data to search on iirc, the search is client side on a lot of data. But downloading this data itself is asynchronous with the actual page load.<br>\nThe difficulty with local storage is that the docs update at least daily so you'd need some more clever way of organising things so that you don't throw out all of the previous data each day. Perhaps chunking the declaration data per namespace would be ok. The logic being that any individual commit might change a few related declarations in one namespace but leave most others untouched so only a few would be invalidated each day.</p>",
        "id": 377677030,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1690057642
    },
    {
        "content": "<p>Well as I explain above technically speaking the data is already chunked per module, it is just that right now I accumulate it in a big json that gets used as a central data store. There is a refactoring possible here where the big json merely contains the mapping from decl names to module names and each web page only loads the module data that it needs.</p>",
        "id": 377677288,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690057791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/377666335\">said</a>:</p>\n<blockquote>\n<p>One thing I noticed is that currently there is a very noticeable latency between pressing a key and the letter appearing in the search box. I suspect the search suggestion is either blocking the UI thread, or at least blocking some event handler. Making this more asyncronous can already help a lot with search feeling more responsive.</p>\n</blockquote>\n<p>So I had a look at <code>rustdoc</code>, and they circumvent this by only starting a search 500ms after the last keypress, whereas <code>doc-gen</code> immediately starts a search after each input event. If you think it's sensible to adopt this, I could do a PR with the 500ms delay approach.</p>",
        "id": 377678425,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690058415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/377677288\">said</a>:</p>\n<blockquote>\n<p>Well as I explain above technically speaking the data is already chunked per module, it is just that right now I accumulate it in a big json that gets used as a central data store. There is a refactoring possible here where the big json merely contains the mapping from decl names to module names and each web page only loads the module data that it needs.</p>\n</blockquote>\n<p>Even if each page loads every module, there might still be some benefit to keeping these files separate, if the server runs HTTP/2. Each request should get multiplexed on the same connection, meaning there should be little to no overhead vs. one big file, but with smaller files there's better caching and more chance of parralelism</p>",
        "id": 377678534,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690058486
    },
    {
        "content": "<p>Well the large declaration file does already get cached on reload as well if you are doing many searches after one another right. The actual issue here is (i believe) not the loading of the file per se which should just be one RTT to the server with 0 data returned but instead the fact that it has to parse the entire JSON blob because right now all of the data is accumulated instead of the \"name -&gt; module\" map for all names in one file and the info about name in other files.</p>",
        "id": 377679175,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690058880
    },
    {
        "content": "<p>Will it be faster to do the actual search on the server side?</p>",
        "id": 377679178,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690058881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/377679178\">said</a>:</p>\n<blockquote>\n<p>Will it be faster to do the actual search on the server side?</p>\n</blockquote>\n<p>Most likely yes but then it wouldn't be a static web page anymore and that's not really what we want</p>",
        "id": 377679265,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690058907
    },
    {
        "content": "<p>Why?</p>",
        "id": 377679512,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/377678425\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/377666335\">said</a>:</p>\n<blockquote>\n<p>One thing I noticed is that currently there is a very noticeable latency between pressing a key and the letter appearing in the search box. I suspect the search suggestion is either blocking the UI thread, or at least blocking some event handler. Making this more asyncronous can already help a lot with search feeling more responsive.</p>\n</blockquote>\n<p>So I had a look at <code>rustdoc</code>, and they circumvent this by only starting a search 500ms after the last keypress, whereas <code>doc-gen</code> immediately starts a search after each input event. If you think it's sensible to adopt this, I could do a PR with the 500ms delay approach.</p>\n</blockquote>\n<p>With my above comment in mind I think this could still very well be a reasonable thing to try so if you want to do the PR go for it <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 377679516,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690059037
    },
    {
        "content": "<p>I mean, what's wrong with non-static pages?</p>",
        "id": 377679553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059055
    },
    {
        "content": "<p>Besides that you can't use Github pages anymore and have to move to, e.g., a shared hosting.</p>",
        "id": 377679637,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690059090
    },
    {
        "content": "<p>One risk that comes to mind is DDoS, but also generally the cost of having a server that run code</p>",
        "id": 377679787,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690059149
    },
    {
        "content": "<p>Because with a static page we can still browse the docs without an internet connection.</p>",
        "id": 377679847,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1690059192
    },
    {
        "content": "<p>On top of that people that want to look at documentation locally need to download additional depednencies outside of the lean world as well</p>",
        "id": 377679866,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690059210
    },
    {
        "content": "<p>(unless someone here comes up with a lean webserver and database adapter :D)</p>",
        "id": 377679899,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690059230
    },
    {
        "content": "<p>I pushed the proposed 500ms debounce now. It did make the search experience smoother on a local build of std4. We'll see in a few hours whether it does make things nicer on mathlib4 too. In addition I'm planning on properly splitting up the JSON files tomorrow which should reduce load times and improve performance as well.</p>",
        "id": 390069851,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694299311
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4_docs/actions/runs/6133947195/job/16646316341\">https://github.com/leanprover-community/mathlib4_docs/actions/runs/6133947195/job/16646316341</a> should be up once this is through, I shall hit the fast forward button <span aria-label=\"sleeping\" class=\"emoji emoji-1f634\" role=\"img\" title=\"sleeping\">:sleeping:</span></p>",
        "id": 390076827,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694305565
    },
    {
        "content": "<p>Seems better. Thanks!</p>",
        "id": 390086374,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1694311360
    },
    {
        "content": "<p>Okay I worked a bit on reducing the JSON data size now. I started at 8.3M on std4 and now ended up at 3.0M. I decided to sacrifice the src# feature along the way as I can count the amount of times I saw it being used on one hand and the link is available with just one additional click anyways, that saved ~ 1M of the 5 that I got. On mathlib4 we started at 77M and are now down to  32M so the page should load much faster and the find function should also be quicker.</p>",
        "id": 390137752,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694347377
    },
    {
        "content": "<blockquote>\n<p>I decided to sacrifice the src# feature along the way as I can count the amount of times I saw it being used on one hand and the link is available with just one additional click anyways</p>\n</blockquote>\n<p>Couldn't the src# link continue with an additional indirection, if it links to the same place as docs# but with an additional query parameter in the URL, which is processed by the doc-gen JS to turn the page into a redirect</p>",
        "id": 390173980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694372926
    },
    {
        "content": "<p>I am getting a page unresponsive error searching for \"sin\" <a href=\"https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=sin\">https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=sin</a></p>",
        "id": 392724568,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695490353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/392724568\">said</a>:</p>\n<blockquote>\n<p>I am getting a page unresponsive error searching for \"sin\" <a href=\"https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=sin\">https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=sin</a></p>\n</blockquote>\n<p>Can't reproduce on Linux w/ Firefox, can you give more info about your setup?</p>",
        "id": 392735902,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695500317
    },
    {
        "content": "<p>On Android Chrome I got no error, but it was very slow 15+ seconds.</p>",
        "id": 392751305,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695513149
    },
    {
        "content": "<p>On MacOS Chrome I get no error but also very slow</p>",
        "id": 392752064,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1695513796
    },
    {
        "content": "<p>About 4s for me on macos chrome.</p>",
        "id": 392762317,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695519669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/392751305\">said</a>:</p>\n<blockquote>\n<p>On Android Chrome I got no error, but it was very slow 15+ seconds.</p>\n</blockquote>\n<p>I mean its searching through a gigantic amount of strings just with a three character pattern, some slowness is expected here I would say.</p>",
        "id": 392789130,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695538264
    },
    {
        "content": "<p>I'm on MacOS chrome, but trying it again, It's much faster, not sure what's up with that.</p>",
        "id": 392822514,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695554999
    },
    {
        "content": "<p>Maybe you already have the file cached?</p>",
        "id": 392832952,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695561863
    },
    {
        "content": "<p>Again getting unresponsive, this time for <a href=\"https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=list\">https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=list</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/392789130\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/doc-gen4.20search.20slowness/near/392751305\">said</a>:</p>\n<blockquote>\n<p>On Android Chrome I got no error, but it was very slow 15+ seconds.</p>\n</blockquote>\n<p>I mean its searching through a gigantic amount of strings just with a three character pattern, some slowness is expected here I would say.</p>\n</blockquote>\n<p>Perhaps slowness is expected, but ideally the page would not hang.</p>",
        "id": 393066604,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695661500
    },
    {
        "content": "<p>Still can't reproduce :( even on my mobile the pages keeps responsive to scrolling etc all the time</p>",
        "id": 393071471,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695662949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Do you have a version of Chrome to test it on? When it comes to memory, Chrome and Firefox handle things very differently. From past experience, there a lot of things that cause Chrome to hang that do not cause Firefox to do so. One old significant example  I recall was Fandom wikis. They would often hang for me on chrome (and even sometimes crash the page) due to memory use but work fine on Firefox.</p>",
        "id": 393113895,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695677166
    },
    {
        "content": "<p>(If you do not wish to use Google Chrome, there a lot of neat Chromium distributions available.)</p>",
        "id": 393114024,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695677237
    },
    {
        "content": "<p>I have Chromium 116.0.5845.96 Fedora Project but there it seems fine to me as well? Maybe my machine just does the search too fast for me to notice?</p>",
        "id": 393114061,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695677258
    },
    {
        "content": "<p>Can someone that has this issue maybe run a profiler in the browser on it and export that profile here? I guess that should be possible right?</p>",
        "id": 393114224,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695677319
    },
    {
        "content": "<p>When I run  a profiler on it in chrome it looks to me like it is spending the vast majority of the time on rendering and layouting the page, not in the JS itself. So I guess if we wanted to address that we would have to do some pagination thingy? Or maybe just straight up limit the amount of results?</p>",
        "id": 393114794,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695677566
    },
    {
        "content": "<p>Yeah sorry, I realize I am reporting a heisenbug. I am on Chrome Version 116.0.5845.187 (Official Build) (arm64) on an M1 Max MacOS 13.3.1 if that helps.</p>",
        "id": 393118204,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695679105
    },
    {
        "content": "<p>I am trying to produce a \"recording\" but when I stop the recording, it's taking forever to stop.</p>",
        "id": 393119298,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695679546
    }
]