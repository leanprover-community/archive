[
    {
        "content": "<p>The <code>processHeader</code> function in <code>Lean.Elab</code> has argument for<code>Options</code>, but this seems to behave differently from what I was expecting. I had initially assumed that the header and file would be parsed with the specified options enabled, but the code below (adapted from a portion of <code>LeanInk</code>) shows that this is not the case. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">System</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">analyzeInput</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileContents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">file</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">fileContents</span> <span class=\"n\">file.toString</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">context</span>\n  <span class=\"k\">let</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">Options.empty</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setBool</span> <span class=\"bp\">`</span><span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setBool</span> <span class=\"bp\">`</span><span class=\"n\">tactic.simp.trace</span> <span class=\"n\">true</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">environment</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">processHeader</span> <span class=\"n\">header</span> <span class=\"n\">options</span> <span class=\"n\">messages</span> <span class=\"n\">context</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">commandState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">environment</span> <span class=\"n\">messages</span> <span class=\"k\">with</span> <span class=\"n\">infoState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">context</span> <span class=\"n\">state</span> <span class=\"n\">commandState</span>\n  <span class=\"k\">let</span> <span class=\"n\">messages</span> <span class=\"o\">:=</span> <span class=\"n\">s.commandState.messages.msgs.toList.filter</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">endPos.isSome</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"n\">messages</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">msg.toString</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">analyzeInput</span> <span class=\"s2\">\"LeanInk/experiments/TraceTest.lean\"</span>            <span class=\"c1\">-- no output</span>\n<span class=\"k\">#eval</span> <span class=\"n\">analyzeInput</span> <span class=\"s2\">\"LeanInk/experiments/TraceTestWithOption.lean\"</span>  <span class=\"c1\">-- \"Try this: simp only\"</span>\n</code></pre></div>\n<p>The contents of the file <code>TraceTest.lean</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>while those of <code>TraceTestWithOption.lean</code> are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">tactic.simp.trace</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>These show that the option <code>tactic.simp.trace</code> is not enabled while parsing the files, even though it is passed as an argument to <code>processHeader</code>. Tracing down the function calls in the source code seems to lead to the <code>ImportM.Context</code> structure. Is there another way to enable a certain option while parsing a file programmatically from <code>Lean</code>, say using the <code>lakefile</code> configuration of the repository?</p>",
        "id": 359555354,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1684478256
    }
]