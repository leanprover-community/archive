[
    {
        "content": "<p>I'm not sure if this is a regression, a problem on my computer, or just how it's always been, but could I ask how long</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span>\n</code></pre></div>\n<p>reports on Mathlib4? (I'm interested in the <em>second</em> run of this command, to make sure no compilation is happening.) (This is calling <code>cache</code> with no commands, so it shouldn't be doing anything except starting up and printing a message.)</p>",
        "id": 379324416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690501961
    },
    {
        "content": "<p>I am seeing <code>3.2s</code>, which feels both too long, and slower than I remember previously.</p>",
        "id": 379324454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690502003
    },
    {
        "content": "<p>I've jumped back through Mathlib commits over the last two weeks and don't see any difference.</p>",
        "id": 379324461,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690502011
    },
    {
        "content": "<p>I guess this is just how long it takes to hash all the file contents.</p>",
        "id": 379325864,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690502737
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 379326279,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690502943
    },
    {
        "content": "<p>2.35s on my laptop, so yeah that's pretty slow.</p>",
        "id": 379326538,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690503099
    },
    {
        "content": "<p>What about <code>lake exe cache get</code> (again, on a second run?)</p>\n<p>Today I see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>                     <span class=\"c1\">-- takes about 90 seconds before printing this line</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3604</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span>              <span class=\"c1\">-- takes about 80 seconds before printing this line</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">5502</span> <span class=\"n\">ms</span>                      <span class=\"c1\">-- as claimed, takes about 5 seconds</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>  <span class=\"mi\">9</span><span class=\"bp\">.</span><span class=\"mi\">64</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">62</span><span class=\"bp\">.</span><span class=\"mi\">29</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">40</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"bp\">.</span><span class=\"mi\">85</span> <span class=\"n\">total</span>\n</code></pre></div>\n<p>which is completely unusable.</p>",
        "id": 379327921,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690503804
    },
    {
        "content": "<p>2.96s for me.</p>",
        "id": 379328249,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690503950
    },
    {
        "content": "<p>Indeed, my laptop is taking about 5s, so something on this computer is badly borked.</p>",
        "id": 379328768,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690504180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I would be interested if you could get performance tests for <a href=\"https://github.com/digama0/lean-cache\">https://github.com/digama0/lean-cache</a></p>",
        "id": 379331155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690505120
    },
    {
        "content": "<blockquote>\n<p>I've jumped back through Mathlib commits over the last two weeks and don't see any difference.</p>\n</blockquote>\n<p>According to perf, 40% of the runtime is spent in this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">contents</span> <span class=\"o\">:=</span> <span class=\"n\">contents.replace</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span><span class=\"s2\">r</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I think this is a recent change.</p>",
        "id": 379331717,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690505304
    },
    {
        "content": "<p>Deleting <code>~/.cache/mathlib</code> has restored normal performance.</p>",
        "id": 379335928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690506837
    },
    {
        "content": "<p>Could something in <code>cache</code> be traversing everything in the cache directory, even if not relevant?</p>",
        "id": 379336056,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690506876
    },
    {
        "content": "<p>what OS are you on?</p>",
        "id": 379336075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690506889
    },
    {
        "content": "<p>and what filesystem</p>",
        "id": 379336115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690506901
    },
    {
        "content": "<p>macos big sur (yes, I realise that is old).</p>",
        "id": 379336132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690506906
    },
    {
        "content": "<p>APFS</p>",
        "id": 379336154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690506913
    },
    {
        "content": "<p>I've just run <code>smartmontools</code>, and it says that my SSD is perfectly fine.</p>",
        "id": 379336222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690506942
    },
    {
        "content": "<p>I don't think <code>lake exe cache get</code> should do any directory traversal</p>",
        "id": 379336332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690506976
    },
    {
        "content": "<p>It really seems that deleting <code>~/.cache/mathlib</code> was the solution. I now see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3605</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">295</span> <span class=\"n\">ms</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>  <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">93</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">99</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">257</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">634</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 379336676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507126
    },
    {
        "content": "<p>I should have just moved the cache to another directory so I could test putting it back. :-(</p>",
        "id": 379336734,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507148
    },
    {
        "content": "<p>I stand corrected, <code>lake exe cache get</code> uses a directory traversal to filter the needed files by the existing files</p>",
        "id": 379336753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690507162
    },
    {
        "content": "<p>that seems really unnecessary</p>",
        "id": 379336786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690507178
    },
    {
        "content": "<p>Ahha! Shall we bother fixing that, or is the timeline for <code>lean-cache</code> short enough? :-)</p>",
        "id": 379337087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507314
    },
    {
        "content": "<p>(I'm getting it running now.)</p>",
        "id": 379337092,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690507319
    },
    {
        "content": "<p>The status of <code>lean-cache</code> is that the core implementation is done but distribution still needs to be worked out, as well as how to approach <code>lake_ext</code> and possible integration into <code>lake</code>.</p>",
        "id": 379337312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690507412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6197\">#6197</a> changes the current <code>cache</code> to avoid traversing the <code>CACHEDIR</code> (and building an expensive RBSet out of the file names!)</p>",
        "id": 379340135,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690508759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/time.20to.20execute.20.60lake.20exe.20cache.60/near/379331717\">said</a>:</p>\n<blockquote>\n<p>According to perf, 40% of the runtime is spent in this line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">contents</span> <span class=\"o\">:=</span> <span class=\"n\">contents.replace</span> <span class=\"s2\">\"</span><span class=\"err\">\\</span><span class=\"s2\">r</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</code></pre></div>\n<p>I think this is a recent change.</p>\n</blockquote>\n<p>If you are talking about this line in Lake, that comes from <a href=\"https://github.com/leanprover/lake/pull/170\">lake#170</a> (a May/June change), which was an attempt (by Sebastian) to make <code>.lean</code> file hashes OS independent for mathlib.</p>",
        "id": 379423687,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690536224
    },
    {
        "content": "<p>based on the variable name I think it is a reference to <a href=\"https://github.com/leanprover-community/mathlib4/blob/c84172212bad5a41d3f0a6cee27c049e0484c04a/Cache/Hashing.lean#L55\">https://github.com/leanprover-community/mathlib4/blob/c84172212bad5a41d3f0a6cee27c049e0484c04a/Cache/Hashing.lean#L55</a>, not lake</p>",
        "id": 379428992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690537128
    },
    {
        "content": "<p>Which, to be fair, is also by me, for the same reasons <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 379439648,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690538928
    },
    {
        "content": "<p>I think the semantics of this operation is good, but maybe there are issues in the implementation of <code>replace</code> if it's that expensive?</p>",
        "id": 379442547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690539445
    },
    {
        "content": "<p>If this is a packed UTF8 or UTF16 string, <code>replace</code> is necessarily expensive. Perhaps the <code>hash</code> function could be changed to normalise line endings instead?</p>",
        "id": 379443876,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1690539662
    },
    {
        "content": "<p>not easily, it is written in C and you can't really make the necessary changes from lean without allocating a new string</p>",
        "id": 379444434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690539764
    },
    {
        "content": "<p>you could write the <code>replace</code> in C as well, of course</p>",
        "id": 379444585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690539787
    },
    {
        "content": "<p>Ah, unfortunate.</p>",
        "id": 379445882,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1690539973
    },
    {
        "content": "<p>The issue is probably that <code>replace</code> (or rather <code>substrEq</code>) does not use <code>get'</code> yet <a href=\"https://github.com/leanprover/lean4/commit/20eeb4202f1aa95a789c85d5822700503c80d007\">https://github.com/leanprover/lean4/commit/20eeb4202f1aa95a789c85d5822700503c80d007</a>. So I'd suggest writing a custom specialization of <code>replace</code></p>",
        "id": 379446051,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690539994
    },
    {
        "content": "<p>SIMD memchr when? <span aria-label=\"sunglasses\" class=\"emoji emoji-1f60e\" role=\"img\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 379450666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690540723
    },
    {
        "content": "<p>After zenbleed is patched!</p>",
        "id": 379533039,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1690555374
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2369\">lean4#2369</a></p>",
        "id": 379680199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690599160
    }
]