[
    {
        "content": "<p>In Lean 4, is there a way to pattern match on a list like in Haskell or Elixir ? It looks like we can only use the cons constructor aka <code>::</code> and that the matching has to be exhaustive. Or maybe we can say that the type of list is list of <code>Nat</code> of length 2 and then the solution <code>fun (x :: y :: _)</code> would work but I guess that the more elegant <code>fun [x, y]</code> would not because of a parsing error.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"c1\">-- (1) OK. evaluates to [3, 7]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">)]</span>\n\n<span class=\"c1\">-- (2) unexpected token ','; expected ']'</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span>\n\n<span class=\"c1\">-- (3) missing cases:</span>\n<span class=\"c1\">-- (List.cons _ [])</span>\n<span class=\"c1\">-- []</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span>\n\n<span class=\"c1\">-- (4) OK. evaluates to [3, 7]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sum</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">_x</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">_xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"k\">#eval</span> <span class=\"n\">List.map</span> <span class=\"n\">sum</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 399753312,
        "sender_full_name": "Ludovic Kuty",
        "timestamp": 1698854237
    },
    {
        "content": "<p>you can match arbitrary length if you want. see <a href=\"https://github.com/SchrodingerZhu/LeanGccBackend/blob/main/tests/PlainLog2.lean\">https://github.com/SchrodingerZhu/LeanGccBackend/blob/main/tests/PlainLog2.lean</a></p>",
        "id": 399757427,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698855472
    },
    {
        "content": "<p>you can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]]</span>\n</code></pre></div>",
        "id": 399758167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698855744
    },
    {
        "content": "<p><code>fun [x, y] =&gt; ...</code> is a parsing error because <code>[Foo]</code> is a kind of binder, representing an instance implicit variable of type <code>Foo</code></p>",
        "id": 399758584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698855915
    },
    {
        "content": "<p>but <code>fun ([x, y]) =&gt; ...</code> parses as expected</p>",
        "id": 399758617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698855929
    },
    {
        "content": "<p>(and gives the same 'missing cases' error as the other examples)</p>",
        "id": 399758648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698855944
    },
    {
        "content": "<p>OK, thank you <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 399759275,
        "sender_full_name": "Ludovic Kuty",
        "timestamp": 1698856137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663680\">Ludovic Kuty</span> has marked this topic as resolved.</p>",
        "id": 399759391,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698856158
    }
]