[
    {
        "content": "<p>Suppose I have this simple function that promises to return a <code>Nat</code> thats 1-more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Now suppose I want to add a silly requirement that <code>m &gt; 0</code>. The <code>m</code> in the range stops referring to the argument:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc'</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>I can fix it by somewhat heavyweight syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inc''</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m_pos</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m_pos.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Is there some lightweight syntax to use the same binding both for the argument's refinement and in other places that depend on it?</p>\n<p>Many thanks!!</p>",
        "id": 387461820,
        "sender_full_name": "Phil Nguyen",
        "timestamp": 1693087665
    },
    {
        "content": "<p>Not that I'm aware of :/ this could of course be solved via some specialized elaborator support, but I don't think anything like that exists.</p>\n<p>I think the standard solution is to just pass hypotheses unpacked (i.e. <code>(m : Nat) -&gt; m &gt; 0 -&gt; ...</code>). I agree it's not the most satisfying solution.</p>",
        "id": 387462854,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693088685
    },
    {
        "content": "<p>fwiw, I'd support adding <code>(m : Nat // m &gt; 0)</code> as a binder notation that is elaborated to <code>(m : {m : Nat // m &gt; 0})</code>. Small change but does make it much more readable IMO.</p>",
        "id": 387462969,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693088798
    },
    {
        "content": "<p>On the other hand, common wisdom is that it's better to curry your functions. The argument <code>{m : Nat // m &gt; 0}</code> is just waiting to be curried!</p>",
        "id": 387463018,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693088868
    },
    {
        "content": "<p>(I've had this same idea for <code>//</code> with binders before. It'd be fun to be able to experiment with these sorts of extensions, but binder syntax is sadly not extensible.)</p>",
        "id": 387463117,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693088947
    }
]