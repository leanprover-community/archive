[
    {
        "content": "<p>I just updated a project to leanprover/lean4:nightly-2023-02-10 and I'm getting errors I don't understand.  On this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkExists</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Level</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bi</span> <span class=\"o\">:</span> <span class=\"n\">BinderInfo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkApp2</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Exists</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">])</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">mkLambda</span> <span class=\"n\">x</span> <span class=\"n\">bi</span> <span class=\"n\">t</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get an error on <code>mkApp2</code>.  The error is <code>unknown identifier 'mkApp2'</code>.  If I add <code>import Mathlib</code> (which I wouldn't think would have anything to do with this), then the error on <code>mkApp2</code> goes away, but I get an error on the <code>l</code> of <code>mkConst ``Exists [l]</code>.  The error is <code>expected '⁻¹]'</code>.</p>\n<p>Anyone know what I'm doing wrong?</p>",
        "id": 328305878,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676571674
    },
    {
        "content": "<p>This worked on a nightly from about a week earlier.</p>",
        "id": 328306070,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676571728
    },
    {
        "content": "<p>OK, I understand the first error.  I was trying to make a MWE by pulling this definition out of a larger file, and I forgot to include a required <code>import</code>.  But I still don't understand the second error, which is the error I started getting in the larger file when I updated from nightlly-2023-02-03 to nightly-2023-02-10.</p>",
        "id": 328478580,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676642784
    },
    {
        "content": "<p>Presumably due to this somehow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">OreLocalization</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span><span class=\"o\">:</span><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">1075</span> <span class=\"n\">R</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">S</span> <span class=\"s2\">\"⁻¹]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OreLocalization</span> <span class=\"n\">R</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 328479597,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676643068
    },
    {
        "content": "<p>You <em>were</em> trying to invert the ring <code>Exists</code> at <code>l</code>, right?</p>",
        "id": 328479997,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676643194
    },
    {
        "content": "<p>Yes, that must be it.  So how do I write a list with one entry now without Lean expecting a superscript -1?</p>",
        "id": 328482293,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676643802
    },
    {
        "content": "<p>Maybe <code>[(x\\inv)]</code></p>",
        "id": 328482406,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676643835
    },
    {
        "content": "<p>I guess for now you can not import all of mathlib</p>",
        "id": 328482591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676643871
    },
    {
        "content": "<p>Do I have to write <code>l :: []</code> now?</p>",
        "id": 328484392,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676644397
    },
    {
        "content": "<p>That also works</p>",
        "id": 328484838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676644514
    },
    {
        "content": "<p>(I hope)</p>",
        "id": 328484867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676644523
    },
    {
        "content": "<p>What is the purpose of the <code>1075</code> in the <code>notation</code> declaration?  Does that set this notation to have a very high precedence?  Is that the reason Lean is preferring this interpretation over the List interpretation?</p>",
        "id": 328490096,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676645841
    },
    {
        "content": "<p>The binding power of 1075 is even bigger than function application (or at least it was in Lean 3)</p>",
        "id": 328491644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676646241
    },
    {
        "content": "<p>That mathlib notation should probably use <code>noWs</code> (for which it needs to become a macro)</p>",
        "id": 328491939,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676646319
    },
    {
        "content": "<p>Perhaps it should also be scoped? Ring localization is not that widespread.</p>",
        "id": 328576566,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1676673692
    }
]