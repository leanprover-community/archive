[
    {
        "content": "<p>Is there a simpler way to define <code>VarName</code> here so that Lean still differentiates it as its own type separate from <code>PredName</code> and <code>DefName</code> when they are defined in the same manner? That is, I want to get an error when a term of one of <code>VarName</code>, <code>PredName</code> or <code>DefName</code> is used where it is supposed to be one of the other, and this works, but I am wondering if there is a simpler way.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">VarName</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">VarName</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">VarName.toString</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">VarName.mk</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">VarName</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.toString</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">VarName</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">reprPrec</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.toString.toFormat</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">VarName</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>but it didn't complain when I used a term of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">DefName</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>where one of <code>VarName</code> was expected.</p>",
        "id": 384127912,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691803334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> Afaik, your approach here is the standard way to achieve that with one caveat: the standard style is to use a structure rather than an inductive. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">VarName</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>Also, since <code>String</code> is a <code>structure</code> itself, one can also just do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">VarName</span> <span class=\"kd\">extends</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>which has the advantage of giving you all of the dot notation of <code>String</code> for <code>VarName</code> for free.</p>",
        "id": 384128802,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691803743
    },
    {
        "content": "<p>That is much simpler. Thank you!</p>",
        "id": 384129639,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691804109
    },
    {
        "content": "<p>I guess I still need to include the definitions of the instances? If I don't, this gives \"failed to synthesize instance ToString VarName\" for the <code>eval</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">VarName</span> <span class=\"kd\">extends</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">[(</span><span class=\"n\">VarName.mk</span> <span class=\"s2\">\"a\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">VarName.mk</span> <span class=\"s2\">\"b\"</span><span class=\"o\">)]</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n</code></pre></div>",
        "id": 384134913,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691806507
    },
    {
        "content": "<p>This comes up when I try to define <code>toString</code> for a type that uses these. For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Formula</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"o\">:</span> <span class=\"n\">PredName</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span> <span class=\"bp\">→</span> <span class=\"n\">Formula</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Formula.toString</span> <span class=\"o\">:</span> <span class=\"n\">Formula</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pred_const_</span> <span class=\"n\">X</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"s2\">\"({X} {xs})\"</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Formula</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toString</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.toString</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Formula</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">reprPrec</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">F</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">F.toString.toFormat</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 384136090,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691807144
    },
    {
        "content": "<p>Which is quite ok, I'm just wondering if that is right.</p>",
        "id": 384136495,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691807348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"139442\">@Kayla Thomas</span> Yeah, that is correct. There does not currently exist a way to automatically derive the instances from the wrapped object.</p>",
        "id": 384139431,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691808949
    },
    {
        "content": "<p>Ok. Thank you.</p>",
        "id": 384139530,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1691808988
    }
]