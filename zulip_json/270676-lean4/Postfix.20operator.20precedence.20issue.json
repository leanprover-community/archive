[
    {
        "content": "<p>I'd like to report a minor issue with operator levels that I ran into when upgrading from nightly build 2021-03-22 to 2021-03-23 -- or maybe it's just a documentation problem. I define a postfix <code>⁻¹</code> operator as described in <code>syntax.md</code>, but I had to increase its level to at least 1024 so I could use it in function arguments without superfluous parentheses. Up to 2021-03-22, this worked with all levels &gt;= 1024, but since 2021-03-23, only 1023 and 1024 work; otherwise it binds too strongly. In any case, 1000 is too weak, and I'm a bit concerned that <code>max</code> is actually defined to be 1000. Am I missing something?</p>",
        "id": 233383689,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1617741156
    },
    {
        "content": "<p>Do you have examples where the binding is \"too strong\" and what you expect?</p>",
        "id": 233410743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617754285
    },
    {
        "content": "<p>The precendence of application is 1024, which explains why it would be relevant here. For example, <code>f x⁻¹</code> is interpreted as <code>(f x)⁻¹</code> if the precedence is less than 1024 and <code>f (x⁻¹)</code> if it is higher than 1024. (If it is equal then I guess it depends on whether it is left- or right-associative, and I doubt this is what you want in any case)</p>",
        "id": 233410952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617754429
    },
    {
        "content": "<p><code>max</code> is 1024. 1000 was a typo in syntax.md.</p>",
        "id": 233443883,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617780041
    },
    {
        "content": "<p>Thanks, that clears it up.<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I hadn't realized this, but it seems that since March 23 the operator definition is simply ignored if a precedence higher than 1024 is specified.</p>",
        "id": 233555359,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1617827150
    },
    {
        "content": "<p>As written in <a href=\"https://leanprover.github.io/lean4/doc/syntax.html#notations-and-precedence\">https://leanprover.github.io/lean4/doc/syntax.html#notations-and-precedence</a>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"s2\">\"⁻¹\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n</code></pre></div>\n<p>is (now) expanded to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"n\">arg</span><span class=\"o\">:</span><span class=\"mi\">1025</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span> <span class=\"n\">arg</span>\n</code></pre></div>\n<p>Since there is no other notation at this level, <code>arg</code> cannot be filled, yes. I'm not sure there is a practical reason to ever go over <code>max</code>.</p>",
        "id": 233559328,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1617828846
    },
    {
        "content": "<blockquote>\n<p>I'm not sure there is a practical reason to ever go over max.</p>\n</blockquote>\n<p>I think the name <code>max</code> is a misnomer here. The precedence of application is 1024, which is by no means (should not be) the highest precedence. Why? Because you might want things that bind tighter than application, like these postfix operator examples. <code>max</code> should be something like 2048 at least and let the precedence of application stay at 1024.</p>",
        "id": 233567254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617831349
    },
    {
        "content": "<p>The only things that should have \"max precedence\" are parentheses and atoms</p>",
        "id": 233567365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617831396
    }
]