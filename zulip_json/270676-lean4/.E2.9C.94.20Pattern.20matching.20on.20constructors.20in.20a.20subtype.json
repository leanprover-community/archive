[
    {
        "content": "<p>If I want a subtype where I can pattern match on the underlying value, such as a product, is there a good way to do this? In the code below, I've been doing the first example, but I would ideally like to do the second one or something similar</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{(</span><span class=\"n\">q₁</span><span class=\"o\">,</span> <span class=\"n\">q₂</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>\n<p>Additionally, it's a bit unclear to me why the following does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This is the same as the first example except <code>q</code> is not explicitly annotated. That being said, it should be able to (and does as demonstrated by highlighting <code>q</code> in VSCode) infer that <code>q</code> is <code>Nat x Nat</code>. Despite this, the first and second projections do not work unless I explicitly provide the annotation.</p>",
        "id": 376470320,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1689713150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483794\">Zach Battleman</span> <a href=\"#narrow/stream/270676-lean4/topic/Pattern.20matching.20on.20constructors.20in.20a.20subtype/near/376470320\">said</a>:</p>\n<blockquote>\n<p>If I want a subtype where I can pattern match on the underlying value, such as a product, is there a good way to do this? In the code below, I've been doing the first example, but I would ideally like to do the second one or something similar</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{(</span><span class=\"n\">q₁</span><span class=\"o\">,</span> <span class=\"n\">q₂</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q₁</span> <span class=\"n\">q₂</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"c1\">-- does not work</span>\n</code></pre></div>\n<p>Additionally, it's a bit unclear to me why the following does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This is the same as the first example except <code>q</code> is not explicitly annotated. That being said, it should be able to (and does as demonstrated by highlighting <code>q</code> in VSCode) infer that <code>q</code> is <code>Nat x Nat</code>. Despite this, the first and second projections do not work unless I explicitly provide the annotation.</p>\n</blockquote>\n<p>The reason why <code>{(q₁, q₂) // p q₁ q₂}</code> doesn't work is because the left-hand side expects an ident here (so just a variable name), not an expression/a pattern. <br>\n<code>example : {q // p q.1 q.2} := ⟨(n, m), foo⟩</code> fails because the .1 and .2 notations are not only available for products, and Lean doesn't manage to deduce from your uses here that q is supposed to be a product. Writing <code>example : {q // p (Prod.fst q) q.2} := ⟨⟨n, m⟩, foo⟩\n</code> gives enough type information for this to write though.</p>",
        "id": 376471993,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689713744
    },
    {
        "content": "<p>This is a silly question, but is <code>(n, m)</code> not a unique constructor for products? If I check that, the type is <code>Nat x Nat</code> which as far as I know <code>(n, m)</code> is the same as <code>Prod.mk n m</code></p>",
        "id": 376472921,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1689714033
    },
    {
        "content": "<p>Oh I'm realizing I lied when I said it was the same as the first example, I changed the implicit constructor of the product as well</p>",
        "id": 376473324,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1689714198
    },
    {
        "content": "<p>You could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">Subtype</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 376473335,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689714203
    },
    {
        "content": "<p>it is, the (n,m) syntax is just not allowed on the left-hand side of the subtype notation, this would work if you wrote <code>Subtype (fun (n, m) =&gt; p n m)</code></p>",
        "id": 376473386,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689714231
    },
    {
        "content": "<p>Well, <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> beat me to it</p>",
        "id": 376473436,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689714243
    },
    {
        "content": "<p>Ah thank you! I'm still a bit confused why this doesn't work though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Prod.mk</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 376473518,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1689714271
    },
    {
        "content": "<p>The type of a declaration can't be infered from the term, this would work though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"o\">(⟨</span><span class=\"n\">Prod.mk</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">foo</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">q.1</span> <span class=\"n\">q.2</span><span class=\"o\">})</span>\n</code></pre></div>",
        "id": 376473639,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689714327
    },
    {
        "content": "<p>gotcha, thanks!</p>",
        "id": 376473787,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1689714375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"483794\">Zach Battleman</span> has marked this topic as resolved.</p>",
        "id": 376475529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689715001
    }
]