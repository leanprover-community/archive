[
    {
        "content": "<p>can anyone reproduce an error at this instance declaration?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PrePostT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">post</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">PrePostT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">run</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">True</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"n\">bind</span> <span class=\"n\">ma</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">ma</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">pre</span><span class=\"o\">,</span><span class=\"n\">post</span><span class=\"o\">,</span><span class=\"n\">run</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">pre</span>   <span class=\"o\">:=</span> <span class=\"n\">pre</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">post</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pre</span>\n      <span class=\"o\">,</span> <span class=\"n\">post</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">post</span> <span class=\"n\">b</span>\n      <span class=\"o\">,</span> <span class=\"n\">run</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">run</span> <span class=\"n\">hp</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n        <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I get an error complaining that <code>map</code> etc are not defined, even though they should be filled in with default values.</p>",
        "id": 347218348,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680716799
    },
    {
        "content": "<p>I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fields</span> <span class=\"n\">missing</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">map'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">mapConst'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">seq'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">seqLeft'</span>\n</code></pre></div>",
        "id": 347219959,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1680717249
    },
    {
        "content": "<p>This works though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PrePostT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">post</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">pre</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"bp\">//</span> <span class=\"n\">post</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"o\">(</span><span class=\"n\">PrePostT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">pre</span> <span class=\"o\">:=</span> <span class=\"n\">True</span><span class=\"o\">,</span> <span class=\"n\">post</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">run</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">True</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">PrePostT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"n\">ma</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">ma</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">pre</span><span class=\"o\">,</span><span class=\"n\">post</span><span class=\"o\">,</span><span class=\"n\">run</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">{</span> <span class=\"n\">pre</span>   <span class=\"o\">:=</span> <span class=\"n\">pre</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">post</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pre</span>\n      <span class=\"o\">,</span> <span class=\"n\">post</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">post</span> <span class=\"n\">b</span>\n      <span class=\"o\">,</span> <span class=\"n\">run</span>   <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">run</span> <span class=\"n\">hp</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">)</span>\n        <span class=\"n\">pure</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">hb</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">PrePostT</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 347220584,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1680717433
    },
    {
        "content": "<p>good to know it's not just me</p>",
        "id": 347230947,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680720536
    }
]