[
    {
        "content": "<p>A function I am trying to define presumably needs a manual proof of termination. This is my current start (the function definition isn’t what it will be, but it already shows the problem):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span>\n  <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>  <span class=\"bp\">+</span>\n  <span class=\"n\">List.sum</span> <span class=\"o\">((</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n</code></pre></div>\n<p>At this point I have two goals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Tactic</span> <span class=\"n\">state</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>But it seems that if I now try to enter a tactic like <code>apply Nat.sub_lt</code> lean applies it to every goal.</p>\n<p>I’d naively expect I can use bullets to focus on the individual goals, but that does not work.</p>\n<p>What is the nice way to interactively discharge these obligations one after another?</p>",
        "id": 357083772,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1683660822
    },
    {
        "content": "<p>You could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span>\n  <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>  <span class=\"bp\">+</span>\n  <span class=\"n\">List.sum</span> <span class=\"o\">((</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 357085067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683661247
    },
    {
        "content": "<p>Ah, you put the proof into the definition. Didn’t think of that. Thanks!</p>",
        "id": 357085184,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1683661291
    },
    {
        "content": "<p>Hmm, but maybe the have needs to be moved around. It's not the right context.</p>",
        "id": 357085211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683661300
    },
    {
        "content": "<p>As Adam says, you're supposed to make a <code>have</code>-statement for each termination goal inside the main proof.  I actually don't like this setup -- I wish that it were possible to truly write the termination proof in a code block begun by \"decreasing by\" like you were trying to do.</p>",
        "id": 357085252,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683661316
    },
    {
        "content": "<p>At the first sorry you don't get the <code>n \\neq 0</code> assumption</p>",
        "id": 357085267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683661319
    },
    {
        "content": "<p>Okay, we just need to name the hypothesis:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span>\n  <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>  <span class=\"bp\">+</span>\n  <span class=\"n\">List.sum</span> <span class=\"o\">((</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 357085496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683661386
    },
    {
        "content": "<p>if you use <code>termination_by v n p =&gt; n</code> in addition the first proof is also not necessary. Going to a more <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> style you can write it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.sum</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">xs.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">Nat.add</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"n\">recv</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n      <span class=\"k\">have</span> <span class=\"n\">decrease</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"n\">rest</span> <span class=\"o\">:=</span> <span class=\"n\">List.sum</span> <span class=\"o\">((</span><span class=\"n\">List.map</span> <span class=\"n\">recv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)))</span>\n    <span class=\"n\">term</span> <span class=\"bp\">+</span> <span class=\"n\">rest</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">v</span> <span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>(also please get some spacing in your code I am having flashback to my numeric  profs MATLAB :P</p>",
        "id": 357085500,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683661388
    },
    {
        "content": "<p>In lecture notes for students, I implemented a hack for this: an extension to <code>decreasing_tactic</code> which lets you tag with <code>@[decreasing]</code> lemmas for use in any <code>decreasing_by</code> proof which might occur.  For example, see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[decreasing]</span> <span class=\"kd\">theorem</span> <span class=\"n\">irrat_aux_wf</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n</code></pre></div>\n<p>in <a href=\"https://hrmacbeth.github.io/math2001/07_Number_Theory.html#the-square-root-of-two\">https://hrmacbeth.github.io/math2001/07_Number_Theory.html#the-square-root-of-two</a></p>",
        "id": 357085604,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1683661424
    },
    {
        "content": "<p><del>Ah, and <code>aesop</code> can discharge these goals. Probably a big hammer, but very nice.</del></p>\n<p>Not true, syntax error on the next line <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 357085764,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1683661476
    },
    {
        "content": "<p>A Lean 4 gotcha is that you can see the \"no goals\" message but not be done; there could be a red squiggle either below, or on the line of the statement you had thought you were proving (possibly quite some way above). The <code>done</code> tactic is a good way of checking that you're actually done.</p>",
        "id": 357086721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683661819
    },
    {
        "content": "<p>Ok, this actually works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Choose.Multinomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> all tails -/</span>\n  <span class=\"o\">(</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span>\n    <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span>\n      <span class=\"n\">apply</span> <span class=\"n\">hn</span>\n    <span class=\"bp\">.</span> <span class=\"n\">simp</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n  <span class=\"o\">)</span> <span class=\"bp\">+</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> j &lt; n tails, so n-j heads -/</span>\n    <span class=\"n\">Nat.choose</span> <span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Pick best next step -/</span>\n    <span class=\"n\">Finset.sup'</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span>\n        <span class=\"n\">cases'</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">Hj</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Finset.nonempty_range_iff.2</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_ne_zero_of_lt</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Hj</span>\n      <span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">apply</span> <span class=\"n\">Nat.sub_lt</span>\n          <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span>\n            <span class=\"n\">apply</span> <span class=\"n\">hn</span>\n          <span class=\"bp\">.</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_add_right</span>\n            <span class=\"n\">simp</span>\n        <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">p</span>\n      <span class=\"o\">)</span>\n</code></pre></div>\n<p>Works, but somehow not what I’d want to show someone saying “look, I formalized your simple math equation in lean”. I always feel very incapable coming back to lean after a longer break, especially wrt to automation tactics.</p>",
        "id": 357090481,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1683663087
    },
    {
        "content": "<p>Joachim's end of message got cut off, btw:</p>\n<blockquote>\n<p>Works, but somehow not what I’d want to show someone saying “look, I formalized your simple math equation in lean”. I always feel very incapable coming back to lean after a longer break, especially wrt to automation tactics.</p>\n</blockquote>",
        "id": 357091869,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1683663639
    },
    {
        "content": "<p>It does lend itself nicely to automation with Aesop</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> all tails -/</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">p</span>\n  <span class=\"bp\">+</span>\n  <span class=\"bp\">∑</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> j &lt; n tails, so n-j heads -/</span>\n    <span class=\"n\">Nat.choose</span> <span class=\"n\">j</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">*</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Pick best next step -/</span>\n    <span class=\"n\">Finset.sup'</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">j</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"n\">decreasing_with</span> <span class=\"n\">aesop</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">safe</span> <span class=\"n\">Nat.sub_lt</span><span class=\"o\">,</span> <span class=\"n\">safe</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357095558,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683665052
    },
    {
        "content": "<p>Though I think you may have the argument order of <code>choose</code> mixed up</p>",
        "id": 357095588,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683665069
    },
    {
        "content": "<p>Thanks for showing how that would work! Much nicer. I guess I was expecting <code>aesop</code> to solve such lemmas automatically, like (I believe?) Isabelle’s auto would. Does <code>aesop</code> try less things by default?</p>",
        "id": 357170522,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1683698871
    },
    {
        "content": "<p>Yes, Aesop's current default rule set is very conservative <a href=\"https://github.com/JLimperg/aesop/blob/master/Aesop/BuiltinRules.lean\">https://github.com/JLimperg/aesop/blob/master/Aesop/BuiltinRules.lean</a>. This may improve when mathlib4 starts using it for more generic proof automation, right now I believe it is mostly used to reimplement topic-specific automation like in category theory</p>",
        "id": 357197842,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683706207
    },
    {
        "content": "<p>Of course the situation in Isabelle is a bit different since auto is built-in, so core libraries can be designed with it in mind</p>",
        "id": 357198159,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683706269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 357297961,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683726571
    }
]