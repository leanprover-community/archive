[
    {
        "content": "<p>How can I produce <code>Syntax</code> that contains a comment?</p>\n<p>I'd like to build something like <code>rw [h] -- t</code> as a <code>Syntax</code>, starting from <code>h t : Expr</code>, by delaborating both <code>h</code> and <code>t</code>. The intention here is to generate a \"Try this\" that shows the type of the result after the rewrite.</p>",
        "id": 342467689,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679026202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I have been working on something related, though I am using trace messages rather than comments: <a href=\"https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanCodePrompts/TacticExtraction.lean\">https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanCodePrompts/TacticExtraction.lean</a>. </p>\n<p>The code works by stepping through the sequence of tactics and tracing the result of their application each time, making special provisions for some tactics like <code>simp</code> (to output the full <code>simp only</code> message) and <code>rw</code> (to output the goal state after each rewrite in a sequence of rewrites). I am also intercepting Lean's <code>by</code> tactic to output trace messages by default (an idea due to Leo de Moura and Mac), so any file that imports this one will have tactic proofs with trace messages.</p>",
        "id": 342473120,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1679030532
    },
    {
        "content": "<p>I'm doing something else: not analyzing existing tactic blocks, but making suggestions from scratch, in another analogue of <code>library_search</code>.</p>",
        "id": 342473644,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679030976
    },
    {
        "content": "<p>Here is what seems the correct code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rwCommentSyntax</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">hStx</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.delab</span> <span class=\"n\">h</span>\n  <span class=\"k\">let</span> <span class=\"n\">tpp</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx1</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">hStx</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx2</span> <span class=\"o\">:=</span> <span class=\"n\">mkAtom</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"-- {tpp}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx'</span> <span class=\"o\">:=</span> <span class=\"n\">Syntax.node2</span> <span class=\"o\">(</span><span class=\"n\">SourceInfo.none</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Tactic.rwSeq</span> <span class=\"n\">stx1</span> <span class=\"n\">stx2</span>\n  <span class=\"n\">return</span> <span class=\"n\">stx'</span>\n</code></pre></div>",
        "id": 342477788,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1679033459
    },
    {
        "content": "<p>Sorry, the above is wrong in a couple of places.</p>",
        "id": 342479349,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1679034331
    },
    {
        "content": "<p>I'm just getting</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">pretty</span> <span class=\"n\">print</span> <span class=\"n\">term</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">pp.rawOnError</span> <span class=\"n\">true'</span> <span class=\"n\">for</span> <span class=\"n\">raw</span> <span class=\"n\">representation</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or with that option</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"n\">pretty</span> <span class=\"n\">printing</span> <span class=\"n\">syntax</span><span class=\"o\">:</span> <span class=\"n\">parenthesize</span><span class=\"o\">:</span> <span class=\"n\">uncaught</span> <span class=\"n\">backtrack</span> <span class=\"n\">exception.</span> <span class=\"n\">Falling</span> <span class=\"n\">back</span> <span class=\"n\">to</span> <span class=\"n\">raw</span> <span class=\"n\">printer.</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">Tactic.rwSeq</span>\n <span class=\"o\">(</span><span class=\"n\">Tactic.rwSeq</span> <span class=\"s2\">\"rw\"</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Tactic.rwRuleSeq</span> <span class=\"s2\">\"[\"</span> <span class=\"o\">[(</span><span class=\"n\">Tactic.rwRule</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">Term.explicit</span> <span class=\"s2\">\"@\"</span> <span class=\"bp\">`</span><span class=\"n\">List.map_append</span><span class=\"o\">))]</span> <span class=\"s2\">\"]\"</span><span class=\"o\">)</span> <span class=\"o\">[])</span>\n <span class=\"s2\">\"-- @List.map_append\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>when I try your code.</p>",
        "id": 342479515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679034422
    },
    {
        "content": "<p>Yes, it is wrong. I am trying to make the syntax match to that of the expression you need. Will try a bit more.</p>",
        "id": 342491805,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1679040107
    },
    {
        "content": "<p>Sorry, this is beyond me.</p>",
        "id": 342495266,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1679041358
    },
    {
        "content": "<p>Untested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">return</span> <span class=\"n\">stx1.raw.updateTrailing</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"-- {tpp}\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n</code></pre></div>",
        "id": 342500454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679043088
    },
    {
        "content": "<p>It compiles but the comment does not seem to be in the result.</p>",
        "id": 342501686,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1679043508
    },
    {
        "content": "<p>Oh, yes, if you then feed that into the pretty printer, it currently discards all comments and whitespace...</p>",
        "id": 342503185,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679043980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/generating.20syntax.20with.20comments.3F/near/342503185\">said</a>:</p>\n<blockquote>\n<p>Oh, yes, if you then feed that into the pretty printer, it currently discards all comments and whitespace...</p>\n</blockquote>\n<p>Can you point out where in the code this is done in the Lean 4 source? I need to do the same for async tactics (to pick up the tactic without trailing comments for code actions).</p>",
        "id": 349040268,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1681375529
    },
    {
        "content": "<p>My bad, this should indeed work <a href=\"https://github.com/leanprover/lean4/blob/8a302e6135bc1b0f1f2901702664c56cd424ebc2/src/Lean/PrettyPrinter/Formatter.lean#L332-L340\">https://github.com/leanprover/lean4/blob/8a302e6135bc1b0f1f2901702664c56cd424ebc2/src/Lean/PrettyPrinter/Formatter.lean#L332-L340</a></p>",
        "id": 349057663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681379209
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> <br>\nThis may solve <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's problem but I have the opposite problem - I want to get rid of trailing comments. Probably matching substrings will do this for me (using <code>Lean.Syntax.getSubstring?</code>).</p>",
        "id": 349064856,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1681381147
    },
    {
        "content": "<p>I had to do something similar recently - <a href=\"https://github.com/leanprover/lean4/commit/f9dcc9ca1bdf79a67220119daeda74ce3e821520\">https://github.com/leanprover/lean4/commit/f9dcc9ca1bdf79a67220119daeda74ce3e821520</a></p>",
        "id": 349067364,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681381836
    },
    {
        "content": "<p>Thanks. I wanted to also discard comments. Is there a quick way?</p>",
        "id": 349069268,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1681382403
    },
    {
        "content": "<p>They are discarded as well (except for doc-comments)</p>",
        "id": 349128186,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681396243
    }
]