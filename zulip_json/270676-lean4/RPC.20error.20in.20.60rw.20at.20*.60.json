[
    {
        "content": "<p>This example triggers an RPC error <code>Error updating: Error fetching goals: Rpc error: InternalError: unknown metavariable '?_uniq.9'.</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n</code></pre></div>\n<p>I'm not sure if this is specific to <code>le_antisymm</code> or something else. Removing the import makes the InternalError go away. Is this the expected behavior?</p>\n<p>An example of where one would use such a rewrite is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hba</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≥</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">le_antisymm</span> <span class=\"n\">hab</span> <span class=\"n\">hba</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 404182927,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700961729
    },
    {
        "content": "<p>The second example fails with the Rpc error, but also an interesting <code>application type mismatch</code> saying essentially that the <code>hba</code> in <code>le_antisymm hab hba</code> has type <code>b ≤ b</code></p>",
        "id": 404184746,
        "sender_full_name": "Thomas Zhu",
        "timestamp": 1700962838
    },
    {
        "content": "<p><a href=\"#narrow/stream/287929-mathlib4/topic/rw.20at.20*/near/388701289\">Previous discussion of <code>rw at *</code></a>.</p>",
        "id": 404227424,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1700991090
    },
    {
        "content": "<p>So, what's happening here is that the info trees (which determine what info is shown in the infoview) refer to metavariables created when elaborating <code>le_antisymm _ _</code>. However, when we use <code>at *</code>, internally we run <code>tryTactic</code> (which is just a <code>try ... catch</code> that returns <code>true</code> or <code>false</code> depending on success) on each available location. (We don't run <code>tryTactic</code> in other cases!)</p>\n<p>Running <code>try ... catch</code> in <code>TacticM</code> is dangerous, though, because if an error occurs (as it does here!) the state (which knows about all the mvars we've created during elaboration of <code>le_anti_symm _ _</code>) is rewound—but the info trees aren't! So now the infotrees refer to metavariables which no longer exist in the current context, and we get the error above.</p>\n<p>There are two solutions to this: either (1) rewind the infotrees on error as well, or (2) save the mvar context for the info trees (so that even if the tactic state no longer knows about these metavariables, the infotrees will, and we won't get an RPC error).</p>",
        "id": 404297098,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701039303
    },
    {
        "content": "<p>My feeling is that <code>try ... catch</code> in <code>TacticM</code>/<code>TermElabM</code> simply ought to be safe with respect to infotrees, and save the infotree contexts on error. But I'm not sure if there are complications that make this tricky—and maybe there are arguments for rewinding the infotrees by default instead. Either way, it would be nice to not have to fiddle with infotrees on each <code>try ... catch</code> to simply avoid an RPC error! :)</p>",
        "id": 404297191,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701039404
    },
    {
        "content": "<p>I've opened an issue about this: <a href=\"https://github.com/leanprover/lean4/pull/2965\">lean4#2965</a></p>",
        "id": 404299013,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1701041075
    }
]