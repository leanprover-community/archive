[
    {
        "content": "<p>I have just run <code>lake update</code> on my project which depends on mathlib. I then ran <code>lake exe cache get!</code> to get the mathlib cache. But I still can't compile anything. How do I get mathlib to work again?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">formal</span><span class=\"bp\">-</span><span class=\"n\">piops</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">update</span>\n<span class=\"n\">updating</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">to</span> <span class=\"n\">revision</span> <span class=\"mi\">4026</span><span class=\"n\">e6f81193cc3417cf989e3cf26d72c99d116a</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">5</span><span class=\"bp\">`</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">formal</span><span class=\"bp\">-</span><span class=\"n\">piops</span> <span class=\"bp\">%</span>\n<span class=\"n\">boltonbailey</span><span class=\"bp\">@</span><span class=\"n\">starlight</span> <span class=\"n\">formal</span><span class=\"bp\">-</span><span class=\"n\">piops</span> <span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span><span class=\"bp\">!</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3777</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">609</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3777</span><span class=\"bp\">/</span><span class=\"mi\">3777</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">16</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">some</span> <span class=\"n\">files</span> <span class=\"n\">were</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">cache.</span>\n<span class=\"n\">This</span> <span class=\"n\">usually</span> <span class=\"n\">means</span> <span class=\"n\">that</span> <span class=\"n\">your</span> <span class=\"kn\">local</span> <span class=\"n\">checkout</span> <span class=\"n\">of</span> <span class=\"n\">mathlib4</span> <span class=\"n\">has</span> <span class=\"n\">diverged</span> <span class=\"k\">from</span> <span class=\"n\">upstream.</span>\n<span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">push</span> <span class=\"n\">your</span> <span class=\"n\">commits</span> <span class=\"n\">to</span> <span class=\"n\">a</span> <span class=\"n\">branch</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">mathlib4</span> <span class=\"n\">repository</span><span class=\"o\">,</span> <span class=\"n\">CI</span> <span class=\"n\">will</span> <span class=\"n\">build</span> <span class=\"n\">the</span> <span class=\"n\">oleans</span> <span class=\"n\">and</span> <span class=\"n\">they</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">available</span> <span class=\"n\">later.</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">609</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">619</span> <span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 392109769,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695213935
    },
    {
        "content": "<p>purge the cache folder. ~/.cache</p>",
        "id": 392110003,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695214022
    },
    {
        "content": "<p>But first, did you update your own lean-toolchain file?</p>",
        "id": 392110051,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695214040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392110051\">said</a>:</p>\n<blockquote>\n<p>But first, did you update your own lean-toolchain file?</p>\n</blockquote>\n<p>If this is necessary, <code>lake update</code> should do it for me</p>",
        "id": 392110352,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695214132
    },
    {
        "content": "<p>Also, if there is some kind of inconsistency causing a problem, an error should be thrown at some point saying so, it shouldn't just try to build and make an error.</p>",
        "id": 392110639,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695214227
    },
    {
        "content": "<p>Perhaps so, but while that's not the case, please follow the instructions: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4</a></p>",
        "id": 392110768,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695214268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392110639\">said</a>:</p>\n<blockquote>\n<p>Also, if there is some kind of inconsistency causing a problem, an error should be thrown at some point saying so, it shouldn't just try to build and make an error.</p>\n</blockquote>\n<p>This was discussed a few months ago. The basic issue is that the current heuristic \"match mathlib version\" is just a heuristic which will make no sense for projects with complex dependency relationships</p>",
        "id": 392110868,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695214303
    },
    {
        "content": "<p>I think the argument: \"the fix that works in 99% of current Lean projects wouldn't work for projects with complex dependency relationships so let's not use this fix\" is really <em>really</em> bad.</p>",
        "id": 392111546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695214541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392110768\">said</a>:</p>\n<blockquote>\n<p>Perhaps so, but while that's not the case, please follow the instructions: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4</a></p>\n</blockquote>\n<p>Even after running these it's not working</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">boltonbailey</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.1.0-rc1/bin/lake print-paths Init Mathlib.GroupTheory.Sylow Mathlib.GroupTheory.Subgroup.Finite Mathlib.Data.Polynomial.Eval Mathlib.GroupTheory.OrderOfElement Mathlib.FieldTheory.Finite.Basic` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">incompatible</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">4</span><span class=\"bp\">`</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">missing</span> <span class=\"n\">manifest</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">one</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration.</span>  <span class=\"n\">Please</span> <span class=\"n\">restart</span> <span class=\"n\">the</span> <span class=\"n\">server</span> <span class=\"n\">after</span> <span class=\"n\">fixing</span> <span class=\"n\">the</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file.</span>\n</code></pre></div>",
        "id": 392111728,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695214594
    },
    {
        "content": "<p>purge the cache</p>",
        "id": 392111783,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695214614
    },
    {
        "content": "<p>The manifest issue sounds like something different as well</p>",
        "id": 392112030,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695214689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392111546\">said</a>:</p>\n<blockquote>\n<p>I think the argument: \"the fix that works in 99% of current Lean projects wouldn't work for projects with complex dependency relationships so let's not use this fix\" is really <em>really</em> bad.</p>\n</blockquote>\n<p>It is not that simple. Lean is a new and growing language with a lot of newcomers pushing in different directions. Basing these decisions on current usage hamstrings the language for other use cases, making the assumption a self-fulfilling prophecy.</p>",
        "id": 392112079,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695214705
    },
    {
        "content": "<p>And then, when you need proper dependency  management later (perhaps even in mathlib using projects), you are saddled with the technical debt of ensuring backwards compatibility.</p>",
        "id": 392112308,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695214796
    },
    {
        "content": "<p>I don't buy this. Fixing this issue would be trivial without making anything else more difficult.</p>",
        "id": 392112426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695214826
    },
    {
        "content": "<p>I think there's a shared understanding that there's still rough edges here that everyone would like to be smoother, but less so on the exact way to implement that</p>",
        "id": 392112493,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695214847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392111728\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392110768\">said</a>:</p>\n<blockquote>\n<p>Perhaps so, but while that's not the case, please follow the instructions: <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#updating-mathlib4</a></p>\n</blockquote>\n<p>Even after running these it's not working</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">boltonbailey</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.1.0-rc1/bin/lake print-paths Init Mathlib.GroupTheory.Sylow Mathlib.GroupTheory.Subgroup.Finite Mathlib.Data.Polynomial.Eval Mathlib.GroupTheory.OrderOfElement Mathlib.FieldTheory.Finite.Basic` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">improperly</span> <span class=\"n\">formatted</span> <span class=\"n\">manifest</span><span class=\"o\">:</span> <span class=\"n\">incompatible</span> <span class=\"n\">manifest</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"mi\">4</span><span class=\"bp\">`</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">missing</span> <span class=\"n\">manifest</span><span class=\"bp\">;</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">one</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration.</span>  <span class=\"n\">Please</span> <span class=\"n\">restart</span> <span class=\"n\">the</span> <span class=\"n\">server</span> <span class=\"n\">after</span> <span class=\"n\">fixing</span> <span class=\"n\">the</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can you try if just changing \"4\" to \"5\" in <code>lake-manifest.json</code> helps?</p>",
        "id": 392112605,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1695214881
    },
    {
        "content": "<p>Relevant thread: <a href=\"#narrow/stream/287929-mathlib4/topic/Lake.20update.20behaviour\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Lake.20update.20behaviour</a></p>",
        "id": 392112662,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695214898
    },
    {
        "content": "<p>We are talking about adding three lines of code to lake saying that when a user runs <code>lake update</code> in the project depending on mathlib then it should copy mathlib's lean-toolchain file.</p>",
        "id": 392112694,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695214908
    },
    {
        "content": "<p>But this is prevented by people who insist that mathlib is just a random Lean library with no special status at all.</p>",
        "id": 392112877,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695214953
    },
    {
        "content": "<p>It would be a terribly missed opportunity if we have a nice formal math library that is not usable for verifying systems that could do with a math library, because its build tool makes life hard for non-trivial non-purely-math projects</p>",
        "id": 392113070,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215016
    },
    {
        "content": "<p><code>rm -rf ~/.cache</code>, deleting the manifest, rerunning <code>lake update</code> worked, thanks.</p>",
        "id": 392113149,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695215040
    },
    {
        "content": "<p>What I would like at the very least is for <code>lake update</code> to alert me if my dependencies toolchains are different from my own.</p>",
        "id": 392113648,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695215181
    },
    {
        "content": "<p>They will almost always be different. Std will be on  one toolchain, Qq on another, and maybe future baseline dependencies too.</p>",
        "id": 392113771,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215217
    },
    {
        "content": "<p>Wait, so things are supposed to work even if the toolchains are different?</p>",
        "id": 392113863,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695215252
    },
    {
        "content": "<p>Check your current lean-toolchain files for dependencies</p>",
        "id": 392113941,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215278
    },
    {
        "content": "<p>I'm confused. If it's acceptable to lean for my project and my dependencies to be on different toolchains, then what was happening to me a few minutes ago?</p>",
        "id": 392114117,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695215328
    },
    {
        "content": "<p>I am not a language-minded person, so I don't know what a toolchain is really. The Rust book tells me it's \"a complete installation of a compiler and related tools\". Is that what it is for Lean?</p>",
        "id": 392114548,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695215475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392112877\">said</a>:</p>\n<blockquote>\n<p>But this is prevented by people who insist that mathlib is just a random Lean library with no special status at all.</p>\n</blockquote>\n<p>The compromise here would be:</p>\n<ul>\n<li>Collect the <code>lean-toolchain</code> files of all the non-<code>inherited</code> packages</li>\n<li>Let the user pick between them (with the auto-selection option being <code>mathlib</code>)</li>\n</ul>",
        "id": 392114630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695215509
    },
    {
        "content": "<p>In most cases there's only one non-inherited package anyway (mathlib)</p>",
        "id": 392114737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695215540
    },
    {
        "content": "<p>Bolton, the solution to the riddle is simple: mathlib is <em>not</em> a random library, it has takes precedence.</p>",
        "id": 392114833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695215572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392114117\">said</a>:</p>\n<blockquote>\n<p>I'm confused. If it's acceptable to lean for my project and my dependencies to be on different toolchains, then what was happening to me a few minutes ago?</p>\n</blockquote>\n<p>I'd love to see the design reason behind this.</p>",
        "id": 392114851,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392110003\">said</a>:</p>\n<blockquote>\n<p>purge the cache folder. ~/.cache</p>\n</blockquote>\n<p>If you're on Linux, <code>~/.cache</code> is used for all programs! It's best to purge <code>~/.cache/mathlib</code> only.</p>",
        "id": 392114942,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695215607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392114833\">said</a>:</p>\n<blockquote>\n<p>Bolton, the solution to the riddle is simple: mathlib is <em>not</em> a random library, it has takes precedence.</p>\n</blockquote>\n<p>Wrong. This is most likely the result of an on-the-fly decision that was taken to make it feasible to adapt quickly as mathlib  was being  ported and changed.</p>",
        "id": 392114999,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215624
    },
    {
        "content": "<p>Eric, there is no need to bother normal users. The default behavior should be to use mathlib's toolchain if mathlib is used. You can ask questions when mathlib isn't used or when lake update is called with a special flag for special situations.</p>",
        "id": 392115109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695215649
    },
    {
        "content": "<p>Normal users only have one such package so the question would never be shown to them</p>",
        "id": 392115159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695215671
    },
    {
        "content": "<p>This was roughly what Sebastian suggested here: <a href=\"#narrow/stream/287929-mathlib4/topic/Lake.20update.20behaviour\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Lake.20update.20behaviour</a></p>",
        "id": 392115221,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215690
    },
    {
        "content": "<p>But in the long run it is infeasible because there will likely be projects that need both mathlib and some other library, say from the PL side, natural sciences side or what not.</p>",
        "id": 392115402,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392114833\">said</a>:</p>\n<blockquote>\n<p>Bolton, the solution to the riddle is simple: mathlib is <em>not</em> a random library, it has takes precedence.</p>\n</blockquote>\n<p>When I look in my manifest file, I see lots of dependencies. <code>mathlib4</code> <code>std</code> <code>aesop</code> for example. Do all of these have different toolchains?</p>",
        "id": 392115508,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695215773
    },
    {
        "content": "<p>I suggest showing the message because if the user is presented with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">WARNING</span><span class=\"o\">:</span> <span class=\"n\">dependencies</span> <span class=\"n\">use</span> <span class=\"n\">incompatible</span> <span class=\"n\">lean</span> <span class=\"n\">versions</span><span class=\"o\">:</span>\n<span class=\"mi\">1</span><span class=\"bp\">.</span> <span class=\"n\">Lean</span> <span class=\"bp\">`</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">mathlib</span><span class=\"bp\">`</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">default</span><span class=\"o\">]</span>\n<span class=\"mi\">2</span><span class=\"bp\">.</span> <span class=\"n\">Lean</span> <span class=\"bp\">`</span><span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">your_other_project</span><span class=\"bp\">`</span><span class=\"o\">)</span>\n<span class=\"n\">Which</span> <span class=\"n\">version</span> <span class=\"n\">would</span> <span class=\"n\">you</span> <span class=\"n\">like</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]:</span>\n</code></pre></div>\n<p>that notifies them that probably they need to update the version of lean in <code>your_other_project</code> first</p>",
        "id": 392115513,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695215774
    },
    {
        "content": "<p>If you hamstring lake for the immediate requirement, then this will push away any future attempts to build libraries other than mathlib.</p>",
        "id": 392115620,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695215813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392115508\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392114833\">said</a>:</p>\n<blockquote>\n<p>Bolton, the solution to the riddle is simple: mathlib is <em>not</em> a random library, it has takes precedence.</p>\n</blockquote>\n<p>When I look in my manifest file, I see lots of dependencies. <code>mathlib4</code> <code>std</code> <code>aesop</code> for example. Do all of these have different toolchains?</p>\n</blockquote>\n<p>Read again my explanation: those other dependencies are not mathlib, hence they have no role in this story.</p>",
        "id": 392115854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1695215887
    },
    {
        "content": "<p>Those packages are irrelevant because they have <code>inherited: true</code></p>",
        "id": 392115906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695215907
    },
    {
        "content": "<p>In a typical manifest, <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/lake-manifest.json#L27\">there is only one <code>inherited: false</code></a> and it's mathlib</p>",
        "id": 392116106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695215986
    },
    {
        "content": "<p>I'm afraid you're going to have to spell this out more for me. Even though these other packages are not mathlib, they are still dependencies of my project, according to my manifest. How is it possible that these can coexist if they have different toolchains?</p>",
        "id": 392116368,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695216078
    },
    {
        "content": "<p>Anything in the manifest that has <code>inherited: true</code> will be updated to match the versions that are present in the non-inherited dependencies (i.e. mathlib). You know they can co-exist, because they built together in the mathlib4 CI.</p>",
        "id": 392116644,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216175
    },
    {
        "content": "<p>When I hear \"project A has dependencies B, C, D\" my understanding is that code in project A is supposed to be able to call code from projects B, C, and D. But if B, C, and D have all been compiled by different toolchains, I assume their binaries are all in different formats, and A will not be able to use them all.</p>",
        "id": 392116698,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695216196
    },
    {
        "content": "<p><code>lake-manifest</code> doesn't pull in compiled artifacts for typical B, C, D, only the source code</p>",
        "id": 392116789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216234
    },
    {
        "content": "<p><code>lake exe cache put</code> is only run by mathlib, so the versions in the cache are the ones that were built with the mathlib4 toolchain version</p>",
        "id": 392116890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216261
    },
    {
        "content": "<p>If you are not using <code>lake cache</code> (provided by Mathlib), then no compiling is happening anywhere except on your machine, and that is all happening with the <code>lean-toolchain</code> from your project.</p>",
        "id": 392116898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695216266
    },
    {
        "content": "<p>If an upstream dependency has a <em>different</em> <code>lean-toolchain</code> in its source repository, that is simply ignored, and things either break or don't break when you compile.</p>",
        "id": 392117038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695216307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392116106\">said</a>:</p>\n<blockquote>\n<p>In a typical manifest, <a href=\"https://github.com/leanprover-community/mathematics_in_lean/blob/master/lake-manifest.json#L27\">there is only one <code>inherited: false</code></a> and it's mathlib</p>\n</blockquote>\n<p>I think there's some confusion here because this <code>inherited</code> field is new, and <code>lake update</code> was <em>really</em> broken before it was added.</p>",
        "id": 392117125,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216332
    },
    {
        "content": "<p><code>lake cache</code> adds something slightly more complicated to the mix: that pulls down oleans, compiled on CI machines using the <code>lean-toolchain</code> in whichever version of Mathlib you are using.</p>",
        "id": 392117155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695216341
    },
    {
        "content": "<p>Ok I think I'm beginning to understand now, thank you all for your patience. When I <code>lake update</code> without updating my toolchain, I am compiling mathilb with an old compiler which might not correctly compile the current version of mathlib. It may be that it coincidentally works anyway, or works for some of the other dependencies, but it also may not.</p>",
        "id": 392117459,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695216431
    },
    {
        "content": "<p>I still feel like there should be some kind of warning that explicitly says \"you are trying to compile code with a toolchain that is not present in the repository for that code\".</p>",
        "id": 392117914,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695216576
    },
    {
        "content": "<p>Shreyas seemed to think that this would tend to mean a lot of warnings, because compiling dependencies with different toolchains is common. Still seems worth a warning though, no? This feels like the sort of thing which could throw a wrench in whatever the user is doing, so the user should be informed.</p>",
        "id": 392118316,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695216687
    },
    {
        "content": "<p>I think it's almost never common</p>",
        "id": 392118349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392117914\">said</a>:</p>\n<blockquote>\n<p>I still feel like there should be some kind of warning that explicitly says \"you are trying to compile code with a toolchain that is not present in the repository for that code\".</p>\n</blockquote>\n<p>I can get behind this. But now that lean is working towards a more \"stable\"release schedule, it might also make sense to have proper dependency management.</p>",
        "id": 392118376,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695216713
    },
    {
        "content": "<p>I'd be interested in seeing a project that exists right now that has more than one <code>inherited: false</code> dependency</p>",
        "id": 392118418,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> : You are looking at existing projects. Is the final goal of the lean 4 project  purely mathlib and its dependents? I often get the sense in these discussions that some more mathy people really believe this is the only focus of lean for good.</p>",
        "id": 392119039,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695216930
    },
    {
        "content": "<p><code>lake update</code> is never going to be run on projects that don't exist, so we should optimize for the ones that do</p>",
        "id": 392119264,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695216998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392119264\">said</a>:</p>\n<blockquote>\n<p><code>lake update</code> is never going to be run on projects that don't exist, so we should optimize for the ones that do</p>\n</blockquote>\n<p>Lean is a language, and languages live long. It is natural that the design process will take into account existing and future needs, which align with its stated goals ( being a programming language is included in this), unless what you really want is javascript for math.</p>",
        "id": 392119821,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695217158
    },
    {
        "content": "<p>More on topic: The idea of adding options for choosing among the non-inherited toolchains sounds nice as a fix for now.</p>",
        "id": 392121248,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695217642
    },
    {
        "content": "<p>I think this discussion about whether it's \"only mathematics\" or \"no mathematics\" driving design is unnecessary noise at the moment.</p>\n<p>The FRO's goals are to develop Lean 4 into a widely used language that supports users far beyond Mathlib and research mathematicians. At the same time, Mathlib is a huge part of the Lean ecosystem, now and (hopefully!) in 5 years time, and we want to make sure the tooling works well for mathematicians. We are well aware that there are lots of edges (some sharp, some rough!).</p>\n<p>Making the tooling work well for \"low-tech\" users is very important: we need to support the complicated use cases, but we need to get users in the door as well.</p>",
        "id": 392122191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695217923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> : Thanks, that really helps. We both agree that supporting non-techie users is very important. We also agree that we need to get users in the door. This is why, if we make instant decisions that work for the existing 99% projects, I fear that we will end up excluding new users who are keen on pushing in new directions. </p>\n<p>To take a simple, purely hypothetical, illustrative example,  suppose I want to write a utility in lean that relies on more than one dependency, say Mathlib (or some small part of it), some http server library, and some other utility libraries (say for GUI or handling forms). I choose an example like this, because in most languages this might be reasonably basic and something new programmers try as a first project. Since we are talking about lean it might also be nice to fiddle with mathlib and build something depending on it. Suppose, further, that I am merely a user of these libraries, and it is upto the respective maintainers to bump up the lean-toolchain. Suppose lake update simply matches the mathlib toolchain, which doesn't match the other libraries. How would I go about implementing my utility? For a new user this might simply reinforce the notion that unless they are doing something like the existing users (i.e. math), lean is going to throw up basic entry-level barriers.</p>\n<p>As for solutions, Eric and Bolton's suggestions seem to be good options. In the earlier thread Sebastian also suggested that projects which are started with <code>math</code> have this default behaviour for lake update, whereas other projects continue to work as is. In the longer run, it seems some dependency management is necessary. If it all happens transparently, then all the goals you mention would be met.</p>",
        "id": 392126184,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1695219041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>: In the short term, I have created <a href=\"https://github.com/leanprover-community/mathlib4/pull/7282\">mathlib4#7282</a>, which will add a check (and update the <code>lean-toolchain</code>!) if the workspace' s toolchain does not match Mathlib's.</p>",
        "id": 392192357,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695236902
    },
    {
        "content": "<p>That's awesome, thanks for taking your time and using your expertise to help smooth things out for users like me!</p>",
        "id": 392200147,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695240671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> Thanks! Unfortunately, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  does not seem to happy with it. :(</p>",
        "id": 392256781,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695278031
    },
    {
        "content": "<p>It should be fairly straightforward to move the logic into <code>cache</code> like I suggested, the effect for users should be approximately the same</p>",
        "id": 392256919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695278104
    },
    {
        "content": "<p>(also it should prompt the user before making the replacement, I don't like the idea of <code>lake build</code> modifying things outside the build directory without explicit approval from the user)</p>",
        "id": 392257334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695278366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I was honestly not sure what you were suggesting. Do you mean performing this check within <code>cache</code> itself? That seems hard as it does not have access to Lake configuration and thus directory structure (...oh, looking back at cache apparently it just hard codes all of that).</p>",
        "id": 392257353,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695278386
    },
    {
        "content": "<p>...I was resisting the urge to point out how <a href=\"https://github.com/leanprover/lean4/pull/2542\">a certain PR</a> would have been able to fix that issue</p>",
        "id": 392257461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695278444
    },
    {
        "content": "<p>but yes, <code>cache</code> currently solves the problem by ignoring it</p>",
        "id": 392257492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695278462
    },
    {
        "content": "<p><code>lean-cache</code> was written in a bit more principled way which is why it actually needs that data from lake</p>",
        "id": 392257537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695278489
    },
    {
        "content": "<p>I don't see why it can't be a warning in both places. Seems like good policy to just warn the user whenever they do something dangerous, and both \"compiling code with a toolchain it doesn't know about\" and \"getting cached oleans built with a different toolchain than the one in the directory\" sound dangerous to me.</p>",
        "id": 392257556,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1695278497
    },
    {
        "content": "<p>my proposal is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">checked</span> <span class=\"n\">out</span> <span class=\"n\">mathlib's</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">match</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">project's</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"o\">,</span>\n<span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">downloaded</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">will</span> <span class=\"n\">not</span> <span class=\"n\">work</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">build</span><span class=\"bp\">`</span> <span class=\"n\">will</span> <span class=\"n\">ignore</span> <span class=\"n\">them</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">Copy</span> <span class=\"n\">mathlib's</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">into</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">project</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 392257925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695278689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392257925\">said</a>:</p>\n<blockquote>\n<p>my proposal is something like:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">checked</span> <span class=\"n\">out</span> <span class=\"n\">mathlib's</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">match</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">project's</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span><span class=\"o\">,</span>\n<span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">downloaded</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">will</span> <span class=\"n\">not</span> <span class=\"n\">work</span> <span class=\"o\">(</span><span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">build</span><span class=\"bp\">`</span> <span class=\"n\">will</span> <span class=\"n\">ignore</span> <span class=\"n\">them</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n<span class=\"n\">Copy</span> <span class=\"n\">mathlib's</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span> <span class=\"n\">into</span> <span class=\"n\">the</span> <span class=\"n\">current</span> <span class=\"n\">project</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Y</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>On a side note: It would be nice if command line prompts could always be circumvented with flags for downstream tooling.</p>",
        "id": 392259117,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695279335
    },
    {
        "content": "<p>there is always <code>yes | </code> :P</p>",
        "id": 392261545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Get.20mathlib.20cache.20after.20updating.20mathlib.20dependency/near/392261545\">said</a>:</p>\n<blockquote>\n<p>there is always <code>yes | </code> :P</p>\n</blockquote>\n<p>Unfortunately that then requires downstream tooling to provide special handling for Windows :(</p>",
        "id": 392261817,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695280621
    },
    {
        "content": "<p>(I agree with you btw)</p>",
        "id": 392261859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> I agree as well. However, this seems very difficulty for an arbitrary <code>lake exe ...</code> as how and if the exe prompts is entirely up to it.</p>",
        "id": 392262002,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695280714
    },
    {
        "content": "<p>right, this is a <code>cache</code> flag</p>",
        "id": 392262031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280726
    },
    {
        "content": "<p><code>cache</code> already has some flags IIRC</p>",
        "id": 392262051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280735
    },
    {
        "content": "<p>I took the \"always\" in <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>'s statement to imply that he wanted this to be automatic for anything in Lake (which I agree would be nice; I just do not know how to accomplish it).</p>",
        "id": 392262173,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695280789
    },
    {
        "content": "<p>I think it was more like \"this is a CLI design principle that you should apply generally\"</p>",
        "id": 392262276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280819
    },
    {
        "content": "<p>No, it was just a comment about command line applications within the Lean ecosystem in general.</p>",
        "id": 392262288,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1695280823
    },
    {
        "content": "<p>Ah, my bad.</p>",
        "id": 392262329,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695280841
    },
    {
        "content": "<p>Yeah, having  a <code>-y</code> is always good design.</p>",
        "id": 392262372,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695280864
    },
    {
        "content": "<p>(and <code>-n</code> in this case)</p>",
        "id": 392262409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280878
    },
    {
        "content": "<p><code>-n</code> is harder because it often conflicts with the desired short name of other common options (i.e., anything countable).</p>",
        "id": 392262620,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695280959
    },
    {
        "content": "<p>modulo syntax bikeshedding</p>",
        "id": 392262638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280968
    },
    {
        "content": "<p>I don't think short names are too important here, anything seems fine</p>",
        "id": 392262691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695280992
    },
    {
        "content": "<p><code>---always-yes</code> and <code>--always-no</code> are the  long-form disambiguates.</p>",
        "id": 392262695,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695280994
    },
    {
        "content": "<p>well in this case I wouldn't have any <code>always</code> command</p>",
        "id": 392262761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695281030
    },
    {
        "content": "<p>it's just about this one option</p>",
        "id": 392262767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695281036
    },
    {
        "content": "<p><code>--update-toolchain=yes</code></p>",
        "id": 392262825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695281053
    },
    {
        "content": "<p><code>-y</code> seems fine for \"default everything\"</p>",
        "id": 392262855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695281072
    },
    {
        "content": "<p>That odd part is that usually for prompts with y/n and always-yes/always-no configurations one of the options generally cause the program to exit (hence the ability to just rely on <code>-y</code>). In cases were both do something, a specific option like you suggested is generally used.</p>",
        "id": 392262977,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695281130
    },
    {
        "content": "<p>maybe it should be <code>[Y/n/exit]</code>?</p>",
        "id": 392263084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695281166
    },
    {
        "content": "<p>at a prompt there is always ctrl-C</p>",
        "id": 392263105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695281179
    },
    {
        "content": "<p><code>[(Y)es/(n)o/e(x)it]</code></p>",
        "id": 392263187,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695281219
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 392263228,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695281237
    },
    {
        "content": "<p>After some time I wanted to update mathlib in my project. It was a bit frustrating experience, after running <code>lake update</code> I got mathlib with commit <code>1b346a7bb0c56b8d1f6526161359a75384276be0</code> and <code>lake exe cache get</code> failed. Could it be because CI failed for that commit? After multiple retries and deletion of <code>lake-packages</code> I ran <code>lake update</code> again, got <code>a5516f580a31bf7ec20be84cc4fe50824cd3e35a</code> commit and everything works.</p>",
        "id": 394873766,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696435767
    }
]