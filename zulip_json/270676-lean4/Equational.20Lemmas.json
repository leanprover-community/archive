[
    {
        "content": "<p>What are the equational lemmas called that are generated for definitions?<br>\nIn <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20failed.20to.20generate.20equational.20theorem\">this thread</a> there are examples like <code>@&lt;name&gt;._eq_1</code>, <code>@&lt;name&gt;._eq_2</code> and <code>@&lt;name&gt;._unfold</code>. When I try this in my project (nightly 2022-09-06) they don't exist though.</p>",
        "id": 298567715,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1663070331
    },
    {
        "content": "<p>In Lean 4, the lemmas are not eagerly generated like in Lean 3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"c1\">-- `simp` generates the lemmas here</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_2</span>\n</code></pre></div>\n<p>You can also use the API <code>Lean.Meta.getEqnsFor?</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getEqnsFor</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">fact</span>  <span class=\"c1\">-- generates the lemmas</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_2</span>\n</code></pre></div>",
        "id": 298568923,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663070751
    },
    {
        "content": "<p>How about an attribute to request eager equation generation? <code>@[simp]</code> presumably implies it anyway</p>",
        "id": 298569453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663070964
    },
    {
        "content": "<p>Yes, <code>@[simp] def ...</code> also forces the lemmas to be eagerly generated.</p>",
        "id": 298571140,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663071619
    },
    {
        "content": "<p>in fact for mathlib I would probably want to <em>disable</em> lazy equation generation and use that to find missing occurrences of the equation generation attribute. It's a bit of boilerplate though, since we will basically want this on every <code>def</code>. Maybe a set_option?</p>",
        "id": 298572273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663072017
    },
    {
        "content": "<p>What are the cases where we definitely <em>don't</em> want equations?</p>",
        "id": 298572453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663072083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Equational.20Lemmas/near/298572273\">said</a>:</p>\n<blockquote>\n<p>in fact for mathlib I would probably want to <em>disable</em> lazy equation generation and use that to find missing occurrences of the equation generation attribute. It's a bit of boilerplate though, since we will basically want this on every <code>def</code>. Maybe a set_option?</p>\n</blockquote>\n<p>Yes, we can add an option.</p>",
        "id": 298572567,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663072122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Equational.20Lemmas/near/298572453\">said</a>:</p>\n<blockquote>\n<p>What are the cases where we definitely <em>don't</em> want equations?</p>\n</blockquote>\n<p>If you one is using Lean as a programming language, then eager lemma generation is just increasing the compilation time.</p>",
        "id": 298573024,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663072287
    },
    {
        "content": "<p>I guess an option does have the right semantics here: we want to be able to set it globally (to set the \"nature\" of the project for proving vs programming) and with overrides in certain files (like tactics in mathlib or Init.List.Basic in lean), and users can add a short notation for the single def case if desired. Defaulting to false seems like a good idea since it still basically works even without eager generation, and folks that don't prove anything don't need to pay for it</p>",
        "id": 298573876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663072577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Here is a relevant feature: <a href=\"https://github.com/leanprover/lean4/issues/14\">https://github.com/leanprover/lean4/issues/14</a></p>",
        "id": 298584901,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1663075958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Equational.20Lemmas/near/298568923\">said</a>:</p>\n<blockquote>\n<p>In Lean 4, the lemmas are not eagerly generated like in Lean 3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"c1\">-- `simp` generates the lemmas here</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_2</span>\n</code></pre></div>\n<p>You can also use the API <code>Lean.Meta.getEqnsFor?</code> </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getEqnsFor</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">fact</span>  <span class=\"c1\">-- generates the lemmas</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is there any way to get these equations (like <code>_eq_1</code>) to not be private?</p>",
        "id": 365501271,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1686563348
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"572379\">Lev Stambler</span> <a href=\"#narrow/stream/270676-lean4/topic/Equational.20Lemmas/near/365501271\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Equational.20Lemmas/near/298568923\">said</a>:</p>\n<blockquote>\n<p>In Lean 4, the lemmas are not eagerly generated like in Lean 3.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">fact</span><span class=\"o\">]</span> <span class=\"c1\">-- `simp` generates the lemmas here</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_2</span>\n</code></pre></div>\n<p>You can also use the API <code>Lean.Meta.getEqnsFor?</code> </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span> <span class=\"c1\">-- Error</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Meta.getEqnsFor</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">fact</span>  <span class=\"c1\">-- generates the lemmas</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_1</span>\n<span class=\"k\">#check</span> <span class=\"n\">fact._eq_2</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is there any way to get these equations (like <code>_eq_1</code>) to not be private?</p>\n</blockquote>\n<p>Right now I am trying to access something like fact._eq_1 in after creating it a few lines above within one function.</p>",
        "id": 365501852,
        "sender_full_name": "Lev Stambler",
        "timestamp": 1686563505
    },
    {
        "content": "<p>private functions should be accessible within the file, and I think you can do <code>open private</code> or something to access private names in other files</p>",
        "id": 366095668,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686731945
    },
    {
        "content": "<p>On a related note, if I wanted to customize how <code>simp [Foo]</code> behaves for a spefic kind of definition, then could I do that with registerGetEqnsFn?</p>",
        "id": 366107232,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1686734462
    },
    {
        "content": "<p>Mathlib4 has an <code>eqns</code> attribute for this (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eqnsAttribute#doc\">docs4#eqnsAttribute</a> )</p>",
        "id": 366131553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686739173
    },
    {
        "content": "<p>Cool! Do things break if I give an equation lemma which only holds propositionally, not definitionally? I would imagine it does, right?</p>",
        "id": 366222445,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1686756354
    },
    {
        "content": "<p>I doubt it, many equation lemmas don't hold definitionally</p>",
        "id": 366223613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686756552
    },
    {
        "content": "<p>(especially when using <code>termination_by</code>, IIRC)</p>",
        "id": 366223696,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1686756567
    },
    {
        "content": "<p>Allright, thanks for the info!</p>",
        "id": 366234894,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1686758698
    }
]