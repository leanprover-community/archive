[
    {
        "content": "<p>I started implementing a lean variant of the haskell testing library/eco-system tasty (<a href=\"https://hackage.haskell.org/package/tasty-1.4.3\">https://hackage.haskell.org/package/tasty-1.4.3</a>).</p>\n<p>It is a library that provides an extensible way to both declare and execute tests. The implementation of the core data structures lives here: <a href=\"https://github.com/hargoniX/nest-core\">https://github.com/hargoniX/nest-core</a> and I wrote a basic assert based test provider here: <a href=\"https://github.com/hargoniX/nest-unit\">https://github.com/hargoniX/nest-unit</a>. Taking an example from the README you write your tests like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">NestCore</span>\n<span class=\"kn\">import</span> <span class=\"n\">NestUnit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nest.Core</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nest.Unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fileRes</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mode</span> <span class=\"o\">:</span> <span class=\"n\">IO.FS.Mode</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ResourceSpec</span> <span class=\"n\">IO.FS.Handle</span> <span class=\"n\">where</span>\n  <span class=\"n\">get</span> <span class=\"o\">:=</span> <span class=\"n\">IO.FS.Handle.mk</span> <span class=\"n\">path</span> <span class=\"n\">mode</span>\n  <span class=\"n\">release</span> <span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"n\">handle.flush</span>\n  <span class=\"n\">description</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"A file handle to {path}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tests</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">nest</span><span class=\"bp\">|</span>\n  <span class=\"n\">group</span> <span class=\"s2\">\"Self Tests\"</span>\n    <span class=\"n\">group</span> <span class=\"s2\">\"Basic\"</span>\n      <span class=\"n\">test</span> <span class=\"s2\">\"succeeds on true\"</span> <span class=\"o\">:</span> <span class=\"n\">UnitTest</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"n\">assert</span> <span class=\"n\">true</span>\n      <span class=\"n\">test</span> <span class=\"s2\">\"fails on false (expected to fail)\"</span> <span class=\"o\">:</span> <span class=\"n\">UnitTest</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n        <span class=\"n\">assert</span> <span class=\"n\">false</span>\n    <span class=\"n\">group</span> <span class=\"s2\">\"Resource based\"</span>\n      <span class=\"k\">with</span> <span class=\"n\">resource</span> <span class=\"n\">fileRes</span> <span class=\"s2\">\"/dev/zero\"</span> <span class=\"bp\">.</span><span class=\"n\">read</span> <span class=\"n\">as</span> <span class=\"n\">res</span>\n        <span class=\"n\">test</span> <span class=\"s2\">\"assertion 3\"</span> <span class=\"o\">:</span> <span class=\"n\">UnitTest</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"bp\">←</span> <span class=\"n\">res.read</span> <span class=\"mi\">12</span>\n          <span class=\"n\">assert</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span>\n    <span class=\"n\">group</span> <span class=\"s2\">\"Option based\"</span>\n      <span class=\"k\">with</span> <span class=\"n\">options</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.insert</span> <span class=\"bp\">`</span><span class=\"n\">Hello</span> <span class=\"s2\">\"foo\"</span>\n        <span class=\"k\">with</span> <span class=\"n\">options</span> <span class=\"n\">as</span> <span class=\"n\">x</span>\n          <span class=\"n\">test</span> <span class=\"s2\">\"assertion 4\"</span> <span class=\"o\">:</span> <span class=\"n\">UnitTest</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n            <span class=\"n\">assert</span> <span class=\"n\">x.contains</span> <span class=\"bp\">`</span><span class=\"n\">Hello</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">Nest.Core.defaultMain</span> <span class=\"n\">tests</span>\n</code></pre></div>\n<p>(If you are scared of the lots of custom syntax, it is just a very thin layer on top of <code>TestTree</code> which you can easily write out without the syntax as well, it is just a little cleaner this way).</p>\n<p>The output of the above test would look as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">Self</span> <span class=\"n\">Tests</span><span class=\"o\">:</span>\n  <span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">Basic</span><span class=\"o\">:</span>\n    <span class=\"n\">succeeds</span> <span class=\"n\">on</span> <span class=\"n\">true</span><span class=\"o\">:</span> <span class=\"n\">all</span> <span class=\"n\">assertions</span> <span class=\"n\">succeeded</span> <span class=\"o\">[</span><span class=\"n\">OK</span><span class=\"o\">]</span>\n    <span class=\"n\">fails</span> <span class=\"n\">on</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"n\">fail</span><span class=\"o\">):</span> <span class=\"n\">assertion</span> <span class=\"n\">failure</span><span class=\"o\">:</span> <span class=\"n\">boolean</span> <span class=\"n\">was</span> <span class=\"n\">false</span> <span class=\"o\">[</span><span class=\"n\">FAIL</span><span class=\"o\">]</span>\n      <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">'./././</span><span class=\"n\">Main.lean'</span><span class=\"o\">,</span> <span class=\"n\">line</span><span class=\"o\">:</span> <span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">col</span><span class=\"o\">:</span> <span class=\"mi\">8</span>\n  <span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">Resource</span> <span class=\"n\">based</span><span class=\"o\">:</span>\n    <span class=\"n\">Acquiring</span> <span class=\"n\">resource</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">file</span> <span class=\"n\">handle</span> <span class=\"n\">to</span> <span class=\"bp\">/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">zero</span>\n      <span class=\"n\">assertion</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">all</span> <span class=\"n\">assertions</span> <span class=\"n\">succeeded</span> <span class=\"o\">[</span><span class=\"n\">OK</span><span class=\"o\">]</span>\n    <span class=\"n\">Releasing</span> <span class=\"n\">resource</span>\n  <span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">Option</span> <span class=\"n\">based</span><span class=\"o\">:</span>\n    <span class=\"n\">assertion</span> <span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">all</span> <span class=\"n\">assertions</span> <span class=\"n\">succeeded</span> <span class=\"o\">[</span><span class=\"n\">OK</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Any feedback or feature wishes welcome^^</p>\n<p>I was thinking about adding additional test providers for:</p>\n<ul>\n<li>golden tests, i.e. ones that compare to files</li>\n<li>property tests based on SlimCheck</li>\n<li>performance tests</li>\n</ul>",
        "id": 387435642,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693063564
    },
    {
        "content": "<p>Pretty neat! It’s great to have all these tools around.</p>\n<p>How bad would that example look like without custom syntax? I know custom syntax is fun to come up with and can often make a big difference, but it does add to the mental complexity of using a new tools, and maybe normal syntax (with good combinators) is good enough?</p>",
        "id": 387436200,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693063926
    },
    {
        "content": "<p>If you want to write it a singular decl like above it gets eh..rough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tests2</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Self Tests\"</span> <span class=\"o\">[</span>\n    <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Basics\"</span> <span class=\"o\">[</span>\n      <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"succeeds on true\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n      <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"fails on false\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"o\">],</span>\n    <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Resource based\"</span> <span class=\"o\">[</span>\n      <span class=\"bp\">.</span><span class=\"n\">withResource</span> <span class=\"o\">(</span><span class=\"n\">fileRes</span> <span class=\"s2\">\"/dev/zero\"</span> <span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">res</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"assertion 3\"</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"bp\">←</span> <span class=\"n\">res.read</span> <span class=\"mi\">12</span>\n          <span class=\"n\">assert</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">UnitTest</span><span class=\"o\">)</span>\n      <span class=\"o\">)</span>\n    <span class=\"o\">]</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p>Although a lot of this can of course be mitigated by splitting it up into more declarations as i've seen tasty seems to do regularly?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">basics</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Basics\"</span> <span class=\"o\">[</span>\n    <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"succeeds on true\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n    <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"fails on false\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">resTest</span> <span class=\"o\">(</span><span class=\"n\">res</span> <span class=\"o\">:</span> <span class=\"n\">IO.FS.Handle</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span>\n <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"assertion 3\"</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n   <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"bp\">←</span> <span class=\"n\">res.read</span> <span class=\"mi\">12</span>\n   <span class=\"n\">assert</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">UnitTest</span><span class=\"o\">)</span> <span class=\"c1\">-- This is particularly annoying but I feel it can be fixed</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">resBased</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Resource based\"</span> <span class=\"o\">[</span>\n    <span class=\"bp\">.</span><span class=\"n\">withResource</span> <span class=\"o\">(</span><span class=\"n\">fileRes</span> <span class=\"s2\">\"/dev/zero\"</span> <span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">)</span> <span class=\"n\">resTest</span>\n  <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tests2</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Self Tests\"</span> <span class=\"o\">[</span>\n    <span class=\"n\">basics</span><span class=\"o\">,</span>\n    <span class=\"n\">resBased</span>\n  <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">Nest.Core.defaultMain</span> <span class=\"n\">tests2</span>\n</code></pre></div>",
        "id": 387437238,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693064713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 387437345,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693064790
    },
    {
        "content": "<p>I find the first of these not particularly rough, and especially when reading it I'll have a much easier time understanding what's going on (in particular that there isn't much going on; these are just constructors), and not significantly less pretty than the custom syntax. And I'll make it easier for me to define my little helper functions if I don't have syntax to see through. But I am of course very much biased by having worked with tasty a lot :-)</p>",
        "id": 387439315,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693066183
    },
    {
        "content": "<p>(Also sorry for following Wadler's law - you post a cool tool and the first feedback you get is on syntax :-))</p>",
        "id": 387439434,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693066253
    },
    {
        "content": "<p>You don't need the parents around <code>do</code> and <code>fun</code>, do you? Without them it's even closer to the custom syntax. Ah, but there is a type annotation. I see.</p>",
        "id": 387439512,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693066316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20the.20nest/near/387439512\">said</a>:</p>\n<blockquote>\n<p>You don't need the parents around <code>do</code> and <code>fun</code>, do you? Without them it's even closer to the custom syntax. Ah, but there is a type annotation. I see.</p>\n</blockquote>\n<p>The parens around the <code>do</code> in <code>assertion 3</code> are necessary for the type annotation so that type inference works out properly (this is one of the reasons I added the custom syntax).  I don't understand how you think it is possible to get rid of the <code>fun</code> in the first example though?</p>",
        "id": 387439677,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693066432
    },
    {
        "content": "<p>Oh or do you mean getting rid of the parens around fun?</p>",
        "id": 387439833,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693066544
    },
    {
        "content": "<p>Yes, just a minor thing, but it increases prettiness if you don't have these closing parentheses flyting around code that's properly indented anyways (in my humble opinion)</p>",
        "id": 387440082,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693066734
    },
    {
        "content": "<p>Oh I also found a way to get rid off the annotation on do!</p>",
        "id": 387440395,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693066969
    },
    {
        "content": "<p>Let me update the readme</p>",
        "id": 387440402,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693066972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">tests</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Self Tests\"</span> <span class=\"o\">[</span>\n    <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Basics\"</span> <span class=\"o\">[</span>\n      <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"succeeds on true\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">true</span><span class=\"o\">),</span>\n      <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"fails on false\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n    <span class=\"o\">],</span>\n    <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Resource based\"</span> <span class=\"o\">[</span>\n      <span class=\"bp\">.</span><span class=\"n\">withResource</span> <span class=\"o\">(</span><span class=\"n\">fileRes</span> <span class=\"s2\">\"/dev/zero\"</span> <span class=\"bp\">.</span><span class=\"n\">read</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">res</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">UnitTest</span><span class=\"o\">)</span> <span class=\"s2\">\"assertion 3\"</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">data</span> <span class=\"bp\">←</span> <span class=\"n\">res.read</span> <span class=\"mi\">12</span>\n          <span class=\"n\">assert</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span>\n    <span class=\"o\">],</span>\n    <span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"s2\">\"Option based\"</span> <span class=\"o\">[</span>\n      <span class=\"bp\">.</span><span class=\"n\">withOptions</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.insert</span> <span class=\"bp\">`</span><span class=\"n\">Hello</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n        <span class=\"bp\">.</span><span class=\"n\">getOptions</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"s2\">\"assertion 4\"</span> <span class=\"o\">(</span><span class=\"n\">assert</span> <span class=\"n\">x.contains</span> <span class=\"bp\">`</span><span class=\"n\">Hello</span><span class=\"o\">)</span>\n    <span class=\"o\">]</span>\n  <span class=\"o\">]</span>\n</code></pre></div>\n<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> \\o/</p>",
        "id": 387440709,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693067235
    },
    {
        "content": "<p>Just looking at this example, it seems <code>assert</code> isn't a plain function, is it?</p>",
        "id": 387443431,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693069607
    },
    {
        "content": "<p>Yes this is explained in nest-unit. I need it to be not a plain function for two reasons:<br>\na) I want to print the location where it failed and I need a meta program snippet to figure out the location<br>\nb) I want to be able to also assert decidable propositions but if you look in the implementation of NestUnit you will see this requires a little trick to make compatible with the typeclass mechanism.</p>",
        "id": 387444002,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693070112
    },
    {
        "content": "<p>We dont have the HasCallStack thing that haskell has so a) is necessary. I tried to work around b) by using a coercion but that didn't kick in properly. You can write something explicit like <code>assert &lt;| Proxy.mk &lt;| x = y</code> but that seemed too much of a hassle</p>",
        "id": 387444217,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693070319
    },
    {
        "content": "<p>What's the purpose of <code>Proxy</code>? Is it to turn a value into a type so you can add <code>Prop</code> instances piecemeal?</p>\n<p>It seems to me you could change <code>Assertable</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Assertable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:</span> <span class=\"n\">UnitM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>and then for example you could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">Assertable</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Assertable</span> <span class=\"n\">xs</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:=</span> <span class=\"n\">xs.forM</span> <span class=\"n\">assertThis</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Assertable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">unless</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">do</span>\n      <span class=\"n\">assertFailure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"equality failed, left: '{repr x}', right: '{repr y}'\"</span>\n</code></pre></div>\n<p>With this design, you don't need to conditionally insert <code>Proxy</code>.</p>",
        "id": 387444995,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693071107
    },
    {
        "content": "<p>Oh! That's awesome yes, I'll refactor to this approach</p>",
        "id": 387445186,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693071276
    },
    {
        "content": "<p>HasCallStack could be simulated with auto params</p>",
        "id": 387445424,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693071497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20the.20nest/near/387445424\">said</a>:</p>\n<blockquote>\n<p>HasCallStack could be simulated with auto params</p>\n</blockquote>\n<p>You mean that I inject the position via some custom elaborated <code>pos%</code> that gets auto paramed to the assert function?</p>",
        "id": 387445677,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693071817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20the.20nest/near/387444995\">said</a>:</p>\n<blockquote>\n<p>What's the purpose of <code>Proxy</code>? Is it to turn a value into a type so you can add <code>Prop</code> instances piecemeal?</p>\n<p>It seems to me you could change <code>Assertable</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Assertable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:</span> <span class=\"n\">UnitM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>and then for example you could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">Assertable</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Assertable</span> <span class=\"n\">xs</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:=</span> <span class=\"n\">xs.forM</span> <span class=\"n\">assertThis</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Repr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Assertable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">unless</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"k\">do</span>\n      <span class=\"n\">assertFailure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"equality failed, left: '{repr x}', right: '{repr y}'\"</span>\n</code></pre></div>\n<p>With this design, you don't need to conditionally insert <code>Proxy</code>.</p>\n</blockquote>\n<p>interestingly just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">Assertable</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Assertable</span> <span class=\"n\">xs</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:=</span> <span class=\"n\">xs.forM</span> <span class=\"n\">assertThis</span>\n</code></pre></div>\n<p>doesn't type check bu</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">Assertable</span> <span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Assertable</span> <span class=\"n\">xs</span> <span class=\"n\">where</span>\n  <span class=\"n\">assertThis</span> <span class=\"o\">:=</span> <span class=\"n\">xs.forM</span> <span class=\"o\">(</span><span class=\"n\">assertThis</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does?</p>",
        "id": 387446509,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693072666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I tried this now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">scoped</span> <span class=\"n\">elab</span> <span class=\"s2\">\"pos%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getPos</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no source info\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileMap</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toPosition</span> <span class=\"n\">pos</span>\n  <span class=\"k\">let</span> <span class=\"n\">posExpr</span> <span class=\"o\">:=</span> <span class=\"n\">toExpr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFileName</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">posExpr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assert</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Assertable</span> <span class=\"n\">t</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">pos</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UnitM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">assertThis</span> <span class=\"n\">t</span>\n  <span class=\"n\">catch</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">{</span> <span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"n\">pos</span> <span class=\"o\">:=</span> <span class=\"n\">some</span> <span class=\"n\">pos</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>but this gives me the wrong position (namely the location of the <code>def assert</code>) did you have something else in mind?</p>",
        "id": 387446995,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693073091
    },
    {
        "content": "<p>I think it might be <code>(pos := by exact pos%)</code> to defer it</p>",
        "id": 387447219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693073253
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20the.20nest/near/387446509\">said</a>:</p>\n<blockquote>\n<p>interestingly just [...] doesn't type check but [...] does?</p>\n</blockquote>\n<p>I'd guess it's because the new <code>assertThis</code> now has the instance argument coming <em>after</em> the <code>x</code> argument. Writing <code>(assertThis ·)</code> applies the function so it unlocks filling in the instance argument.</p>",
        "id": 387447428,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693073448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20the.20nest/near/387447219\">said</a>:</p>\n<blockquote>\n<p>I think it might be <code>(pos := by exact pos%)</code> to defer it</p>\n</blockquote>\n<p>indeed, makes sense.</p>",
        "id": 387447638,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693073640
    },
    {
        "content": "<p><a href=\"https://github.com/hargoniX/nest-unit\">https://github.com/hargoniX/nest-unit</a> pushed, now with 90% less meta magic and 90% more type theory magic :P</p>",
        "id": 387447965,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693073906
    },
    {
        "content": "<p>I wonder if we can also have a DSL for benchmark similar to <code>google/benchmark</code> or <code>criterion-rs</code></p>",
        "id": 387449006,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693074904
    },
    {
        "content": "<p>sure, in general I would claim Lean's DSL capabilities are strictly stronger than what is possible in rust</p>",
        "id": 387449226,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693075112
    },
    {
        "content": "<p>With large parts of a functioning software eco system for Lean the question is IMO not \"can we do it\" but rather \"where is the person willing to do it\" :)</p>",
        "id": 387449269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693075184
    },
    {
        "content": "<p>There’s tasty-bench so I’d say yes</p>",
        "id": 387449758,
        "sender_full_name": "MangoIV",
        "timestamp": 1693075653
    },
    {
        "content": "<p>Now with property tests! <a href=\"https://github.com/hargoniX/nest-slimcheck\">https://github.com/hargoniX/nest-slimcheck</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">NestCore</span>\n<span class=\"kn\">import</span> <span class=\"n\">NestSlimCheck</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nest.Core</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nest.SlimCheck</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">tests</span> <span class=\"o\">:</span> <span class=\"n\">TestTree</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">nest</span><span class=\"bp\">|</span>\n  <span class=\"n\">group</span> <span class=\"s2\">\"examples\"</span>\n    <span class=\"n\">group</span> <span class=\"s2\">\"examples positive\"</span>\n      <span class=\"n\">test</span> <span class=\"s2\">\"rfl\"</span> <span class=\"o\">:</span> <span class=\"n\">PropTest</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n      <span class=\"n\">test</span> <span class=\"s2\">\"reverse_append\"</span> <span class=\"o\">:</span> <span class=\"n\">PropTest</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">=</span> <span class=\"n\">ys.reverse</span> <span class=\"bp\">++</span> <span class=\"n\">xs.reverse</span>\n    <span class=\"n\">group</span> <span class=\"s2\">\"examples negative\"</span>\n      <span class=\"n\">test</span> <span class=\"s2\">\"lt\"</span> <span class=\"o\">:</span> <span class=\"n\">PropTest</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span>\n      <span class=\"n\">test</span> <span class=\"s2\">\"append_com\"</span> <span class=\"o\">:</span> <span class=\"n\">PropTest</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">xs</span> <span class=\"bp\">++</span> <span class=\"n\">ys</span> <span class=\"bp\">=</span> <span class=\"n\">ys</span> <span class=\"bp\">++</span> <span class=\"n\">xs</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">Nest.Core.defaultMain</span> <span class=\"n\">tests</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">examples</span><span class=\"o\">:</span>\n  <span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">examples</span> <span class=\"n\">positive</span><span class=\"o\">:</span>\n    <span class=\"n\">rfl</span><span class=\"o\">:</span> <span class=\"n\">Unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">counter</span> <span class=\"n\">examples</span> <span class=\"o\">(</span><span class=\"n\">seed</span> <span class=\"o\">:</span> <span class=\"mi\">17067480472798704719</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OK</span><span class=\"o\">]</span>\n    <span class=\"n\">reverse_append</span><span class=\"o\">:</span> <span class=\"n\">Unable</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">counter</span> <span class=\"n\">examples</span> <span class=\"o\">(</span><span class=\"n\">seed</span> <span class=\"o\">:</span> <span class=\"mi\">411235305205085820</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">OK</span><span class=\"o\">]</span>\n  <span class=\"n\">Running</span> <span class=\"n\">group</span> <span class=\"n\">examples</span> <span class=\"n\">negative</span><span class=\"o\">:</span>\n    <span class=\"n\">lt</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">a</span> <span class=\"n\">counter</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">seed</span> <span class=\"o\">:</span> <span class=\"mi\">13691387637133543223</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FAIL</span><span class=\"o\">]</span>\n      <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">issue</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">hold</span>\n    <span class=\"n\">append_com</span><span class=\"o\">:</span> <span class=\"n\">Found</span> <span class=\"n\">a</span> <span class=\"n\">counter</span> <span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">seed</span> <span class=\"o\">:</span> <span class=\"mi\">10601116111013419514</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">FAIL</span><span class=\"o\">]</span>\n      <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"n\">issue</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">hold</span>\n</code></pre></div>",
        "id": 387561873,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693172356
    },
    {
        "content": "<p>now to write a fuzzer macro <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 387565740,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693176691
    },
    {
        "content": "<p>seems hard to make it coverage guarded with C backend (not sure</p>",
        "id": 387565822,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693176778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20the.20nest/near/387565822\">said</a>:</p>\n<blockquote>\n<p>seems hard to make it coverage guarded with C backend (not sure</p>\n</blockquote>\n<p>I don't think so. We could in theory use coverage tools made by C people. That said once the LLVM backand goes live as the default code generation facility we can use LLVMs coverage mechanism which should make this even nicer for us I believe</p>",
        "id": 387565916,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693176863
    },
    {
        "content": "<p>Using built-in C coverage tools will certainly always have an issue though. There are branches that might simply be impossible to hit with common tests without thinking a lot about stuff. For example the uniqueness checks by the RC optimizations. If you write performant code you will always want those to say stuff is unique so it is imaginable you will not hit the false branch. That's why having an LLVM based approach could be quite helpful I think</p>",
        "id": 387566010,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693176972
    }
]