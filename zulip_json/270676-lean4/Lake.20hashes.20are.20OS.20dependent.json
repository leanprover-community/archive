[
    {
        "content": "<p>While investigating an issue replicating lake hashes between <code>lake exe cache</code> downloads and lake itself, I noticed that the release URL is mixed into the job hash, and this includes OS dependent things, e.g. <code>https://github.com/EdAyers/ProofWidgets4/releases/download/v0.0.13/linux-64.tar.gz</code> is an input to the hash calculation of mathlib files. This is a problem, because cached files are not supposed to be OS dependent, and it will cause cache misses for everyone who is on a different OS than the CI machines</p>",
        "id": 388087115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693395594
    },
    {
        "content": "<p>Turning off <code>preferReleaseBuild</code> would solve the problem, but only the package itself gets to set this, there is no workspace override</p>",
        "id": 388087629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693395761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 388087647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693395764
    },
    {
        "content": "<p>I'm confused: why aren't we seeing everyone complaining about <code>lake exe cache get</code> not working?</p>",
        "id": 388087760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693395799
    },
    {
        "content": "<p>And aren't we?</p>",
        "id": 388088002,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693395878
    },
    {
        "content": "<p>I am currently debugging a problem of exactly that form</p>",
        "id": 388088118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693395914
    },
    {
        "content": "<p>For example, on commit cc016b64 of mathlib, running <code>lake exe cache get</code> unpacks a <code>build/lib/Mathlib/Tactic/IrreducibleDef.trace</code> containing <code>13360560255192827605</code>, while <code>lake build Mathlib.Tactic.IrreducibleDef</code> sets the trace to <code>18234995878863652882</code>. Running either one will reliably set the trace file to those respective numbers</p>",
        "id": 388088688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693396142
    },
    {
        "content": "<p>I think I misdiagnosed though, the hash of the release URL is not used in the hash for the target. I will keep investigating</p>",
        "id": 388088862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693396205
    },
    {
        "content": "<p>I've managed to replicate the lake hash algorithm to the extent that I can reproduce the answer <code>18234995878863652882</code>, and it's not OS dependent except insofar as the release file <code>linux-64.tar.gz</code> has OS-dependent <em>contents</em>. (That is, all of these <code>*.tar.gz</code> files better be byte-identical or else mathlib will be sad.) But all of the uploaded files have wrong hashes, and I'm not sure why</p>",
        "id": 388115968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693403754
    },
    {
        "content": "<p>Any chance the .tar.gz file contains <code>\\r\\n</code> and exactly one element of the set <code>{caching script, Lake}</code> converts it into<code>\\n</code> by mistake? I'm not sure if the <code>.tar.gz</code> file itself is being hashed.</p>",
        "id": 388117993,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1693404230
    },
    {
        "content": "<p>the <code>tar.gz</code> file is being hashed</p>",
        "id": 388120984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693404936
    },
    {
        "content": "<p>and I checked, all three releases are indeed byte-identical</p>",
        "id": 388121038,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693404953
    },
    {
        "content": "<p>And do you get the other hash if you do <code>perl -pne 's/\\x0d\\x0a/\\x0a/g' &lt; linux-64.tar.gz &gt; linux-64-borked.tar.gz</code> and replace the tarball with the borked tar.gz? Lake only does Lake.crlf2lf for source files (<a href=\"https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/lake/Lake/Build/Module.lean#L23\">https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/lake/Lake/Build/Module.lean#L23</a> uses <code>TextFilePath</code> for source files, which does line conversion, and <code>FilePath</code> in general, which doesn't) while the caching script seems to do it for every file (<a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Cache/Hashing.lean#L68\">https://github.com/leanprover-community/mathlib4/blob/master/Cache/Hashing.lean#L68</a>).</p>",
        "id": 388124765,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1693405834
    },
    {
        "content": "<p>The issue seems to have gone away after bumping mathlib, it was a combination of some out of date <code>.trace</code> files and a bad hash verification</p>",
        "id": 388137960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693408884
    },
    {
        "content": "<p>in any case, <code>lean-cache</code> will now tell you when the unpack results don't match what <code>lake build</code> does</p>",
        "id": 388138349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693408969
    }
]