[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[implemented_by Nat.add]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Nat.rec</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span>\n</code></pre></div>\n<p>This code results in the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">implemented_by'</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">Nat.add'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">Nat.add'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"n\">but</span> <span class=\"bp\">'</span><span class=\"n\">add'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 306556751,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1666912829
    },
    {
        "content": "<p>If you set pp.all it might show more info</p>",
        "id": 306556939,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666912959
    },
    {
        "content": "<p><code>pp.all</code> makes no difference. However, running the following reveals that <code>Nat.add</code>'s type is <code>([mdata borrowed:1 Nat]) -&gt; ([mdata borrowed:1 Nat]) -&gt; Nat</code>. I think the solution would be to either relax the equality check or change the error to reflect the special type.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">`</span><span class=\"n\">Nat.add</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">type</span>\n</code></pre></div>",
        "id": 306558088,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1666913790
    },
    {
        "content": "<p>I seem to be experiencing a similar error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[implemented_by String.toUTF8]</span>\n<span class=\"kd\">def</span> <span class=\"n\">charsToByteArray</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">:=</span>\n  <span class=\"n\">String.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">acc</span> <span class=\"n\">char</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"n\">char.toNat.toUInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.mkEmpty</span> <span class=\"n\">s.length</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Diagnostics</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">implemented_by'</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">String.toUTF8'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">String.toUTF8'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n<span class=\"n\">but</span> <span class=\"bp\">'</span><span class=\"n\">charsToByteArray'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n</code></pre></div>\n<p>If I'm doing something silly here, a nudge in the right direction would be appreciated.</p>",
        "id": 370480748,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1687967045
    },
    {
        "content": "<p>(silly things other than going from Unicode code points to UTF8 bytes incorrectly, I mean)</p>",
        "id": 370483669,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1687967525
    },
    {
        "content": "<p>Do you have all types in scope and are sure byte array is not an auto implicit</p>",
        "id": 370488933,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1687968312
    },
    {
        "content": "<p>Not sure - how could I check?</p>",
        "id": 370489196,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1687968359
    },
    {
        "content": "<p>The issue seems to arise when the snippet is included alone in a file, with no imports - is it reproducible?</p>\n<p>I don't think there are any auto bound implicit arguments involved here, and the types (ByteArray, String, UInt8, Char, and Nat) are all from <code>Init.lean</code>, I think.</p>",
        "id": 370513577,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1687972894
    },
    {
        "content": "<p><code>set_option autoImplicit false</code> to switch off autoimplicit footguns</p>",
        "id": 370542497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687978330
    },
    {
        "content": "<p>No effect.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">@[implemented_by String.toUTF8]</span>\n<span class=\"kd\">def</span> <span class=\"n\">charsToByteArray</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">:=</span>\n  <span class=\"n\">String.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">acc</span> <span class=\"n\">char</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.push</span> <span class=\"n\">char.toNat.toUInt8</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ByteArray.mkEmpty</span> <span class=\"n\">s.length</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>still throws </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Diagnostics</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">implemented_by'</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">String.toUTF8'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">String.toUTF8'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n<span class=\"n\">but</span> <span class=\"bp\">'</span><span class=\"n\">charsToByteArray'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n</code></pre></div>\n<p>on the <code>implemented_by</code> line.</p>",
        "id": 370548512,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1687979625
    },
    {
        "content": "<p><code>set_option pp.raw true</code> reveals the problem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"n\">implemented_by'</span> <span class=\"n\">argument</span> <span class=\"bp\">'</span><span class=\"n\">String.toUTF8'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">String.toUTF8'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">([</span><span class=\"n\">mdata</span> <span class=\"n\">borrowed</span><span class=\"o\">:</span><span class=\"mi\">1</span> <span class=\"n\">String</span><span class=\"o\">])</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ByteArray</span>\n<span class=\"n\">but</span> <span class=\"bp\">'</span><span class=\"n\">charsToByteArray'</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ByteArray</span>\n</code></pre></div>",
        "id": 370598528,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687995698
    },
    {
        "content": "<p>There's <code>Expr.consumeMData</code> to remove the top-level meta data. Does core have a function that traverses an expression removing all <code>MData</code>?</p>",
        "id": 370599274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996129
    },
    {
        "content": "<p>you could just put <code>@&amp; String</code> on the def</p>",
        "id": 370599666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687996365
    },
    {
        "content": "<p>Indeed.</p>",
        "id": 370600118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996633
    },
    {
        "content": "<p>It would be nice to give people some clue, however :-)</p>",
        "id": 370600155,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996656
    },
    {
        "content": "<p>Isn't there some function which, given expressions <code>e1</code> and <code>e2</code>, will try to find a <code>pp</code> setting that shows they are different?</p>",
        "id": 370600292,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687996738
    },
    {
        "content": "<blockquote>\n<p>either relax the equality check or change the error to reflect the special type.</p>\n</blockquote>\n<p>It would definitely have to be the later. Since <code>implemented_by</code> swaps out a definitions implementation for another, accepting a mismatch like this would lead to possible memory leaks.</p>",
        "id": 370996471,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688100734
    },
    {
        "content": "<p>I'm not sure that is actually the case. I think it would just use the borrowing annotations of the replacement function, because the inc/dec insertion happens relatively late, after <code>implemented_by</code> replacements have occurred</p>",
        "id": 371003596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688103120
    },
    {
        "content": "<p>Oh, I was under the impression <code>implemented_by</code> was the last step and no further compilation occurred, but I have never checked, so I could easily be wrong.</p>",
        "id": 371004658,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688103385
    },
    {
        "content": "<p>well you want to do inlining and stuff after that</p>",
        "id": 371017109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688106905
    },
    {
        "content": "<p>you can't safely inline a function which is <code>implemented_by</code></p>",
        "id": 371017194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688106932
    },
    {
        "content": "<p>and quite a lot of compiler optimizations are triggered after inlining</p>",
        "id": 371017265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688106952
    },
    {
        "content": "<p>so yeah, it's pretty early</p>",
        "id": 371017297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688106961
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/implemented_by.20type.20error/near/371017109\">said</a>:</p>\n<blockquote>\n<p>well you want to do inlining and stuff after that</p>\n</blockquote>\n<p>But functions are independently compiled. Inlining is an optimization that occurs in the inliner function after the <code>implemented_by</code> function has long has its IR replaced with the generated IR of the implementing function. Since inc/decs are part of the IRs, the question is about the order of the optimizations when generating the implementing function (and replacing the <code>implemented_by</code> function), not things that happen afterwards.</p>",
        "id": 371026301,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688109314
    },
    {
        "content": "<p>And since inc/decs are part of the IR and my understanding is that <code>implemented_by</code> just substitutes out the compiled body for the the compiled body of the implementing function, I believe memory leaks could result.</p>",
        "id": 371027250,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688109560
    },
    {
        "content": "<p>hm, that's definitely not true for the new compiler, not sure about the old</p>",
        "id": 371027555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688109626
    },
    {
        "content": "<p>Well, I was definitely talking about the old compiler, as that is the one currently producing executed code.</p>",
        "id": 371027676,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688109654
    },
    {
        "content": "<p>looks like implemented_by uses the cstage1 result, not stage2</p>",
        "id": 371028050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688109744
    },
    {
        "content": "<p>I will admit have absolute no clue what that means. My knowledge of the old compiler is limited to the output of <code>trace.compiler.ir.result</code> and the FFI/C interface (and thus the use of things like borrowing annotations).</p>",
        "id": 371028563,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688109843
    },
    {
        "content": "<p>and indeed, stage1 is only halfway through the process, long before the IR stuff has happened and it is still an <code>expr</code></p>",
        "id": 371028607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688109849
    },
    {
        "content": "<p>me neither, but <code>set_option trace.compiler.stage1 true</code> should show you what it looks like</p>",
        "id": 371028871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688109894
    },
    {
        "content": "<p>In that case, why do <code>implemented_by</code> functions have no stage2 trace?</p>",
        "id": 371029369,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110017
    },
    {
        "content": "<p>Or IR result?</p>",
        "id": 371029596,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110073
    },
    {
        "content": "<p>MWE?</p>",
        "id": 371029772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110107
    },
    {
        "content": "<p>Oh I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.stage2</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n<span class=\"kd\">@[implemented_by bar]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n</code></pre></div>",
        "id": 371030000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110159
    },
    {
        "content": "<p>this seems reasonable, <code>foo</code> doesn't need to be compiled at all past stage1 since that is when it is replaced by <code>bar</code></p>",
        "id": 371030211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110206
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/leanprover/lean4/blob/ec42581d1f3a88c2f62ab93437bc3cbf843c1ee9/src/library/compiler/compiler.cpp#L184-L185\">these lines</a> in the C compiler code suggest compilation is skipped if a definition is <code>implemented_by</code>.</p>",
        "id": 371030250,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110216
    },
    {
        "content": "<p>also reasonable, if <code>foo</code> is treated as an opaque constant up until it is replaced</p>",
        "id": 371030474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/implemented_by.20type.20error/near/371030211\">said</a>:</p>\n<blockquote>\n<p>this seems reasonable, <code>foo</code> doesn't need to be compiled at all past stage1 since that is when it is replaced by <code>bar</code></p>\n</blockquote>\n<p>Oh, so you mean that it does just use the stage2 of <code>bar</code>. Thus memory leaks can result?</p>",
        "id": 371030513,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110283
    },
    {
        "content": "<p>no, at stage1 the constant for <code>foo</code> is replaced by the stage1 compiled version of <code>bar</code></p>",
        "id": 371030607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110310
    },
    {
        "content": "<p>the stage2 version of <code>bar</code> is not used, at least at this point</p>",
        "id": 371030742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110331
    },
    {
        "content": "<p>So where does the stage 2 (result) of <code>foo</code> come from?</p>",
        "id": 371030816,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110351
    },
    {
        "content": "<p>I thought you just said the trace is skipped</p>",
        "id": 371031120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110424
    },
    {
        "content": "<p><code>foo</code> is not compiled</p>",
        "id": 371031381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110471
    },
    {
        "content": "<p>Well, <code>foo</code> needs to get code from somewhere, so where does it get its code if it is not compiled (as the trace and C code suggest) and does not use <code>bar</code>'s later result (as you said it only uses stage1)?</p>",
        "id": 371031571,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110504
    },
    {
        "content": "<p>Occurrences of <code>foo</code> in downstream code are replaced by <code>bar</code> around stage1 of the compiler pipeline</p>",
        "id": 371032155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110619
    },
    {
        "content": "<p><code>foo</code> itself has no code generated for it</p>",
        "id": 371032348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110662
    },
    {
        "content": "<p>Were do you see the replacement of foo by bar in the code?</p>",
        "id": 371032528,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110690
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/ec42581d1f3a88c2f62ab93437bc3cbf843c1ee9/src/library/compiler/erase_irrelevant.cpp#L81-L84\">https://github.com/leanprover/lean4/blob/ec42581d1f3a88c2f62ab93437bc3cbf843c1ee9/src/library/compiler/erase_irrelevant.cpp#L81-L84</a></p>",
        "id": 371032608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110708
    },
    {
        "content": "<p>note the <code>mk_cstage1</code> and <code>get_implemented_by_attribute</code></p>",
        "id": 371032708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110729
    },
    {
        "content": "<p>in the main compiler pipeline function you linked, you can see <a href=\"https://github.com/leanprover/lean4/blob/ec42581d1f3a88c2f62ab93437bc3cbf843c1ee9/src/library/compiler/compiler.cpp#L244\"><code>erase_irrelevant</code></a> somewhere after <a href=\"https://github.com/leanprover/lean4/blob/ec42581d1f3a88c2f62ab93437bc3cbf843c1ee9/src/library/compiler/compiler.cpp#L225\"><code>stage1</code> defs are saved</a> and much before <a href=\"https://github.com/leanprover/lean4/blob/ec42581d1f3a88c2f62ab93437bc3cbf843c1ee9/src/library/compiler/compiler.cpp#L273\">inc/dec instructions are inserted</a></p>",
        "id": 371033552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110895
    },
    {
        "content": "<p>That seems o only apply if the n in question is marked <code>@[inline]</code>.</p>",
        "id": 371033583,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110906
    },
    {
        "content": "<p>However, you do appear to be correct none-the-less:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n<span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kd\">@[implemented_by foo1, noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo2</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def foo : obj :=</span>\n<span class=\"cm\">  let x_1 : obj := foo1;</span>\n<span class=\"cm\">  ret x_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 371033649,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688110923
    },
    {
        "content": "<p>in the else case it visits the name itself, which is to say it made the replacement but did not inline it</p>",
        "id": 371033722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688110932
    },
    {
        "content": "<p>the <code>mk_cstage1</code> part is indicative of what kind of IR we are working with here</p>",
        "id": 371034057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111005
    },
    {
        "content": "<p>Ah</p>",
        "id": 371034096,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111011
    },
    {
        "content": "<p>So this means the old compiler never actually uses the <code>implemented_by</code> definition at all.</p>",
        "id": 371034496,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111085
    },
    {
        "content": "<p>no, as we would expect</p>",
        "id": 371034547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111099
    },
    {
        "content": "<p>it can even be marked <code>noncomputable</code> and it still works</p>",
        "id": 371034620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111111
    },
    {
        "content": "<p>Sorry, I meant that the <code>implemented_by</code> definition never actually gets own symbol that is used (no that the body of the definition is compiled).</p>",
        "id": 371034904,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111172
    },
    {
        "content": "<p>this is all to say, as long as the replacement is lean-type-correct I think it is safe to do and ABI concerns are not an issue</p>",
        "id": 371035021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111202
    },
    {
        "content": "<p>or at least stage1-type-correct</p>",
        "id": 371035120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111224
    },
    {
        "content": "<p>I was thinking that the compiled symbol for <code>foo2</code> would have <code>foo1</code>'s code, but it seems like <code>foo2</code> just does not exist.</p>",
        "id": 371035122,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111224
    },
    {
        "content": "<p>that's kind of a waste of symbols</p>",
        "id": 371035256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111253
    },
    {
        "content": "<p>This makes me wonder what happens if <code>implemented_by</code> and <code>export</code> are used together.</p>",
        "id": 371035291,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111260
    },
    {
        "content": "<p>I would guess nothing, it's not compiled so the export would have no effect</p>",
        "id": 371035769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111351
    },
    {
        "content": "<p>it might be nice to give an error about that though</p>",
        "id": 371035878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111376
    },
    {
        "content": "<p>You are correct. It produces nothing.</p>",
        "id": 371036610,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/implemented_by.20type.20error/near/371035256\">said</a>:</p>\n<blockquote>\n<p>that's kind of a waste of symbols</p>\n</blockquote>\n<p>I mean, if, for example, some external ABI is expecting a specific symbol then duplication is useful.</p>",
        "id": 371036965,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111614
    },
    {
        "content": "<p>Hence why most low-level compilers and linkers do not skip producing symbols unless they are told to.</p>",
        "id": 371037364,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111699
    },
    {
        "content": "<p>But, in Lean's case, I imagine that is considered largely undefined implementation detail.</p>",
        "id": 371037484,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688111722
    }
]