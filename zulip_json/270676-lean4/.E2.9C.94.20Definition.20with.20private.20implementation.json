[
    {
        "content": "<p>Does Lean provide a way to make a definition transparent to this module, but opaque to other modules? In other words, make the symbol itself and its type public, but make its definition private?</p>",
        "id": 369511184,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687731090
    },
    {
        "content": "<p><code>opaque foo : Nat := 1 + 1</code> gives you an opaque definition, but it is not visible anywhere, including the current file. The main workaround I've seen for this is to pack the opaque definition together with proofs of whatever the minimal properties are you want to expose. For instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">foo.aux</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">Ã—'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">foo.aux.1</span>\n</code></pre></div>\n<p>But this obviously gets rather unwieldy if there are many properties.</p>",
        "id": 369512592,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687732049
    },
    {
        "content": "<p>Could you share more on why you want the definition to not be public?</p>",
        "id": 369512689,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687732107
    },
    {
        "content": "<p>you could just have a public def which is a wrapper around a private def</p>",
        "id": 369532716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687742752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20with.20private.20implementation/near/369512689\">said</a>:</p>\n<blockquote>\n<p>Could you share more on why you want the definition to not be public?</p>\n</blockquote>\n<p>I don't have an incredibly strong reason, but I do know that with software development in general, it tends to be a bad idea for a module to expose too many of its own implementation details. I would imagine that the same goes for Lean.</p>\n<p>One concrete reason would be that if a module doesn't expose the definitions of things, we're free to change those definitions later, as long as we're still satisfying all the same theorems. Another might be that if we're in the habit of hiding the definitions of things, then that will get us used to exposing useful theorems about things, and relying on named theorems instead of definitional equality.</p>",
        "id": 369545529,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687749648
    },
    {
        "content": "<p>Yeah. This is a bit complicated in Lean; definitional equality is generally pretty helpful compared to propositional equality, so most definitions expose their implementations. In turn, we have some tools to discourage tightly coupling with some definitions -- see e.g. the <code>irreducible</code> attribute and the <code>private</code> modifier.</p>",
        "id": 369546305,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687750076
    },
    {
        "content": "<p>The main use I have seen for <code>opaque</code> and family is when you are doing something genuinely unsafe. This is along the lines of what you're talking about; you rely on whatever axioms you introduce, instead of the definition.</p>",
        "id": 369546466,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687750174
    },
    {
        "content": "<p>Sounds like I'm going against the tide with my desire to hide definitions by default.</p>",
        "id": 369546602,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687750243
    },
    {
        "content": "<p>I do feel the pain, at least in programming applications.</p>",
        "id": 369546649,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687750270
    },
    {
        "content": "<p>Usually <code>private</code> definitions are sufficiently annoying that you (or another user) just never rely on them.</p>",
        "id": 369546680,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687750291
    },
    {
        "content": "<p>even though you can in theory see through them</p>",
        "id": 369546691,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687750298
    },
    {
        "content": "<p>Yeah, that makes sense.</p>",
        "id": 369546776,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687750330
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20with.20private.20implementation/near/369532716\">said</a>:</p>\n<blockquote>\n<p>you could just have a public def which is a wrapper around a private def</p>\n</blockquote>\n<p>That doesn't seem to do exactly what I was looking for. The \"pack it all up into one opaque definition\" trick does work, though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n  <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">four_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">four</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">four_</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">four_equals_4</span> <span class=\"o\">:</span> <span class=\"n\">four</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">4</span>\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- I don't want this to be valid, but it is</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo_four_is_exposed</span> <span class=\"o\">:</span> <span class=\"n\">foo.four</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">4</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">bar</span>\n  <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">four_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n  <span class=\"kd\">structure</span> <span class=\"n\">DataToExport</span> <span class=\"n\">where</span>\n    <span class=\"n\">four</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n    <span class=\"n\">four_equals_4</span> <span class=\"o\">:</span> <span class=\"n\">four</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n\n  <span class=\"n\">opaque</span> <span class=\"n\">dataToExport</span> <span class=\"o\">:</span> <span class=\"n\">DataToExport</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">four</span> <span class=\"o\">:=</span> <span class=\"n\">four_</span>\n    <span class=\"n\">four_equals_4</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">4</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">four</span> <span class=\"o\">:=</span> <span class=\"n\">dataToExport.four</span>\n  <span class=\"kd\">def</span> <span class=\"n\">four_equals_4</span> <span class=\"o\">:=</span> <span class=\"n\">dataToExport.four_equals_4</span>\n<span class=\"kd\">end</span> <span class=\"n\">bar</span>\n\n<span class=\"c1\">-- this is invalid, just like I want</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar_four_not_exposed</span> <span class=\"o\">:</span> <span class=\"n\">bar.four</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"n\">Eq.refl</span> <span class=\"mi\">4</span>\n</code></pre></div>",
        "id": 369546856,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687750391
    },
    {
        "content": "<p>But <code>rfl</code> proofs are very useful! :D so the only time you actually want to do this is when the definition exposes <em>too much</em> information and you want to weaken it.</p>",
        "id": 369547184,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687750586
    },
    {
        "content": "<blockquote>\n<p>That doesn't seem to do exactly what I was looking for.</p>\n</blockquote>\n<p>Oh, you should have clarified if you want to break defeq. Privacy in lean is about making it difficult to <em>refer to</em> a definition, it does not block unfolding. The only way to do that is to use <code>opaque</code>, but it is not scope-sensitive. There is no coherent way to do so under the type theory, because scope isn't a concept in the type theory</p>",
        "id": 369548576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687751325
    },
    {
        "content": "<p>You don't want to get into the situation where some expression that was well-typed when the declaration was unfoldable is now no longer well typed outside the module</p>",
        "id": 369548791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687751410
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627517\">Tanner Swett</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20with.20private.20implementation/near/369545529\">said</a>:</p>\n<blockquote>\n<p>Another might be that if we're in the habit of hiding the definitions of things, then that will get us used to exposing useful theorems about things, and relying on named theorems instead of definitional equality.</p>\n</blockquote>\n<p>I suppose you could also commit to periodically changing the definitions of things to expose where you're accidentally relying on definitional equalities <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>In mathlib, we try to be aware of which definitional equalities are part of the specification (though this is not always well documented, and there can be different opinions for what counts as abusing defeqs) and which equalities should be via theorems. It'd be interesting if you could somehow enforce that without losing <em>all</em> definitional equalities. I think in practice though, while there's still some defeq abuse, the most important thing is simply to avoid using <code>unfold</code>s in proofs for definitions not from your module.</p>",
        "id": 369548847,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687751438
    },
    {
        "content": "<p>note that in your example, you can still prove <code>bar.four = 4</code> by referring to <code>four_equals_4</code>. You have exactly the same privacy problems if you try to restrict access to that fact</p>",
        "id": 369549208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687751634
    },
    {
        "content": "<p>basically, it is not sensible to say that a theorem is only true within some scope, either it is provable in any context or not at all</p>",
        "id": 369549325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687751687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20with.20private.20implementation/near/369548576\">said</a>:</p>\n<blockquote>\n<p>There is no coherent way to do so under the type theory, because scope isn't a concept in the type theory</p>\n</blockquote>\n<p>unless you add some spicy judgments to your type theory :) <a href=\"https://arxiv.org/abs/2210.05420\">https://arxiv.org/abs/2210.05420</a></p>",
        "id": 369549609,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687751821
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20with.20private.20implementation/near/369548791\">said</a>:</p>\n<blockquote>\n<p>You don't want to get into the situation where some expression that was well-typed when the declaration was unfoldable is now no longer well typed outside the module</p>\n</blockquote>\n<p>Ah, I never thought of that. That's a good point. And yeah, it also never occurred to me that the type theory may not provide any reasonable way to implement the feature I'm asking for.</p>",
        "id": 369550580,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687752284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20with.20private.20implementation/near/369549208\">said</a>:</p>\n<blockquote>\n<p>note that in your example, you can still prove <code>bar.four = 4</code> by referring to <code>four_equals_4</code>. You have exactly the same privacy problems if you try to restrict access to that fact</p>\n</blockquote>\n<p>Yeah, that's the purpose of including <code>four_equals_4</code> there: to make it so that it's still possible to prove <code>bar.four = 4</code> even though those aren't definitionally equal.</p>\n<p>One place where I might want to use this is if there are several reasonable ways to define something, and I don't want to expose which one I used as the actual definition.</p>",
        "id": 369550933,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687752471
    },
    {
        "content": "<p>I admit that what I'm asking for may be a bad idea after all. But even if it is a bad idea, I want to try it out and learn that lesson the hard way.</p>",
        "id": 369551103,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1687752551
    },
    {
        "content": "<p>Then opaque is the way to go :)</p>",
        "id": 369551459,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687752769
    },
    {
        "content": "<p><a href=\"https://jamesgallicchio.github.io/LeanColls/docs/LeanColls/Uninit.html\">https://jamesgallicchio.github.io/LeanColls/docs/LeanColls/Uninit.html</a> here's an example of a type defined opaquely and then axiomatized. You can do similar stuff for non-type definitions</p>",
        "id": 369551504,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687752796
    },
    {
        "content": "<blockquote>\n<p>One place where I might want to use this is if there are several reasonable ways to define something, and I don't want to expose which one I used as the actual definition.</p>\n</blockquote>\n<p>Yes, this is what <code>opaque</code> is for. The pattern of adding a <code>opaque</code> of a type like <code>{x // x = a}</code> where <code>a</code> is the \"real\" definition has a shortcut in mathlib, called <code>irreducible_def</code>. It is mainly used when you want to control what lean will automatically unfold, but it still gives users the ability to unfold it manually using the equality theorem</p>",
        "id": 369552129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687753172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627517\">Tanner Swett</span> has marked this topic as resolved.</p>",
        "id": 369555196,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687754867
    },
    {
        "content": "<p>There's another interesting use of <code>opaque</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ListM#src\">src#ListM</a>.</p>",
        "id": 369561294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687757155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Definition.20with.20private.20implementation/near/369549609\">said</a>:</p>\n<blockquote>\n<p>unless you add some spicy judgments to your type theory :) <a href=\"https://arxiv.org/abs/2210.05420\">https://arxiv.org/abs/2210.05420</a></p>\n</blockquote>\n<p>Agda implemented this, but I'm still waiting for some medium scale usage to evaluate whether it is useful in practice</p>",
        "id": 369978271,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1687857792
    },
    {
        "content": "<p>I think Idris also has a system where a definition is available inside a module, but opaque outside it.</p>",
        "id": 369980144,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687858132
    },
    {
        "content": "<p>there's already an implementation of the controlled unfolding paper? wasn't it published just last fall?? agda devs are fast!</p>",
        "id": 370125824,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882576
    },
    {
        "content": "<p><a href=\"https://agda.readthedocs.io/en/latest/language/opaque-definitions.html#controlling-unfolding\">https://agda.readthedocs.io/en/latest/language/opaque-definitions.html#controlling-unfolding</a> wow, they did</p>",
        "id": 370126713,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882741
    }
]