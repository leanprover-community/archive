[
    {
        "content": "<p>How do names such as <code>_private.Init.Prelude.0.Lean.extractMacroScopesAux._unsafe_rec</code> work? Intuitively this is related to <code>Lean.extractMacroScopesAux</code>, but is there a wayto extract the \"stem\" <code>Lean.extractMacroScopesAux</code> from this name?</p>",
        "id": 406116848,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701799458
    },
    {
        "content": "<p>what do you mean by \"work\" here?</p>",
        "id": 406160234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701810787
    },
    {
        "content": "<p>it's a name, it works by referring to a declaration</p>",
        "id": 406160271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701810807
    },
    {
        "content": "<p>Are you asking how it is structured? A private name consists of the following components:</p>\n<ul>\n<li><code>_private</code> - it's a private name</li>\n<li><code>Init.Prelude</code>- the module that declared it</li>\n<li><code>0</code> - always 0, this <code>.num</code> component ensures that the name can't be written literally</li>\n<li><code>Lean.extractMacroScopesAux._unsafe_rec</code> - what the name would normally have been, and also the way to refer to the name within the privacy boundary (<code>open</code>s still apply, so you can use e.g. <code>extractMacroScopesAux._unsafe_rec</code> if <code>Lean</code> is open)</li>\n</ul>",
        "id": 406160634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701810970
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/private.20names/near/406160234\">said</a>:</p>\n<blockquote>\n<p>what do you mean by \"work\" here?</p>\n</blockquote>\n<p>How are these names generated from <code>Lean.extractMacroScopesAux</code>, and is there a canonical way to recover <code>Lean.extractMacroScopesAux.__unsafe_rec</code> from this private name?</p>\n<p>For example <code>getRoot</code> returns <code>Lean</code> on <code>Lean.extractMacroScopes</code> but gives <code>_private</code> on the <code>_private.Init.Prelude..</code> symbol</p>",
        "id": 406189350,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701824741
    },
    {
        "content": "<p><code>privateToUserName?</code> turns that name into <code>Lean.extractMacroScopesAux._unsafe_rec</code></p>",
        "id": 406194832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701827456
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/private.20names/near/406194832\">said</a>:</p>\n<blockquote>\n<p><code>privateToUserName?</code> turns that name into <code>Lean.extractMacroScopesAux._unsafe_rec</code></p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 406207198,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701831552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 406207209,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701831554
    }
]