[
    {
        "content": "<p>this is a bit of a silly question but i figured i'd ask</p>\n<p>I'm working on a math project, and prefer to keep around a 'theorem'/'lemma'/'corollary' distinction that was present in lean3 and doesn't exist in lean4 anymore.<br>\nLuckily, lean4 is great and adding 'corollary' back is easy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"corollary\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">bracketedBinder</span><span class=\"bp\">*</span> <span class=\"s2\">\":\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\":=\"</span> <span class=\"n\">body</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">theorem</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">body</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>However, when using this I do not get highlighting on the word 'corollary'.<br>\nThis is because the highlighting for <code>lemma</code> and <code>theorem</code> was provided by my editor, and isn't provided by lean.<br>\nThis seems like it would be possible, using the <code>@declaration</code> semantic token, and I see references to this token in the lean source.  Is there any way we could tag things like <code>def</code> and <code>lemma</code> with the declaration token?<br>\n(this would probably be useful for commands in general, like <code>#print</code>)</p>",
        "id": 386237403,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1692546601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> What editor are you using? Keywords like <code>corollary</code> and <code>#print</code> should get semantic highlighting. I know they do in VSCode and EMACS.</p>",
        "id": 386256470,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692563129
    },
    {
        "content": "<p>Neovim</p>\n<p>i... didn't actually think about binding to <code>@lsp.type.keyword</code>? i thought it would be too noisy</p>",
        "id": 386256655,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1692563256
    },
    {
        "content": "<p>Specifically you also want to highlight things like <code>protected</code> and <code>noncomputable</code> (command prefices) differently from declarations imo</p>",
        "id": 386256747,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1692563309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> You definitely want semantic highlighting for <code>keyword</code>, since that is the only token type that is easily producible in Lean at the moment. Unfortunately, tagging syntax with other token types is difficult and is really only supported internally on builtin syntax (at least at the moment).</p>",
        "id": 386257035,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692563528
    },
    {
        "content": "<p>\"internally\" as in... vscode? or internal to the lean compiler</p>",
        "id": 386257083,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1692563579
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/semantic.20highlighting.20for.20declarations/near/386257083\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Creating.20a.20Lean.20project\">#lean4 &gt; Creating a Lean project</a> by <span class=\"user-mention silent\" data-user-id=\"382349\">Calvin Lee</span>.</p>",
        "id": 386257100,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692563597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> \"internally\" as in the Lean LSP server (with some help from builtin syntax / elaborators).</p>",
        "id": 386272381,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692577504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382349\">@Calvin Lee</span> in case you didn't see it, there's a sample setup (for neovim) here: <a href=\"https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending#semantic-highlighting\">https://github.com/Julian/lean.nvim/wiki/Configuring-&amp;-Extending#semantic-highlighting</a> (if you have issues with it or want to add any caveats obviously feel free)</p>",
        "id": 386454519,
        "sender_full_name": "Julian Berman",
        "timestamp": 1692643908
    },
    {
        "content": "<p>Needless to say by the way, if you insist on highlighting stuff outside of semantic highlighting you can of course manually tell nvim to highlight something the way you want regardless of the semantic highlighting with a <code>highlight</code>.</p>",
        "id": 386454747,
        "sender_full_name": "Julian Berman",
        "timestamp": 1692643991
    }
]