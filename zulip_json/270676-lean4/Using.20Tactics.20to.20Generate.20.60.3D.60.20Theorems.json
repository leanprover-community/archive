[
    {
        "content": "<p>I've been looking into how to use tactics in order to generate theorems, rather than just proving them. This is primarily meant for simple theorems similar to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.comp_def#doc\">docs#Function.comp_def</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.map_eq_map#doc\">docs#List.map_eq_map</a>.</p>\n<p>Here is what I have come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"transform\"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">cs</span><span class=\"o\">:</span><span class=\"n\">Lean.Parser.Tactic.Conv.convSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span>\n      <span class=\"k\">have</span> <span class=\"n\">eq</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">eq</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">rhs</span>\n        <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">)</span>\n      <span class=\"n\">exact</span> <span class=\"n\">eq</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">g_def</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transform</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">g</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g_def</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>  <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span><span class=\"bp\">?</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">map_g_def</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">transform</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">List.map_eq_map</span><span class=\"o\">]</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">h</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n    <span class=\"n\">ring_nf</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">map_g_def</span>\n</code></pre></div>\n<p>Writing <code>transform term =&gt;</code> puts me into conversation mode which allows me to use tactics to simplify the term. The most useful tactics for this is probably <code>unfold</code>, but other tactics like <code>simp</code> or <code>ring</code> work as well.</p>\n<p>This is my first foray into meta programming, so any feedback would be highly welcomed. It only works with <code>def</code> and not with <code>theorem</code>, does this make any difference? Also, the goal only shows up once I write my first tactic, can this be fixed?</p>",
        "id": 404933569,
        "sender_full_name": "Markus Schmaus",
        "timestamp": 1701285147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"654733\">@Markus Schmaus</span> This is a nice idea. I made a prototype for a full definition command for these, so for example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">transform</span> <span class=\"n\">map_g_def</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">List.map_eq_map</span><span class=\"o\">,</span> <span class=\"n\">List.map</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">ring_nf</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">map_g_def</span>\n<span class=\"c1\">-- map_g_def : h &lt;$&gt; [1, 2, 3] = [6, 12, 18]</span>\n</code></pre></div>\n<p>I didn't go as far as making this support binders like <code>theorem</code> would, and it might be buggy, but at least it lets you use <code>variable</code> to add extra binders.</p>",
        "id": 404941799,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701288514
    },
    {
        "content": "<p>Here's my implementation. I couldn't find a way to use the <code>theorem</code> command directly so I had to copy its implementation (and doubtless get some of it wrong).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">declModifiers</span> <span class=\"s2\">\"transform \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">Parser.Tactic.Conv.convSeq</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">mods</span><span class=\"o\">:</span><span class=\"n\">declModifiers</span> <span class=\"n\">transform</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;%$</span><span class=\"n\">arr</span> <span class=\"bp\">$</span><span class=\"n\">code</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mods</span> <span class=\"bp\">←</span> <span class=\"n\">elabModifiers</span> <span class=\"n\">mods</span>\n    <span class=\"n\">Elab.Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTermAndSynthesize</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n      <span class=\"n\">withRef</span> <span class=\"n\">tk</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">aux</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"o\">(</span><span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">withRef</span> <span class=\"o\">(</span><span class=\"n\">mkNullNode</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">tk</span><span class=\"o\">,</span> <span class=\"n\">arr</span><span class=\"o\">])</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Tactic.Conv.convert</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">withTacticInfoContext</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">evalTactic</span> <span class=\"n\">code</span><span class=\"o\">))</span>\n          <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">,</span> <span class=\"n\">proof</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"o\">((</span><span class=\"n\">thm</span><span class=\"o\">,</span> <span class=\"n\">pf</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">aux</span> <span class=\"o\">{</span> <span class=\"n\">elaborator</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"o\">}</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span> <span class=\"o\">{</span> <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span> <span class=\"o\">}</span>\n        <span class=\"k\">let</span> <span class=\"n\">fvars</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">collectFVars</span> <span class=\"o\">(</span><span class=\"n\">collectFVars</span> <span class=\"o\">{}</span> <span class=\"n\">thm</span><span class=\"o\">)</span> <span class=\"n\">pf</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fvarIds</span>\n        <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args.filter</span> <span class=\"k\">fun</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fvars.contains</span> <span class=\"n\">arg.fvarId</span><span class=\"bp\">!</span>\n        <span class=\"k\">let</span> <span class=\"n\">thm'</span> <span class=\"bp\">←</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">args</span> <span class=\"n\">thm</span>\n        <span class=\"k\">let</span> <span class=\"n\">pf'</span> <span class=\"bp\">←</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">args</span> <span class=\"n\">pf</span>\n        <span class=\"k\">let</span> <span class=\"n\">thm'</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.levelMVarToParam</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">thm'</span><span class=\"o\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">thm'.hasMVar</span> <span class=\"k\">then</span>\n          <span class=\"n\">throwError</span> <span class=\"s2\">\"Theorem has unassigned metavariables{indentD thm'}\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">pf'</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">pf'</span>\n        <span class=\"k\">if</span> <span class=\"n\">pf'.hasLevelMVar</span> <span class=\"k\">then</span>\n          <span class=\"n\">throwError</span> <span class=\"s2\">\"Proof has universe level metavariables{indentD pf'}\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">pf'.hasMVar</span> <span class=\"k\">then</span>\n          <span class=\"n\">throwError</span> <span class=\"s2\">\"Proof has unassigned metavariables{indentD pf'}\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">withRef</span> <span class=\"n\">id</span> <span class=\"k\">do</span>\n          <span class=\"n\">Term.expandDeclId</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getCurrNamespace</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.getLevelNames</span><span class=\"o\">)</span> <span class=\"n\">id</span> <span class=\"n\">mods</span>\n        <span class=\"n\">addAndCompile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Declaration.thmDecl</span>\n          <span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decl.declName</span>\n            <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">decl.levelNames</span>\n            <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">thm'</span>\n            <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">pf'</span> <span class=\"o\">}</span>\n        <span class=\"c1\">-- For hovering on id:</span>\n        <span class=\"n\">withSaveInfoContext</span> <span class=\"k\">do</span>\n          <span class=\"n\">Term.addTermInfo'</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithLevelParams</span> <span class=\"n\">decl.declName</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">isBinder</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n        <span class=\"c1\">-- Process attributes:</span>\n        <span class=\"n\">Term.applyAttributesAt</span> <span class=\"n\">decl.declName</span> <span class=\"n\">mods.attrs</span> <span class=\"bp\">.</span><span class=\"n\">afterTypeChecking</span>\n        <span class=\"c1\">-- Not sure if this is necessary for theorems:</span>\n        <span class=\"n\">Term.applyAttributesAt</span> <span class=\"n\">decl.declName</span> <span class=\"n\">mods.attrs</span> <span class=\"bp\">.</span><span class=\"n\">afterCompilation</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span>\n<span class=\"n\">transform</span> <span class=\"n\">g_def</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">g</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">g_def</span>\n<span class=\"c1\">-- g_def (n : Nat) : g n = 2 * (n * 2)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"n\">transform</span> <span class=\"n\">map_g_def</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Functor.map</span><span class=\"o\">,</span> <span class=\"n\">List.map_eq_map</span><span class=\"o\">,</span> <span class=\"n\">List.map</span><span class=\"o\">]</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">h</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span>\n  <span class=\"n\">ring_nf</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">map_g_def</span>\n<span class=\"c1\">-- map_g_def : h &lt;$&gt; [1, 2, 3] = [6, 12, 18]</span>\n</code></pre></div>",
        "id": 404941936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701288580
    }
]