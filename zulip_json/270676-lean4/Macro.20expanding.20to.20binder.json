[
    {
        "content": "<p>I'm trying to figure out whether it's possible to write a macro that expands to a binder.<br>\nAs a simple example, let's say I want <code>[[foo X]]</code> to expand to <code>[Mul X] [Add X]</code> and to be able to write things like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[[</span><span class=\"n\">foo</span> <span class=\"n\">X</span><span class=\"o\">]]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is this possible?</p>",
        "id": 341578762,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678743871
    },
    {
        "content": "<p>no</p>",
        "id": 341579080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678743995
    },
    {
        "content": "<p>not unless you replace <code>def</code></p>",
        "id": 341579105,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678744003
    },
    {
        "content": "<p>or change core, of course</p>",
        "id": 341579202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678744029
    },
    {
        "content": "<p>Okay, thanks. That's unfortunate.</p>",
        "id": 341579600,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678744175
    },
    {
        "content": "<p>Semirelated: does lean4/mathlib4 have an analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser.emit_code_here\">docs#lean.parser.emit_code_here</a></p>",
        "id": 341579976,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678744288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expanding.20to.20binder/near/341579105\">said</a>:</p>\n<blockquote>\n<p>not unless you replace <code>def</code></p>\n</blockquote>\n<p>(replace = overload?)</p>",
        "id": 341580745,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678744543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expanding.20to.20binder/near/341579976\">said</a>:</p>\n<blockquote>\n<p>Semirelated: does lean4/mathlib4 have an analogue of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lean.parser.emit_code_here\">docs#lean.parser.emit_code_here</a></p>\n</blockquote>\n<p>It's not really necessary, as you can just call <code>elabCommand</code> with whatever syntax you like</p>",
        "id": 341599049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678753933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expanding.20to.20binder/near/341580745\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Macro.20expanding.20to.20binder/near/341579105\">said</a>:</p>\n<blockquote>\n<p>not unless you replace <code>def</code></p>\n</blockquote>\n<p>(replace = overload?)</p>\n</blockquote>\n<p>No, overload here would presumably mean defining a new <code>elab_rules</code> for the existing syntax, while in this case you would want to create a new syntax that shadows the old one</p>",
        "id": 341599179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678754028
    },
    {
        "content": "<p>they have a similar effect, but one changes the behavior while the other changes the syntax</p>",
        "id": 341599275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678754058
    },
    {
        "content": "<p>Recently I had the same <a href=\"#narrow/stream/270676-lean4/topic/Extending.20bracketedBinder\">question</a>, there is a code example for overloading lambda function notation.</p>",
        "id": 341784720,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678798557
    }
]