[
    {
        "content": "<p>I have this function, but it is not structural recursion.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n    <span class=\"n\">l</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">List.rangeStepAux</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">n</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">append</span> <span class=\"bp\">$</span> <span class=\"n\">l.drop</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>What different/better ways are there to do this where I won't have to prove termination, and, I would prefer no code, and rather verbal suggestions so I can try to work this out myself. Thanks in advance!</p>",
        "id": 272813928,
        "sender_full_name": "Joseph O",
        "timestamp": 1645541857
    },
    {
        "content": "<p>use <code>partial</code></p>",
        "id": 272815290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542429
    },
    {
        "content": "<p>I don't really know what your function is supposed to do, but it infinite loops when I test it</p>",
        "id": 272815514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542524
    },
    {
        "content": "<p>so proving termination is probably going to be difficult</p>",
        "id": 272815575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645542550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272815514\">said</a>:</p>\n<blockquote>\n<p>I don't really know what your function is supposed to do, but it infinite loops when I test it</p>\n</blockquote>\n<p>Make a range from 0-n, and skip every <code>m</code>th term</p>",
        "id": 272821546,
        "sender_full_name": "Joseph O",
        "timestamp": 1645544900
    },
    {
        "content": "<p>so like <code>1,2,4,5,7,8</code>?</p>",
        "id": 272821896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545021
    },
    {
        "content": "<p>Your algorithm also looks cubic</p>",
        "id": 272821956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272821896\">said</a>:</p>\n<blockquote>\n<p>so like <code>1,2,4,5,7,8</code>?</p>\n</blockquote>\n<p>yes. that would be skipping every third term</p>",
        "id": 272822256,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545140
    },
    {
        "content": "<p>What do you do if <code>m</code> is negative, if the start point is greater than the end point, or if the end point is not a multiple of the step? Lots of things cause that code to miss its exit point</p>",
        "id": 272822272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272821956\">said</a>:</p>\n<blockquote>\n<p>Your algorithm also looks cubic</p>\n</blockquote>\n<p>im thinking of scratching my algorithm</p>",
        "id": 272822290,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272822272\">said</a>:</p>\n<blockquote>\n<p>What do you do if <code>m</code> is negative, if the start point is greater than the end point, or if the end point is not a multiple of the step? Lots of things cause that code to miss its exit point</p>\n</blockquote>\n<p>m will never be negative</p>",
        "id": 272822325,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545166
    },
    {
        "content": "<p>your function signature doesn't say so</p>",
        "id": 272822362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545179
    },
    {
        "content": "<p><code>(m n : Nat)</code></p>",
        "id": 272822417,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545199
    },
    {
        "content": "<p>er I meant the other thing</p>",
        "id": 272822461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545218
    },
    {
        "content": "<p>the start point can be greater than the end point in the aux function</p>",
        "id": 272822498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545234
    },
    {
        "content": "<p>also a step size of 0 is bad</p>",
        "id": 272822588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545257
    },
    {
        "content": "<p>Yes, but I use this in a function <code>rangeStep</code> where I use it correctly</p>",
        "id": 272822636,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545282
    },
    {
        "content": "<p>okay, then <code>rangeStepAux</code> needs hypotheses asserting that it's being called correctly</p>",
        "id": 272822691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545307
    },
    {
        "content": "<p>But I would like to use a different algorithm? Do you have ideas for a different one?</p>",
        "id": 272822714,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545313
    },
    {
        "content": "<p>sure, this sounds like <code>(range n).filter (\\lam i, i % m != 0)</code></p>",
        "id": 272822800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272822691\">said</a>:</p>\n<blockquote>\n<p>okay, then <code>rangeStepAux</code> needs hypotheses asserting that it's being called correctly</p>\n</blockquote>\n<p>ok. I cant do that, but I dont really have to worry about what you said, because i'm pretty sure that cant appen</p>",
        "id": 272822834,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545359
    },
    {
        "content": "<p>You misunderstand. You say that <code>rangeStep</code> checks that certain boundary cases don't happen, while <code>rangeStepAux</code> relies on those boundary cases not being inputs. That means that <code>rangeStepAux</code> needs to assert that the bad cases are not legal in its type signature or else you won't be able to prove termination</p>",
        "id": 272823077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545452
    },
    {
        "content": "<p>because <code>rangeStepAux</code> is just a regular function, people can call it themselves if they want</p>",
        "id": 272823202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545491
    },
    {
        "content": "<p>For example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 272823493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545601
    },
    {
        "content": "<p>but I made it protected so people cant use it</p>",
        "id": 272823870,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545718
    },
    {
        "content": "<p>nope, that's not what protected means</p>",
        "id": 272823926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545729
    },
    {
        "content": "<p>or do I have to use <code>private</code>, if that is a keyword</p>",
        "id": 272823930,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545732
    },
    {
        "content": "<p>protected means you have to write <code>List.rangeStepAux</code> even if you <code>open List</code></p>",
        "id": 272823970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545748
    },
    {
        "content": "<p>Ah. If I use private, will that allow people not to use it?</p>",
        "id": 272824042,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545772
    },
    {
        "content": "<p><code>private</code> makes the function not <em>easily</em> accessible outside the current section</p>",
        "id": 272824057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545776
    },
    {
        "content": "<p>oh</p>",
        "id": 272824096,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545796
    },
    {
        "content": "<p>but it's not air tight and more to the point it is not something you can use to do proofs</p>",
        "id": 272824109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545798
    },
    {
        "content": "<p>if you want to know that a fact is true, you take it as an argument</p>",
        "id": 272824150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545817
    },
    {
        "content": "<p>right</p>",
        "id": 272824190,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545833
    },
    {
        "content": "<p>this makes the function inconvenient to call, but that's fine since this is an aux function</p>",
        "id": 272824273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272823493\">said</a>:</p>\n<blockquote>\n<p>For example</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">start</span> <span class=\"bp\">≤</span> <span class=\"n\">stop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s0</span> <span class=\"o\">:</span> <span class=\"n\">step</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I dont take start as an argument</p>",
        "id": 272824274,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545849
    },
    {
        "content": "<p>At least with my current algorithm</p>",
        "id": 272824294,
        "sender_full_name": "Joseph O",
        "timestamp": 1645545862
    },
    {
        "content": "<p>in your code <code>start</code> was <code>n</code> and <code>stop</code> was <code>m</code> and <code>step</code> was... 2?</p>",
        "id": 272824319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545875
    },
    {
        "content": "<p>So <code>start</code> is the current value, it increases until it exceeds <code>stop</code></p>",
        "id": 272824402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645545914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272824319\">said</a>:</p>\n<blockquote>\n<p>in your code <code>start</code> was <code>n</code> and <code>stop</code> was <code>m</code> and <code>step</code> was... 2?</p>\n</blockquote>\n<p>sorry if it was very unclear. <code>m</code> was stop, and <code>n</code> was step</p>",
        "id": 272824741,
        "sender_full_name": "Joseph O",
        "timestamp": 1645546033
    },
    {
        "content": "<p>I should have made that more clear</p>",
        "id": 272824766,
        "sender_full_name": "Joseph O",
        "timestamp": 1645546044
    },
    {
        "content": "<p>If that's the case, then your step increased by 2 on every iteration</p>",
        "id": 272825303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645546242
    },
    {
        "content": "<p>maybe you and I mean different things by \"step\"</p>",
        "id": 272825385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645546270
    },
    {
        "content": "<p>ah, that is not what i meant. I meant to increase by step</p>",
        "id": 272827467,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547009
    },
    {
        "content": "<p>Let me see what fixing my mistake does.</p>",
        "id": 272827488,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547017
    },
    {
        "content": "<p>I still seem to need to prove termination</p>",
        "id": 272827864,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547152
    },
    {
        "content": "<p>well yes, but now it's actually provable (hopefully)</p>",
        "id": 272828027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547202
    },
    {
        "content": "<p>if you don't want to prove termination you can use <code>partial</code>, but if it is actually nonterminating for some inputs then users will not like it</p>",
        "id": 272828110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547238
    },
    {
        "content": "<p>but if your definition is not structurally recursive then in all likelihood you will need to prove termination manually assuming no <code>partial</code></p>",
        "id": 272828315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547307
    },
    {
        "content": "<p>note that mathlib will almost certainly want such a function to <em>not</em> be <code>partial</code> because you can't prove facts about <code>partial</code> functions</p>",
        "id": 272828458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547363
    },
    {
        "content": "<p>Yes. The only problem now is, how can we prove termination? On what case. I think I have an idea.</p>",
        "id": 272828783,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"o\">(</span><span class=\"n\">stop</span> <span class=\"n\">step</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">step</span> <span class=\"bp\">=</span> <span class=\"n\">stop</span> <span class=\"k\">then</span>\n    <span class=\"n\">l</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">List.rangeStepAux</span> <span class=\"n\">stop</span> <span class=\"o\">(</span><span class=\"n\">step</span><span class=\"bp\">*</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.take</span> <span class=\"n\">step</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">append</span> <span class=\"bp\">$</span> <span class=\"n\">l.drop</span> <span class=\"o\">(</span><span class=\"n\">step</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">take</span> <span class=\"o\">(</span><span class=\"n\">l.length</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">step</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">List.rangeStepAux</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>i think I am close?</p>",
        "id": 272828987,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547566
    },
    {
        "content": "<p>This code has exactly the same nontermination issues as the original</p>",
        "id": 272829132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547631
    },
    {
        "content": "<p>I would rename <code>step</code> to <code>start</code> btw</p>",
        "id": 272829237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547656
    },
    {
        "content": "<p>the step is 2 there</p>",
        "id": 272829262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547669
    },
    {
        "content": "<p>your termination measure should be <code>stop - start</code> most likely</p>",
        "id": 272829366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547718
    },
    {
        "content": "<p>Wait, I still didn't fix the previous bug</p>",
        "id": 272829428,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547744
    },
    {
        "content": "<p>Actually nevermind</p>",
        "id": 272829462,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/better.20way.20to.20write.20.60rangeStepAux.60/near/272829237\">said</a>:</p>\n<blockquote>\n<p>I would rename <code>step</code> to <code>start</code> btw</p>\n</blockquote>\n<p>Why?</p>",
        "id": 272829529,
        "sender_full_name": "Joseph O",
        "timestamp": 1645547772
    },
    {
        "content": "<p>because it's not a step</p>",
        "id": 272829608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547809
    },
    {
        "content": "<p>it's the first value produced by the code</p>",
        "id": 272829658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1645547831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 272898908,
        "sender_full_name": "Notification Bot",
        "timestamp": 1645585257
    }
]