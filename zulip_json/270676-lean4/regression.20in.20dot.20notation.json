[
    {
        "content": "<p>In Lean 3 this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.derivative</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">polynomial.derivative</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">polynomial.derivative : Π {R : Type u_1} [_inst_1 : semiring R], polynomial R →ₗ[R] polynomial R</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">f.derivative</span> <span class=\"c1\">-- works fine</span>\n</code></pre></div>\n<p>In Lean 4 it doesn't work any more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Polynomial.Derivative</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Polynomial.derivative</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Polynomial.derivative.{u} {R : Type u} [inst✝ : Semiring R] : Polynomial R →ₗ[R] Polynomial R</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">f.derivative</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid field notation, function 'Polynomial.derivative' does not have argument with type</span>\n<span class=\"cm\">(Polynomial ...) that can be used, it must be explicit or implicit with a unique name</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>IIRC it worked in mathlib3 because someone (<span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> ?) made a change to core Lean so that dot notation would spot that this was OK -- it sees that there's a coercion to function from <code>Polynomial R →ₗ[R] Polynomial R</code> to <code>Polynomial R → Polynomial R</code>. Is there any chance that this is coming back in Lean 4? It's making the port of Hermite polynomials <a href=\"https://github.com/leanprover-community/mathlib4/pull/3967\">!4#3967</a> look a lot more verbose than the corresponding Lean 3 file. I'm assuming that it can't be fixed in mathlib?</p>",
        "id": 358277314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684077991
    },
    {
        "content": "<p>That was already a Lean 3 feature before me (I just made it more reliable as part of making dot notation work somewhat more like Lean 4's; <a href=\"https://github.com/leanprover-community/lean/pull/757\">lean#757</a>).</p>\n<p>I'm not sure what's the current state of the discussion about how to support this in Lean 4, but I know that <a href=\"https://github.com/leanprover/lean4/issues/1910\">there's an issue for it</a>.</p>",
        "id": 358331160,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684108597
    },
    {
        "content": "<p>this feature is kind of still unreliable in lean3; I think a really robust way to write this would be quite nice.</p>",
        "id": 358415200,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684145986
    },
    {
        "content": "<p>(for example: in neither Lean3 or Lean4 can you write <code>p.aeval</code> - I understand why this is but I think it would be very nice to be able to write it)</p>",
        "id": 358415335,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684146018
    },
    {
        "content": "<p>I guess the issue with what I'm asking is that <code>p.aeval</code> is not super well defined (it'd be like <code>(\\lam x, Polynomial.aeval x p)</code>)</p>",
        "id": 358415601,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1684146103
    }
]