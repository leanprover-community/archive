[
    {
        "content": "<p>Am I really supposed to be telling the undergraduates that when faced with <code>⊢ P ∧ Q</code> they now have to type <code>constructor</code> (because <code>split</code> now means something else)? Is there something less verbose which turns this into two goals <code>P</code> and <code>Q</code>?</p>",
        "id": 346642410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680544615
    },
    {
        "content": "<p>I guess I could introduce pointy brackets and do <code>refine \\&lt;_, _\\&gt;</code>...</p>",
        "id": 346642587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680544669
    },
    {
        "content": "<p>Can you write a small macro or is <code>split</code> reserved?</p>",
        "id": 346642688,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680544689
    },
    {
        "content": "<p>Or <code>apply and.intro</code> which is more verbose, but at least the first 5 characters are something they already know</p>",
        "id": 346645342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1680545384
    },
    {
        "content": "<p>I can't write a small macro whether or not <code>split</code> is reserved. Is there some basic \"writing small macros in lean 4 for dummies\" md file somewhere?</p>\n<p>When I was slowly but surely learning Lean 3, when random stuff like this came up (looks like a useful skill or thing to know, no obviously nice reference for dummies) I would badger people until I understood enough myself and then I'd write a small md file and dump it in the Xena Project chaos. I'm talking 2018 here. Then I'd start linking to it in various places, and pointing people to it on the chat. Then the lean prover community decided that some of the stuff I was generating was useful for the community, and moved it to the community website. This is the origin of files such as <a href=\"https://leanprover-community.github.io/extras/simp.html\">this</a>. Eventually someone would come along and just be annoyed by my amateurish attempts to explain stuff and just rewrite them completely, and then they became even more useful.</p>\n<p>I wonder if there's room for this kind of document on the community website for lean 4 \"tips and tricks\"? Or another place to put stuff like this?</p>",
        "id": 346646052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680545590
    },
    {
        "content": "<p>The calc mode file was also mine, Patrick wrote the conv mode file, and Chris Hughes wrote the well-founded recursion file because I nagged him to write it because I found it completely impossible to work out with no reference. At the time the only reference we had was <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a> . In the early days of the community when only a few people knew the contents of those files, this stuff was super-useful.</p>",
        "id": 346646482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680545718
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">split</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">constructor</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>seems to work</p>",
        "id": 346648198,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1680546189
    },
    {
        "content": "<p>You can also use angle brackets, fwiw</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"o\">⟨</span><span class=\"n\">hp</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hq</span><span class=\"o\">,</span> <span class=\"n\">hp</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 346648210,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1680546191
    },
    {
        "content": "<p>Kevin, if you write useful doc then we'll find or create a place for it.</p>",
        "id": 346650426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1680546798
    },
    {
        "content": "<p>OK! How do I make <code>my_induction n with d hd</code> do <code>induction' a using MyNat.induction with d hd</code>?</p>",
        "id": 346652627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680547547
    },
    {
        "content": "<p>Here <code>myNat.induction</code> is a custom induction principle which uses the numeral <code>0</code> rather than <code>MyNat.zero</code>.</p>",
        "id": 346652746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680547583
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">case</span> <span class=\"n\">a</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">case</span> <span class=\"n\">a</span>\n<span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span>\n<span class=\"bp\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>Even better, how do I make the cases be <code>zero</code> and <code>succ</code>?<br>\nmwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span> <span class=\"c1\">-- `import tactic` in mathlib4</span>\n\n<span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNat</span>\n\n<span class=\"c1\">-- notational typeclass for 0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">MyNat.zero</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">induction</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">t</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"n\">using</span> <span class=\"n\">MyNat.induction</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">unsolved goals</span>\n<span class=\"cm\">case a</span>\n<span class=\"cm\">⊢ 0 + 0 = 0</span>\n\n<span class=\"cm\">case a</span>\n<span class=\"cm\">d : MyNat</span>\n<span class=\"cm\">hd : 0 + d = d</span>\n<span class=\"cm\">⊢ 0 + succ d = succ d</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 346653243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680547777
    },
    {
        "content": "<p>Naming the arguments should be sufficient:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">induction</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">t</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 346654728,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680548237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20is.20the.20new.20split/near/346652627\">said</a>:</p>\n<blockquote>\n<p>OK! How do I make <code>my_induction n with d hd</code> do <code>induction' a using MyNat.induction with d hd</code>?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <br>\n<a href=\"https://github.com/hrmacbeth/math2001/blob/7b7e5f59ec0fc832cf4f80fd23a4495e6108b2b3/Math2001/Tactic/Induction.lean#L46\">https://github.com/hrmacbeth/math2001/blob/7b7e5f59ec0fc832cf4f80fd23a4495e6108b2b3/Math2001/Tactic/Induction.lean#L46</a><br>\n(courtesy <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>)</p>",
        "id": 346655231,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1680548394
    },
    {
        "content": "<p>Heh, it was Rob who told me all the tactic hacks to make this work in lean 3 :-) Hi Rob!</p>",
        "id": 346655698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680548509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It looks like you don't need a custom induction tactic. The <code>@[eliminator]</code> attribute can be used to override which eliminator to use.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MyNat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyNat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"n\">MyNat.zero</span>\n\n<span class=\"kd\">@[eliminator]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">induction</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">a.succ</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"n\">t</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MyNat.rec</span> <span class=\"n\">zero</span> <span class=\"n\">succ</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span> <span class=\"bp\">→</span> <span class=\"n\">MyNat</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyNat</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">MyNat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case zero</span>\n<span class=\"cm\">  ⊢ 0 + 0 = 0</span>\n\n<span class=\"cm\">  case succ</span>\n<span class=\"cm\">  d: MyNat</span>\n<span class=\"cm\">  hd: 0 + d = d</span>\n<span class=\"cm\">  ⊢ 0 + succ d = succ d</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MyNat</span>\n</code></pre></div>",
        "id": 346658539,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1680549409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/constructor.20is.20the.20new.20split/near/346646052\">said</a>:</p>\n<blockquote>\n<p>I can't write a small macro whether or not <code>split</code> is reserved. Is there some basic \"writing small macros in lean 4 for dummies\" md file somewhere?</p>\n</blockquote>\n<p>Actually, I thought about writing a small 'tactic writing for dummies' file (mainly to not forget what I have learned). If there is real interest in that, I can put it higher on my todo list.</p>",
        "id": 346697419,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1680564491
    },
    {
        "content": "<p>I know it's long/has way more information than you might want, but the examples in the metaprogramming book are a pretty good cheat sheet. E.g. <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/main/macros.md\">here</a> for macros</p>",
        "id": 346698569,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680565186
    }
]