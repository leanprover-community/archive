[
    {
        "content": "<p>Is it possible to define a structure with extern'ed constructor and field accessors, similar to Array?<br>\nI have tried to copy the array code but in the generated C code it doesn't call <code>mk</code> on the List (for <code>A</code>, it does for <code>Array</code>).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_array_data\"</span><span class=\"o\">]</span> <span class=\"n\">A.data</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_array_mk\"</span><span class=\"o\">]</span> <span class=\"n\">A.mk</span>\n\n<span class=\"kd\">@[extern \"lean_array_get_size\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">A.size</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">a.data.length</span>\n\n<span class=\"kd\">@[extern c inline \"(uint8_t)lean_is_array(#2)\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">isArray</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">A.mk</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isArray x}  {x.size}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isArray x}  {x.size}\"</span>\n</code></pre></div>\n<p>Prints:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">false</span>  <span class=\"mi\">3</span>\n<span class=\"n\">true</span>  <span class=\"mi\">3</span>\n</code></pre></div>\n<p>(it also calls <code>lean_array_get_size</code> on the list, which should, but doesn't fail the <code>assert(lean_is_array(o))</code>, and instead works correctly)</p>",
        "id": 391667664,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1695032697
    },
    {
        "content": "<p>It should be possible. I'm not sure what is happening with this example though, something seems off</p>",
        "id": 391734487,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695053840
    },
    {
        "content": "<p>If you don't want to fight for control with the compiler, the much more reliable thing to do for FFI objects is to declare the type <code>opaque</code> and then build an extern'd API around that opaque type.</p>",
        "id": 391734648,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695053894
    },
    {
        "content": "<p>The tag is very strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[extern c inline \"(uint8_t)lean_ptr_tag(#2)\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">getTag</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">UInt8</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">A.mk</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isArray x}  {x.size} {getTag x}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mk</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isArray x}  {x.size} {getTag x}\"</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">false</span>  <span class=\"mi\">3</span> <span class=\"mi\">1</span>\n<span class=\"n\">true</span>  <span class=\"mi\">3</span> <span class=\"mi\">246</span>\n</code></pre></div>",
        "id": 391824842,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695097095
    },
    {
        "content": "<p>Aha, this even gives a segmentation fault:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_array_data\"</span><span class=\"o\">]</span> <span class=\"n\">A.data</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_array_mk\"</span><span class=\"o\">]</span> <span class=\"n\">A.mk</span>\n\n<span class=\"kd\">@[extern \"lean_array_get_size\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">A.size</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">A</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">a.data.length</span>\n\n<span class=\"kd\">@[extern c inline \"(uint8_t)lean_is_array(#2)\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">isArray</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">@[extern c inline \"(uint8_t)lean_obj_tag(#2)\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">getTag</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">UInt8</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">A.mk</span> <span class=\"n\">List.nil</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isArray x}  {x.size} {getTag x}\"</span>\n</code></pre></div>",
        "id": 391825336,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695097465
    },
    {
        "content": "<p>emmm, this is very wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n<span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span> <span class=\"n\">uint8_t</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"n\">x_1</span> <span class=\"bp\">=</span> <span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">x_2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">)</span><span class=\"n\">lean_is_array</span><span class=\"o\">(</span><span class=\"n\">x_1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"n\">return</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 391826673,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695098363
    },
    {
        "content": "<p>No, it is not currently possible to do the <code>Array</code> trick in your own code, there are some hard-coded lists in the compiler containing <code>Array</code>. I have a PR open which fixes this: <a href=\"https://github.com/leanprover/lean4/pull/2292\">lean4#2292</a> (apparently marked awaiting-review, low-priority)</p>",
        "id": 391950049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695140577
    },
    {
        "content": "<p>Ok, thanks, I'll go with <code>NonemptyType</code> for now.</p>",
        "id": 391953688,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1695141728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587706\">Daniil Kisel</span> has marked this topic as resolved.</p>",
        "id": 391953702,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695141731
    }
]