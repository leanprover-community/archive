[
    {
        "content": "<p>I'm trying to use FFI on Windows and I'm getting the following error when it tries to compile <code>ffi.c</code>, am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fatal error: 'stddef.h' file not found\n#include &lt;stddef.h&gt;\n         ^~~~~~~~~~\n1 error generated.\nerror: external command `clang` exited with code 1\n</code></pre></div>",
        "id": 386292643,
        "sender_full_name": "James Randolf",
        "timestamp": 1692586557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"632831\">@James Randolf</span> What does your lakefile look like (how are you compiling your FFI)?</p>",
        "id": 386295079,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692588090
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">test</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">@[default_target]</span> <span class=\"n\">lean_exe</span> <span class=\"n\">test</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">target</span> <span class=\"n\">ffi.o</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.o\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"ffi.c\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n  <span class=\"n\">buildO</span> <span class=\"s2\">\"ffi.c\"</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"n\">flags</span> <span class=\"s2\">\"clang\"</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">libleanffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"leanffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiO</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">ffi.o</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ffiO</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386295658,
        "sender_full_name": "James Randolf",
        "timestamp": 1692588415
    },
    {
        "content": "<p>ffi.c is</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span>\n\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 386295731,
        "sender_full_name": "James Randolf",
        "timestamp": 1692588449
    },
    {
        "content": "<p>It seems that without the <code>#include</code>, everything works, but as soon as I try to include anything at all I get a <code>fatal error: '...' file not found</code> error.</p>",
        "id": 386297361,
        "sender_full_name": "James Randolf",
        "timestamp": 1692589448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"632831\">@James Randolf</span> The error indicates it cannot find the C standard library includes (in this case, the compiler-specific <code>stddef</code>)  in its default search path. How did you install clang?</p>",
        "id": 386298986,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692590331
    },
    {
        "content": "<p>Windows does not come with a C compiler and library by default, so it is quite easy to get this error if something went wrong in the the setup of whatever compiler you do install (Clang in your case).</p>",
        "id": 386299350,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692590494
    },
    {
        "content": "<p>It seems to be using the clang at <code>C:\\Users\\James\\.elan\\toolchains\\leanprover--lean4---nightly-2023-08-19\\bin\\clang.exe</code></p>",
        "id": 386299387,
        "sender_full_name": "James Randolf",
        "timestamp": 1692590511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"632831\">@James Randolf</span> Oh, in that case, yeah that will not work. Lean does not ship a standard library with tis bundled Clang.</p>",
        "id": 386299781,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692590657
    },
    {
        "content": "<p>You need to install a C compiler yourself and use that to build.</p>",
        "id": 386299806,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692590680
    },
    {
        "content": "<p>I see, thanks a lot!</p>",
        "id": 386299924,
        "sender_full_name": "James Randolf",
        "timestamp": 1692590731
    },
    {
        "content": "<p>Quick example: to install Clang in MSYS2 you can execute the following in a MSYS2 shell.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>pacman<span class=\"w\"> </span>-S<span class=\"w\"> </span>mingw-w64-x86_64-clang\n</code></pre></div>\n<p>Then, as long as you run <code>lake build</code> from the MSYS2 shell, it should use the clang installed.</p>",
        "id": 386300044,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692590781
    }
]