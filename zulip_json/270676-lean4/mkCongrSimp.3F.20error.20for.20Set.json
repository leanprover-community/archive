[
    {
        "content": "<p>I noticed that <code>congr</code> doesn't seem to work in some equalities involving <code>Set</code>.</p>\n<p>For example, the following <code>congr</code> is a no-op</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.image</span> <span class=\"n\">f</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">Set.image</span> <span class=\"n\">g</span> <span class=\"n\">ys</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But the following <code>congr</code> generates the expected subgoals</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">u</span> <span class=\"bp\">∪</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Investigating, the first generates (using <code>mkCongrSimp?</code>) a congr lemma with type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.18640</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.18662</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">f_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f_1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">s_1</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s_1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">Set.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Set.image</span> <span class=\"n\">f_1</span> <span class=\"n\">s_1</span> <span class=\"n\">a_1</span>\n</code></pre></div>\n<p>and the second generates</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.18238</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Union</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a_2</span> <span class=\"n\">a_3</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_3</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∪</span> <span class=\"n\">a_2</span> <span class=\"bp\">=</span> <span class=\"n\">a_1</span> <span class=\"bp\">∪</span> <span class=\"n\">a_3</span>\n</code></pre></div>\n<p>It seems that somehow the definition of <code>Set</code> is being unfolded in the <code>Set.image</code> case and Lean goes and generates a lemma with too much extensionality.</p>",
        "id": 338881269,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677685984
    },
    {
        "content": "<p>Here's a mathlib-free mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">def</span> <span class=\"n\">Set.image</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Set.image</span> <span class=\"n\">g</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- congr doesn't do anything</span>\n</code></pre></div>",
        "id": 338882205,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677686149
    },
    {
        "content": "<p>I'm not sure if this is a problem in <code>mkCongrSimp?</code> or a problem in how <code>congr</code> applies the generated congr lemma.</p>\n<p>A piece of evidence that it's the latter is that <code>simp</code> can navigate these expressions fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set.image</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">Set.image</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 338883061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677686301
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2128\">lean4#2128</a></p>",
        "id": 338916778,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677694013
    },
    {
        "content": "<p>The reason this particular case works with simp is because simp has a fallback for when congruence lemmas cannot be generated.</p>",
        "id": 338916901,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677694050
    },
    {
        "content": "<p>Just to check, <a href=\"https://github.com/leanprover/lean4/blob/e386d5941ef54cbcca8d3b829ba3800797cb8455/src/Lean/Meta/Tactic/Simp/Main.lean#L500\">is this the fallback</a> (along with <a href=\"https://github.com/leanprover/lean4/blob/e386d5941ef54cbcca8d3b829ba3800797cb8455/src/Lean/Meta/Tactic/Simp/Main.lean#L357\"><code>congrArgs</code></a>)?</p>",
        "id": 339233452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677804509
    },
    {
        "content": "<p>Yes, that's it.  In the beginning, Lean 4 simp didn't have support for auto-generated congruence lemmas at all.  Back then, this was the only congr support it had.</p>",
        "id": 339241938,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677809808
    },
    {
        "content": "<p>Thanks, I was wanting to write a version of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.congr?#doc\">docs4#Lean.MVarId.congr?</a> that implemented the fallback algorithm.</p>",
        "id": 339420237,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677869205
    },
    {
        "content": "<p>Regarding that, I have a conceptual question about <code>isDefEq</code>. I was under the impression that <code>isDefEq</code> should be enough to assign the <code>mvarId</code> metavariable near the end of the following function, but it appears I need to do <code>mvarId.assign</code> explicitly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean.MVarId.fallbackCongr</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mvarId.withContext</span> <span class=\"k\">do</span> <span class=\"n\">commitWhenSomeNoEx</span><span class=\"bp\">?</span> <span class=\"k\">do</span>\n    <span class=\"n\">mvarId.checkNotAssigned</span> <span class=\"bp\">`</span><span class=\"n\">fallbackCongr</span>\n    <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.getType'</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tgt.eq</span><span class=\"bp\">?</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n    <span class=\"n\">lhs.cleanupAnnotations.withApp</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">args.isEmpty</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">infos</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getFunInfoNArgs</span> <span class=\"n\">f</span> <span class=\"n\">args.size</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">paramInfo</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">goals</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">MVarId</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">))))</span>\n      <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"n\">goals.push</span> <span class=\"n\">pf.mvarId</span><span class=\"bp\">!</span>\n      <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n      <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">args</span> <span class=\"k\">do</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">infos.size</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">not</span> <span class=\"n\">infos</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">hasFwdDeps</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfD</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">isArrow</span> <span class=\"k\">then</span>\n          <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEq</span> <span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">arg</span><span class=\"o\">))))</span>\n          <span class=\"n\">goals</span> <span class=\"o\">:=</span> <span class=\"n\">goals.push</span> <span class=\"n\">eq.mvarId</span><span class=\"bp\">!</span>\n          <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkCongr</span> <span class=\"n\">pf</span> <span class=\"n\">eq</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">pf</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkCongrFun</span> <span class=\"n\">pf</span> <span class=\"n\">arg</span>\n        <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n      <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"n\">mkMVar</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"n\">pf</span><span class=\"o\">)</span>\n      <span class=\"n\">mvarId.assign</span> <span class=\"n\">pf</span> <span class=\"c1\">-- The isDefEq doesn't appear to assign the metavariable?</span>\n\n      <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">goals.toList</span>\n</code></pre></div>",
        "id": 339420433,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677869277
    },
    {
        "content": "<p>I'm also not completely sure if I should be doing <code>isDefEq</code> on the terms themselves (a goal metavariable and a proof) or their types.</p>",
        "id": 339420591,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677869333
    },
    {
        "content": "<p>(This function is in the work-in-progress <a href=\"https://github.com/leanprover-community/mathlib4/pull/2606\">mathlib4#2606</a> for context.)</p>",
        "id": 339420872,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677869417
    },
    {
        "content": "<p>The fallback code isn't a great solution either (see <a href=\"https://github.com/leanprover/lean4/pull/2128\">lean4#2128</a>).</p>",
        "id": 339426585,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677871235
    },
    {
        "content": "<p>I can't tell why the <code>isDefEq</code> doesn't work here.  <del>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</del>  If I had to guess, I'd say that Lean applies proof irrelevance before assigning the metavariable.  But then we're using <code>isDefEq</code> to assign mvars all over the place.</p>",
        "id": 339426736,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677871290
    },
    {
        "content": "<p>Oh, we use it all over the place and it's known to be broken: <a href=\"https://github.com/leanprover/lean4/pull/2054\">lean4#2054</a> ...</p>",
        "id": 339426843,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677871322
    },
    {
        "content": "<p>Thanks, that's good to know about how it's known to not work for propostions.</p>",
        "id": 339432322,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677873135
    },
    {
        "content": "<p>Regarding the fallback code, I just wanted to give <code>congr!</code> a chance at applying to some useful situations, like from earlier in the thread. Even if it can't handle dependent types, I'm hoping it can handle at least as much as simp can.</p>\n<p>I need to rethink it a bit though, since the fallback is happy to apply congruence lemmas even if it's unfolding definitions in the types.</p>",
        "id": 339432943,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677873380
    },
    {
        "content": "<p>It really negatively affects expressions involving <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=setOf#doc\">docs4#setOf</a> for example</p>",
        "id": 339433081,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677873445
    }
]