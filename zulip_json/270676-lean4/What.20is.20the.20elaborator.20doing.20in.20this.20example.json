[
    {
        "content": "<p>In the following code snippet the elaborator spends three seconds, even though it looks like I gave it a fully elaborated term. What is it spending its time doing? Interestingly, if I use <code>List.eraseDups</code> (and <code>instBEqNat</code>) instead of <code>List.dedup</code> then elaboration is instant. The kernel typechecks the declaration in an instant as well.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Kernel</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.dedup.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"bp\">@</span><span class=\"n\">Nat.decEq</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.replicate.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero.succ.succ.succ.succ.succ.succ.succ.succ.succ</span><span class=\"o\">)</span> <span class=\"bp\">@</span><span class=\"n\">Nat.zero</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"bp\">@</span><span class=\"n\">Nat.zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq.refl.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"bp\">@</span><span class=\"n\">Nat.zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 394845424,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696427381
    },
    {
        "content": "<p>You can use the profiler option and in addition my Flame tool to profile it and hopefully figure out what's up</p>",
        "id": 394847516,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696428002
    },
    {
        "content": "<p>Yet another example where <code>by rfl</code> is way faster than <code>rfl</code>.</p>",
        "id": 394851857,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696429225
    },
    {
        "content": "<p>It's also an example of the kind initially discovered by Kevin in <a href=\"#narrow/stream/270676-lean4/topic/rfl.20repeating.20itself\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/rfl.20repeating.20itself</a>, where the times from the trace profiler are roughly of the form X, X/2, X/4, X/8, ..., suggesting something is being checked/elaborated twice in a way that leads to exponential blowup.</p>",
        "id": 394852648,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696429473
    },
    {
        "content": "<p>Does it get better with <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a>?</p>",
        "id": 394852988,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696429576
    },
    {
        "content": "<p>Here it got 2.16x faster with the <code>leanprover/lean4-pr-releases:pr-release-2612</code> toolchain compared to <code>leanprover/lean4:v4.2.0-rc1</code>, but I haven't tested the parent commit to be sure the speedup comes just from the mentioned PR. Also don't know what the standard deviation is for these measurements, it would be good to have a tool to make \"proper\" local benchmarking simple.</p>",
        "id": 394855430,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696430235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20elaborator.20doing.20in.20this.20example/near/394847516\">said</a>:</p>\n<blockquote>\n<p>You can use the profiler option and in addition my Flame tool to profile it and hopefully figure out what's up</p>\n</blockquote>\n<p>How do I use your Flame tool?</p>",
        "id": 394864510,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696432840
    },
    {
        "content": "<p>Chris, there is some info at <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Introducing.20FlameTC</a>, but I'm not sure this is sufficient to get started.</p>",
        "id": 394867671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696433776
    },
    {
        "content": "<p>I followed those instructions and they worked flawlessly. The fact that I didn't understand the output was the issue for me, but I think that for the obscure slowdown I was debugging nobody understood the output :-)</p>",
        "id": 394868524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696434093
    },
    {
        "content": "<p>Yes, understanding the output is the tricky part.</p>",
        "id": 394870325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696434687
    },
    {
        "content": "<p>There was some discussion where Sebastian and Henrik explained this to me but I can' t find it now.</p>",
        "id": 394870635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696434787
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/w8vIyKeNuwYQQ15zClaSbNJP/out.txt\">out.txt</a><br>\nI've attached <code>out.txt</code>, from Flame, but it's hard to understand.</p>",
        "id": 394873508,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696435672
    },
    {
        "content": "<p>wait, this output is only 1 byte?</p>",
        "id": 394874507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696436031
    },
    {
        "content": "<p>Sorry. It's now fixed</p>",
        "id": 394875060,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696436245
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/8iN312PmopldS8ABwSNd4Cvc/out.svg\">out.svg</a></p>",
        "id": 394877255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1696437078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20elaborator.20doing.20in.20this.20example/near/394877255\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/3121/8iN312PmopldS8ABwSNd4Cvc/out.svg\">out.svg</a></p>\n</blockquote>\n<p>Hm, there is  a lot of info missing from the profile due to insufficient logging from the compiler I guess but it does seem to think very hard about this casesOn =?= 0 unification problem and also twice but in swapped form? That seems a bit unnecessary if it is truly the same term</p>",
        "id": 394896181,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1696444449
    },
    {
        "content": "<p>Elaboration time seems to be exponential in the number of <code>succ</code>s. Approximately 3 times slower for each extra <code>succ</code>.</p>",
        "id": 394998213,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696497669
    },
    {
        "content": "<p>With <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a> as well?</p>",
        "id": 394998605,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696497826
    },
    {
        "content": "<p>I don't know how to test that. How do I make mathlib depend on that Lean commit?</p>",
        "id": 394998921,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696497945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325367\">Mauricio Collares</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20elaborator.20doing.20in.20this.20example/near/394855430\">said</a>:</p>\n<blockquote>\n<p>Here it got 2.16x faster with the <code>leanprover/lean4-pr-releases:pr-release-2612</code> toolchain compared to <code>leanprover/lean4:v4.2.0-rc1</code>, but I haven't tested the parent commit to be sure the speedup comes just from the mentioned PR. Also don't know what the standard deviation is for these measurements, it would be good to have a tool to make \"proper\" local benchmarking simple.</p>\n</blockquote>\n<p>Perhaps <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> already pushed a branch that does that?</p>",
        "id": 394999440,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696498141
    },
    {
        "content": "<p>There's an automatic one, <code>lean-pr-testing-2612</code></p>",
        "id": 394999696,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696498216
    },
    {
        "content": "<p>The answer to my question is type <code>leanprover/lean4-pr-releases:pr-release-2612</code> in the <code>lean-toolchain</code> file for anyone interested.</p>",
        "id": 394999720,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696498224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20elaborator.20doing.20in.20this.20example/near/394998605\">said</a>:</p>\n<blockquote>\n<p>With <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a> as well?</p>\n</blockquote>\n<p>Yes. It's about 2.5x faster. But still about 3 times slower for each extra <code>succ</code>.</p>",
        "id": 395003186,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696499605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> This can be pasted after the test in <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a> for a minimised example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pwFilter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">IH</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">IH</span> <span class=\"k\">else</span> <span class=\"n\">IH</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pwFilter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- times out</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">dedup</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"mi\">11</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- times out</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">dedup</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"bp\">@</span><span class=\"n\">Nat.decEq</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.replicate.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero.succ.succ.succ.succ.succ.succ.succ.succ.succ</span><span class=\"o\">)</span> <span class=\"bp\">@</span><span class=\"n\">Nat.zero</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.cons.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span> <span class=\"bp\">@</span><span class=\"n\">Nat.zero</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">List.nil.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"bp\">@</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 395013165,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696502672
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 395013966,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696502901
    },
    {
        "content": "<p>Ah, you already mentioned that <code>by rfl</code> is fast, so it is not WHNF but the first-order approximation of defeq that's likely at fault here. I think the first question we should ask here is whether we simply want to ensure that term <code>rfl</code> benefits from all the optimizations tactic <code>rfl</code> has.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- for demonstration purposes only, might not be quite correct yet regarding hygiene</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>  <span class=\"c1\">-- not as recursive as it looks</span>\n</code></pre></div>",
        "id": 395015814,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696503509
    },
    {
        "content": "<p>Does <code>dsimp</code> apply <code>by rfl</code> theorems?</p>",
        "id": 395016926,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1696503874
    },
    {
        "content": "<p>It should, the resulting <code>Expr</code> is the same</p>",
        "id": 395018663,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696504510
    },
    {
        "content": "<p>Huh, actually the minimised example I posted is really fast with <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a> (sorry for not checking earlier!), even with <code>rfl</code>.</p>",
        "id": 395021746,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696505425
    },
    {
        "content": "<p>That's super weird. With <code>decidableBall</code> implemented in terms of <code>decidableBex</code>, as in <a href=\"https://github.com/leanprover/lean4/blob/0362acd5575854b43451b9669eb3c6037b123139/tests/bench/reduceMatch.lean#L21\">the test</a>, everything is fast using the toolchain from <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a>. But if I instead use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decidableBall</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"o\">‹</span><span class=\"n\">DecidablePred</span> <span class=\"n\">p</span><span class=\"o\">›</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">decidableBall</span> <span class=\"n\">p</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"gr\">sorry</span>\n      <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">h₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>as the decidableBall implementation, then </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">pwFilter</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">DecidableRel</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">IH</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">IH</span> <span class=\"k\">else</span> <span class=\"n\">IH</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pwFilter</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">dedup</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"mi\">11</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>times out again with <code>(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached</code>, even using <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a>. This implementation of <code>decidableBall</code> is closer to what is used in Std/mathlib.</p>",
        "id": 395023425,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696506065
    },
    {
        "content": "<p>Filed as <a href=\"https://github.com/leanprover/lean4/pull/2627\">lean4#2627</a> just in case.</p>",
        "id": 395030378,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696508319
    },
    {
        "content": "<p>Hmm, the following simplification also times out pre <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a>, but works with <code>by rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dedup</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">List.foldr</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">IH</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">IH.all</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">IH</span> <span class=\"k\">else</span> <span class=\"n\">IH</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">dedup</span> <span class=\"o\">(</span><span class=\"n\">List.replicate</span> <span class=\"mi\">11</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>After <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a> it runs fast.</p>",
        "id": 395042231,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696512049
    },
    {
        "content": "<p>If it's fast with 2612 but wasn't fast before minimization, I think you've simplified too far :)</p>",
        "id": 395043309,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696512391
    },
    {
        "content": "<p>Yes, I tend to do that :/ Which is why I filed <a href=\"https://github.com/leanprover/lean4/pull/2627\">lean4#2627</a> as soon as I had something mathlib-free which wasn't fixed by 2612. I then couldn't resist continuing, of course.</p>",
        "id": 395044345,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696512711
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/koBVelAtGF7G3_f48Zblzrya/flame.svg\">flame.svg</a> for the example in <a href=\"https://github.com/leanprover/lean4/pull/2627\">lean4#2627</a> with <a href=\"https://github.com/leanprover/lean4/pull/2559\">lean4#2559</a> and <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a></p>",
        "id": 395057261,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696516416
    },
    {
        "content": "<p>I think I have a clue of what's going on</p>",
        "id": 395060308,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696517309
    },
    {
        "content": "<p>I think the purpose of this question for me was just to understand why the kernel can be super fast to type check a declaration, but <code>IsDefEq</code> is extremely slow? What is so different about the elaborator and the kernel. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> showed me a more complicated example of a <code>rfl</code> proof which type checked in the kernel in like 0.02s but took a long time in the elaborator.</p>",
        "id": 395280989,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1696605483
    },
    {
        "content": "<p>There isn't any fundamental reason; more complex code is simply more complex to implement caching for</p>",
        "id": 395296696,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696610715
    }
]