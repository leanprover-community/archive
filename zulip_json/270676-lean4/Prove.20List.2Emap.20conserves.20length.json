[
    {
        "content": "<p>I'm trying to prove that <code>List.map</code> conserves the length of the list, and I actually managed to prove that as a lemma, but I'm stuck on what feels like should be the easy part.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span>\n  <span class=\"n\">l.recOn</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">List.map</span><span class=\"o\">])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Board.fromNats</span> <span class=\"o\">(</span><span class=\"n\">cells</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cells.length</span> <span class=\"bp\">=</span> <span class=\"mi\">81</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Board</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">map_fn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CellValue.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">⟨</span><span class=\"n\">cells.map</span> <span class=\"n\">map_fn</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"c1\">-- Prove List.length cells.map (...) = 81</span>\n</code></pre></div>\n<p>How do I use my lemma to prove <code>List.length (cells.map map_fn) = 81</code>?</p>",
        "id": 404450576,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1701103486
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Board.fromNats</span> <span class=\"o\">(</span><span class=\"n\">cells</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cells.length</span> <span class=\"bp\">=</span> <span class=\"mi\">81</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Board</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">map_fn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">CellValue.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">cells.map</span> <span class=\"n\">map_fn</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">81</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">map_length</span> <span class=\"n\">map_fn</span> <span class=\"n\">cells</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"o\">⟨</span><span class=\"n\">cells.map</span> <span class=\"n\">map_fn</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Next time please try to post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 404452558,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701104144
    }
]