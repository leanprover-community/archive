[
    {
        "content": "<p>Hi, i'm trying to run this code with a mutual recursion but I'm getting a strange error about the tactic assumption </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Ident</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>  <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n  <span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">fixpoint</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">boundSubs</span> <span class=\"o\">(</span><span class=\"n\">from_</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">app</span><span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">binder</span><span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n    <span class=\"k\">if</span> <span class=\"n\">binder</span> <span class=\"bp\">==</span> <span class=\"n\">from_</span>\n      <span class=\"k\">then</span> <span class=\"n\">app</span> <span class=\"n\">binder</span> <span class=\"n\">body</span>\n      <span class=\"k\">else</span> <span class=\"n\">app</span> <span class=\"n\">binder</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">substitute</span> <span class=\"o\">(</span><span class=\"n\">from_</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">from_</span> <span class=\"k\">then</span> <span class=\"n\">to</span> <span class=\"k\">else</span> <span class=\"n\">var</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">zero</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">zero</span>\n    <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">e</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">case</span> <span class=\"n\">cond</span> <span class=\"n\">onZ</span> <span class=\"n\">name</span> <span class=\"n\">onS</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">onCase</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">case</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">cond</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">substitute</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">onZ</span><span class=\"o\">))</span>\n      <span class=\"n\">boundSubs</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">onCase</span> <span class=\"n\">name</span> <span class=\"n\">onS</span>\n    <span class=\"bp\">|</span> <span class=\"n\">abs</span> <span class=\"n\">param</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">boundSubs</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">abs</span> <span class=\"n\">param</span> <span class=\"n\">body</span>\n    <span class=\"bp\">|</span> <span class=\"n\">fixpoint</span> <span class=\"n\">n</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">boundSubs</span> <span class=\"n\">from_</span> <span class=\"n\">to</span> <span class=\"n\">fixpoint</span> <span class=\"n\">n</span> <span class=\"n\">t</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">substitute</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">expr</span>\n  <span class=\"n\">boundSubs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">assumption'</span> <span class=\"n\">failed</span><span class=\"o\">,</span>\n<span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"n\">binder</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span>\n<span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Term</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">sizeOf</span> <span class=\"n\">body</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">body</span>\n</code></pre></div>",
        "id": 277927811,
        "sender_full_name": "Chiyoku",
        "timestamp": 1649184979
    },
    {
        "content": "<p>You should be using an old Lean 4 binary.  We have improved the error message. Could you please get the latest nightly build and try again?</p>",
        "id": 277928145,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649185144
    },
    {
        "content": "<p>Note that <code>boundSubs</code> has a recursive <code>substitute</code> application and the argument <code>body</code> is the same one taken by <code>boundSubs</code>. In the well-founded relation you selected, this application is not \"smaller\". You can use a slightly different well-founded relation.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span>\n  <span class=\"n\">boundSubs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">substitute</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277928994,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649185481
    },
    {
        "content": "<p>BTW, the <code>termination_by</code> notation names arguments from right to left. So, you don't need all the <code>_</code>s.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span>\n  <span class=\"n\">boundSubs</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">substitute</span> <span class=\"n\">expr</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">sizeOf</span> <span class=\"n\">expr</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 277929216,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1649185563
    },
    {
        "content": "<p>I'm running into an error when doing mutual recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">normal_does_not_reduce</span>\n  <span class=\"n\">neutral_does_not_reduce</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">handle</span> <span class=\"n\">mutually</span> <span class=\"n\">recursive</span> <span class=\"n\">functions</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>Essentially I'm doing a very dumbed down lambda calculus and I've defined mutually inductive <code>Normal</code> and <code>Neutral</code> data types that are indexed by well-typed expressions. The code is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">normal_does_not_reduce</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Normal</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">neutral</span> <span class=\"n\">neut</span><span class=\"o\">,</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut</span> <span class=\"n\">tr</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">neutral_does_not_reduce</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Neutral</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">neut₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₁</span> <span class=\"n\">tr₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut₁</span> <span class=\"n\">tr₁</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">_</span> <span class=\"n\">norm₂</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₂</span> <span class=\"n\">norm₁</span> <span class=\"n\">tr₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normal_does_not_reduce</span> <span class=\"n\">norm₂</span> <span class=\"n\">tr₂</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">v₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₁</span> <span class=\"n\">tr₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v₁.does_not_reduce</span> <span class=\"n\">tr₁</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">_</span> <span class=\"n\">neut₂</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₂</span> <span class=\"n\">norm₁</span> <span class=\"n\">tr₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut₂</span> <span class=\"n\">tr₂</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I spent a good amount of time trying to come up with a MWE, but I didn't succeed (see <a href=\"https://pastebin.com/0pxHUrmw\">https://pastebin.com/0pxHUrmw</a>,). It doesn't give the same error for some reason, but that's essentially what I have (except I have contexts and De Bruijn indices added).</p>\n<p>I understand that without a MWE, it may be hard to help, but was hoping someone may have a quick tip to help resolve the issue.</p>",
        "id": 344979856,
        "sender_full_name": "sgcs",
        "timestamp": 1679956761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"597976\">@sgcs</span> This is probably the part of the error message you should listen to:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to prove termination, use `termination_by` to specify a well-founded relation\n</code></pre></div>",
        "id": 344996839,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679963352
    },
    {
        "content": "<p>So your struture will be (fill in the XXX)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">normal_does_not_reduce</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Normal</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">neutral</span> <span class=\"n\">neut</span><span class=\"o\">,</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut</span> <span class=\"n\">tr</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">neutral_does_not_reduce</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">Neutral</span> <span class=\"n\">t₁</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">neut₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₁</span> <span class=\"n\">tr₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut₁</span> <span class=\"n\">tr₁</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">_</span> <span class=\"n\">norm₂</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₂</span> <span class=\"n\">norm₁</span> <span class=\"n\">tr₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normal_does_not_reduce</span> <span class=\"n\">norm₂</span> <span class=\"n\">tr₂</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">v₁</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₁</span> <span class=\"n\">tr₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v₁.does_not_reduce</span> <span class=\"n\">tr₁</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">_</span> <span class=\"n\">neut₂</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₂</span> <span class=\"n\">norm₁</span> <span class=\"n\">tr₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut₂</span> <span class=\"n\">tr₂</span>\n\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">normal_does_not_reduce</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">XXX</span> <span class=\"bp\">;</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">XXX</span>\n</code></pre></div>",
        "id": 344997335,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679963444
    },
    {
        "content": "<p>See some of the later examples at this link:<br>\n<a href=\"https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">https://leanprover.github.io/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction</a></p>",
        "id": 344997524,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679963487
    },
    {
        "content": "<p>I had given that a shot:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">normal_does_not_reduce</span> <span class=\"n\">norm</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm</span>\n                <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neut</span>\n</code></pre></div>\n<p>But I was getting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">norm</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Normal</span> <span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.269218</span>\n</code></pre></div>\n<p>Which I don't understand since it seems like it should unify just fine? I ended up taking a different approach and got it working though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">theorem</span> <span class=\"n\">normal_or_neutral_does_not_reduce</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"bp\">Γ</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">τ</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₁</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₁</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t₂</span> <span class=\"o\">:</span> <span class=\"bp\">Γ</span> <span class=\"bp\">⊢</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">τ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">norm_or_neut</span> <span class=\"o\">:</span> <span class=\"n\">Sum</span> <span class=\"o\">(</span><span class=\"n\">Normal</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Neutral</span> <span class=\"n\">t₁</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">tr</span> <span class=\"o\">:</span> <span class=\"n\">t₁</span> <span class=\"bp\">⟶</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Empty</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">norm_or_neut</span><span class=\"o\">,</span> <span class=\"n\">tr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">neutral</span> <span class=\"n\">neut</span><span class=\"o\">),</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normal_or_neutral_does_not_reduce</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">neut</span><span class=\"o\">)</span> <span class=\"n\">tr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">number</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">.</span><span class=\"n\">number</span><span class=\"o\">,</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">tr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">string</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"bp\">.</span><span class=\"n\">string</span><span class=\"o\">,</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">tr</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">neut₁</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₁</span> <span class=\"n\">tr₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normal_or_neutral_does_not_reduce</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">neut₁</span><span class=\"o\">)</span> <span class=\"n\">tr₁</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">plus₁</span> <span class=\"n\">_</span> <span class=\"n\">norm₂</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₂</span> <span class=\"n\">norm₁</span> <span class=\"n\">tr₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normal_or_neutral_does_not_reduce</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">norm₂</span><span class=\"o\">)</span> <span class=\"n\">tr₂</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">v₁</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₁</span> <span class=\"n\">tr₁</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v₁.does_not_reduce</span> <span class=\"n\">tr₁</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plus</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">plus₂</span> <span class=\"n\">_</span> <span class=\"n\">neut₂</span><span class=\"o\">),</span> <span class=\"bp\">.</span><span class=\"n\">ξ_plus₂</span> <span class=\"n\">norm₁</span> <span class=\"n\">tr₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">normal_or_neutral_does_not_reduce</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">neut₂</span><span class=\"o\">)</span> <span class=\"n\">tr₂</span>\n</code></pre></div>",
        "id": 345021068,
        "sender_full_name": "sgcs",
        "timestamp": 1679977599
    },
    {
        "content": "<p>your alignment is bad in that example</p>",
        "id": 345026596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679980584
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">normal_does_not_reduce</span> <span class=\"n\">norm</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm</span>\n                <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neut</span>\n</code></pre></div>\n<p>will be interpreted as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">normal_does_not_reduce</span> <span class=\"n\">norm</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">norm</span> <span class=\"n\">neutral_does_not_reduce</span> <span class=\"n\">neut</span> <span class=\"n\">tr</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">neut</span>\n</code></pre></div>",
        "id": 345026667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679980620
    },
    {
        "content": "<p>which fails since <code>norm</code> isn't a function</p>",
        "id": 345026709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679980647
    },
    {
        "content": "<p>I think the alignment was just a copy-paste issue, it was aligned for my personally</p>",
        "id": 345039284,
        "sender_full_name": "sgcs",
        "timestamp": 1679985529
    }
]