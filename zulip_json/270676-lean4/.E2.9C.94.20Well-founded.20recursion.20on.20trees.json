[
    {
        "content": "<p>I am having some trouble defining well-founded recursion on a tree represented as a map <code>α → List α</code> which takes each node to its children (I cannot use an inductive type for efficiency reasons). The idea is to have a function <code>depth : α → Nat</code> which assigns a depth to each node, and this function gives the decreasing measure. We can define well-founded depth-first search <code>dfs</code> like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.foldlDep</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span><span class=\"o\">,</span>      <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">init</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">init</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">init</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foldlDep</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wfTree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dfs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">wfTree</span> <span class=\"n\">α</span> <span class=\"n\">depth</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">start</span>\n  <span class=\"n\">m.val</span> <span class=\"n\">start</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldlDep</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">depth</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"n\">start</span> <span class=\"o\">:=</span>\n        <span class=\"n\">m.property</span> <span class=\"n\">start</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n      <span class=\"n\">dfs</span> <span class=\"n\">depth</span> <span class=\"n\">m</span> <span class=\"n\">next</span> <span class=\"n\">acc</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">acc</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">dfs</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">depth</span> <span class=\"n\">m</span> <span class=\"n\">start</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"n\">start</span>\n</code></pre></div>\n<p>but notice that in the above code <code>depth</code> is a computationally relevant parameter. I don't want this to be the case because <code>depth</code> is only there to prove well-foundedness and the generated code shouldn't include it. This is where I ran into trouble. Suppose we define <code>wfTree'</code> like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wfTree'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>then we seemingly cannot use a <code>termination_by</code> clause because it would eliminate from <code>∃</code> into <code>Nat</code>. But even using raw recursors I was unable to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfs'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">wfTree'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>since attempts seem to run into having to construct a family of propositions out of <code>∃</code> (which is perhaps unsound?).</p>\n<p>I would appreciate any help.</p>",
        "id": 324818929,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675134275
    },
    {
        "content": "<p>If you just never use <code>depth</code> inside <code>dfs</code> then the generated code won't include it as an argument.</p>",
        "id": 324819756,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675134899
    },
    {
        "content": "<p>If you wanted a static guarantee that you don't use it, you could wrap the <code>depth</code> inside an <code>Erased</code> type.</p>",
        "id": 324819815,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675134949
    },
    {
        "content": "<p>You could also parametrize <code>dfs</code> by a parameter <code>[WellFoundedRelation α]</code> (i.e. a well-founded relation <code>rel : α → α → Prop</code>).</p>",
        "id": 324820075,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675135100
    },
    {
        "content": "<p>You can then set <code>rel a b := depth a &lt; depth b</code> as the wf relation.</p>",
        "id": 324820093,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675135122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Well-founded.20recursion.20on.20trees/near/324819756\">said</a>:</p>\n<blockquote>\n<p>If you just never use <code>depth</code> inside <code>dfs</code> then the generated code won't include it as an argument.</p>\n</blockquote>\n<p>What counts as a use? I have to pass it into the <code>dfs</code> in the recursive call, and I think that counts because the IR has all five arguments.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfs._rarg._lambda_1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">dfs._rarg</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"n\">x_5</span> <span class=\"n\">x_4</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_7</span>\n<span class=\"kd\">def</span> <span class=\"n\">dfs._rarg</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">x_5</span> <span class=\"n\">x_4</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">pap</span> <span class=\"n\">dfs._rarg._lambda_1</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">List.foldlDep._rarg</span> <span class=\"n\">x_7</span> <span class=\"n\">x_8</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_9</span>\n<span class=\"kd\">def</span> <span class=\"n\">dfs</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"bp\">◾</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">pap</span> <span class=\"n\">dfs._rarg</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_3</span>\n</code></pre></div>",
        "id": 324820390,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675135370
    },
    {
        "content": "<p><code>attribute [specialize] foldlDep</code>?</p>",
        "id": 324820533,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675135503
    },
    {
        "content": "<p>Even with <code>@[specialize]</code> on <code>foldlDep</code> and <code>depth : Erased (α → Nat)</code> I get the same IR, as far as I can tell.</p>",
        "id": 324820994,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675135857
    },
    {
        "content": "<p>Interestingly, <code>@[specialize]</code> does nothing here.</p>",
        "id": 324821033,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675135894
    },
    {
        "content": "<p>So I think my original question still stands. If it were possible to define this function on a mere proposition, I wouldn't have to worry about details of code generation. Note that even if <code>dfs</code> (the non-primed version) compiles with a <code>depth : α → Nat</code> argument to something that doesn't use the pointer, I still have to get that <code>depth</code> from <em>somewhere</em> and that source cannot be a proposition, so I will have to store it which is not ideal.</p>",
        "id": 324821184,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675136030
    },
    {
        "content": "<p>Using a well-founded relation should work and hopefully be erased, right?</p>",
        "id": 324821315,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675136123
    },
    {
        "content": "<p><code>Erased</code> has never generated great code, not in Lean 3 either.  It's a small tweak in the compiler to erase it, but I don't see it happening soon.</p>",
        "id": 324821536,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675136291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/Well-founded.20recursion.20on.20trees/near/324821315\">said</a>:</p>\n<blockquote>\n<p>Using a well-founded relation should work and hopefully be erased, right?</p>\n</blockquote>\n<p>Do you mean something like this? It still has the extra argument in the IR.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wfTreeWFR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rel.rel</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dfsWFR</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">wfTreeWFR</span> <span class=\"n\">α</span> <span class=\"n\">rel</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">start</span>\n  <span class=\"n\">m.val</span> <span class=\"n\">start</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldlDep</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">rel.rel</span> <span class=\"n\">next</span> <span class=\"n\">start</span> <span class=\"o\">:=</span>\n        <span class=\"n\">m.property</span> <span class=\"n\">start</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n      <span class=\"n\">dfsWFR</span> <span class=\"n\">m</span> <span class=\"n\">next</span> <span class=\"n\">acc</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">acc</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">dfsWFR</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">start</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">start</span>\n</code></pre></div>",
        "id": 324822151,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675136808
    },
    {
        "content": "<p>It appears that the compiler is not able to prove that structures consisting entirely of erased parts are also erased (which afflicts both <code>Erased</code> and <code>WellFoundedRelation</code> here). Splitting the pieces up works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfsWFR</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">rel</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">wf</span> <span class=\"o\">:</span> <span class=\"n\">WellFounded</span> <span class=\"n\">rel</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">wfTreeWFR</span> <span class=\"n\">α</span> <span class=\"o\">⟨</span><span class=\"n\">rel</span><span class=\"o\">,</span> <span class=\"n\">wf</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">start</span>\n  <span class=\"n\">m.val</span> <span class=\"n\">start</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldlDep</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"n\">next</span> <span class=\"n\">start</span> <span class=\"o\">:=</span>\n        <span class=\"n\">m.property</span> <span class=\"n\">start</span> <span class=\"n\">_</span> <span class=\"n\">h</span>\n      <span class=\"n\">dfsWFR</span> <span class=\"n\">rel</span> <span class=\"n\">wf</span> <span class=\"n\">m</span> <span class=\"n\">next</span> <span class=\"n\">acc</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">acc</span>\n<span class=\"n\">termination_by'</span> <span class=\"n\">dfsWFR</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"n\">rel</span><span class=\"o\">,</span> <span class=\"n\">wf</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 324824339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675138446
    },
    {
        "content": "<p>This is actually a general technique, since you can split up almost any precondition into a relation over all the arguments plus a proposition asserting that the relation holds</p>",
        "id": 324824471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675138576
    },
    {
        "content": "<p>It's so general that it's even got a name: currying.</p>",
        "id": 324824526,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675138649
    },
    {
        "content": "<p>that's an interesting perspective, I can't say I see the connection. It looks a bit closer to double-negation translation / continuation passing style if we want to put a name to it</p>",
        "id": 324824637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675138733
    },
    {
        "content": "<p>Here's the more general form of this approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ofAcc</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">Acc</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">WellFoundedRelation</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">invImage</span> <span class=\"n\">F</span> <span class=\"o\">⟨</span><span class=\"n\">InvImage</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">InvImage.accessible</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">⟩⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dfsWFR</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">start</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">start</span>\n  <span class=\"n\">F</span> <span class=\"n\">start</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldlDep</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dfsWFR</span> <span class=\"n\">F</span> <span class=\"n\">next</span> <span class=\"n\">acc</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pf.inv</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n    <span class=\"n\">acc</span>\n<span class=\"n\">termination_by'</span> <span class=\"n\">dfsWFR</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofAcc</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(the first definition should be a library function, after giving it a better name)</p>",
        "id": 324825636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675139732
    },
    {
        "content": "<p>in this case we don't even need the relation because the inputs are already enough to define the shape of the recursion</p>",
        "id": 324825654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675139757
    },
    {
        "content": "<p>Ah that's what you meant by general! That's indeed no longer just a curry.</p>",
        "id": 324825763,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675139873
    },
    {
        "content": "<p>Unfortunately this still doesn't quite eliminate all the dummy arguments because proof arguments still have to be passed in the lean ABI for partial application to work properly. To get rid of that last bit you have to smuggle the proof along with another argument using a subtype:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">dfsWFR</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">start</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">acc</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">init</span> <span class=\"n\">start</span>\n  <span class=\"n\">F</span> <span class=\"n\">start</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">foldlDep</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dfsWFR</span> <span class=\"n\">F</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"n\">start.2.inv</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"n\">acc</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n    <span class=\"n\">acc</span>\n<span class=\"n\">termination_by'</span> <span class=\"n\">dfsWFR</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofAcc</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 324825838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675139932
    },
    {
        "content": "<p>(aside, if you get the syntax wrong in the <code>termination_by'</code> line it appears that defeq checking diverges)</p>",
        "id": 324826070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675140135
    },
    {
        "content": "<p>e.g. <code>termination_by' dfsWFR =&gt; ofAcc fun ⟨a, _, _, _⟩ =&gt; a</code> causes lean to think for a while and then produce a goal type of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">F</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">})</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span>\n    <span class=\"n\">Acc</span>\n      <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2437</span>\n        <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2472</span>\n          <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2510</span>\n            <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2551</span>\n              <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2595</span>\n                <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2642</span>\n                  <span class=\"o\">(</span><span class=\"n\">Prod.Lex</span> <span class=\"bp\">?</span><span class=\"n\">m.2692</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>in the error message</p>",
        "id": 324826173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675140225
    },
    {
        "content": "<p>Thanks everyone, this was extremely helpful. Mario's example points out that I shouldn't have been using a <code>depth</code> function in the first place, keeping around a proof of accessibility suffices.</p>",
        "id": 324827141,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675140862
    },
    {
        "content": "<p>And just to answer my original question of how to make <code>dfs'</code> work, here is one way of turning <code>wfTree'</code> into a predicate that works with Mario's recursion.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">acc_of_depth</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.elim</span> <span class=\"k\">fun</span> <span class=\"n\">depth</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">a</span> <span class=\"n\">depth</span> <span class=\"n\">h</span>\n<span class=\"n\">where</span> <span class=\"n\">go</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">depth</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">depth</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">depth</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Acc</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∈</span> <span class=\"n\">m</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"n\">hY</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">y</span> <span class=\"n\">hY</span>\n    <span class=\"n\">go</span> <span class=\"n\">y</span> <span class=\"n\">depth</span> <span class=\"n\">h</span>\n  <span class=\"n\">termination_by</span> <span class=\"n\">go</span> <span class=\"n\">a</span> <span class=\"n\">depth</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">depth</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 324952993,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675181442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> has marked this topic as resolved.</p>",
        "id": 324953011,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675181446
    }
]