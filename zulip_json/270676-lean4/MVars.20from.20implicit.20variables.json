[
    {
        "content": "<p>I'm trying to get a variant of an <code>apply at</code> tactic to work. So far, I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This function is similar to `forallMetaTelescopeReducingUntilDefEq` except that</span>\n<span class=\"sd\">it will construct mvars until it reaches one whose type is defeq to the given</span>\n<span class=\"sd\">type `t`. It uses `forallMetaTelescopeReducing`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.forallMetaTelescopeReducingUntilDefEq</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:</span> <span class=\"n\">MetavarKind</span> <span class=\"o\">:=</span> <span class=\"n\">MetavarKind.natural</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">bis</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">kind</span>\n  <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n  <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">ms</span>\n  <span class=\"n\">bis</span> <span class=\"o\">:=</span> <span class=\"n\">bs</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">tp</span>\n  <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mvs.toList.getLast</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">kind</span>\n    <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n    <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs</span> <span class=\"bp\">++</span> <span class=\"n\">ms</span>\n    <span class=\"n\">bis</span> <span class=\"o\">:=</span> <span class=\"n\">bis</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span>\n    <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">tp</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">bis</span><span class=\"o\">,</span> <span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducingUntilDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ldecl.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.tryClear</span> <span class=\"n\">ldecl.fvarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">tp</span> <span class=\"o\">(</span><span class=\"n\">mkAppN</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">mvs.pop.push</span> <span class=\"n\">ldecl.toExpr</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">[</span><span class=\"n\">mainGoal</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">mvs.pop.toList.map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n  <span class=\"c1\">-- ⊢ γ</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I can't seem to figure out how to get a goal of type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> in the example with the current code. What am I missing here? If <code>sorry</code> is replaced with <code>assumption</code>, an error pops us at <code>f</code> on the first line of the tactic block complaining that Lean doesn't know what to do with the term of <code>alpha</code>, as expected. How would I arrange for this to be an additional goal?</p>",
        "id": 394893597,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696443462
    },
    {
        "content": "<p>Are the metavariables introduced by <code>forallMetaTelescopeReducing</code> associated to implicit binders special somehow? Is that what's going on here?</p>",
        "id": 394893746,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696443529
    },
    {
        "content": "<p>Using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>works...</p>\n<p>More seriously, maybe if you carefully craft a <code>mkAppOptM'</code> application instead of your <code>mkAppN</code> one, it might work?  You would have to inspect all the arguments to <code>f</code> and, for each, decide whether to pass it or not...</p>",
        "id": 394907437,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696449223
    },
    {
        "content": "<p>Right, I noticed that <code>@f</code> works. I want something similar to the behavior of the usual <code>apply</code> which introduces goals for implicit binders as well.</p>",
        "id": 394907790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696449402
    },
    {
        "content": "<p>I'll take a look at <code>mkAppOptM'</code>. Thanks!</p>",
        "id": 394907827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696449426
    },
    {
        "content": "<p>If you use <code>f.getAppFn</code> you might get closer to having a \"meta\" <code>@f</code>?</p>",
        "id": 394908023,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696449514
    },
    {
        "content": "<p>E.g., look at the error message with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">tp</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppOptM'</span> <span class=\"n\">f.getAppFn</span>\n    <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span><span class=\"o\">)]</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">mvs.pop.push</span> <span class=\"n\">ldecl.toExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n\n<span class=\"c1\">-- error:</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  @f ?m.13218</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  ?m.13218</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m.13217 : Sort ?u.13216</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  α : Type u_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is this progress?</p>",
        "id": 394908171,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696449591
    },
    {
        "content": "<p>Where is the <code>@</code> elaborator defined?</p>",
        "id": 394909678,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696450248
    },
    {
        "content": "<p>I do not know...</p>",
        "id": 394909725,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696450283
    },
    {
        "content": "<p>Ah it's in <code>Lean/Parser/Term</code>.</p>",
        "id": 394909884,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696450358
    },
    {
        "content": "<p>well, the parser at least: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.explicit#doc\">docs#Lean.Parser.Term.explicit</a></p>",
        "id": 394909913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696450372
    },
    {
        "content": "<p>LOL, here's a hack:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This function is similar to `forallMetaTelescopeReducingUntilDefEq` except that</span>\n<span class=\"sd\">it will construct mvars until it reaches one whose type is defeq to the given</span>\n<span class=\"sd\">type `t`. It uses `forallMetaTelescopeReducing`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.forallMetaTelescopeReducingUntilDefEq</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:</span> <span class=\"n\">MetavarKind</span> <span class=\"o\">:=</span> <span class=\"n\">MetavarKind.natural</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">bis</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">kind</span>\n  <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n  <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">ms</span>\n  <span class=\"n\">bis</span> <span class=\"o\">:=</span> <span class=\"n\">bs</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">tp</span>\n  <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mvs.toList.getLast</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">kind</span>\n    <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n    <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs</span> <span class=\"bp\">++</span> <span class=\"n\">ms</span>\n    <span class=\"n\">bis</span> <span class=\"o\">:=</span> <span class=\"n\">bis</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span>\n    <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">tp</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">bis</span><span class=\"o\">,</span> <span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">@$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducingUntilDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ldecl.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.tryClear</span> <span class=\"n\">ldecl.fvarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">tp</span>\n    <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppOptM'</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">mvs.pop.push</span> <span class=\"n\">ldecl.toExpr</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">[</span><span class=\"n\">mainGoal</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">mvs.pop.toList.map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">b</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 394910162,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696450501
    },
    {
        "content": "<p>I do not know if it is awesome or terrible that this works.</p>",
        "id": 394910817,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696450867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--  let t ← `(@$t)</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.getAppFn</span>\n</code></pre></div>",
        "id": 394910970,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696450928
    },
    {
        "content": "<p>oh, but that's not the intended behavior, I think. What if <code>f</code> is a partially applied function?</p>",
        "id": 394911238,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696451056
    },
    {
        "content": "<p>With this, I suspect that then you would have roll up your sleeves and collect all the previous arguments.</p>",
        "id": 394911324,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696451106
    },
    {
        "content": "<p>That could be information that the <code>forallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEqforallMetaTelescopeReducingUntilDefEq</code> gives back to you, along with everything else, maybe</p>",
        "id": 394911683,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696451285
    },
    {
        "content": "<p>In fact, a common situation would be one where <code>f</code> has some typeclass assumptions, so even if you do not want this tactic to be extra-robust, you are right that this is an issue that you need to address.</p>",
        "id": 394912012,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696451411
    },
    {
        "content": "<p>EDIT: this is nonsense!<br>\nAdam, maybe this is closer to what you wanted?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.getAppFn</span>\n  <span class=\"k\">let</span> <span class=\"n\">initial_args</span> <span class=\"o\">:=</span> <span class=\"n\">f.getAppArgs</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">mkAppN</span> <span class=\"n\">f</span> <span class=\"n\">initial_args</span>\n</code></pre></div>",
        "id": 394928617,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696460525
    },
    {
        "content": "<p><del>It had not occurred to me until now that <code>f</code> and <code>mkAppN f f.getAppArgs</code> could not be the same expression.</del></p>",
        "id": 394928984,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696460783
    },
    {
        "content": "<p>This might be a way to build on <code>Lean.MVarId.apply</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducingUntilDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ldecl.type</span>  <span class=\"c1\">-- no `mvs` needed</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">tp</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.apply</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">gs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.apply</span> <span class=\"n\">ldecl.toExpr</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gs.join</span>\n</code></pre></div>",
        "id": 394973696,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696487688
    },
    {
        "content": "<p>(deleted) sorry what I said was wrong... working on it now.</p>",
        "id": 395040211,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696511408
    },
    {
        "content": "<p>Sigh. I\"m still confused:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">This function is similar to `forallMetaTelescopeReducingUntilDefEq` except that</span>\n<span class=\"sd\">it will construct mvars until it reaches one whose type is defeq to the given</span>\n<span class=\"sd\">type `t`. It uses `forallMetaTelescopeReducing`.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Meta.forallMetaTelescopeReducingUntilDefEq</span>\n    <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:</span> <span class=\"n\">MetavarKind</span> <span class=\"o\">:=</span> <span class=\"n\">MetavarKind.natural</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mvs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">bis</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">BinderInfo</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">kind</span>\n  <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n  <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">ms</span>\n  <span class=\"n\">bis</span> <span class=\"o\">:=</span> <span class=\"n\">bs</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">tp</span>\n  <span class=\"n\">while</span> <span class=\"bp\">!</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mvs.toList.getLast</span><span class=\"bp\">!</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ms</span><span class=\"o\">,</span> <span class=\"n\">bs</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">out</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">kind</span>\n    <span class=\"n\">unless</span> <span class=\"n\">ms.size</span> <span class=\"bp\">==</span> <span class=\"mi\">1</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Error\"</span>\n    <span class=\"n\">mvs</span> <span class=\"o\">:=</span> <span class=\"n\">mvs</span> <span class=\"bp\">++</span> <span class=\"n\">ms</span>\n    <span class=\"n\">bis</span> <span class=\"o\">:=</span> <span class=\"n\">bis</span> <span class=\"bp\">++</span> <span class=\"n\">bs</span>\n    <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">tp</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">bis</span><span class=\"o\">,</span> <span class=\"n\">out</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducingUntilDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ldecl.type</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{mvs.size}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.tryClear</span> <span class=\"n\">ldecl.fvarId</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">tp</span>\n    <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppOptM'</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">mvs.pop.push</span> <span class=\"n\">ldecl.toExpr</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">e</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">[</span><span class=\"n\">mainGoal</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">mvs.pop.toList.map</span> <span class=\"k\">fun</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.mvarId</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">lctx.findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">f</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">lctx.findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">b</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducingUntilDefEq</span> <span class=\"n\">f.type</span> <span class=\"n\">b.type</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{mvs.size}\"</span> <span class=\"c1\">-- 2</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span> <span class=\"n\">at</span> <span class=\"n\">b</span> <span class=\"c1\">-- 1</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 395041038,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696511681
    },
    {
        "content": "<p>Ok, I think I minimized it down to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">fdecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">bar</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">foo</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs'</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducing</span> <span class=\"n\">fdecl.type</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{mvs.size} {mvs'.size}\"</span> <span class=\"c1\">-- 1 2</span>\n    <span class=\"n\">return</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I guess there's a difference in the behavior of <code>forallMetaTelescopeReducing</code> when applied to the type of an elaborated term vs. the type of a local declaration. I still don't really understand why this is the case. Can someone explain the difference between the two, just for my understanding?</p>",
        "id": 395050909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696514616
    },
    {
        "content": "<p>Aha, I guess the following is the reason: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">fdecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">bar</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{fdecl.type}\"</span> <span class=\"c1\">-- {n : ℕ} → ℕ × ℕ → ℕ × ℕ × ℕ</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{← inferType foo}\"</span> <span class=\"c1\">-- ℕ × ℕ → ℕ × ℕ × ℕ</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>So maybe the <code>`($f)</code> hack above wasn't so crazy?</p>",
        "id": 395052053,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696514933
    },
    {
        "content": "<p>I went with <code>`($t)</code>: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7527\">#7527</a></p>",
        "id": 395098569,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696530692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/MVars.20from.20implicit.20variables/near/394973696\">said</a>:</p>\n<blockquote>\n<p>This might be a way to build on <code>Lean.MVarId.apply</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"apply\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"at\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecl</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">findFromUserName</span><span class=\"bp\">?</span> <span class=\"n\">i.getId</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">mvs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">tp</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">forallMetaTelescopeReducingUntilDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">ldecl.type</span>  <span class=\"c1\">-- no `mvs` needed</span>\n  <span class=\"k\">let</span> <span class=\"n\">mainGoal</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">assert</span> <span class=\"n\">ldecl.userName</span> <span class=\"n\">tp</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">mainGoal</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.intro1P</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"bp\">←</span> <span class=\"n\">mainGoal.apply</span> <span class=\"n\">f</span>\n  <span class=\"k\">let</span> <span class=\"n\">gs</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">gs.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.apply</span> <span class=\"n\">ldecl.toExpr</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"n\">replaceMainGoal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">gs.join</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> I'm confused about what you're trying to do here... in the <code>assert</code> step is it not the case that <code>f</code> needs to have type <code>tp</code>?</p>",
        "id": 395148572,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1696557259
    },
    {
        "content": "<p>Adam, I think that has I answered this in the other thread.  Briefly, I wanted to create new mvars, to then use <code>Lean.MVarId.apply</code> instead of <code>mkAppWhatever</code>.</p>",
        "id": 395205105,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696580142
    }
]