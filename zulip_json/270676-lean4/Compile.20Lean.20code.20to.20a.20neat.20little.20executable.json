[
    {
        "content": "<p>How do I compile Lean code to a neat little executable? I know how to compile the Lean code into C but I have no idea how to compile the C code into an executable, it seems that the C code depends on some runtime library (<code>&lt;lean/lean.h&gt;</code>).</p>",
        "id": 223892345,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611579352
    },
    {
        "content": "<p>If you have a project set up properly, then <code>leanmake bin</code> should do it</p>",
        "id": 223892535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1611579455
    },
    {
        "content": "<p>Awesome! Where can I learn more about Lean 4 aside from <a href=\"https://leanprover.github.io/lean4/doc\">the official docs</a>? Some talks could be helpful.</p>",
        "id": 223894212,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611580317
    },
    {
        "content": "<p>This stream :-) It was only released three weeks ago! Leo has given a bunch of talks about it. You know about the LT2021 talks I guess but Leo has certainly given other talks</p>",
        "id": 223894713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611580542
    },
    {
        "content": "<p>See also <a href=\"https://leanprover.github.io/publications/\">https://leanprover.github.io/publications/</a> for papers and talks.</p>",
        "id": 223898116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1611582208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270523\">@Huỳnh Trần Khanh</span> it occurs to me that you might also like to look at Reid Barton's solutions to advent of code 2020: <a href=\"https://github.com/rwbarton/advent-of-lean-4\">https://github.com/rwbarton/advent-of-lean-4</a> . It might be interesting to port them to the release version of Lean 4, for example.</p>",
        "id": 223900180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1611583213
    },
    {
        "content": "<p>It seems that the AoC solutions only use Lean as a functional programming language, not as a theorem prover. So this is not quite what I'm looking for.</p>",
        "id": 223921104,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611591680
    },
    {
        "content": "<p>Anyways, thanks!</p>",
        "id": 223921323,
        "sender_full_name": "Huỳnh Trần Khanh",
        "timestamp": 1611591755
    },
    {
        "content": "<p>Hello from the future, how do I create an executable from my super slow Lean code?</p>",
        "id": 352334831,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682355570
    },
    {
        "content": "<p>I am running <code>lake build</code> on my project with a lakefile that looks like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">Catam</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Catam</span>\n\n<span class=\"n\">lean_exe</span> <span class=\"n\">catam</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Catam</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"bp\">@</span><span class=\"s2\">\"master\"</span>\n</code></pre></div>\n<p>(note that I don't have bleeding edge lake, but I'm not managing to update it). And <code>Catam.lean</code> contains <code>def main : IO Unit := ...</code>. When running <code>lake build</code>, I would expect to find my executable as <code>build.bin.Catam.exe</code>, but nothing!</p>",
        "id": 352335552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682355752
    },
    {
        "content": "<p>Am I doing something wrong?</p>",
        "id": 352335597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682355764
    },
    {
        "content": "<p><code>build</code> builds the default targets. Use <code>build catam</code> or apply <code>[default_target]</code> to it.</p>",
        "id": 352336213,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682355915
    },
    {
        "content": "<p>What does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Catam</span>\n</code></pre></div>\n<p>if not applying <code>{default_target]</code> to <code>Catam.lean</code>?</p>",
        "id": 352336631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356034
    },
    {
        "content": "<p>it compiles Catam.lean as a library (i.e. a set of .olean files) not as an executable (i.e. a set of .c files that get turned into .o files that get turned into a binary)</p>",
        "id": 352336907,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682356115
    },
    {
        "content": "<p>Aaah, you mean I should make the <em>executable</em> a default target?</p>",
        "id": 352336919,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356119
    },
    {
        "content": "<p>yes</p>",
        "id": 352337596,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682356307
    },
    {
        "content": "<p>Okay, now I get a bunch more exciting errors <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 352337735,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356344
    },
    {
        "content": "<p>Also note that just because our compiler is pretty cool <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> doesn't mean that it will magically make everythign fast :P</p>",
        "id": 352337810,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682356364
    },
    {
        "content": "<p>I know that the complexity of my algorithm must be through the roof, but at least I can let an executable run overnight. <em>The examiners don't have to know</em></p>",
        "id": 352338141,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356447
    },
    {
        "content": "<p>Here are the new errors. Does that smell like I should update lake, or is it something different?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Catam</span>\n<span class=\"n\">Building</span> <span class=\"n\">Std.Linter.UnreachableTactic</span>\n<span class=\"n\">Building</span> <span class=\"n\">Std.Linter.UnnecessarySeqFocus</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.•</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">⋃</span> <span class=\"bp\">-</span><span class=\"n\">DwarningAsError</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">Dlinter.missingDocs</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">.·</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">.·</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"o\">{</span><span class=\"bp\">...</span><span class=\"o\">}</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n  <span class=\"n\">Linter</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">⋃</span> <span class=\"n\">exited</span> <span class=\"k\">with</span> <span class=\"n\">code</span> <span class=\"mi\">1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=.•</span> <span class=\"n\">PATH</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">⋃</span> <span class=\"bp\">-</span><span class=\"n\">DwarningAsError</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">-</span><span class=\"n\">Dlinter.missingDocs</span><span class=\"bp\">=</span><span class=\"n\">true</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">R</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">i</span> <span class=\"bp\">.·</span> <span class=\"bp\">-</span><span class=\"n\">c</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 352338282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356493
    },
    {
        "content": "<p>It works in your editor?</p>",
        "id": 352338562,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682356566
    },
    {
        "content": "<p>The file compiles in my editor, I have the infoview, yada yada</p>",
        "id": 352338717,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356610
    },
    {
        "content": "<p>But it fails on a file of your project, not on Std?</p>",
        "id": 352338911,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682356667
    },
    {
        "content": "<p>Nevermind, I restarted the server and everything broke <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 352339135,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356721
    },
    {
        "content": "<p>And it's from the <code>[default_target]</code> change? It looks more like a Lean version conflict between Std and your project.</p>",
        "id": 352339426,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682356825
    },
    {
        "content": "<p>I think it's because I tried to update lake (and god knows what commands I ran), so you're right and it's a version mismatch. How do I get out of version hell?</p>",
        "id": 352339821,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682356974
    },
    {
        "content": "<blockquote>\n<p>and god knows what commands I ran</p>\n</blockquote>\n<p>That does sound like a problem</p>",
        "id": 352340237,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682357092
    },
    {
        "content": "<p>Usually you shouldn't touch any more than <code>lean-toolchain</code> for that</p>",
        "id": 352340308,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682357107
    },
    {
        "content": "<p>I tried <code>elan update lake</code>, <code>elan update</code>.</p>",
        "id": 352340908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682357287
    },
    {
        "content": "<p>Manually edit your lean-toolchain file to point to the 2023-04-20 nightly</p>",
        "id": 352343260,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1682357959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Compile.20Lean.20code.20to.20a.20neat.20little.20executable/near/352338141\">said</a>:</p>\n<blockquote>\n<p>I know that the complexity of my algorithm must be through the roof, but at least I can let an executable run overnight. <em>The examiners don't have to know</em></p>\n</blockquote>\n<p>what are you doing? <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 352343470,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682358008
    },
    {
        "content": "<p>Finding matchings in bipartite graphs. Can't be that hard <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 352344115,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682358200
    },
    {
        "content": "<p>The good matching algorithms are pretty good complexity wise right?</p>",
        "id": 352344607,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682358335
    },
    {
        "content": "<p>You're overestimating the chair-keyboard interface</p>",
        "id": 352344794,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682358372
    },
    {
        "content": "<p>The bad algorithms are also pretty bad.</p>",
        "id": 352373393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1682368053
    }
]