[
    {
        "content": "<p>Is there something like Lean3's <code>has_reflect</code> class in Lean 4?</p>",
        "id": 249369660,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1628866173
    },
    {
        "content": "<p>You should avoid the built-in <code>ToExpr</code> class because it has a broken <code>ToExpr Expr</code> instance.   I've written (and partly copied from Mario's code) a lawful <code>Reflect</code> alternative here: <a href=\"https://github.com/gebner/quote4/blob/8fd8422dfe2cd5d061754944ca345ffa6061781b/Qq/Reflect.lean\">https://github.com/gebner/quote4/blob/8fd8422dfe2cd5d061754944ca345ffa6061781b/Qq/Reflect.lean</a></p>",
        "id": 249369912,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628866281
    },
    {
        "content": "<p>If I don't want to use <code>ToExpr Expr</code> is it okay to use the built in class?</p>",
        "id": 249371219,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1628866853
    },
    {
        "content": "<p>If you want something quick, then sure.  It's fine otherwise.  I'd just avoid having <code>[ToExpr Î±]</code> anywhere (since you could get the <code>ToExpr Expr</code> class accidentally).</p>",
        "id": 249371495,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1628866954
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> has marked this topic as resolved.</p>",
        "id": 249398304,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628880567
    },
    {
        "content": "<p>What's wrong with <code>ToExpr Expr</code>? If it's buggy, should there be a github issue? (I couldn't find one.)</p>",
        "id": 249400075,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1628881514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> The current implementation of <code>ToExpr Expr</code> is as the identity function, which does not match any of the other implementations of <code>ToExpr A</code>, which does \"quoting\" (producing a term which if typechecked would have type <code>A</code>). In other words, <code>ToExpr</code> acts like any <code>Expr</code> subterm is antiquoted, so things like <code>ToExpr (Expr x Expr)</code> end up being mangled</p>",
        "id": 249402274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628882593
    },
    {
        "content": "<p>I see, the other instances (<code>ToExpr Nat</code>, say) do all seem to quote. It's hard to say what the intended behaviour is given no docstring but this does look like a bug that should be fixed in core.</p>",
        "id": 249403373,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1628883126
    },
    {
        "content": "<p>The name <code>ToExpr</code> also contributes to the confusion of purpose. This is discussed in an earlier thread, let me look it up</p>",
        "id": 249403452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628883181
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/implementing.20.60.28x.29</a></p>",
        "id": 249403733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1628883315
    },
    {
        "content": "<p>Well, that instance is never used -- Lean compiles fine without it. Might be okay to just remove it for the time being.</p>",
        "id": 249404639,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1628883804
    },
    {
        "content": "<p>(I also agree on the name being confusing.)</p>",
        "id": 249404669,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1628883821
    }
]