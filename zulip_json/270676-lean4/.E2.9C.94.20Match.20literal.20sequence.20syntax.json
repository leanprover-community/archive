[
    {
        "content": "<p>I can't get the following to work, and I don't know what to change about it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">unary</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"a\"</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">unary</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">unary</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unary</span><span class=\"bp\">|$</span><span class=\"n\">as</span><span class=\"o\">:</span><span class=\"s2\">\"a\"</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">--        ^</span>\n  <span class=\"c1\">-- expected ')'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n</code></pre></div>\n<p>I'm not sure what the correct search terms are for this, so I couldn't find similar examples in other threads.<br>\nInterestingly, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"n\">as</span><span class=\"o\">:</span><span class=\"s2\">\"a\"</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">quote</span> <span class=\"n\">as.size</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 387274078,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1692969269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">unary</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"a\"</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">unary</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">parse</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">unary</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MacroM</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unary</span><span class=\"bp\">|$</span><span class=\"o\">[</span><span class=\"n\">a</span><span class=\"bp\">%$</span><span class=\"n\">as</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">as.size</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n</code></pre></div>",
        "id": 387274490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692969437
    },
    {
        "content": "<p>If you don't want <code>a</code> to become a keyword (since that would prevent you from being able to use it as an identifier), then you might want to switch that to <code>syntax &amp;\"a\"* : unary</code></p>",
        "id": 387274638,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692969492
    },
    {
        "content": "<p>also, it won't work to parse <code>aaa</code> either way, you will need to write <code>a a a</code></p>",
        "id": 387274704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692969522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Match.20literal.20sequence.20syntax/near/387274704\">said</a>:</p>\n<blockquote>\n<p>also, it won't work to parse <code>aaa</code> either way, you will need to write <code>a a a</code></p>\n</blockquote>\n<p>Yeah, that's desirable in my actual project.</p>",
        "id": 387274756,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1692969547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 387275010,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692969642
    }
]