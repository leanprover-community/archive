[
    {
        "content": "<p>The following doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l.length</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">c.length</span>\n<span class=\"c1\">-- ok:</span>\n<span class=\"c1\">-- | c =&gt; Nat.zero_lt_succ c.length</span>\n</code></pre></div>",
        "id": 327877163,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676410123
    },
    {
        "content": "<p>It definitely should</p>",
        "id": 327877194,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676410135
    },
    {
        "content": "<p>The reason it doesnt work is due to the definition of namedPattern I'd say, it views the namedPattern c as x :: xs and not as c. You can make it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l.length</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">hidden</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">assumption</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">c.length</span>\n    <span class=\"n\">hidden</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>But I don't really know how to fix it systematically.</p>",
        "id": 327880337,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676411389
    },
    {
        "content": "<p>This works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">l.length</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">c</span><span class=\"bp\">@</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">c.length</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 327880604,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1676411500
    },
    {
        "content": "<p>It would be nice if the match compiler could be smart enough for this on its own though</p>",
        "id": 327880710,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676411536
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/proof.20on.20named.20pattern/near/327880710\">said</a>:</p>\n<blockquote>\n<p>It would be nice if the match compiler could be smart enough for this on its own though</p>\n</blockquote>\n<p>Should I open an issue?</p>",
        "id": 327901573,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676421197
    },
    {
        "content": "<p>This does work: <code>| c@(x::xs) =&gt; Nat.zero_lt_succ (x::xs).length</code></p>",
        "id": 328090130,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676488925
    },
    {
        "content": "<p>Yes this is due to the way it views the <code>c</code> but it is not desirable, you might as well leave the c away</p>",
        "id": 328090368,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676489013
    }
]