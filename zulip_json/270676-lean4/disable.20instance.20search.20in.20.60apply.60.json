[
    {
        "content": "<p>In Lean 3 I could use <code>apply_with ... { instances := ff }</code>, to allow deferring instances as goals when using <code>apply</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.submonoid.operations</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">submonoid.map</span>\n<span class=\"c1\">-- Π {M : Type u_1} {N : Type u_2} [_inst_1 : mul_one_class M] [_inst_2 : mul_one_class N]</span>\n<span class=\"c1\">--   {F : Type u_4} [mc : monoid_hom_class F M N], F → submonoid M → submonoid N</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">submonoid</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">submonoid</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply_with</span> <span class=\"n\">submonoid.map</span> <span class=\"o\">{</span> <span class=\"n\">instances</span> <span class=\"o\">:=</span> <span class=\"n\">ff</span> <span class=\"o\">}</span>\n  <span class=\"c1\">-- Goals are now:</span>\n  <span class=\"c1\">-- ⊢ monoid_hom_class ?m_1 M N</span>\n  <span class=\"c1\">-- ⊢ ?m_1</span>\n  <span class=\"c1\">-- ⊢ Type</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>If I understand correctly, there is not currently a way to do this in Lean 4 (whether plumbing or porcelain)?</p>\n<p>It looks like we would need to change <a href=\"https://github.com/leanprover/lean4/blob/bff612e59e4860bef5180db08356ab5f256bea86/src/Lean/Meta/Tactic/Apply.lean#L50\"><code>synthAppInstances</code></a>, adding a configuration option that allowed for failures in <code>synthInstance</code>.</p>",
        "id": 366374262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686810340
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2274\">lean4#2274</a></p>",
        "id": 366381515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686812189
    },
    {
        "content": "<p>As this will make <a href=\"https://github.com/leanprover-community/mathlib4/pull/5046\">!4#5046</a> closer to its mathlib3 original, should I wait for <a href=\"https://github.com/leanprover/lean4/pull/2274\">lean4#2274</a></p>",
        "id": 366719585,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1686900624
    }
]