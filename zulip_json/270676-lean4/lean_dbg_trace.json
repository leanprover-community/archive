[
    {
        "content": "<p>What's the correct way to call <a href=\"https://github.com/leanprover/lean4/blob/b97b0ad2aaea49a2db3ac0543443ec72bd97dfdc/src/include/lean/lean.h#L1821C1-L1821C1\"><code>lean_dbg_trace</code></a>? I've only managed to get garbage output or crashes. I'm especially confused about what the <code>fn</code> parameter is for.</p>",
        "id": 403423656,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1700585352
    },
    {
        "content": "<p>that's the C counterpart to the <code>dbgTrace</code> function, used like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"mi\">5</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">get</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTrace</span> <span class=\"s2\">\"y is evaluated\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTrace</span> <span class=\"s2\">\"x is evaluated\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">dbgTrace</span> <span class=\"s2\">\"n is evaluated\"</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">x</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"n\">is</span> <span class=\"n\">evaluated</span>\n<span class=\"n\">n</span> <span class=\"n\">is</span> <span class=\"n\">evaluated</span>\n<span class=\"mi\">6</span>\n</code></pre></div>",
        "id": 403427787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700586768
    },
    {
        "content": "<p>You can use this to see in what order things are evaluated, or whether they are evaluated at all; because it is considered a pure function by the compiler you can use it to tell when a computation is optimized out</p>",
        "id": 403427938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700586827
    },
    {
        "content": "<p>The reason for the thunk in the first argument is to sequence it before the body computation (note that <code>x is evaluated</code> comes before <code>n is evaluated</code>)</p>",
        "id": 403429072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700587202
    },
    {
        "content": "<p>if you want to call <code>lean_dbg_trace</code> from C code, you probably don't need the sequencing behavior, so you can just pass <code>fun _ =&gt; ()</code> to the function and ignore the result. But you do have to pass a function which can be called by <code>lean_apply_1</code>, the usual way to do this from C is to use <code>lean_alloc_closure(&amp;thunk, 1, 0)</code> where <code>&amp;thunk</code> is a pointer to <code>lean_object * thunk(lean_object *) { return lean_box(0); }</code></p>",
        "id": 403430062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700587524
    }
]