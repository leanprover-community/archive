[
    {
        "content": "<p>Hello</p>\n<p>The implication <code>False → p</code> is \"true\" in Lean 4 :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">False_implies_everything</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">tauto</span>\n</code></pre></div>\n<p>I am wondering if it is an axiom or if it is provable. </p>\n<p>If one thinks about <code>False</code> as the empty proposition (<a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#False\">as written in the documentation</a>), then a proof of <code>False → p</code> would be the \"empty function\" <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∅</mi><mo>→</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">\\varnothing \\to p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6633em;vertical-align:-0.0817em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, more precisely the function defined by the triplet <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∅</mi><mo separator=\"true\">,</mo><mi>p</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∅</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(\\varnothing,p,\\varnothing)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord amsrm\">∅</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord amsrm\">∅</span><span class=\"mclose\">)</span></span></span></span> (<a href=\"https://en.wikipedia.org/wiki/Function_(mathematics)#empty_function\">see here</a>). </p>\n<p>But I do not know how to define such function in Lean 4 . Is it possible to do so ?</p>",
        "id": 400304752,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1699109424
    },
    {
        "content": "<p>You can use <code>show_term tauto</code> to see the proof found by tauto.</p>",
        "id": 400304779,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699109477
    },
    {
        "content": "<p>And please don't read that Wikipedia page if you don't want to be utterly confused since it is all about set theoretic foundations.</p>",
        "id": 400304852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699109534
    },
    {
        "content": "<p>There is nothing like a function defined by a triplet in Lean.</p>",
        "id": 400304870,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699109554
    },
    {
        "content": "<p>As explained in the documentation that you refer to, the proof is simply <code>False.rec</code>.</p>",
        "id": 400304968,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699109651
    },
    {
        "content": "<p>It's not an explicit axiom by itself, it is a consequence of the rules of type theory. The definition of <code>False</code> is the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">False</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>so it is an inductive proposition with no constructors. Now, every time we define an inductive object, Lean adds it's \"eliminator\", in this case it adds <code>False.rec</code>, you can check it's type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">False.rec</span>\n<span class=\"c1\">--False.rec.{u} (motive : False → Sort u) (t : False) : motive t</span>\n</code></pre></div>\n<p>So <code>False.rec</code> allows you to produce a term of any given type from a term of type <code>False</code>. It is produced automatically following the rules of type theory.</p>\n<p>What is the reason behind it? In general <code>rec</code> says that to define a function out of an inductive type <code>T</code> one has to specify the image of all the constructors, and in this case there are no constructors, so there is nothing to do. (Of course the precise rule is complicated to state, but the point is that this is a special case of the general construction of an inductive type.)</p>",
        "id": 400305110,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1699109794
    },
    {
        "content": "<p>There are a lot more explanation <a href=\"https://lean-lang.org/theorem_proving_in_lean4/propositions_and_proofs.html#negation-and-falsity\">here</a> and <a href=\"https://leanprover-community.github.io/mathematics_in_lean/C03_Logic.html#negation\">there</a>.</p>",
        "id": 400305121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699109806
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/8190\">#8190</a> relates functions to \"function-like\" relations (works better than sets in the product with Mathlib).</p>",
        "id": 400333765,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699139677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> It seems like that message was meant for another topic?</p>",
        "id": 400334733,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699140927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> No, this PR was partially inspired by</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20False.20.E2.86.92.20p.20an.20axiom.20in.20Lean.204.20.3F/near/400304870\">said</a>:</p>\n<blockquote>\n<p>There is nothing like a function defined by a triplet in Lean.</p>\n</blockquote>",
        "id": 400334804,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699141021
    },
    {
        "content": "<p>BTW, should we make <code>choose</code> use this lemma for <code>ExistsUnique</code> input?</p>",
        "id": 400334928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1699141184
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> , it is clearer.</p>",
        "id": 400418665,
        "sender_full_name": "Valentin Vinoles",
        "timestamp": 1699213510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20False.20.E2.86.92.20p.20an.20axiom.20in.20Lean.204.20.3F/near/400304779\">said</a>:</p>\n<blockquote>\n<p>You can use <code>show_term tauto</code> to see the proof found by tauto.</p>\n</blockquote>\n<p>Well, in this case I am not sure that this is really the best way to sort it out. Indeed, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">False_implies_everything'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">show_term</span><span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>results in the suggestion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"n\">exact</span> <span class=\"n\">let_fun</span> <span class=\"n\">em</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span><span class=\"bp\">;</span>\n<span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>On a one hand, there is a <code>Classical.propDecidable</code> showing up and then, even worse,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">False_implies_everything'</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">exact</span>\n      <span class=\"n\">let_fun</span> <span class=\"n\">em</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.propDecidable</span><span class=\"bp\">;</span>\n      <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">False.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n<span class=\"c1\">--application type mismatch</span>\n<span class=\"c1\">--  False.casesOn ?m.39 fun x =&gt; p</span>\n<span class=\"c1\">--argument</span>\n <span class=\"c1\">-- fun x =&gt; p</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--  ?m.41 → Prop : Sort (max 1 ?u.40)</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--  False : Prop</span>\n</code></pre></div>\n<p>results in an error. The easiest solution (which is basically the one proposed by <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> ) is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">False_implies_everything</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">False.casesOn</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400427569,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699224230
    },
    {
        "content": "<p>Not it isn't, see <a href=\"#narrow/stream/270676-lean4/topic/Is.20False.20.E2.86.92.20p.20an.20axiom.20in.20Lean.204.20.3F/near/400304968\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Is.20False.20.E2.86.92.20p.20an.20axiom.20in.20Lean.204.20.3F/near/400304968</a></p>",
        "id": 400428774,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699225239
    }
]