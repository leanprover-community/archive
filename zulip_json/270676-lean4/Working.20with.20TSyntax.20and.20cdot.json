[
    {
        "content": "<p>I'm trying my hands on writing tactics and I could need some help. I can manually create single tactic calls (type <code>TSyntax `tactic</code>) like <code>cmd</code> below, but how would I combine these syntax elements into a structured tactic instruction using <code>·</code> (i.e. when there are multiple goals)?</p>\n<p>For context, my goal is to create a <code>logInfo</code> message that tells accurately what e.g. <code>ext</code> did, which also includes focusing on newly created subgoals.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">lemma₁</span> <span class=\"n\">lemma₂</span> <span class=\"n\">lemma₃</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">createTacticBlock</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">myTactics</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n    <span class=\"c1\">-- create some tactic calls</span>\n    <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">lemma₁</span><span class=\"o\">))</span>\n\n    <span class=\"n\">myTactics</span> <span class=\"o\">:=</span> <span class=\"n\">myTactics.push</span> <span class=\"n\">cmd</span>\n\n    <span class=\"c1\">-- Now instead of creating a list, create some valid tactic syntax that applies to multiple</span>\n    <span class=\"c1\">-- goals, like:</span>\n    <span class=\"c1\">--</span>\n    <span class=\"c1\">-- · apply lemma₁</span>\n    <span class=\"c1\">--   apply lemma₂</span>\n    <span class=\"c1\">-- · apply lemma₃</span>\n\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{myTactics}\"</span>\n</code></pre></div>",
        "id": 351424460,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682023368
    },
    {
        "content": "<p>( I should say I'm mainly hacking at this point and have quite a hard time understanding the Metaprogramming book. I barely know anything about the different monads and only scrap together things from what I see in the source code, I might be going at this the wrong way <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 351424798,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682023494
    },
    {
        "content": "<p><code>·</code> is a tactic, specifically of the form <code>· $tac:tacticSeq</code></p>",
        "id": 351426106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682023976
    },
    {
        "content": "<p>so you can create one the same as any other tactic, you just use <code> `(tactic| · foo; bar)</code> or whatever</p>",
        "id": 351426303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682024046
    },
    {
        "content": "<p>It's not really clear to me what exactly you want to put in that function though, there are a lot of placeholders</p>",
        "id": 351426491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682024138
    },
    {
        "content": "<p>I think you probably want <code>createTacticBlock</code> to have a type like <code>MetaM Syntax.Tactic</code> or <code>MetaM (Array Syntax.Tactic)</code> so that it can call itself recursively</p>",
        "id": 351426653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682024206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Working.20with.20TSyntax.20and.20cdot/near/351426106\">said</a>:</p>\n<blockquote>\n<p><code>·</code> is a tactic, specifically of the form <code>· $tac:tacticSeq</code></p>\n</blockquote>\n<p>oh. that's a tad simpler than expected.</p>",
        "id": 351426927,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682024320
    },
    {
        "content": "<p>I agree <code>createTacticBlock</code> has the wrong type in the MWE, I just copied that from <code>applyExtLemma</code>.</p>\n<p>I was going to construct a <code>Syntax.Tactic</code> term or someting in a <code>IO.Ref</code> and then just add to that in the relevant funtion calls. Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">usedExtLemmas</span> <span class=\"o\">:</span> <span class=\"n\">IO.Ref</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"n\">IO.mkRef</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 351427652,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1682024606
    }
]