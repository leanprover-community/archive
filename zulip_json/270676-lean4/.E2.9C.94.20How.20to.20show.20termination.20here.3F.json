[
    {
        "content": "<p>Hello! I am trying to figure out (with a simple example)  how to do induction on mutually recursive propositions.<br>\nThis is what I have so far</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_left</span>  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">((</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₂'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_calc</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>              <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_atom</span>  <span class=\"o\">(</span><span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>           <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"n\">ae.atom</span> <span class=\"n\">ae'.atom</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Steps</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₃</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.eval</span> <span class=\"bp\">+</span> <span class=\"n\">e₂.eval</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">e</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">e.eval</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Step.sound</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">He</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">Hs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_left</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"n\">Hs₁</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">He₁</span> <span class=\"o\">:=</span> <span class=\"n\">Step.sound</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₁.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs₁</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">He₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">He</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_right</span> <span class=\"n\">n</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"n\">Hs₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">He₂</span> <span class=\"o\">:=</span> <span class=\"n\">Step.sound</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"n\">e₂.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs₂</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">He₂</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">He</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_calc</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">,</span> <span class=\"n\">Exp.eval</span><span class=\"o\">,</span> <span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">He</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">He</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_atom</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"n\">Hs'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">He'</span> <span class=\"o\">:=</span> <span class=\"n\">Steps.sound</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"n\">ae.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs'</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">He'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">He</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">He</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Steps.sound</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">He</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">Hs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Steps.refl</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">He</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Steps.step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"n\">Hss</span> <span class=\"n\">Hs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">Hes</span> <span class=\"o\">:=</span> <span class=\"n\">Steps.sound</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">n</span> <span class=\"n\">He</span> <span class=\"n\">Hss</span>\n      <span class=\"n\">Step.sound</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"n\">n</span> <span class=\"n\">Hes</span> <span class=\"n\">Hs</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">Step.sound</span>\n  <span class=\"n\">Steps.sound</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">handle</span> <span class=\"n\">mutually</span> <span class=\"n\">recursive</span> <span class=\"n\">functions</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>\n<p>How do I define the metric for <code>termination_by</code> here?</p>\n<p>Many thanks!</p>",
        "id": 366239096,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686759566
    },
    {
        "content": "<p>Is this thread helpful?<br>\n<a href=\"#narrow/stream/113489-new-members/topic/Termination.20of.20mutual.20recursion\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Termination.20of.20mutual.20recursion</a><br>\nThe working example is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">goo</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">goo</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">goo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 366276724,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1686768524
    },
    {
        "content": "<p>Hmm, I'm actually a bit stumped myself.  I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span>\n  <span class=\"n\">Step.sound</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"n\">n</span> <span class=\"n\">He</span> <span class=\"n\">Hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">Hs</span>\n  <span class=\"n\">Steps.sound</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"n\">n</span> <span class=\"n\">He</span> <span class=\"n\">Hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">Hs</span>\n</code></pre></div>\n<p>since both functions use structural recursion on the <code>Hs</code> arg.  But it doesn't seem to work.</p>",
        "id": 366280579,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1686769452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20show.20termination.20here.3F/near/366276724\">said</a>:</p>\n<blockquote>\n<p>Is this thread helpful?<br>\n<a href=\"#narrow/stream/113489-new-members/topic/Termination.20of.20mutual.20recursion\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Termination.20of.20mutual.20recursion</a><br>\nThe working example is:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">goo</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">goo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">goo</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">goo</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I have seen this thread, but it is not clear to me how to define a metric on these propositions. I didn't know about <code>sizeOf</code>, shame it does not work</p>",
        "id": 366282371,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686769942
    },
    {
        "content": "<p>Perhaps the issue here is that Step and Steps are propositions. Changing their types to <code>Exp -&gt; Exp -&gt; Type</code> makes it work</p>\n<p>It doesn't even need <code>termination_by</code> it seems</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_left</span>  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">((</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₂'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_calc</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>              <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_atom</span>  <span class=\"o\">(</span><span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>           <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"n\">ae.atom</span> <span class=\"n\">ae'.atom</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Steps</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₃</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.eval</span> <span class=\"bp\">+</span> <span class=\"n\">e₂.eval</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">e</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">e.eval</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">Step.sound</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">He</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">Hs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_left</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"n\">Hs₁</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">He₁</span> <span class=\"o\">:=</span> <span class=\"n\">Step.sound</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₁.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs₁</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">He₁</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">He</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_right</span> <span class=\"n\">n</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"n\">Hs₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">He₂</span> <span class=\"o\">:=</span> <span class=\"n\">Step.sound</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"n\">e₂.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs₂</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">He₂</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">He</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_calc</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">,</span> <span class=\"n\">Exp.eval</span><span class=\"o\">,</span> <span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">He</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">He</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Step.add_atom</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"n\">Hs'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">He'</span> <span class=\"o\">:=</span> <span class=\"n\">Steps.sound</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"n\">ae.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs'</span>\n      <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">He'</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">He</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">He</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">Steps.sound</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">He</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">Hs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Steps.refl</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">He</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Steps.step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"n\">Hss</span> <span class=\"n\">Hs</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">Hes</span> <span class=\"o\">:=</span> <span class=\"n\">Steps.sound</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">n</span> <span class=\"n\">He</span> <span class=\"n\">Hss</span>\n      <span class=\"n\">Step.sound</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"n\">n</span> <span class=\"n\">Hes</span> <span class=\"n\">Hs</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 366283785,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686770359
    },
    {
        "content": "<p>Yeah, I think you're right.  FWIW I got it down to this simpler example without mutual recursion, where the termination_by is still not working:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add_left</span>  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add_calc</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>              <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.eval</span> <span class=\"bp\">+</span> <span class=\"n\">e₂.eval</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Step.sound</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">He</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hs</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">Hs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Step.add_left</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"n\">Hs₁</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">He₁</span> <span class=\"o\">:=</span> <span class=\"n\">Step.sound</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₁.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">Hs₁</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Step.add_calc</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n<span class=\"n\">termination_by</span>\n  <span class=\"n\">Step.sound</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"n\">n</span> <span class=\"n\">He</span> <span class=\"n\">Hs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">Hs</span>\n</code></pre></div>\n<p>It works if you switch Step to Type.</p>",
        "id": 366286317,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1686771103
    },
    {
        "content": "<p>Nothing I can't handle I suppose <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">StepP</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">),</span> <span class=\"n\">True</span>\n<span class=\"kd\">def</span> <span class=\"n\">StepsP</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">),</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>although that is certainly not ideal</p>",
        "id": 366287251,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686771377
    },
    {
        "content": "<p>I don't think well-founded recursion could ever work on propositions</p>",
        "id": 366287301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1686771399
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20show.20termination.20here.3F/near/366287301\">said</a>:</p>\n<blockquote>\n<p>I don't think well-founded recursion could ever work on propositions</p>\n</blockquote>\n<p>From what I understand, CoQ allows you to do mutual induction with propositions (although maybe not well-founded, just structural, which for my original example is more than enough). This compiles</p>\n<div class=\"codehilite\" data-code-language=\"Coq\"><pre><span></span><code><span class=\"kn\">Inductive</span> <span class=\"n\">TransFancyEq</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">|</span> <span class=\"n\">Trefl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n  <span class=\"o\">|</span> <span class=\"n\">Ttrans</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FancyEq</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">-&gt;</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"k\">with</span> <span class=\"n\">FancyEq</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"n\">nat</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">|</span> <span class=\"n\">Ftrans</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"o\">.</span>\n<span class=\"kn\">Lemma</span> <span class=\"n\">fancyEqEq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">FancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n<span class=\"k\">with</span> <span class=\"n\">transFancyEqEq</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n<span class=\"o\">.</span>\n<span class=\"kn\">Proof</span><span class=\"o\">.</span>\n  <span class=\"o\">-</span> <span class=\"k\">destruct</span> <span class=\"n\">H</span><span class=\"o\">.</span>\n    <span class=\"kp\">now</span> <span class=\"k\">apply</span> <span class=\"n\">transFancyEqEq</span><span class=\"o\">.</span>\n  <span class=\"o\">-</span> <span class=\"k\">destruct</span> <span class=\"n\">H</span><span class=\"o\">.</span>\n    <span class=\"o\">+</span> <span class=\"kp\">reflexivity</span><span class=\"o\">.</span>\n    <span class=\"o\">+</span> <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">transFancyEqEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"k\">as</span> <span class=\"n\">H1</span><span class=\"o\">.</span>\n      <span class=\"n\">specialize</span> <span class=\"o\">(</span><span class=\"n\">fancyEqEq</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">H0</span><span class=\"o\">)</span> <span class=\"k\">as</span> <span class=\"n\">H2</span><span class=\"o\">.</span>\n      <span class=\"kp\">now</span> <span class=\"k\">subst</span><span class=\"o\">.</span>\n<span class=\"kn\">Qed</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 366287677,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686771510
    },
    {
        "content": "<p>Equivalent example in lean fails to pass termination check</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">TransFancyEq</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n    <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">FancyEq</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">FancyEq</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n    <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">FancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">theorem</span> <span class=\"n\">fancyEqEq</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">FancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">H</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">FancyEq.trans</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">transFancyEqEq</span> <span class=\"n\">H</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">transFancyEqEq</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"n\">TransFancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">H</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TransFancyEq.refl</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">TransFancyEq.step</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">H₁</span> <span class=\"n\">H₂</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">pH₁</span> <span class=\"o\">:=</span> <span class=\"n\">transFancyEqEq</span> <span class=\"n\">H₁</span>\n      <span class=\"k\">let</span> <span class=\"n\">pH₂</span> <span class=\"o\">:=</span> <span class=\"n\">fancyEqEq</span> <span class=\"n\">H₂</span>\n      <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pH₁</span><span class=\"o\">,</span> <span class=\"n\">pH₂</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 366287807,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686771551
    },
    {
        "content": "<p>this is surely because lean doesn't implement structural recursion in <code>match</code></p>",
        "id": 366288337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686771725
    },
    {
        "content": "<p>you would normally be able to use <code>induction</code>, but that is also not implemented for mutual inductives</p>",
        "id": 366288501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686771771
    },
    {
        "content": "<p>It is possible to prove it by direct application of the recursor however:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fancyEqEq</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">FancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">FancyEq.rec</span> <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">refl</span> <span class=\"bp\">?</span><span class=\"n\">step</span> <span class=\"bp\">?</span><span class=\"n\">trans</span> <span class=\"n\">H</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_h</span> <span class=\"n\">IH</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">step</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">_H₁</span> <span class=\"n\">_H₂</span> <span class=\"n\">pH₁</span> <span class=\"n\">pH₂</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pH₁</span><span class=\"o\">,</span> <span class=\"n\">pH₂</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 366289710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686772140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20show.20termination.20here.3F/near/366289710\">said</a>:</p>\n<blockquote>\n<p>It is possible to prove it by direct application of the recursor however:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fancyEqEq</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">FancyEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">FancyEq.rec</span> <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">refl</span> <span class=\"bp\">?</span><span class=\"n\">step</span> <span class=\"bp\">?</span><span class=\"n\">trans</span> <span class=\"n\">H</span>\n  <span class=\"n\">case</span> <span class=\"n\">trans</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">_h</span> <span class=\"n\">IH</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">IH</span>\n  <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">case</span> <span class=\"n\">step</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">_H₁</span> <span class=\"n\">_H₂</span> <span class=\"n\">pH₁</span> <span class=\"n\">pH₂</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pH₁</span><span class=\"o\">,</span> <span class=\"n\">pH₂</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thank you! That did the trick</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Exp</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span>  <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Exp</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">Step</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_left</span>  <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>        <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₁</span> <span class=\"n\">e₁'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"n\">e₁'</span> <span class=\"n\">e₂</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_right</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e₂</span> <span class=\"n\">e₂'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"o\">((</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₂</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">e₂'</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">add_calc</span>  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>              <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"o\">(</span><span class=\"n\">Exp.add</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Exp.val</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">atom_step</span>  <span class=\"o\">(</span><span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span>          <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"n\">ae.atom</span> <span class=\"n\">ae'.atom</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Steps</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">|</span> <span class=\"n\">refl</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e</span> <span class=\"n\">e</span>\n    <span class=\"bp\">|</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">→</span> <span class=\"n\">Step</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span> <span class=\"n\">e₁</span> <span class=\"n\">e₃</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Exp.eval</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">n</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e₁.eval</span> <span class=\"bp\">+</span> <span class=\"n\">e₂.eval</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"n\">e</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">e.eval</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Step.sound</span>  <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"o\">:</span> <span class=\"n\">Exp</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e_step_e'</span> <span class=\"o\">:</span> <span class=\"n\">Step</span> <span class=\"n\">e</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Step.rec</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">e'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Exp.eval</span> <span class=\"n\">e'</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"bp\">?</span><span class=\"n\">add_left</span> <span class=\"bp\">?</span><span class=\"n\">add_right</span> <span class=\"bp\">?</span><span class=\"n\">add_calc</span> <span class=\"bp\">?</span><span class=\"n\">atom_step</span> <span class=\"bp\">?</span><span class=\"n\">refl</span> <span class=\"bp\">?</span><span class=\"n\">step</span><span class=\"o\">)</span> <span class=\"n\">e_step_e'</span> <span class=\"n\">n</span>\n    <span class=\"n\">case</span> <span class=\"n\">add_left</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">e₁</span> <span class=\"n\">_</span> <span class=\"n\">e₂</span> <span class=\"n\">_</span> <span class=\"n\">He₁_sound</span> <span class=\"n\">n</span> <span class=\"n\">_</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">He₁_sound</span> <span class=\"n\">e₁.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">case</span> <span class=\"n\">add_right</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">e₂</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">He₂_sound</span> <span class=\"n\">n₁</span> <span class=\"n\">_</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">He₂_sound</span> <span class=\"n\">e₂.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n    <span class=\"n\">case</span> <span class=\"n\">add_calc</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">n₁</span> <span class=\"n\">H</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"n\">case</span> <span class=\"n\">atom_step</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">ae</span> <span class=\"n\">ae'</span> <span class=\"n\">_</span> <span class=\"n\">ae_sound</span> <span class=\"n\">n</span> <span class=\"n\">e_is_n</span>\n      <span class=\"k\">let</span> <span class=\"n\">value_of_ae</span> <span class=\"o\">:=</span> <span class=\"n\">ae.eval</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ae_sound</span> <span class=\"n\">value_of_ae</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Exp.eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n    <span class=\"n\">case</span> <span class=\"n\">refl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n    <span class=\"n\">case</span> <span class=\"n\">step</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">intro</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span> <span class=\"n\">e₃</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">e₁_sound</span> <span class=\"n\">e₂_sound</span> <span class=\"n\">n</span> <span class=\"n\">e_is_n</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e₁_sound</span> <span class=\"n\">e₁.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"k\">have</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e₂_sound</span> <span class=\"n\">e₂.eval</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 366348420,
        "sender_full_name": "Iurii Zamiatin",
        "timestamp": 1686797553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"573659\">Iurii Zamiatin</span> has marked this topic as resolved.</p>",
        "id": 366348448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686797566
    }
]