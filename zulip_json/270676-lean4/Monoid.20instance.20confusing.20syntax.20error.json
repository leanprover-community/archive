[
    {
        "content": "<p>Hi, I'm trying to write a monoid instance, like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Round</span> <span class=\"n\">where</span>\n  <span class=\"n\">blue</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">green</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">red</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">Round</span> <span class=\"n\">where</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">blue</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">green</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">red</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">Round</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">blue</span> <span class=\"o\">:=</span> <span class=\"n\">r1.blue</span> <span class=\"bp\">+</span> <span class=\"n\">r2.blue</span><span class=\"o\">,</span> <span class=\"n\">green</span> <span class=\"o\">:=</span> <span class=\"n\">r1.green</span> <span class=\"bp\">+</span> <span class=\"n\">r2.green</span><span class=\"o\">,</span> <span class=\"n\">red</span> <span class=\"o\">:=</span> <span class=\"n\">r1.red</span> <span class=\"bp\">+</span> <span class=\"n\">r2.red</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm getting the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">▶</span> <span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">Monoid</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.445</span>\n</code></pre></div>\n<p>I can't understand why a function is expected. What have I done wrong?</p>",
        "id": 406296583,
        "sender_full_name": "James Sully",
        "timestamp": 1701866443
    },
    {
        "content": "<p>You forgot to import <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Monoid#doc\">docs#Monoid</a> !</p>",
        "id": 406296709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701866503
    },
    {
        "content": "<p><code>set_option autoImplicit false</code> and you will get the sensible error message instead of the obscure one.</p>",
        "id": 406296839,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701866548
    },
    {
        "content": "<p>Ah, I assumed it would be in the prelude or whatever.<br>\nis it<br>\n<code>import Mathlib.Algebra.Group.Defs</code>? I get unknown package <code>Mathlib</code>, I guess I have to depend on it somehow?</p>",
        "id": 406296960,
        "sender_full_name": "James Sully",
        "timestamp": 1701866602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Monoid.20instance.20confusing.20syntax.20error/near/406296839\">said</a>:</p>\n<blockquote>\n<p><code>set_option autoImplicit false</code> and you will get the sensible error message instead of the obscure one.</p>\n</blockquote>\n<p>does this just go in the source?</p>",
        "id": 406296998,
        "sender_full_name": "James Sully",
        "timestamp": 1701866624
    },
    {
        "content": "<p>Yes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">Round</span> <span class=\"n\">where</span>\n  <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">blue</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">green</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">red</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">r2</span> <span class=\"o\">:</span> <span class=\"n\">Round</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">blue</span> <span class=\"o\">:=</span> <span class=\"n\">r1.blue</span> <span class=\"bp\">+</span> <span class=\"n\">r2.blue</span><span class=\"o\">,</span> <span class=\"n\">green</span> <span class=\"o\">:=</span> <span class=\"n\">r1.green</span> <span class=\"bp\">+</span> <span class=\"n\">r2.green</span><span class=\"o\">,</span> <span class=\"n\">red</span> <span class=\"o\">:=</span> <span class=\"n\">r1.red</span> <span class=\"bp\">+</span> <span class=\"n\">r2.red</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 406297122,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701866658
    },
    {
        "content": "<p>thank you!</p>",
        "id": 406297571,
        "sender_full_name": "James Sully",
        "timestamp": 1701866847
    }
]