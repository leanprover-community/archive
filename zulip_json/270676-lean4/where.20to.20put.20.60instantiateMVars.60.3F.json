[
    {
        "content": "<p>I don't understand why the metavariable here isn't instantiated with <code>p</code> when I apply the test tactic. I guess I need <code>instantiateMVars</code>, but I don't know where. Or am I missing something bigger?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"`ty` is {ty}\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"bp\">·</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- why is `p` a metavariable? presumably I need to insert `instantiateMVars` somewhere, but where?</span>\n  <span class=\"n\">test</span> <span class=\"n\">h</span> <span class=\"c1\">-- `ty` is forall (x : Nat), _uniq.14039 x</span>\n  <span class=\"n\">exact</span> <span class=\"n\">True.intro</span>\n</code></pre></div>",
        "id": 395085154,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696525302
    },
    {
        "content": "<p>oh, if I change the <code>dbg_trace</code> line to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"`ty` is {← ppExpr ty}\"</span> <span class=\"c1\">-- then I get: `ty` is ∀ (x : ℕ), p x</span>\n</code></pre></div>",
        "id": 395087406,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696526154
    },
    {
        "content": "<p>I'm still confused though.</p>",
        "id": 395088165,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696526451
    },
    {
        "content": "<p>Note that <code>_uniq.14039</code> is not a metavariable but a free variable, and is the <code>FVarId</code> of <code>p</code> in the local context! (Metavariables are always prefixed by <code>?</code> when printed.)</p>\n<p>I think this is more an issue with <code>dbg_trace</code> than anything else. I'd recommend e.g. <code>trace[debug] \"`ty` is {ty}\"</code> with <code>set_option trace.debug true</code>, because then you get nice string interpolation and pretty-printing (though you sacrifice inline code lens traces).</p>",
        "id": 395105252,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696533504
    },
    {
        "content": "<p>You can't really call that a bug. Jireh is getting what he is asking for. He could also ask what he actually wants, which is a pretty-printed expression, using <code>dbg_trace s!\"`ty` is {← Meta.ppExpr ty}\"</code></p>",
        "id": 395106111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696533902
    },
    {
        "content": "<p>Oh crap, I just saw Jireh's second message. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 395106204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696533959
    },
    {
        "content": "<p>Oh, indeed, I didn't mean to suggest this was a bug with <code>dbg_trace</code>! I simply meant to say that the issue can be thought of as arising from choosing to use <code>dbg_trace</code> instead of e.g. <code>trace[debug]</code>; I should have said that it's an issue with <em>using</em> <code>dbg_trace</code> instead.</p>",
        "id": 395106451,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696534082
    },
    {
        "content": "<p>Let me try again to actually bring new information to this discussion. What Thomas suggest will do more than pretty-printing is actually uses a <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MessageData#doc\">docs#Lean.MessageData</a> which is also interactive (you can Ctrl-click stuff etc.)</p>",
        "id": 395106540,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696534116
    },
    {
        "content": "<p>Thomas, you need to use more backquotes around around your things containings backquotes.</p>",
        "id": 395106663,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696534181
    },
    {
        "content": "<p>You're right, that was copypasta; edited. :)</p>",
        "id": 395106761,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696534206
    },
    {
        "content": "<p>I know, I do it all the time.</p>",
        "id": 395106783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1696534218
    },
    {
        "content": "<p>Thanks both! This all makes sense now, and I learned some new tricks!</p>",
        "id": 395119675,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696540342
    }
]