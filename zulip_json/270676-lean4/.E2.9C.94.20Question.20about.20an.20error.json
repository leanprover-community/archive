[
    {
        "content": "<p>This short code produces an error and I don't understand why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Z</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Z</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Z.z</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Z.z</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>The error is \"unknown identifier 'x'\" on the last line. My intention is for \"x\" to be a pattern matching variable.</p>\n<p>Does anyone know why this is happening?</p>",
        "id": 333736561,
        "sender_full_name": "Adrian",
        "timestamp": 1677187794
    },
    {
        "content": "<p>What do you want <code>a</code> to be in the type of <code>h</code>?</p>",
        "id": 333737350,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677188105
    },
    {
        "content": "<p>I want <code>h</code> to have type <code>{a : Type} → {x : a} → Z x → Z x</code>which is what Lean infers.</p>",
        "id": 333737586,
        "sender_full_name": "Adrian",
        "timestamp": 1677188207
    },
    {
        "content": "<p>The argument to <code>Z.z</code> is already forced to be <code>a</code>, so Lean will only accept a term (not a pattern) defeq to it there, such as <code>a</code> or <code>_</code></p>",
        "id": 333737710,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677188275
    },
    {
        "content": "<p>Oh OK. Thanks, I was very confused. I assume \"defeq\" means judgmentally equal?</p>",
        "id": 333737949,
        "sender_full_name": "Adrian",
        "timestamp": 1677188357
    },
    {
        "content": "<p>yes</p>",
        "id": 333737986,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677188373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"434566\">Adrian</span> has marked this topic as resolved.</p>",
        "id": 336358412,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677192837
    }
]