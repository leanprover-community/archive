[
    {
        "content": "<p>I'm under the impression that in several common monads, like <code>MetaM</code>, <code>failure</code> causes backtracking. Is this actually true?</p>\n<p>If so, is there a typeclass that enforces this? Or is this contingent on the particular implementation of some definition, like <code>Alternative.failure</code> itself or <code>run</code>, for the given monad performing the backtracking? What actually causes backtracking-upon-failure behavior?</p>",
        "id": 343539660,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679441212
    },
    {
        "content": "<p>I think this is just up to whoever provides the <code>Alternative</code> instance. From <code>Lean.Meta.Basic</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">orElse</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">saveState</span>\n  <span class=\"n\">try</span> <span class=\"n\">x</span> <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.restore</span><span class=\"bp\">;</span> <span class=\"n\">y</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OrElse</span> <span class=\"o\">(</span><span class=\"n\">MetaM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Meta.orElse</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Alternative</span> <span class=\"n\">MetaM</span> <span class=\"n\">where</span>\n  <span class=\"n\">failure</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failed\"</span>\n  <span class=\"n\">orElse</span>  <span class=\"o\">:=</span> <span class=\"n\">Meta.orElse</span>\n</code></pre></div>",
        "id": 343547863,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679444880
    },
    {
        "content": "<p>I would actually really like to add the <code>Alternative List</code> instance with <code>orElse</code> being <code>++</code>.</p>",
        "id": 343548130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679444954
    },
    {
        "content": "<p>So, then I guess the questions become: (1) does <code>throwError</code> by itself cause any backtracking? (2) where might <code>orElse</code> appear? For example, is there a hidden <code>orElse</code> generated in situations like <code>do ... let a ← foo ...</code>?</p>",
        "id": 343549278,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679445381
    },
    {
        "content": "<p><del><code>let some a ← foo</code> certainly emits an <code>orElse</code> or something built upon it</del></p>",
        "id": 343641667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679482936
    }
]