[
    {
        "content": "<p>Hello! I'm just getting started with this newly-updated book and have run into a weird termination issue that I don't quite understand.</p>\n<p>The exercise in the book reads:</p>\n<blockquote>\n<p>Write a function zip that combines two lists into a list of pairs. The resulting list should be as long as the shortest input list. Start the definition with def zip {α β : Type} (xs : List α) (ys : List β) : List (α × β) :=.</p>\n</blockquote>\n<p>My first cut at this, adopting the proposed function signature, was:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zip2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">([],</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">tailx</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">taily</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">tailx</span> <span class=\"n\">taily</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This gives me the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">zip2</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">3</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">zip2</span> <span class=\"n\">tailx</span> <span class=\"n\">taily</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">4</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">zip2</span> <span class=\"n\">tailx</span> <span class=\"n\">taily</span>\n</code></pre></div>\n<p>I read some of the threads here (the one <a href=\"#narrow/stream/270676-lean4/topic/.22Fail.20to.20show.20termination.22.20in.20merge.20sort.20implementation\">about merge sort</a>  was particularly helpful), and I tried playing around with <code>termination_by</code>, but it's clear that at this point in the book that shouldn't be necessary.</p>\n<p>So just in the nature of experimentation, I rewrote the function with a different signature, but doing substantively exactly the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zip</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">zip</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What gives? Why is lean able to tell, without help, that the second form terminates but the first doesn't? In both cases the lists are clearly decreasing in length on each recursive call. What am I missing?</p>\n<p>Tagging <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> in case other readers have hit the same speed bump.</p>\n<p>(If it matters, I'm running <code>Lean (version 4.0.0-nightly-2023-06-01, commit 28538fc74889, Release)</code>)</p>",
        "id": 363396069,
        "sender_full_name": "Peter B",
        "timestamp": 1685835185
    },
    {
        "content": "<p>Update: After poking around a bit, I had the epiphany that my parentheses in the match might be the issue (presumably because I was somehow now matching on a pair, vs matching on multiple expressions. This seems to make the termination checker happy</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">zip2</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ys</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs'</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">ys'</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">zip2</span> <span class=\"n\">xs'</span> <span class=\"n\">ys'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 363399047,
        "sender_full_name": "Peter B",
        "timestamp": 1685837471
    },
    {
        "content": "<p>Thanks for letting me know! This gotcha should definitely be in the book. I'm really busy and not sure when I can do it, but here's at least an issue to track it: <a href=\"https://github.com/leanprover/fp-lean/issues/125\">https://github.com/leanprover/fp-lean/issues/125</a></p>\n<p>Thanks again!</p>",
        "id": 382429728,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1691350104
    }
]