[
    {
        "content": "<p>Inforview currently uses this notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">List.get</span> <span class=\"n\">x</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">isLt</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I would like it to use this notation in my project:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x.get</span> <span class=\"o\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">‚ü©</span>\n</code></pre></div>\n<p>Is there a way to do it? Is there <code>set_option pp.something true</code> I could write to switch the notation to the latter?</p>",
        "id": 399019348,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1698475678
    },
    {
        "content": "<p>I have been trying to find an option for this as well, I think <code>‚ü®...‚ü©</code> is much easier to read. Or even just <code>T.mk ...</code>.</p>",
        "id": 399026755,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698481858
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.structureInstances</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>helps (make it use <code>mk</code>).<br>\nLive-ready-example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"o\">‚ü©</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.structureInstances</span> <span class=\"n\">false</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>This code is doing this: <br>\n<a href=\"https://github.com/leanprover/lean4/blob/819b5eaceaa433ea9105d7af3582a45d8f5a00e9/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L183-L205\">https://github.com/leanprover/lean4/blob/819b5eaceaa433ea9105d7af3582a45d8f5a00e9/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L183-L205</a><br>\nI wonder if it could make a smart guess, or an attribute-guided guess, which structures it should pretty-print using <code>‚ü®‚Ä¶‚ü©</code> instead.</p>",
        "id": 399027518,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698482477
    },
    {
        "content": "<p>Ah, you could declare an unexpander like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_lt_succ</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_pos</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">‚ü©</span>\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">Fin.mk</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">unexpandFinMk</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"bp\">$</span><span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(‚ü®</span><span class=\"bp\">$</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">hi</span><span class=\"o\">‚ü©)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>So if you think that that‚Äôs a better way to print <code>Fin</code> value (and I agree), just PR these three lines to the repo of your choice (e.g. <code>src/Init/NotationExtra.lean</code> in <code>lean4</code>). </p>\n<p>I am not sure if dropping the field names would cause type inference problems if you try to use the pretty-printed output in your code. But I guess not ‚Äì the field names don't identify the type anyways.</p>",
        "id": 399028062,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698482905
    },
    {
        "content": "<p>Thank you! And is there a setting for the dot notation? I want to see <code>x.get</code> instead of <code>List.get x</code> in the infoview.</p>",
        "id": 399029234,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1698483766
    },
    {
        "content": "<p>This works for any structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unexpandStructs</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Delab</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">({</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">fields</span><span class=\"o\">],</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"bp\">?</span> <span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(‚ü®</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">fields</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">‚ü©</span> <span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabApp</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">unexpandStructs</span> <span class=\"bp\">$</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">delabAppImplicit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">‚ü©</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>This is only a proof of concept, but it seems to work well enough</p>",
        "id": 399047473,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1698497045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvo≈ô√°k</span> <a href=\"#narrow/stream/270676-lean4/topic/Infoview.20notation/near/399029234\">said</a>:</p>\n<blockquote>\n<p>Thank you! And is there a setting for the dot notation? I want to see <code>x.get</code> instead of <code>List.get x</code> in the infoview.</p>\n</blockquote>\n<p>You can use the mathlib <code>pp_dot</code> attribute if you know the first explicit argument is the one that gets the dot notation's object.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ProjectionNotation</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">l.length</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">l.get</span> <span class=\"n\">i</span>\n<span class=\"c1\">-- List.get l i</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_dot</span><span class=\"o\">]</span> <span class=\"n\">List.get</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">l.get</span> <span class=\"n\">i</span>\n<span class=\"c1\">-- l.get i</span>\n</code></pre></div>\n<p>This module also turns on an elaborator that collapses sequences of projections from fields in parent structures.</p>",
        "id": 399052332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698500630
    },
    {
        "content": "<p>I still don't understand why this is not the default.</p>",
        "id": 399054741,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698502306
    },
    {
        "content": "<p>So I have these guys:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.structureInstances</span> <span class=\"n\">false</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_dot</span><span class=\"o\">]</span> <span class=\"n\">List.get</span> <span class=\"n\">List.take</span> <span class=\"n\">List.drop</span> <span class=\"n\">List.takeWhile</span> <span class=\"n\">List.dropWhile</span>\n</code></pre></div>\n<p>Is it possible to set them for the whole project, so that I don't have to repeat them in every file?</p>",
        "id": 399062439,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1698507670
    },
    {
        "content": "<p>Can I set those <code>pp_dot</code> attributes for my whole project?</p>",
        "id": 404624185,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701174309
    },
    {
        "content": "<p>Don't they propagate to imports automatically?</p>",
        "id": 404626113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701175020
    },
    {
        "content": "<p>The <code>set_option</code> you can put in your lakefile.</p>",
        "id": 404626146,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701175029
    },
    {
        "content": "<p>One thing I still don't understand:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ProjectionNotation</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">pp_dot</span><span class=\"o\">]</span> <span class=\"n\">List.map</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The goal is <code>l.map f = []</code>. Infoview shows <code>f.map l = []</code>. Why?</p>",
        "id": 404686726,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701193917
    },
    {
        "content": "<p><code>pp_dot</code> doesn't work unless the first explicit argument in the thing that's supposed to come before the dot. This limitation is in the docstring for the attribute.</p>",
        "id": 404686820,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701193945
    },
    {
        "content": "<p>The attribute writes an <code>app_unexpander</code> for you. You can write these yourself too. Here's a relevant example: <a href=\"#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404282694\">https://leanprover.zulipchat.com/#narrow/stream/412902-Polynomial-Freiman-Ruzsa-conjecture/topic/Outstanding.20tasks.2C.20version.203.2E0/near/404282694</a></p>",
        "id": 404687269,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701194116
    },
    {
        "content": "<p>Why is <code>List.map.{u, v} {Œ± : Type u} {Œ≤ : Type v} (f : Œ± ‚Üí Œ≤) (a‚úù : List Œ±) : List Œ≤</code> defined with arguments in this order?<br>\nSince using the dot notation, I've been thinking in my head that <code>List.map</code> takes the list as the first argument.</p>",
        "id": 404687293,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701194125
    },
    {
        "content": "<p>This way <code>List.map</code> is a functor. <code>List.map f</code> is a function that transforms lists.</p>",
        "id": 404687457,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701194176
    },
    {
        "content": "<p>(Though if it had the opposite argument order, you could always write <code>(List.map ¬∑ f)</code> for this.)</p>",
        "id": 404687652,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701194255
    },
    {
        "content": "<p>The way dot notation works is that it looks for the first argument (either explicit or implicit) having a type whose head (<code>List</code> in this case) is the expected head.</p>",
        "id": 404688127,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701194416
    },
    {
        "content": "<p>Where√§s <code>pp_dot</code> just replaces the first token (to the left of the dot) in the name by the first explicit argument without checking it is a well-typed term?</p>",
        "id": 404688597,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701194548
    },
    {
        "content": "<p>This works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.map</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Measure.map.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Unfortunately, it seems that round tripping is not enforced by the type checker, as I could as well do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.map</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Measure.map.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">WWWWWWWWWWWWWWW</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404689139,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701194754
    },
    {
        "content": "<p><code>app_unexpander</code>s don't check types at all. It's purely a syntax to syntax transformation, and you have to be sure it's correct.</p>",
        "id": 404689326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701194825
    },
    {
        "content": "<p>Shouldn't we add these unexpanders for the most useful functions like <code>List.map</code> to Mathlib or Std?</p>",
        "id": 404689504,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701194892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvo≈ô√°k</span> <a href=\"#narrow/stream/270676-lean4/topic/Infoview.20notation/near/404688597\">said</a>:</p>\n<blockquote>\n<p>Where√§s <code>pp_dot</code> just replaces the first token (to the left of the dot) in the name by the first explicit argument without checking it is a well-typed term?</p>\n</blockquote>\n<p>Yes, it's replacing <code>List.map f xs</code> by <code>xs.map f</code>. The <code>Lean.mkIdent</code> is to keep the name from printing with a hygiene tombstone.</p>",
        "id": 404690061,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701195141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvo≈ô√°k</span> <a href=\"#narrow/stream/270676-lean4/topic/Infoview.20notation/near/404689504\">said</a>:</p>\n<blockquote>\n<p>Shouldn't we add these unexpanders for the most useful functions like <code>List.map</code> to Mathlib or Std?</p>\n</blockquote>\n<p>I find these unexpanders to be rather brittle, and I'd like to see some support for dot notation from the delaborator itself, where we can be sure it's being handled properly.</p>",
        "id": 404690198,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701195195
    },
    {
        "content": "<p>It seems I will copypaste the following code into every project of mine, and it doesn't feel right.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.map</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.map.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">map</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.take</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.take.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">take</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.drop</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.drop.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">drop</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.takeWhile</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.takeWhile.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">takeWhile</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">app_unexpander</span> <span class=\"n\">List.dropWhile</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">List.dropWhile.unexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">Œº</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Œº</span><span class=\"o\">)</span><span class=\"bp\">.$</span><span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">dropWhile</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 404690708,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701195409
    },
    {
        "content": "<p>Are there any concrete plans on improving the delaborator?</p>\n<p>If not, these unexpanders (plus other similar ones) should go somewhere, as a temporary solution.</p>",
        "id": 404693523,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701196572
    },
    {
        "content": "<p>Or maybe not, if other Lean users don't even use <code>attribute [pp_dot]</code> as their default.</p>",
        "id": 404693795,
        "sender_full_name": "Martin Dvo≈ô√°k",
        "timestamp": 1701196679
    },
    {
        "content": "<p>As far as I know there's no Lean 4 issue tracking this feature request.</p>",
        "id": 404694625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701196935
    }
]