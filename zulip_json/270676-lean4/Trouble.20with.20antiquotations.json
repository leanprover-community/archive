[
    {
        "content": "<p>The following isn't working, and I can't work out how to find documentation on the particular order of <code>$</code> and <code>[</code> symbols needed to match the syntax I want:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo: \"</span> <span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"s2\">\"bar\"</span><span class=\"bp\">?</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"s2\">\", \"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"bp\">?%$</span><span class=\"n\">bars</span> <span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Quote.quote</span> <span class=\"n\">ts.size</span><span class=\"o\">))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo2: \"</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"n\">group</span><span class=\"o\">(</span><span class=\"n\">colGe</span> <span class=\"n\">term</span> <span class=\"s2\">\",\"</span><span class=\"bp\">?</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"c1\">-- like `foo` but doesn't support `bar`</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo2</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"n\">ts</span> <span class=\"bp\">$</span><span class=\"o\">[,]</span><span class=\"bp\">?</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ts</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"mi\">3</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo2</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 403962579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700830512
    },
    {
        "content": "<p>Is there a cheat sheet somewhere that translates between macro-macros like <code>sepByOne(</code>, the declarations like <code>sepByOne</code>, and the antiquotation syntax needed to match against them?</p>",
        "id": 403962936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700830632
    },
    {
        "content": "<p>Some documentation on parsers, syntax, quotations, and anti-quotations would be really helpful in general. Currently we have the metaprogramming book, the Lean.Parser doc page, and examples from Mathlib and zulip, and <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> 's Fxy language project. It sounds like a lot but this is really not much to go on</p>",
        "id": 403971549,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700833876
    }
]