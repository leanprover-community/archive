[
    {
        "content": "<p><a href=\"https://github.com/leanprover/elan/pull/98\">https://github.com/leanprover/elan/pull/98</a> moves elan documentation and defaults to Lean 4. Existing Lean 3 projects should continue to work as is.</p>",
        "id": 370132753,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687883888
    },
    {
        "content": "<p>One thought about the documentation:</p>\n<p>The fact that you can create custom releases of Lean 4 simply by pushing a tag to your own fork, and then specifying e.g. <code>semorrison/lean4:release-20230620-max</code> either in <code>lean-toolchain</code> or with <code>elan toolchain</code>, seems to be a secret only \"documented\" in zulip. Might we want to add a sentence or two here? This is really useful to know if when you need to test changes against mathlib (and want CI assistance, so mere <code>elan override</code> with a local Lean 4 is insufficient).</p>\n<p>I could add said sentences to the PR if that's helpful.</p>\n<p>(I'll pre-emptively agree this advice should be in the manual as well!)</p>",
        "id": 370219820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687904699
    },
    {
        "content": "<p>Relatedly, if we can work out how to deprecate the <code>lean</code> formula for Homebrew, we would want to do that, right? It is only a trap.</p>",
        "id": 370232053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687909910
    },
    {
        "content": "<p>(Indeed, we might even try to arrange for <code>elan-init</code> on homebrew to be renamed or aliased to <code>lean</code>.)</p>",
        "id": 370232138,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687909933
    },
    {
        "content": "<p><a href=\"https://github.com/Homebrew/homebrew-core/pull/135186\">https://github.com/Homebrew/homebrew-core/pull/135186</a></p>",
        "id": 370244272,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687914691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/installing.20lean.204.2C.20keeping.20lean.203/near/362011749\">said</a>:</p>\n<blockquote>\n<p>the use of an explicit date in the readme is definitely suboptimal, that will very obviously get out of date</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/elan/pull/99\">https://github.com/leanprover/elan/pull/99</a> implements a new kind of toolchain reference that allows us to use the correct Lean version even before downloading mathlib4, avoiding any redundant downloads and outdated readmes</p>",
        "id": 371306430,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688159815
    },
    {
        "content": "<p>Amazing <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"rainbow\" class=\"emoji emoji-1f308\" role=\"img\" title=\"rainbow\">:rainbow:</span></p>",
        "id": 371307029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688160049
    },
    {
        "content": "<p>Does something like <code>leanprover-community/mathlib4@master:lean-toolchain</code> work?</p>",
        "id": 371307097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688160076
    },
    {
        "content": "<p>Not yet... is it necessary? :)</p>",
        "id": 371309973,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688161155
    },
    {
        "content": "<p>does it just use the default branch?</p>",
        "id": 371310595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688161407
    },
    {
        "content": "<p>It does: <a href=\"https://github.com/leanprover/elan/pull/99/files#diff-c23944b7c4d02d84948dcdc3c50fe1fa45767be70e1a898dacd5b9982299cffbR49\">https://github.com/leanprover/elan/pull/99/files#diff-c23944b7c4d02d84948dcdc3c50fe1fa45767be70e1a898dacd5b9982299cffbR49</a></p>",
        "id": 371385708,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688196875
    },
    {
        "content": "<p>Note that we can now use the same mechanism to ensure that <code>nightly</code> always points to the most recent nightly, not whatever version was recent when elan was first installed/the toolchain was updated explicitly. This will mean that if you use the <code>nightly</code> default default AND work on a Lean file outside a project with pinned <code>lean-toolchain</code>, elan will frequently redownload Lean, but I believe that is the best compromise we can accomplish</p>",
        "id": 371436453,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688208499
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/installing.20lean.204.2C.20keeping.20lean.203\">#lean4 &gt; installing lean 4, keeping lean 3</a> by <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>.</p>",
        "id": 371436566,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688208529
    }
]