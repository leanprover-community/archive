[
    {
        "content": "<p>see title</p>",
        "id": 340994300,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678496013
    },
    {
        "content": "<p>The trivial way is to write two functions (inverse of each other).</p>",
        "id": 340994425,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678496079
    },
    {
        "content": "<p>Is it possible to write only one and generate its inverse?</p>",
        "id": 340994464,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678496107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as resolved.</p>",
        "id": 340994864,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678496334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as unresolved.</p>",
        "id": 340994902,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678496352
    },
    {
        "content": "<p>It is undecidable whether a function has an inverse, but in special cases you might write a tactic for that</p>",
        "id": 340999018,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1678498784
    },
    {
        "content": "<p>That depends, do you care whether the inverse function is computable? If not, you can generate the inverse from a proof that your function is invertible, by appealing to the axiom of choice.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">InvertibleFun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">InvertibleFun</span>\n  <span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"o\">(</span><span class=\"n\">choice</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonempty</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">InvertibleFun</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">Nonempty</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">inv</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">dom</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">dom</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"n\">use</span> <span class=\"n\">a</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inverse</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">InvertibleFun</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">inv.nonempty</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">inverse'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">InvertibleFun</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inverse</span> <span class=\"n\">f</span> <span class=\"n\">inv</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">InvertibleFun</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equiv</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">toFun</span>   <span class=\"o\">:=</span> <span class=\"n\">f</span>\n  <span class=\"n\">invFun</span>  <span class=\"o\">:=</span> <span class=\"n\">inverse'</span> <span class=\"n\">f</span> <span class=\"n\">inv</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inverse'</span><span class=\"o\">,</span> <span class=\"n\">inverse</span><span class=\"o\">]</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">inv.nonempty</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">prop</span><span class=\"o\">⟩</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">inv</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Classical.by_contradiction</span>\n    <span class=\"n\">intro</span> <span class=\"n\">neq</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">inv</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">neq</span>\n    <span class=\"n\">contradiction</span>\n\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">b</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inverse'</span><span class=\"o\">,</span> <span class=\"n\">inverse</span><span class=\"o\">]</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">choice</span> <span class=\"o\">(</span><span class=\"n\">inv.nonempty</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">prop</span><span class=\"o\">⟩</span>\n    <span class=\"n\">exact</span> <span class=\"n\">prop</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">InvertibleFun</span>\n</code></pre></div>",
        "id": 341124201,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1678541331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20a.20function.20is.20reversible.3F/near/341124201\">said</a>:</p>\n<blockquote>\n<p>That depends, do you care whether the inverse function is computable? If not, you can generate the inverse from a proof that your function is invertible, by appealing to the axiom of choice.</p>\n</blockquote>\n<p>Checking my understanding of functions: what about y = f1(x) = x^2 for integers x? The inverse of this, x = f2(y) isn’t a function, since y maps to multiple values of x. Would this be noncomputable, yet still provable via axiom of choice?</p>",
        "id": 341135532,
        "sender_full_name": "Tyler Josephson ⚛️",
        "timestamp": 1678545213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20a.20function.20is.20reversible.3F/near/341124201\">said</a>:</p>\n<blockquote>\n<p>That depends, do you care whether the inverse function is computable? If not, you can generate the inverse from a proof that your function is invertible, by appealing to the axiom of choice.</p>\n</blockquote>\n<p>Your <code>InvertibleFun</code> is pretty much just <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Function.Bijective#doc\">docs4#Function.Bijective</a></p>",
        "id": 341149864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678550323
    },
    {
        "content": "<p>And the rest of the construction is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Equiv.ofBijective#doc\">docs4#Equiv.ofBijective</a></p>",
        "id": 341149946,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678550369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"424214\">Tyler Josephson ⚛️</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20a.20function.20is.20reversible.3F/near/341135532\">said</a>:</p>\n<blockquote>\n<p>Checking my understanding of functions: what about y = f1(x) = x^2 for integers x? The inverse of this, x = f2(y) isn’t a function, since y maps to multiple values of x. Would this be noncomputable, yet still provable via axiom of choice?</p>\n</blockquote>\n<p>No, because</p>\n<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/How.20to.20prove.20a.20function.20is.20reversible.3F/near/341124201\">said</a>:</p>\n<blockquote>\n<p>If not, you can generate the inverse <strong>from a proof that your function is invertible</strong></p>\n</blockquote>\n<p>and you have no such proof because it's untrue</p>",
        "id": 341150089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678550424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> has marked this topic as resolved.</p>",
        "id": 341152185,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678551265
    },
    {
        "content": "<p>Thanks everyone!</p>",
        "id": 341152593,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678551444
    },
    {
        "content": "<p>Also, mathlib is quite useful</p>",
        "id": 341152597,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678551448
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 341156742,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678553103
    }
]