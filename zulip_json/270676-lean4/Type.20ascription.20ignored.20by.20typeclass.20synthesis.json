[
    {
        "content": "<p>I am in a situation where I want to index a <code>Vector \\a n</code> with a <code>Fin (n.succ - 1)</code>. I am also experimenting with the following, stricter <code>GetElem</code> instance, which requires indices to match.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">  Replace the exisiting instance for indexing a collection with `Fin n`.</span>\n<span class=\"cm\">  The new instance is more strict, only allowing a `Vector _ n` to be indexed by `Fin n`, where the</span>\n<span class=\"cm\">  older version allowed the same vector to be indexed by, say `Fin (n+1)` if it could be proven that</span>\n<span class=\"cm\">  the actual value of the `Fin` was less than `n`.</span>\n<span class=\"cm\">  This extra proof causes problems in rewrites.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">instGetElemFinVal</span>\n<span class=\"kn\">section</span> <span class=\"n\">GetElem</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">elem</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">GetElem</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">elem</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span> <span class=\"n\">where</span>\n  <span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">getElem</span> <span class=\"n\">xs</span> <span class=\"n\">i.1</span> <span class=\"n\">i.2</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">GetElem</span>\n</code></pre></div>\n<p>We have that <code>n.succ - 1</code> is defEq to <code>n</code> so this should work ,and I can confirm this with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However <code>v[i]</code>, and surprisingly also <code>v[(i : Fin n)]</code> will try to find an instance for <code>Fin (n+1-1)</code> and fail. <br>\nI can make it work by desugaring into </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">getElem</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">i</span>  <span class=\"n\">True.intro</span>\n</code></pre></div>\n<p>But that is not very satisfying. Note that this issue doesn't seem to be specific to the notation: using <code>getElem</code> with a type ascription (and without explicitly passing <code>idx</code>) also fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">getElem</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">True.intro</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 368820506,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687512382
    },
    {
        "content": "<p>A type ascription merely checks that the given type is defeq to the inferred type, it does not change the core term and thus type. You can use <code>show t from v</code> or <code>@id t v</code> to affect the type</p>",
        "id": 368821932,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687512647
    },
    {
        "content": "<p>That is surprising, I though it does affect type inference for things like anonymous constructors, right?</p>",
        "id": 368823814,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687512966
    },
    {
        "content": "<p>Thanks for the suggestion. This is for a simp-lemma, though, so I think I shouldn't introduce an extra <code>id</code> in there</p>",
        "id": 368824384,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687513079
    },
    {
        "content": "<p>It affects the expected type, but not the inferred type. That is, it only has an effect inside the parentheses, not outside</p>",
        "id": 368828927,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687513990
    },
    {
        "content": "<p>Right, that makes more sense. I got the idea from <code>(0 : Nat)</code> and <code>(0 : Int)</code> influencing the <code>OfNat</code> instance, but that is indeed inside the parenthesis. Thanks for clarifying!</p>",
        "id": 368830466,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687514290
    },
    {
        "content": "<p>what was the reason for it being different from <code>show t from v</code>? I've had to explain this before to others, and I'm never really sure what to say, since my intuition from other languages is that it should behave as <code>show t from v</code>.</p>",
        "id": 369270848,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687645278
    },
    {
        "content": "<p><code>show t from v</code> is more or less <code>let this : t := v; this</code>, so the type of <code>v</code> is changed since there's a let binding (IIRC, the actual expansion uses <code>let_fun</code>).</p>\n<p><code>(x : t)</code> elaborates <code>x</code> with <code>t</code> as the expected type and then ensures the result has type <code>t</code> (so, defeq check, and if it fails synthesize a coercion if possible). To get the type to actually change you'd have to insert something like <code>@id t x</code> like Sebastian mentioned, which changes the term. I think you wouldn't want type ascriptions to insert lets/let_funs/ids just because the type is only defeq and not syntactically equal.</p>",
        "id": 369271608,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687645896
    },
    {
        "content": "<p>Sure, the term needs to be changed -- but from a programming background I don't have an expectation that <code>(x : t)</code> leaves the term untouched (see C/Java casting). I <em>do</em> have an expectation that <code>(x : t)</code> has type <code>t</code> (syntactically). I don't think I've encountered a situation where I need the <code>(x : t)</code> behavior instead of the <code>show t from x</code> behavior, so that is what I'm wondering about.</p>\n<p>Interestingly, I have encountered situations where I use <code>(x :)</code>, but I think its behavior matches what I would intuitively expect.</p>",
        "id": 369272252,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687646400
    },
    {
        "content": "<p>I think one of the gotchas for programmers coming to Lean is that type ascriptions aren't casts, for example if <code>n m : Nat</code> then <code>(n + m : ℚ)</code> gives <code>↑n + ↑m</code> with coercions on each argument.</p>\n<p>The way type ascriptions work is sort of a direct interface to the elaboration algorithm, which might be one answer for why they are the way they are.</p>",
        "id": 369273062,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687647032
    },
    {
        "content": "<p>(Another answer for why <code>show t from v</code> and <code>(v : t)</code> are different might be if they were the same then there'd be no need for two notations. I guess <code>show t from v</code> is \"use this type both inwards and outwards\", but <code>(v : t)</code> is \"just use this type inwards\".)</p>",
        "id": 369273131,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687647114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Type.20ascription.20ignored.20by.20typeclass.20synthesis/near/369273131\">said</a>:</p>\n<blockquote>\n<p>(Another answer for why <code>show t from v</code> and <code>(v : t)</code> are different might be if they were the same then there'd be no need for two notations. I guess <code>show t from v</code> is \"use this type both inwards and outwards\", but <code>(v : t)</code> is \"just use this type inwards\".)</p>\n</blockquote>\n<p>That's not a very convincing answer, though. I think the reason there are two notations is a combination of historical precedent and desires for those two styles of syntax in certain kinds of proof, and the elaboration differences are somewhat idiosyncratic</p>",
        "id": 369275542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687648994
    },
    {
        "content": "<p>Yeah, I guess my complaint is if nobody wants the <code>(x : t)</code> behavior as it is atm then maybe we should just make it insert a <code>let_fun</code> like <code>show</code> does?</p>",
        "id": 369283530,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687654241
    },
    {
        "content": "<p>No, the difference is definitely important for some use cases</p>",
        "id": 369285147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687655035
    },
    {
        "content": "<p>Personally I would prefer all type ascription-like syntaxes act like <code>(x : t)</code>, I don't want junk in my term</p>",
        "id": 369285279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687655086
    },
    {
        "content": "<p>there are some technical challenges with making this interact as intended wrt typeclass inference and the like though</p>",
        "id": 369285359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687655126
    },
    {
        "content": "<p>hm, okay. Maybe when I use <code>show _ from _</code> there's better workarounds.</p>",
        "id": 369287323,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687656077
    }
]