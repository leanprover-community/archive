[
    {
        "content": "<p>My initial motivation for looking at Lean was I wanted to use a dependently typed language for the specification of programs, having previously had a fair amount of experience with more traditional approaches: non-dependent types, functions over those types, and predicate logic to specify properties of the data and functions.</p>\n<p>Having built up a number of examples I thought it might be useful to put them together as a kind of tutorial for using Lean as a specification language. For anyone interested, the result is <a href=\"https://github.com/paulch42/lean-spec\">here</a>.</p>",
        "id": 339782774,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1678082890
    },
    {
        "content": "<p>This looks really nice. In <a href=\"https://github.com/paulch42/lean-spec/blob/main/md/Sort.md\">https://github.com/paulch42/lean-spec/blob/main/md/Sort.md</a> , you talk about how the first version of the sorting specification is unimplementable, but the second version is also unimplementable because there is nothing that says that the comparison function is lawful. If it says that nothing is LE to itself then you still have the same issue.</p>",
        "id": 339783420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678083225
    },
    {
        "content": "<p>I have always found this rather confusing. What exactly is meant by 'lawful', and what has to change to make the definition dependent on LE being lawful.</p>",
        "id": 339960689,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1678134006
    },
    {
        "content": "<p>I think \"lawful\" means \"satisfies some axioms\" -- it's the difference between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/functor\">docs#functor</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor\">docs#category_theory.functor</a> for example -- the latter has <code>map_id</code> and <code>map_comp</code>, the former has nothing.</p>",
        "id": 339963863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678135207
    },
    {
        "content": "<p>In the case in question, there is <code>LT</code> (no axioms) and <code>PartialOrder</code> (LT and some axioms)</p>",
        "id": 339964297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678135391
    },
    {
        "content": "<p>So, for example, your claim that 2 is not less than 2 cannot be proved in general for just a type with <code>LT</code>.</p>",
        "id": 339965182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678135728
    },
    {
        "content": "<p>Ah, to be instances of the type classes LT and LE you just need to assign a couple of binary functions. There is no guarantee they are actually the functions we normally think of as 'less than' and 'less than or equal'.</p>\n<p>Is <code>PartialOrder</code> in mathlib?</p>",
        "id": 339965319,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1678135790
    },
    {
        "content": "<p>Yes and yes (<code>import Mathlib.Init.Algebra.Order</code>). Of course for Nat and Int if there are instances then they're going to be the sensible ones, but you were using alpha.</p>",
        "id": 339965485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678135838
    },
    {
        "content": "<p>Thanks. I didn't want to include mathlib since I am interested in general purpose programming that mathlib mostly has no relevance to.</p>",
        "id": 339965965,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1678135993
    },
    {
        "content": "<p>Perhaps something like this belongs on std4.</p>",
        "id": 339966051,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1678136027
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">True</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">True.intro</span>\n</code></pre></div>",
        "id": 339966373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678136145
    },
    {
        "content": "<p>You could just reword so instead of talking about LT you talk only about LT on nat or some other type with an LT that satisfies some sensible axioms. In the above code I create a type synonym for nat which type class inference can't see through, enabling me to redefine &lt; on it.</p>",
        "id": 339966527,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678136205
    },
    {
        "content": "<p>Paul, the example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">permutation₁</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">bs</span>\n</code></pre></div>\n<p>is really weird. I know that at this stage you have in mind lists with distincts elements. But nothing warns your readers, you simply wrote above that snippet \"Two lists are permutations of each other if they contain the same items, irrespective of order:\", which is simply not what permutation means.</p>",
        "id": 339966935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678136373
    },
    {
        "content": "<p><code>permutation₁ [1,2,2] [1,1,2]</code> :-/</p>",
        "id": 339967152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678136436
    },
    {
        "content": "<p>But this is fixed later on with <code>permutation₂</code></p>",
        "id": 339967339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678136507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Thanks for that. Yes, I will think about some suitable revision. I think there might be a couple of other places that need a similar change.</p>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, I was trying to approach it as something someone might come up with initially and get it wrong, then correct it. But I see your point.</p>",
        "id": 339967498,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1678136567
    },
    {
        "content": "<p>I understand it is fixed later, but I think a warning is in order, something like: \"let's first try a naive definition\".</p>",
        "id": 339967527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678136577
    }
]