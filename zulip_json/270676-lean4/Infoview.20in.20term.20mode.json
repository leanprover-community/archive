[
    {
        "content": "<p>The infoview is a great way to inspect the type of a theorem, especially when the pretty printer hides some information that you are interested in (e.g. implicit arguments). Is it possible to also display the infoview in term mode proofs?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- no way to get the infoview to show</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- infoview shows when your cursor is on (or before/after) `by`</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 405815530,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701693696
    },
    {
        "content": "<p>I also wonder this frequently. <code>rfl</code> might not make much difference here, because infoview will show expected type, which happens to be the goal. In more complicated cases, I need infoview to guide me through filling the parameters to the term, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  Nat.one_add</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ∀ (n : ℕ), 1 + n = Nat.succ n : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  1 + 1 = 2 : Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.one_add</span>\n</code></pre></div>\n<p>I hope infoview can give me the expected type one parameter by one parameter, guide me through filling the holes, as in tactic mode.</p>",
        "id": 405818787,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701694819
    },
    {
        "content": "<p>For now, I'm frequently relying on type mismatch to figure out what should I fill, not only in term mode, but also anywhere requires feeding parameters. Sometimes Lean could be really upset by what I fed to it, and gives me really terrifying errors (I can post here if I meet one again), if Lean can realize that I'm just trying to make the term to match a goal/type, and guide me like for proofs, it would be really cool.</p>",
        "id": 405821374,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701695604
    },
    {
        "content": "<p>Another case that feels like treading on eggs is when giving rewrite rules parameters, it could also use help from infoview.</p>",
        "id": 405822342,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701695956
    },
    {
        "content": "<p>If you put a <code>_</code> in place of your proof, and put your cursor on the <code>_</code>, the info-view will show the info you are looking for</p>",
        "id": 405823825,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701696423
    },
    {
        "content": "<p>Thanks for the hint, but as frequent as this, can Lean pretend I have a <code>_</code> after my cursor, so I don't have to insert a <code>_</code> and move my cursor back to before <code>_</code>.  Also don't know if this addresses all use cases <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  has in mind for this question.</p>",
        "id": 405825560,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701696995
    },
    {
        "content": "<p>Yes, it would be nice if we can get this info without having to change the term</p>",
        "id": 405827049,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1701697479
    }
]