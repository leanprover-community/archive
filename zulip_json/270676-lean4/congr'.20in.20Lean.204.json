[
    {
        "content": "<p>Is there a replacement to Lean 3 <code>congr'</code> in Lean 4? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=congr#doc\">docs#congr</a> doesn't look inside iff goals, seemingly<br>\nLean 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.congr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span><span class=\"o\">,</span> <span class=\"c1\">--works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">P</span> <span class=\"n\">V</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">congr</span> <span class=\"mi\">2</span>\n  <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 398137512,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698086027
    },
    {
        "content": "<p>Did you try <code>congr!</code>?</p>",
        "id": 398137631,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698086079
    },
    {
        "content": "<p>It seems to go too far, like Lean 3 rcongr - it starts using ext lemmas where I didn't want to</p>",
        "id": 398137731,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698086140
    },
    {
        "content": "<p>Ah, <code>congr' 2</code> apparently corresponds to <code>congr! 1</code>, got it. Thanks!</p>",
        "id": 398137861,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698086200
    },
    {
        "content": "<p>Yeah, mathlib4's <code>congr!</code> is meant to be an analogue for mathlib3's <code>congr'</code>. Unlike <code>rcongr</code> it doesn't use ext lemmas (though it does know about funext and it does <code>intro</code> for you, and you can give <code>congr!</code> a <code>with</code> clause to name introduced variables).</p>",
        "id": 398140136,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698087276
    },
    {
        "content": "<p>Right, it was the fact that it uses ext on functions and does intro (both of which mathlib3 <code>congr' </code>don't do) that made my life difficult here :)</p>",
        "id": 398165727,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1698100804
    }
]