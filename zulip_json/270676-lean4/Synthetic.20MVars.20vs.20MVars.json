[
    {
        "content": "<p>This piece of meta code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#unify\"</span> <span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" =?= \"</span> <span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">lhs</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">rhs</span> <span class=\"n\">none</span>\n    <span class=\"k\">if</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">isDefEq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"k\">then</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Unifies!\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">logInfo</span> <span class=\"s2\">\"Nu-uh!\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">unify</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">List</span> <span class=\"n\">_</span>\n<span class=\"bp\">#</span><span class=\"n\">unify</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n</code></pre></div>\n<p>Spits out <code>Unifies</code> for the first case and <code>Nu-uh</code> for the second case. According to go to definition on <code>_</code> and <code>?a</code> the former is a \"hole\" while the latter is a \"synthetic hole\".</p>\n<p>I've got two questions:</p>\n<ol>\n<li>What is the difference between these?</li>\n<li>Why does the unification work out for one of them and not for the other?</li>\n</ol>",
        "id": 399057823,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1698504540
    },
    {
        "content": "<p>To add to the confusion: If we add <code>let holes := rhs.collectMVars default |&gt;.result</code> before <code>isDefEq</code>, it finds one hole for <code>?a</code>, and no holes for <code>_</code>.</p>",
        "id": 399059486,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698505600
    },
    {
        "content": "<p>It would be nice to have a command like this, which prints the hole assignment after unification.</p>",
        "id": 399059883,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698505874
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/MetavarContext.lean#L84-L108\">https://github.com/leanprover/lean4/blob/master/src/Lean/MetavarContext.lean#L84-L108</a></p>",
        "id": 399062826,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1698508072
    },
    {
        "content": "<p>... and if you want to see more people fumbling through similar issues recently, there is a similar discussion towards the beginning of this thread</p>\n<p><a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Help.20with.20writing.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Help.20with.20writing.20tactic</a></p>\n<p>I'm on mobile and I do not know how to link to a specific comment.</p>",
        "id": 399063408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698508722
    },
    {
        "content": "<p>(I believe it's not possible to do so on mobile)</p>",
        "id": 399065117,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698509905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Synthetic.20MVars.20vs.20MVars/near/399065117\">said</a>:</p>\n<blockquote>\n<p>(I believe it's not possible to do so on mobile)</p>\n</blockquote>\n<p>The trick is to use the \"quote and reply\" feature, then tediously backspace everything but the link</p>",
        "id": 399065421,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698510200
    },
    {
        "content": "<p>Just to try Eric's suggestion: this is where the discussion starts:</p>\n<p><a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Help.20with.20writing.20tactic/near/398061102\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Help.20with.20writing.20tactic/near/398061102</a></p>",
        "id": 399069850,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698514481
    },
    {
        "content": "<p>(sent from my phone!)</p>",
        "id": 399069855,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698514490
    },
    {
        "content": "<p>Hmm, except that yo check if it worked, I probably need a computer... <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 399069898,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698514556
    },
    {
        "content": "<p>That's me in the thread <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 399071763,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698516211
    },
    {
        "content": "<p>But yes, the docs Leonardo linked to is pretty clear. As it says, <code>SyntheticOpaque</code> is never assigned by <code>isDefEq</code>, while natural and synthetic correspond to how \"greedy\" the matching should be</p>",
        "id": 399071858,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698516284
    },
    {
        "content": "<p>You can use <code>set_option trace.Meta.isDefEq true</code> to see matching outputs. It's really useful and cool to read too.</p>",
        "id": 399071875,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698516313
    },
    {
        "content": "<p>I had to something similar to yours, and I did something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">setMCore</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">loc</span> <span class=\"o\">:</span> <span class=\"n\">Location</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">origPattern</span><span class=\"o\">,</span> <span class=\"n\">mvarIds</span><span class=\"o\">)</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">elabTermWithHoles</span> <span class=\"n\">stx</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getMainTag</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">allowNaturalHoles</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Named holes are by default syntheticOpaque and not assignable, so we change that -/</span>\n  <span class=\"n\">mvarIds.forM</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mvarId.setKind</span> <span class=\"bp\">.</span><span class=\"n\">natural</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Tactic.setm</span><span class=\"o\">]</span> <span class=\"s2\">\"origPattern : {‚Üê ppExpr origPattern}\"</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> ... -/</span>\n</code></pre></div>",
        "id": 399071958,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698516377
    },
    {
        "content": "<p>Taken straight from my code :P</p>",
        "id": 399071970,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698516395
    },
    {
        "content": "<p>Ooooo, <code>mvarId.setKind .natural</code> is ideal. That'll help me a lot.</p>",
        "id": 399077228,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698521615
    },
    {
        "content": "<p>What is the correct way to get the name of a synthetic variable? I am currently doing <code>(&lt;- mymyvarid.getDecl).userName</code>, but that turns up <code>[anonymous]</code> sometimes despite initially giving it a name such as <code>?a</code></p>",
        "id": 399078055,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698522505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üêâ</span> <a href=\"#narrow/stream/270676-lean4/topic/Synthetic.20MVars.20vs.20MVars/near/399078055\">said</a>:</p>\n<blockquote>\n<p>What is the correct way to get the name of a synthetic variable? I am currently doing <code>(&lt;- mymyvarid.getDecl).userName</code>, but that turns up <code>[anonymous]</code> sometimes despite initially giving it a name such as <code>?a</code></p>\n</blockquote>\n<p>That <em>is</em> the correct way to do it (ideally there should be a <code>.getUserName</code>, and I probably should PR for it lol). If it says [anonymous] for the name it means you didn't give it a name properly</p>",
        "id": 399091657,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698536862
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"myTactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"n\">userName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">mvar.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"mvar : {mvar}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"mvarId : {mvarId}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"name : {(‚ÜêmvarId.getDecl).userName}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myTactic</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>logged:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ñ∂</span> <span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">true</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n\n<span class=\"bp\">‚ñ∂</span> <span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">mvar</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n\n<span class=\"bp\">‚ñ∂</span> <span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">mvarId</span> <span class=\"o\">:</span> <span class=\"n\">case</span> <span class=\"n\">a</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"bp\">?</span><span class=\"n\">m.2484</span>\n\n<span class=\"bp\">‚ñ∂</span> <span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"bp\">-</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 399091949,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698537195
    },
    {
        "content": "<p>closer to your code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"myTactic\"</span> <span class=\"n\">expr</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">elabTerm</span> <span class=\"n\">expr</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvarId</span> <span class=\"o\">:=</span> <span class=\"n\">expr.mvarId</span><span class=\"bp\">!</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"expr : {expr}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"mvarId : {mvarId}\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"name : {(‚ÜêmvarId.getDecl).userName}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">myTactic</span> <span class=\"bp\">?</span><span class=\"n\">a</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>same output (with different id)</p>",
        "id": 399092034,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698537307
    },
    {
        "content": "<p>With the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#unify\"</span> <span class=\"n\">lhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" =?= \"</span> <span class=\"n\">rhs</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">lhs</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">rhs</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">holes</span> <span class=\"o\">:=</span> <span class=\"n\">rhs.collectMVars</span> <span class=\"n\">default</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">result</span>\n    <span class=\"n\">holes.forM</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h.setKind</span> <span class=\"bp\">.</span><span class=\"n\">natural</span>\n    <span class=\"k\">if</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">isDefEq</span> <span class=\"n\">lhs</span> <span class=\"n\">rhs</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">assignments</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">holes.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">h.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">userName</span>\n        <span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.mvar</span> <span class=\"n\">h</span>\n        <span class=\"n\">pure</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{name} ‚Ü¶ {val}\"</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{assignments}\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">logError</span> <span class=\"s2\">\"Nu-uh!\"</span>\n</code></pre></div>\n<p>I get the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">unify</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">=?=</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"c1\">-- [a ‚Ü¶ Nat]</span>\n<span class=\"bp\">#</span><span class=\"n\">unify</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">Œ±</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"bp\">?</span><span class=\"n\">hole</span> <span class=\"c1\">-- [[anonymous] ‚Ü¶ fun Œ± =&gt; Œ±]</span>\n</code></pre></div>\n<p>I have two issues with this code:</p>\n<ul>\n<li>The name should be <code>hole</code>, not <code>[anonymous]</code>.</li>\n<li>The assigned value does not fit exactly into the hole, I would have expected simply <code>Œ±</code>, instead it is <code>fun Œ± =&gt; Œ±</code>.</li>\n</ul>",
        "id": 399126996,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698565831
    },
    {
        "content": "<p>For your second question I think it's because the <code>?hole</code> (might) depend on <code>Œ±</code>, so it should be a function.</p>",
        "id": 399154721,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698586902
    },
    {
        "content": "<p>For your first question, it's because <code>?hole</code> here is not a mvar, it's a bvar (<em>bound</em> variable)</p>",
        "id": 399154804,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698586942
    },
    {
        "content": "<p>If it is clearer, write it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">unify</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Ü¶</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Ü¶</span> <span class=\"bp\">?</span><span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399154881,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698587019
    },
    {
        "content": "<p>You can also log <code>{repr rhs}</code> to see it's a bvar</p>",
        "id": 399154966,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698587048
    },
    {
        "content": "<p>Also, please write <code>‚Üê</code> (type with <code>\\l</code>) instead of <code>&lt;-</code> :) - at least that's the convention in Mathlib4, afaik. Though looking at the source code, there are 4 occassions where people used <code>&lt;-</code> instead, they should probably be PR'ed</p>",
        "id": 399155010,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1698587090
    }
]