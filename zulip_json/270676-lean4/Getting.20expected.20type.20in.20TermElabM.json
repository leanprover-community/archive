[
    {
        "content": "<p>Do we have some way to obtaining the <code>Expr</code> associated to the expected type in <code>TermElabM</code>? <br>\nAs a basic example, say I want to write a term elaborator <code>foo%</code> that would work in the following cases: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">%</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">%</span>\n</code></pre></div>\n<p>giving <code>0</code> in the Nat case and <code>1</code> in the Rat case, and resulting in an error in all other cases.</p>",
        "id": 403427770,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700586764
    },
    {
        "content": "<p>Yes you can. It seems the only way to optionally get an expected type at the moment is if you write a separate <code>syntax</code> and <code>term_elab</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">fooStx</span><span class=\"o\">)</span> <span class=\"s2\">\"foo%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">fooStx</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabFoo</span> <span class=\"o\">:</span> <span class=\"n\">Term.TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n</code></pre></div>",
        "id": 403429190,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700587225
    },
    {
        "content": "<p>Ah great. Thanks Kyle!</p>",
        "id": 403429291,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700587255
    },
    {
        "content": "<p>There's some syntax for the <code>elab</code> command to require an expected type, but that causes the elaborator to postpone until it knows the expected type, and if it can't know one it throws an error.</p>",
        "id": 403429370,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700587285
    },
    {
        "content": "<p>I guess that actually would work for you.</p>",
        "id": 403429452,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700587318
    },
    {
        "content": "<p>What's that syntax?</p>",
        "id": 403429463,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700587321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">expectedType</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expectedType</span>\n  <span class=\"k\">match</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Nat</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Rat</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span><span class=\"o\">)))</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"The expected type should be Nat or Rat, not{indentD expectedType}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">%</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Rat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span><span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 403429972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700587493
    },
    {
        "content": "<p>All the discussion about iterated products in Tao's PFR project made me curious about how automation could help. So I made an elaborator that automatically constructs \"obvious\" equivalences between iterated products, regardless of how they're associated. The reason for my question is that I wanted to make this as convenient as possible to use. There are two variants now: <code>prod_assoc%</code> for when the types can be infered and <code>prod_assoc(..., ...)</code> requiring the user to provide them explicitly. This still feels hacky to me. Does anyone have any suggestions for how to best make this work? </p>\n<p>the draft PR is here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/8551\">#8551</a> (with examples at the bottom of the file)</p>",
        "id": 403455094,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700597379
    },
    {
        "content": "<p>You could avoid the special case of <code>prod_assoc(..., ...)</code> by using the syntax</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">prod_assoc</span><span class=\"bp\">%</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403455707,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700597672
    },
    {
        "content": "<p>Sure, that's only slightly more verbose than <code>prod_assoc(..., ...)</code></p>",
        "id": 403455783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700597711
    },
    {
        "content": "<p>What I really want is to be able to write <code>prod_assoc(_, ...)</code> if I know that the input can be inferred but not the output, and similarly with the two interchanged.</p>",
        "id": 403455854,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700597746
    },
    {
        "content": "<p>But maybe <code>(prod_assoc% : _ ≃ α × (β × γ) × δ)</code> is good enough in that case.</p>",
        "id": 403455983,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700597792
    },
    {
        "content": "<p>Hmm.... This still fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"associate%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">expectedType</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">mkProdEquiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Expected type {expectedType} is not of the form `α ≃ β`.\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"n\">associate</span><span class=\"bp\">%</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Do you have any hints for how to make this work?</p>",
        "id": 403456565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700598085
    },
    {
        "content": "<p>I just got this example to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">prod_assoc</span><span class=\"bp\">%</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">prod_assoc</span><span class=\"bp\">%</span>\n</code></pre></div>",
        "id": 403456921,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700598252
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- after your `mkProdEquiv`</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">prodAssocStx</span><span class=\"o\">)</span> <span class=\"s2\">\"prod_assoc_internal%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[</span><span class=\"n\">term_elab</span> <span class=\"n\">prodAssocStx</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabProdAssoc</span> <span class=\"o\">:</span> <span class=\"n\">Term.TermElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">prod_assoc_internal</span><span class=\"bp\">%</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">expectedType</span> <span class=\"bp\">←</span> <span class=\"n\">Term.tryPostponeIfHasMVars</span><span class=\"bp\">?</span> <span class=\"n\">expectedType</span><span class=\"bp\">?</span>\n          <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"expected type must be known\"</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">Equiv</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">expectedType</span>\n          <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Expected type {expectedType} is not of the form `α ≃ β`.\"</span>\n    <span class=\"n\">mkProdEquiv</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"prod_assoc%\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">prod_assoc_internal</span><span class=\"bp\">%</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">prod_assoc</span><span class=\"bp\">%</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">this</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"n\">prod_assoc</span><span class=\"bp\">%</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">prod_assoc</span><span class=\"bp\">%</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">≃</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">prod_assoc</span><span class=\"bp\">%</span>\n</code></pre></div>\n</div></div>",
        "id": 403456949,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700598269
    },
    {
        "content": "<p>Nice! I'll take a closer look after I eat some lunch :)</p>",
        "id": 403457103,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700598341
    },
    {
        "content": "<p>Awesome! with your code Kyle this works as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">×</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"n\">prod_assoc</span><span class=\"bp\">%</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 403458578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700599014
    },
    {
        "content": "<p>I think that PR should be ready to review now :) Thanks again Kyle!</p>",
        "id": 403459751,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700599553
    },
    {
        "content": "<p>I'm enjoying these Lean 4 days of Lean. We've got a lot of flexibility now!</p>",
        "id": 403466303,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700602632
    }
]