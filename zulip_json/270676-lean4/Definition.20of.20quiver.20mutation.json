[
    {
        "content": "<p>I'm trying to define quiver mutation with lean. But in my code below, it shows error failed to synthesize type class instance in line \"if a = j ∧ Q.arrows j b &gt; 0 then 0\" and three lines below that. <br>\nstructure quiver (vertex : Type) :=<br>\n(arrows : vertex → vertex → ℕ)<br>\n(connected_to_j (j: vertex): ∀ (v : vertex), v ≠ j → arrows v j + arrows j v &gt; 0)<br>\n(no_circles_of_length_1 : ∀ (v : vertex), arrows v v = 0)<br>\n(no_circles_of_length_2 : ∀ (v1 v2 : vertex), v1 ≠ v2 → arrows v1 v2 = 0 → ∀ (v3 : vertex), ¬(arrows v1 v3 = 1 ∧ arrows v3 v2 = 1))</p>\n<p>def quiver_mutate {V : Type} (j : V) (Q : quiver V) : quiver V :=<br>\n{ arrows := λ a b,<br>\n    if a = j ∧ Q.arrows j b &gt; 0 then 0<br>\n    else if a = j ∧ Q.arrows b j &gt;0 then Q.arrows b a<br>\n    else if b = j ∧ Q.arrows a j &gt;0 then 0<br>\n    else if b = j ∧ Q.arrows j a &gt;0 then Q.arrows b a <br>\n    else if Q.arrows a j &gt;0 ∧ Q.arrows j b &gt;0 ∧ Q.arrows a b &gt; 0 then Q.arrows a b + (Q.arrows a j) * (Q.arrows j b)<br>\n    else if Q.arrows a j &gt;0 ∧ Q.arrows j b &gt;0 ∧ Q.arrows a b = 0 ∧ Q.arrows b a &gt; (Q.arrows a j) * (Q.arrows j b) then 0<br>\n    else if Q.arrows a j &gt;0 ∧ Q.arrows j b &gt;0 ∧ Q.arrows a b = 0 ∧ Q.arrows b a &lt; (Q.arrows a j) * (Q.arrows j b) then (Q.arrows a j) * (Q.arrows j b) - Q.arrows b a<br>\n    else if Q.arrows j a &gt;0 ∧ Q.arrows b j &gt;0 ∧ Q.arrows a b = 0 then 0 <br>\n    else if Q.arrows j a &gt;0 ∧ Q.arrows b j &gt;0 ∧ Q.arrows a b &gt; 0 ∧ Q.arrows a b &gt; (Q.arrows j a) * (Q.arrows b j) then Q.arrows a b - (Q.arrows j a) * (Q.arrows b j)<br>\n    else if Q.arrows j a &gt;0 ∧ Q.arrows b j &gt;0 ∧ Q.arrows a b &gt; 0 ∧ Q.arrows a b &lt; (Q.arrows j a) * (Q.arrows b j) then 0<br>\n    else Q.arrows a b<br>\n}<br>\nWhat might be the problem, thanks.</p>",
        "id": 338034756,
        "sender_full_name": "Zheyuan Dong",
        "timestamp": 1677344379
    },
    {
        "content": "<p>Can you please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to display lean code?</p>",
        "id": 338036013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677344899
    },
    {
        "content": "<p>Sure. It is my first time to use the society, sorry for the inconvenience to your reading.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">quiver</span> <span class=\"o\">(</span><span class=\"n\">vertex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">arrows</span> <span class=\"o\">:</span> <span class=\"n\">vertex</span> <span class=\"bp\">→</span> <span class=\"n\">vertex</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">connected_to_j</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">vertex</span><span class=\"o\">):</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vertex</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"n\">arrows</span> <span class=\"n\">v</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"n\">arrows</span> <span class=\"n\">j</span> <span class=\"n\">v</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">no_circles_of_length_1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">vertex</span><span class=\"o\">),</span> <span class=\"n\">arrows</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">no_circles_of_length_2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">vertex</span><span class=\"o\">),</span> <span class=\"n\">v1</span> <span class=\"bp\">≠</span> <span class=\"n\">v2</span> <span class=\"bp\">→</span> <span class=\"n\">arrows</span> <span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v3</span> <span class=\"o\">:</span> <span class=\"n\">vertex</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">arrows</span> <span class=\"n\">v1</span> <span class=\"n\">v3</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">arrows</span> <span class=\"n\">v3</span> <span class=\"n\">v2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quiver_mutate</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">arrows</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span> <span class=\"bp\">&gt;</span><span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">j</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">Q.arrows</span> <span class=\"n\">b</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span> <span class=\"n\">Q.arrows</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338037930,
        "sender_full_name": "Zheyuan Dong",
        "timestamp": 1677345806
    },
    {
        "content": "<p>Can you post the error? I suspect that you've not posted precisely the relevant part. Guessing: does <code>open_locale classical</code> fix it?</p>",
        "id": 338038892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677346280
    },
    {
        "content": "<p>Thanks, that can be solved. But there is still en error which has not been mentioned. In the line <code>{ arrows := λ a b,  </code>,there shows arrow  <code> invalid structure value { ... }, field 'hom' was not provided</code>and<code>invalid structure value { ... }, 'arrows' is not a field of structure 'quiver'</code><br>\nBut I don't know why arrows must be a field?</p>",
        "id": 338040026,
        "sender_full_name": "Zheyuan Dong",
        "timestamp": 1677346806
    },
    {
        "content": "<p>Are you somehow also importing mathlib's quivers?</p>",
        "id": 338042193,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677347933
    },
    {
        "content": "<p>You should post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but Adam's suggestion seems to fit exactly with the symptoms</p>",
        "id": 338042706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677348210
    },
    {
        "content": "<p><code>import combinatorics.quiver.basic</code>.<br>\nIs that right? I found it is different in defining quivers. Maybe I should rewrite the definition of arrow in the corresponding  environment. <br>\nThank you very much!!!</p>",
        "id": 338044424,
        "sender_full_name": "Zheyuan Dong",
        "timestamp": 1677349035
    },
    {
        "content": "<p>That doesn't look like a lean 4 import. Are you posting in the right stream?</p>",
        "id": 338044623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677349129
    },
    {
        "content": "<p>There is <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a>  if you are importing mathlib code and <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> if this is a lean 3 question</p>",
        "id": 338044690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677349169
    },
    {
        "content": "<p>Maybe I use lean 3? And I should download lean4 instead?</p>",
        "id": 338044719,
        "sender_full_name": "Zheyuan Dong",
        "timestamp": 1677349198
    },
    {
        "content": "<p>Using Lean 3 is fine, and right now possibly better for this application. We just have separate streams for discussing these topics here is all</p>",
        "id": 338044878,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1677349274
    },
    {
        "content": "<p>It's up to you which one you use, both can do quivers, but if this is a question involving mathlib then this stream is not the right place. I suggest you decide which one you want to use and then start a new thread posting a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> of your question</p>",
        "id": 338044905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677349296
    },
    {
        "content": "<p>Thanks for your advice. If I have some problem, I will choose the right stream.</p>",
        "id": 338045197,
        "sender_full_name": "Zheyuan Dong",
        "timestamp": 1677349479
    }
]