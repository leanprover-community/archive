[
    {
        "content": "<p>If I want to read off the type and proof from a theorem, I can do that using <code>getConstInfo</code>, then extract the <code>.type</code> and <code>value?</code>.  Is this the best way to do it when constructing a proof on the meta level? My intuition is that axioms should also be usable to construct a proof, but they don't seem to have a <code>value</code>.</p>",
        "id": 339233046,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677804326
    },
    {
        "content": "<p>You shouldn't be using the proof of the theorem, you should refer to it by name</p>",
        "id": 339233349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677804470
    },
    {
        "content": "<p>Ah, via <code>.const</code>?</p>",
        "id": 339233730,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677804655
    },
    {
        "content": "<p>Yeah, but it seems like it's usually written as <code>mkConst</code> (like in <code>mkConst ``propext []</code>). There are a number of helper functions for it to fill in universe metavariables too.</p>",
        "id": 339233797,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677804694
    },
    {
        "content": "<p>like <code>mkConstWithFreshMVarLevels</code></p>",
        "id": 339233910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677804728
    },
    {
        "content": "<p>There's also <code>mkAppM</code>, which makes sure everything fully typechecks (and fills in implicit arguments, well most of them, see the docstring) when you give it some arguments, like <code>mkAppM ``Subsingleton.elim #[lhs, rhs]</code></p>",
        "id": 339234009,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677804798
    },
    {
        "content": "<p>Ah, I see, thanks! (I saw that I had a <code>ConstantInfo</code> and immediately forgot all about <code>.const</code> and friends, asking myself ‚Äúhow do I use this??‚Äù üôÉ But I didn‚Äôt know about the universe mvar helpers, that‚Äôs very useful!)</p>",
        "id": 339234257,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677804934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Extract.20type.20and.20value.20from.20name.20for.20proof/near/339233797\">said</a>:</p>\n<blockquote>\n<p>it seems like it's usually written as <code>mkConst</code></p>\n</blockquote>\n<p>This is a relic from the dark days before <code>@[computed_field]</code>, when the <code>Expr</code> constructors were forbidden. Now <code>.const</code> is again the preferred spelling.</p>",
        "id": 339296336,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677837225
    }
]