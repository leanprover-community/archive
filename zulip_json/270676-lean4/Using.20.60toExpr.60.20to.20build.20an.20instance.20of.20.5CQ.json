[
    {
        "content": "<p>When I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">toExpr</span> <span class=\"s2\">\"1\"</span>\n</code></pre></div>\n<p>I get back a <code>Lean.Expr.lit (Lean.Literal.strVal \"1\")</code>, (which isn't technically wrong...) but I'd prefer to get back either a <code>Nat</code> or a <code>Rational</code> depending on what the string is. I'm coming up empty searching for the appropriate way to do this -- I can use <code>toNat!</code> if the string is always a <code>Nat</code>, but it might not be. Any pointers would be great! Thanks in advance!</p>",
        "id": 400835171,
        "sender_full_name": "Ryan Ziegler",
        "timestamp": 1699401004
    },
    {
        "content": "<p>What do you expect in the <code>Rat</code> case?</p>",
        "id": 400835285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699401074
    },
    {
        "content": "<p><code>toExpr</code> takes a value an turns it into an expression; it sounds like you want to take <em>source code</em> and turn it into a value?</p>",
        "id": 400835524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699401229
    },
    {
        "content": "<p>perhaps something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Rat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toNatOrRat</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">⊕</span> <span class=\"n\">Rat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s.toNat</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">sign</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Syntax.decodeScientificLitVal</span><span class=\"bp\">?</span> <span class=\"n\">s</span>\n    <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Rat.ofScientific</span> <span class=\"n\">n</span> <span class=\"n\">sign</span> <span class=\"n\">e</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">toNatOrRat</span> <span class=\"s2\">\"1\"</span> <span class=\"c1\">-- some (Sum.inl 1)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toNatOrRat</span> <span class=\"s2\">\"1.0\"</span> <span class=\"c1\">-- some (Sum.inr 1)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">toNatOrRat</span> <span class=\"s2\">\"12.5\"</span> <span class=\"c1\">-- some (Sum.inr (25 : Rat)/2)</span>\n</code></pre></div>",
        "id": 400835918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699401463
    },
    {
        "content": "<p>I guess if you want to support other bases there's also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.Syntax.decodeNatLitVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"1\"</span> <span class=\"c1\">-- some 1</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Lean.Syntax.decodeNatLitVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"0xFF\"</span> <span class=\"c1\">-- some 255</span>\n</code></pre></div>",
        "id": 400836037,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699401544
    }
]