[
    {
        "content": "<p>Can we ask Lean to report the number of heartbeats used in a lemma? I can do a binary search with <code>set_option maxHeartbeats _ in</code> but I hope that there is a better way.</p>",
        "id": 368269234,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687359740
    },
    {
        "content": "<p>I'm sure we can. The relevant function is <code>(← IO.getNumHeartbeats)</code>, which returns the number of heartbeats used so far in the current thread. Copying the framework of something like <code>whatsnew in</code> (but much simpler!) would let you run that before and after running the enclosed command of a <code>count_heartbeats in</code>.</p>",
        "id": 368373825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687386424
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"count_heartbeats \"</span> <span class=\"s2\">\"in\"</span> <span class=\"n\">ppLine</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getNumHeartbeats</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n  <span class=\"n\">finally</span>\n    <span class=\"k\">let</span> <span class=\"n\">finish</span> <span class=\"bp\">←</span> <span class=\"n\">IO.getNumHeartbeats</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{finish - start}\"</span>\n\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 368374107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687386554
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 368388292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687394747
    },
    {
        "content": "<p>Are you doing the PR or am I? :-)</p>",
        "id": 368407571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687405385
    },
    {
        "content": "<p>You</p>",
        "id": 368412059,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1687407593
    },
    {
        "content": "<p>The implementation grew slightly: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5365\">#5365</a></p>\n<p>It now:</p>\n<ul>\n<li>sets <code>maxHeartbeats 0</code> in the enclosed command</li>\n<li>checks whether or not it exceeds the current limit</li>\n<li>if it does, provides a \"Try this:\" suggestion of <code>set_option maxHeartbeats 2^k*200000 in</code>, for the least value of <code>k</code> that works.</li>\n</ul>",
        "id": 368419627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687410822
    },
    {
        "content": "<p><code>count_heartbeats</code> has been super-useful for me for benchmarking changes to mathlib files. But is the following expected: on branch <code>kbuzzard-finsupp-module2</code> the declaration <code>Rep.diagonalHomEquiv_symm_apply</code> in the file <code>RepresentationTheory.GroupCohomology.Resolution</code>, <code>count_heartbeats in</code> is reliably informing me that it's taking over 500000 heartbeats, but <code>set_option maxHeartbeats 400000</code> reliably works fine. Is this expected, or is there some debugging needed, in which case shall I make a mwe?</p>",
        "id": 379478460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690545869
    },
    {
        "content": "<p>It <a href=\"https://github.com/leanprover-community/mathlib4/blob/e266a1ed2c7099a2b00b0b488cd25022e4c25c05/Mathlib/Util/CountHeartbeats.lean#L57\">doubles</a> on each pass. So 250000 doesn’t work but 500000 does here</p>",
        "id": 379488026,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690547552
    },
    {
        "content": "<p>So it’s expected</p>",
        "id": 379488265,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690547599
    },
    {
        "content": "<p>It is reporting that it takes 500,000, and telling me that I should hence use 800,000, and my observation is that 400,000 works fine.</p>",
        "id": 379489350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690547784
    },
    {
        "content": "<p>Oh sorry. Misread. Apologies</p>",
        "id": 379490536,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690548003
    },
    {
        "content": "<p>That is not as expected!</p>",
        "id": 379684172,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690601766
    },
    {
        "content": "<p>Ok let me try and reproduce on master</p>",
        "id": 379712293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690616199
    },
    {
        "content": "<p>Here's something which works on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Resolution</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Rep</span> <span class=\"n\">k</span> <span class=\"n\">G</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Rep</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">GroupCohomology.Resolution</span>\n\n<span class=\"c1\">-- set_option maxHeartbeats 400000 in -- works fine</span>\n<span class=\"n\">count_heartbeats</span> <span class=\"k\">in</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Used 505130 heartbeats, which is greater than the current maximum of 200000.</span>\n\n<span class=\"cm\">Try this: set_option maxHeartbeats 800000 in</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">diagonalHomEquiv_symm_apply'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">((</span><span class=\"n\">diagonalHomEquiv</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">Finsupp.single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"n\">A.ρ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">Fin.castSucc</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"n\">i.succ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">diagonalHomEquiv</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearEquiv.trans_symm</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.symm_symm</span><span class=\"o\">,</span> <span class=\"n\">LinearEquiv.trans_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">leftRegularHomEquiv_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Linear.homCongr_symm_apply</span><span class=\"o\">,</span> <span class=\"n\">Iso.trans_hom</span><span class=\"o\">,</span> <span class=\"n\">Iso.refl_inv</span><span class=\"o\">,</span>\n    <span class=\"n\">Category.comp_id</span><span class=\"o\">,</span> <span class=\"n\">Action.comp_hom</span><span class=\"o\">,</span> <span class=\"n\">MonoidalClosed.linearHomEquivComm_symm_hom</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ModuleCat.coe_comp</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ModuleCat.coe_comp</span><span class=\"o\">,</span> <span class=\"n\">Function.comp_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">diagonalSucc_hom_single</span><span class=\"o\">]</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">TensorProduct.uncurry_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.lift_apply</span><span class=\"o\">,</span> <span class=\"n\">Finsupp.sum_single_index</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">]</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Representation.linHom_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">LinearMap.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom.one_apply</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.one_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.llift_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.lift_apply</span><span class=\"o\">]</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Finsupp.sum_single_index</span><span class=\"o\">]</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_smul</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_smul</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I know the proof is horrible, it used to be a big simp block in mathlib3, but that's exactly what I'm <em>actually</em> working on :-)</p>",
        "id": 379723111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690619319
    },
    {
        "content": "<p>There's some noise with actual maxHeartbeats but 400000 reliably works fine on this declaration.</p>",
        "id": 379723294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690619388
    },
    {
        "content": "<p>The actual reason I care a little about this is that when trying to make speedup PRs one test is \"if I now take a declaration that has <code>set_option maxHeartbeats 2^n*default</code>, does my change enable me to reduce it to <code>2^(n-1)*default</code>?\". And this behaviour of <code>count_heartbeats</code> means that you might get false positives. Right now I'm mitigating against this by just changing the defaults on master to get a definitive answer as to whether a change has an effect. But to be honest there have been a bunch of changes recently that could affect heartbeats across mathlib, so it could well be the case that there are a bunch of files now in mathlib master with too-high (or possibly even unnecessary) maxHeartbeats anyway, so this is not something I'm too bothered about; I thought it was worth reporting though.</p>",
        "id": 379724203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690619627
    },
    {
        "content": "<p>I think the \"problem\" is that some things, notably typeclass synthesis, happen inside a <code>withCurrHeartbeats</code> call (which essentially means: inside this block use the current maxHeartbeats, but start counting from now). This effectively gives them an extension. </p>\n<p>(This <code>withCurrHeartbeats</code> call has been there <a href=\"https://github.com/leanprover/lean4/commit/f53e83b1823da2926c231dbb1f332e0610dad055#diff-89bf37fd63c5f8a1ed4078d54fd0954d7973e114fdf1a609815c577af827dec4\">since</a> Leo put in a maxHeartbeats option.)</p>\n<p>Thus I suspect <code>count_heartbeats</code> is correctly reporting the total elapsed heartbeats, but nevertheless nothing is being cut off even with a lower <code>maxHeartbeats</code>.</p>\n<p>If we want to do something, I'd probably start by seeing what breaks if you just remove the <code>withCurrHeartbeats</code> in <code>SynthInstance.main</code>.</p>",
        "id": 379751585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690626307
    }
]