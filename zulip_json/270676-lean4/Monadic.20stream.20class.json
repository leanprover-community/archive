[
    {
        "content": "<p>Sorry if I am getting something wrong here. But I notice the definition of the <code>Stream</code> class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Stream</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Where it doesn't seem to be possible to have a stream where the next function returns a custom monad.</p>\n<p>The <code>ForM</code> class does allow a custom monad, but it seems to me that the <code>ForM</code> class is less flexible. I can for example not think of any satisfying way of implementing zip with <code>ForM</code>, but please correct me if I'm wrong on this point.</p>\n<p>I would like a stream class parameterized over any monad, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">StreamM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">stream</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"bp\">×</span> <span class=\"n\">stream</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Or perhaps with <code>StateT</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">StreamM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span><span class=\"bp\">?</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">stream</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there any good reason why such a class doesn't exist? Or does it already exist?</p>\n<p>Thanks,<br>\nTage</p>",
        "id": 348482679,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1681224251
    },
    {
        "content": "<p>as I understand it, the current <code>Stream</code> class is designed for pure code. see <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Core.20Stream.20class</a> for some discussion</p>",
        "id": 348523580,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681234031
    },
    {
        "content": "<p><code>ForM</code> is definitely limited to internal iteration, which for <em>most</em> cases is fine, but which is not fine for e.g. zipping, as you pointed out. It's also a bit of an awkward class to use, since it is largely intended as a notational typeclass.</p>",
        "id": 348524651,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681234293
    },
    {
        "content": "<p><code>YatimaStdLib</code>, <code>LeanColls</code>, and <code>SciLean</code> all have their own iterator/iterable classes that are mostly equivalent. I don't think that any of them (?) let the <code>next</code> be in a monad, because you don't really need it for most applications. But I don't see any particular reason <em>not</em> to support it</p>",
        "id": 348525457,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681234548
    },
    {
        "content": "<p>There are many cases when it makes sence to put next inside a monad. For example a fallible iterator, or an an asynchronous stream, or both an fallible and asynchronous stream like IO.</p>",
        "id": 348536885,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1681238133
    },
    {
        "content": "<p>Totally. The only related work I know so far is yatima's <code>Straume</code> library &amp; typeclass, which is intended to model monadic and buffered streams</p>",
        "id": 348539717,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681239083
    },
    {
        "content": "<p>But it seems like that's also a WIP abstraction <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 348539751,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681239093
    },
    {
        "content": "<p>There's <code>ListM</code> in mathlib4.</p>",
        "id": 348545762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681241006
    },
    {
        "content": "<p>The straume library looks cool but I just want a simple stream that can be used in for loops.</p>\n<p>ListM exists in mathlib, but I don't really like the definition of it, in particular because it is marked unsafe. I am not an expert in Lean, but it sounds scary.</p>\n<p>I'll probably end up implementing my own StreamM class and create an instance of ForIn for it.</p>",
        "id": 348553807,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1681243816
    },
    {
        "content": "<p>Would be good to experiment with it and see if any issues come up. Seems reasonable to include in Std.</p>",
        "id": 348553998,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681243903
    },
    {
        "content": "<p>In the <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class\">earlier discussion</a> mentioned by <span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>, I arrived at the conclusion that the simplest and most versatile stream class is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Stream</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Option is not necessary since that's the special case <code>Stream σ (OptionT m) α</code>. In particular, the core stream class is just <code>Stream σ Option α</code>.</p>",
        "id": 348561325,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681246824
    },
    {
        "content": "<p>I come up with the following. Feel free to comment on my code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">StreamM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StreamM.forIn</span> <span class=\"o\">[</span><span class=\"n\">StreamM</span> <span class=\"n\">m</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span>\n  <span class=\"n\">repeat</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xsNew</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">StreamM.next</span> <span class=\"n\">xs</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"n\">bNew</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">bNew</span>\n        <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">xsNew</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">bNew</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">bNew</span>\n        <span class=\"n\">break</span>\n  <span class=\"n\">pure</span> <span class=\"n\">b</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">StreamM</span> <span class=\"n\">m</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ForIn</span> <span class=\"n\">m</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">forIn</span> <span class=\"o\">:=</span> <span class=\"n\">StreamM.forIn</span>\n</code></pre></div>\n<p>First I tried to implement <code>StreamM.forIn</code> as a recursive function, but it didn't worked at all. Even when I marked it <code>partial</code>, the compiler failed with some strange error. Then I looked into the definition of the repeat statement. In particular <code>Lean.Loop.forIn</code> and noticed that it is a partial definition which is assigned to <code>ForIn.forIn</code> which is not marked as partial. Is it legal to just escape partiality in that way?</p>",
        "id": 348563721,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1681247929
    },
    {
        "content": "<p>The issue is that, even though you have the <code>(b : β)</code> argument, Lean can't infer an instance of <code>Inhabited β</code> which is needed for partial. Another workaround is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">StreamM.forInAux</span> <span class=\"o\">[</span><span class=\"n\">StreamM</span> <span class=\"n\">m</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">StreamM.next</span> <span class=\"n\">xs</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">yield</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forInAux</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">StreamM.forIn</span> <span class=\"o\">[</span><span class=\"n\">StreamM</span> <span class=\"n\">m</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ForInStep</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">forInAux</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>You could even use <code>default</code> instead of the <code>b</code> argument but that's just piling on silliness on top of silliness.</p>",
        "id": 348566676,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681249413
    },
    {
        "content": "<p>Except for the order of arguments, I've been using this class in personal work for a while with few issues. I think it's a worthy addition to Std4 but there's no rush since development of Std4 has a backlog right now.</p>",
        "id": 348567060,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681249613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> <a href=\"#narrow/stream/270676-lean4/topic/Monadic.20stream.20class/near/348553807\">said</a>:</p>\n<blockquote>\n<p>ListM exists in mathlib, but I don't really like the definition of it, in particular because it is marked unsafe. I am not an expert in Lean, but it sounds scary.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ListM#doc\">docs4#ListM</a> explains why this is:</p>\n<blockquote>\n<p>The inductive construction is unsafe [because] we can build infinite objects</p>\n</blockquote>\n<p>In practice, this means you can't prove anything about operations using <code>ListM</code>; but nor you can prove much about <code>partial</code> either.</p>",
        "id": 348567849,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681249988
    },
    {
        "content": "<p>(Actually, my version of <code>StreamM</code> doesn't have the <code>[Monad m]</code> argument for <code>StreamM.next</code>. I don't think it makes a big difference though.)</p>",
        "id": 348567909,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681250025
    },
    {
        "content": "<p>Yeah. All of this does not work in proof context :P I did a bunch of experimenting in LeanColls with well-founded external iteration, and it's definitely possible, but we need better tools for monadic reasoning first (which is why I stopped working on LeanColls...)</p>",
        "id": 348568408,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681250265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> But isn't the issue just that pretty much all operations are inherently partial? Isn't unsafe a bit extreme then? At least, partial isn't as contagious.</p>",
        "id": 348568621,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681250363
    },
    {
        "content": "<p>note that lean doesn't let you state the inductive otherwise</p>",
        "id": 348568846,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681250450
    },
    {
        "content": "<p>Right! Because <code>m (Option α × ListM m α)</code>!</p>",
        "id": 348569229,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681250624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Monadic.20stream.20class/near/348567849\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> <a href=\"#narrow/stream/270676-lean4/topic/Monadic.20stream.20class/near/348553807\">said</a>:</p>\n<blockquote>\n<p>ListM exists in mathlib, but I don't really like the definition of it, in particular because it is marked unsafe. I am not an expert in Lean, but it sounds scary.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ListM#doc\">docs4#ListM</a> explains why this is:</p>\n<blockquote>\n<p>The inductive construction is unsafe [because] we can build infinite objects</p>\n</blockquote>\n<p>In practice, this means you can't prove anything about operations using <code>ListM</code>; but nor you can prove much about <code>partial</code> either.</p>\n</blockquote>\n<p>It's worse than that, and you are right to be worried about the <code>unsafe</code> marking. <code>partial</code> means that you can't prove anything about the object, but <code>unsafe</code> means that the object's existence itself could potentially lead to a contradiction, and that is in fact the case here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.ListM</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">PLift</span> <span class=\"o\">(</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Subsingleton</span> <span class=\"o\">(</span><span class=\"n\">ListM</span> <span class=\"n\">M</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">nomatch</span> <span class=\"n\">h</span> <span class=\"n\">ListM.nil</span> <span class=\"o\">(</span><span class=\"n\">ListM.cons</span> <span class=\"o\">⟨</span><span class=\"n\">inferInstance</span><span class=\"o\">⟩)</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Empty</span> <span class=\"bp\">×</span> <span class=\"n\">ListM</span> <span class=\"n\">M</span> <span class=\"n\">Empty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">⟨⟨</span><span class=\"n\">h</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">this</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"n\">this</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ListM.nil</span><span class=\"o\">,</span> <span class=\"n\">ListM.nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n    <span class=\"bp\">|</span> <span class=\"n\">ListM.cons</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ListM.cons</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">H</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 348579311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681255283
    },
    {
        "content": "<p>This is basically a variation on the proof that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"n\">Foo</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Foo</span>\n</code></pre></div>\n<p>is inconsistent by taking <code>M := Not</code> to get the liar paradox.</p>",
        "id": 348579541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681255391
    },
    {
        "content": "<p>Isn't <code>unsafe example : False</code> trivial to prove another way anyway though?</p>",
        "id": 348582744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681256932
    },
    {
        "content": "<p>IMO the takeaway is \"never use unsafe on proofs\".</p>",
        "id": 348582792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681256957
    },
    {
        "content": "<p>yes, but if <code>ListM</code> were allowed by the kernel without <code>unsafe</code>, it would lead to contradiction outside of <code>unsafe</code>.</p>",
        "id": 348584625,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1681258005
    },
    {
        "content": "<p>I guess the <code>StreamM</code> option is the best. I think this is an instance of: do you really need the monad <code>m</code> or do you just need the category of <code>m</code>-algebras?</p>",
        "id": 348585253,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1681258364
    },
    {
        "content": "<p>I would recommend that anyone interested in this look into Haskell's streaming libraries: <code>pipes</code>, <code>conduit</code>, <code>streaming</code>(?), <code>streamly</code>(?), etc. People have already explored a lot of this design space and there seem to be some non-obvious potential pitfalls.</p>",
        "id": 348767706,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1681313672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"544752\">@Tage Johansson</span>, <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span>, you might be interested to see that <code>ListM</code> is now safe! :-) <a href=\"https://github.com/leanprover-community/mathlib4/pull/3559\">!4#3559</a>.</p>",
        "id": 352237652,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682334181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/Monadic.20stream.20class/near/348561325\">said</a>:</p>\n<blockquote>\n<p>In the <a href=\"#narrow/stream/270676-lean4/topic/Core.20Stream.20class\">earlier discussion</a> mentioned by <span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span>, I arrived at the conclusion that the simplest and most versatile stream class is</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Stream</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>What about <code>next : StateT σ m α</code>? After all, that <code>next</code> is just the long-form definition of <code>StateT</code>.</p>",
        "id": 353007788,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682556981
    },
    {
        "content": "<p>What this highlights is that the most general monadic 'Stream' operation is actually just a monad equipped with a <code>next</code> or <code>continue</code> function that advances the internal iterator state one step (with operations like <code>get</code> and/or <code>set</code> to retrieve and/or manipulate said iterator).</p>",
        "id": 353008712,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682557171
    },
    {
        "content": "<p>That is, it might be better to describe the class as <code>MonadNext where next : m a</code> or the like (with the <code>StateT</code> version being a specialization).</p>",
        "id": 353009408,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682557316
    }
]