[
    {
        "content": "<p>Why are recursors for mutual inductive types the way they are? And how are they to be used?</p>\n<p>I've had a <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Use.20recursor.20within.20inductive.20def/near/248810473\">previous discussion</a> about some mutual inductive types. Fundamentally, all of the types I had to define were structures. But since it isn't possible to directly declare structures in a <code>mutual</code> block, I'm trying to add the niceties of structures manually.<br>\nMy problem now is that I have to use the recursors of those types, which (e.g.) look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Component.MutationOutput.rec</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">prtVals</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">newCns</span> <span class=\"n\">delCns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">newRtrs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Component.Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">delRtrs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"bp\">?</span><span class=\"n\">m.540</span> <span class=\"n\">newRtrs</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.536</span> <span class=\"o\">(</span><span class=\"n\">Component.MutationOutput.mk</span> <span class=\"n\">prtVals</span> <span class=\"n\">state</span> <span class=\"n\">newCns</span> <span class=\"n\">delCns</span> <span class=\"n\">newRtrs</span> <span class=\"n\">delRtrs</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">((</span><span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Ports.Role</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">triggers</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span> <span class=\"bp\">→</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span> <span class=\"bp\">→</span> <span class=\"n\">Component.MutationOutput</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">tsSubInDeps</span> <span class=\"o\">:</span> <span class=\"n\">triggers</span> <span class=\"bp\">⊆</span> <span class=\"n\">deps</span> <span class=\"n\">Ports.Role.in</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n            <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.536</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n              <span class=\"bp\">?</span><span class=\"n\">m.537</span> <span class=\"o\">(</span><span class=\"n\">Component.Mutation.mk</span> <span class=\"n\">deps</span> <span class=\"n\">triggers</span> <span class=\"n\">body</span> <span class=\"n\">tsSubInDeps</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">((</span><span class=\"n\">ports</span> <span class=\"o\">:</span> <span class=\"n\">Ports.Role</span> <span class=\"bp\">→</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">rcns</span> <span class=\"n\">muts</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"o\">(</span><span class=\"n\">Component.Mutation</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n            <span class=\"o\">(</span><span class=\"n\">nest</span> <span class=\"o\">:</span> <span class=\"n\">Component.Network</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n              <span class=\"bp\">?</span><span class=\"n\">m.541</span> <span class=\"n\">rcns</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.541</span> <span class=\"n\">muts</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.539</span> <span class=\"n\">nest</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.538</span> <span class=\"o\">(</span><span class=\"n\">Component.Reactor.mk</span> <span class=\"n\">ports</span> <span class=\"n\">state</span> <span class=\"n\">rcns</span> <span class=\"n\">muts</span> <span class=\"n\">nest</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"o\">([</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">LGraph.Edge</span> <span class=\"o\">(</span><span class=\"n\">NetworkEdge</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">nodes</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"o\">(</span><span class=\"n\">Component.Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n            <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">NetworkEdge</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.542</span> <span class=\"n\">nodes</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.539</span> <span class=\"o\">(</span><span class=\"n\">Component.Network.mk</span> <span class=\"n\">nodes</span> <span class=\"n\">edges</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n        <span class=\"bp\">?</span><span class=\"n\">m.540</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span>\n          <span class=\"o\">((</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">Component.Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n              <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Component.Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.538</span> <span class=\"n\">head</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.540</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.540</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n            <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Component.Mutation</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">Set.finite</span> <span class=\"o\">(</span><span class=\"n\">Set.image</span> <span class=\"n\">map</span> <span class=\"n\">Set.univ</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.543</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.541</span> <span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">:=</span> <span class=\"n\">finite</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n              <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Component.Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">Set.finite</span> <span class=\"o\">(</span><span class=\"n\">Set.image</span> <span class=\"n\">map</span> <span class=\"n\">Set.univ</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.544</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.542</span> <span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">:=</span> <span class=\"n\">finite</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n                <span class=\"bp\">?</span><span class=\"n\">m.543</span> <span class=\"n\">none</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">((</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Component.Mutation</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.537</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.543</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                    <span class=\"bp\">?</span><span class=\"n\">m.544</span> <span class=\"n\">Option.none</span> <span class=\"bp\">→</span>\n                      <span class=\"o\">((</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Component.Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.538</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.544</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                        <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Component.MutationOutput</span> <span class=\"bp\">?</span><span class=\"n\">m.534</span> <span class=\"bp\">?</span><span class=\"n\">m.535</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.536</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>This is the recursor for the following type (without showing the related mutual inductives):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MutationOutput</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n    <span class=\"o\">(</span><span class=\"n\">prtVals</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">newCns</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">delCns</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">newRtrs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">delRtrs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I was trying to write a simple accessor for <code>prtVals</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MutationOutput.prtVals</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">MutationOutput</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"n\">ι</span> <span class=\"n\">υ</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>But I don't know how to apply that wall of a recursor here.</p>",
        "id": 249587937,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629120367
    },
    {
        "content": "<p>You can write a getter more simply by using the equation compiler/a match statement.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk2</span> <span class=\"o\">:</span> <span class=\"n\">Char</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getter</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span>\n<span class=\"bp\">|</span> <span class=\"n\">B.mk1</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">B.mk2</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">getter</span>\n</code></pre></div>\n<p>If you can get away with using the derived <code>casesOn</code> or using pattern matching you're probably going to be better off since those don't implicate the other motives. As for why the recursor is complicated,  I think the answer is just \"that's what the type theory demands\".</p>",
        "id": 249682658,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1629181344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 249685024,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629183873
    },
    {
        "content": "<p>Note that termination checking for mutually recursive functions is not implemented yet, and neither is well-founded recursion. So you can only use the equation compiler for <code>partial</code> functions. If you want a function about which you can prove things, you need to use the recursor for now, and even then the function will be noncomputable (since the recursor is currently noncomputable). So my advice would be to avoid mutual inductives at all cost.</p>",
        "id": 249696211,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629193047
    },
    {
        "content": "<p>Is that only for recursive functions? The example I posted uses the equation compiler and seems to work, or at least it doesn't throw any errors.</p>",
        "id": 249698933,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1629195096
    },
    {
        "content": "<p>Yeah, this is only about termination checking.</p>",
        "id": 249699110,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629195215
    },
    {
        "content": "<p>Ok, thanks. That's good info.</p>",
        "id": 249699894,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1629195741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Mutual.20inductive.20rec/near/249696211\">said</a>:</p>\n<blockquote>\n<p>Note that termination checking for mutually recursive functions is not implemented yet, and neither is well-founded recursion. So you can only use the equation compiler for <code>partial</code> functions. If you want a function about which you can prove things, you need to use the recursor for now, and even then the function will be noncomputable (since the recursor is currently noncomputable). So my advice would be to avoid mutual inductives at all cost.</p>\n</blockquote>\n<p>Hmm, I don't really understand what you're saying yet. What's different about using the recursor vs. the equation compiler?</p>",
        "id": 249703546,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629198701
    },
    {
        "content": "<p>And can't I do well-founded recursion manually?</p>",
        "id": 249703612,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629198735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as unresolved.</p>",
        "id": 249703628,
        "sender_full_name": "Notification Bot",
        "timestamp": 1629198753
    },
    {
        "content": "<p>Take a look at this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n    <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">B</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">def</span> <span class=\"n\">constructorCountA</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.base</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">A.mk</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">constructorCountB</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">constructorCountB</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n    <span class=\"bp\">|</span> <span class=\"n\">B.mk</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">constructorCountA</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">constructorCountA₂</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">A.rec</span> <span class=\"o\">(</span><span class=\"n\">motive_1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">motive_2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"mi\">1</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">rec</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rec</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">rec</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rec</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>mutual</code> block does not compile. <code>constructorCountA₂</code> does not compile unless marked <code>noncomputable</code> (and I guess if marked <code>noncomputable</code>, it doesn't compile in a different sense). If you try to use wfrec, you'll notice (a) that all the definitions in <code>Init/WF.lean</code> are noncomputable and (b) that whatever well-founded relation you'd like to use may need to be defined by recursion itself. (Not sure about the last point.)</p>",
        "id": 249704565,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629199496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Mutual.20inductive.20rec/near/249704565\">said</a>:</p>\n<blockquote>\n<p><code>constructorCountA₂</code> does not compile unless marked <code>noncomputable</code> (and I guess if marked <code>noncomputable</code>, it doesn't compile in a different sense).</p>\n</blockquote>\n<p><code>constructorCountA₂</code> compiles fine for me.</p>",
        "id": 249704902,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629199765
    },
    {
        "content": "<p>Oh, that's what you mean by \"doesn't compile in a different sense\".</p>",
        "id": 249704940,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629199792
    },
    {
        "content": "<p>So if I'm fine with noncomputability, then the recursor approach is fine, isn't it?</p>",
        "id": 249705015,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629199824
    },
    {
        "content": "<p>I think so, yes, if you can stomach the resulting ugliness.</p>",
        "id": 249707752,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1629201591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Mutual.20inductive.20rec/near/249587937\">said</a>:</p>\n<blockquote>\n<p>Fundamentally, all of the types I had to define were structures. But since it isn't possible to directly declare structures in a <code>mutual</code> block, I'm t</p>\n</blockquote>\n<p>If you just have mutual nested structure, It is important to note that you can get away with avoiding <code>mutual</code> blocks altogether by making your types parametrized by the mutual type. See this <a href=\"#narrow/stream/270676-lean4/topic/Breaking.20up.20large.20mutual.20inductives/near/246507699\">Zulip thread</a> for an example of how this works.</p>",
        "id": 249771900,
        "sender_full_name": "Mac",
        "timestamp": 1629230830
    },
    {
        "content": "<p>For example, your mutual block from <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Use.20recursor.20within.20inductive.20def/near/248813293\">here</a> could have been written like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">BaseMutationOutput</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">prtVals</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span>\n  <span class=\"n\">state</span>   <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span>\n  <span class=\"n\">newCns</span>  <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n  <span class=\"n\">newRcns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BaseMutation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ι</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">BaseMutationOutput</span> <span class=\"n\">R</span> <span class=\"n\">ι</span>\n  <span class=\"n\">outPrtValsDepOnly</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"o\">{</span><span class=\"n\">o</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"bp\">∉</span> <span class=\"n\">deps</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prtVals.nth</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Reaction</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n    <span class=\"o\">(</span><span class=\"n\">core</span> <span class=\"o\">:</span> <span class=\"n\">BaseMutation</span> <span class=\"o\">(</span><span class=\"n\">Reaction</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">ι</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">noNewCns</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">core.body</span> <span class=\"n\">i</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">newCns</span> <span class=\"bp\">=</span> <span class=\"o\">[])</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">MutationOutput</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">BaseMutationOutput</span> <span class=\"o\">(</span><span class=\"n\">Reaction</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">ι</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Mutation</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">BaseMutation</span> <span class=\"o\">(</span><span class=\"n\">Reaction</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"n\">ι</span>\n</code></pre></div>",
        "id": 249773372,
        "sender_full_name": "Mac",
        "timestamp": 1629231484
    },
    {
        "content": "<p>[deleted]</p>",
        "id": 249814803,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629270443
    },
    {
        "content": "<p>[deleted]</p>",
        "id": 249815017,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629270612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>  What's the benefit of using the parameter-based approach? Because (e.g.) the recursor that I get for <code>Reactor</code> that way is still</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Reactor.rec</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">ports</span> <span class=\"o\">:</span> <span class=\"n\">Role</span> <span class=\"bp\">→</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">rcns</span> <span class=\"n\">muts</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"o\">(</span><span class=\"n\">Mutation</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">prios</span> <span class=\"o\">:</span> <span class=\"n\">PartialOrder</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"n\">nest</span> <span class=\"o\">:</span> <span class=\"n\">Network</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n            <span class=\"bp\">?</span><span class=\"n\">m.11185</span> <span class=\"n\">rcns</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11185</span> <span class=\"n\">muts</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11186</span> <span class=\"n\">nest</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11184</span> <span class=\"o\">(</span><span class=\"n\">Reactor.mk</span> <span class=\"n\">ports</span> <span class=\"n\">state</span> <span class=\"n\">rcns</span> <span class=\"n\">muts</span> <span class=\"n\">prios</span> <span class=\"n\">nest</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n  <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Mutation</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)))</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">Set.finite</span> <span class=\"o\">(</span><span class=\"n\">Set.image</span> <span class=\"n\">map</span> <span class=\"n\">Set.univ</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n        <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11187</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11185</span> <span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">:=</span> <span class=\"n\">finite</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n    <span class=\"o\">((</span><span class=\"n\">nodes</span> <span class=\"o\">:</span> <span class=\"n\">Finmap</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Connection</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11188</span> <span class=\"n\">nodes</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11186</span> <span class=\"o\">{</span> <span class=\"n\">nodes</span> <span class=\"o\">:=</span> <span class=\"n\">nodes</span><span class=\"o\">,</span> <span class=\"n\">edges</span> <span class=\"o\">:=</span> <span class=\"n\">edges</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n      <span class=\"bp\">?</span><span class=\"n\">m.11187</span> <span class=\"n\">none</span> <span class=\"bp\">→</span>\n        <span class=\"o\">((</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Mutation</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11189</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11187</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"o\">((</span><span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n              <span class=\"o\">(</span><span class=\"n\">finite</span> <span class=\"o\">:</span> <span class=\"n\">Set.finite</span> <span class=\"o\">(</span><span class=\"n\">Set.image</span> <span class=\"n\">map</span> <span class=\"n\">Set.univ</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11190</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11188</span> <span class=\"o\">{</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">map</span><span class=\"o\">,</span> <span class=\"n\">finite</span> <span class=\"o\">:=</span> <span class=\"n\">finite</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n            <span class=\"o\">((</span><span class=\"n\">deps</span> <span class=\"o\">:</span> <span class=\"n\">Role</span> <span class=\"bp\">→</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                <span class=\"o\">(</span><span class=\"n\">triggers</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span>\n                      <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span> <span class=\"bp\">→</span>\n                        <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span> <span class=\"bp\">→</span> <span class=\"n\">MutationOutput</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11191</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                      <span class=\"bp\">?</span><span class=\"n\">m.11189</span> <span class=\"o\">{</span> <span class=\"n\">deps</span> <span class=\"o\">:=</span> <span class=\"n\">deps</span><span class=\"o\">,</span> <span class=\"n\">triggers</span> <span class=\"o\">:=</span> <span class=\"n\">triggers</span><span class=\"o\">,</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">body</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n              <span class=\"bp\">?</span><span class=\"n\">m.11190</span> <span class=\"n\">Option.none</span> <span class=\"bp\">→</span>\n                <span class=\"o\">((</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11184</span> <span class=\"n\">val</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11190</span> <span class=\"o\">(</span><span class=\"n\">Option.some</span> <span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                  <span class=\"o\">((</span><span class=\"n\">prtVals</span> <span class=\"o\">:</span> <span class=\"n\">Ports</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                      <span class=\"o\">(</span><span class=\"n\">state</span> <span class=\"o\">:</span> <span class=\"n\">StateVars</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                        <span class=\"o\">(</span><span class=\"n\">newCns</span> <span class=\"n\">delCns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">×</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                          <span class=\"o\">(</span><span class=\"n\">newRtrs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                            <span class=\"o\">(</span><span class=\"n\">delRtrs</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                              <span class=\"bp\">?</span><span class=\"n\">m.11192</span> <span class=\"n\">newRtrs</span> <span class=\"bp\">→</span>\n                                <span class=\"bp\">?</span><span class=\"n\">m.11191</span>\n                                  <span class=\"o\">{</span> <span class=\"n\">prtVals</span> <span class=\"o\">:=</span> <span class=\"n\">prtVals</span><span class=\"o\">,</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"n\">newCns</span> <span class=\"o\">:=</span> <span class=\"n\">newCns</span><span class=\"o\">,</span> <span class=\"n\">delCns</span> <span class=\"o\">:=</span> <span class=\"n\">delCns</span><span class=\"o\">,</span>\n                                    <span class=\"n\">newRtrs</span> <span class=\"o\">:=</span> <span class=\"n\">newRtrs</span><span class=\"o\">,</span> <span class=\"n\">delRtrs</span> <span class=\"o\">:=</span> <span class=\"n\">delRtrs</span> <span class=\"o\">})</span> <span class=\"bp\">→</span>\n                    <span class=\"bp\">?</span><span class=\"n\">m.11192</span> <span class=\"o\">[]</span> <span class=\"bp\">→</span>\n                      <span class=\"o\">((</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                          <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                            <span class=\"bp\">?</span><span class=\"n\">m.11184</span> <span class=\"n\">head</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11192</span> <span class=\"n\">tail</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11192</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">tail</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n                        <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Reactor</span> <span class=\"bp\">?</span><span class=\"n\">m.11182</span> <span class=\"bp\">?</span><span class=\"n\">m.11183</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">?</span><span class=\"n\">m.11184</span> <span class=\"n\">t</span>\n</code></pre></div>",
        "id": 249819500,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629274276
    },
    {
        "content": "<p>the benefit is that the structures are structures, and you get the usual niceties of field projections and structure instances</p>",
        "id": 249819733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629274506
    },
    {
        "content": "<p>\"structure instances\"?</p>",
        "id": 249819831,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1629274600
    },
    {
        "content": "<p><code>{foo := 1, bar := 2}</code></p>",
        "id": 249819850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629274625
    }
]