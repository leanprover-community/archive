[
    {
        "content": "<p>I'm working with the <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Data/Json/Basic.html\">JSON library</a> and this probably has an obvious answer but why is a JSON object represented as an <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Data/RBMap.html#Lean.RBNode\">RBNode</a>? why do we need the dependent type there?</p>",
        "id": 381300120,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1691012504
    },
    {
        "content": "<p>RBNode is mostly a dependent type because we can, not because it is strictly necessary.</p>",
        "id": 381300321,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691012597
    },
    {
        "content": "<p>That is. RBNode is not written strictly for JSON. It is a general purpose RBtree  and we just happen to also use it for JSON.</p>",
        "id": 381300648,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691012737
    },
    {
        "content": "<p>is there a way to get rid of that dependency? I'm just trying to flatten an object to a list of its value fields, but the dependent type is making it annoying to get rid of the keys despite there being no actual dependency in the JSON object type (it's just <code>(Lean.RBNode String fun x =&gt; Lean.Json)</code>)</p>",
        "id": 381301305,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1691013064
    },
    {
        "content": "<p>Can you show me a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ? I can't quite imagine what you are doing</p>",
        "id": 381301539,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691013165
    },
    {
        "content": "<p>I think this should work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Json.toList</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Json</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 381302611,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691013664
    },
    {
        "content": "<p>For non-object json's this will give back an empty list.</p>",
        "id": 381302659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691013680
    },
    {
        "content": "<p>sure. I have something in JSON that looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n    <span class=\"s2\">\"key0\"</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"v0\"</span> <span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"o\">},</span>\n    <span class=\"s2\">\"key1\"</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n        <span class=\"s2\">\"v1\"</span> <span class=\"o\">:</span> <span class=\"mi\">0</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>trying to get something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span>\n  <span class=\"o\">{</span> <span class=\"s2\">\"v0\"</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"s2\">\"v1\"</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>assuming the first is parsed into <code>Lean.Json</code> and the second is a list of <code>Lean.Json</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">jsonToList</span> <span class=\"o\">(</span><span class=\"n\">json</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Lean.Json</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">json.getObj</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">obj</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.map</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">obj.toArray.toList</span> <span class=\"c1\">-- where i want something like this to typecheck</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 381303215,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1691013920
    },
    {
        "content": "<p>so use my <code>toList!</code> and map with <code>Prod.snd</code>.</p>",
        "id": 381303424,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691014007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/JSON.20object.20representation/near/381302611\">said</a>:</p>\n<blockquote>\n<p>I think this should work?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Json.toList</span><span class=\"bp\">!</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Json</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">e.fold</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>That does in fact work!! Thank you so much :)</p>",
        "id": 381303428,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1691014008
    }
]