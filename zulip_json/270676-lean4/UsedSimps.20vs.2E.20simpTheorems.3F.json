[
    {
        "content": "<p>What's the use of the <code>usedSimps</code> argument in <code>simp</code> and <code>dsimp</code>, and how does it differ from the <code>simpTheorems</code> field in the <code>Simp.Context</code>?</p>\n<p>Let me also explain what I'm trying to do, to avoid an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> situation: the <code>mono</code> tactic in mathlib3 unfolds the definitions <code>monotone</code> and <code>strict_mono</code> in theorems that it matches via <code>dsimp</code>.</p>\n<p>In the mathlib4 version that I'm writing, this would mean that <code>Monotone</code> and <code>StrictMono</code> ought to be unfolded (and the result telescoped) before we add a given theorem to the discrimination tree. (And that we ought to unfold them in goals we're trying to prove.)</p>\n<p>Is <code>dsimp</code> the way to go, or is there a better way to unfold these on the meta level than by using <code>dsimp</code> with <code>Monotone</code> and <code>StrictMono</code> somehow?</p>\n<p>(I'm also wondering about whether it'll then be legal to use the proofs of theorems that refer to <code>Monotone</code> in the type as-is, or whether I'll need to compose them with some unfolding lemma or something to get it to typecheck—technically a separate issue, but mentioning it just in case that impacts the discussion at this stage.)</p>",
        "id": 339220103,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677797589
    },
    {
        "content": "<p>(Also, I wonder if down the line it would be better to give the <code>def</code>s <code>Monotone</code>, <code>StrictMono</code>, <code>MonoOn</code>, etc. the attribute <code>@[mono]</code>—I could make it so that <code>def</code>s tagged <code>@[mono]</code> are handled differently than theorems (i.e. are unfolded by <code>mono</code> at the right stage). The mathlib3 handling seems a little ad hoc. But again, technically a separate discussion, and likely a post-port one at that...)</p>",
        "id": 339220588,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677797822
    },
    {
        "content": "<p><code>dsimp</code> to unfold stuff is fine but you should use the <code>neutralConfig</code> to make sure that it doesn't do anything else. See also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.unfold#doc\">docs4#Lean.Meta.unfold</a>. If you use <code>dsimp</code>, the output is always defeq to the input, so proofs of a <code>dsimp</code>ed type should also work for the non-<code>dsimp</code>ed type.</p>\n<p><code>UsedSimps</code> collects the theorems which were used by a particular <code>simp</code>/<code>dsimp</code> call. You can pass one to <code>simp</code> in case you want to call <code>simp</code> multiple times and combine the <code>UsedTheorems</code>. In your case, use <code>{}</code>.</p>\n<p><code>SimpTheorems</code> is the collection of theorems which <code>simp</code>/<code>dsimp</code> uses; by default, these are the theorems tagged with <code>@[simp]</code>.</p>",
        "id": 339302384,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677838857
    },
    {
        "content": "<p>Ah, that explains everything very well! Thanks so much! :)</p>",
        "id": 339443507,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677877491
    }
]