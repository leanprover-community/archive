[
    {
        "content": "<p>Naive question: the improvements we see result from </p>\n<ul>\n<li>less work trying to use the cached results with <code>transparency := default</code> or </li>\n<li>more in the cache or </li>\n<li>something else?</li>\n</ul>",
        "id": 396285748,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697116484
    },
    {
        "content": "<p>Comments on getting to a working mathlib:</p>\n<ul>\n<li>breakage often seemed to occur where there was already some breakage. For example, we might have had an <code>erw [xyz]</code> in the file and we have to change a <code>rw [xyz]</code> to a <code>erw [xyz]</code> somewhere else</li>\n<li>it seemed the files that improved the most suffered from \"timeout by 1000 cuts\". Lean had to do repeated defeq checks that were not slow themselves but were too much when aggregated.</li>\n<li>I don't remember breakage that wasn't at the heart a transparency change </li>\n<li>there is a lot of breakage overall and it will probably take significant effort to get mathlib right with these changes</li>\n</ul>",
        "id": 396287428,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697117073
    },
    {
        "content": "<p><del>Do we trace the the defeq caches at all?</del> <code>trace.Meta.isDefEq.cache</code> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 396292625,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697118732
    },
    {
        "content": "<p>All toolchains have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.cache</span><span class=\"o\">]</span> <span class=\"n\">cache</span> <span class=\"n\">true</span> <span class=\"n\">for</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>for Scott's example. The only difference is that <a href=\"https://github.com/leanprover/lean4/pull/2644\">lean4#2644</a> also has </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq.cache</span><span class=\"o\">]</span> <span class=\"n\">cache</span> <span class=\"n\">false</span> <span class=\"n\">for</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>I guess the tracing has not been refined by transparency?</p>",
        "id": 396294543,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697119268
    },
    {
        "content": "<p>Yes, this is where we would previously get a false positive in the cache</p>",
        "id": 396295243,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697119444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/lean4.232644/near/396285748\">said</a>:</p>\n<blockquote>\n<p>Naive question: the improvements we see result from </p>\n<ul>\n<li>less work trying to use the cached results with <code>transparency := default</code> or </li>\n<li>more in the cache or </li>\n<li>something else?</li>\n</ul>\n</blockquote>\n<p>Fewer cache resets, so more cache hits (but also fewer false positive cache hits as just mentioned)</p>",
        "id": 396295367,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697119481
    },
    {
        "content": "<p>Can I see what is generating that false positive? From which problem it arose?</p>",
        "id": 396295745,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697119568
    },
    {
        "content": "<p>How would it do that? The old code doesn't know that it is doing something wrong, and the new code doesn't know what the old code would have done. Your trace above looks like the best approach.</p>",
        "id": 396301097,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697121091
    },
    {
        "content": "<p>Sorry, I mean tracing the context on each cache addition.</p>",
        "id": 396302078,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697121385
    },
    {
        "content": "<p>I think you mean <code>trace.Meta.isDefEq</code>?</p>",
        "id": 396302138,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697121407
    },
    {
        "content": "<p>I didn't see a hit for <code>Option =?= WithTop</code> with that anywhere. I'll look again</p>",
        "id": 396302267,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697121446
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> It was in the snippet I copied into the PR comment</p>",
        "id": 396302550,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697121526
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">α</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 396302789,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697121599
    },
    {
        "content": "<p>Thanks for your indulgence. Next question: can I trace the transparency setting in addition?</p>",
        "id": 396303383,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697121783
    },
    {
        "content": "<p>Or here: why is <code>transparency := .default</code> here?</p>",
        "id": 396303656,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697121869
    },
    {
        "content": "<p>That's not a lot of context but most likely because we always compare implicit parameters at at least default</p>",
        "id": 396304120,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697122015
    },
    {
        "content": "<p>Thanks. That is helpful. I will squint at Scott's example</p>",
        "id": 396304230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697122048
    },
    {
        "content": "<p><del>Ok. Yes, then it seems to come from unifying using the <code>FunLike</code> instance. </del> This didn't change the behavior</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Embedding.toFun</span>\n</code></pre></div>",
        "id": 396304671,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697122184
    },
    {
        "content": "<p>This seems problematic </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coeTC</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Option.some</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 396306633,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697122779
    },
    {
        "content": "<p>With </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">WithTop</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n</code></pre></div>",
        "id": 396306930,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697122855
    },
    {
        "content": "<p>Adding </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">some</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Option.some</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Embedding.some</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">WithTop</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">WithTop.some</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>and changing to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">coeTC</span> <span class=\"o\">:</span> <span class=\"n\">CoeTC</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">WithTop</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">WithTop.some</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>gets <code>coeFn_mk</code> to fire in <code>simp</code> at the expense of <code>mem_map</code> needing a <code>rw</code> instead of being applied in <code>simp</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mem_map</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s.map</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 396310384,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697123838
    },
    {
        "content": "<p>This also probably explains why there was so much breakage in <code>CategoryTheory.Limits</code> and friends since similar things happen to define the indexing categories.</p>",
        "id": 396312037,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697124245
    },
    {
        "content": "<p>I think I made a similar comment in <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s other thread, that we needed a WithTop version of Embedding.some</p>",
        "id": 396324313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697127954
    },
    {
        "content": "<p>Do you know why <code>simp only [mem_map]</code> fails but <code>rw [mem_map]</code> succeeds here?</p>",
        "id": 396330204,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697130131
    }
]