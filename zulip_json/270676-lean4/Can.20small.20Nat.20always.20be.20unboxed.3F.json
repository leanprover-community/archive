[
    {
        "content": "<p>The <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html\">Lean FFI doc</a> explains how small <code>Nat</code> can be \"boxed\" rather than link to a bignum object. However, small <code>Nat</code> can also be represented as bignums. Is there an attempt in Lean to make sure that small <code>Nat</code> values are always boxed scalars rather than bignums? Right now, all my user-facing foreign functions are prepared to accept \"small bignums\" but I am tempted to \"cheat\" in my internal functions, provided I can rely on Lean to cooperate.</p>",
        "id": 327439609,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1676239359
    },
    {
        "content": "<p>It is not valid to the ABI to store small nats as bignums. Doing so will cause e.g. equality comparison between small 0 and big 0 to fail.</p>",
        "id": 327457158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255645
    },
    {
        "content": "<p>if you want a custom ABI for your internal functions, that's your business, but you can't pass those objects to unknown lean code</p>",
        "id": 327457186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255697
    },
    {
        "content": "<p>(also, small nats are \"unboxed\", meaning not behind a pointer indirection, not boxed.)</p>",
        "id": 327457267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676255771
    },
    {
        "content": "<p>The \"boxed\" terminology is a bit confusing when it comes to <code>Nat</code>. A small enough nat is not \"unboxed\" in the sense that it is not stored as a plain scalar. Rather, it is stored as a \"fake pointer\" with value <code>2x+1</code>, if that fits in a pointer. There is no confusion with actual Lean object pointers because of alignment. This is different from scalar values that can be passed as-is, not as \"fake pointers\".</p>",
        "id": 327462772,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1676260896
    },
    {
        "content": "<p>I guess my question is better stated as: can a <code>Nat</code> parameter fail <code>lean_is_scalar</code> even if the value is small enough?</p>",
        "id": 327463140,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1676261121
    },
    {
        "content": "<p>No. If it is less than <code>LEAN_MAX_SMALL_NAT</code> then it must be represented as a \"fake pointer\"</p>",
        "id": 327473614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676269661
    },
    {
        "content": "<p>for instance, adding big 0 + big 0 results in an assertion failure in <code>mpz_to_nat_core</code> due to its use in <code>lean_nat_big_add</code></p>",
        "id": 327474187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676269881
    }
]