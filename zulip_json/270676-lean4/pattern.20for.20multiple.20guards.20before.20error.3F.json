[
    {
        "content": "<p>In <code>MetaM</code> (well, <code>TacticM</code>) I want to write something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">...</span> <span class=\"c1\">-- easy check</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">...</span> <span class=\"c1\">-- harder check</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">...</span> <span class=\"c1\">-- hardest check</span>\n  <span class=\"n\">throwError</span> <span class=\"s2\">\"all checks passed :(\"</span>\n<span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">foo</span>\n</code></pre></div>\n<p>but, of course, this doesn't work the way I naively expect it to, because <code>throwError</code> is an error and thus gets caught by the <code>catch</code>.</p>\n<p>I can use a <code>.internal</code> exception, but that seems a bit hacky for what should be a \"nice\" procedure: try a bunch of things in order; if they fail, do one thing, if they succeed, do another. (A little worried about simply using <code>&amp;&amp;</code> in <code>if</code> because I'm not sure it short-circuits at the elaboration stage.)</p>\n<p>Any advice to write this cleanly?</p>",
        "id": 326291298,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675752074
    },
    {
        "content": "<p>I use the <code>try?</code> function for this</p>",
        "id": 326292119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675752590
    },
    {
        "content": "<p>it internally catches the exception and presents the result as an <code>Option</code></p>",
        "id": 326292274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675752674
    },
    {
        "content": "<p>also, <code>&amp;&amp;</code> does short-circuit</p>",
        "id": 326292324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675752714
    },
    {
        "content": "<p>oh, cool. this is the function in <code>Mathlib.Control.Basic</code>? so here the pattern would be something like...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">try</span><span class=\"bp\">?</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">...</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">...</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"checks passed :(\"</span>\n<span class=\"n\">foo</span>\n</code></pre></div>\n<p>up to syntax?</p>",
        "id": 326294143,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675753799
    },
    {
        "content": "<p>(unfortunately I think I'm upstream of that file unless I reorganize, which, wouldn't be the worst thing)</p>",
        "id": 326294233,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675753833
    },
    {
        "content": "<p>(oh, I think I can use <code>return</code> in my particular case, I think, since I do in fact want to <code>foo; return ()</code>)</p>",
        "id": 326296658,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1675755049
    }
]