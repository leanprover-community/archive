[
    {
        "content": "<p>Say I have a <code>Name</code> that corresponds to a typeclass, for instance <code>Semigroup</code>. What should I do to obtain each one of the elements of this typeclass, including the ones from which Semigroup extends? Currently I am doing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Meta</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">InductiveVal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.inductInfo</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">ConstructorVal</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ConstantInfo.ctorInfo</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">``</span><span class=\"n\">Semigroup</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"err 1\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">indVal</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">decl</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"err 2\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">ctor</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">indVal.ctors</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"err 3\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl2</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">ctor</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"err 4\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ctorVal</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">decl2</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"err 5\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"ctorVal.type = {ctorVal.type}\"</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>which gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ctorVal.type</span> <span class=\"bp\">=</span> <span class=\"k\">forall</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}}</span> <span class=\"o\">[</span><span class=\"n\">toMul</span> <span class=\"o\">:</span> <span class=\"n\">Mul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">],</span> <span class=\"o\">(</span><span class=\"k\">forall</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"n\">succ</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">toMul</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">toMul</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">toMul</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span> <span class=\"n\">toMul</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">Semigroup.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I also need the name of each term in the class (<code>mul_assoc</code> and <code>mul</code> in this case), which seems to me that I can't get with this approach</p>",
        "id": 372980763,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1688666231
    },
    {
        "content": "<p>Typeclasses are structures, have you seen <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.StructureInfo#doc\">docs#Lean.StructureInfo</a> ?</p>",
        "id": 372984194,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1688667005
    },
    {
        "content": "<p>Here's an example for getting the immediate fields: <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Metaprogramming.20a.20structure.20declaration/near/369266959\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Metaprogramming.20a.20structure.20declaration/near/369266959</a></p>",
        "id": 372985925,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688667462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Retrieving.20typeclass.20information.20with.20metaprogramming/near/372984194\">said</a>:</p>\n<blockquote>\n<p>Typeclasses are structures, have you seen <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.StructureInfo#doc\">docs#Lean.StructureInfo</a> ?</p>\n</blockquote>\n<p>I haven't, that's exactly what I needed :) so I should use <code>getStructureInfo?</code> to get this and then lookup the fields from <code>StructureInfo.fieldNames</code> on the environment</p>",
        "id": 372986158,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1688667534
    },
    {
        "content": "<p>yeah, that solves it, thanks!!</p>",
        "id": 372987032,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1688667745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes</span> has marked this topic as resolved.</p>",
        "id": 372987047,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688667747
    }
]