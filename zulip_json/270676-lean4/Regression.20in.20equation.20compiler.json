[
    {
        "content": "<p>Is this a known regression?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ind</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- all these are non-recursive</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ind</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The calls to <code>test</code> are clearly on smaller cases, and in Lean 3 the equation compiler is happy with it, but in Lean 4 this fails.</p>",
        "id": 400582161,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699292368
    },
    {
        "content": "<p>(I'm aware that I can tell it to use some lex ordering to make it work, but I'm specifically wondering why the default behaviour is weaker)</p>",
        "id": 400582483,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699292504
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">test</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>is enough to convince lean, no lex required!</p>",
        "id": 400582952,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699292689
    },
    {
        "content": "<p>True, but even less is needed to convince Lean 3 :) I had <code>termination_by test i j =&gt; (i, j)</code> in mind instead</p>",
        "id": 400583598,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699292949
    },
    {
        "content": "<p>Here's a simpler example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">test</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">1</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">2</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">for</span> <span class=\"n\">structural</span> <span class=\"n\">recursion</span>\n  <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">eliminate</span> <span class=\"n\">recursive</span> <span class=\"n\">application</span>\n    <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>",
        "id": 400593329,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699297143
    },
    {
        "content": "<p>Adding either <code>termination_by _ i j =&gt; (i, j)</code> or <code>termination_by _ i j =&gt; i + j</code> makes it go through.</p>",
        "id": 400593377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699297165
    },
    {
        "content": "<p>Even simpler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">test</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>The same <code>termination_by</code> lines make it go through.</p>",
        "id": 400593829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699297315
    },
    {
        "content": "<p>Wow, much shorter, thank you! Is this an intentional regression in the way things by structural recursion are compiled? Is there any reason behind it?</p>",
        "id": 400620135,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699308940
    },
    {
        "content": "<p>This is becoming my turf a bit, although I’m not the expert yet hat you deserve.<br>\nIs this a regression relative to lean3 or some prior version of lean4?<br>\nHow much of a pain is it for you?<br>\n“guessing lexicographic order” is something that we certainly want Lean to do. At some point. So it’s a matter of weighing this against other things that need doing :-)</p>",
        "id": 400621499,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699309557
    },
    {
        "content": "<p>It's a regression relative to lean 3 - the direct back-port to Lean 3 works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">test</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 400621657,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699309620
    },
    {
        "content": "<p>In case it's relevant, I think the key difference is that the well-founded relation that's inferred on <code>Σ' (i : ℕ), ℕ</code> in Lean 3 is Lex, <del>but in Lean 4 is induced by <code>PSigma.fst</code></del> Edit: That's not what Lean 4 is doing here</p>",
        "id": 400621791,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699309681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Regression.20in.20equation.20compiler/near/400621499\">said</a>:</p>\n<blockquote>\n<p>How much of a pain is it for you?</p>\n</blockquote>\n<p>It's not a huge pain, as Alex and I mentioned above a work-around isn't too bad. But I somewhat expected this to be a known issue already... I found a porting note with the same problem (actually basically the same as Kyle's: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.multichoose#doc\">docs#Nat.multichoose</a>), so I'm certainly not the only one to hit this</p>",
        "id": 400622620,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699310074
    },
    {
        "content": "<p>Noted at <a href=\"https://github.com/leanprover/lean4/issues/2837\">https://github.com/leanprover/lean4/issues/2837</a>, so we at least have a reference point to collect examples, real-world use cases, and generally cross-reference discussions. No promise of swift implementation implied.</p>",
        "id": 400623015,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699310298
    },
    {
        "content": "<p>I added some more examples there, it looks like this was spotted in a few porting notes already, but not collected, so I took the liberty of listing the obvious ones.</p>",
        "id": 400624548,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699311244
    },
    {
        "content": "<p>One example to highlight however is in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.merge#doc\">docs#List.merge</a>, where I would expect structural recursion to work for the definition (and it seems to in Lean 3), but the ported version takes the length of both lists and adds them.</p>",
        "id": 400624653,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699311324
    },
    {
        "content": "<p>The default <code>decreasing_by</code> tactic is relatively good at arithmetic, but doesn't attempt to backtrack and use assumptions, so tends to be terrible at lexicographic orders. Hence the changes Bhavik is observing from <code>(i,j)</code> to <code>i + j</code>.</p>\n<p>I've found that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">maxDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">10</span> <span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">Prod.Lex.left</span><span class=\"o\">,</span> <span class=\"n\">Prod.Lex.right''</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is often the key, with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">_root_.Prod.Lex.right''</span> <span class=\"o\">[</span><span class=\"n\">LT</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Prod.Lex</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">b₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ha</span> <span class=\"bp\">▸</span> <span class=\"n\">Prod.Lex.right</span> <span class=\"n\">a₁</span> <span class=\"n\">hb</span>\n</code></pre></div>",
        "id": 400626179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699312166
    },
    {
        "content": "<p>(This <code>solve_by_elim</code> assumes that you've <code>have</code>'d everything where needed. It needs to be souped up with a discharger that knows some arithmetic.)</p>",
        "id": 400626287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699312225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Regression.20in.20equation.20compiler/near/400626179\">said</a>:</p>\n<blockquote>\n<p>Hence the changes Bhavik is observing from <code>(i,j)</code> to <code>i + j</code>.</p>\n</blockquote>\n<p>Could you clarify this a little? It looks to me like <code>(i,j)</code> and <code>i + j</code> both fix the problem, and the problem is that <em>neither</em> is used by default. Whereas in Lean 3, <code>(i,j)</code> with lex is the default</p>",
        "id": 400627211,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699312866
    },
    {
        "content": "<p>Ah, you are right. Even to get lex ordering you need a termination_by clause.</p>",
        "id": 400627900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699313364
    },
    {
        "content": "<p>(My comment was about the further need for a backtracking <code>decreasing_by</code> tactic even once you've got lex ordering.)</p>",
        "id": 400627936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699313388
    },
    {
        "content": "<p>I see! So you're saying that even if it did get the right ordering, that wouldn't automatically fix all the porting notes since a <code>decreasing_by</code> would also need to be added? Or is it that the porting notes (and this example) would be fine, but more complicated examples would probably need a cleverer method to close the goals.</p>",
        "id": 400628070,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1699313470
    }
]