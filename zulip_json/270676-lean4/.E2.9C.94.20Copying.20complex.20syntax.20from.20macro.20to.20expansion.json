[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"select \"</span> <span class=\"n\">goals</span><span class=\"o\">:(</span><span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"s2\">\"-\"</span> <span class=\"n\">noWs</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">_tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span>\n    <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">goals</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"c1\">-- dummy implementation</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">select'</span><span class=\"o\">)</span> <span class=\"s2\">\"select' \"</span> <span class=\"o\">(</span><span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"s2\">\"-\"</span> <span class=\"n\">noWs</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">select'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">select'</span> <span class=\"bp\">$</span><span class=\"n\">goals</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">select</span> <span class=\"bp\">$</span><span class=\"n\">goals</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">any_goals</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- \"unexpected syntax\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">select'</span> <span class=\"n\">right</span> <span class=\"bp\">-</span><span class=\"n\">left</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>How can I write <code>select'</code> here so that it expands to the corresponding application of <code>select</code> no matter how <code>goals</code> was parsed?<br>\nThe current version only defines the expansion when <code>goals</code> is a single identifier. Using <code>$[$goals]*</code> instead defines it when <code>goals</code> is a list of identifiers. Using <code>$[-$goals]*</code> defines it when <code>goals</code> is a list of identifiers, all of which have the \"-\" prefix.<br>\nUsing <code>$[$[-]? $goals]*</code> in the pattern actually matches against any use of <code>select'</code>, but I don't know how to substitute the \"-\" prefixes into the expansion.</p>\n<p>How can I define the expansion so it works for any use of <code>select'</code>? <code>goals</code> is matched in the exact same way by both the <code>select</code> and <code>select'</code> syntax, so it should be possible to directly substitute it.</p>",
        "id": 347613914,
        "sender_full_name": "Raghuram Sundararajan",
        "timestamp": 1680860377
    },
    {
        "content": "<p>Creating a separate syntax category for the arguments to <code>select</code>/<code>select'</code> seems to solve the issue. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">signed_ident</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">signed_ident</span>\n<span class=\"n\">syntax</span> <span class=\"n\">atomic</span><span class=\"o\">(</span><span class=\"s2\">\"-\"</span> <span class=\"n\">noWs</span><span class=\"o\">)</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">signed_ident</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"select \"</span> <span class=\"n\">goals</span><span class=\"o\">:</span><span class=\"n\">signed_ident</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">_tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span>\n    <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"n\">goals</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"c1\">-- dummy implementation</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">select'</span><span class=\"o\">)</span> <span class=\"s2\">\"select' \"</span> <span class=\"n\">signed_ident</span><span class=\"bp\">*</span> <span class=\"s2\">\" =&gt; \"</span> <span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">select'</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">select'</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">goals</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">select</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">goals</span><span class=\"o\">]</span><span class=\"bp\">*</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">any_goals</span> <span class=\"bp\">$</span><span class=\"n\">tac</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">select'</span> <span class=\"n\">right</span> <span class=\"bp\">-</span><span class=\"n\">left</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">skip</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">trivial</span>\n<span class=\"c1\">-- #[(signed_ident_ `right), («signed_ident-__» \"-\" `left)]</span>\n</code></pre></div>",
        "id": 347672325,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1680876130
    },
    {
        "content": "<p>Thanks! In fact, a syntax category seems to be unnecessary - even<br>\n<code>syntax signed_ident := (atomic(\"-\" noWs))? ident</code><br>\nhas the same effect (and also allows matching on the syntax using <code>`(signed_ident| ...)</code>, which I did not know.)</p>",
        "id": 347798003,
        "sender_full_name": "Raghuram Sundararajan",
        "timestamp": 1680934522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"450003\">Raghuram Sundararajan</span> has marked this topic as resolved.</p>",
        "id": 347798016,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680934540
    }
]