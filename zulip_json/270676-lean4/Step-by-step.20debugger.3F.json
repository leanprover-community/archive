[
    {
        "content": "<p>There isn't yet any step-by-step debugger for Lean 4 like I'm used to from C# and Python, is there?</p>\n<p>I'm a little tempted to try to write one myself. I'll work on that next time I have a few thousand hours of spare time <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 371573947,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688245761
    },
    {
        "content": "<p>Such a debugger does not exist yet no. Given the gigantic difference between the input code and what actually gets executed you would have to add quite a lot of changes to the compiler itself to get it even close to feasible to implmeent.</p>",
        "id": 371574943,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688246183
    },
    {
        "content": "<p>honestly even a step debugger on the LCNF of some expression seems useful</p>",
        "id": 371575829,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688246662
    },
    {
        "content": "<p>There used to be a debugger for lean 3 IR, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vm_monitor\">docs3#vm_monitor</a></p>",
        "id": 371577910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688247488
    },
    {
        "content": "<p>I would imagine it'd be a lot easier to add a debugger to the reducer than to write one that can attach to compiled code. (Of course, \"a lot easier\" in this case would still be a pretty enormous undertaking.)</p>",
        "id": 371580591,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688248807
    },
    {
        "content": "<p>It should be relatively easy to debug the generated C code</p>",
        "id": 371580828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688248909
    },
    {
        "content": "<p>anything else will need to be written from scratch</p>",
        "id": 371581050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688248999
    },
    {
        "content": "<p>But the C is way less intelligible than LCNF, no? I generally struggle to trace what's happening at the C level.</p>",
        "id": 371582209,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688249531
    },
    {
        "content": "<p>That depends  on which level of LCNF you mean. The last one (lambda  RC) is basically almost C already,  the C translation step from there is mostly replacing constructors of the expression type with calls to runtime functions etc. If  you go a little  higher up it becomes more  readable but I would still doubt the vast  majority of users would be  able to decipher things based on it that are more useful than inserting debug prints or gdb-ing the C code. I  do agree it might be a useful feature for experts though</p>",
        "id": 371582673,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688249818
    },
    {
        "content": "<p>what level is output by <code>trace.compiler.result</code>?</p>",
        "id": 371582828,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688249905
    },
    {
        "content": "<p>lambda RC</p>",
        "id": 371582842,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688249926
    },
    {
        "content": "<p>I find that version infinitely more readable than C. though I do tend to write rather cursed code.</p>",
        "id": 371582861,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688249936
    },
    {
        "content": "<p>I agree that lambda RC is easier to read than the C code. To me this is largely due to the difficult in 1) isolating the relevant function in the C code and 2) the less than ideal formatting of said C code.</p>",
        "id": 371583316,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688250225
    },
    {
        "content": "<p>A debugger that could translate from C code back to lambda RC would already be an amazing feature.</p>",
        "id": 371583395,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688250264
    },
    {
        "content": "<p>Furthermore, even just being able to add function breakpoints in VSCode and then breaking on said function in the lambda RC (or even just C code) would be excellent.</p>",
        "id": 371583666,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688250404
    },
    {
        "content": "<p>In short, even a single feature debugger I think would be a massive boon. It can then just be extended with more features as time progresses.</p>",
        "id": 371583832,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688250484
    },
    {
        "content": "<p>Also preserving variable names in the C code would be a massive improvement</p>",
        "id": 371588818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688253511
    },
    {
        "content": "<p>I would attribute the majority of readability loss in both the C code and the old compiler IR to loss of variable names</p>",
        "id": 371588887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688253557
    },
    {
        "content": "<p>(I'll just drop a tangential link to DAP, which is the debugger protocol equivalent for LSP, so if a debugger ever exists, if it implements DAP then yay all the editors get immediate fun ways to interact with it -- <a href=\"https://microsoft.github.io/debug-adapter-protocol/\">https://microsoft.github.io/debug-adapter-protocol/</a> )</p>",
        "id": 371629062,
        "sender_full_name": "Julian Berman",
        "timestamp": 1688275547
    },
    {
        "content": "<p>last I checked, DAP was not nearly as well adopted as LSP though, and still quite a ways from real debuggers in functionality (VSCode's debugger is still quite lacking compared to visual studio)</p>",
        "id": 371631292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688276858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> True,  but something is still better than nothing, and would still likely serve as a good starting point.</p>",
        "id": 371635173,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688278850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Step-by-step.20debugger.3F/near/371588818\">said</a>:</p>\n<blockquote>\n<p>Also preserving variable names in the C code would be a massive improvement</p>\n</blockquote>\n<p>With the new code generator we have put in a bit of effort to preserve original variable names (although there are of course many auxiliary ones introduced still) so once we eventually end up having that working you might get that ^^</p>",
        "id": 371688561,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1688295183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Step-by-step.20debugger.3F/near/371688561\">said</a>:</p>\n<blockquote>\n<p>With the new code generator we have put in a bit of effort to preserve original variable names</p>\n</blockquote>\n<p>Yeah, the new code generator does a great job persevering more names! One major problem, though, is that too many functions do not have user-defined parameter names (e.g., <code>EStateM.Result.ok/error</code> and various monads). To help with this in the future, linting missing names (and recommending naming all parameters) may be helpful going forward.</p>",
        "id": 371746032,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688309225
    },
    {
        "content": "<p>I think that issue is about overriding a named variable with an unnamed one. There is no \"good\" name you can give the argument of <code>Result.ok</code>, you need to get the name from the function binder in the <code>bind</code> application it came from</p>",
        "id": 371781142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688319505
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Step-by-step.20debugger.3F/near/371781142\">said</a>:</p>\n<blockquote>\n<p>I think that issue is about overriding a named variable with an unnamed one. There is no \"good\" name you can give the argument of <code>Result.ok</code>, you need to get the name from the function binder in the <code>bind</code> application it came from</p>\n</blockquote>\n<p>No, I meant in e.g., auto-generated compiled match statements where there arguments to <code>Result.ok</code> and <code>Result.error</code> are all auto-generated <code>a.x</code> rather than more informative letterings like <code>e</code> and <code>s</code> or even fuller names like <code>res</code>, <code>err</code>, and <code>st</code> (as one would choose on a user level). It makes it hard to remember which <code>a.x</code> is the error/result and which is the state, for example. Reading compiled monadic code would become much easier with just some more informative letters other than the ubiquitous <code>a.x</code>.</p>",
        "id": 371782962,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688320156
    },
    {
        "content": "<p>This is also brings up the question of whether <code>a</code> is the best name for an auto-generated variable names, as it is frequently also used in hand-written code, maybe a some rare Unicode letter should be used instead for auto-generated names to reduce clashes (and make it clear what names are auto-generated).</p>",
        "id": 371783382,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688320324
    },
    {
        "content": "<p>In Lean 3 there was the innovation of putting an inverted hat on the letter <code>a</code> for that reason. It even earned a Zulip emoji: <img alt=\":ahat:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/19435.png\" title=\"ahat\"></p>",
        "id": 371796235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688324980
    }
]