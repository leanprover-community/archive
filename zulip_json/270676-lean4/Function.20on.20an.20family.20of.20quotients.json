[
    {
        "content": "<p>Is there a nice way to lift functions that operate on indexed families of quotients? My current code uses both classical and unsafe, and is very cumbersome to use once unfolded.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Quot</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">liftF.impl</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">unsafeCast</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">@[implemented_by liftF.impl]</span>\n<span class=\"kd\">def</span> <span class=\"n\">liftF</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_rep</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">liftF_mk</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">liftF</span> <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mk</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.choose_spec</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">exists_rep</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>Also, there there a way to write <code>c</code> as a <code>variable</code>? It seems that <code>include</code> from Lean 3 no longer works.</p>",
        "id": 339576334,
        "sender_full_name": "Parth Shastri",
        "timestamp": 1677944360
    },
    {
        "content": "<p>Yes, we have something like this in Lean 3, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient.fin_choice\">docs#quotient.fin_choice</a></p>",
        "id": 339609649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677961981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib-port-status/file/data/fintype/quotient\">port-status#data/fintype/quotient</a> links to a relevant discussion</p>",
        "id": 339609681,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677962006
    },
    {
        "content": "<p><a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/quotient.2Elift_on_family/near/286096782\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/quotient.2Elift_on_family/near/286096782</a></p>",
        "id": 339609698,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677962017
    }
]