[
    {
        "content": "<p>Here is a little puzzle: Using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.transform#doc\">docs#Lean.Meta.transform</a>, given a function name <code>f</code>, eta-expand every occurrence of <code>fn</code> that does not already have two arguments.</p>\n<p>This means to also eta expand a single <code>f</code> as in <code>(id f)</code>. But it seems neither with <code>pre</code> nor with <code>post</code>, when looking at a <code>.const f</code>, I can easily tell whether it is part of an application (and my not need to be eta-expanded), or if it is really a lone occurrence (which I do have to eta-expand).</p>",
        "id": 402671738,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700218762
    },
    {
        "content": "<p>You can do it at the cost of not being able to share the cache between nested invocations in some cases. in <code>pre</code>, check if it is an application of <code>fn</code>. If so, recursively call <code>transform</code> on the arguments of <code>fn</code>, eta expand if there are fewer than two arguments, and then return <code>.done</code>. Otherwise return <code>.continue</code>.</p>",
        "id": 402700050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700228029
    },
    {
        "content": "<p>Hmm, true, but not quite satisfying, due to the missed cache and loss of elegance. For now I just added a flag to <code>transform</code> to not call <code>post</code> twice on  <code>f a b</code>, I'll see if that's acceptable during code review.</p>",
        "id": 402702463,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700228864
    },
    {
        "content": "<p>another possibility is to call <code>transform.visit</code> directly and do the setup outside / in a <code>transform.run</code> function</p>",
        "id": 402702715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700228944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Here's the mathlib implementation of eta expansion for the <code>eta_expand</code> tactic: <a href=\"https://github.com/leanprover-community/mathlib4/blob/a2ca43e594f2f3d1ccbb2cf178fd5800abc61321//Mathlib/Tactic/DefEqTransformations.lean#L180\">https://github.com/leanprover-community/mathlib4/blob/a2ca43e594f2f3d1ccbb2cf178fd5800abc61321//Mathlib/Tactic/DefEqTransformations.lean#L180</a></p>\n<p>While I'm not sure the algorithm is completely correct, it uses <code>transform</code> in the way Mario suggested.</p>",
        "id": 402747679,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700243454
    }
]