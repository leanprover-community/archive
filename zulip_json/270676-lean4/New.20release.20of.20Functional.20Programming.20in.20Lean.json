[
    {
        "content": "<p>The second release of <em>Functional Programming in Lean</em> is up. This release completes Chapter 1. As always, feedback is more than welcome here or via email.</p>\n<p>I hope you find it useful! It's available at <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a> .</p>",
        "id": 288866895,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1657228455
    },
    {
        "content": "<p>Hello again! The third release is up. It contains <a href=\"https://leanprover.github.io/functional_programming_in_lean/hello-world.html\">Chapter 2</a>, which describes <code>IO</code>, <code>lake</code>, and introduces <code>do</code>-notation.</p>",
        "id": 292333157,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1659897377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> One note: the <code>feline</code> example could use <code>lake new feline exe</code> instead to generate just an executable configuration.</p>",
        "id": 292346818,
        "sender_full_name": "Mac",
        "timestamp": 1659914030
    },
    {
        "content": "<p>I love the way you introduce IO actions, no monoids in the category of endofunctors, no algebraic effects; 10/10 :).<br>\nA few very minor observations:<br>\na) 2.1 - Anatomy of a Greeting</p>\n<blockquote>\n<p>Because this action doesn't read any interesting information from the environment in the process of emitting the string, IO.println has type String → IO Unit</p>\n</blockquote>\n<p>I don't think it's immediately obvious as to what the type would be if it did indeed read anything interesting from the environment, but perhaps it's just my inability to process the sentence properly :).</p>\n<p>b) 2.2 - IO Actions vs Values</p>\n<blockquote>\n<p>It's structure....</p>\n</blockquote>\n<p>Just a typo from 'Its structure'.</p>\n<p>c) 2.4 - Main<br>\nThis is more so a nitpick and realistically completely irrelevant in a Lean book, but in specifically C (and rules are different in C++):<br>\n0) you'll never see a standard-compliant <code>main</code> that returns void unless you want to rely on <code>/* or in some other implementation-defined manner. */</code> in the standard<br>\n1) technically, any function in C that does not specify <code>void</code> in the parameter list takes any number of arguments; as such, especially main should be explicitly labelled as <code>int main(void)</code> if you want the one that takes no arguments</p>",
        "id": 292347610,
        "sender_full_name": "František Silváši",
        "timestamp": 1659915151
    },
    {
        "content": "<p>The counter worker/cook analogy is really nice but it threw me off a bit upon first reading and I had to do a mental \"flip\" when I reached the conclusion.</p>\n<p>Once I got to the end of the paragraph it was clear the counter worker is the IO monad that interacts with the real world but my expectation reading initially was exactly the opposite:  I, the client, am interacting with the nice/clean/polite and friendly counter worker Lean (it also made sense in the sense of requesting what I want, i.e. being declarative) while, behind the scenes, the cook (the runtime) does all the \"heavy lifting\".</p>",
        "id": 292356015,
        "sender_full_name": "Tom",
        "timestamp": 1659927625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/292346818\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> One note: the <code>feline</code> example could use <code>lake new feline exe</code> instead to generate just an executable configuration.</p>\n</blockquote>\n<p>Thanks! I'll consider revising it. I think there's some value in people editing the file, just to get the experience, but it's also nice to show the available conveniences.</p>",
        "id": 292367191,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1659942496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364929\">@František Silváši</span> I've created an issue on my tracker to make sure I follow up on these points - they'll be fixed in the next release. Thank you! And given that C has a strong culture of reading and adhering to standards, rather than just what implementations actually do, I think it's important to respect it so as not to lose C programmers who are less sold on Lean. This feedback is very valuable (as are the other points), so thank you very much!</p>",
        "id": 292367900,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1659943073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"515083\">@Tom</span> thanks for the feedback! I'll think a bit more about that analogy.</p>",
        "id": 292367996,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1659943125
    },
    {
        "content": "<p>I like the analogy and I read it correctly from the beginning but of course I already know about monads. David, maybe you could simply insert a stronger hint at the very beginning clarifying who is the cook and who is the counter worker.</p>",
        "id": 292380672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659952214
    },
    {
        "content": "<p>A couple of comments on chapter 1:</p>\n<ul>\n<li>1.6 Polymorphism-Option<br>\nMight be worth mentioning coercion allows the body of <code>List.head?</code> to be written</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"def\"><pre><span></span><code>  match xs with\n  | [] =&gt; none\n  | y :: _ =&gt; y\n</code></pre></div>\n<p>and Lean infers the <code>y</code> really means <code>some y</code>. This may be a little advanced for an introductory text, but it is the sort of thing that could catch out newcomers from languages where the <code>some</code> is mandatory. Perhaps it would be better in the <code>Additional Conveniences</code> section.</p>\n<ul>\n<li>1.7 Additional Conveniences<br>\nWould be worth mentioning that match cases can be combined when the expression on the RHS is the same, so the <code>halve</code> example  can be written:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">halve</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">halve</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 293342718,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1660452493
    },
    {
        "content": "<p>Another couple of things it would be good to cover:</p>\n<ul>\n<li>The difference between <code>=</code> and <code>==</code> (even if just to note <code>==</code> is used for the moment and <code>=</code> will be explained in <code>From Programming to Proving</code>).</li>\n<li>Explanation of the <code>.name</code> notation where Lean infers the namespace from context (I see this in a couple of the examples and in Zulip topics, but not in the documentation yet that I have observed).</li>\n</ul>",
        "id": 293360228,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1660469841
    },
    {
        "content": "<p>Note that we would usually write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">halve</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">halve</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Not splitting the combined case out over multiple lines</p>",
        "id": 293360775,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660470213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span> thanks for the feedback!</p>\n<blockquote>\n<p>Lean infers the <code>y</code> really means <code>some y</code></p>\n</blockquote>\n<p>I'm intentionally avoiding all coercions until the feature can be explained properly. Lean has so many features that their interactions can be quite overwhelming even for people with deep experience with proof assistants and functional programming, and this text is intended for readers with zero experience in either. I need to be careful in how much they get in chapter 1, but coercions are absolutely on the radar for later in the book, and this is a good example.</p>",
        "id": 293376955,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1660479930
    },
    {
        "content": "<p>I've created issues in my repository tracking each of the points that you brought up. I think that Ch1 is already longer than it should be, but it's certainly important to get to all of them at some point. Thanks again!</p>",
        "id": 293377344,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1660480153
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> Thanks for the response. The book is shaping up nicely. I think it will be an invaluable resource for Lean programming.<br>\n<span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> That formatting makes sense. Is there, or is there planned, a Lean style guidelines, or even an automated code formatter?</p>",
        "id": 293447680,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1660517626
    },
    {
        "content": "<p>The plan is to eventually get the delaborator to a point where it can act as a pretty printer for Lean. However right now it isn't even guaranteed to produce things that typecheck/evaluate to the same thing as their input properly so that is still a long way to go but we have people investigating and working on the issue right now.</p>",
        "id": 293447805,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1660517763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364929\">@František Silváši 🦉</span> Thanks again for the comment! I've fixed the issues you identified on my main branch, and the corrections will find their way into the imminent release.</p>",
        "id": 299346723,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1663435525
    },
    {
        "content": "<p>It's that time again! There's a fresh release of <em>Functional Programming in Lean</em> available for your reading pleasure. This time around, the first half of the type class chapter is available. It's later than usual this month due to my summer vacation and ICFP, but releases will be returning to the usual schedule next month.</p>\n<p>As usual, feedback is welcome both here and in my email. Thank you for reading it!</p>",
        "id": 299464860,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1663526019
    },
    {
        "content": "<p>Thank you!  </p>\n<p>Very minor nit:   On the first page,  you write:</p>\n<blockquote>\n<p>an instance is created that contains an implementation of each operation for the new type. For <strong>instance</strong>, a type class named Add</p>\n</blockquote>\n<p>I wonder if in this case the second instance <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> of the world \"instance\" (emphasis mine) would be better served with \"example\" for clarity's sake.  (This also re-occurs later in the chapter)</p>",
        "id": 299491203,
        "sender_full_name": "Tom",
        "timestamp": 1663553244
    },
    {
        "content": "<p>Good description of type classes.</p>\n<p>A few minor typos:</p>\n<ul>\n<li>3.1, Overloaded Addition,  second paragraph. \"While an understanding the full...\" -&gt; \"While an understanding <em>of</em> the full...\"</li>\n<li>3.1, Overloaded Multiplication, first paragraph. \"...with the same time\" -&gt; \"...with the same <em>type</em>\"</li>\n<li>3.1, Literal Numbers, second last paragraph. Missing '.' at end of the second sentence, immediately before 'Just'.</li>\n<li>3.2, Methods and Implicit Arguments, first paragraph. \"because the declaring a\" -&gt; \"because declaring a\"</li>\n<li>3.2, Methods and Implicit Arguments, third paragraph. \"\"In order for the Lean\" -&gt; \"In order for Lean\"</li>\n<li>3.3, Heterogenous Overloadings, second paragraph. \"For instance, given the above two instances...\" -&gt; \"Given the above two instances...\". The repeated use of 'instance' seems awkward.</li>\n</ul>",
        "id": 299493118,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1663555230
    },
    {
        "content": "<p>This reads very coherently, I genuinely like this.</p>\n<p>I have two notes that are of stylistic nature and can be safely disregarded :).<br>\n0) In 3.1. - <code>open Plus (plus)</code> the 'selective export of plus' feature is first introduced (unless I am misremembering!) here, which is a section 'Classes and Instances'; it feels to me a little bit buried here if this is to be the first exposition to the feature. Maybe its first mention in 2.3. 'Libraries and Imports' might be a nicer place.</p>\n<p>1) In 3.1. - 'Conversion to Strings', in the context of:</p>\n<blockquote>\n<p>Additionally, if a type has a ToString instance, then it can be used to display the result of #eval...</p>\n</blockquote>\n<p>This is, to me, begging for a short explanation of the difference between <code>Repr</code> and <code>ToString</code>, but I can also imagine this being elsewhere (or not present at all :)), as there are admittedly better contexts for this.</p>\n<p>Again, this is very much a 'personal take', do feel more than encouraged to ignore this, there's nothing wrong with either of these :).</p>",
        "id": 299715956,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1663667505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span>  I've fixed all those in the latest version, thanks! And sorry it took me a bit to get back to you here.</p>",
        "id": 306877412,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667069666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364929\">@František Silváši 🦉</span> These are very good suggestions that I've put into the book's issue tracker.</p>",
        "id": 306877451,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667069694
    },
    {
        "content": "<p>Halloween is approaching, but there's no need to be afraid of proofs or of type classes.</p>\n<p>A new release of <em>Functional Programming in Lean</em>  is up, containing the rest of the chapter on type classes as well as updates based on your excellent feedback. This release also contains a short interlude that lightly introduces the idea of propositions, proofs, and truth, because they were really necessary in order to explain things like <code>GetElem</code>.</p>\n<p>As always, your feedback is much appreciated.</p>",
        "id": 306877473,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667069713
    },
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html\">https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html</a>, the last section seems outdated since <code>CoeHead</code> and <code>CoeTail</code> are discussed in this chapter.</p>",
        "id": 306890182,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667079569
    },
    {
        "content": "<p>A very minor point: in several places you use tree names as examples, but this will add completely unnecessary friction for people whose native language isn't English. I have no idea what is a birch or a beech. I understand that it doesn't matter, but it still slows me a tiny bit while reading.</p>",
        "id": 306890317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667079701
    },
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html\">https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html</a>, there is an inconsistency betwenn <code>howMany</code> and <code>howMuch</code>.</p>",
        "id": 306890484,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667079865
    },
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/pos.html#another-representation\">https://leanprover.github.io/functional_programming_in_lean/type-classes/pos.html#another-representation</a> I don't understand the example, but maybe I forgot a previous explanation of this syntax.</p>",
        "id": 306890550,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667079950
    },
    {
        "content": "<p>Oh I see: this is the syntax to overload the constructor name, right? I always forget about this possibility.</p>",
        "id": 306890658,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667080054
    },
    {
        "content": "<p>Another good chapter :).</p>\n<p>Minor notes - once again, really just stylistic (in addition to what Patrick's already mentioned):</p>\n<p>In 4.5 - Equality and Ordering, in the context of:</p>\n<blockquote>\n<p>From the perspective of mathematics, two functions are equal if they map equal inputs to equal outputs, so this statement is even true, though it requires a two-line proof to convince Lean of this fact.</p>\n</blockquote>\n<p>Mathematics doesn't technically 'need to' do extensional, it's just the common set-theoretic one; might be worth rephrasing.</p>\n<p>In 4.6 - Chaining Coercions:<br>\nThere's a mention of CoeHead that's like: oh yeah, this exists. I would actually be interested in seeing an example of where this is useful, because frankly, I can't think of one and a quick grep of the Lean 4 repo comes up with a single instance of this, some deep in Syntax that's far from immediately straightforward to understand.</p>\n<p>In 4.6  - Design Considerations</p>\n<blockquote>\n<p>'First off,coercion' - typo, space after comma</p>\n</blockquote>\n<p>Very enjoyable read btw.</p>",
        "id": 306903659,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1667093321
    },
    {
        "content": "<p>Thanks for this!</p>\n<p>In the coercions chapter should the need to tag coercion methods with <code>@[coe]</code> be mentioned? I'm not clear on when that attribute is required but I do know that it can trip one up.</p>",
        "id": 306905380,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667095223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">František Silváši 🦉</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/306903659\">said</a>:</p>\n<blockquote>\n<p>In 4.5 - Equality and Ordering, in the context of:</p>\n<blockquote>\n<p>From the perspective of mathematics, two functions are equal if they map equal inputs to equal outputs, so this statement is even true, though it requires a two-line proof to convince Lean of this fact.</p>\n</blockquote>\n<p>Mathematics doesn't technically 'need to' do extensional, it's just the common set-theoretic one; might be worth rephrasing.</p>\n</blockquote>\n<p>At the level of detail of this book about mathematics, I think it is really pointless to mention that some extremely specialized areas of mathematics need more refined versions of function equality. This has nothing to do with foundations of mathematics, it is simply the meaning of the word function in informal real world mathematics.</p>",
        "id": 306935887,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1667123999
    },
    {
        "content": "<p>I don't necessarily disagree; that doesn't mean the sentence can't be phrased in a slightly different way that also includes the fact that this is 'merely' the most common interpretation. Of course, this is exceedingly minor :).</p>",
        "id": 306986940,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1667150751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks for all the great suggestions! I've fixed the errors in the development version of the book, and I added a little reminder about the structure constructor syntax in the exercise. WRT the tree names: I realy don't want to use lists of numbers, as my experience is that meaningful examples are much more meaningful for most people. But it sounds like picking trees from my local ecosystem is not a good solution for a big population of readers, so I'll think about some different themes to use (or at least drop some of the more similar-sounding ones).</p>",
        "id": 308119202,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667645665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364929\">@František Silváši 🦉</span> : I'm aiming for a level of mathematics background here that is quite low. Just as I'm not planning on having an extensive discussion of constructive vs classical reasoning (except just enough to talk about computable vs noncomputable definitions), I'm not planning on talking about intensional vs extensional characterizations of functions or any such thing. I'll be mostly just appealing to the ideas of sets and functions that people learn when they're 13 years old, because that's not what this is about. I suspect that anyone with the background to stumble over this will also be in a position to realize that they're at a different level.</p>\n<p>Thanks!</p>",
        "id": 308119828,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667645959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/306905380\">said</a>:</p>\n<blockquote>\n<p>Thanks for this!</p>\n<p>In the coercions chapter should the need to tag coercion methods with <code>@[coe]</code> be mentioned? I'm not clear on when that attribute is required but I do know that it can trip one up.</p>\n</blockquote>\n<p>I'm actually not aware of that attribute! I can't find any instances of it in the Lean source code. Can you point me to some information so I can investigate? Thanks!</p>",
        "id": 308121052,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667646267
    },
    {
        "content": "<p>Here’s the thread where I ran into the coercion registration issue:</p>\n<p><a href=\"#narrow/stream/270676-lean4/topic/norm_cast.20not.20seeing.20coercion.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/norm_cast.20not.20seeing.20coercion.3F</a></p>",
        "id": 308155036,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667661446
    },
    {
        "content": "<p>I am following _Functional programming in lean_ and trying to define a basic type which is ordered.<br>\nI am puzzled as to why I get an error when I try to evaluate the &lt; operator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bit</span> <span class=\"n\">where</span>\n   <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span>\n   <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bit.compare</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ordering</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ordering.eq</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ordering.lt</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ordering.gt</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Ordering.eq</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ord</span> <span class=\"n\">Bit</span> <span class=\"n\">where</span>\n   <span class=\"n\">compare</span> <span class=\"o\">:=</span> <span class=\"n\">Bit.compare</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">zero</span> <span class=\"c1\">-- &lt;- failed to synthesize</span>\n</code></pre></div>",
        "id": 308164755,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1667666234
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/instantiating.20Ord.20and.20.22failed.20to.20synthesize.20instance.22\">#lean4 &gt; instantiating Ord and \"failed to synthesize instance\"</a> by <span class=\"user-mention silent\" data-user-id=\"295150\">Petar Maymounkov</span>.</p>",
        "id": 308165221,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667666552
    },
    {
        "content": "<p>Currently <code>Ord</code> does not automatically imply <code>LT</code> (which powers <code>&lt;</code>). This is likely to improve soon: <a href=\"https://github.com/leanprover/lean4/issues/1777\">https://github.com/leanprover/lean4/issues/1777</a></p>",
        "id": 308165321,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667666619
    },
    {
        "content": "<p>You can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Bit</span> <span class=\"o\">:=</span> <span class=\"n\">ltOfOrd</span>\n</code></pre></div>\n<p>for now</p>",
        "id": 308165404,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667666658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308165321\">said</a>:</p>\n<blockquote>\n<p>Currently <code>Ord</code> does not automatically imply <code>LT</code> (which powers <code>&lt;</code>). This is likely to improve soon: <a href=\"https://github.com/leanprover/lean4/issues/1777\">https://github.com/leanprover/lean4/issues/1777</a></p>\n</blockquote>\n<p>But I have the same issue with LT:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bit</span> <span class=\"n\">where</span>\n   <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span>\n   <span class=\"bp\">|</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Bit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bit.lt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n   <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Bit</span> <span class=\"n\">where</span>\n   <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">zero</span> <span class=\"c1\">-- &lt;-- fail</span>\n</code></pre></div>",
        "id": 308165470,
        "sender_full_name": "Petar Maymounkov",
        "timestamp": 1667666711
    },
    {
        "content": "<p>Ah, you cannot <code>#eval</code> propositions - they don't have a value. Lean is trying to be helpful and convert it to a <code>Bool</code> using the <code>Decidable</code> typeclass, but there is no instance of that for <code>Bit</code>. If you use <code>ltOfOrd</code> as above, you get a <code>Decidable</code> instance for free.</p>",
        "id": 308165780,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667666889
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Bit.lt</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Bit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>  <span class=\"c1\">-- Bool!</span>\n   <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">zero</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">zero</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n   <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">one</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Bit</span> <span class=\"n\">where</span>\n   <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>also works fwiw</p>",
        "id": 308165905,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667666968
    },
    {
        "content": "<p>Is that true? I think you still have to register it</p>",
        "id": 308165909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667666969
    },
    {
        "content": "<p>it is true</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Ord</span> <span class=\"n\">Bit</span> <span class=\"n\">where</span>\n   <span class=\"n\">compare</span> <span class=\"o\">:=</span> <span class=\"n\">Bit.compare</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Bit</span> <span class=\"o\">:=</span> <span class=\"n\">ltOfOrd</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">zero</span> <span class=\"bp\">&lt;</span> <span class=\"n\">zero</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 308166101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667667081
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/blob/999b61007cbae0cad15172fcad5cffba43c13488/src/Init/Data/Ord.lean#L71-L72\">https://github.com/leanprover/lean4/blob/999b61007cbae0cad15172fcad5cffba43c13488/src/Init/Data/Ord.lean#L71-L72</a></p>",
        "id": 308166107,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667667086
    },
    {
        "content": "<p>Since we're already using <code>ltOfOrd</code>, it's fine to infer the rest</p>",
        "id": 308166188,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667667128
    },
    {
        "content": "<p>I would have thought that declaring the instance would make that instance not apply anymore since it is wrapped</p>",
        "id": 308166208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667667140
    },
    {
        "content": "<p>that is, here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">myLt</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Bit</span> <span class=\"o\">:=</span> <span class=\"n\">ltOfOrd</span>\n</code></pre></div>\n<p>we would end up with <code>Decidable (@LT.lt Bit myLt)</code> instead of <code>Decidable (@LT.lt Bit ltOfOrd)</code></p>",
        "id": 308166299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1667667197
    },
    {
        "content": "<p>Typeclass inference unfolds reducibles and instances</p>",
        "id": 308166568,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667667386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308155036\">said</a>:</p>\n<blockquote>\n<p>Here’s the thread where I ran into the coercion registration issue:</p>\n<p><a href=\"#narrow/stream/270676-lean4/topic/norm_cast.20not.20seeing.20coercion.3F\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/norm_cast.20not.20seeing.20coercion.3F</a></p>\n</blockquote>\n<p>As far as I can tell, this is a  mathlib4 concern, rather than one of Lean <em>per se</em>. Mathlib4 is explicitly out of scope for this book. But thanks!</p>",
        "id": 308172724,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667671392
    },
    {
        "content": "<p>I noticed something minor in chapter 4.4:</p>\n<blockquote>\n<p>much like a Java ArrayList, a C++ std::vector, or a Rust std::vec.</p>\n</blockquote>\n<p>The data structure in Rust is actually called <code>Vec</code> (with an upper case V), <code>std::vec</code> is just the module where that data structure is defined. <code>std::vec::Vec</code> is also part of the <a href=\"https://doc.rust-lang.org/stable/std/prelude/index.html\">prelude</a> so it probably makes sense to refer to it as just <code>Vec</code>.</p>",
        "id": 308180200,
        "sender_full_name": "eyelash",
        "timestamp": 1667677083
    },
    {
        "content": "<p>I also find the sentence \"arrays occupy a contiguous region of memory, which is much better for processor caches\" a bit confusing since AFAIK (someone please correct me if I'm wrong) the values of the array are still boxed in Lean, so only the pointers are stored in a contiguous region, especially after the comparison to C++ and Rust where the values themselves are actually stored in a contiguous region of memory.</p>",
        "id": 308181857,
        "sender_full_name": "eyelash",
        "timestamp": 1667678307
    },
    {
        "content": "<p>Scalars will be stored unboxed. But, yeah, many objects are boxed P:</p>",
        "id": 308183760,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1667679847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> none of that code depended on Mathlib4</p>",
        "id": 308187650,
        "sender_full_name": "Arien Malec",
        "timestamp": 1667682845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422011\">eyelash</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308180200\">said</a>:</p>\n<blockquote>\n<p>I noticed something minor in chapter 4.4:</p>\n<blockquote>\n<p>much like a Java ArrayList, a C++ std::vector, or a Rust std::vec.</p>\n</blockquote>\n<p>The data structure in Rust is actually called <code>Vec</code> (with an upper case V), <code>std::vec</code> is just the module where that data structure is defined. <code>std::vec::Vec</code> is also part of the <a href=\"https://doc.rust-lang.org/stable/std/prelude/index.html\">prelude</a> so it probably makes sense to refer to it as just <code>Vec</code>.</p>\n</blockquote>\n<p>Thanks! I fixed this in the latest development release.</p>",
        "id": 308189338,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667684315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422011\">eyelash</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308181857\">said</a>:</p>\n<blockquote>\n<p>I also find the sentence \"arrays occupy a contiguous region of memory, which is much better for processor caches\" a bit confusing since AFAIK (someone please correct me if I'm wrong) the values of the array are still boxed in Lean, so only the pointers are stored in a contiguous region, especially after the comparison to C++ and Rust where the values themselves are actually stored in a contiguous region of memory.</p>\n</blockquote>\n<p>This is a good point, so I've created an issue to track it.</p>",
        "id": 308189367,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667684347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308187650\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> none of that code depended on Mathlib4</p>\n</blockquote>\n<p>As far as I can see, that attribute only exists in mathlib4. But I'll ask about it next time I talk to Lean developers on the phone - I could very well be overlooking something.</p>",
        "id": 308189475,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1667684444
    },
    {
        "content": "<p>It's in std4 now <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Tactic.NormCast.Attr.coe#doc\">docs4#Tactic.NormCast.Attr.coe</a></p>",
        "id": 308193265,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1667687586
    },
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html\">https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html</a> <code>#eval (buildResponse \"Functional Programming in Lean\" Str \"Programming is fun!\").asString</code> the <code>.asString</code> call doesn't work for me with <code>the environment does not contain 'JSON.asString'</code>.</p>",
        "id": 308272447,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1667751232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"422011\">eyelash</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308181857\">said</a>:</p>\n<blockquote>\n<p>I also find the sentence \"arrays occupy a contiguous region of memory, which is much better for processor caches\" a bit confusing since AFAIK (someone please correct me if I'm wrong) the values of the array are still boxed in Lean, so only the pointers are stored in a contiguous region, especially after the comparison to C++ and Rust where the values themselves are actually stored in a contiguous region of memory.</p>\n</blockquote>\n<p>I fixed this in the latest development version. It's now more clear that it's referring to the array itself being in a contiguous block, rather than having a pointer at each node like a linked list. Thanks again!</p>",
        "id": 312357283,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669473993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480079\">Evgenia Karunus</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/308272447\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html\">https://leanprover.github.io/functional_programming_in_lean/type-classes/coercion.html</a> <code>#eval (buildResponse \"Functional Programming in Lean\" Str \"Programming is fun!\").asString</code> the <code>.asString</code> call doesn't work for me with <code>the environment does not contain 'JSON.asString'</code>.</p>\n</blockquote>\n<p>Thanks for this. The implementation of <code>JSON.asString</code> is a bit hairy, so I was hoping to get away with not having it along. I'll beautify it and add it in the next release.</p>",
        "id": 312357774,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669474234
    },
    {
        "content": "<p>The November release is out at <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a> ! The new chapter covers monads, and I'm now hard at work on writing about monad transformers.</p>\n<p>Thank you all for your ongoing support and feedback, the book is much improved by your comments.</p>",
        "id": 313156778,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669842748
    },
    {
        "content": "<p>The way you present the motivation in terms of obvious patterns before using the \"M\" word is lovely.</p>",
        "id": 313163961,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669845264
    },
    {
        "content": "<p>Thanks! The M-word is scary for people who haven't seen it before, and experience in classrooms has made it crystal clear to me that most people do better seeing examples before definitions, so that's how I tried to write it.</p>",
        "id": 313164635,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669845504
    },
    {
        "content": "<p>Did you take a look at \"programming in Lean\"? This is a half-finished lean 3 book from five years ago which taught me what a monad was (by going through four examples). I suspect Jeremy wrote it, he's good at writing stuff which teaches me things</p>",
        "id": 313167086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1669846397
    },
    {
        "content": "<p>Yup, that was me. Bas Spitters once told me that the reason that there are so many monad tutorials online is that everyone who finally understands them is so proud of themselves that they are compelled to write a tutorial. I visited Microsoft in the summer of 2016 and I learned how to use monads. I was so proud of myself that I wrote a tutorial.</p>",
        "id": 313188687,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1669857974
    },
    {
        "content": "<p>For some of the readers I want to reach, I think that the definition-first approach taken in his book will not work as well as the example-first approach that I'm going for here. I'm also intentionally trying to avoid mathematical jargon, though I didn't entirely succeed :-)</p>",
        "id": 313229229,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669884666
    },
    {
        "content": "<p>I've had a brief look and I think the example first approach is very good. Even though I am a mathematician by training I hate all of the 'monads are a part of category theory' nonsense, since it does not help you to understand anything and I was slightly sad that keeps appearing.</p>",
        "id": 313230604,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1669885231
    },
    {
        "content": "<p>Ideally, there are different learning resources for different audiences, adapted to their specific needs. I know people who learned Haskell after knowing a fair bit of category theory already, and they had quite different challenges in learning to program with monads than most people!</p>\n<p>Programming with monads requires approximately zero category theory, just as you really don't need to know any graph theory to implement A* search for pathfinding in a game.</p>",
        "id": 313231458,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669885547
    },
    {
        "content": "<p>I think this chapter still lacks an introduction warning readers that you will first solve a problem in a very painful way for the sake of motivating some abstract gadget. Otherwise innocent readers will simply be terrified by the first examples.</p>",
        "id": 313249448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669891715
    },
    {
        "content": "<p>And, as far as I remember, Jeremy's explanation doesn't feature any category theory.</p>",
        "id": 313249797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1669891805
    },
    {
        "content": "<p>It might also help to give people a taste of what the final result is, since otherwise it's not really clear where it is all going. The endpoint of the <code>Option</code> example is not really that satisfactory:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">firstThirdFifthSeventh</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">~~&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">first</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">~~&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">third</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">~~&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">fifth</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">~~&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">seventh</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">first</span><span class=\"o\">,</span> <span class=\"n\">third</span><span class=\"o\">,</span> <span class=\"n\">fifth</span><span class=\"o\">,</span> <span class=\"n\">seventh</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I sure am glad I don't have to write that and can do this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">firstThirdFifthSeventh</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 313251231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669892270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/313249448\">said</a>:</p>\n<blockquote>\n<p>I think this chapter still lacks an introduction warning readers that you will first solve a problem in a very painful way for the sake of motivating some abstract gadget. Otherwise innocent readers will simply be terrified by the first examples.</p>\n</blockquote>\n<p>well the handrolled Monadic functions specialized to <code>Option</code>, etc. is exactly how Rust gets on, with some special <code>?</code> syntax for <code>Option</code> and <code>Result</code> where short circuiting on failure is what's wanted. And and the piles of nested function calls is exactly how Promise based async code used to work in JS until everyone borrowed <code>async/await</code> from C# which ultimately was from…Haskell (via Simon Marlow).</p>",
        "id": 313321487,
        "sender_full_name": "Arien Malec",
        "timestamp": 1669912784
    },
    {
        "content": "<p>Mario, the only difference between what appears in the book and your example is some syntactic sugar right? In that case, I think an easy fix without breaking too much the flow would be to add this right before the section <a href=\"https://leanprover.github.io/functional_programming_in_lean/monads.html#logging\">Logging</a>:</p>\n<p>\"In Section 5.3 we'll learn some that we have some syntactic sugar which can simplify this even further to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">firstThirdFifthSeventh</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">xs</span><span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But for now we'll postpone explanation of this syntax in order to consider several more examples.\"</p>\n<p>This succinct version should then also be included in Section 5.3. (<span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> of course, these are only suggestions!)</p>",
        "id": 313361994,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1669924073
    },
    {
        "content": "<p>These are great suggestions, thanks everyone!</p>",
        "id": 313362320,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1669924164
    },
    {
        "content": "<p>I saw a certain trend on Mastodon today, I wonder if it's helpful here as well...</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>ChatGPT on \"write biblical verses in the style of the king james bible in the form of a rap explaining the concept of monads from functional programming\"</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Verse 1:</p>\n<p>In the beginning, God created the code<br>\nAnd with it, the concept of monads bestowed<br>\nA way to compose functions in a pure mode<br>\nA building block for functional programming, it bode</p>\n<p>Chorus:</p>\n<p>Monads, monads, the building blocks of code<br>\nA way to create functional flows<br>\nAn abstract concept, but one that we must hold<br>\nFor the power of functional programming to unfold</p>\n<p>Verse 2:</p>\n<p>Monads allow us to bind and chain<br>\nFunctions together, without causing pain<br>\nTo the purity of the code, we remain<br>\nAs monads ensure our functions remain the same</p>\n<p>Chorus:</p>\n<p>Monads, monads, the building blocks of code<br>\nA way to create functional flows<br>\nAn abstract concept, but one that we must hold<br>\nFor the power of functional programming to unfold</p>\n<p>Bridge:</p>\n<p>Monads may seem complex at first glance<br>\nBut with study and practice, they will enhance<br>\nYour understanding of functional programming's advance<br>\nAnd open up new possibilities in your code's expanse</p>\n<p>Chorus:</p>\n<p>Monads, monads, the building blocks of code<br>\nA way to create functional flows<br>\nAn abstract concept, but one that we must hold<br>\nFor the power of functional programming to unfold</p>\n</div></div>",
        "id": 313539581,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1669999156
    },
    {
        "content": "<p>Another chapter written with a very good 'flow' to it :).  <em>Maybe</em> introducing the way of creating infix notations in a chapter 'Monad' is not ideal, but I understand it's very much on 'needed now' bases. This book is excellent.</p>",
        "id": 313718543,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1670090497
    },
    {
        "content": "<p>Hi everyone! There's a new release out at <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a>, with a chapter on <code>Applicative</code> that takes a few necessary detours through universe polymorphism and structure inheritance. I haven't yet made the improvements suggested up-thread, but they're certainly on the radar still. Thanks again for reading!</p>",
        "id": 320118783,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673211612
    },
    {
        "content": "<p>Next up is monad transformers. It's already half written, but I realized that I needed to already have <code>Applicative</code> to make progress so I backtracked a bit :-) It was a busy December.</p>",
        "id": 320118868,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673211685
    },
    {
        "content": "<p>In Universes &gt; <code>Prop</code> and Polymorphism:</p>\n<blockquote>\n<p><code>Prop</code> is at the bottom of the universe hierarchy, and the type of <code>Prop</code> is <code>Type</code>. This means that lists of propositions have type <code>List Type</code>:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">someTruePropositions</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"Hello, \"</span> <span class=\"bp\">++</span> <span class=\"s2\">\"world!\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"Hello, world!\"</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>... should the \"have type <code>List Type</code>\" actually be \"have type <code>List Prop</code>\"?</p>",
        "id": 320123781,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1673215948
    },
    {
        "content": "<p>Yes it should be i think.</p>",
        "id": 320125032,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1673217077
    },
    {
        "content": "<p>The fact that <code>Prop : Type</code> is irrelevant here, I think</p>",
        "id": 320125148,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673217182
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/320123781\">said</a>:</p>\n<blockquote>\n<p>In Universes &gt; <code>Prop</code> and Polymorphism:</p>\n<blockquote>\n<p><code>Prop</code> is at the bottom of the universe hierarchy, and the type of <code>Prop</code> is <code>Type</code>. This means that lists of propositions have type <code>List Type</code>:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">someTruePropositions</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n  <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"s2\">\"Hello, \"</span> <span class=\"bp\">++</span> <span class=\"s2\">\"world!\"</span> <span class=\"bp\">=</span> <span class=\"s2\">\"Hello, world!\"</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>... should the \"have type <code>List Type</code>\" actually be \"have type <code>List Prop</code>\"?</p>\n</blockquote>\n<p>Nice catch!</p>",
        "id": 320224620,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673270690
    },
    {
        "content": "<p>All right, it's fixed in the development release of the book. Thanks again!</p>",
        "id": 320391739,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673336547
    },
    {
        "content": "<p>In the section on types, it looks like this sentence is missing a word: <code>To use a type that can represent the negative integers, provide a it directly:</code></p>",
        "id": 320898419,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673518331
    },
    {
        "content": "<p>In functions and definitions, I think you meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">preceding</span> <span class=\"n\">function</span> <span class=\"n\">types</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">written</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">respectively.</span>\n</code></pre></div>\n<p>rather than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">preceding</span> <span class=\"n\">function</span> <span class=\"n\">types</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">written</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">respectively.</span>\n</code></pre></div>",
        "id": 320899227,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673518604
    },
    {
        "content": "<p>In Polymorphism, <code>Just as C# and Java require type arguments to provided explicitly</code> should be <code>Just as C# and Java require type arguments to be provided explicitly </code></p>",
        "id": 320906677,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673520701
    },
    {
        "content": "<p>I think it would be helpful to note that while you are working through inheritance of structures, it generally better to use typeclasses rather than structural inheritance to encapsulate common behavior.</p>",
        "id": 321033201,
        "sender_full_name": "Arien Malec",
        "timestamp": 1673557163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/320898419\">said</a>:</p>\n<blockquote>\n<p>In the section on types, it looks like this sentence is missing a word: <code>To use a type that can represent the negative integers, provide a it directly:</code></p>\n</blockquote>\n<p>Thanks! It was actually just a spurious \"a\", which is now deleted.</p>",
        "id": 321320654,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673687985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/320899227\">said</a>:</p>\n<blockquote>\n<p>In functions and definitions, I think you meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">preceding</span> <span class=\"n\">function</span> <span class=\"n\">types</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">written</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">respectively.</span>\n</code></pre></div>\n<p>rather than</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">so</span> <span class=\"n\">the</span> <span class=\"n\">preceding</span> <span class=\"n\">function</span> <span class=\"n\">types</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">written</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">respectively.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks! I've fixed it. This was one of the few types shown in the book that wasn't machine-checked - I've rectified that now :-)</p>",
        "id": 321321524,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673688375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/320906677\">said</a>:</p>\n<blockquote>\n<p>In Polymorphism, <code>Just as C# and Java require type arguments to provided explicitly</code> should be <code>Just as C# and Java require type arguments to be provided explicitly </code></p>\n</blockquote>\n<p>This is now fixed as well. Thank you for your sharp eyes and careful attention!</p>",
        "id": 321321578,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673688417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/321033201\">said</a>:</p>\n<blockquote>\n<p>I think it would be helpful to note that while you are working through inheritance of structures, it generally better to use typeclasses rather than structural inheritance to encapsulate common behavior.</p>\n</blockquote>\n<p>This is a good note to have somewhere, but I don't think it should be there because inheritance of type classes has not yet been introduced. I'll think about the right place to put it, along with a way of explaining why.</p>",
        "id": 321321673,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673688467
    },
    {
        "content": "<p>You know a chapter is great when 'the best' people can find is minor typos! :)</p>\n<ul>\n<li>6.2: Checking whether an [sic] value of type α is in the subtype...</li>\n<li>6.7: Defining a class defines a structure, and additionally creates a [sic] empty table of instances...</li>\n</ul>",
        "id": 321348088,
        "sender_full_name": "František Silváši 🦉",
        "timestamp": 1673699007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">František Silváši 🦉</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/321348088\">said</a>:</p>\n<blockquote>\n<p>You know a chapter is great when 'the best' people can find is minor typos! :)</p>\n<ul>\n<li>6.2: Checking whether an [sic] value of type α is in the subtype...</li>\n<li>6.7: Defining a class defines a structure, and additionally creates a [sic] empty table of instances...</li>\n</ul>\n</blockquote>\n<p><span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span> I should have caught those proofreading! Sorry, and thanks for the kind way of pointing them out :-)</p>",
        "id": 321363644,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673705895
    },
    {
        "content": "<ul>\n<li>2.6 : Missing <code>s</code> in <code>While most language allow</code></li>\n<li>\n<ol start=\"3\">\n<li>: The sentence <code>Computer-aided theorem provers like Lean are designed to allow mathematicians to write proofs while omitting many details, while the software fills in the missing explicit steps, decreasing the likelihood of oversights or mistakes.</code> reads a bit heavy. Maybe because of the duplicated \"while\"?</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li><code>propositions are a kind of type</code>. I know \"type\" is referring to <code>p : Prop</code>, but it could be misread as meaning <code>Prop</code> because of the singular</li>\n</ol>\n</li>\n</ul>",
        "id": 321525149,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673811678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/321321673\">said</a>:</p>\n<blockquote>\n<p>This is a good note to have somewhere, but I don't think it should be there because inheritance of type classes has not yet been introduced. I'll think about the right place to put it, along with a way of explaining why.</p>\n</blockquote>\n<p>How about a footnote, possibly with a forward reference?</p>",
        "id": 321558686,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673841594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/321525149\">said</a>:</p>\n<blockquote>\n<ul>\n<li>2.6 : Missing <code>s</code> in <code>While most language allow</code></li>\n<li>\n<ol start=\"3\">\n<li>: The sentence <code>Computer-aided theorem provers like Lean are designed to allow mathematicians to write proofs while omitting many details, while the software fills in the missing explicit steps, decreasing the likelihood of oversights or mistakes.</code> reads a bit heavy. Maybe because of the duplicated \"while\"?</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li><code>propositions are a kind of type</code>. I know \"type\" is referring to <code>p : Prop</code>, but it could be misread as meaning <code>Prop</code> because of the singular</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<p>Thanks, these are fixed in the development branch!</p>",
        "id": 321588493,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673859231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/321558686\">said</a>:</p>\n<blockquote>\n<p>How about a footnote, possibly with a forward reference?</p>\n</blockquote>\n<p>I don't think footnotes work well in writing that's intended to be consumed online - they end up being a bit like endnotes in paper books, where they're so inconvenient to consult that they might as well not be there. And Markdown/mdbook unfortunately doesn't have reasonable support for asides, marginalia, or other things that work well for this task.</p>\n<p>I'll puzzle over it.</p>",
        "id": 321588993,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1673859411
    },
    {
        "content": "<p>Footnotes with return hyperlinks (generally denoted by a ↩) I find to be easily read even online, but it's fine if you disagree. Dealing with non-linearity of topics is always hard.</p>",
        "id": 321677561,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673885906
    },
    {
        "content": "<p>I haven't really got this far yet*, but while I was reading ahead, I noticed that in <a href=\"https://leanprover.github.io/functional_programming_in_lean/functor-applicative-monad/applicative.html#validated-input\">6.2 Applicative Functors: Validated Input</a> the code block following \"Finally, these three components can be combined using seq:\" is the same as the previous code block, whereas the following text implies that it should define <code>checkInput</code>.</p>\n<p>*I'm finding myself a bit confounded by the <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/polymorphism.html#even-number-literals\">Even Number Literals</a> exercise in 4.2. But that's another story.</p>",
        "id": 322915381,
        "sender_full_name": "Ian Young",
        "timestamp": 1674427527
    },
    {
        "content": "<p>Thanks for catching the mistake! It's now fixed in the development branch and will be out in the next release. The code should read:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">checkInput</span> <span class=\"o\">(</span><span class=\"n\">year</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">RawInput</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Validate</span> <span class=\"o\">(</span><span class=\"n\">Field</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">CheckedInput</span> <span class=\"n\">year</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pure</span> <span class=\"n\">CheckedInput.mk</span> <span class=\"bp\">&lt;*&gt;</span>\n    <span class=\"n\">checkName</span> <span class=\"n\">input.name</span> <span class=\"bp\">&lt;*&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">checkYearIsNat</span> <span class=\"n\">input.birthYear</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">andThen</span> <span class=\"k\">fun</span> <span class=\"n\">birthYearAsNat</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">checkBirthYear</span> <span class=\"n\">year</span> <span class=\"n\">birthYearAsNat</span>\n</code></pre></div>",
        "id": 323724449,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674741219
    },
    {
        "content": "<p>Here's a hint for even number literals: it's using recursive instance search, so you're going to want one instance that is the base case for the search, and another instance that takes a literal for some smaller <code>Even</code> (via finding an <code>OfNat</code> for that smaller <code>Even</code>) and transforms it into a literal for a somewhat larger <code>Even</code>.</p>\n<p>Start with your base case: it should give a literal for the smallest <code>Even</code> number. Get that working first.</p>",
        "id": 323725135,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674741382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>  Thanks for the hint. That was what I'd thought I tried, but it fails to synthesize an instance for values larger than 0:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Even</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Even</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Even.toNat</span> <span class=\"o\">:</span> <span class=\"n\">Even</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Even.succ2</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n.toNat</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Even</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">x.toNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"mi\">0</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.zero</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">Even.succ2</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What's particularly confusing me is that the very similar definition in <a href=\"#narrow/stream/270676-lean4/topic/OfNat.20Pos.20.28n.2B1.29/near/318871006\">this</a> thread clearly does work, and adapting that I can get this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GEven</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">m</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ2</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GEven</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">GEven.zero</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GEven</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"o\">(</span><span class=\"n\">GEven</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"n\">GEven.succ2</span> <span class=\"o\">(</span><span class=\"n\">OfNat.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Even</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">GEven</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Even</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which works, but seems a bit mad! Clearly my first attempt isn't allowing it to 'chain together' the base and recursive cases, but I don't see why not.</p>",
        "id": 323824165,
        "sender_full_name": "Ian Young",
        "timestamp": 1674762289
    },
    {
        "content": "<p>Try replacing <code>instance : OfNat Even 0 where</code> with <code>instance : OfNat Even Nat.zero where</code>.  That works for me, at least - I should figure out and describe this gotcha!</p>",
        "id": 323829456,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674763839
    },
    {
        "content": "<p>Your latter example has some aspects that don't make sense to me - the <code>succ2</code> constructor doesn't add two anywhere, for instance, and the <code>zero</code> constructor seems to say that every <code>Nat</code> is even.  Then your first instance of <code>OfNat</code> should work for any <code>Nat</code> literal at all, even odd ones. The second instance doesn't relate <code>m</code> to <code>n+2</code> in any way.</p>",
        "id": 323829931,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674764017
    },
    {
        "content": "<p>Yes, using <code>Nat.zero</code> instead of <code>0</code> there works for me. Thanks!</p>\n<p>My second attempt made sense to me (except for its over-complication): <code>GEven m</code> represents even numbers from <code>m</code> upwards (in the same way as <code>GNat n</code> in the referenced thread represents natural numbers from <code>n</code> upwards).</p>",
        "id": 323832169,
        "sender_full_name": "Ian Young",
        "timestamp": 1674764913
    },
    {
        "content": "<p>What I don't think I was expecting is that with either of these definitions, <code>#check (254 : Even)</code> works, but <code>#check (256 : Even)</code> just says \"failed to synthesize instance OfNat Even 256\". Given the point at which it fails, I presume the latter case is 'running out of gas'?</p>",
        "id": 323916565,
        "sender_full_name": "Ian Young",
        "timestamp": 1674770139
    },
    {
        "content": "<p>That seems like the right explanation - another TODO for the book! Thanks!</p>",
        "id": 323976955,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674804801
    },
    {
        "content": "<p>The thing about your <code>GEven</code> example is that it seems to me that it also represents odd numbers when <code>m</code> is odd. In particular,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>If I wanted to write an inductive family to represent only the even numbers greater than or equal to some given number, I'd want to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GEven</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span> <span class=\"n\">basis</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plusTwo</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The issues with your version are:</p>\n<ol>\n<li>It doesn't ensure that the base number is even</li>\n<li>It doesn't track the actual Nat</li>\n</ol>\n<p>The second issue could be solved pretty well by having a function that converted it to a Nat. But the first one really does need the <code>k % 2 = 0</code> bit on the base case.</p>\n<p>Here's a proof that the version here represents even numbers greater than or equal to some base number:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">geven_is_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">even</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">plusTwo</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_self_right</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">geven_is_ge</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">basis</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"n\">induction</span> <span class=\"n\">even</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">case</span> <span class=\"n\">plusTwo</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>The other version that doesn't track the specific even <code>Nat</code> at the type level works basically the same way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">GEven</span> <span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">basis</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plusTwo</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span> <span class=\"bp\">→</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">GEven.toNat</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">base</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">k</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">plusTwo</span> <span class=\"n\">more</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toNat</span> <span class=\"n\">more</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">geven_is_even</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even.toNat</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">even</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">plusTwo</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">GEven.toNat</span><span class=\"o\">]</span>\n    <span class=\"k\">have</span> <span class=\"n\">step</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.mod_eq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_sub_self_right</span> <span class=\"n\">n</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">geven_is_ge</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">GEven</span> <span class=\"n\">basis</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even.toNat</span> <span class=\"bp\">≥</span> <span class=\"n\">basis</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_arith</span>\n  <span class=\"n\">induction</span> <span class=\"n\">even</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">GEven.toNat</span><span class=\"o\">]</span>\n  <span class=\"n\">case</span> <span class=\"n\">plusTwo</span> <span class=\"n\">_</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">constructor</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>They're so similar because the constraints that the indexed family imposes on the index are precisely the computation behavior of <code>GEven.toNat</code> in this case.</p>",
        "id": 323987769,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674807691
    },
    {
        "content": "<p>Sorry, I seem to have wasted your time here with an offhand remark. The point of my <code>GEven</code> was just to get an answer to the exercise after my original attempt didn't work.</p>",
        "id": 324296762,
        "sender_full_name": "Ian Young",
        "timestamp": 1674914753
    },
    {
        "content": "<p>Don't worry - it was fun :-)</p>",
        "id": 324395078,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1674977813
    },
    {
        "content": "<p>Moving on to <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/out-params.html#default-instances\">4.3. Controlling Instance Search: Default Instances</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HPlus</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hPlus</span> <span class=\"o\">:=</span> <span class=\"n\">Add.add</span>\n</code></pre></div>\n<p>With this instance, <code>hPlus</code> can be used for any addable type, like <code>Nat</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">HPlus.hPlus</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">5</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n</blockquote>\n<p>Shouldn't this <code>#eval</code> have two <code>Nat</code> arguments?</p>",
        "id": 324465611,
        "sender_full_name": "Ian Young",
        "timestamp": 1675012559
    },
    {
        "content": "<p>In <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/indexing.html#non-empty-lists\">4.4. Arrays and Indexing: Non-Empty Lists</a></p>\n<blockquote>\n<p>For example, the non-empty list <code>idahoSpiders</code> (which contains some spider species native to the US state of Idaho) consists of <code>\"Banded Garden Spider\"</code> followed by four other spiders, for a total of five spiders.</p>\n</blockquote>\n<p>Were you intending this to be followed by such a definition? From the later examples (in <a href=\"https://leanprover.github.io/functional_programming_in_lean/type-classes/standard-classes.html#appending\">4.5. Standard Classes: Appending</a>), it's clearly just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Banded Garden Spider\"</span><span class=\"o\">,</span>\n    <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"Long-legged Sac Spider\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Wolf Spider\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Hobo Spider\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Cat-faced Spider\"</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But it breaks the flow if I have to go looking for spiders to put in the list... and then I'll get distracted, wondering why you didn't include the bold jumping spider <em>Phidippus audax</em>, because, let's face it, jumping spiders are the best!</p>",
        "id": 324481098,
        "sender_full_name": "Ian Young",
        "timestamp": 1675020739
    },
    {
        "content": "<p>I'll check those out, thanks!</p>",
        "id": 324872706,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675160548
    },
    {
        "content": "<p>The January release is now out, featuring monad transformers and fancy <code>do</code>-notation features!</p>",
        "id": 324872769,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675160567
    },
    {
        "content": "<p>7.1 typo: \"Files whose names being\" -&gt; \"Files whose names begin\"<br>\nThe section \"What counts as a do block?\" is very clarifying. I was hesitant using <code>return</code> in nested do-blocks, since I was unsure what block was returning this value.</p>",
        "id": 324877993,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1675162076
    },
    {
        "content": "<p>Note that your editor should also highlight the corresponding <code>do</code> keyword when you put the cursor on a <code>return</code> statement</p>",
        "id": 324884617,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675164079
    },
    {
        "content": "<p>Congratulations <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>! The monad transformer chapter is a very nice milestone. It definitely feels like we now have a full book about the core concepts of programming using Lean. Actually I'm not sure what the next chapter will be about.</p>",
        "id": 324976857,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675187437
    },
    {
        "content": "<p>Is Chapter 9 meant to be about proving properties of programs written in Lean or theorem proving?</p>",
        "id": 324977019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675187482
    },
    {
        "content": "<p>Do you intend to stop after Chapter 9 or do you want to include a Chapter 10 about interfacing with other programming languages (the famous FFI stuff that seems pretty tricky to setup)? What about giving more advanced explanations about lake?</p>",
        "id": 324977413,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675187604
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582408\">Ian Young</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/324465611\">said</a>:</p>\n<blockquote>\n<p>Shouldn't this <code>#eval</code> have two <code>Nat</code> arguments?</p>\n</blockquote>\n<p>Fixed on the development branch! Thanks!</p>",
        "id": 324991254,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675191384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"582408\">Ian Young</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/324481098\">said</a>:</p>\n<blockquote>\n<p>Were you intending this to be followed by such a definition? </p>\n</blockquote>\n<p>I was, and it's now there. Thank you again!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"582408\">Ian Young</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/324481098\">said</a>:</p>\n<blockquote>\n<p>why you didn't include the bold jumping spider <em>Phidippus audax</em>, because, let's face it, jumping spiders are the best!</p>\n</blockquote>\n<p>As far as I can see, they're not native to Idaho. I tried to include nature examples from ecosystems that have been important parts of my life, like Idaho, Cascadia, and southern Scandinavia. They look like cool spiders, though!</p>",
        "id": 324992316,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675191716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> The next chapter is intended to be an introduction to programming with indexed families, with things like dependent pattern matching, a repeat of the difference between definitional and propositional equality and why the difference exists, and some of the fun things that dependent types allow in programs. This is a thing that people will not likely have seen elsewhere, and while Lean culture doesn't use it nearly as much as Agda or Idris culture, understanding things like inaccessible patterns is still useful and important.</p>\n<p>I was originally going to have 9 be about proofs with tactics _per se_, but I've been outlining and exploring an alternate structure. The alternate structure starts with a discussion of the cost model of Lean programs, describing things like the \"immutable beans\" optimizations and tail recursion. This naturally leads one to want to write some programs that use arrays mutably (e.g. insertion sort, which is in-place and stable). Many array algorithms are not structurally recursive, which provides a natural hook for talking about termination proofs. These termination proofs are good motivation for proving certain basic things about <code>Nat</code>, and it puts them in a context that's directly useful for programming.</p>\n<p>The book will stop after that, at least for now, as the funding that MSR has so generously provided will be running out. I'll be getting Saturdays with my family back :-)  Perhaps we'll revisit the collaboration in the future if the book turns out to bring lots of value - I've had fun working on it, at least, though I do need a break. I'll be spending April open-sourcing the infrastructure for CI and examples, proofreading it a couple of times, looking for ways to improve the integration between the sections, checking the exercises for difficulty and distribution, ensuring that there are enough exercises, and so forth.</p>\n<p>The reason I sometimes include the wrong example in the book is that I don't write the text as a literate program, because that makes it too hard to get the flexibility I need for the kinds of explanations I want to do. Instead, there's a bunch of Lean macros. So for <code>idahoSpiders</code>, my source file contains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">book</span> <span class=\"n\">declaration</span> <span class=\"o\">{{{</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">}}}</span>\n  <span class=\"kd\">def</span> <span class=\"n\">idahoSpiders</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Banded Garden Spider\"</span><span class=\"o\">,</span>\n    <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span>\n      <span class=\"s2\">\"Long-legged Sac Spider\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"Wolf Spider\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"Hobo Spider\"</span><span class=\"o\">,</span>\n      <span class=\"s2\">\"Cat-faced Spider\"</span>\n    <span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n<span class=\"n\">stop</span> <span class=\"n\">book</span> <span class=\"n\">declaration</span>\n</code></pre></div>\n<p>Then the book text (now) contains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">For</span> <span class=\"kd\">example</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">empty</span> <span class=\"n\">list</span> <span class=\"bp\">`</span><span class=\"n\">idahoSpiders</span><span class=\"bp\">`</span> <span class=\"o\">(</span><span class=\"n\">which</span> <span class=\"n\">contains</span> <span class=\"n\">some</span> <span class=\"n\">spider</span> <span class=\"n\">species</span> <span class=\"n\">native</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">US</span> <span class=\"n\">state</span> <span class=\"n\">of</span> <span class=\"n\">Idaho</span><span class=\"o\">)</span> <span class=\"n\">consists</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"o\">{{</span><span class=\"bp\">#</span><span class=\"n\">example_out</span> <span class=\"n\">Examples</span><span class=\"bp\">/</span><span class=\"n\">Classes.lean</span> <span class=\"n\">firstSpider</span><span class=\"o\">}}</span><span class=\"bp\">`</span> <span class=\"n\">followed</span> <span class=\"kd\">by</span> <span class=\"n\">four</span> <span class=\"n\">other</span> <span class=\"n\">spiders</span><span class=\"o\">,</span> <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"n\">total</span> <span class=\"n\">of</span> <span class=\"n\">five</span> <span class=\"n\">spiders</span><span class=\"o\">:</span>\n<span class=\"bp\">```</span><span class=\"n\">lean</span>\n<span class=\"o\">{{</span><span class=\"bp\">#</span><span class=\"n\">example_decl</span> <span class=\"n\">Examples</span><span class=\"bp\">/</span><span class=\"n\">Classes.lean</span> <span class=\"n\">idahoSpiders</span><span class=\"o\">}}</span>\n<span class=\"bp\">```</span>\n</code></pre></div>\n<p>The build script contains some horrid regexp munging that replaces the directives in the text with the associated bits from the text. This allows me to make sure that the text and the examples are always in sync. For things like error messages and <code>#eval</code> output, I have macros that reify the message as a string in the source file and fail if there's a mismatch, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">expect</span> <span class=\"n\">error</span> <span class=\"o\">{{{</span> <span class=\"n\">northernTreesEight</span> <span class=\"o\">}}}</span>\n  <span class=\"n\">northernTrees</span><span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"o\">]</span>\n<span class=\"n\">message</span>\n<span class=\"s2\">\"failed to prove index is valid, possible solutions:</span>\n<span class=\"s2\">  - Use `have`-expressions to prove the index is valid</span>\n<span class=\"s2\">  - Use `a[i]!` notation instead, runtime check is perfomed, and 'Panic' error message is produced if index is not valid</span>\n<span class=\"s2\">  - Use `a[i]?` notation instead, result is an `Option` type</span>\n<span class=\"s2\">  - Use `a[i]'h` notation instead, where `h` is a proof that index is valid</span>\n<span class=\"s2\">⊢ 8 &lt; Array.size northernTrees\"</span>\n<span class=\"kd\">end</span> <span class=\"n\">expect</span>\n</code></pre></div>\n<p>More regexp magic extracts this to the rendered book. This means that I simultaneously keep error messages in sync with the Lean compiler, and keep the text in sync with the tests.</p>\n<p>I think that this use of the metaprogramming system could be useful for others, so I'll definitely open and document it towards the end. I even have a macro for equational reasoning style informal proofs. Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MonadApplicativeProof1</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">instM</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">m</span>\n<span class=\"kd\">@[instance]</span> <span class=\"kd\">axiom</span> <span class=\"n\">instLM</span> <span class=\"o\">:</span> <span class=\"n\">LawfulMonad</span> <span class=\"n\">m</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n<span class=\"n\">equational</span> <span class=\"n\">steps</span> <span class=\"o\">{{{</span> <span class=\"n\">mSeqRespId</span> <span class=\"o\">}}}</span>\n  <span class=\"n\">pure</span> <span class=\"n\">id</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">v</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span><span class=\"o\">{</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad.pure_bind</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- `pure` is a left identity of `&gt;&gt;=`</span>\n  <span class=\"o\">}</span><span class=\"bp\">=</span>\n  <span class=\"n\">v</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span><span class=\"o\">{</span>\n  <span class=\"c1\">-- Reduce the call to `id`</span>\n  <span class=\"o\">}</span><span class=\"bp\">=</span>\n  <span class=\"n\">v</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">y</span>\n  <span class=\"bp\">=</span><span class=\"o\">{</span>\n  <span class=\"c1\">-- `fun x =&gt; f x` is the same as `f`</span>\n  <span class=\"o\">}</span><span class=\"bp\">=</span>\n  <span class=\"n\">v</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">pure</span>\n  <span class=\"bp\">=</span><span class=\"o\">{</span>\n  <span class=\"c1\">-- `pure` is a right identity of `&gt;&gt;=`</span>\n  <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">LawfulMonad.bind_pure_comp</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span><span class=\"bp\">=</span>\n  <span class=\"n\">v</span>\n<span class=\"n\">stop</span> <span class=\"n\">equational</span> <span class=\"n\">steps</span>\n<span class=\"kd\">end</span> <span class=\"n\">MonadApplicativeProof1</span>\n</code></pre></div>\n<p>The comments contain Markdown that's extracted to the book, and the terms in the middle are checked in a way similar to <code>calc</code> (no term defaults to <code>rfl</code>). This makes it all quite easy to maintain and prevents my scattered brain from skipping important steps.</p>",
        "id": 324996145,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675192804
    },
    {
        "content": "<p>That whole <code>equational steps</code> thing is actually quite simple to implement too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">declare_syntax_cat</span> <span class=\"n\">eqSteps</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">eqSteps</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"={\"</span> <span class=\"s2\">\"}=\"</span> <span class=\"n\">eqSteps</span> <span class=\"o\">:</span> <span class=\"n\">eqSteps</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\"={\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}=\"</span> <span class=\"n\">eqSteps</span> <span class=\"o\">:</span> <span class=\"n\">eqSteps</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"equational\"</span> <span class=\"s2\">\"steps\"</span> <span class=\"s2\">\"{{{\"</span> <span class=\"n\">ws</span> <span class=\"n\">ident</span> <span class=\"n\">ws</span> <span class=\"s2\">\"}}}\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">eqSteps</span><span class=\"o\">)</span> <span class=\"s2\">\"stop\"</span> <span class=\"s2\">\"equational\"</span> <span class=\"s2\">\"steps\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Steps</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">done</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span> <span class=\"bp\">→</span> <span class=\"n\">Steps</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Steps.process</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">forStep</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Option</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Steps</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">e1</span> <span class=\"n\">why</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forStep</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">why</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">e1</span> <span class=\"n\">why</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">e2</span> <span class=\"n\">why2</span> <span class=\"n\">more</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">forStep</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">why</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n    <span class=\"n\">process</span> <span class=\"n\">forStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">e2</span> <span class=\"n\">why2</span> <span class=\"n\">more</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">getSteps</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Lean.Elab.Command.CommandElabM</span> <span class=\"n\">Steps</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">eqSteps</span><span class=\"bp\">|$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">eqSteps</span><span class=\"bp\">|$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span><span class=\"o\">{</span> <span class=\"o\">}</span><span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">more</span><span class=\"o\">:</span><span class=\"n\">eqSteps</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">t</span> <span class=\"n\">none</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getSteps</span> <span class=\"n\">more</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">eqSteps</span><span class=\"bp\">|$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=</span><span class=\"o\">{</span> <span class=\"bp\">$</span><span class=\"n\">why</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">}</span><span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">more</span><span class=\"o\">:</span><span class=\"n\">eqSteps</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">why</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getSteps</span> <span class=\"n\">more</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"Invalid equational steps {other}\"</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">equational</span> <span class=\"n\">steps</span> <span class=\"o\">{{{</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">}}}</span> <span class=\"bp\">$</span><span class=\"n\">stepStx</span><span class=\"o\">:</span><span class=\"n\">eqSteps</span> <span class=\"n\">stop</span> <span class=\"n\">equational</span> <span class=\"n\">steps</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Command</span> <span class=\"k\">in</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean.Elab.Term</span> <span class=\"k\">in</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n    <span class=\"kn\">open</span> <span class=\"n\">Lean.Meta</span> <span class=\"k\">in</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">exprs</span> <span class=\"bp\">←</span> <span class=\"n\">getSteps</span> <span class=\"n\">stepStx</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">done</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">exprs</span> <span class=\"k\">then</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withDeclName</span> <span class=\"n\">name.raw.getId</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n      <span class=\"n\">exprs.process</span> <span class=\"k\">fun</span>\n        <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">e1</span><span class=\"o\">,</span> <span class=\"n\">why</span><span class=\"o\">,</span> <span class=\"n\">e2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withDeclName</span> <span class=\"n\">name.raw.getId</span> <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e1</span> <span class=\"n\">none</span>\n            <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">e2</span> <span class=\"n\">none</span>\n            <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n            <span class=\"k\">match</span> <span class=\"n\">why</span> <span class=\"k\">with</span>\n            <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n                <span class=\"n\">throwError</span> <span class=\"s2\">\"Example equational step {y} ===&gt; {x} is incorrect</span><span class=\"se\">\\n</span><span class=\"s2\">----------</span><span class=\"se\">\\n\\t</span><span class=\"s2\"> {(← whnf y)}</span><span class=\"se\">\\n</span><span class=\"s2\"> ≠</span><span class=\"se\">\\n\\t</span><span class=\"s2\"> {(← whnf x)}</span><span class=\"se\">\\n</span><span class=\"s2\">----------</span><span class=\"se\">\\n\\t</span><span class=\"s2\"> {(← reduceAll y)}</span><span class=\"se\">\\n</span><span class=\"s2\"> ≠</span><span class=\"se\">\\n\\t</span><span class=\"s2\"> {(← reduceAll x)}\"</span>\n            <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n              <span class=\"k\">let</span> <span class=\"n\">e1'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e1</span><span class=\"o\">⟩</span>\n              <span class=\"k\">let</span> <span class=\"n\">e2'</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">e2</span><span class=\"o\">⟩</span>\n              <span class=\"k\">let</span> <span class=\"n\">eq</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e1'</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">e2'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">mkSort</span> <span class=\"n\">Level.zero</span><span class=\"o\">))</span>\n              <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">eq</span><span class=\"o\">)</span>\n              <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n</code></pre></div>",
        "id": 324997010,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675193024
    },
    {
        "content": "<p>Thanks for the detailed explanations! I think it doesn't make much sense to have a chapter on proofs per se. There is already Theorem proving in Lean for that (and we'll port Mathematics in Lean at some point). It would be much more consistent to cover proofs for programming such as termination proofs. I guess that proofs of programs would need a lot more space, maybe a different book.</p>",
        "id": 325006804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675196088
    },
    {
        "content": "<p>Stuff about lake and ffi would be a nice continuation but I understand that funding is running out, and the current plan is already a full self-contained book.</p>",
        "id": 325007036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675196164
    },
    {
        "content": "<p>I think proofs need to be covered at some level, if only to inform readers that there's a whole other book to read if that's your interest</p>",
        "id": 325007072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675196176
    },
    {
        "content": "<p>ideally there should be some light proof examples for the kinds of proofs that come up in programming applications, like termination proofs and using the <code>a[i]</code> array indexing operator</p>",
        "id": 325007272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675196250
    },
    {
        "content": "<p>I think teaching it as two separate languages sends the wrong message</p>",
        "id": 325007395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675196284
    },
    {
        "content": "<p>Yes, David wrote he's thinking about covering termination proofs.</p>",
        "id": 325007946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675196443
    },
    {
        "content": "<p>Another lens might be proving things that would be unit tests in other languages, as well as designing an API surface area that's amenable to proof.</p>",
        "id": 325010032,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675197176
    },
    {
        "content": "<p>The canonical killer app for dependently typed languages is the \"typestate pattern\" - e.g., a auth component that provably can't be in the wrong state</p>",
        "id": 325010443,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675197326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/325010032\">said</a>:</p>\n<blockquote>\n<p>Another lens might be proving things that would be unit tests in other languages, as well as designing an API surface area that's amenable to proof.</p>\n</blockquote>\n<p>my impression was both these things are still major research areas, no? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 325011128,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675197588
    },
    {
        "content": "<p>examples with <code>Connection (open : Bool) : Type</code> and such are cute but honestly not that relevant to programming in lean and don't really sell the language when something like haskell is the point of comparison</p>",
        "id": 325011851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675197821
    },
    {
        "content": "<p>more interesting stuff would be a type which only holds prime numbers, or an acyclic graph structure</p>",
        "id": 325012001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675197874
    },
    {
        "content": "<p>I come from a Rust perspective &amp;  this article was highly influential...</p>\n<p><a href=\"https://docs.idris-lang.org/en/latest/st/machines.html\">https://docs.idris-lang.org/en/latest/st/machines.html</a></p>",
        "id": 325012353,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675197990
    },
    {
        "content": "<p>You can't even really do the <code>Connection</code> thing very well because lean doesn't have linear types</p>",
        "id": 325012387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675198002
    },
    {
        "content": "<p>which is what you actually need to make that example work</p>",
        "id": 325012410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675198013
    },
    {
        "content": "<p>E.g., <a href=\"http://cliffle.com/blog/rust-typestate/\">http://cliffle.com/blog/rust-typestate/</a></p>",
        "id": 325012416,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675198016
    },
    {
        "content": "<p>and it doesn't play well with monads either</p>",
        "id": 325012455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675198032
    },
    {
        "content": "<p>huh...</p>",
        "id": 325012471,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675198039
    },
    {
        "content": "<p>that idris example can't be done in lean directly because the do notation doesn't have typestate like that</p>",
        "id": 325012748,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675198159
    },
    {
        "content": "<p>then yeah,  a dag example would be useful...</p>",
        "id": 325012801,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675198176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> <br>\nAssorted minor comments on the first 4 chapters. Many are stylistic in nature so just ignore if you don't agree.</p>\n<p>1.3 Defining Functions</p>\n<ul>\n<li>3rd para: remove second instance of <code>just</code>.</li>\n<li>6th para: Remove <code>s</code> from <code>As a special cases</code>.</li>\n<li>last para (before exercise): drop <code>actually</code> in 1st line.</li>\n</ul>\n<p>1.4 Defining Type/Messages You May Meet</p>\n<ul>\n<li>1st para: it says <code>...by a feature of Lean that has not yet been introduced</code>; at this point the reader has no clue what that feature is or why it matters. Perhaps a forward reference would clarify.</li>\n<li>Despite the title of the section, it doesn't seem to be primarily about the messages.</li>\n<li>It should be an <code>h2</code> heading so it isn't inside <code>Defining Types</code>. All other <code>Messages...</code> subsections are at the <code>h2</code> level.</li>\n</ul>\n<p>1.4 Structures</p>\n<ul>\n<li>Para starting <code>The typical way</code>: <code>a instance</code> should be <code>an instance</code>.</li>\n<li>Same para: delete the first occurrence of <code>both</code>.</li>\n</ul>\n<p>1.4 Behind the Scenes</p>\n<ul>\n<li>Para starting <code>Constructors have...</code>: delete first occurrence of <code>that</code>.</li>\n</ul>\n<p>1.5 Datatypes and Patterns</p>\n<ul>\n<li>In the third para you say <code>most user defined datatypes are inductive datatypes</code>. If you mean that in the general sense, so that structure definitions are included, then I agree. If you specifically mean types that are recursively defined, then I would argue most are structure definitions.</li>\n<li>Para starting <code>This definition has...</code>:  the 5th sentence seems to be a bit overloaded with <code>name</code> - could it be reworded?</li>\n</ul>\n<p>1.6 Polymorphism</p>\n<ul>\n<li>Para starting <code>In this example...</code>: two occurrences of <code>because</code> reads a little clumsy.</li>\n<li>Last para: would <code>pattern-matches to run the same pattern</code> be better expressed as <code>pattern-matches against the same pattern</code>?</li>\n<li>Last para: a couple of <code>#check/eval</code> lines after the definition of <code>posOrNegThree</code> would be useful to clarify what is happening.</li>\n</ul>\n<p>1.6 Implicit Arguments</p>\n<ul>\n<li>Para starting <code>In the standard library...</code>: delete the first <code>that</code>.</li>\n</ul>\n<p>1.6 Option</p>\n<ul>\n<li>Note in the definition of <code>Option</code> the decoration <code>: Type</code> has been added just before the <code>where</code>, and this appears consistently in all subsequent definitions. All prior type definitions omit it.</li>\n<li>Where you have <code>#eval [].head? (α := Int)</code>, might note that <code>#eval ([]:List Int).head?</code> is also possible?</li>\n</ul>\n<p>1.6 Prod</p>\n<ul>\n<li>Where you note <code>using domain terminology can make it easier to read the code</code>, might also add specific structures help to avoid errors.</li>\n</ul>\n<p>1.7 Local Definitions</p>\n<ul>\n<li>Consider giving an alternate definition of <code>helper</code> using <code>where</code> (which interestingly doesn't require <code>rec</code>).</li>\n</ul>\n<p>1.7 Anonymous Functions</p>\n<ul>\n<li>Consider using <code>\\mapsto</code> instead of <code>=&gt;</code>, though that is compromised since <code>\\mapsto</code> can't be used in patterns.</li>\n<li>The centred dot is <code>\\.</code> or <code>\\centerdot</code>, not <code>\\cdot</code>.</li>\n</ul>\n<p>2.3 Lakefiles</p>\n<ul>\n<li>Since the standard library <code>std4</code> has now been separated from core, and is likely to be required for many packages, it would be good to show how <code>std4</code> is included</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>\n<p>2.4 Getting Started</p>\n<ul>\n<li>For consistency with 2.3, it would be preferable to include the guillemets.</li>\n</ul>\n<p>2.6 do Notation</p>\n<ul>\n<li>Should <code>and given a unique name</code> be <code>gives them a unique name</code>?</li>\n</ul>\n<p>3 Indexing Without Evidence</p>\n<ul>\n<li>1st para: <code>an question</code> -&gt; <code>a question</code>.</li>\n<li>Is the example <code>#eval woodlandCritters[1]!</code> supposed to show a crash? Is the index supposed to be out of bounds?</li>\n</ul>\n<p>3 Exercises</p>\n<ul>\n<li>exercise 1, <code>rfl</code> not sufficient for <code>5 &lt; 18</code>.</li>\n</ul>\n<p>4.1 Classes and Instances</p>\n<ul>\n<li>Someone following along and entering the examples may be a bit confused when they enter <code>#eval Plus.plus 5  3</code> and get an error rather than <code>8</code> as shown. Not till later is it explained.</li>\n</ul>\n<p>4.1 Conversion to Strings</p>\n<ul>\n<li>In definition of <code>posToString</code> possibly have <code>s!\"({s})\"</code> for consistency. You perhaps avoided this as the two <code>s</code>s might confuse?</li>\n</ul>\n<p>4.1 Exercises</p>\n<ul>\n<li>To this point the exercises have been small, then we get HTTP, which is much bigger and requires background information. Subsequent exercises go back to being small again. It is certainly an interesting exercise, but perhaps a bit of a leap.</li>\n</ul>\n<p>4.4 Arrays</p>\n<ul>\n<li>Para starting <code>In pure functional...</code>:  <code>contain an optimizations</code> -&gt; <code>contain an optimization</code> or <code>contain optimizations</code>.</li>\n</ul>\n<p>4.4 Non-Empty Lists</p>\n<ul>\n<li>Para starting <code>This fact can be...</code>: delete second instance of <code>that</code>.</li>\n<li>In definition of <code>NonEmptyList.get</code>, replace <code>ok</code> with <code>_</code>.</li>\n</ul>\n<p>4.5 Equality and Ordering</p>\n<ul>\n<li>Having defined <code>Pos</code> as an instance of <code>Ord</code>, could add something like</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">lt</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">compare</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">==</span> <span class=\"n\">Ordering.lt</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Possibly even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">compare</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">!=</span> <span class=\"n\">Ordering.gt</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and explain why the <code>#eval</code> throws an error, though</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span> <span class=\"bp\">==</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">Pos</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>succeeds.</p>\n<p>4.5 Deriving Standard Classes</p>\n<ul>\n<li>In one of the <code>Messages</code> sections might be worth mention that <code>deriving</code> sometimes throws messages like this:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">default</span> <span class=\"n\">handlers</span> <span class=\"k\">have</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span> <span class=\"n\">yet</span><span class=\"o\">,</span> <span class=\"kd\">class</span><span class=\"o\">:</span> <span class=\"bp\">'</span><span class=\"n\">ToString'</span> <span class=\"n\">types</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>which suggests deriving may be possible in future for that class.</p>\n<p>4.5 Functors</p>\n<ul>\n<li>Possibly note <code>(· + 5) &lt;$&gt; [1, 2, 3]</code> can also be written <code>[1, 2, 3].map (· + 5)</code>.</li>\n</ul>\n<p>4.6 Chaining Coercions</p>\n<ul>\n<li>Follow the definition of <code>coercedToB</code> with <code>#eval coercedToB</code> to demonstrate it is <code>B.b</code> (though that means you would need <code>deriving Repr</code> on <code>B</code>).</li>\n<li>Para starting <code>Some coercions...</code>: contains <code>in in</code>.</li>\n</ul>\n<p>4.6 Coercing to Functions</p>\n<ul>\n<li>1st para: <code>there are more than one way</code> -&gt; <code>there is more than one way</code>.</li>\n</ul>\n<p>4.6 Aside: JSON as a String</p>\n<ul>\n<li>Para starting <code>The function that emits...</code>:  delete second  <code>that</code> in <code>is complicated enough that Lean cannot see that the recursive calls...</code>.</li>\n</ul>\n<p>4.7 Examples</p>\n<ul>\n<li>The sentence <code>Examples may create define functions by accepting arguments:</code>; did you intend both create and define here?</li>\n</ul>",
        "id": 325087523,
        "sender_full_name": "Paul  Chisholm",
        "timestamp": 1675238177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span> Thank you for your careful attention and helpful comments! I won't have time to work on the book for a bit due to FOSDEM, but I'll be sure to look over everything when I'm able.</p>",
        "id": 325096628,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675241446
    },
    {
        "content": "<p>Hi! I have a suggestion for a topic: threads. Doing IO tasks in threads, sharing/locking data, joining etc.</p>\n<p>I am a complete noob in the subject and it would be lovely to learn about those in Lean 4. What do you guys think?</p>",
        "id": 325823160,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675515489
    },
    {
        "content": "<p>That would indeed be a good topic! However, the scope of this book is fixed, and there's no more time for additional topics. I'm really trying to get the parts through that are conceptually different from imperative programming, not comprehensively document the language and tools. Perhaps a thread chapter would be better suited to the manual?</p>",
        "id": 325917677,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1675578992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/325012387\">said</a>:</p>\n<blockquote>\n<p>You can't even really do the <code>Connection</code> thing very well because lean doesn't have linear types</p>\n</blockquote>\n<p>The linked <code>ST</code> example is from Idris 1 which doesn't have linear types either</p>",
        "id": 326003175,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675624794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/325012801\">said</a>:</p>\n<blockquote>\n<p>then yeah,  a dag example would be useful...</p>\n</blockquote>\n<p>FWIW I have just <a href=\"https://github.com/rebryant/model-counting/blob/e84cb28d91296178e93eaa27f841ed89fbeea493/lean4/ProofChecker/ProofChecker/Data/PropGraph.lean#L190\">started</a> working on this. The code is super specific to the project it's for, but if it ends up working well it could be extracted out into its own library or std4 or somewhere.</p>",
        "id": 326003711,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675625127
    },
    {
        "content": "<p>Super cool example!</p>",
        "id": 326033016,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675649652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/325011128\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"542196\">Arien Malec</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/325010032\">said</a>:</p>\n<blockquote>\n<p>Another lens might be proving things that would be unit tests in other languages, as well as designing an API surface area that's amenable to proof.</p>\n</blockquote>\n<p>my impression was both these things are still major research areas, no? <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>\n</blockquote>\n<p>My impression is that proving all things that would be unit tests in other languages feels hard but proving some things that would be unit tests n other languages is a superpower of a language like Lean, where the proof language and the programming language are the same thing. E.g., <code>LawfulFoo</code>, or more practically something that would absolutely be part of the test suite: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.replicate_zero#doc\">docs4#List.replicate_zero</a> <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.eq_replicate#doc\">docs4#List.eq_replicate</a></p>",
        "id": 326033496,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675650145
    },
    {
        "content": "<p>Hello everyone! There's a new release of the book out, with a chapter on programming with dependent types. </p>\n<p>Thank you very much for the excellent feedback and careful reading so far. There's one more chapter to go!</p>\n<p><a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a></p>",
        "id": 341335825,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1678655220
    },
    {
        "content": "<p>Not sure if this is still the place to submit errata, but there is a typo in the last paragraph of the introduction to Chapter 8:</p>\n<blockquote>\n<p>Expressive specifications can be complicated to fulfill, and there is a real risk of creating tying oneself in knots and being unable to complete the program.</p>\n</blockquote>\n<p>Probably \"creating\" should not be there?</p>",
        "id": 344552847,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1679777187
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"462544\">Malcolm Langfield</span> <a href=\"#narrow/stream/270676-lean4/topic/New.20release.20of.20Functional.20Programming.20in.20Lean/near/344552847\">said</a>:</p>\n<blockquote>\n<p>Not sure if this is still the place to submit errata, but there is a typo in the last paragraph of the introduction to Chapter 8:</p>\n<blockquote>\n<p>Expressive specifications can be complicated to fulfill, and there is a real risk of creating tying oneself in knots and being unable to complete the program.</p>\n</blockquote>\n<p>Probably \"creating\" should not be there?</p>\n</blockquote>\n<p>This is still a good place - I just don't know how to get Zulip to notify me about posts to threads, and I missed this until now. It's fixed!</p>",
        "id": 351944148,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682191726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"383769\">@Paul  Chisholm</span> Thank you again for those thorough comments - they're all integrated in the latest development version of the book. I'm sorry it took me a while to get to them.</p>",
        "id": 351944588,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682191963
    }
]