[
    {
        "content": "<p>I've just created <a href=\"https://github.com/digama0/oleandump\">https://github.com/digama0/oleandump</a>, a fancier version of <a href=\"https://github.com/gebner/oleanparser\">https://github.com/gebner/oleanparser</a> which also uses type information so that it's not just a sea of <code>Obj.ctor</code> nodes and you can actually kind of see what's going on. The output looks something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">xed6e668c</span><span class=\"o\">{</span><span class=\"mi\">168</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Import</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Import.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Init.Prelude</span><span class=\"o\">,</span> <span class=\"n\">Bool.false</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">xf2bec02</span><span class=\"o\">{</span><span class=\"mi\">96</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Import</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Import.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Init.SizeOf</span><span class=\"o\">,</span> <span class=\"n\">Bool.false</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x43828d99</span><span class=\"o\">{</span><span class=\"mi\">304</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Lean.Import</span> <span class=\"o\">:=</span> <span class=\"n\">array</span> <span class=\"mi\">2</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">xed6e668c</span><span class=\"o\">{</span><span class=\"mi\">168</span><span class=\"o\">},</span> <span class=\"n\">xf2bec02</span><span class=\"o\">{</span><span class=\"mi\">96</span><span class=\"o\">}]</span>\n<span class=\"k\">let</span> <span class=\"n\">x3e10dd5c</span><span class=\"o\">{</span><span class=\"mi\">216</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.num</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">_private.Init.Core</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x4128399e</span><span class=\"o\">{</span><span class=\"mi\">248</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x3e10dd5c</span><span class=\"o\">{</span><span class=\"mi\">216</span><span class=\"o\">},</span> <span class=\"s2\">\"Quotient\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">xf8f7d484</span><span class=\"o\">{</span><span class=\"mi\">320</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x4128399e</span><span class=\"o\">{</span><span class=\"mi\">248</span><span class=\"o\">},</span> <span class=\"s2\">\"rel\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">xeeaa3d5f</span><span class=\"o\">{</span><span class=\"mi\">80</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x4128399e</span><span class=\"o\">{</span><span class=\"mi\">248</span><span class=\"o\">},</span> <span class=\"s2\">\"rel_of_eq\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x913b1e34</span><span class=\"o\">{</span><span class=\"mi\">144</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.num</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Init.Core._auxLemma</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x461040dc</span><span class=\"o\">{</span><span class=\"mi\">32</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">xf8f7d484</span><span class=\"o\">{</span><span class=\"mi\">320</span><span class=\"o\">},</span> <span class=\"s2\">\"refl\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x86ae8f45</span><span class=\"o\">{</span><span class=\"mi\">32</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">xf8f7d484</span><span class=\"o\">{</span><span class=\"mi\">320</span><span class=\"o\">},</span> <span class=\"s2\">\"proof_1\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x5ee03cc8</span><span class=\"o\">{</span><span class=\"mi\">32</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x3e10dd5c</span><span class=\"o\">{</span><span class=\"mi\">216</span><span class=\"o\">},</span> <span class=\"s2\">\"Thunk\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x177fca44</span><span class=\"o\">{</span><span class=\"mi\">104</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Name.str</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x5ee03cc8</span><span class=\"o\">{</span><span class=\"mi\">32</span><span class=\"o\">},</span> <span class=\"s2\">\"fn\"</span><span class=\"o\">]</span>\n<span class=\"k\">let</span> <span class=\"n\">x32363a17</span><span class=\"o\">{</span><span class=\"mi\">63560</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Lean.Name</span> <span class=\"o\">:=</span>\n<span class=\"n\">array</span> <span class=\"mi\">1012</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">PSum.inr.sizeOf_spec</span><span class=\"o\">,</span>\n   <span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">⊕</span><span class=\"n\">_</span><span class=\"bp\">».</span><span class=\"n\">_closed_5._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">≈</span><span class=\"n\">_</span><span class=\"bp\">».</span><span class=\"n\">_closed_7._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">!=</span><span class=\"n\">_</span><span class=\"bp\">».</span><span class=\"n\">_closed_4._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"n\">Subtype.instInhabitedSubtype._rarg._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"n\">Quotient.liftOn</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"n\">_aux_Init_Core___unexpand_Sum_1._lambda_1._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`«</span><span class=\"n\">term_</span><span class=\"bp\">≠</span><span class=\"n\">_</span><span class=\"bp\">».</span><span class=\"n\">_closed_1._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"n\">Task.casesOn</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"n\">decidable_of_decidable_of_eq._rarg._cstage2</span><span class=\"o\">,</span>\n   <span class=\"bp\">`</span><span class=\"n\">Prod.lexLtDec._cstage1</span><span class=\"o\">,</span>\n    <span class=\"bp\">...</span>\n<span class=\"o\">]</span>\n<span class=\"bp\">...</span>\n<span class=\"k\">let</span> <span class=\"n\">xefdc7e35</span><span class=\"o\">{</span><span class=\"mi\">1775856</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Lean.ModuleData</span> <span class=\"o\">:=</span>\n<span class=\"n\">Lean.ModuleData.mk</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x43828d99</span><span class=\"o\">{</span><span class=\"mi\">304</span><span class=\"o\">},</span> <span class=\"n\">x32363a17</span><span class=\"o\">{</span><span class=\"mi\">63560</span><span class=\"o\">},</span> <span class=\"n\">x7d25df70</span><span class=\"o\">{</span><span class=\"mi\">1246112</span><span class=\"o\">},</span> <span class=\"n\">xe5438f9e</span><span class=\"o\">{</span><span class=\"mi\">5448</span><span class=\"o\">},</span> <span class=\"n\">x2ef2ecf6</span><span class=\"o\">{</span><span class=\"mi\">460384</span><span class=\"o\">}]</span>\n<span class=\"n\">xefdc7e35</span><span class=\"o\">{</span><span class=\"mi\">1775856</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>The references like <code>xefdc7e35{1775856}</code> combine a Merkle hash of the contents (<em>not</em> pointer values), which makes it a bit more diff-able, together with the byte size of the object (here <code>1775856</code> bytes), which is useful for finding what is taking up all the space in the file. I already managed to use this to find one <a href=\"https://github.com/leanprover/lean4/pull/2280\">bug</a> where a lean value was mis-typed.</p>\n<p>One of the main goals here was to track down the strangely small olean file savings in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4573\">#4573</a>, and I think the explanation is simply that the new compiler is quite light on annotations when the file is full of theorems and has nothing worth compiling. For example, <code>Mathlib.Algebra.Group.Basic</code> goes from <code>1158472</code> to <code>1155088</code> bytes, where the difference comes from two environment extensions:</p>\n<ul>\n<li><code>Lean.Compiler.LCNF.specExtension: 184 bytes -&gt; 56 bytes</code></li>\n<li><code>Lean.Compiler.LCNF.baseExt: 3424 bytes -&gt; 168 bytes</code></li>\n</ul>\n<p>Only two definitions are marked for compilation in the first place, <code>SubtractionMonoid.toSubNegZeroMonoid</code> and <code>DivisionMonoid.toDivInvOneMonoid</code>, which is why it takes up almost no space to begin with. Here is the top level size breakdown for elements of <code>ModuleData</code> for <code>Mathlib.Algebra.Group.Basic</code>:</p>\n<ul>\n<li><code>imports</code> (declarations of imported modules): 448 bytes</li>\n<li><code>constNames</code> (redundant with <code>constants</code>, just the names): 31808 bytes</li>\n<li><code>constants</code> (the <code>ConstantInfo</code> data, including all the proofs): 997040 bytes</li>\n<li><code>extraConstNames</code> (extra constants not \"officially\" in the environment, used by the compiler): 40 bytes</li>\n<li>\n<p><code>entries</code> (environment extensions): 129088 bytes<br>\n  There are 109 extensions in this file. The largest environment extensions are:</p>\n<ul>\n<li><code>Lean.declRangeExt</code> (declaration ranges): 61808 bytes</li>\n<li><code>Lean.Meta.simpExtension</code> (the <code>@[simp]</code> attribute, mainly simp discrimination keys): 18680 bytes</li>\n<li><code>Mathlib.Prelude.Rename.renameExtension</code> (the <code>#align</code> command): 16464 bytes</li>\n</ul>\n</li>\n</ul>\n<p>This all seems pretty typical for a \"small\" file, although it still manages to add up to over a megabyte. I'm contemplating a zip/unzip-like tool that will pack oleans losslessly into a lean 3 style serialized format, and unzip them at <code>lake exe cache</code> time rather than at load time. I am hopeful that a sufficiently high performance implementation of the deserializer will be faster than just downloading it over the network and unzipping, unless you have a really fast connection.</p>",
        "id": 368349672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687377619
    },
    {
        "content": "<p>This is great, I was dreading having to write this tool myself <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> . How do you account for sharing, is it included in the size only in the first path leading to a shared object?</p>",
        "id": 368354505,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687379100
    },
    {
        "content": "<p>Would also be interesting to know what percentage of the file is referenced exclusively from proofs</p>",
        "id": 368354797,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1687379185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/olean.20dump.20tool/near/368349672\">said</a>:</p>\n<blockquote>\n<p>I'm contemplating a zip/unzip-like tool that will pack oleans losslessly into a lean 3 style serialized format, and unzip them at <code>lake exe cache</code> time rather than at load time. I am hopeful that a sufficiently high performance implementation of the deserializer will be faster than just downloading it over the network and unzipping, unless you have a really fast connection.</p>\n</blockquote>\n<p>This would be great but wouldn't completely solve the problem for teaching when you don't want to tell students they need 2Gb of storage to  work on exercises. For this we would really want a mode where Lean does the unpacking during import, just like in Lean 3.</p>",
        "id": 368355271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687379335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/olean.20dump.20tool/near/368354505\">said</a>:</p>\n<blockquote>\n<p>How do you account for sharing, is it included in the size only in the first path leading to a shared object?</p>\n</blockquote>\n<p>Yes. I thought about doing something like counting up the total size of everything in the transitive closure of a given object, but that's a lot of computation and also somewhat difficult to reason about - it's an easier mental model if things just add up.</p>",
        "id": 368357591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687380111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/olean.20dump.20tool/near/368354797\">said</a>:</p>\n<blockquote>\n<p>Would also be interesting to know what percentage of the file is referenced exclusively from proofs</p>\n</blockquote>\n<p>For the Mathlib.Algebra.Group.Basic test file, it is 1158472 bytes normally and 422872 bytes without proofs, i.e. it is 63% proof bodies</p>",
        "id": 368363625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687382079
    },
    {
        "content": "<p>I did the same calculation on all of mathlib. Here's the full data dump: <a href=\"/user_uploads/3121/JqKCt0OuhqU6D-bGrmbTwVdB/proof-size-olean.txt\">proof-size-olean.txt</a>, and here's the beginning of it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">with</span> <span class=\"n\">prfs</span>  <span class=\"n\">w</span><span class=\"bp\">/</span><span class=\"n\">o</span> <span class=\"n\">proofs</span> <span class=\"n\">prf</span> <span class=\"bp\">%</span> <span class=\"n\">file</span>\n<span class=\"mi\">2638588696</span> <span class=\"mi\">1829564816</span> <span class=\"bp\">.</span><span class=\"mi\">3066</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">total</span>\n<span class=\"mi\">13744040</span>   <span class=\"mi\">12881840</span>   <span class=\"bp\">.</span><span class=\"mi\">0627</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"bp\">/</span><span class=\"n\">TensorProduct.olean</span>\n<span class=\"mi\">13064600</span>   <span class=\"mi\">12263384</span>   <span class=\"bp\">.</span><span class=\"mi\">0613</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">TensorProduct.olean</span>\n<span class=\"mi\">11742536</span>   <span class=\"mi\">11426464</span>   <span class=\"bp\">.</span><span class=\"mi\">0269</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Ring</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span>\n<span class=\"mi\">10997048</span>   <span class=\"mi\">9833712</span>    <span class=\"bp\">.</span><span class=\"mi\">1057</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">Multilinear.olean</span>\n<span class=\"mi\">11203032</span>   <span class=\"mi\">9412040</span>    <span class=\"bp\">.</span><span class=\"mi\">1598</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">NormedSpace</span><span class=\"bp\">/</span><span class=\"n\">OperatorNorm.olean</span>\n<span class=\"mi\">9131928</span>    <span class=\"mi\">8843960</span>    <span class=\"bp\">.</span><span class=\"mi\">0315</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Lie</span><span class=\"bp\">/</span><span class=\"n\">BaseChange.olean</span>\n<span class=\"mi\">8939736</span>    <span class=\"mi\">8604072</span>    <span class=\"bp\">.</span><span class=\"mi\">0375</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">NormNum</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span>\n<span class=\"mi\">8547120</span>    <span class=\"mi\">8378648</span>    <span class=\"bp\">.</span><span class=\"mi\">0197</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Limits</span><span class=\"bp\">/</span><span class=\"n\">Cones.olean</span>\n<span class=\"mi\">8488096</span>    <span class=\"mi\">8100696</span>    <span class=\"bp\">.</span><span class=\"mi\">0456</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Lie</span><span class=\"bp\">/</span><span class=\"n\">Classical.olean</span>\n<span class=\"mi\">9000344</span>    <span class=\"mi\">7827536</span>    <span class=\"bp\">.</span><span class=\"mi\">1303</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Module</span><span class=\"bp\">/</span><span class=\"n\">LocalizedModule.olean</span>\n<span class=\"mi\">8764496</span>    <span class=\"mi\">7699544</span>    <span class=\"bp\">.</span><span class=\"mi\">1215</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">Module</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span>\n<span class=\"mi\">7642368</span>    <span class=\"mi\">7639832</span>    <span class=\"bp\">.</span><span class=\"mi\">0003</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Tactic</span><span class=\"bp\">/</span><span class=\"n\">Linarith</span><span class=\"bp\">/</span><span class=\"n\">Preprocessing.olean</span>\n<span class=\"mi\">7639864</span>    <span class=\"mi\">7078056</span>    <span class=\"bp\">.</span><span class=\"mi\">0735</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Limits</span><span class=\"bp\">/</span><span class=\"n\">Shapes</span><span class=\"bp\">/</span><span class=\"n\">Pullbacks.olean</span>\n<span class=\"mi\">6984672</span>    <span class=\"mi\">6776568</span>    <span class=\"bp\">.</span><span class=\"mi\">0297</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RepresentationTheory</span><span class=\"bp\">/</span><span class=\"n\">Action.olean</span>\n<span class=\"mi\">8503752</span>    <span class=\"mi\">6339272</span>    <span class=\"bp\">.</span><span class=\"mi\">2545</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">GroupTheory</span><span class=\"bp\">/</span><span class=\"n\">Subgroup</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span>\n</code></pre></div>",
        "id": 368371297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687385233
    },
    {
        "content": "<p>Here are the files that benefit the most from dropping proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1992472</span> <span class=\"mi\">56976</span>  <span class=\"bp\">.</span><span class=\"mi\">9714</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Algebra</span><span class=\"bp\">/</span><span class=\"n\">GroupPower</span><span class=\"bp\">/</span><span class=\"n\">Identities.olean</span>\n<span class=\"mi\">694784</span>  <span class=\"mi\">41104</span>  <span class=\"bp\">.</span><span class=\"mi\">9408</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">DiscreteValuationRing</span><span class=\"bp\">/</span><span class=\"n\">TFAE.olean</span>\n<span class=\"mi\">1351176</span> <span class=\"mi\">84344</span>  <span class=\"bp\">.</span><span class=\"mi\">9375</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicTopology</span><span class=\"bp\">/</span><span class=\"n\">DoldKan</span><span class=\"bp\">/</span><span class=\"n\">Faces.olean</span>\n<span class=\"mi\">585184</span>  <span class=\"mi\">36640</span>  <span class=\"bp\">.</span><span class=\"mi\">9373</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Complex</span><span class=\"bp\">/</span><span class=\"n\">ExponentialBounds.olean</span>\n<span class=\"mi\">586520</span>  <span class=\"mi\">40200</span>  <span class=\"bp\">.</span><span class=\"mi\">9314</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Coprime</span><span class=\"bp\">/</span><span class=\"n\">Ideal.olean</span>\n<span class=\"mi\">1203336</span> <span class=\"mi\">94248</span>  <span class=\"bp\">.</span><span class=\"mi\">9216</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">Convex</span><span class=\"bp\">/</span><span class=\"n\">SpecificFunctions</span><span class=\"bp\">/</span><span class=\"n\">Basic.olean</span>\n<span class=\"mi\">859464</span>  <span class=\"mi\">68928</span>  <span class=\"bp\">.</span><span class=\"mi\">9198</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Topology</span><span class=\"bp\">/</span><span class=\"n\">Category</span><span class=\"bp\">/</span><span class=\"n\">Profinite</span><span class=\"bp\">/</span><span class=\"n\">CofilteredLimit.olean</span>\n<span class=\"mi\">1025448</span> <span class=\"mi\">83200</span>  <span class=\"bp\">.</span><span class=\"mi\">9188</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Analysis</span><span class=\"bp\">/</span><span class=\"n\">Convex</span><span class=\"bp\">/</span><span class=\"n\">Slope.olean</span>\n<span class=\"mi\">1920376</span> <span class=\"mi\">160552</span> <span class=\"bp\">.</span><span class=\"mi\">9163</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">FinitePresentation.olean</span>\n<span class=\"mi\">1164112</span> <span class=\"mi\">116920</span> <span class=\"bp\">.</span><span class=\"mi\">8995</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">NumberTheory</span><span class=\"bp\">/</span><span class=\"n\">DiophantineApproximation.olean</span>\n<span class=\"mi\">1216992</span> <span class=\"mi\">125248</span> <span class=\"bp\">.</span><span class=\"mi\">8970</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Geometry</span><span class=\"bp\">/</span><span class=\"n\">Euclidean</span><span class=\"bp\">/</span><span class=\"n\">Triangle.olean</span>\n<span class=\"mi\">744712</span>  <span class=\"mi\">76896</span>  <span class=\"bp\">.</span><span class=\"mi\">8967</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">AlgebraicTopology</span><span class=\"bp\">/</span><span class=\"n\">DoldKan</span><span class=\"bp\">/</span><span class=\"n\">Degeneracies.olean</span>\n</code></pre></div>\n<p>I would assume these have no or few defs and some big tactic proofs.</p>",
        "id": 368371606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687385399
    },
    {
        "content": "<p>Quite a lot of the category theory files have 0% savings, most likely because this is only looking specifically at dropping the <code>value</code> argument of <code>TheoremVal.mk</code>, not all propositions anywhere in the term, and the category theory files presumably have all <code>def</code>s and no <code>theorem</code>s</p>",
        "id": 368372001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687385574
    },
    {
        "content": "<p>Yes, proofs tend to be embedded in the fields of <code>def</code> structures in the category theory library.</p>",
        "id": 368372096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687385619
    },
    {
        "content": "<p>i.e. is is much more \"data bundled with proofs about it\" than is typical for mathlib.</p>",
        "id": 368372134,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687385642
    },
    {
        "content": "<p><del>Or am I misunderstanding and you're dropping proof fields already in these counts?</del></p>",
        "id": 368372234,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687385683
    },
    {
        "content": "<p>In lean 3 it would automatically out-line proof parts of definitions, but I guess lean 4 doesn't do that anymore?</p>",
        "id": 368372355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687385750
    },
    {
        "content": "<p>Lean 4 does that as well.  Maybe it's the code generator that blows up the file so much?</p>",
        "id": 368378464,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687388756
    },
    {
        "content": "<p>It could also be that they are being marked as <code>def</code>s incorrectly</p>",
        "id": 368383536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687391904
    },
    {
        "content": "<p>indeed, all these <code>proof_n</code> definitions are <code>def</code>s</p>",
        "id": 368383584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687391957
    },
    {
        "content": "<p>Would it be possible that we optionally remove proofs from the olean files? That would significantly reduce the olean file size (especially after we mark <code>proof_n</code> as theorems), and almost everything should still work normally (<code>#print</code> is one of the few exceptions, I think).<br>\nIf Lean 4 still has the concept of trust level, this should not be accepted at trust level 0, but it seems fine at higher trust levels.<br>\nIt would also require some tooling additions. I'm imagining a world where <code>lake exe cache get</code> gives you smaller oleans without the proofs, but you can optionally request the larger oleans with the proof.</p>",
        "id": 368499292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687429070
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/olean.20dump.20tool/near/368383584\">said</a>:</p>\n<blockquote>\n<p>indeed, all these <code>proof_n</code> definitions are <code>def</code>s</p>\n</blockquote>\n<p>This is now fixed in the latest nightly. Bump PRs are at <a href=\"https://github.com/leanprover/std4/pull/163\">https://github.com/leanprover/std4/pull/163</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/5409\">#5409</a>.</p>",
        "id": 368723224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687481311
    },
    {
        "content": "<p>(The mathlib4 bump looks like it will have to wait for a Lean4 bug fix.)</p>",
        "id": 368730787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687484792
    },
    {
        "content": "<p><del>do you have a MWE?</del> <a href=\"https://github.com/leanprover/lean4/pull/2282\">lean4#2282</a></p>",
        "id": 368730985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687484886
    },
    {
        "content": "<p>simp changed behavior in the last nightly bump, so I expect some minor fixes</p>",
        "id": 368731062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687484931
    },
    {
        "content": "<p>This problem causes pretty extensive problems across mathlib4. :-(</p>",
        "id": 368731647,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687485209
    },
    {
        "content": "<p>Last week with the help of Mario I looked through 3 files of Mathlib4 and see how big the individual parts of the olean files are. Here is a summary of these olean files. All sizes are given as multiples of 1 kilobyte (to be more precise: 1000 bytes).</p>",
        "id": 376045522,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689604167
    },
    {
        "content": "<ul>\n<li><code>Data.List.Basic.olean</code> (lean file is 4500 lines)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>6175k total size (uncompressed)\n\n4985k all declarations\n3240k proofs of theorems\n238k unnecessary data stored by a bug, fixed in lean4#2321\nlargest declarations are meaningless because of that.\n\n1092k Environment extensions.\nThe environment extensions larger than 10k:\n441k `Lean.Elab.Structural.eqnInfoExt\n129k `Lean.declRangeExt\n122k `Lean.Compiler.LCNF.monoExt\n119k `Lean.Compiler.LCNF.baseExt\n95k `Mathlib.Prelude.Rename.renameExtension (#align statements)\n71k `Lean.IR.declMapExt\n45k `Lean.Meta.simpExtension\n</code></pre></div>\n<ul>\n<li><code>Topology.Algebra.Module.Basic.olean</code> (lean file is 2700 lines)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>8823k total size (uncompressed)\n\n7460k all declarations\n1085k proofs of theorems\nlargest declarations:\n242k `ContinuousLinearEquiv.continuousSemilinearEquivClass.proof_3\n155k `ContinuousLinearMap.addCommGroup._cstage1\n\n1229k Environment extensions.\nThe environment extensions larger than 10k:\n495k `Lean.Compiler.LCNF.baseExt\n274k `Lean.IR.declMapExt\n109k `Lean.Compiler.LCNF.monoExt\n83k `Lean.declRangeExt\n79k `Lean.Meta.simpExtension\n37k `Mathlib.Prelude.Rename.renameExtension (#align statements)\n24k `Lean.IR.UnreachableBranches.functionSummariesExt\n21k `Lean.Compiler.specExtension\n17k docstrings + module doc\n15k `Lean.Meta.instanceExtension\n10k `Lean.Compiler.LCNF.specExtension\n10k `Simps.structureExt\n</code></pre></div>\n<ul>\n<li><code>Geometry.Manifold.ContMDiff.olean</code> (lean file has 2200 lines)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>4002k total size (uncompressed)\n\n3839k all declarations\n2249k proofs of theorems\nlargest declarations:\n238k `isLocalStructomorphOn_contDiffGroupoid_iff\n145k `contMDiffOn_iff\n124k `ContMDiffWithinAt.comp\n122k `isLocalStructomorphOn_contDiffGroupoid_iff_aux\n118k `contDiffWithinAt_localInvariantProp\n\n136k Environment extensions.\nThe environment extensions larger than 10k:\n68k `Lean.declRangeExt\n31k `Mathlib.Prelude.Rename.renameExtension (#align statements)\n16k docstrings + module doc\n</code></pre></div>",
        "id": 376045565,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689604175
    },
    {
        "content": "<p>Some notes:</p>\n<ul>\n<li>We currently store all proofs of theorems</li>\n<li>We currently store runnable versions of all computable definitions, even those inside <code>noncomputable section</code></li>\n<li>We currently store information to be able to later generate equation lemmas for declarations (in extension <code>eqnInfoExt</code>). We currently store this even for theorems, which is useless (this is a bug).</li>\n</ul>",
        "id": 376045620,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689604185
    },
    {
        "content": "<p>I think it's safe to say that 2 very big contributors to the olean sizes with only minimal value are:</p>\n<ul>\n<li>proofs of theorems</li>\n<li>compilation of \"mathematical\" defs</li>\n</ul>\n<p>I think it would be nice if we <em>have the option to</em> get olean files without these two components.</p>\n<p>What you would lose, as far as I can tell:</p>\n<ol>\n<li>Cannot <code>#print</code> the value on a theorem in an imported file</li>\n<li>Cannot run <code>#print axioms</code> on a theorem</li>\n<li>Cannot <code>#eval</code> mathematical definitions.</li>\n</ol>\n<p>2 is definitely useful sometimes, but I rarely use 1 and 3.</p>\n<p>What do I mean by mathematical definition? How about anything in a <code>noncomputable section</code> except things that are whitelisted (e.g. by marking it specifically as <code>computable</code>?). Note that we still want to be able to run some of these definitions, e.g. delaborators could be defined in noncomputable sections (by the <code>notation</code> command).</p>",
        "id": 376045658,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689604192
    },
    {
        "content": "<p>It probably goes without saying but I essentially never do any of 1 to 3 and I bet I'm not alone in the mathematical community with this property.</p>",
        "id": 376099612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1689611878
    },
    {
        "content": "<p>I definitely use print axioms on theorems I just wrote in my file (that maybe depends on other files I wrote) to check if it is now sorry free.<br>\nAnd I do occasionally use eval.<br>\nThat's not to say that reduced oleans are a bad idea, just I'm curious what the use case is.<br>\nUsing reduced oleans would also reduce the utility of some linters or similar tooling I guess.</p>",
        "id": 376122434,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1689617132
    },
    {
        "content": "<p>The use case is reducing the olean file size by ~2x.</p>",
        "id": 376123863,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689617488
    },
    {
        "content": "<p>the print axioms issue specifically can be fixed by precalculating the result of print axioms on everything</p>",
        "id": 376124065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689617539
    },
    {
        "content": "<p>In my ideal world you can have <code>lake exe cache get</code> (which gives you the small oleans) and <code>lake exe cache get --all</code>  (or something) which gives you the full oleans (current behavior). Similarly there is a flag for building a Lean file with all/partial info.</p>",
        "id": 376124124,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689617560
    },
    {
        "content": "<p>do people care about elaborated proofs for anything other than axiom usage..?</p>",
        "id": 376125325,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689617911
    },
    {
        "content": "<p>I opened a RFC here: <a href=\"https://github.com/leanprover/lean4/pull/2328\">lean4#2328</a></p>",
        "id": 376125587,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689617988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> Floris's <code>to_additive</code> attribute operates on elaborated proofs for example (but that's not an olean concern, since the attribute is added in the same module (always?))</p>",
        "id": 376126368,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689618193
    },
    {
        "content": "<p>There are a few exceptions in <a href=\"https://github.com/leanprover-community/mathlib4/blob/ff552ca17e552370b41b488ef7adf1eaba7ccc24/Mathlib/Algebra/Group/Defs.lean#L91\"><code>Algebra.Group.Defs</code></a> and <a href=\"https://github.com/leanprover-community/mathlib4/blob/ff552ca17e552370b41b488ef7adf1eaba7ccc24/Mathlib/Init/ZeroOne.lean#L42\"><code>Init.ZeroOne</code></a>, but other than that they are indeed always added in the same file AFAIK.</p>",
        "id": 376138756,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689621386
    },
    {
        "content": "<p>Another thing to consider: If proofs were removed from some variety of olean, Lake would not rebuild downstream files if the proofs changed (e.g., are golfed), which could be quite nice in many situations.</p>",
        "id": 376204176,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689645306
    },
    {
        "content": "<p>unfortunately I doubt that would work because the olean files also include the <code>declarationRanges</code> data, i.e. line/col for every declaration, which is invalidated by most non-whitespace changes</p>",
        "id": 376206326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689646411
    },
    {
        "content": "<p>the ilean too (this even contains the locations of local variables in the code IIRC)</p>",
        "id": 376206359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689646429
    },
    {
        "content": "<p>ooc, why is that in the olean?</p>",
        "id": 376228286,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689658084
    },
    {
        "content": "<p>so that go-to-def works</p>",
        "id": 376228326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689658105
    },
    {
        "content": "<p>ooh!</p>",
        "id": 376228335,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689658113
    },
    {
        "content": "<p>that explains why out of sync olean files cause the go to def to be all funky :)</p>",
        "id": 376228417,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689658193
    },
    {
        "content": "<p>Would it be feasible to put that information into a separate file, only read by interactive tools, but not when just compiling downstream modules? This way, some recompilation could be avoided without losing that feature.</p>",
        "id": 376293265,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1689675528
    },
    {
        "content": "<p>Yes, the .ilean files are already a first step in that direction. This is all part of the module system plan (TBD).</p>",
        "id": 376297298,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689676367
    },
    {
        "content": "<p>Exciting! :-)</p>",
        "id": 376340008,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1689685114
    }
]