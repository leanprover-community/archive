[
    {
        "content": "<p>Hello everyone, I am new in Lean4 and I am doing the exercise in Functional Programming 4. 1 Positive Numbers Ex3 HTTP Requests. I implemented the HTTPHandler with the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">HTTPHandler</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HTTPMethod</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HTTPHandler</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">method</span> <span class=\"n\">url</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">method</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"GET\"</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing GET request to \"</span> <span class=\"bp\">++</span>  <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"POST\"</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing POST request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"PUT\"</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing PUT request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"DELETE\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing DELETE request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>the problem that I have encountered into is in the line<br>\n<code> | \"GET\"     =&gt; IO.println $ \"Performing GET request to \" ++  url</code><br>\npart : <code>\"Performing GET request to \" ++  url</code><br>\nI get  failed to synthesize instance<br>\n  HAppend String IO.RealWorld ?m.43200<br>\nI am confused, haven't I specify that url is a type of String? why I get this problem and any clue to debug.<br>\nusing Lean4.0</p>",
        "id": 356832028,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683588533
    },
    {
        "content": "<p>another question is that I use the function below to testHarness</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testHarness</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HTTPHandler</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"n\">where</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.GET</span>   <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.POST</span>  <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.PUT</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.hanld</span> <span class=\"n\">HTTPMethod.DELET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>I face the problem in the first line with <br>\nexpected ':=' or '|'<br>\nbetween <code>GET</code> and <code>\"http://example.com\"</code></p>",
        "id": 356832253,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683588674
    },
    {
        "content": "<p>It's hard to say what the issue is without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> but I think the issue is that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> after the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span></span></span></span> as that's an implicit variable.</p>",
        "id": 356832256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683588675
    },
    {
        "content": "<p>the mwe are like below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- define structure of HTTP response</span>\n<span class=\"kd\">structure</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">status</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natToString</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toString</span> <span class=\"n\">n</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- define  a custom toString funct for HTTP response</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"o\">:</span> <span class=\"n\">HTTPResponse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"s2\">\"Status : \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">response.status</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Body: \"</span> <span class=\"bp\">++</span> <span class=\"n\">response.body</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.to_string</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- Define  a type class to</span>\n<span class=\"c1\">-- associate different IO actions with each HTTP methods</span>\n<span class=\"kd\">class</span> <span class=\"n\">HTTPHandler</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HTTPMethod</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HTTPHandler</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">method</span> <span class=\"n\">url</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">method</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"GET\"</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing GET request to \"</span> <span class=\"bp\">++</span>  <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"POST\"</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing POST request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"PUT\"</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing PUT request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"DELETE\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing DELETE request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testHarness</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HTTPHandler</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"n\">where</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.GET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.POST</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.PUT</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.hanld</span> <span class=\"n\">HTTPMethod.DELET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n\n<span class=\"c1\">-- run the  test harness in the IO monad</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">testHarness</span>\n\n<span class=\"c1\">-- Entry point to execute the IO action</span>\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 356832409,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683588767
    },
    {
        "content": "<p>Your mwe is missing the def of <code>HTTPMethod</code></p>",
        "id": 356832501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683588838
    },
    {
        "content": "<p>I am sorry, here is the complete one</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 3. HTTP</span>\n<span class=\"c1\">-- define inductive type for subset of HTTP method</span>\n<span class=\"kd\">structure</span> <span class=\"n\">HTTPMethod</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">method</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">HTTPSubset</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GET</span>\n  <span class=\"bp\">|</span> <span class=\"n\">POST</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PUT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DELETE</span>\n\n<span class=\"c1\">-- define structure of HTTP response</span>\n<span class=\"kd\">structure</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">status</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natToString</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toString</span> <span class=\"n\">n</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- define  a custom toString funct for HTTP response</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"o\">:</span> <span class=\"n\">HTTPResponse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"s2\">\"Status : \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">response.status</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Body: \"</span> <span class=\"bp\">++</span> <span class=\"n\">response.body</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.to_string</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- Define  a type class to</span>\n<span class=\"c1\">-- associate different IO actions with each HTTP methods</span>\n<span class=\"kd\">class</span> <span class=\"n\">HTTPHandler</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HTTPMethod</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HTTPHandler</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">method</span> <span class=\"n\">url</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">method</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">GET</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing GET request to \"</span> <span class=\"bp\">++</span>  <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"n\">POST</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing POST request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"n\">PUT</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing PUT request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"n\">DELETE</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing DELETE request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testHarness</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HTTPHandler</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"n\">where</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.GET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.POST</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.PUT</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.hanld</span> <span class=\"n\">HTTPMethod.DELET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n\n<span class=\"c1\">-- run the  test harness in the IO monad</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">testHarness</span>\n\n<span class=\"c1\">-- Entry point to execute the IO action</span>\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 356832682,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683588957
    },
    {
        "content": "<p>I made some change to the HTTPHandler, and it now faces the problem of \"redundant alternative\" since the second line <code> POST =&gt; </code>...<br>\nand the seconde problem in <code>testHarness</code> remains</p>",
        "id": 356832855,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683589069
    },
    {
        "content": "<p>that's the autoImplicit biting you.</p>",
        "id": 356833001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589133
    },
    {
        "content": "<p>Note that you defined <code>GET</code> etc. in <code>HTTPSubset</code> and not in <code>HTTPMethod</code>.</p>",
        "id": 356833063,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589176
    },
    {
        "content": "<p>Here's a modification of what you wrote, that works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 3. HTTP</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">HTTPMethod</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GET</span>\n  <span class=\"bp\">|</span> <span class=\"n\">POST</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PUT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DELETE</span>\n\n<span class=\"c1\">-- define structure of HTTP response</span>\n<span class=\"kd\">structure</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">status</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natToString</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toString</span> <span class=\"n\">n</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- define  a custom toString funct for HTTP response</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"o\">:</span> <span class=\"n\">HTTPResponse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"s2\">\"Status : \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">response.status</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Body: \"</span> <span class=\"bp\">++</span> <span class=\"n\">response.body</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.to_string</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- Define  a type class to</span>\n<span class=\"c1\">-- associate different IO actions with each HTTP methods</span>\n<span class=\"kd\">class</span> <span class=\"n\">HTTPHandler</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">HTTPMethod</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HTTPHandler</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">method</span> <span class=\"n\">url</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">method</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">GET</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing GET request to \"</span> <span class=\"bp\">++</span>  <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">POST</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing POST request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">PUT</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing PUT request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">DELETE</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing DELETE request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testHarness</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HTTPHandler</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"n\">where</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.GET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.POST</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.PUT</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n    <span class=\"n\">m.hanld</span> <span class=\"n\">HTTPMethod.DELET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n\n<span class=\"c1\">-- run the  test harness in the IO monad</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">testHarness</span>\n\n<span class=\"c1\">-- Entry point to execute the IO action</span>\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 356833166,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589235
    },
    {
        "content": "<p>Note the <code>.</code> in the <code>match</code> block. That's equivalent to writing <code>HTTPMethod.GET</code>, etc. Without the <code>.</code>, the <code>GET</code> gets interpreted as a name of a variable of an <em>arbitrary</em> element of <code>HTTPMethod</code>, which is why you got the redundant match error.</p>",
        "id": 356833305,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589331
    },
    {
        "content": "<p>Thank you soooo much, I understand the first problem</p>",
        "id": 356833385,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683589416
    },
    {
        "content": "<p>there's still an error in <code>testHardness</code>, but that's unrelated</p>",
        "id": 356833388,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589419
    },
    {
        "content": "<p>for the next error, you probably want some monad instance and use <code>do</code> notation (without semicolons)</p>",
        "id": 356833490,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589484
    },
    {
        "content": "<p>Yes, I still wonder what this testHarness problem really about, why I need : or = here, I modify it like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">testHarness</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">HTTPHandler</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.GET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n  <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.POST</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n  <span class=\"n\">m.handle</span> <span class=\"n\">HTTPMethod.PUT</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n  <span class=\"n\">m.hanld</span> <span class=\"n\">HTTPMethod.DELET</span> <span class=\"s2\">\"https://example.com\"</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>but it will have new problem like <br>\n\"<br>\ninvalid <code>do</code> notation, expected type is not a monad application<br>\n  m Unit<br>\nYou can use the <code>do</code> notation in pure code by writing <code>Id.run do</code> instead of <code>do</code>, where <code>Id</code> is the identity monad.<br>\n\"</p>",
        "id": 356833818,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683589717
    },
    {
        "content": "<p>What do you want <code>testHardness</code> to do? Should it return a bool?</p>",
        "id": 356833981,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589824
    },
    {
        "content": "<p>Anyway, this is a general functional programming issue, not really lean specific</p>",
        "id": 356834037,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589861
    },
    {
        "content": "<p>No, I want it to return Unit.</p>",
        "id": 356834078,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683589887
    },
    {
        "content": "<p>Ok, but what should this function do?</p>",
        "id": 356834121,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683589916
    },
    {
        "content": "<p>I just want to this function to execute <code>println</code> (since it is just an testing interface...)</p>",
        "id": 356834447,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683590134
    },
    {
        "content": "<p>Do you want something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 3. HTTP</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">HTTPMethod</span>\n  <span class=\"bp\">|</span> <span class=\"n\">GET</span>\n  <span class=\"bp\">|</span> <span class=\"n\">POST</span>\n  <span class=\"bp\">|</span> <span class=\"n\">PUT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DELETE</span>\n\n<span class=\"c1\">-- define structure of HTTP response</span>\n<span class=\"kd\">structure</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">status</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">string</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">natToString</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">toString</span> <span class=\"n\">n</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- define  a custom toString funct for HTTP response</span>\n<span class=\"kd\">def</span> <span class=\"n\">to_string</span> <span class=\"o\">(</span><span class=\"n\">response</span> <span class=\"o\">:</span> <span class=\"n\">HTTPResponse</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"s2\">\"Status : \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">response.status</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">Body: \"</span> <span class=\"bp\">++</span> <span class=\"n\">response.body</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">HTTPResponse</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x.to_string</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">HTTPResponse</span>\n\n<span class=\"c1\">-- Define  a type class to</span>\n<span class=\"c1\">-- associate different IO actions with each HTTP methods</span>\n<span class=\"kd\">class</span> <span class=\"n\">HTTPHandler</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">handle</span> <span class=\"o\">:</span> <span class=\"n\">HTTPMethod</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HTTPHandler</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">handle</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">method</span> <span class=\"n\">url</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">method</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">GET</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing GET request to \"</span> <span class=\"bp\">++</span>  <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">POST</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing POST request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">PUT</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing PUT request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">DELETE</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"bp\">$</span> <span class=\"s2\">\"Performing DELETE request to \"</span> <span class=\"bp\">++</span> <span class=\"n\">url</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">testHarness</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">HTTPHandler</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">HTTPHandler.handle</span> <span class=\"bp\">.</span><span class=\"n\">GET</span> <span class=\"s2\">\"https://example.com\"</span>\n  <span class=\"n\">HTTPHandler.handle</span> <span class=\"bp\">.</span><span class=\"n\">POST</span> <span class=\"s2\">\"https://example.com\"</span>\n  <span class=\"n\">HTTPHandler.handle</span> <span class=\"bp\">.</span><span class=\"n\">PUT</span> <span class=\"s2\">\"https://example.com\"</span>\n  <span class=\"n\">HTTPHandler.handle</span> <span class=\"bp\">.</span><span class=\"n\">DELETE</span> <span class=\"s2\">\"https://example.com\"</span>\n\n<span class=\"c1\">-- run the  test harness in the IO monad</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">testHarness</span>\n\n<span class=\"c1\">-- Entry point to execute the IO action</span>\n<span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">main</span>\n</code></pre></div>",
        "id": 356834679,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683590294
    },
    {
        "content": "<p>Yes, it is good enough for me. I think I need to know more about monad to understand th logic here</p>",
        "id": 356835672,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683590958
    },
    {
        "content": "<p>Thank you very much</p>",
        "id": 356835690,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1683590968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609478\">Meizu Fan</span> has marked this topic as resolved.</p>",
        "id": 356835698,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683590978
    }
]