[
    {
        "content": "<p>When running a lake script, is there a way to instruct the CLI interpreter to \"pass through\" some flags to the script's argument list, without them being interpreted as flags to <code>lake</code> itself? For example, if I have the following <code>lakefile.lean</code>, with the script <code>test</code> that runs a Lean-generated executable with arguments passed down from the command line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">require</span> <span class=\"n\">Cli</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover/lean4-cli\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">ex</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">ex</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runCmd</span> <span class=\"o\">(</span><span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ScriptM</span> <span class=\"bp\">$</span> <span class=\"n\">IO.Process.Output</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">cmd.splitOn</span> <span class=\"s2\">\" \"</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cmd</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">cmd</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">cmd</span> <span class=\"o\">::</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">args</span><span class=\"o\">⟩)</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span>          <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">h'</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.Process.output</span> <span class=\"o\">{</span>\n      <span class=\"n\">cmd</span>  <span class=\"o\">:=</span> <span class=\"n\">cmd</span>\n      <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args</span>\n    <span class=\"o\">}</span>\n  <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">{</span><span class=\"n\">exitCode</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">argsString</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">args.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">++</span> <span class=\"n\">arg</span>\n\n<span class=\"n\">script</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"running test script {args}...\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">{</span><span class=\"n\">exitCode</span><span class=\"o\">,</span> <span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span><span class=\"o\">}</span> <span class=\"bp\">←</span> <span class=\"n\">runCmd</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"lake exe ex{argsString args}\"</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">stderr</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">stdout</span>\n  <span class=\"n\">pure</span> <span class=\"n\">exitCode</span>\n</code></pre></div>\n<p>with <code>Main.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Cli</span>\n<span class=\"kn\">open</span> <span class=\"n\">Cli</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runExCmd</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Parsed</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">p.hasFlag</span> <span class=\"s2\">\"ex\"</span> <span class=\"k\">then</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Example flag was set.\"</span>\n\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exCmd</span> <span class=\"o\">:</span> <span class=\"n\">Cmd</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">Cli</span><span class=\"bp\">|</span>\n  <span class=\"n\">exCmd</span> <span class=\"n\">VIA</span> <span class=\"n\">runExCmd</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"s2\">\"0.0.1\"</span><span class=\"o\">]</span>\n  <span class=\"s2\">\"Example.\"</span>\n\n  <span class=\"n\">FLAGS</span><span class=\"o\">:</span>\n    <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ex</span><span class=\"bp\">;</span>      <span class=\"s2\">\"example flag\"</span>\n<span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span>\n  <span class=\"n\">exCmd.validate</span> <span class=\"n\">args</span>\n</code></pre></div>\n<p>I will get this error if I try to pass in the flag:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ lake run test -x\nerror: unknown short option '-x'\n</code></pre></div>\n<p><code>lake run test '-x'</code> gives the same error and <code>lake run test -- -x</code> seems to just ignore the flag. Could it be possible to pass down flags like this, or should I just make a different script for every flag combination that I need?</p>",
        "id": 407734447,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1702476447
    },
    {
        "content": "<p>Oops! This is a bug! <a href=\"https://github.com/leanprover/lean4/pull/3064\">lean4#3064</a> will fix this (and test it to make sure this bug doesn't happen again).</p>",
        "id": 407749829,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702480759
    },
    {
        "content": "<p>Great, thank you for the quick fix!</p>",
        "id": 407750522,
        "sender_full_name": "Rish Vaishnav",
        "timestamp": 1702480934
    }
]