[
    {
        "content": "<p>Hey, I'm not sure if there's already a thread for discussing this, but I wanted to start talking about what we envision as the best experience for dependency management in Lean4.</p>\n<p>Some questions:</p>\n<ul>\n<li>Do we need to ensure all dependencies are on the same Lean version? If so, how do we ensure these dependencies are on the same Lean version, when each dependency may only have releases for a subset of all Lean versions?</li>\n<li>What should the expectation be for library authors in terms of releasing updates for new lean versions?</li>\n<li>Should we find ways to support targeting multiple Lean versions? This is a feature in other build management systems which can be useful for ensuring we can line up all dependencies' lean versions</li>\n</ul>",
        "id": 299834610,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663702663
    },
    {
        "content": "<p>I do think multiple target is a very feasible solution here, particularly because of the metaprogramming facilities. It'd be cool if in your Lakefile you gave the list of target lean versions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span> <span class=\"bp\">...</span> <span class=\"o\">{</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">leanVersions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"o\">,</span>  <span class=\"mi\">2022</span><span class=\"bp\">-</span><span class=\"mi\">09</span><span class=\"bp\">-</span><span class=\"mi\">20</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and then there was a <code>leanVersion</code> flag somewhere so you could have conditional declarations depending on the version</p>",
        "id": 300064187,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663810945
    },
    {
        "content": "<p>This would definitely not be easy to support tooling-wise (the language server would probably just run on one version for the purposes of development), but I think at least having Lake support it would be feasible?</p>",
        "id": 300064229,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663810996
    },
    {
        "content": "<blockquote>\n<p>What should the expectation be for library authors in terms of releasing updates for new lean versions?</p>\n</blockquote>\n<p>For lean4-cli, I try to ensure that the library is updated on the same day it was broken on, and I only release updates for nightlies where the library had to be patched. If I was depending on something other than Lean 4 (I don't), I'd probably also try to ensure the same thing if a library update broke my library in-between the last nightly update of my library and now.</p>",
        "id": 300205268,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1663866223
    },
    {
        "content": "<p>Do you have some system in place to know when nightly breaks the library? (a daily CI job or something?)</p>",
        "id": 300217089,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663870098
    },
    {
        "content": "<p>Yup, it PMs me on Zulip: <a href=\"https://github.com/mhuisi/lean4-cli/blob/main/.github/workflows/check_nightly.yml\">https://github.com/mhuisi/lean4-cli/blob/main/.github/workflows/check_nightly.yml</a></p>",
        "id": 300220613,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1663871484
    },
    {
        "content": "<p>Ahh, it builds the nightly on a separate branch. Seems like it works well at the current pace of Lean updates :D</p>",
        "id": 300224611,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663872837
    },
    {
        "content": "<p>This also suggests one potential expectation for libraries, which is that the newest git version should successfully build on the newest git versions of all its dependencies and the latest nightly version of lean:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&lt;update toolchain to latest nightly&gt;\nlake update\nlake build <span class=\"c1\"># should return 0</span>\n</code></pre></div>\n<p>But of course that also expects libraries to update as frequently as daily, which seems impractical (particularly for libraries with many dependencies).</p>",
        "id": 300225060,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663872968
    },
    {
        "content": "<p>I'm getting the sense that Lake will need some way to pull revisions from git that aren't the latest, which I think would require either embedding that information in lakefiles somehow, or having an external crates.io-esque package registry that maintains a mapping of lean versions to package revisions</p>",
        "id": 300226069,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1663873304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.22Perfect.20world.22.20dependency.20management/near/300224611\">said</a>:</p>\n<blockquote>\n<p>Ahh, it builds the nightly on a separate branch. Seems like it works well at the current pace of Lean updates :D</p>\n</blockquote>\n<p>The separate branch is mostly so that folks can track the lean4-cli version that works with the most recent nightly in their lakefile without having to edit it (if they want to), similar to how <code>leanprover/lean4:nightly</code> refers to the most recent Lean 4 nightly. Meanwhile, <code>main</code> tracks the most recent milestone / full release for Lean 4.</p>",
        "id": 300227939,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1663873928
    },
    {
        "content": "<p>Does it only push to the branch if the build succeeds? I guess that makes sense</p>",
        "id": 300596503,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664066897
    },
    {
        "content": "<p>If the build fails, it notifies me on Zulip, I fix it, and then I push a new version for the new nightly.</p>",
        "id": 300668204,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1664122943
    },
    {
        "content": "<p>Based on what we've discussed so far, I think when updating dependencies we want to ask the question,</p>\n<blockquote>\n<p>What is the newest revision of &lt;dependency&gt; that builds successfully on &lt;lean version&gt;?</p>\n</blockquote>\n<p>Marc's been successful at keeping lean4-cli up to date, so that the newest git revision is always the answer to that question. But for less frequently updating repositories, it would be good to have some way to query for this.</p>\n<p>Maybe <a href=\"https://xubaiw.github.io/reservoir-index/\">Reservoir</a> can be modified to have HTTP GET endpoints to query this information?</p>",
        "id": 300701890,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1664150633
    },
    {
        "content": "<p>another thought to add to the perfect world dependency management: automated AST refactoring for breaking changes.</p>\n<p>if you make a breaking change in your library, you can add some meta code somewhere that tells lake how to automatically refactor user code around that breaking change. fearless refactors galore!</p>",
        "id": 306378375,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666849558
    },
    {
        "content": "<p>(Then when users run <code>lake update</code> or whatever, all the update scripts for those versions are executed on the project's code)</p>",
        "id": 306378493,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1666849627
    },
    {
        "content": "<p>I think I'd like to work on ^ soon. I've come to the conclusion that the perfect world would be Lean libraries where CI automatically PRs updates so that we can have a very quick turnaround updating long chains of library dependencies.</p>\n<p>LMK if you'd want to collaborate on this! (also looking for good name ideas, something to do with lakes/water bodies would be great)</p>",
        "id": 318918850,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1672619302
    }
]