[
    {
        "content": "<p>I've been trying to close this theorem for a while now, but it ends up on something I just don't know how to do anything about, really. The problem is if I can close this theorem with the goal I have now: <code>decide (x + n ≤ y + n) = decide (x ≤ y)</code>, or if there might be something different that I could have done on my definitions or on the theorem itself.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ListNat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isSorted</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Useful theorems</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">false_not_true</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_matters</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_eq_Add</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h'.symm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n'</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">succ_inj</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cons_one_neq_cons_more</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">lh</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">length_matters</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">lh</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_eq_Add</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"n\">lh</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addNat_zero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">addNat</span> <span class=\"n\">zero</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isSorted_addNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">isSorted</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span><span class=\"c1\">-- Preciso de 2 casos base.</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">hyp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">isSorted</span><span class=\"o\">,</span> <span class=\"n\">isSorted</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">l'</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cons_one_neq_cons_more</span> <span class=\"n\">h</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l'</span> <span class=\"n\">h'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cons_one_neq_cons_more</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">isSorted</span><span class=\"o\">,</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">isSorted</span><span class=\"o\">]</span>\n      <span class=\"n\">cases</span> <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.and_false</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_false</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bool.and_true</span><span class=\"o\">,</span> <span class=\"n\">Bool.and_true</span><span class=\"o\">]</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">1 goal</span>\n<span class=\"cm\">  case cons.cons.true</span>\n<span class=\"cm\">  nxy: Nat</span>\n<span class=\"cm\">  ys: ListNat</span>\n<span class=\"cm\">  hyp: isSorted (cons (y + n) (addNat n ys)) = isSorted (cons y ys)</span>\n<span class=\"cm\">  ⊢ decide (x + n ≤ y + n) = decide (x ≤ y)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 398300686,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1698157688
    },
    {
        "content": "<p>I think you need some more lemmas, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=decide_congr#doc\">docs#decide_congr</a> is the most important one. Are you trying to avoid using mathlib / std?<br>\nYou can still copy paste some useful lemmas from them even if you don't want to import anything, eg.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ListNat</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isSorted</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Useful theorems</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">false_not_true</span> <span class=\"o\">:</span>\n  <span class=\"n\">false</span> <span class=\"bp\">≠</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">length_matters</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l'</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l'</span> <span class=\"bp\">→</span> <span class=\"n\">length</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"n\">l'</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">succ_inj</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">succ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">not_eq_Add</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">h'.symm</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n'</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h'</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">succ_inj</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cons_one_neq_cons_more</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">¬</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">lh</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">length</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">length_matters</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">Nat.zero_add</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_succ</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">),</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">lh</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_eq_Add</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"n\">lh</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addNat_zero</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">addNat</span> <span class=\"n\">zero</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_zero</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addNat_nil</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addNat_cons</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mt</span> <span class=\"n\">h.2</span><span class=\"o\">,</span> <span class=\"n\">mt</span> <span class=\"n\">h.1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">decide_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">↔</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">decide_true</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">decide_iff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">of_decide_true</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">decide_iff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bool_iff_false</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">exact</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bool_eq_false</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bool_iff_false.1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">decide_false_iff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">bool_iff_false.symm.trans</span> <span class=\"o\">(</span><span class=\"n\">not_congr</span> <span class=\"o\">(</span><span class=\"n\">decide_iff</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">of_decide_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">decide_false_iff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">decide_false</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">decide_false_iff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">decide_congr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">q</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">decide</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">decide</span> <span class=\"n\">q</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">decide_false</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">h.1</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">of_decide_false</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">decide_true</span> <span class=\"o\">(</span><span class=\"n\">h.2</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">of_decide_true</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">isSorted_cons</span> <span class=\"o\">:</span> <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">m</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">add_le_add_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>  <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">isSorted_addNat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">isSorted</span> <span class=\"o\">(</span><span class=\"n\">addNat</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">isSorted</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span><span class=\"c1\">-- Preciso de 2 casos base.</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">hyp</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat_cons</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">,</span> <span class=\"n\">isSorted</span><span class=\"o\">,</span> <span class=\"n\">isSorted</span><span class=\"o\">]</span>\n      <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">l'</span> <span class=\"n\">h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cons_one_neq_cons_more</span> <span class=\"n\">h</span>\n      <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l'</span> <span class=\"n\">h'</span>\n      <span class=\"n\">exact</span> <span class=\"n\">cons_one_neq_cons_more</span> <span class=\"n\">h'</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hyp</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">addNat_cons</span><span class=\"o\">,</span> <span class=\"n\">isSorted_cons</span><span class=\"o\">,</span> <span class=\"n\">hyp</span><span class=\"o\">,</span> <span class=\"n\">isSorted_cons</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">decide_congr</span> <span class=\"n\">add_le_add_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 398306185,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698159406
    },
    {
        "content": "<p>Thank you, I'll try using that.</p>",
        "id": 398309256,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1698160344
    }
]