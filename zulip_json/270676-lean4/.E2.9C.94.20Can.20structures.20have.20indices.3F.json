[
    {
        "content": "<p>A basic question about foundations: can structures have <em>indices</em> (I know they can have parameters)? Any experts around?</p>",
        "id": 396000595,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696994982
    },
    {
        "content": "<p>Concretely, the code in <code>InferType.lean</code> for <code>inferProjType</code> suggests that they do not (which is what I thought) since the number of arguments of the type is supposed to be the number of parameters.</p>\n<p>The reason I am asking this is my attempts to port trepplein to Lean 4.</p>",
        "id": 396000928,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1696995183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you answer this? I can proceed trepplein implementation with a guess but that is not ideal.</p>",
        "id": 396013207,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697002829
    },
    {
        "content": "<p>No, structures can't have indices. In praticular, the kernel <a href=\"https://github.com/leanprover/lean4/blob/115991066d8b810e4ca32243dfa9d07538ed81f3/src/kernel/inductive.cpp#L27\">considers</a> an inductive to be \"structure-like\" iff it:</p>\n<ul>\n<li>has a single constructor</li>\n<li>is non-recursive</li>\n<li>has no indices</li>\n</ul>",
        "id": 396019488,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1697006135
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> has marked this topic as resolved.</p>",
        "id": 396032775,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697011573
    },
    {
        "content": "<p>Indices generally allow the choice of available constructors to definitionally depend on the choice of index value. For a single-constructor type, this amounts to saying \"You can build one if the index is this value:...\". This can be done propositionally by sticking an equality proof in a structure field.</p>",
        "id": 396038820,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1697013846
    },
    {
        "content": "<p>yet another application of Conor McBride's fording<br>\n<a href=\"/user_uploads/3121/OPvpjLz3ytNDV6XAxpnPaCrq/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OPvpjLz3ytNDV6XAxpnPaCrq/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OPvpjLz3ytNDV6XAxpnPaCrq/image.png\"></a></div>",
        "id": 396131968,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1697043429
    },
    {
        "content": "<p>Also known as \"the way GHC compiles GADTs\" :-) But yeah, learning that way of thinking really unlocked programming directly with recursors in my mind</p>",
        "id": 396162017,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1697056985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Can.20structures.20have.20indices.3F/near/396038820\">said</a>:</p>\n<blockquote>\n<p>Indices generally allow the choice of available constructors to definitionally depend on the choice of index value. For a single-constructor type, this amounts to saying \"You can build one if the index is this value:...\". This can be done propositionally by sticking an equality proof in a structure field.</p>\n</blockquote>\n<p>The equality type does have a single constructor and is (has to be) indexed. I assume the point of structures is that projections are automatically generated and the conditions are exactly those needed for this to make sense and behave correctly.</p>",
        "id": 396430995,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697177315
    }
]