[
    {
        "content": "<p>I have some questions about array literals.<br>\nThe following causes \"(deterministic) timeout at 'whnf' ...\" error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"mi\">14</span><span class=\"o\">,</span><span class=\"mi\">15</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">(deterministic) timeout at 'whnf', maximum number of heartbeats (200000) has been reached (use 'set_option maxHeartbeats &lt;num&gt;' to set the limit)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>1. Why does this happen? I think the array literal <code>#[...]</code> is identical to <code>[...].toArray</code> which the kernel understands as a sequence of <code>List.concat</code>, right?  So it may be slow, but timeout on 16 elements is surprising.</p>\n<p>2. What is the reason not just setting <code>#[...]</code> to be defeq to <code>Array.mk [...]</code>? If it is the runtime performance, then we can use <code>implemented_by</code>.</p>\n<p>3. In contrast to the above, the version below type checks within a second:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">6</span><span class=\"o\">,</span><span class=\"mi\">7</span><span class=\"o\">,</span><span class=\"mi\">8</span><span class=\"o\">,</span><span class=\"mi\">9</span><span class=\"o\">,</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">11</span><span class=\"o\">,</span><span class=\"mi\">12</span><span class=\"o\">,</span><span class=\"mi\">13</span><span class=\"o\">,</span><span class=\"mi\">14</span><span class=\"o\">,</span><span class=\"mi\">15</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">size</span> <span class=\"bp\">=</span> <span class=\"mi\">16</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>   <span class=\"c1\">-- `rfl` tactic is OK</span>\n</code></pre></div>\n<p>Strangely, the generated term, which <code>show_term</code> tactic shows, looks almost identical to the above version.<br>\nI have no idea what is going on. Do you have any ideas?</p>",
        "id": 395324042,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696623962
    },
    {
        "content": "<p>This is likely related to the issue being investigated in <a href=\"#narrow/stream/270676-lean4/topic/What.20is.20the.20elaborator.20doing.20in.20this.20example\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/What.20is.20the.20elaborator.20doing.20in.20this.20example</a></p>",
        "id": 395328141,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696626057
    },
    {
        "content": "<p>Indeed, I can confirm that the fix there fixes this issue as well</p>",
        "id": 395328539,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696626286
    },
    {
        "content": "<p>Can you add your testcase to <a href=\"https://github.com/leanprover/lean4/pull/2627\">lean4#2627</a>?</p>",
        "id": 395328623,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1696626349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span>  I did it.</p>",
        "id": 395330358,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1696627320
    }
]