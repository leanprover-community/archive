[
    {
        "content": "<p>Is it possible to parse and elaborate the expression <code>fun a: Nat =&gt; a + 1</code> without introducing a metavariable?</p>\n<p>When I parse and elaborate it with <code>Parser.runParserCategory</code> and then <code>Elab.Term.elabTerm (stx := syn) (expectedType? := .none)</code>,  a <code>OfNat.ofNat 1 ?</code> node is introduced in the resulting expression tree. This would normally not be a problem since <code>OfNat.ofNat</code> of a <code>Nat</code> is just identity, but having this metavariable makes it impossible to add the definition to an environment using <code>Environment.addDecl</code></p>",
        "id": 408208426,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702654502
    },
    {
        "content": "<p>Have you called <code>instantiateMVars</code> on the <code>Expr</code> after elaboration? This term should elaborate without any unsolved mvars.</p>",
        "id": 408209152,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702654740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20nat.20literal.20without.20introducing.20a.20metavariable/near/408209152\">said</a>:</p>\n<blockquote>\n<p>Have you called <code>instantiateMVars</code> on the <code>Expr</code> after elaboration? This term should elaborate without any unsolved mvars.</p>\n</blockquote>\n<p>Yes and it doesn't work because the mvar is just not assigned</p>",
        "id": 408209207,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702654759
    },
    {
        "content": "<p>Curious. Could you give an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 408209372,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702654807
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20nat.20literal.20without.20introducing.20a.20metavariable/near/408209372\">said</a>:</p>\n<blockquote>\n<p>Curious. Could you give an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">def</span> <span class=\"n\">ex</span><span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Nat → Nat\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"bp\">?.</span><span class=\"n\">toOption.get</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">declName</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">errToSorry</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n      <span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"s2\">\"fun (a: Nat) =&gt; a + 1\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"bp\">?.</span><span class=\"n\">toOption.get</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run'</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">declName</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">errToSorry</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n      <span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"kd\">constant</span> <span class=\"o\">:=</span> <span class=\"n\">Declaration.defnDecl</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkDefinitionValEx</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Mystery\"</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span>\n    <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkReducibilityHintsRegularEx</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.DefinitionSafety.safe</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">all</span> <span class=\"o\">:=</span> <span class=\"o\">[])</span>\n  <span class=\"k\">match</span> <span class=\"n\">env.addDecl</span> <span class=\"kd\">constant</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">options</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.MonadOptions.getOptions</span>\n      <span class=\"k\">let</span> <span class=\"n\">errorMessage</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">e.toMessageData</span> <span class=\"n\">options</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Failed to add decl: {errorMessage}\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">env'</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Success\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span><span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">Name.str</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span> <span class=\"s2\">\"Init\"</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}])</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span> <span class=\"o\">:</span> <span class=\"n\">Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">Name.anonymous</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;sandbox&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreM</span> <span class=\"o\">:=</span> <span class=\"n\">ex.run'</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">coreM.toIO</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">add</span> <span class=\"n\">decl</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">declaration</span> <span class=\"n\">has</span> <span class=\"n\">metavariables</span> <span class=\"bp\">'</span><span class=\"n\">Mystery'</span>\n</code></pre></div>",
        "id": 408210460,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702655197
    },
    {
        "content": "<p>You could try adding <code>instantiateMVars</code> and it won't work either. I also tried running both type and value in the same <code>TermElabM</code> context and it doesn't work</p>",
        "id": 408210625,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702655255
    },
    {
        "content": "<p>You need to resolve pending mvars, it's waiting until you tell it that more information isn't coming because the 1 could be in any of several types</p>",
        "id": 408211277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702655468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20nat.20literal.20without.20introducing.20a.20metavariable/near/408211277\">said</a>:</p>\n<blockquote>\n<p>You need to resolve pending mvars, it's waiting until you tell it that more information isn't coming because the 1 could be in any of several types</p>\n</blockquote>\n<p>but I enforced the function to be <code>Nat -&gt; Nat</code>. Is that not enough information? If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mystery</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>it would be legal Lean code</p>",
        "id": 408211381,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702655522
    },
    {
        "content": "<p>replace the <code>value &lt;-</code> part with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElabM</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"n\">Elab.Term.synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">x.run'</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">declName</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">errToSorry</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n      <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 408211983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702655757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20nat.20literal.20without.20introducing.20a.20metavariable/near/408211983\">said</a>:</p>\n<blockquote>\n<p>replace the <code>value &lt;-</code> part with</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Elab.Term.TermElabM</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">type</span><span class=\"o\">)</span>\n    <span class=\"n\">Elab.Term.synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"bp\">←</span> <span class=\"n\">x.run'</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n      <span class=\"n\">declName</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">,</span>\n      <span class=\"n\">errToSorry</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n      <span class=\"o\">})</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>thanks! that worked. Does <code>synthesizeSyntheticMVarsNoPostponing</code> deduce the type instance based on the expected type function? I changed <code>Nat -&gt; Nat</code> to <code>Nat -&gt; Int</code> and it still works so I'm curious</p>",
        "id": 408212758,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702656008
    },
    {
        "content": "<p>I think even without the <code>NoPostponing</code> part this example will still work, you just need to run the synthesis loop or else they will be left pending</p>",
        "id": 408215619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702656846
    },
    {
        "content": "<p>basically, term elaborators are not required to always give an answer immediately, anything which wants to wait until later will return a metavariable instead and add it to a pending list for retrying</p>",
        "id": 408215797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702656913
    },
    {
        "content": "<p>:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Using.20a.20nat.20literal.20without.20introducing.20a.20metavariable/near/408215619\">said</a>:</p>\n<blockquote>\n<p>I think even without the <code>NoPostponing</code> part this example will still work, you just need to run the synthesis loop or else they will be left pending</p>\n</blockquote>\n<p>I tried it and it doesn't work without <code>synthesizeSyntheticMVarsNoPostponing</code> (i.e. with <code>instantiateMVars</code> only). By synthesis loop do you mean finding the stuck mvars and instantiating them?</p>",
        "id": 408217704,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1702657551
    },
    {
        "content": "<p>no I mean using <code>synthesizeSyntheticMVars</code> instead</p>",
        "id": 408217810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702657585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 408217859,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702657610
    }
]