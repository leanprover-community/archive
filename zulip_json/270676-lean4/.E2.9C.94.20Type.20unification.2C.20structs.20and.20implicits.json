[
    {
        "content": "<p>Dear all, I'm writing a generic stream library to power a generic megaparsec clone.</p>\n<p>My path of dropping the openness ambition took me from multiparameter typeclasses with associated types and associated instances all the way down to having a really closed system where I just offer one stream iterator type per taxonomy of streams and stream-like things, which is highly polymorphic. I don't want to sacrifice polymorphism for a number of reasons, not least of which is that I want to have the same user code to be able to be launched against real world and against some testing monads. So yes, I want my stuff to be polymorphic, but I'm okay for my stuff to be closed, i.e. non-extendable by the user.</p>\n<p>However, even my least ambitious attempt failed the moment I've started introducing constraints. Here is a clean, representative example of what I mean: <a href=\"https://github.com/yatima-inc/straume/blob/cognivore/generic-programming-in-lean-is-pain/Straume/WonkyConstraint.lean#L24\">https://github.com/yatima-inc/straume/blob/cognivore/generic-programming-in-lean-is-pain/Straume/WonkyConstraint.lean#L24</a></p>",
        "id": 289588967,
        "sender_full_name": "cognivore",
        "timestamp": 1657803914
    },
    {
        "content": "<p>Ideally, I would like to be able to just say <code>def flipTakeN := fun n x =&gt; takeN x n</code> and <code>def take1 := flipTakeN 1</code> or <code>def take1 := fun x =&gt; takeN x 1</code>.</p>\n<p>Note that <code>takeN</code> implementation is replaced by a dummy implementation, just to be sure that there is an implementation for that type.</p>",
        "id": 289589169,
        "sender_full_name": "cognivore",
        "timestamp": 1657804036
    },
    {
        "content": "<p>Note: the link above takes you to a self-contained code, ready to be copied and pasted to a clean Lean file</p>",
        "id": 289589823,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657804428
    },
    {
        "content": "<p>I made it even shorter!</p>",
        "id": 289590326,
        "sender_full_name": "cognivore",
        "timestamp": 1657804673
    },
    {
        "content": "<p>You say that you don't want to sacrifice polymorphism, but do you definitely need <em>universe</em> polymorphism as well? It's always easier to assume everything is in <code>Type</code> if that works for all your use cases.</p>",
        "id": 289590406,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657804701
    },
    {
        "content": "<p>That's a tough one! While working on Megaparsec, I sacrificed universe polymorphism, and then there was a higher universe object that I couldn't work into the system without bringing it back. Sadly I don't remember particular details, but I think it was some associated type port.</p>",
        "id": 289590523,
        "sender_full_name": "cognivore",
        "timestamp": 1657804788
    },
    {
        "content": "<p>I was considering sacrificing it yesterday, when I hit this block, but after that experience, I'm kind of scared :)</p>",
        "id": 289590595,
        "sender_full_name": "cognivore",
        "timestamp": 1657804814
    },
    {
        "content": "<p>Thanks for encouraging to explore it, I'll try and see if it helps.</p>",
        "id": 289590628,
        "sender_full_name": "cognivore",
        "timestamp": 1657804845
    },
    {
        "content": "<p>The current <code>bind</code> constrains you to a single universe anyway, though see also the concurrent thread <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a></p>",
        "id": 289591191,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657805149
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 289591384,
        "sender_full_name": "cognivore",
        "timestamp": 1657805253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> thanks for \"un <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> ing\" the question, kinda! However I think the original question still holds: why doesn't <span class=\"user-mention\" data-user-id=\"507516\">@cognivore</span>'s example typecheck?</p>",
        "id": 289591833,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657805454
    },
    {
        "content": "<p>Sorry I was thanking you for your answers but I didn't mean to ask that question directly to you. Anyone's insights are welcome <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 289592634,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1657805820
    },
    {
        "content": "<p>If we look at <code>takeN</code>'s type with <code>pp.universes</code>, I don't think it's too surprising that Lean has troubles filling in universe levels in this case.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">)}</span> <span class=\"bp\">→</span>\n      <span class=\"n\">RSI.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">t</span> <span class=\"bp\">→</span>\n        <span class=\"n\">Nat</span> <span class=\"bp\">→</span>\n          <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Emit.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n            <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Monad.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n              <span class=\"n\">m</span>\n                <span class=\"o\">(</span><span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Array.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"n\">RSI.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_2</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>In particular, note that <code>u_1</code> and <code>u_2</code> occur only inside <code>max</code> terms. Thus Lean would have to solve unification issues such as <code>max ?u_2 ?u_1 =?= max ?u_2' ?u_1'</code> by guessing <code>?u_2 := ?u_2', ?u_1 := ?u_1'</code>, but that is not the correct solution in all cases.</p>",
        "id": 289593530,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657806236
    },
    {
        "content": "<p><code>max</code> is usually introduced when independently defined universe variables become dependent after all. In this case, <code>RSI</code> contains an application of <code>m</code> but is itself used in an <code>m</code> application in the type of <code>takeN</code>, so the input and output universes of <code>m</code> are not independent after all</p>",
        "id": 289595320,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657807129
    },
    {
        "content": "<p>Indeed, <code>takeN {m : Type u → Type u} ...</code> resolves the issue</p>",
        "id": 289595519,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1657807209
    },
    {
        "content": "<p>Gah, so it was a thinking error. :)</p>",
        "id": 289595599,
        "sender_full_name": "cognivore",
        "timestamp": 1657807254
    },
    {
        "content": "<p>I remember writing <code>max</code> by hand when \"merging\" two independent things, but due to lack of experience, I can't read pp.universes (which is very conveniently printed in error messages) well enough just yet.</p>",
        "id": 289595790,
        "sender_full_name": "cognivore",
        "timestamp": 1657807334
    },
    {
        "content": "<p>Thank you so much, Sebastian, your answers are highly appreciated :)</p>",
        "id": 289595836,
        "sender_full_name": "cognivore",
        "timestamp": 1657807360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"507516\">cognivore</span> has marked this topic as resolved.</p>",
        "id": 289596056,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657807460
    },
    {
        "content": "<p>You might like to see proofs about lean3 parsers! And the TC-based proof system we built for it. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/parser.nat_eq_done\">docs#parser.nat_eq_done</a></p>",
        "id": 289603838,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1657810935
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Type.20unification.2C.20structs.20and.20implicits/near/289591191\">said</a>:</p>\n<blockquote>\n<p>The current <code>bind</code> constrains you to a single universe anyway, though see also the concurrent thread <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a></p>\n</blockquote>\n<p>Note that this is not necessarily a problem, as one can define a <code>ULiftT</code> transformer and use it as the top-level monad for <code>bind</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"n\">s</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ULiftT</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">act</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">run</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">act</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">Pure</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">act</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mk</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">bind</span> <span class=\"n\">act.run</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">run</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">a.down</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">ULiftT.</span><span class=\"o\">{</span><span class=\"n\">r</span><span class=\"o\">,</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">ULiftT.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">ULiftT.bind</span>\n</code></pre></div>\n<p>As long as the monads one uses can be lifted to the <code>ULiftT m</code> monad, everything can be universe polymorphic.</p>",
        "id": 289621529,
        "sender_full_name": "Mac",
        "timestamp": 1657819016
    },
    {
        "content": "<p>Sadly, the same does not apply to <code>PLift</code>, since the <code>Monad</code> classes are polymorphic over <code>Type</code>, not <code>Sort</code>.</p>",
        "id": 289621612,
        "sender_full_name": "Mac",
        "timestamp": 1657819056
    }
]