[
    {
        "content": "<p>There are some one-field structures in Lean code (see examples below). IIRC, creating an element of a new one-field structure is an unnecessary allocation. Is there a reason to do this, instead of just using the type of that field?</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FilePath</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MessageLog</span> <span class=\"n\">where</span>\n  <span class=\"n\">msgs</span> <span class=\"o\">:</span> <span class=\"n\">PersistentArray</span> <span class=\"n\">Message</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">String.Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">byteIdx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Could be just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MessageLog</span> <span class=\"o\">:=</span> <span class=\"n\">PersistentArray</span> <span class=\"n\">Message</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.Pos</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>(default values could be provided by <code>Zero</code> instances)</p>",
        "id": 394807669,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1696414969
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Polynomial#doc\">docs#Polynomial</a> is another example.  In this case, I think that one of the main motivation for cutting the <code>DefEq</code> was that there were continuous \"leaks\" and the implementation sometimes surfaced where it was undesirable.</p>",
        "id": 394808608,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1696415244
    },
    {
        "content": "<p>The compiler is smart enough to optimize these away.</p>",
        "id": 394810516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696415705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/270676-lean4/topic/One-field.20structures.20in.20Lean.20code/near/394807669\">said</a>:</p>\n<blockquote>\n<p>There are some one-field structures in Lean code (see examples below). IIRC, creating an element of a new one-field structure is an unnecessary allocation. Is there a reason to do this, instead of just using the type of that field?</p>\n<p>Examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">FilePath</span> <span class=\"n\">where</span>\n  <span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MessageLog</span> <span class=\"n\">where</span>\n  <span class=\"n\">msgs</span> <span class=\"o\">:</span> <span class=\"n\">PersistentArray</span> <span class=\"n\">Message</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">String.Pos</span> <span class=\"n\">where</span>\n  <span class=\"n\">byteIdx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>Could be just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MessageLog</span> <span class=\"o\">:=</span> <span class=\"n\">PersistentArray</span> <span class=\"n\">Message</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">String.Pos</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>(default values could be provided by <code>Zero</code> instances)</p>\n</blockquote>\n<p>If you use them in proofs, I recommend using <code>abbrev</code> instead of def</p>",
        "id": 394831735,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1696423248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> <a href=\"#narrow/stream/270676-lean4/topic/One-field.20structures.20in.20Lean.20code/near/394807669\">said</a>:</p>\n<blockquote>\n<p>Is there a reason to do this, instead of just using the type of that field?</p>\n</blockquote>\n<p>Yes, a structure wrapper prevents Lean from automatically coercing between the wrapper type and the wrapped type (i.e., using a <code>Nat</code> where a <code>String.Pos</code> is expected or vice versa works without error with a <code>def</code> but produces a type error with a structure wrapper).</p>",
        "id": 394858665,
        "sender_full_name": "Mac Malone",
        "timestamp": 1696431112
    },
    {
        "content": "<p>Thank you for answers!</p>",
        "id": 394927777,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1696459965
    }
]