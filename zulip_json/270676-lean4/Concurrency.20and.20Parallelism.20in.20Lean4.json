[
    {
        "content": "<p>I'm trying to make some code that runs in parallel in Lean4 and I would like to know some things before starting:</p>\n<ul>\n<li>can IO.asTask cause data races if I'm using IO.Ref?</li>\n<li>Are there Atomics like Rust or C++ in Lean4 or IO.Ref?</li>\n<li>Is IO.Ref atomic?</li>\n</ul>",
        "id": 388744909,
        "sender_full_name": "Sofia Rodrigues",
        "timestamp": 1693695934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481858\">@Felipe GS</span> Some quick answers:</p>\n<ul>\n<li>Yes</li>\n<li>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Mutex#doc\">docs4#IO.Mutex</a> which works like an <code>IO.Ref</code>, but can be accessed atomically via the aptly named <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Mutex.atomically#doc\">docs4#IO.Mutex.atomically</a>.</li>\n<li>No</li>\n</ul>",
        "id": 388752946,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693701604
    },
    {
        "content": "<p>Is there something similar to OCaml's Atomic.t?</p>",
        "id": 388755936,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1693702862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Concurrency.20and.20Parallelism.20in.20Lean4/near/388752946\">said</a>:</p>\n<blockquote>\n<p>There is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Mutex#doc\">docs4#IO.Mutex</a></p>\n</blockquote>\n<p>Those docs specifically state that <code>IO.Ref</code> uses atomics!</p>",
        "id": 388794833,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693727879
    },
    {
        "content": "<p>Underdefined terms such as \"data race\" and \"atomic\" are a bit dangerous to use without further specification. I think the strongest statement we can make about <code>IO.Ref</code> is that its operations are guaranteed to be sequentially consistent (a very strong definition of \"data race freedom\") but they may not necessarily be implemented as only a single atomic CPU instruction (they do the best they can in a reference-counted object model).</p>",
        "id": 388795373,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693728269
    },
    {
        "content": "<p>As I use <code>IO.Ref</code> quite a bit, could someone clarify when it is <em>unsafe</em> to use but <code>IO.Mutex</code> can be used safely (and how)?</p>",
        "id": 388816004,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1693741969
    },
    {
        "content": "<p><em>Unsafe</em> use should, hopefully!, be restricted to <code>unsafe</code> functions. The only difference between the two types is the kind of lock used as (briefly) described in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Mutex#doc\">docs4#IO.Mutex</a>. In short, prefer <code>Mutex</code> when you spend more than a trivial amount of time inside the critical section (<code>Ref.modify*</code>/<code>Mutex.atomically*</code>).</p>",
        "id": 388824846,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693746913
    },
    {
        "content": "<p>If you want to speak in kernel terms an <code>IO.Ref</code> is a spinlock and a <code>IO.Mutex</code> is a sleep lock I assume?</p>",
        "id": 388824884,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1693746947
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Concurrency.20and.20Parallelism.20in.20Lean4/near/388794833\">said</a>:</p>\n<blockquote>\n<p>Those docs specifically state that <code>IO.Ref</code> uses atomics!</p>\n</blockquote>\n<p>Fair enough! However, when I think of an atomic reference, I think of a reference one can modify (e.g., via <code>modify</code>) without race conditions. From past experience, this is not possible with <code>IO.Ref</code> and that is why <code>IO.Mutex</code> was introduced. If I understand correctly, the atomicity of <code>IO.Ref</code> is for its load and store operations (e.g., <code>set</code>, <code>get</code>) to prevent data corruption (and ensure proper reference counting).</p>",
        "id": 388852657,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693767645
    },
    {
        "content": "<p>I've already stated that <code>Ref.modify</code> is (supposed to be) a critical section and what the difference between the two types is, I'm not sure how I can be more clear here. Should there really be a bug, let's file an issue.</p>",
        "id": 388863101,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1693775548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> No, sorry, you were clear! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I was just detailing the difference I observed and why I didn't think of <code>IO.Ref</code> as atomic in my initial answer.</p>",
        "id": 388893513,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693795097
    }
]