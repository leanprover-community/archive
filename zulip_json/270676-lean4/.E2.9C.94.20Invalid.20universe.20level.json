[
    {
        "content": "<p>I'm trying to define a <code>Future</code> type that represents a delayed computation on a stream:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Future</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">read</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Future</span> <span class=\"n\">ByteArray</span>\n  <span class=\"bp\">|</span> <span class=\"n\">immediate</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Future</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">compute</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">future</span> <span class=\"o\">:</span> <span class=\"n\">Future</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">computation</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Future</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Future</span> <span class=\"n\">Y</span>\n</code></pre></div>\n<p>The idea is a future can either be a delayed read from the stream <code>Future.read n</code>, a value immediately available <code>Future.immediate x</code>, or a computation delayed until the value of the future becomes available <code>future.compute (fun x =&gt; ...)</code>. I would then use the Future as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">evaluate</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">future</span> <span class=\"o\">:</span> <span class=\"n\">Future</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">stream</span> <span class=\"o\">:</span> <span class=\"n\">IO.FS.Stream</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">future</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Future.read</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">stream.read</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Future.immediate</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Future.compute</span> <span class=\"n\">future</span> <span class=\"n\">computation</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">evaluate</span> <span class=\"n\">future</span> <span class=\"n\">stream</span>\n    <span class=\"n\">evaluate</span> <span class=\"o\">(</span><span class=\"n\">computation</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">stream</span>\n</code></pre></div>\n<p>The problem is I get an error on the <code>Future.immediate</code> and <code>Future.compute</code> constructors in the the definition of <code>Future</code></p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>invalid universe level in constructor 'Future.immediate', parameter 'X' has type\n  Type\nat universe level\n  2\nit must be smaller than or equal to the inductive datatype universe level\n</code></pre></div>\n<p>Why is Lean not allowing me to define this type, and is there anything I can do to make it work?</p>",
        "id": 386497142,
        "sender_full_name": "James Randolf",
        "timestamp": 1692664683
    },
    {
        "content": "<p>Changing it to <code>inductive Future : Type → Type 1</code> has fixed that.</p>",
        "id": 386501773,
        "sender_full_name": "James Randolf",
        "timestamp": 1692666987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"632831\">James Randolf</span> has marked this topic as resolved.</p>",
        "id": 386501776,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692666989
    }
]