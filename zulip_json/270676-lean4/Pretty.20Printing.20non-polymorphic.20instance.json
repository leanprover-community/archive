[
    {
        "content": "<p>Is there a way to print polymorphic operators so they point to the exact instance being instantiated? e.g. In a context of <code>n m : Nat</code>, have <code>n + m</code> being prettyprinted as <code>Nat.add n m</code>?</p>\n<p>I have this script for printing expressions: (It is a bit long but most of it deals with setting options)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">str_to_name</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s.splitOn</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">Name.str</span> <span class=\"n\">Name.anonymous</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subroutine</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">str_to_name</span> <span class=\"s2\">\"Nat.add_comm\"</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">info</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"Not found\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">format</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Meta.ppExpr</span> <span class=\"n\">info.toConstantVal.type</span>\n    <span class=\"n\">IO.println</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"n\">format</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">setOptionFromString'</span> <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:</span> <span class=\"n\">Options</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Options</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ps</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">entry.splitOn</span> <span class=\"s2\">\"=\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">String.trim</span>\n  <span class=\"k\">let</span> <span class=\"o\">[</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">val</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"n\">ps</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"s2\">\"invalid configuration option entry, it must be of the form '&lt;key&gt; = &lt;value&gt;'\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"n\">key</span>\n  <span class=\"k\">let</span> <span class=\"n\">defValue</span> <span class=\"bp\">←</span> <span class=\"n\">getOptionDefaultValue</span> <span class=\"n\">key</span>\n  <span class=\"k\">match</span> <span class=\"n\">defValue</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofString</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setString</span> <span class=\"n\">key</span> <span class=\"n\">val</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofBool</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">val</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"true\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setBool</span> <span class=\"n\">key</span> <span class=\"n\">true</span>\n    <span class=\"bp\">|</span> <span class=\"s2\">\"false\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setBool</span> <span class=\"n\">key</span> <span class=\"n\">false</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Bool option value '{val}'\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofName</span> <span class=\"n\">_</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setName</span> <span class=\"n\">key</span> <span class=\"n\">val.toName</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofNat</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">val.toNat</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Nat option value '{val}'\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setNat</span> <span class=\"n\">key</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofInt</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">val.toInt</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Int option value '{val}'\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">opts.setInt</span> <span class=\"n\">key</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">DataValue.ofSyntax</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"invalid Syntax option value\"</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">Environment</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"Init\"</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreM</span> <span class=\"o\">:=</span> <span class=\"n\">Meta.MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Term.TermElabM.run'</span> <span class=\"n\">subroutine</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"s2\">\"PrintExpr\"</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">args.foldlM</span> <span class=\"n\">setOptionFromString'</span> <span class=\"n\">Lean.Options.empty</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">coreM.run'</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toBaseIO</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exception</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← exception.toMessageData.toString}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span>            <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Finished\"</span>\n</code></pre></div>\n<p>When I run this with <code>pp.explicit</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lean<span class=\"w\"> </span>--run<span class=\"w\"> </span>Examples/PrintExpr.lean<span class=\"w\"> </span>pp.explicit<span class=\"o\">=</span><span class=\"nb\">true</span>\n</code></pre></div>\n<p>it gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>How can I make this print <code>Nat.add m n</code> instead of <code>HAdd</code>?</p>",
        "id": 362129958,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685440656
    },
    {
        "content": "<p>The operation there is <code>HAdd.hAdd</code> so it wouldn't really make sense to pretty-print it as anything else. You could either normalize the term so that definitional unfolding gets you <code>Nat.add</code> (but it might normalize further without stopping at that), or write some custom code to see through type class instances and find out that in this case the instance points to <code>Nat.add</code>.</p>",
        "id": 362171816,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1685450717
    },
    {
        "content": "<p>Maybe just beta-reducing <code>@HAdd.hAdd Nat Nat Nat (instHAdd...)</code> (without <code>m</code> and <code>n</code>) would be enough?</p>",
        "id": 362172706,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1685450917
    },
    {
        "content": "<p>A general heuristic would be to unfold TC instance projections, but I'm not sure if that might be overzealous.</p>",
        "id": 362173222,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1685451028
    },
    {
        "content": "<p>(Another way to put it is that pretty printing sometimes works modulo alpha-equivalence but does not do general definitional computation.)</p>",
        "id": 362177316,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1685451906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20Printing.20non-polymorphic.20instance/near/362171816\">said</a>:</p>\n<blockquote>\n<p>The operation there is <code>HAdd.hAdd</code> so it wouldn't really make sense to pretty-print it as anything else. You could either normalize the term so that definitional unfolding gets you <code>Nat.add</code> (but it might normalize further without stopping at that), or write some custom code to see through type class instances and find out that in this case the instance points to <code>Nat.add</code>.</p>\n</blockquote>\n<p>which normalisation function should I call?</p>",
        "id": 362231412,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685462870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"599027\">@Leni V. Aniva</span> what are you trying to do that needs this? It sounds like a bit of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. There is a function <a href=\"https://github.com/ufmg-smite/lean-smt/blob/97ee62a1a639ff74b75108a2cb083dc10d138ad8/Smt/Util.lean#L103\">here</a> in LeanSMT that does a similar thing.</p>",
        "id": 362568799,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1685566075
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20Printing.20non-polymorphic.20instance/near/362568799\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni V. Aniva</span> what are you trying to do that needs this? It sounds like a bit of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. There is a function <a href=\"https://github.com/ufmg-smite/lean-smt/blob/97ee62a1a639ff74b75108a2cb083dc10d138ad8/Smt/Util.lean#L103\">here</a> in LeanSMT that does a similar thing.</p>\n</blockquote>\n<p>I promise this isn't an xy problem. I need the concrete instantiated functions to train ML algorithms</p>",
        "id": 362614667,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685587964
    },
    {
        "content": "<p>printing the instance itself would be sufficient to disambiguate it if that's what you want</p>",
        "id": 362615238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685588346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20Printing.20non-polymorphic.20instance/near/362615238\">said</a>:</p>\n<blockquote>\n<p>printing the instance itself would be sufficient to disambiguate it if that's what you want</p>\n</blockquote>\n<p>Do you mean with <code>pp.instances</code>? Even with these options set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--pp.instances=true --pp.notation=false --pp.instanceTypes=true      20:03:03</span>\n</code></pre></div>\n<p>I get this for <code>Nat.add_comm</code>, which does not show the instances</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362615672,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685588640
    },
    {
        "content": "<p><code>pp.explicit</code> should work</p>",
        "id": 362615769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685588680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20Printing.20non-polymorphic.20instance/near/362615769\">said</a>:</p>\n<blockquote>\n<p><code>pp.explicit</code> should work</p>\n</blockquote>\n<p>if this is the only solution I'll just settle for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">Nat</span> <span class=\"n\">instAddNat</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 362615916,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685588773
    },
    {
        "content": "<p>I think that in general it's not really well defined what the answer is if you want something else</p>",
        "id": 362616179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685588978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Pretty.20Printing.20non-polymorphic.20instance/near/362616179\">said</a>:</p>\n<blockquote>\n<p>I think that in general it's not really well defined what the answer is if you want something else</p>\n</blockquote>\n<p>I see. Thanks! I'll just have to have the ML model work harder</p>",
        "id": 362616188,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685588995
    }
]