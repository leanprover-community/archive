[
    {
        "content": "<p>Hi guys! I was reading the demo code of applying <strong>RPC method</strong> in <code>#widget</code> (from the <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html\">User Widgets</a> on Lean Manual), I found:</p>\n<p>While the demo code of <strong>RPC method</strong> in <code>#widget</code> can access the access the <code>structure</code>, <code>def</code> and <code>axiom</code>, it is unable to access the <code>theorem</code> and <code>lemma</code>. (The <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html\">User Widgets</a> manual stated the goal of the demo code below is to implement a <code>#check</code> command using <code>#widget</code> and <strong>RPC method</strong>)</p>\n<p>Sorry I'm not familiar with the meta-programming parts in Lean, so can somebody offer a solution to it? Thanks a lot!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> Demo code copied from **RPC method** in `#widget` -/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Widget</span> <span class=\"n\">Server</span> <span class=\"n\">RequestM</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">GetTypeParams</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span>\n  <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Lsp.Position</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span>\n\n<span class=\"kd\">@[server_rpc_method]</span>\n<span class=\"kd\">def</span> <span class=\"n\">getType</span> <span class=\"o\">(</span><span class=\"n\">params</span> <span class=\"o\">:</span> <span class=\"n\">GetTypeParams</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RequestM</span> <span class=\"o\">(</span><span class=\"n\">RequestTask</span> <span class=\"n\">CodeWithInfos</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withWaitFindSnapAtPos</span> <span class=\"n\">params.pos</span> <span class=\"k\">fun</span> <span class=\"n\">snap</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">runTermElabM</span> <span class=\"n\">snap</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstNoOverloadCore</span> <span class=\"n\">params.name</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.getConst</span><span class=\"bp\">?</span> <span class=\"n\">name</span>\n        <span class=\"bp\">|</span> <span class=\"n\">throwThe</span> <span class=\"n\">RequestError</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">invalidParams</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"no constant named '{name}'\"</span><span class=\"o\">⟩</span>\n      <span class=\"n\">Widget.ppExprTagged</span> <span class=\"n\">c.type</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> I only removed the `input` part and keep the rest of the code and functionalities unchanged -/</span>\n\n<span class=\"kd\">@[widget]</span>\n<span class=\"kd\">def</span> <span class=\"n\">checkWidget</span> <span class=\"o\">:</span> <span class=\"n\">UserWidgetDefinition</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"#check as a service\"</span>\n  <span class=\"n\">javascript</span> <span class=\"o\">:=</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">import * as React from 'react';</span>\n<span class=\"s2\">const e = React.createElement;</span>\n<span class=\"s2\">import { RpcContext, InteractiveCode, useAsync, mapRpcError } from '@leanprover/infoview';</span>\n\n<span class=\"s2\">export default function(props) {</span>\n<span class=\"s2\">  const rs = React.useContext(RpcContext)</span>\n\n<span class=\"s2\">  const st = useAsync(() =&gt;</span>\n<span class=\"s2\">    rs.call('getType', { name: props.name, pos: props.pos }), [props.name, rs, props.pos])</span>\n\n<span class=\"s2\">  const type = st.state === 'resolved' ? st.value &amp;&amp; e(InteractiveCode, {fmt: st.value})</span>\n<span class=\"s2\">    : st.state === 'rejected' ? e('p', null, mapRpcError(st.error).message)</span>\n<span class=\"s2\">    : e('p', null, 'Loading..')</span>\n\n<span class=\"s2\">  return e('div', null, type)</span>\n<span class=\"s2\">}</span>\n<span class=\"s2\">\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addition_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">#check as a service</span>\n<span class=\"cm\">ℕ → Prop</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">widget</span> <span class=\"n\">checkWidget</span> <span class=\"o\">(</span><span class=\"n\">Json.mkObj</span> <span class=\"o\">[(</span><span class=\"s2\">\"name\"</span><span class=\"o\">,</span> <span class=\"s2\">\"is_zero\"</span><span class=\"o\">)])</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">#check as a service</span>\n<span class=\"cm\">Rpc error: InvalidParams: no constant named 'addition_comm'</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">widget</span> <span class=\"n\">checkWidget</span> <span class=\"o\">(</span><span class=\"n\">Json.mkObj</span> <span class=\"o\">[(</span><span class=\"s2\">\"name\"</span><span class=\"o\">,</span> <span class=\"s2\">\"addition_comm\"</span><span class=\"o\">)])</span>\n</code></pre></div>\n<p>Besides, I also noticed this demo code for <code>#widget</code> isn't actually serving the same functionality as <code>#check</code>, since their outputs for types are different. So how can I let the <strong>RPC method</strong> here return the type of <code>#check</code> style?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> code continued -/</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Line2D</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Messages (1)</span>\n<span class=\"cm\">Line2D.mk (a b c : ℝ) (h : a ≠ 0 ∨ b ≠ 0) : Line2D</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Line2D.mk</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">#check as a service</span>\n<span class=\"cm\">(a b : ℝ) → ℝ → a ≠ 0 ∨ b ≠ 0 → Line2D</span>\n<span class=\"cm\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">widget</span> <span class=\"n\">checkWidget</span> <span class=\"o\">(</span><span class=\"n\">Json.mkObj</span> <span class=\"o\">[(</span><span class=\"s2\">\"name\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Line2D.mk\"</span><span class=\"o\">)])</span>\n</code></pre></div>",
        "id": 386517861,
        "sender_full_name": "Louis Liu",
        "timestamp": 1692674939
    },
    {
        "content": "<p>Something is not right with your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>: I get an error on the <code>open Server RequestM</code> line.</p>",
        "id": 386520239,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692676040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.23widget.20questions.20about.20RPC.20method.20demo/near/386520239\">said</a>:</p>\n<blockquote>\n<p>Something is not right with your <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>: I get an error on the <code>open Server RequestM</code> line.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Oops, sorry. I've added the missing components, can you please check it again, thanks!</p>",
        "id": 386521473,
        "sender_full_name": "Louis Liu",
        "timestamp": 1692676676
    },
    {
        "content": "<p>Yes, it is strange. In <code>Lean/Meta/Basic.lean</code> we find</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getTheoremInfo</span> <span class=\"o\">(</span><span class=\"n\">info</span> <span class=\"o\">:</span> <span class=\"n\">ConstantInfo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">ConstantInfo</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">shouldReduceAll</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">some</span> <span class=\"n\">info</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>and I don't understand why we would want to do that.</p>",
        "id": 386522204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692676988
    },
    {
        "content": "<p>This appears to be a bug. Do you think you could minimize it? There's nothing about widgets involved here, just running <code>Meta.getConst? `addition_comm</code> in an #eval should expose the problem.</p>",
        "id": 386522432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692677103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.23widget.20questions.20about.20RPC.20method.20demo/near/386522432\">said</a>:</p>\n<blockquote>\n<p>This appears to be a bug. Do you think you could minimize it? There's nothing about widgets involved here, just running <code>Meta.getConst? `addition_comm</code> in an #eval should expose the problem.</p>\n</blockquote>\n<p>Ahh thanks!! Should I report this bug on the <a href=\"https://github.com/leanprover/lean4\">Lean4 repo</a>?</p>",
        "id": 386523146,
        "sender_full_name": "Louis Liu",
        "timestamp": 1692677516
    },
    {
        "content": "<p>Perhaps post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> here first so someone can sanity check for you.</p>",
        "id": 386523253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692677559
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.23widget.20questions.20about.20RPC.20method.20demo/near/386522432\">said</a>:</p>\n<blockquote>\n<p>This appears to be a bug. Do you think you could minimize it? There's nothing about widgets involved here, just running <code>Meta.getConst? `addition_comm</code> in an #eval should expose the problem.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Sorry for the late response. I tried <code>#eval</code> and found:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a_is_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addition_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">expression</span>\n<span class=\"cm\">  Meta.getConst? `addition_comm</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  MetaM (Option ConstantInfo)</span>\n<span class=\"cm\">but instance</span>\n<span class=\"cm\">  MetaEval (MetaM (Option ConstantInfo))</span>\n<span class=\"cm\">failed to be synthesized, this instance instructs Lean on how to display the resulting value, recall that any type implementing the `Repr` class also implements the `Lean.MetaEval` class</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Meta.getConst</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">addition_comm</span>\n</code></pre></div>\n<p>Does it mean I have to build an <code>instance</code> of class <code>Repr</code> to get the <code>#eval</code> to work here since Lean is unable to synthesize a <code>MetaEval</code> instance for our <code>MetaM (Option ConstantInfo)</code> type?</p>",
        "id": 386698454,
        "sender_full_name": "Louis Liu",
        "timestamp": 1692739902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"617128\">@Louis Liu</span> the issue is that Lean does not know what to do with <code>ConstantInfo</code> as a returned value because it seems to have no pretty-printing instances. You can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ci</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.getConst</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">addition_comm</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{ci.map ConstantInfo.type}\"</span>\n</code></pre></div>",
        "id": 386702470,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1692741733
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/.23widget.20questions.20about.20RPC.20method.20demo/near/386702470\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"617128\">Louis Liu</span> the issue is that Lean does not know what to do with <code>ConstantInfo</code> as a returned value because it seems to have no pretty-printing instances. You can do</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ci</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.getConst</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">addition_comm</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{ci.map ConstantInfo.type}\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> It works! Thank you so much!</p>",
        "id": 386702728,
        "sender_full_name": "Louis Liu",
        "timestamp": 1692741870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"617128\">@Louis Liu</span>, sorry I didn't catch this earlier, but the explanation is that <code>Meta.getConst?</code> is not the intended public API here, and you should be using <code>Lean.getConstInfo</code>. I will try to improve the docs!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a_is_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">addition_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info: Nat -&gt; Prop</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ci</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">`</span><span class=\"n\">a_is_zero</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{ci.type}\"</span>\n\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">info: forall (a : Nat) (b : Nat), Eq.{1} Nat (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) a b) (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) b a)</span>\n<span class=\"sd\">-/</span>\n<span class=\"bp\">#</span><span class=\"n\">guard_msgs</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CoreM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ci</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">`</span><span class=\"n\">addition_comm</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{ci.type}\"</span>\n</code></pre></div>\n<p>works as expected.</p>",
        "id": 386976229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692843614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thank you so much for the clarification!</p>",
        "id": 386979094,
        "sender_full_name": "Louis Liu",
        "timestamp": 1692845615
    }
]