[
    {
        "content": "<p>There are two ways that Lean can tell you \"you should have made this <code>noncomputable</code>\". One is the nice error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to compile definition, consider marking it as 'noncomputable' because it depends on 'Classical.choose', and it does not have executable code\n</code></pre></div>\n<p>but there's a much messier one where you get something like</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>compiler IR check failed at '_example._rarg', error: unknown declaration 'MvPolynomial.instCommRingMvPolynomial'\n</code></pre></div>\n<p>which people occasionally ask about on the Zulip (because it's not clear how to fix this unless you know the trick). Can someone tell me how to trigger this error with a simple example?</p>",
        "id": 392195719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695238483
    },
    {
        "content": "<p>The second error is not an error the user made but the fact that it wasn't caught earlier is a bug. If this message shows up it means you are already several steps into code generation and something went wrong along the way so these should not occur in a bug free compiler. And then you can silence them by using <code>noncomputable</code> because that disables code generation. But really whenever this happens this should be reported as a bug to core.</p>",
        "id": 392199801,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695240497
    },
    {
        "content": "<p>I want to test the conjecture that if a file in a project has an <code>example</code> which throws that error then if you <code>lake build</code> twice, the second time there is no error reported. Sounds unlikely but I'm trying to figure out what happened to me earlier when I thought a build was compiling but it was actually failing because of an example throwing that error.</p>",
        "id": 392200171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695240684
    },
    {
        "content": "<p>Here's an example using mathlib (due to Antoine Chambert-Loir):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">RingQuot.instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">compiler IR check failed at 'foo._rarg', error: unknown declaration 'MvPolynomial.instCommRingMvPolynomial'</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>but I'm having trouble minimising. Here's an attempt:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">MvP</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">Prod</span> <span class=\"n\">α</span> <span class=\"bp\">$</span> <span class=\"n\">Fin</span> <span class=\"bp\">$</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Rng</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">MvP.instCommRingMvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Rng</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Rng</span> <span class=\"o\">(</span><span class=\"n\">MvP</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Rng.instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Rng</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rng</span> <span class=\"o\">(</span><span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">42</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">MvP</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MvP</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Rng</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Rng</span> <span class=\"o\">(</span><span class=\"n\">Quot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Rng.instCommRingRingQuotToSemiringToCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">MvP</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it doesn't work. I'm wondering whether it doesn't work because I am not very good at making things which the compiler can see are actually noncomputable. In Lean 3 you would get an error if you marked something computable as noncomputable, but I'm just realising that Lean 4 doesn't do this (for example I thought <code>MvP</code> was noncomputable but now I realise it's not). I wonder whether actually making these things noncomputable would make my example work.</p>",
        "id": 392211877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695246386
    },
    {
        "content": "<p><code>def MvP (α : Type) : Type := Classical.choose (⟨Nat, rfl⟩ : (∃ X : Type, 1=1))</code>. How can that be computable? How do I make a noncomputable type?</p>",
        "id": 392212078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695246554
    },
    {
        "content": "<p>Terms of type <code>Sort u</code> don't have a  (meaningful) runtime representation for all <code>u</code> so there is no way to make them noncomputable.</p>",
        "id": 392212387,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695246729
    },
    {
        "content": "<p>You basically have to think of it like this: If the type checker already confirms to us that the code is valid there is no reason to keep types around at runtime, no matter how funkily computed they are, we already have a proof (via the type checker) that the code is not going to behave in ways that do not interact properly with the data that it is given.</p>",
        "id": 392212502,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695246814
    },
    {
        "content": "<p>In addition to this we can also erase all proofs since propositions are subsingletons so there is no reason to keep them around either. Both of these properties allow us to write code that uses a lot of dependent types and proofs with very little cost as we can strip all of this away after the fact and quite often the generated code ends up looking at least very closed to the code you would've written if you had just not involved proofs. A good example of this is a subtype <code>val : {x : Nat // P x}</code> val will have the same runtime representation as <code>val' : Nat</code>.</p>",
        "id": 392212780,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695246993
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">More</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">More</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Sub</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n<span class=\"c1\">-- compiler IR check failed at 'foo._rarg', error: unknown declaration 'bar'</span>\n</code></pre></div>",
        "id": 392214215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695247785
    },
    {
        "content": "<p>I think this is essentially a duplicate of <a href=\"https://github.com/leanprover/lean4/issues/1785\">https://github.com/leanprover/lean4/issues/1785</a>. I'll add Mario's minimization to that issue.</p>",
        "id": 392221039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695252342
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">    </span>compilation<span class=\"w\"> </span><span class=\"m\">89</span>.7s\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span>new<span class=\"w\"> </span>397ms\n</code></pre></div>\n<p>I like the new compiler :)</p>",
        "id": 392342481,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695309187
    },
    {
        "content": "<p>to be fair, the new compiler isn't done yet</p>",
        "id": 392342764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695309249
    }
]