[
    {
        "content": "<p>I've been thinking about slowness in mathlib4 algebra for the last couple of days; I didn't solve anything but at least I understand a lot more about it than I did, so I thought I would write some kind of overview because I need to go on to other things right now, at least for the next couple of days.</p>\n<h2>Overview</h2>\n<p>The changes in the way typeclass inference works have meant that some mathlib4 files (as directly ported from mathlib3) are much slower than the corresponding mathlib3 versions. On the other hand the community is learning more about these changes and modifying mathlib4 code so that it compiles more quickly; e.g. some algebra files involving adjoining roots and splitting fields are faster than they were.</p>\n<p>Currently a poster child for mathlib4 slowness is <code>Mathlib.RingTheory.Kaehler</code>. Sixteen times in this 700 line file the default <code>maxHeartbeats</code> or <code>synthInstance.maxHeartbeats</code> needs to be raised. One of the first times this happens is in the definition <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=KaehlerDifferential.D#doc\">docs#KaehlerDifferential.D</a> , where <a href=\"https://github.com/leanprover-community/mathlib4/blob/9a53c460a3275f0e7b948599b4b4d9e9fd589dc4/Mathlib/RingTheory/Kaehler.lean#L217-L218\">this rewrite</a> takes over six seconds. The culprit is <code>LinearMap.map_smul_of_tower</code>. Indeed simply elaborating <code>LinearMap.map_smul_of_tower</code> takes over three seconds on my machine. Here's how you can see this at home:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Kaehler</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">KaehlerDifferential</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">40000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span>\n<span class=\"n\">LinearMap.map_smul_of_tower</span> <span class=\"o\">(</span><span class=\"n\">Ideal.toCotangent</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- [Elab.command] [3.303770s] example := ...</span>\n</code></pre></div>\n<p>Adding the expected type just makes it slower:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">40000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Ideal.toCotangent</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">Ideal.toCotangent</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">LinearMap.map_smul_of_tower</span> <span class=\"o\">(</span><span class=\"n\">Ideal.toCotangent</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- [Elab.command] [4.228826s] example ...</span>\n</code></pre></div>\n<p>I should say that I'm using Ubuntu on a relatively new machine (12th Gen Intel(R) Core(TM) i7-12700).</p>\n<h2>Debugging</h2>\n<p>If you pipe the output of the trace to a file you can get a feeling for what is going on. This shows up 72 times:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">037281</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span>\n</code></pre></div>\n<p>(Well, that's what it looks like for me because I'm working on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6123\">this branch</a>: right now on master the RHS is called <code>Algebra.TensorProduct.instSemiringTensorProductToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToModuleToModule</code> because of <a href=\"https://github.com/leanprover/lean4/pull/2343\">lean4#2343</a> ). </p>\n<p>These terms are both terms of type <code>Semiring (S ⊗[R] S)</code> and are syntactically unequal, and Lean is spending 0.03 to 0.04 seconds, 72 times, showing that they're defeq (which they are). These computations explain the vast majority of the 3.3 seconds which Lean is spending elaborating this term. The proofs are everywhere. For example, the initial elaboration of the 3-second example above very quickly breaks up into ten pieces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">079087</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n          <span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">term</span>\n        <span class=\"o\">(</span><span class=\"n\">Ideal.toCotangent</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">230184</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">074836</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule.addCommMonoid</span>\n          <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule.addCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">108451</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">284854</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">539433</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">075252</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule.module</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule.module</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">313167</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">131442</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">382991</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LinearMap.CompatibleSMul</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>and in each of these pieces the calculation is performed several times; indeed for the quicker calculations you can guess the number of times it is performed by looking at the largest multiple of 0.033 which goes into the total time taken. For example the calculation is performed three times in <code>[Meta.synthInstance] [0.108451s] ✅ AddCommMonoid (Ideal.Cotangent (KaehlerDifferential.ideal R S)) ▶</code>, and four times in <code>[Meta.synthInstance] [0.131442s] ✅ Module (S ⊗[R] S) (Ideal.Cotangent (KaehlerDifferential.ideal R S)) ▶</code>. If I counted correctly it's performed 31 times in <code>[Meta.synthInstance] [1.382991s] ✅ LinearMap.CompatibleSMul ...</code>. Here is an example of the trace for one of the <code>SMul</code> instances, unfolded until we run into the six instances of <code>CommSemiring.toSemiring =?= Algebra.TensorProduct.instSemiring</code> which I didn't unfold any further.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">329439</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">264434</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">Submodule.smul</span> <span class=\"n\">to</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[</span><span class=\"n\">tryResolve</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">264337</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">≟</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[</span><span class=\"n\">isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">264010</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul</span> <span class=\"bp\">?</span><span class=\"n\">m.6952</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.6958</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">263974</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.6958</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">263941</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.6958</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">263934</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">=?=</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.6958</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087328</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087319</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041345</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041224</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041213</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041178</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">176046</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SetLike.instMembership</span> <span class=\"bp\">=?=</span> <span class=\"n\">SetLike.instMembership</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">176027</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SetLike.instMembership</span> <span class=\"bp\">=?=</span> <span class=\"n\">SetLike.instMembership</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087993</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087984</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041296</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041809</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041796</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041760</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087950</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule.setLike</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule.setLike</span> <span class=\"bp\">▼</span>\n                        <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">087940</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule.setLike</span> <span class=\"bp\">=?=</span> <span class=\"n\">Submodule.setLike</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041624</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041409</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[</span><span class=\"n\">delta</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041397</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toModule</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041359</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">024370</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">IsScalarTower.right</span> <span class=\"n\">to</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n      <span class=\"o\">[</span><span class=\"n\">check</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012651</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Submodule.smul</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n<h2>Details of the instance check.</h2>\n<p>Here's some code which just isolates the instance check (always modulo <a href=\"https://github.com/leanprover-community/mathlib4/pull/6123\">#6123</a>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Kaehler</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">KaehlerDifferential</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(on master it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRingTensorProductToCommSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonAssocRingToRingToModuleToSemiringToCommSemiringToModuleToSemiringToCommSemiring</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiringTensorProductToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToModuleToModule</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>).</p>\n<p>The relevant instances are this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instCommRing</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toRing</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"o\">(</span><span class=\"n\">proof</span> <span class=\"n\">omitted</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instRing</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">add_left_neg</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n    <span class=\"o\">(</span><span class=\"mi\">12</span> <span class=\"n\">more</span> <span class=\"n\">proofs</span> <span class=\"n\">omitted</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 378451154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690287199
    },
    {
        "content": "<h2>It's not about paths in the instance graph!</h2>\n<p>There are two routes from <code>CommRing</code> to <code>Semiring</code>, the \"canonical\" one via <code>Ring</code> and the \"to be discouraged\" one via <code>CommSemiring</code>. Note that <code>CommRing</code> extends <code>Ring</code> first, and <code>Ring</code> extends <code>Semiring</code> first. For a while I had assumed that the problem was that Lean was getting from <code>instCommRing</code> to <code>instSemiring</code> via the non-canonical route (this is what things like <a href=\"https://github.com/leanprover-community/mathlib4/pull/5959\">#5959</a> are about -- trying to change things so that Lean takes the canonical route as often as possible). But I was wrong! Let's change the route to the canonical one: it is still not instant!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- [Elab.command] [0.088639s]</span>\n</code></pre></div>\n<p>This for me is very surprising, and might mean that I've missed something. This proof is 0.02 seconds of boilerplate and then two instance of the dreaded 0.03 seconds of <code>Algebra.TensorProduct.instSemiring =?= Ring.toSemiring</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035774</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n        <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035685</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">=?=</span> <span class=\"bp\">?</span><span class=\"n\">m.2025</span> <span class=\"bp\">=</span> <span class=\"bp\">?</span><span class=\"n\">m.2025</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035634</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">035610</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">031654</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">031642</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>So why is this taking so long? Because checking this many times seems inevitable.</p>\n<h2>The innards of the instance check.</h2>\n<p>It's taking ages because Lean unfolds <code>Algebra.TensorProduct.instSemiring</code> (which is big) instead of unfolding <code>Ring.toSemiring</code> first. Let's see what happens if we guide Lean in the right direction:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">delta</span> <span class=\"n\">Ring.toSemiring</span>\n  <span class=\"n\">delta</span> <span class=\"n\">CommRing.toRing</span>\n  <span class=\"c1\">-- ⊢ Algebra.TensorProduct.instCommRing.1.1 = Algebra.TensorProduct.instSemiring</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c1\">-- [Elab.command] [0.023775s]</span>\n</code></pre></div>\n<p>The 0.02 seconds is just setting stuff up, as far as I can see; the difference between this and the 0.08 seconds is the two 0.03 seconds it's taking to prove <code>Ring.toSemiring =?= Algebra.TensorProduct.instSemiring</code> twice via unfolding <code>Algebra.TensorProduct.instSemiring</code>. I know these are all very small numbers but the point is that this is happening 150 times in that <code>rw</code> I linked to, and 150*0.03 is over 4 seconds.</p>\n<p>So let's stop guiding Lean and see what it actually does when proving <code>@Ring.toSemiring (S ⊗[R] S) (@CommRing.toRing (S ⊗[R] S) Algebra.TensorProduct.instCommRing) = Algebra.TensorProduct.instSemiring</code>. Here's the trace up to the first bifurcation. As you can see, Lean first unfolds the <code>Algebra.TensorProduct.instSemiring</code> which it finds on the RHS, and a few lines later unfolds the one which it finds on the LHS! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033624</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033609</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033523</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span><span class=\"bp\">;</span>\n            <span class=\"k\">let</span> <span class=\"n\">src_1</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span><span class=\"bp\">;</span>\n            <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033516</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Ring.toSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033511</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">CommRing.toRing.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033415</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">inferInstance</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033408</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033375</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span><span class=\"bp\">;</span>\n                      <span class=\"k\">let</span> <span class=\"n\">src_1</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span><span class=\"bp\">;</span>\n                      <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033368</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">014229</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">npowRec</span> <span class=\"bp\">=?=</span> <span class=\"n\">npowRec</span> <span class=\"bp\">▶</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016571</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalSemiring.mk</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.mk</span> <span class=\"n\">_</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Once both <code>instSemiring</code> terms are unfolded (which takes under 1ms, it's super-quick), Lean ends up ultimately having to prove <code>[] [0.033368s] ✅ Semiring.mk _ _ npowRec =?= Semiring.mk _ _ npowRec</code>. Now as far as I can see these terms are now <em>syntactically equal</em>. So I am quite confused about why this takes 33ms, because I thought that it was easy to check that syntactically equal terms were equal by <code>rfl</code>.</p>\n<p>But I think it must be because the terms are, erm, large. With <code>pp.all</code> on, the last reasonable term in the trace looks like this (the <code>=?=</code> is two lines from the bottom) (this is the line <code>[] [0.033609s] ✅ Ring.toSemiring =?= Algebra.TensorProduct.instSemiring ▼</code> in the above trace) (it's a different run so the timings are slightly different). This is just before Lean unfolds the <code>instSemiring</code> on the RHS.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">032140</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">S</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span> <span class=\"n\">S</span> <span class=\"n\">S</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocRing.toNonUnitalNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toNonAssocRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">)))))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.TensorProduct.instCommRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span>\n                <span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">))</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">Algebra.TensorProduct.instSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">)</span> <span class=\"n\">S</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span> <span class=\"n\">S</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">))</span> <span class=\"n\">inst</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>The next line in the un-<code>pp.all</code> trace is <code>[] [0.033523s] ✅ Ring.toSemiring =?= let src := inferInstance; let src_1 := inferInstance; Semiring.mk _ _ npowRec</code> (the disastrous choice of unfolding the RHS rather than the LHS). You can see the <code>pp.all</code> output of this next line <a href=\"https://gist.github.com/kbuzzard/ffb9977dfd9e81b25b71f29a8617479e\">here</a>; the <code>=?=</code> is still 30 or so lines down but we now have 2500 lines of <code>pp.all</code> unfolded <code>let src := inferInstance; let src_1 := inferInstance; Semiring.mk _ _ npowRec</code> in all their glory.</p>\n<p>I would be interested in getting a bit further down the trace with <code>pp.all</code> on so I can see whether by the time Lean has unfolded both <code>instSemiring</code>s the resulting <code>[] [0.033368s] ✅ Semiring.mk _ _ npowRec =?= Semiring.mk _ _ npowRec ▼</code> really is a syntactic equality. Unfortunately VS Code hangs before I can get to it, and piping the <code>pp.all</code> output to a file also fails; Lean uses all 32 gigs of ram on my machine and then gives up.</p>\n<p>So that's a summary of my understanding of why we need to bump up the <code>maxHeartbeats</code> <a href=\"https://github.com/leanprover-community/mathlib4/blob/86c30b0e4eae5787b6ac98f686c913299c36e1e7/Mathlib/RingTheory/Kaehler.lean#L206\">here</a> and I suspect that it will be a similar story for the rest of the file, because mathematically this is just the statement that <code>Ideal.toCotangent (ideal R S)</code> is <code>S</code>-linear, which is a basic fact and which will show up all over the place in the file.</p>",
        "id": 378451267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690287226
    },
    {
        "content": "<p>The current record holder for max heart beats is <code>AlgebraicGeometry.Morphisms.RingHomProperties</code> with <a href=\"https://github.com/leanprover-community/mathlib4/blob/86c30b0e4eae5787b6ac98f686c913299c36e1e7/Mathlib/AlgebraicGeometry/Morphisms/RingHomProperties.lean#L305\">this line</a> responsible. I piped the term generated by this line with <code>pp.explicit</code> to a text file. It was 1/2 Gb.</p>",
        "id": 378459521,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690288744
    },
    {
        "content": "<p>To even get here, I had to turn off instance synthesis and use unification or Lean would run away and seemingly never return.</p>",
        "id": 378460813,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690288983
    },
    {
        "content": "<p>Right now I’m in the “terms too big “ camp but I don’t know how the corresponding code in Lean 3 compares.</p>",
        "id": 378461270,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690289089
    },
    {
        "content": "<p>Are the terms the same size and handled more nimbly? Or has there been a blow up?</p>",
        "id": 378461746,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690289175
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/ffb9977dfd9e81b25b71f29a8617479e\">https://gist.github.com/kbuzzard/ffb9977dfd9e81b25b71f29a8617479e</a> (starting after the <code>=?=</code> on line 30) is unfolded <code>Algebra.TensorProduct.instSemiring</code> with <code>pp.all</code> on (2500 lines). <a href=\"https://github.com/leanprover-community/mathlib4/blob/4fef7ea95e8fceebb310ea5d6ce7342c6501d499/Mathlib/RingTheory/TensorProduct.lean#L439-L460\">This</a> is the Lean code which generates that term.</p>",
        "id": 378462506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690289314
    },
    {
        "content": "<p>But what is frustrating is that Lean doesn't need to unfold that term at all -- it occurs on both the LHS and RHS of a defeq check. Unfortunately if you make it irreducible a bunch of proofs break.</p>",
        "id": 378463024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690289410
    },
    {
        "content": "<p>The line I cite was an <code>erw</code> in Lean 3 to begin with. It wasn’t snappy but I could work with it on my RPi</p>",
        "id": 378463538,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690289517
    },
    {
        "content": "<p>Can you trim fields in that instance?</p>",
        "id": 378463992,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690289597
    },
    {
        "content": "<p>I am sure that one can make that instance smaller. Is this the right approach? Here is a minimised example of <code>rfl</code> making a bad life decision (on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6123\">#6123</a> , which is now being dealt with by bors) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Kaehler</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instRing</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- 0.08 seconds</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instRing</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">delta</span> <span class=\"n\">Ring.toSemiring</span>\n  <span class=\"n\">rfl</span> <span class=\"c1\">-- 0.02 seconds</span>\n</code></pre></div>\n<p>The 0.06 seconds of difference comes from <code>Algebra.TensorProduct.instSemiring = Algebra.TensorProduct.instSemiring</code> being instant as it stands, but if you unfold both sides it takes 0.03 seconds to check that they're syntactically equal and Lean does it twice (once when solving for a metavariable and once again when it's solved for it).</p>",
        "id": 378465688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690289926
    },
    {
        "content": "<p>Is 2500 lines reasonable for a <code>pp.all</code> instance? If it isn't then this is an argument for minimising that <code>instSemiring</code> term regardless.</p>",
        "id": 378466105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690290001
    },
    {
        "content": "<p>Why am I telling Lean about <code>add</code>, <code>zero</code>, and all their properties if that should be coming from the two instances? This confused me in Lean 3. When porting lines like this, they often caused problems. </p>\n<p>It looks like <code>zero</code>, <code>add</code>, <code>add_assoc</code>, <code>zero_add</code>, <code>add_zero</code> are all extraneous.</p>",
        "id": 378474069,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690291436
    },
    {
        "content": "<p>I get a cryptic error if I comment out <code>add_comm</code></p>",
        "id": 378474539,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690291516
    },
    {
        "content": "<p>Can remove <code>nsmul_succ</code> also but the same form of error for <code>natCast_succ</code></p>",
        "id": 378475063,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690291587
    },
    {
        "content": "<p>Also <code>one</code> can be removed</p>",
        "id": 378476274,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690291795
    },
    {
        "content": "<p>Hmm, I broke things further down in the file</p>",
        "id": 378477579,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690292029
    },
    {
        "content": "<p>Does replacing <code>(by infer_instance : AddCommMonoid (A ⊗[R] B)) with</code> with <code>toSomething := infer_instance</code> help at all here?</p>",
        "id": 378484836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690293290
    },
    {
        "content": "<p>Well</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span>\n<span class=\"bp\">#</span><span class=\"n\">align</span> <span class=\"n\">semiring</span> <span class=\"n\">Semiring</span>\n</code></pre></div>\n<p>so </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span>\n    <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span>\n    <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span>\n    <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span>\n    <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoid.nsmul_succ</span>\n    <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoidWithOne.natCast_succ</span>\n    <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.zero_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- port note : `left_distrib` and `right_distrib` are proved by `simp` in mathlib3</span>\n    <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">]</span>\n    <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n      <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.add_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>is in some sense quite chaotic; it's not extending either <code>AddMonoidWithOne</code> or <code>AddCommMonoid</code>.</p>",
        "id": 378553850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690305775
    },
    {
        "content": "<p>Yes, you'd need to write <code>toNonUnitalSemiring := { toAddCommMonoid := inferInstance }</code> or worse</p>",
        "id": 378554108,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690305843
    },
    {
        "content": "<p>I am about to embark on this but I've realised that I don't understand Lean 4. How does <a href=\"https://github.com/leanprover-community/mathlib4/blob/03720bd1962af9f667a921afa21dbbcb1c337abb/Mathlib/Algebra/Module/Basic.lean#L344-L348\">that</a> even compile? A bunch of fields are missing.</p>",
        "id": 378555531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690306178
    },
    {
        "content": "<p>Only one field is missing, <code>smul</code>, right?</p>",
        "id": 378556886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690306469
    },
    {
        "content": "<p>Or rather <code>toSMul</code>, which is automatically found via typeclass inference</p>",
        "id": 378556959,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690306488
    },
    {
        "content": "<p>I am trying to remove <code>zero</code> and <code>add</code> now. Fixing the resulting errors is simple (delete stuff for the most part) but I should be able to close the following quickly </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span>  <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span>  <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378557010,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690306500
    },
    {
        "content": "<p>(module question: oh I see -- <code>toDistribMulAction</code> is found by typeclass inference)</p>",
        "id": 378557132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690306522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span>, that's <code>add_add_add_comm</code> twice on <code>congr_arg2 HAdd.hAdd h1 h2</code></p>",
        "id": 378557371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690306567
    },
    {
        "content": "<p>How's that relevant here though?</p>",
        "id": 378557615,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690306631
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ab₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ab₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₁</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n<span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">ab₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">ab₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₁</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ab₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">ab₁</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ab₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">ab₂</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"bp\">*</span> <span class=\"n\">c₂</span><span class=\"o\">)))</span> <span class=\"bp\">=</span>\n  <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₁</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₁</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n    <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₁</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ab₂</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">c₂</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 378557743,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690306666
    },
    {
        "content": "<p>Comes from the ported proof of <code>algEquivOfLinearEquivTripleTensorProduct</code> when I remove <code>add</code> and <code>zero</code> fields from the <code>Semiring</code> instance</p>",
        "id": 378557963,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690306712
    },
    {
        "content": "<p>It builds but I suspect it won't help too much.</p>",
        "id": 378558635,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690306874
    },
    {
        "content": "<p>What's the proof? I've got as far as <code>rw [add_add_add_comm, hx, hy]</code></p>",
        "id": 378560563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690307355
    },
    {
        "content": "<p><code>ac_rfl</code> closed it for me</p>",
        "id": 378560983,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690307461
    },
    {
        "content": "<p>I tried some more drastic changes and have broken several other things e.g. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">lmul'_apply_tmul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lmul'</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>now gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">lmul'</span> <span class=\"n\">R</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.1695651</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1695651</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"bp\">?</span><span class=\"n\">m.1695651</span>\n</code></pre></div>",
        "id": 378561055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690307480
    },
    {
        "content": "<p>Though things seem to have gotten slightly slower (only deleting all the <code>zero</code> and <code>add</code> fields) in <code>Kaehler</code></p>",
        "id": 378561083,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690307486
    },
    {
        "content": "<p>Yeah, I got a bit of that</p>",
        "id": 378561143,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690307498
    },
    {
        "content": "<p>Had to specify some implicit arguments to elaborate</p>",
        "id": 378561230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690307517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378561055\">said</a>:</p>\n<blockquote>\n<p>I tried some more drastic changes </p>\n</blockquote>\n<p>Following the happy path as Eric suggested? That is most sensible thing at this point</p>",
        "id": 378561885,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690307697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span>'s suggestion of writing everything explicitly might surprisingly also help; that is add, <code>nsmul := nsmul, npow := npow</code> etc too</p>",
        "id": 378562543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690307872
    },
    {
        "content": "<p>Worth a shot</p>",
        "id": 378562805,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690307927
    },
    {
        "content": "<p>These changes are good in the sense that I'm deleting porting notes which I remember writing 2 months ago :-)</p>",
        "id": 378562868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690307943
    },
    {
        "content": "<p>these changes are now also good in that I'm deleting <code>maxHeartbeats</code> in <code>Kaehler</code> :D</p>",
        "id": 378566177,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690308659
    },
    {
        "content": "<p>Running tally of the largest one deleted?</p>",
        "id": 378567105,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690308881
    },
    {
        "content": "<p>Small ones get deleted, big ones get smaller. Some definitions are still slow.</p>",
        "id": 378567320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690308934
    },
    {
        "content": "<p><code>4400000</code> -&gt; ?</p>",
        "id": 378567497,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690308979
    },
    {
        "content": "<p>3200000 -&gt; 400000 but I can't get rid of it completely.</p>",
        "id": 378567924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690309079
    },
    {
        "content": "<p>Almost an order of magnitude</p>",
        "id": 378568032,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690309097
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6134\">#6134</a> , the diff looks nice but there still might be more work to be done. Thanks all for the help!</p>",
        "id": 378568709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690309269
    },
    {
        "content": "<p>It's really difficult to understand the effects of my PR because the trace for the stuff I gave in my verbose initial posts seems to be completely different now. The semiring stuff isn't being unfolded at all it seems. I am unclear about which of my changes have caused this.</p>",
        "id": 378571174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690309840
    },
    {
        "content": "<p>Does it just not have to go as deep into the projections when they are better structured?</p>",
        "id": 378571547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690309925
    },
    {
        "content": "<p>Eliminating <code>maxHeartbeats 2400000</code> is very satisfying. Nice work!</p>",
        "id": 378571717,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690309971
    },
    {
        "content": "<p>All the <code>[Meta.isdefEq]</code> checks have now disappeared and instead of the ten pieces which the original code broke into, now this happens:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">017991</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n          <span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">term</span>\n        <span class=\"o\">(</span><span class=\"n\">Ideal.toCotangent</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">017766</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012941</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">071670</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">038738</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">039233</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"bp\">▶</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012067</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span>\n    <span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">507008</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">LinearMap.CompatibleSMul</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"n\">Ideal.Cotangent</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Everything is now about 4 times faster and the instance traces halt way way before they were halting before. I don't know exactly which change caused this.</p>",
        "id": 378572121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310060
    },
    {
        "content": "<p>I should perhaps say that the key change is the definition of <code>instSemiring</code>; the definition which I was complaining shouldn't be unfolded because when it was unfolded chaos ensued. I have no understanding of why changing the definition stops it from being unfolded.</p>",
        "id": 378572490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310154
    },
    {
        "content": "<p>The check that the two instances which are defeq, are defeq, is now 0.02 seconds rather than 0.08 seconds (i.e. the two 0.03 \"heavy\" rfls are gone) and the trace is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.command</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">026918</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs.withType</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n    <span class=\"kd\">example</span> <span class=\"o\">:</span>\n        <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span>\n      <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">026866</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"kd\">example</span> <span class=\"o\">:</span>\n          <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n            <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"o\">:=</span>\n        <span class=\"kd\">by</span> <span class=\"n\">rfl</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[</span><span class=\"n\">step</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016592</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n        <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n          <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">016578</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n          <span class=\"n\">binrel</span><span class=\"bp\">%</span> <span class=\"n\">Eq</span><span class=\"bp\">✝</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">))</span>\n            <span class=\"n\">Algebra.TensorProduct.instSemiring</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">012519</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">expected</span> <span class=\"n\">type</span><span class=\"o\">:</span> <span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n            <span class=\"bp\">@</span><span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">Algebra.TensorProduct.instCommRing</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What is <code>binrel%</code>? It definitely wasn't there before.</p>",
        "id": 378573290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310332
    },
    {
        "content": "<p>it's something to help with getting the elaboration order and coercions on binops right</p>",
        "id": 378573945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690310465
    },
    {
        "content": "<p>What's a binop?</p>",
        "id": 378573980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310477
    },
    {
        "content": "<p>it should not be too relevant to this</p>",
        "id": 378574014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690310481
    },
    {
        "content": "<p><code>x = y</code></p>",
        "id": 378574034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690310486
    },
    {
        "content": "<p>is a binary operation</p>",
        "id": 378574056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690310491
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.Op.elabBinRelCore#doc\">docs#Lean.Elab.Term.Op.elabBinRelCore</a> for reference but yeah probably not pertinent</p>",
        "id": 378574194,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690310518
    },
    {
        "content": "<p>The new definition of <code>instSemiring</code> is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instMul</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- porting note : `left_distrib` and `right_distrib` are proved by `simp` in mathlib3</span>\n  <span class=\"c1\">-- See https://github.com/leanprover-community/mathlib4/issues/5026</span>\n  <span class=\"c1\">-- Probably because `mul` is defined to be bi-R-linear and then coerced to function?</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instNonUnitalSemiring</span> <span class=\"o\">:</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>You can see the old one further up in the thread; it was just the sort of thing we did in mathlib3 all the time -- \"yeah it's an AddCommMonoid, yeah it's some other things, here's some other data, here are some proofs, I don't even care what order I am doing things in\". I have replaced it with a definition which literally follows the <code>.mk</code> constructor exactly: I define all the earlier instances so typeclass inference can find them and then I prove all the theorems in the right order. For some reason this has made a huge difference.</p>",
        "id": 378574832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310657
    },
    {
        "content": "<p>Note that now if someone refactors the definition of <code>Semiring</code> everything might start timing out again.</p>",
        "id": 378574945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310689
    },
    {
        "content": "<p>Are we sure that those are the things we want to extend, and in that exact order?</p>",
        "id": 378576020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690310951
    },
    {
        "content": "<p>Is there a difference in the size of the term for <code>instSemiring</code> if you print it to file?</p>",
        "id": 378576436,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690311044
    },
    {
        "content": "<p>With pp.all on? Interesting idea.</p>\n<p>This breakage is a bit annoying. In <code>RingTheory.PolynomialAlgebra</code> I've just had to change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">includeLeft</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">includeLeft</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">])</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(all three are needed). Why is this happening? <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.includeLeft#doc\">docs#Algebra.TensorProduct.includeLeft</a></p>",
        "id": 378576874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690311128
    },
    {
        "content": "<p>That also happened if you just removed <code>add</code> and <code>zero</code> as explicit fields</p>",
        "id": 378577121,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690311195
    },
    {
        "content": "<p>(plus all their related proofs)</p>",
        "id": 378577186,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690311215
    },
    {
        "content": "<p>So this was the original definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)),</span>\n    <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span>\n    <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span>\n    <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span>\n    <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span>\n    <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoid.nsmul_succ</span>\n    <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"n\">AddMonoidWithOne.natCast_succ</span>\n    <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.zero_apply</span><span class=\"o\">]</span>\n    <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- port note : `left_distrib` and `right_distrib` are proved by `simp` in mathlib3</span>\n    <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">]</span>\n    <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n      <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">LinearMap.add_apply</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and recall that our current, possibly arbitrary definition of <code>Semiring</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>although I fear that this could possibly be changed at some point because of <a href=\"https://github.com/leanprover/lean4/pull/2325\">lean4#2325</a> (unless someone like <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>  thought really hard about these ringy definitions)</p>",
        "id": 378579251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690311718
    },
    {
        "content": "<p>So the question is: why does deleting <code>zero</code> and <code>add</code> from that definition (because they can be read off from e.g. <code>AddCommMonoid</code>) cause elaboration to become worse?</p>",
        "id": 378579792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690311843
    },
    {
        "content": "<p>Kevin, that <code>includeLeft</code> problem seems eerily similar to the one we encountered involving the breakage from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Dual.instFunLikeDual#doc\">docs#Module.Dual.instFunLikeDual</a>. However, as I mentioned then, that instance isn't the only one causing breakage.</p>",
        "id": 378581492,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690312276
    },
    {
        "content": "<p>Should we try to change definitions so that projections like <code>Ring.toSemiring</code>, <code>AddGroup.toAddMonoid</code> are just <code>.1</code>?</p>",
        "id": 378582518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690312545
    },
    {
        "content": "<p>Why would that help?</p>",
        "id": 378582949,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690312658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378576874\">said</a>:</p>\n<blockquote>\n<p>With pp.all on? Interesting idea.</p>\n</blockquote>\n<p>Or <code>pp.explicit</code>. How else can one measure the complexity of a term?</p>",
        "id": 378584025,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690312953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378576436\">said</a>:</p>\n<blockquote>\n<p>Is there a difference in the size of the term for <code>instSemiring</code> if you print it to file?</p>\n</blockquote>\n<p>There's a huge difference because I also made <code>Algebra.TensorProduct.instNonUnitalSemiring</code> which is now bearing some of the load. There is also <code>Algebra.TensorProduct.instSemiring.proof_x</code> for x=1,2,3,4, whereas before it went up to x=16.</p>",
        "id": 378584963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690313198
    },
    {
        "content": "<p>If you inline everything does difference persist?</p>",
        "id": 378585341,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690313325
    },
    {
        "content": "<p>I don't know what that means :-(</p>",
        "id": 378585450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690313360
    },
    {
        "content": "<p>Oh sorry. Just stick everything back into <code>instSemiring</code> but using the more structured presentation</p>",
        "id": 378585542,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690313397
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6134\">#6134</a> is compiling locally for me. The 4400000 can't come down to 2200000 so there's still some mysteries to be solved.</p>",
        "id": 378585653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690313418
    },
    {
        "content": "<p>Eg </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">toNonUnitalSemiring</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"bp\">..</span>\n <span class=\"o\">}</span>\n<span class=\"bp\">..</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 378585893,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690313497
    },
    {
        "content": "<p>Is this good enough or do you want me to get the <code>Mul</code> in there too?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMul</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toNonUnitalSemiring</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">toNonUnitalNonAssocSemiring</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n      <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">}</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I am scared of the <code>Mul</code> because <code>#print NonUnitalNonAssocSemiring</code> gives me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">NonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">parameters</span><span class=\"o\">:</span> <span class=\"mi\">1</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">NonUnitalNonAssocSemiring.mk</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">[</span><span class=\"n\">toAddCommMonoid</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n    <span class=\"o\">[</span><span class=\"n\">toMul</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">→</span>\n      <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n        <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n          <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>so that's two inputs which are supposed to be inferred by typeclass inference and I don't know how to inline that.</p>",
        "id": 378586519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690313678
    },
    {
        "content": "<p>Is that just two fields <code>toAddCommMonoid</code> and <code>toMul</code>?</p>",
        "id": 378586699,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690313732
    },
    {
        "content": "<p>got it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toNonUnitalSemiring</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">toNonUnitalNonAssocSemiring</span> <span class=\"o\">:=</span>\n      <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">↦</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n        <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n        <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n      <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">}</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Are you expecting inlining to make things better or worse?</p>",
        "id": 378586717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690313737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378582949\">said</a>:</p>\n<blockquote>\n<p>Why would that help?</p>\n</blockquote>\n<p>I think (not sure) that this would help if Lean needs to unify a theorem about <code>[Semiring R] [AddCommMonoid M] [Module R M]</code> with <code>[Ring R] [AddCommGroup M] [Module R M]</code>.</p>",
        "id": 378586792,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690313761
    },
    {
        "content": "<p>I am expecting little performance change but better comparison to the original term</p>",
        "id": 378586855,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690313768
    },
    {
        "content": "<p>That looks wrong to me, where did the <code>natCast</code> field go?</p>",
        "id": 378587405,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690313941
    },
    {
        "content": "<p>I don't think it's really manageable to play these silly nested structure games while also playing the \"don't forget to explicitly provide the fields that prevent diamonds so they don't get filled with garbage\" game</p>",
        "id": 378587599,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690314003
    },
    {
        "content": "<p>Can you expand on what those two games are?</p>",
        "id": 378589021,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690314471
    },
    {
        "content": "<p>The silly nested game is the one <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378586717\">this message</a> is playing</p>",
        "id": 378591572,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690315244
    },
    {
        "content": "<p>The other game is knowing whether you need to write <code>natCast := Nat.cast</code> to avoid lean using <code>natCast := natCastRec</code> or whatever the default is called</p>",
        "id": 378591730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690315280
    },
    {
        "content": "<p>I have no idea what <code>natCast</code> is being set to in the message above, and it's rather worrying that reading the source code can't tell you whether it does what it needs to</p>",
        "id": 378591923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690315325
    },
    {
        "content": "<p>Oh ok. The nesting was only (possibly) useful for comparing term size with the previous one. I don't think there is any reason to pursue beyond this particular experiment.</p>",
        "id": 378592498,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690315472
    },
    {
        "content": "<p>Inlining everything on the branch causes breakage:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">369</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">369</span><span class=\"o\">:</span><span class=\"mi\">55</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">369</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">369</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">372</span><span class=\"o\">:</span><span class=\"mi\">89</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">elaborator'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">412</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"bp\">./././</span><span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">RingTheory</span><span class=\"bp\">/</span><span class=\"n\">Kaehler.lean</span><span class=\"o\">:</span><span class=\"mi\">407</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so my guess is that it's still faster, but it's less fast than before because the terms suddenly got much bigger.</p>",
        "id": 378593991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690315850
    },
    {
        "content": "<p>If you want to stare at two large terms, <a href=\"https://gist.github.com/mattrobball/4547c55d6a23e079e8c5ca5598ded641\">https://gist.github.com/mattrobball/4547c55d6a23e079e8c5ca5598ded641</a></p>",
        "id": 378598101,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690317053
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6141\">#6141</a> tests whether uninlining <code>*</code> alone is enough</p>",
        "id": 378637825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690333579
    },
    {
        "content": "<p>Adding the following instances before <code>KaehlerDifferential.endEquivDerivation'</code> makes it instantaneous </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instS</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instR</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSS</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">instS</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span> <span class=\"o\">(</span><span class=\"n\">instR</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Submodule.isScalarTower'</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">IsScalarTower</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">instSS</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span> <span class=\"o\">(</span><span class=\"n\">instS</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Submodule.isScalarTower'</span> <span class=\"n\">S</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">LinearMap.CompatibleSMul</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">])</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">instS</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">LinearMap.IsScalarTower.compatibleSMul</span> <span class=\"o\">(</span><span class=\"bp\">Ω</span><span class=\"o\">[</span><span class=\"n\">S</span><span class=\"bp\">⁄</span><span class=\"n\">R</span><span class=\"o\">])</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">instS</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 378638708,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690333916
    },
    {
        "content": "<p><code>KaehlerDifferential.endEquiv</code> is also fine without heart beat bumps given these instances</p>",
        "id": 378643443,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690335815
    },
    {
        "content": "<p>The other two remaining bumps can be eliminated more pleasantly. Heart beat bump free version is <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb/kaehler_speedup\">here</a>. (I would push to a PR but not sure who will win.)</p>",
        "id": 378647205,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690337849
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378637825\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6141\">#6141</a> tests whether uninlining <code>*</code> alone is enough</p>\n</blockquote>\n<p>This is slightly faster!</p>",
        "id": 378698015,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690358248
    },
    {
        "content": "<p>I'm happy to go with that one</p>",
        "id": 378698126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690358279
    },
    {
        "content": "<p>I wonder if we can get away with changing even less</p>",
        "id": 378698277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690358304
    },
    {
        "content": "<p>Was it previously trying to unify a whole semiring instance when checking that the <code>*</code>s were compatible?</p>",
        "id": 378698448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690358346
    },
    {
        "content": "<p>It was previously trying to unify a whole semiring instance when checking things of the form <code>ideal (S \\otimes[R] S) = ideal (S \\otimes[R] S)</code></p>",
        "id": 378699346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690358561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378638708\">said</a>:</p>\n<blockquote>\n<p>Adding the following instances before <code>KaehlerDifferential.endEquivDerivation'</code> makes it instantaneous </p>\n</blockquote>\n<p>For me it still takes 45 seconds to compile <code>endEquivDerivation'</code> (down from 180 seconds so still a huge improvement)</p>",
        "id": 378703687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690359520
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 378704104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690359617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378698126\">said</a>:</p>\n<blockquote>\n<p>I'm happy to go with that one</p>\n</blockquote>\n<p>I've closed your PR and pushed some tiny cleanups to my one</p>",
        "id": 378704993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690359820
    },
    {
        "content": "<p>Something fishy is going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">320000</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instS</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Submodule.module'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Ideal.cotangentIdeal</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">IsScalarTower.right</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">instS</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 378706122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360049
    },
    {
        "content": "<p>Can you summarize the changes you made? This can be very useful also in other files I guess.</p>",
        "id": 378706207,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690360065
    },
    {
        "content": "<p>If you look at the definition of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.instSemiring#doc\">docs#Algebra.TensorProduct.instSemiring</a> on master it creates the instance in a way which is normal for Lean 3: just throw all the fields together in any way you like. We can't do this sort of thing any more.</p>",
        "id": 378706462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360117
    },
    {
        "content": "<p>I think the answer might actually just be  \"always define the data fields in tiny instances first\"</p>",
        "id": 378706957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690360216
    },
    {
        "content": "<p>Now we have to look at the actual definition of <code>Semiring</code> (it's no longer just a huge list of fields, it's something which extends  <code>NonUnitalSemiring</code> first and then extends some other things) and if possible you have to make instances which conform to the definition somehow (in a way which Eric understands better than me)</p>",
        "id": 378706982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360221
    },
    {
        "content": "<p>It's not clear to me that the changes inside the Semiring instance mattered; extracting the <code>Mul</code> instance seems like it might have been the important bit</p>",
        "id": 378707171,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690360262
    },
    {
        "content": "<p>I do wonder if we should try the <code>FlatHack</code> branch again...</p>",
        "id": 378707433,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690360313
    },
    {
        "content": "<p>For all this module stuff which Matt was messing with last night, do you think there's a similar issue with <code>SMul</code>?</p>",
        "id": 378708274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360474
    },
    {
        "content": "<p>So in practice it again the same issue as in <a href=\"https://github.com/leanprover-community/mathlib4/pull/5941\">#5941</a>?</p>",
        "id": 378708786,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690360573
    },
    {
        "content": "<p>No I don't think so.</p>",
        "id": 378708889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360592
    },
    {
        "content": "<p>See \"It's not about paths in the instance graph!\" at the top of my second post.</p>",
        "id": 378709004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360614
    },
    {
        "content": "<p>My speculation: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5941\">#5941</a> is about trying to encourage Lean to follow first parents in typeclases. This only does any good if the <code>instance</code>s actually pay special attention to how they construct first parents</p>",
        "id": 378709492,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690360702
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5941\">#5941</a> is all about making Lean find the \"canonical\" path from CommRing to Semiring. But this is a losing battle. If we arbitrarily decree that CommRing -&gt; Ring -&gt; Semiring is canonical and CommRing -&gt; CommSemiring -&gt; Semiring is not, then no matter how we change priorities this won't help a situation where Lean needs to apply a lemma which is true for CommSemirings so necessarily needs the CommSemiring instance.</p>",
        "id": 378709666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360740
    },
    {
        "content": "<p>But paying attention to first parents in <code>instance</code>s is a maintainability nightmare if you ever want to add a new base class or re-order.</p>",
        "id": 378709700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690360746
    },
    {
        "content": "<p>This is why I opened this thread in <code>lean4</code> and not <code>mathlib4</code> -- it seems like this is another consequence of the typeclass inference redesign which we're only just discovering. In Lean 3 we didn't have to worry about any of this, however there were just beginning to be hints that flat structures were causing other problems (although nothing was ever debugged and analysed correctly AFAIK because we knew we were switching to Lean 4 at that time)</p>",
        "id": 378710181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360845
    },
    {
        "content": "<blockquote>\n<p>then no matter how we change priorities this won't help </p>\n</blockquote>\n<p>It's still beneficial if we can ensure in this example that the embedded <code>toAddCommMonoid</code>fields are trivially defeq (which also isn't always possible, but the point is that there is a sliding scale of badness which we can still attempt to minimize even if we can't set it to zero).</p>",
        "id": 378710308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690360876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378709700\">said</a>:</p>\n<blockquote>\n<p>But paying attention to first parents in <code>instance</code>s is a maintainability nightmare if you ever want to add a new base class or re-order.</p>\n</blockquote>\n<p>In particular Gouezel claimed that our library was already non-coherent <a href=\"#narrow/stream/287929-mathlib4/topic/changing.20algebra.20instance.20priorities/near/376739575\">here</a> in the sense that some definitions in algebra of the form <code>class X extends Y, Z</code> should be <code>class X extends Z, Y</code>. None of this seemed to matter in the Lean 3 days but it seems to be super-important now.</p>",
        "id": 378710730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690360966
    },
    {
        "content": "<p>If already our definition of <code>CommMonoid</code> needs changing then how many other definitions in algebra need changing? What if we decide to change <code>Semiring</code>? Then we have to start again with Kaehler differentials because everything might start timing out again.</p>",
        "id": 378710962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690361018
    },
    {
        "content": "<p>If we make everything flat then the order stops mattering again</p>",
        "id": 378711182,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690361058
    },
    {
        "content": "<p>and then don't we run into the other problems which Leo warned against when he made the change to non-flat structures?</p>",
        "id": 378711299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690361082
    },
    {
        "content": "<p>We don't know if those are as bad as the current problems</p>",
        "id": 378711639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690361158
    },
    {
        "content": "<p>I also think those warning predate structure eta</p>",
        "id": 378711717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690361168
    },
    {
        "content": "<p>I imagine that flat structures make the worst case better and the best case worse</p>",
        "id": 378711906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690361200
    },
    {
        "content": "<p>I don't see why the worst case of nested structures would be much different from the worst case of flat structures</p>",
        "id": 378721836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690363230
    },
    {
        "content": "<p>Going back to the slow instances which Matt made, here's a conjecture: <code>Module</code> extends <code>DistribMulAction</code>first and the slow instances use <code>Function.Surjective.module</code>. Eric what do you think of that definition, and in particular of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6144\">#6144</a> ?</p>",
        "id": 378723260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690363531
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6144\">#6144</a> looks like a good change to me</p>",
        "id": 378724059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690363696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378721836\">said</a>:</p>\n<blockquote>\n<p>I don't see why the worst case of nested structures would be much different from the worst case of flat structures</p>\n</blockquote>\n<p>My speculation is that the nested structure version has more places for eta expansion to create a diversion</p>",
        "id": 378724311,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690363746
    },
    {
        "content": "<p>once everything is eta expanded it's just a flat structure though</p>",
        "id": 378724420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690363773
    },
    {
        "content": "<p>I guess there's a rule in place that prevents eta expanding <code>Prod.mk _ _</code>to <code>Prod.mk (Prod.mk _ _).a (Prod.mk _ _).b</code>?</p>",
        "id": 378724571,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690363809
    },
    {
        "content": "<p>more like, it's not literal eta expansion, it is reducing <code>a =?= b</code> to <code>a.x =?= b.x</code> and <code>a.y =?= b.y</code></p>",
        "id": 378724823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690363860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378709700\">said</a>:</p>\n<blockquote>\n<p>But paying attention to first parents in <code>instance</code>s is a maintainability nightmare if you ever want to add a new base class or re-order.</p>\n</blockquote>\n<p>This answer to this is well-known, right? Writing a hierarchy by hand is prehistoric formalized mathematics. Even mathcomp which has much smaller hierarchies <a href=\"https://github.com/math-comp/math-comp/releases\">switched</a> to using <a href=\"https://github.com/math-comp/hierarchy-builder/\">a tool</a> in order to do it in a principled and extendable way.</p>",
        "id": 378726089,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364065
    },
    {
        "content": "<p>we have a tool, it's called <code>instance</code> and structure instance constructors. We just need to figure out what the rules are on good hierarchy design and implement them in the existing tools</p>",
        "id": 378727072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364242
    },
    {
        "content": "<p>This is a different level. What you are talking about are low-level tools that seem to be too delicate to use by hand.</p>",
        "id": 378727398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364296
    },
    {
        "content": "<p>?</p>",
        "id": 378727456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364309
    },
    {
        "content": "<p>Do the Coq tools only help with building the hierarchy, or also with instantiating the hierarchy for concrete types? The problem we're seeing here is with the latter.</p>",
        "id": 378727582,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690364333
    },
    {
        "content": "<p>Eric, did you at least look at the name of the tool?</p>",
        "id": 378727828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364384
    },
    {
        "content": "<p>Yes, I've skimmed the hierarchy builder paper. Edit: I see<code>HB.instance</code>is what I was asking for.</p>",
        "id": 378727878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690364400
    },
    {
        "content": "<p>I don't see the HB interface (i.e. what the user types) as significantly different from what we already do. The main difference is that HB has custom constructors (\"factories\"), which do not have fancy syntax in our version</p>",
        "id": 378727954,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364411
    },
    {
        "content": "<p>Mario, hierarchy builder does not replace the Coq commands that write the canonical structures, it write them from a higher level description. We could have something similar generating <code>class</code> and <code>instances</code> declarations.</p>",
        "id": 378728154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364456
    },
    {
        "content": "<p>what do you mean by a \"higher level description\" though? It looks pretty much the same as a regular class definition to me</p>",
        "id": 378728324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364484
    },
    {
        "content": "<p>and TBH I don't think that the level of description of classes or instances is all that far from what we want in the first place</p>",
        "id": 378728440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364509
    },
    {
        "content": "<p>No, it clearly expands to a lot more code than what is written by users.</p>",
        "id": 378728818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364588
    },
    {
        "content": "<p>The things that need fixing are all in the backend, not the frontend. <code>instance</code> and <code>class</code> and <code>extends</code> etc generate some definitions and search for things in a certain way that is suboptimal</p>",
        "id": 378728844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364595
    },
    {
        "content": "<p>but that can be fixed without changing the syntax of any of the above</p>",
        "id": 378728899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364606
    },
    {
        "content": "<p>That's a different topic. Fixing the backend would of course be nicer, but it isn't clear to me that this \"fix\" is possible.</p>",
        "id": 378729203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364662
    },
    {
        "content": "<p>we don't know what the \"fix\" even is yet, we're still playing around with tweaks</p>",
        "id": 378729323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364689
    },
    {
        "content": "<p>It's not clear to me that the problems in the backend can be plastered over with a clever frontend either</p>",
        "id": 378729410,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690364708
    },
    {
        "content": "<p>once we have a reliable way to turn a bad definition into a good one, we can implement that in the core tool and then we won't have to worry about it anymore</p>",
        "id": 378729529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378729323\">said</a>:</p>\n<blockquote>\n<p>we don't know what the \"fix\" even is yet, we're still playing around with tweaks</p>\n</blockquote>\n<p>This is what I meant by \"it isn't clear to me that this fix is possible\".</p>",
        "id": 378729574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364752
    },
    {
        "content": "<p>As a simple example of where a clever frontend can't help, if we go all in on tweaking instance priorities everywhere, we're eventually going to get stuck because a new file needs to add an instance with (integer?) priority between 37 and 38, but the clever frontend that generated those priorities already ran in a previous file.</p>",
        "id": 378729779,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690364786
    },
    {
        "content": "<p>certainly I have doubts that we can transplant the HB backend to lean and get a performance improvement</p>",
        "id": 378729846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364798
    },
    {
        "content": "<p>I don't think we have ever had issues running out of integers for priorities</p>",
        "id": 378730158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364864
    },
    {
        "content": "<p>I'm not saying that the tool needs to be HB. I'm saying we'll need a tool. Even having to know what should be parameters and what should be extended is already mathematically irrelevant and should be handled by a tool, together with all the forgetful inheritance tricks.</p>",
        "id": 378730172,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364870
    },
    {
        "content": "<p>What I'm saying is that we already have a tool, but it is not yet calibrated properly</p>",
        "id": 378730315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364896
    },
    {
        "content": "<p>Eric, the tool could be run at any time and change those 37 and 38 to 370 and 380 without any impact on user code.</p>",
        "id": 378730364,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690364911
    },
    {
        "content": "<p>But now the tool has to run globally and not locally, which was not how I understood HB worked</p>",
        "id": 378730595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690364972
    },
    {
        "content": "<p>And the calibration currently consists of me spending all of Sunday staring at 200000 line instance traces?</p>",
        "id": 378730629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690364978
    },
    {
        "content": "<p>yes :)</p>",
        "id": 378730663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690364985
    },
    {
        "content": "<p>I'll put the kettle on</p>",
        "id": 378730732,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690364999
    },
    {
        "content": "<p>I don't think we are yet at the point where we have \"rules of thumb\" that produce good results wherever they are applied</p>",
        "id": 378731006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690365056
    },
    {
        "content": "<p>there are some things like having a consistent order of parents, which we might implement in a linter soon, but it's not enough to solve all the defeq issues</p>",
        "id": 378731254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690365111
    },
    {
        "content": "<p>obviously we want to work toward not having to care about this and having tools either tell you what to do or fix up whatever you wrote to make it do the right thing</p>",
        "id": 378731499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690365154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378711182\">said</a>:</p>\n<blockquote>\n<p>If we make everything flat then the order stops mattering again</p>\n</blockquote>\n<p>I've resolved the conflicts in <a href=\"https://github.com/leanprover-community/mathlib4/pull/3171\">#3171</a>; maybe the unification changes in core that solved <a href=\"https://github.com/leanprover/lean4/pull/2074\">lean4#2074</a> make it behave better than it did last time...</p>",
        "id": 378733283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690365510
    },
    {
        "content": "<p>I thought some of the issue was that we needed specific instance priorities for specific paths to prefer paths; EricW's mentioned some ways to implement this (priorities should be additive over the whole path instead of just taking the last branch's priority, for example) but a HierarchyBuilder-esque front end I could definitely see helping to figure out these priorities fast; because right now when you declare something like <code>AddMonoidWithOne</code>, the declaration of <code>Field</code> is a thousand files away and so Lean cannot take that sort of stuff into account [if it matters, if it causes a preferred path]</p>",
        "id": 378738030,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690366436
    },
    {
        "content": "<p>And sometimes structures will be declared in separate places that won't be able to be kept in sync; e.g. I'd expect the files declaring <code>LinearOrderedAddCommGroup</code> and <code>Field</code> to not import each other, so how could they know?</p>",
        "id": 378738289,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690366482
    },
    {
        "content": "<blockquote>\n<p>I thought some of the issue was that we needed specific instance priorities for specific paths to prefer paths</p>\n</blockquote>\n<p>That is part of the problem, but it's not what caused the 44% speedup in Kaehler: that issue is back to flat v non-flat structures and how they're built (and in particular not wanting to take them apart when pp.all says they're 2500 lines long when taken apart)</p>",
        "id": 378742397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690367178
    },
    {
        "content": "<p>The Kaehler one is even more mysterious than that; the difference appears to be between</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 378743059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690367291
    },
    {
        "content": "<p>(what you describe is almost certainly relevant, but in the message above the first version works and the second is too slow)</p>",
        "id": 378743510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690367358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378703687\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378638708\">said</a>:</p>\n<blockquote>\n<p>Adding the following instances before <code>KaehlerDifferential.endEquivDerivation'</code> makes it instantaneous </p>\n</blockquote>\n<p>For me it still takes 45 seconds to compile <code>endEquivDerivation'</code> (down from 180 seconds so still a huge improvement)</p>\n</blockquote>\n<p>I originally made <a href=\"https://github.com/leanprover-community/mathlib4/commit/6587d9d11a5ce6f2f183145af416ba5faa58c5dc\">this change</a>. I had that when looking at the info view (instantaneous)  but reverted it in the last commit to the branch after things built fine.</p>",
        "id": 378755313,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690369418
    },
    {
        "content": "<p>lol I have a version of that change open in the Lean file in front of me right now :-)</p>",
        "id": 378756503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690369631
    },
    {
        "content": "<p>Fun experience is trying to <code>#synth</code> <code>SMul</code> after declaring one of the <code> Module </code> instances</p>",
        "id": 378757526,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690369814
    },
    {
        "content": "<p>We're coming to the conclusion that making the <code>SMul</code> instance explicitly before making all the other instances is a good first move, right?</p>",
        "id": 378759557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690370202
    },
    {
        "content": "<p>Don’t unfold the data fields unless you have to?</p>",
        "id": 378759997,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690370283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378759557\">said</a>:</p>\n<blockquote>\n<p>We're coming to the conclusion that making the <code>SMul</code> instance explicitly before making all the other instances is a good first move, right?</p>\n</blockquote>\n<p>That's my one-data-point hunch</p>",
        "id": 378763368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690370957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378743059\">said</a>:</p>\n<blockquote>\n<p>The Kaehler one is even more mysterious than that; the difference appears to be between</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Isn't this just to do with the fact that the more you package stuff up, the smaller the terms get, so the less long <code>rfl</code> takes to prove syntactic equality?</p>",
        "id": 378765789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690371440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378743059\">said</a>:</p>\n<blockquote>\n<p>The Kaehler one is even more mysterious than that; the difference appears to be between</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toMul</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Wait I thought the problematic one was where <code>mul</code> was declared at “top level” ?</p>",
        "id": 378767054,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690371678
    },
    {
        "content": "<p>Another question: why was Lean 3 so good with the “spaghetti” construction of instances?</p>",
        "id": 378768314,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690371901
    },
    {
        "content": "<p>To be clear, the first example in that message is the one we're now using</p>",
        "id": 378769390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372095
    },
    {
        "content": "<p>I'd like to test the hypothesis that Lean 3 was so good here because of flat structures; but <a href=\"https://github.com/leanprover-community/mathlib4/pull/3171\">#3171</a> is now stuck on some Qq stuff I don't understand</p>",
        "id": 378769682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372151
    },
    {
        "content": "<p>Was everything in Lean 3 a flat structure?</p>",
        "id": 378770956,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690372384
    },
    {
        "content": "<p>All the basic algebra was. <code>Module</code> and normed algebra classes weren't</p>",
        "id": 378771678,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378755313\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378703687\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378638708\">said</a>:</p>\n<blockquote>\n<p>Adding the following instances before <code>KaehlerDifferential.endEquivDerivation'</code> makes it instantaneous </p>\n</blockquote>\n<p>For me it still takes 45 seconds to compile <code>endEquivDerivation'</code> (down from 180 seconds so still a huge improvement)</p>\n</blockquote>\n<p>I originally made <a href=\"https://github.com/leanprover-community/mathlib4/commit/6587d9d11a5ce6f2f183145af416ba5faa58c5dc\">this change</a>. I had that when looking at the info view (instantaneous)  but reverted it in the last commit to the branch after things built fine.</p>\n</blockquote>\n<p>So we have to fix <code>StarModule.decomposeProdAdjoint</code> and then we can make Kaehler maxHeartbeat-free?</p>",
        "id": 378771826,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690372552
    },
    {
        "content": "<p>Do any egregious spaghetti constructions of <code>module</code> instances come to mind?</p>",
        "id": 378772331,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690372647
    },
    {
        "content": "<p>In lean3 you mean? I don't think it matter so much; the key thing was that the <code>[semiring R]</code> argument inside the <code>module</code> type itself was always easy to resolve</p>",
        "id": 378772522,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372686
    },
    {
        "content": "<p>It should be bump-free on that branch as is. (With the silly instances)</p>",
        "id": 378772687,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690372723
    },
    {
        "content": "<p>Is that branch based off Kevin's one that just landed in master?</p>",
        "id": 378772819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378772522\">said</a>:</p>\n<blockquote>\n<p>In lean3 you mean? I don't think it matter so much; the key thing was that the <code>[semiring R]</code> argument inside the <code>module</code> type itself was always easy to resolve</p>\n</blockquote>\n<p>I guess the same was true with normed algebra?</p>",
        "id": 378772826,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690372752
    },
    {
        "content": "<p>Kevin’s. I only noticed yours after the fact</p>",
        "id": 378772938,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690372782
    },
    {
        "content": "<p><code>NormedAlgebra</code> actually ran into a lot of trouble in those areas, presumably because it consumed <code>normed_field</code> which was not flat</p>",
        "id": 378772947,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378772938\">said</a>:</p>\n<blockquote>\n<p>Kevin’s. I only noticed yours after the fact</p>\n</blockquote>\n<p>They're pretty similar so it shouldn't matter</p>",
        "id": 378773010,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690372799
    },
    {
        "content": "<p>Ojalá</p>",
        "id": 378773089,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690372810
    },
    {
        "content": "<p>Looking at the difference in terms in the two cases, the constructors for the data fields are exposed in the spaghetti construction but not for the outlined one. Does this mean unification bumps into them more often?</p>",
        "id": 378774554,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690373088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378773010\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378772938\">said</a>:</p>\n<blockquote>\n<p>Kevin’s. I only noticed yours after the fact</p>\n</blockquote>\n<p>They're pretty similar so it shouldn't matter</p>\n</blockquote>\n<p>Breaks a fix at the end of the file in <code>KaehlerDifferential.quotKerTotalEquiv</code>. More precisely, it is pushed over the timeout limit again with <code>master</code> but wasn't before</p>",
        "id": 378782025,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690374579
    },
    {
        "content": "<p>I created <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a>. Feel free to push to. Stepping away from the computer for a bit.</p>",
        "id": 378782896,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690374751
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378772819\">said</a>:</p>\n<blockquote>\n<p>Is that branch based off Kevin's one that just landed in master?</p>\n</blockquote>\n<p>Unfortunately the one that landed in master was not enough to unblock <a href=\"https://github.com/leanprover-community/mathlib4/pull/6094\">#6094</a></p>",
        "id": 378783006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690374776
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> will help with that</p>",
        "id": 378785410,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690375228
    },
    {
        "content": "<p>Though I would prefer a fix where Lean figures these instances out itself</p>",
        "id": 378786281,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690375375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378785410\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> will help with that</p>\n</blockquote>\n<p>The \"helper\" instances remove the <code>7000000</code> bump</p>",
        "id": 378810713,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690379575
    },
    {
        "content": "<p>Remove it entirely or leave it at 4400000?</p>",
        "id": 378816625,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690380530
    },
    {
        "content": "<p>Entirely</p>",
        "id": 378817490,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690380633
    },
    {
        "content": "<p>I didn't push because I am holding out for a better fix but perhaps you just want to go</p>",
        "id": 378818423,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690380768
    },
    {
        "content": "<p>Do you mind if I push a cleanup to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a>?</p>",
        "id": 378820062,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690381043
    },
    {
        "content": "<p>Be my guest</p>",
        "id": 378820116,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690381054
    },
    {
        "content": "<p>Oh I thought I did that!</p>",
        "id": 378820281,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690381083
    },
    {
        "content": "<p>Let me push</p>",
        "id": 378820346,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690381091
    },
    {
        "content": "<p>I pushed one more cleanup</p>",
        "id": 378824277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690381702
    },
    {
        "content": "<p>Doubled checked that instance construction pattern from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6134\">#6134</a> indeed fixes the timeouts in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> including allowing one to restore a <code>@[simps!]</code></p>",
        "id": 378827888,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690382327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378783006\">said</a>:</p>\n<blockquote>\n<p>Unfortunately the one that landed in master was not enough to unblock <a href=\"https://github.com/leanprover-community/mathlib4/pull/6094\">#6094</a></p>\n</blockquote>\n<p>bumping the heartbeat counts by 2.5% was enough to make this work, so it looks like that PR no longer makes things meaningfully worse</p>",
        "id": 378829093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690382536
    },
    {
        "content": "<p>What changed?</p>",
        "id": 378830147,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690382729
    },
    {
        "content": "<p>The 700000 was a relic from before the change that landed in master</p>",
        "id": 378830389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690382769
    },
    {
        "content": "<p>The change?</p>",
        "id": 378830435,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690382780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112165\">rss-bot</span> <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster/near/378768428\">said</a>:</p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/36dc67fae274ac0187a9f20899e41fbc8c903c8e\">fix: redefine semiring instance on tensor product</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6141\">mathlib4#6141</a>)</p>\n<p>By providing the <code>Mul</code> instance up front, this seems to make future typeclass search much easier.</p>\n<p>This comes at the expense of causing minor elaboration problem in various tensor definitions, which now require the implicit type arguments to be provided explicitly.</p>\n<p>This also simplifies some proofs, removing a porting note.</p>\n<p>Co-authored-by: Eric Wieser &lt;<a href=\"mailto:wieser.eric@gmail.com\">wieser.eric@gmail.com</a>&gt;</p>\n<p>Authored-by: <a href=\"https://github.com/kbuzzard\">kbuzzard</a> <a href=\"https://github.com/leanprover-community/mathlib4/commit/36dc67fae274ac0187a9f20899e41fbc8c903c8e\">(commit)</a></p>\n</blockquote>",
        "id": 378830771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690382836
    },
    {
        "content": "<p>It doesn't look like <a href=\"https://github.com/leanprover-community/mathlib4/pull/6144\">#6144</a> makes much of a dent in the bumps for <code>KaehlerDifferential.endEquivDerivation'</code> (as in <code>master</code>).</p>",
        "id": 378857925,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690387016
    },
    {
        "content": "<p>Doesn't seem to help directly but cleaned up <code>cotangentIdeal</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/6156\">#6156</a></p>",
        "id": 378877813,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690390459
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cotangentIdeal</span>\n</code></pre></div>\n<p>dumps to a 4m line file</p>",
        "id": 378896612,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690394319
    },
    {
        "content": "<p>I just ran the profiler on a theorem in GroupCohomology.Basic and also got a 4m line file :-)</p>",
        "id": 378907842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690396473
    },
    {
        "content": "<p>But I think your problem is worse than mine.</p>",
        "id": 378908667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690396634
    },
    {
        "content": "<p><code>pp.explicit</code> is cheating :)</p>",
        "id": 378916938,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690398243
    },
    {
        "content": "<p>Here is one point. There seems to lots of unifying of two different <code>AddMonoid</code> structures on a tensor product. One coming from <code>Ideal.Quotient.ring</code> and the other from <code>Submodule.Quotient.addCommGroup</code></p>",
        "id": 378933108,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690402142
    },
    {
        "content": "<p>Is <a href=\"https://github.com/leanprover-community/mathlib4/blob/e4d17634790fb1682bc7439e6d94d6dde1024f8e/Mathlib/LinearAlgebra/TensorProduct.lean#L271-L277\">this instance</a> suspicious?</p>",
        "id": 378941803,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690404254
    },
    {
        "content": "<p>I would say so!</p>",
        "id": 378949072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690406621
    },
    {
        "content": "<p>Any use of the <code>with</code> keyword is likely a performance issue</p>",
        "id": 378949077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690406624
    },
    {
        "content": "<p>Though the results at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6144\">#6144</a> are concerning</p>",
        "id": 378950757,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690407171
    },
    {
        "content": "<p>Wall clock improved</p>",
        "id": 378954237,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690408519
    },
    {
        "content": "<p>I have some ModuleCat observations but maybe I'll move to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a></p>",
        "id": 378954750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690408747
    },
    {
        "content": "<p>It probably doesn't help that this fails in mathlib4 master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">instRing</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">toAddCommGroup</span> <span class=\"bp\">=</span> <span class=\"n\">addCommGroup</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a>)</p>",
        "id": 378954973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690408822
    },
    {
        "content": "<p>This is an example of what I meant by</p>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378587599\">said</a>:</p>\n<blockquote>\n<p>I don't think it's really manageable to play these silly nested structure games while also playing the \"don't forget to explicitly provide the fields that prevent diamonds so they don't get filled with garbage\" game</p>\n</blockquote>\n<p>In lean 3 our defense against this was \"just <code>..</code> every possible parent instance you can think of and it will probably be fine\". It sounds like in Lean4 we're learning \"don't <code>with</code> any parents at all if you can avoid it\", so now when defining a structure you have to very carefully copy across only the fields that aren't found from parent classes.</p>",
        "id": 378966036,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690414032
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a> seems like a good speed up. Previously </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Module</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>took ~1.3s on my branch and now it is ~0.8s which moves it from failure to success without a bump</p>",
        "id": 378972042,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690417725
    },
    {
        "content": "<p>The version of <code>KaehlerDifferential.endEquivDerivation'</code> on master goes from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">4400000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">1500000</span>\n</code></pre></div>\n<p>to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">700000</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200000</span>\n</code></pre></div>",
        "id": 378975276,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690419684
    },
    {
        "content": "<p>So we are getting there</p>",
        "id": 378975310,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690419719
    },
    {
        "content": "<p>For </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">SMul</span> <span class=\"n\">S</span> <span class=\"bp\">&lt;|</span>  <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>we have three paths </p>\n<ul>\n<li><code>MulAction.toSMul</code></li>\n<li><code>Submodule.Quotient.hasSmul' (KaehlerDifferential.ideal R S ^ 2))</code> </li>\n<li><code>SMulZeroClass.toSMul</code></li>\n</ul>\n<p>For</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">AddCommMonoid</span> <span class=\"bp\">&lt;|</span>  <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>we have two paths</p>\n<ul>\n<li><code>NonUnitalNonAssocSemiring.toAddCommMonoid</code> </li>\n<li><code>AddCommGroup.toAddCommMonoid</code></li>\n</ul>\n<p>Lean needs to check (many) multiple times these are def eq which eats up time.</p>",
        "id": 378978282,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690421159
    },
    {
        "content": "<p>This is probably not in the right order</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AlgEquiv</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">≃</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≃*</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≃+</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">≃+*</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n</code></pre></div>",
        "id": 378984603,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690425491
    },
    {
        "content": "<p>Yes I was looking at that declaration yesterday. Right now with non-flat structures and the algorithm for defeq we are being forced to think very hard about exactly how to present these definitions and that one probably isn't right (we generally want the more complex things first I think)</p>",
        "id": 379023138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690439955
    },
    {
        "content": "<p>Wow, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a> wasn't even intended to be a performance fix!</p>",
        "id": 379058647,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690447359
    },
    {
        "content": "<p>Changing the order of base <code>structure</code>s affects the API of those types (the coe_mk lemmas have to change); so I don't think we want to start doing that for optimization reasons</p>",
        "id": 379059066,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690447439
    },
    {
        "content": "<p>(classes aren't so bad because the API is \"it magically does the right thing\")</p>",
        "id": 379059220,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690447462
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379058647\">said</a>:</p>\n<blockquote>\n<p>Wow, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a> wasn't even intended to be a performance fix!</p>\n</blockquote>\n<p>How are you seeing performance changes? I can only figure out how to compare the benchmark against e.g. an old mathlib master from 5 days ago, which was before there was a lot of action coming from this thread.</p>",
        "id": 379059936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690447581
    },
    {
        "content": "<p>Yeah, I think the benchmarking can't keep up</p>",
        "id": 379060071,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690447605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/378954750\">said</a>:</p>\n<blockquote>\n<p>I have some ModuleCat observations but maybe I'll move to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a></p>\n</blockquote>\n<p>I feel like we've got Kaehler into a much better state so I started on group cohomology but I got stuck <a href=\"#narrow/stream/287929-mathlib4/topic/ModuleCat.2Emk.20slowness/near/378959297\">here</a>.</p>",
        "id": 379060378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690447659
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/a0480fdd-eef8-4898-ad4e-9a0b1b2e71f6/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=8106843761b4addb65cd804e00aaa90e8e4143e2\">This comparison</a> (against our last fix) suggests that the time for Kaehler has reduced by 60% thanks to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a>.</p>",
        "id": 379063981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690448280
    },
    {
        "content": "<p>(the changes in other files are presumably due to unrelated changes in master)</p>",
        "id": 379064250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690448326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379058647\">said</a>:</p>\n<blockquote>\n<p>Wow, <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a> wasn't even intended to be a performance fix!</p>\n</blockquote>\n<p>At this point there’s are no single show stoppers but slower def eq checks are layered on top of each other and repeated over and over. I am optimistic that changes like this and others will ultimately bring things into the normal range. I expect they are deeper in the library so will unlock speed ups more broadly. </p>\n<p>Though bundled categories are a bit of an odd duck</p>",
        "id": 379115694,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690457084
    },
    {
        "content": "<p>I’ve been collecting incidents <a href=\"https://github.com/leanprover-community/mathlib4/tree/mrb/remove_useless_fields\">here</a></p>",
        "id": 379117083,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690457342
    },
    {
        "content": "<p>There are still plenty of porting notes that describe steering tc synthesis in there. It is reasonable to turn the wheel over to Lean for many of these. Hopefully, things will be more coherent with Lean driving</p>",
        "id": 379119125,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690457725
    },
    {
        "content": "<p>15 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/speedcenter.20runs.20on.20master\">#lean4 &gt; speedcenter runs on master</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 379146152,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690462291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379063981\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/a0480fdd-eef8-4898-ad4e-9a0b1b2e71f6/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=8106843761b4addb65cd804e00aaa90e8e4143e2\">This comparison</a> (against our last fix) suggests that the time for Kaehler has reduced by 60% thanks to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a>.</p>\n</blockquote>\n<p>Did <a href=\"https://github.com/leanprover-community/mathlib4/pull/6141\">#6141</a> introduce the diamond? If so, I would guess that <a href=\"https://github.com/leanprover-community/mathlib4/pull/6162\">#6162</a> is unleashing the full speed up of the change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6141\">#6141</a>.</p>",
        "id": 379165932,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690465572
    },
    {
        "content": "<p>No, the diamond <del>existed in mathlib3</del> was introduced during the port</p>",
        "id": 379166294,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690465631
    },
    {
        "content": "<p>We had an explicit <code>natCast_succ := AddMonoidWithOne.natCast_succ</code> before but no explicit <code>natCast_zero</code></p>",
        "id": 379166943,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690465740
    },
    {
        "content": "<p>The natCast and intCast diamonds have been there since mathlib3 (but I expect are irrelevant because we never used those algebras)</p>",
        "id": 379167239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690465787
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/4004/files/3c8b095f6ed1a25a925315fd81cef11c2a52f943..6ff1525d48c7a3e04a03346120d68588e16ad293#r1276314171\">Here's the porting regression</a> (specifically <a href=\"https://github.com/leanprover-community/mathlib4/commit/2d50008c7b4056a2226bba8d643743eaca85aca5#r122861132\">this commit</a>)</p>",
        "id": 379167918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690465899
    },
    {
        "content": "<p>So I guess <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>'s sunday of looking at traces is penance for having his name on the PR that (mis-)ported the file!</p>",
        "id": 379168773,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690466035
    },
    {
        "content": "<p>I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/6178\">#6178</a> to change other heart beat limits to more representative numbers. </p>\n<p>These bumps won't last as they will go away with <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> one way or another another. In the meantime, I think there is value to having the values reflect reality.</p>",
        "id": 379175215,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690467010
    },
    {
        "content": "<p>Should we have a <code>bump_heartbeats N in foo</code> command that means something like \"<code>count_heartbeats</code>, but error if the result differs from <code>N</code> by more than 20%\"?</p>",
        "id": 379180750,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690467841
    },
    {
        "content": "<p>(it could also limit how long it tries to 3*N or something)</p>",
        "id": 379181365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690467941
    },
    {
        "content": "<p>If we are making wish lists, I would like a config for <code>count_heartbeats</code> that let's me specify if bumping the limit for synthesizing instances is desired.</p>",
        "id": 379182176,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690468063
    },
    {
        "content": "<p>I suspect it might be hard to count those</p>",
        "id": 379183605,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690468244
    },
    {
        "content": "<p>Can we catch the error <code>failed to synthesize...</code>?</p>",
        "id": 379183988,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690468298
    },
    {
        "content": "<p>My impression is that failure to have enough heartbeats in a declaration can result in more than one kind of error.</p>",
        "id": 379186639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690468704
    },
    {
        "content": "<p>In tuning the limits, I bump <code>synthInstance.maxHeartbeats</code> if is see a synthesis failure. Else, I bump <code>maxHeartbeats</code>. Seems to work so far</p>",
        "id": 379187571,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690468841
    },
    {
        "content": "<p>It looks like </p>\n<blockquote>\n<p><strong><a href=\"https://github.com/leanprover-community/mathlib4/commit/00269a6fe716b08dafb1c2791b935cb96f40aab2\">chore(linear_algebra/tensor_product): forward-port leanprover-community/mathlib#19143</a></strong> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6094\">mathlib4#6094</a>)</p>\n</blockquote>\n<p>did slow some things down a bit. I had to <a href=\"https://github.com/leanprover-community/mathlib4/commit/c84e90b7577f585da52705022577a5e01b224b0f\">bump</a> limits after merging master.</p>",
        "id": 379216516,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690473352
    },
    {
        "content": "<p>Yeah, I kind of expected it to: it will be interesting to see the benchmark results</p>",
        "id": 379223037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690474446
    },
    {
        "content": "<p>(though I think we will have to ask <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> to queue some of the commits to actually get clear results)</p>",
        "id": 379223463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690474523
    },
    {
        "content": "<p>This now shows both steps, although it's possible the lean bump changed things too (we'll know in another 2.5 hours)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/113488-general/topic/Why.20is.20.60simpNF.60.20complaining.20here.3F/near/379076424\">said</a>:</p>\n<blockquote>\n<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1688169600000&amp;zoomXEnd=1690675200000&amp;dimensions=~Mathlib.RingTheory.Kaehler%3Ainstructions&amp;dayEquidistant=true\">Kaehler comparison graph</a></p>\n</blockquote>",
        "id": 379228900,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690475419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you understand why the change in your <a href=\"https://github.com/leanprover-community/mathlib4/pull/6141\">#6141</a> PR</p>\n<p><a href=\"/user_uploads/3121/KfERxwPuy57oxj6tLweuDENE/6141change.png\">6141change.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KfERxwPuy57oxj6tLweuDENE/6141change.png\" title=\"6141change.png\"><img src=\"/user_uploads/3121/KfERxwPuy57oxj6tLweuDENE/6141change.png\"></a></div><p>beats my change in the <a href=\"https://github.com/leanprover-community/mathlib4/pull/6134\">#6134</a> PR</p>\n<p><a href=\"/user_uploads/3121/DuJo_YDxT53sBzzpeYlszrrS/6134change.png\">6134change.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/DuJo_YDxT53sBzzpeYlszrrS/6134change.png\" title=\"6134change.png\"><img src=\"/user_uploads/3121/DuJo_YDxT53sBzzpeYlszrrS/6134change.png\"></a></div><p>? We both define <code>SMul</code> and then our approaches differ. I'm currently looking at this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">distribMulAction</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">DistribMulAction</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Finsupp.distribSMul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">with</span>\n    <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">one_smul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul_smul</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and wondering if this <code>with</code> should be considered harmful because <code>DistribMulAction</code> extends <code>MulAction</code> first. But I don't know what the analogue of the \"6141 change\" would be here.</p>",
        "id": 379246251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690478675
    },
    {
        "content": "<p>Currently I have to break out parent instances ala <a href=\"https://github.com/leanprover-community/mathlib4/pull/6134\">#6134</a> avoid tripping over limits later in the file. </p>\n<p>I think both are a significant speed up. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6134\">#6134</a> is slightly faster but more onerous on the author. How you balance that is  your decision</p>",
        "id": 379249895,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690479436
    },
    {
        "content": "<p>Preliminary indications are that <a href=\"https://github.com/leanprover-community/mathlib4/pull/6192\">#6192</a> makes at least one declaration in <code>GroupCohomology.Resolution</code> go from 45 seconds to 15</p>",
        "id": 379254855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690480513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379246251\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> do you understand why the change in your ...</p>\n</blockquote>\n<p>No, I just thought your change looked messy and wanted to check whether we actually needed all of it. I didn't expect it to be more performant, I was hoping for a tie</p>",
        "id": 379282323,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690486456
    },
    {
        "content": "<p>The actual sizes of terms don't change between the original spaghetti pattern and either of these. In fact, they seem to be slightly bigger (by line size) in new patterns. I am guessing that in the new patterns less is unfolded because Lean doesn't have to wade through junk during unification to get to the pertinent info.</p>",
        "id": 379283176,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690486626
    },
    {
        "content": "<p>Certainly less is unfolded with the semiring change: the trace is transformed. For example you don't see any <code>let src := ..., let src_1 := ..., Semiring.mk _ _ _</code> in the trace any more: it's not that this is replaced with the change, it's that the algorithm for <code>rfl</code> is not doing the unfolding at all any more (or maybe it's doing it but so quickly that the profler doesn't report it).</p>",
        "id": 379290098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690488347
    },
    {
        "content": "<p>There are certainly some silly things still going on: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>times out</p>",
        "id": 379291193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690488654
    },
    {
        "content": "<p>As does,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">KaehlerDifferential.ideal</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379291601,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690488765
    },
    {
        "content": "<p>I was pushing a cleaned up version of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> and I encountered a new CI error </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'&lt;unnamed&gt;'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span><span class=\"s1\">'called `Result::unwrap()` on an `Err` value: Error { kind: UnexpectedEof, message: \"failed to fill whole buffer\" }'</span>,<span class=\"w\"> </span>/project/src/ltar.rs:54:41\n</code></pre></div>\n<p>:)</p>",
        "id": 379294290,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690489513
    },
    {
        "content": "<p>More general (semi-) <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span>  <span class=\"c1\">-- failed to synthesize</span>\n</code></pre></div>",
        "id": 379294624,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690489617
    },
    {
        "content": "<p>I also have the same CI error on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6192\">#6192</a> , which decreases some heartbeats in group cohomology files by a factor of two.</p>",
        "id": 379296852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690490243
    },
    {
        "content": "<p><code>unwrap()</code> panics if there is an error so I guess the server and/or connection is having a timeout</p>",
        "id": 379297049,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690490296
    },
    {
        "content": "<p>in other news,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Resolution</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span>  <span class=\"c1\">-- works fine on my branch</span>\n</code></pre></div>",
        "id": 379297154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690490336
    },
    {
        "content": "<p>So where is the bad instance</p>",
        "id": 379297444,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690490418
    },
    {
        "content": "<p>Unless your branch fixes with it <code>import Mathlib</code>?</p>",
        "id": 379297524,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690490439
    },
    {
        "content": "<p>My branch doesn't have a fully compiled mathlib and CI won't give me oleans</p>",
        "id": 379297654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690490466
    },
    {
        "content": "<p>Should <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.id#doc\">docs#Algebra.id</a> be default?</p>",
        "id": 379297781,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690490506
    },
    {
        "content": "<p>oh my code works fine on master. So it's <code>import Mathlib</code> which is the problem. Edit: and it fails on my branch too with <code>import Mathlib</code> so my branch is a red herring.</p>",
        "id": 379297894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690490538
    },
    {
        "content": "<p>CI looks like it's up and running again BTW</p>",
        "id": 379298568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690490758
    },
    {
        "content": "<p>some bizarre progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"c1\">-- you can have one of the below imports, but not both!</span>\n\n<span class=\"c1\">--import Mathlib.Algebra.Lie.OfAssociative</span>\n<span class=\"c1\">--import Mathlib.LinearAlgebra.Matrix.ToLinearEquiv</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option pp.all true in</span>\n<span class=\"c1\">-- #check (S ⊗[R] S ⧸ I)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379303001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690492151
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"c1\">-- you can have any two of the below imports, but not all three</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Polynomial.Content</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option pp.all true in</span>\n<span class=\"c1\">-- #check (S ⊗[R] S ⧸ I)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379304203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690492579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Below each import is the list of files imported by it.</span>\n<span class=\"cm\">You can replace any of the three imports below with the</span>\n<span class=\"cm\">files it itself imports, and the problem goes away</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Lie.Basic</span>\n<span class=\"c1\">--import Mathlib.Algebra.Module.Equiv</span>\n<span class=\"c1\">--import Mathlib.Data.Bracket</span>\n<span class=\"c1\">--import Mathlib.LinearAlgebra.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"c1\">--import Mathlib.RingTheory.Ideal.Operations</span>\n<span class=\"c1\">--import Mathlib.RingTheory.Ideal.Quotient</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.EuclideanDomain.Basic</span>\n<span class=\"c1\">--import Mathlib.Algebra.EuclideanDomain.Defs</span>\n<span class=\"c1\">--import Mathlib.Algebra.Ring.Divisibility</span>\n<span class=\"c1\">--import Mathlib.Algebra.Ring.Regular</span>\n<span class=\"c1\">--import Mathlib.Algebra.GroupWithZero.Divisibility</span>\n<span class=\"c1\">--import Mathlib.Algebra.Ring.Basic</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- set_option pp.all true in</span>\n<span class=\"c1\">-- #check (S ⊗[R] S ⧸ I)</span>\n\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379305119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690492920
    },
    {
        "content": "<p>Oh it's just a timeout:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">80000</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">S</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 379305579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690493089
    },
    {
        "content": "<p>Doesn't bode well for future growth :-/ Actually maybe it's just a case of persuading Lean to look in the right direction more quickly...</p>",
        "id": 379305846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690493193
    },
    {
        "content": "<p><del>Would it make sense to mark <code>instance [Mul R] : SMul R R</code> a <code>default_instance</code>? Would that make it fast?</del> Nevermind, I think that's stupid. We already have it marked lower priority so that Lean finds other things first.</p>",
        "id": 379306284,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690493351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379228900\">said</a>:</p>\n<blockquote>\n<p>This now shows both steps, although it's possible the lean bump changed things too (we'll know in another 2.5 hours)</p>\n</blockquote>\n<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/repo-detail/e7b27246-a3e6-496a-b552-ff4b45c7236e?zoomXStart=1690330396471.1902&amp;zoomXEnd=1690646591767.5764&amp;dimensions=~Mathlib.RingTheory.Kaehler%3Ainstructions&amp;dayEquidistant=true\">All the data points</a> are now on the graph, including the forward-port that very slightly worsened performance</p>",
        "id": 379306736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690493527
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> Is cleaned up and awaiting review. The helper instances have been refined and prettied up.</p>",
        "id": 379460428,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690542521
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/8a8ae7f5-7f83-4994-84fb-0fd821345634/to/d628378f-a7da-42ac-bd3f-349766c958a1\">38.6% improvement</a> in Kaehler</p>",
        "id": 379561629,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690560511
    },
    {
        "content": "<p>Though just renaming things can <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/5487cf81-88fa-459f-a200-a9ba28e923aa\">improve by 30%</a>...?</p>",
        "id": 379563679,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690560928
    },
    {
        "content": "<p>I'm not clear which two runs are being compared in that last link. There have been two PRs recently which have hugely affected Kaehler, and so obviously we have to be careful about comparing runs before and after the relevant commits.</p>",
        "id": 379575013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690563365
    },
    {
        "content": "<p>master just before the bump in nightly to 7/19 vs <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a></p>",
        "id": 379575512,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690563466
    },
    {
        "content": "<p>master includes those two commits</p>",
        "id": 379576095,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690563577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, is it possible to show these PR runs on the same graph as the main repo history? The arrow rendering suggests that it might be able to render git branches...</p>",
        "id": 379581292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690564721
    },
    {
        "content": "<p>So is the main culprit the let binding created with <code>with</code> or is it the redundant <code>smul</code> field? </p>\n<p>I've been changing them both at the same time and I think Kevin has also. </p>\n<p>Do we have a simple test case?</p>",
        "id": 379609230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690570770
    },
    {
        "content": "<p>my guess is that it's the latter</p>",
        "id": 379614443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690572023
    },
    {
        "content": "<p>And that the problem with <code>with</code> is that it creates a bunch of other redundant fields too; not that it creates a let binding</p>",
        "id": 379614538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690572047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379581292\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>, is it possible to show these PR runs on the same graph as the main repo history? The arrow rendering suggests that it might be able to render git branches...</p>\n</blockquote>\n<p>Yes, it is built to be able to render branches. But I believe that would mean it would benchmark all those branches, on every push.</p>",
        "id": 379620006,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690573480
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">extra</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"s2\">\"hi\"</span><span class=\"o\">,</span> <span class=\"s2\">\"there\"</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">f.foo</span>\n    <span class=\"n\">extra</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bro\"</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">two</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toA</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">extra</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bro\"</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">three</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"n\">extra</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bro\"</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">four</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">extra</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bro\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">one</span>\n<span class=\"c1\">-- def one : B :=</span>\n<span class=\"c1\">-- let src : A := f;</span>\n<span class=\"c1\">-- @B.mk (A.mk (@A.foo f) (@A.bar src)) \"bro\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">two</span>\n<span class=\"c1\">-- def two : B :=</span>\n<span class=\"c1\">-- @B.mk f \"bro\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">three</span>\n<span class=\"c1\">-- def three : B :=</span>\n<span class=\"c1\">-- let src : A := f;</span>\n<span class=\"c1\">-- @B.mk (A.mk (@A.foo src) (@A.bar src)) \"bro\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">four</span>\n<span class=\"c1\">-- def four : B :=</span>\n<span class=\"c1\">-- @B.mk f \"bro\"</span>\n</code></pre></div>\n<p>So if I reduce things I get </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">B.mk</span> <span class=\"o\">(</span><span class=\"n\">A.mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A.foo</span> <span class=\"o\">(</span><span class=\"n\">A.mk</span> <span class=\"s2\">\"hi\"</span> <span class=\"s2\">\"there\"</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A.bar</span> <span class=\"o\">(</span><span class=\"n\">A.mk</span> <span class=\"s2\">\"hi\"</span> <span class=\"s2\">\"there\"</span><span class=\"o\">)))</span> <span class=\"s2\">\"bro\"</span>\n</code></pre></div>\n<p>vs </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">B.mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">A.mk</span> <span class=\"s2\">\"hi\"</span> <span class=\"s2\">\"there\"</span><span class=\"o\">)</span> <span class=\"s2\">\"bro\"</span>\n</code></pre></div>\n<p>?</p>",
        "id": 379669347,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690593356
    },
    {
        "content": "<p>Does this matter? For example <code>example : one = two := rfl</code> works fine. But <a href=\"https://github.com/leanprover-community/mathlib4/pull/6189\">#6189</a> says that it matters greatly. </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6189\">#6189</a> changes <em>just one</em> declaration in <code>Data.Finsupp.Basic</code> from style <code>one</code> to style <code>two</code>, and results in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6189#issuecomment-1656192258\">this benchmark</a> which goes to <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/fe746c50-05c1-4f85-94d5-42ab5779363b/to/9447cded-c299-49df-a8e0-556cdda1d861\">this speedcenter link</a>. The 30 percent speedup of <code>RepresentationTheory.GroupCohomology.Basic</code> is not a case of something going from 4 seconds to 3 seconds; this file is 233 lines long and is full of <em>large</em> <code>maxHeartbeat</code> bumps. Before the change the largest one was <code>set_option maxHeartbeats 6400000</code>, one of the largest in mathlib; two of these can now come down to <code>3200000</code>, as is evidenced in the PR diff.</p>\n<p>Another way of looking at it: I've been compiling mathlib on the command line quite a bit during these experiments, and it's really noticeable that most of it gets done really quickly on my machine, and then there's some files at the end which take a super-long time and really slow down total compilation speeds. Again taking <code>RepresentationTheory.GroupCohomology.Basic</code> as an example; before <a href=\"https://github.com/leanprover-community/mathlib4/pull/6189\">#6189</a> hit if I add a newline to <code>RepresentationTheory.GroupCohomology.Basic</code> and recompile I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">1388</span><span class=\"bp\">/</span><span class=\"mi\">1389</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Basic</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">6</span><span class=\"n\">m27.680s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">6</span><span class=\"n\">m28.425s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m1.252s</span>\n</code></pre></div>\n<p>and after, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">time</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Basic</span>\n<span class=\"o\">[</span><span class=\"mi\">1385</span><span class=\"bp\">/</span><span class=\"mi\">1386</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.RepresentationTheory.GroupCohomology.Basic</span>\n\n<span class=\"n\">real</span>    <span class=\"mi\">4</span><span class=\"n\">m34.496s</span>\n<span class=\"n\">user</span>    <span class=\"mi\">4</span><span class=\"n\">m35.172s</span>\n<span class=\"n\">sys</span> <span class=\"mi\">0</span><span class=\"n\">m1.281s</span>\n</code></pre></div>\n<p>This is evidence that, in mathlib at least, <code>with</code> is sometimes a very dangerous choice.</p>",
        "id": 379718149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690617956
    },
    {
        "content": "<blockquote>\n<p>Does this matter?</p>\n</blockquote>\n<p>By eta extensionality, all those declarations are defeq. But that doesn't mean their performance is identical.</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6189\">#6189</a> changes <em>just one</em> declaration</p>\n</blockquote>\n<p>Just to check, style <code>four</code> would work here as well and probably be the most natural one? Is it clear in which scenarios people use/resort to the different styles?</p>",
        "id": 379720956,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690618805
    },
    {
        "content": "<p>I think it's clear that it's pretty random, because my perception was that in mathlib3 none of this mattered (so the community is just writing anything which compiles; we've only very recently understood that this is an issue which needs thought)</p>",
        "id": 379721135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690618854
    },
    {
        "content": "<p>We often used style <code>one</code> instead of <code>four</code> because it ensures that we don't accidentally pick up default values when we actually want to pick up the values we used in <code>f</code> (this recently caused a really dumb instance diamond where the <code>AddCommGroup</code> implied by a ring was not defeq to the separate global instance)</p>",
        "id": 379730556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690621261
    },
    {
        "content": "<p>Maybe that's an indication that default values are just a bad idea though</p>",
        "id": 379730890,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690621349
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379720956\">said</a>:</p>\n<blockquote>\n<p>Just to check, style <code>four</code> would work here as well and probably be the most natural one? Is it clear in which scenarios people use/resort to the different styles?</p>\n</blockquote>\n<p>I just changed <code>Finsupp.module</code> on master to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">module</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n    <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>i.e. a change from <code>two</code> to <code>four</code>, and everything still compiles and our test file <code>RepresentationTheory,GroupCohomology.Basic</code> still takes the same amount of time, so yes you're right and probably this would have been more idiomatic (e.g. it doesn't refer to an explicit instance by name).</p>",
        "id": 379746053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690625066
    },
    {
        "content": "<p>I guess there is also</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">five</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hi\"</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"s2\">\"there\"</span>\n  <span class=\"n\">extra</span> <span class=\"o\">:=</span> <span class=\"s2\">\"bro\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">five</span>\n<span class=\"c1\">-- def five : B :=</span>\n<span class=\"c1\">-- @B.mk (A.mk \"hi\" \"there\") \"bro\"</span>\n</code></pre></div>\n<p>which we seem to paying a performance cost for also.</p>",
        "id": 379770261,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690630041
    },
    {
        "content": "<p>Reran the benchmark on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> with some <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149/commits/a2b1a3970b22a7bda3faf2049fadb63ffb2ead13\">additional changes</a>. Things were pretty stable except the previous decrease in performance of <code>Ideal.Quotient</code> was reversed. Probably due to two of the <code>smul</code> field removals in  <code>Module.Basic</code>.</p>",
        "id": 379771848,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690630405
    },
    {
        "content": "<p>One of the removals probably did nothing with the remaining <code>with</code>.</p>",
        "id": 379771960,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690630435
    },
    {
        "content": "<p>There are a quite a few <code>with</code>'s remaining in <code>Module.Basic</code>. I think <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> should be merged as is and further experimentation can be done in a more targeted manner.</p>",
        "id": 379772843,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690630627
    },
    {
        "content": "<p><code>rg 'with$' | rg '\\{'</code> in the <code>Mathlib</code> folder gives 2363 instances.</p>",
        "id": 379779709,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690632126
    },
    {
        "content": "<p>Per Eric’s suggestion, I broke up <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> into </p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> only adds the instances to <code>RingTheory.Kaehler</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/6240\">#6240</a> which tests only Kevin’s original pattern for breaking up <code>semiRing</code> in <code>RingTheory.TensorProduct</code></li>\n<li><a href=\"https://github.com/leanprover-community/mathlib4/pull/6241\">#6241</a> has all the <code>smul</code> removals plus cleans up some porting notes</li>\n</ul>",
        "id": 379870328,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690656466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> the first bench mark run on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6240\">#6240</a> can be cancelled because <code>Kaehler</code> did build.</p>",
        "id": 379870570,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690656536
    },
    {
        "content": "<p>Instructions unclear, killed two of them</p>",
        "id": 379874203,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690657868
    },
    {
        "content": "<p>Please reissue <code>!bench</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> if still needed. But just to make sure the current impact is clear, issuing four <code>!bench</code> commands will block other speedcenter progress for approximately 10 hours</p>",
        "id": 379879798,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690660237
    },
    {
        "content": "<p>So when does the FRO buy us a bunch more speedcenter machines? :-)</p>",
        "id": 379890545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690664958
    },
    {
        "content": "<p>Thanks. Current situation is most efficient. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> will get its turn after merging. </p>\n<p>I’ve got a machine I don’t do much with currently…</p>",
        "id": 379890863,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690665127
    },
    {
        "content": "<p>I made two different versions of repeatedly extending instances and checking equality using <code>rfl</code>. </p>\n<p>One using the <code>with</code> pattern: </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>With</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Base</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"kd\">extends</span> <span class=\"n\">Base</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">y1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">y1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x1</span> <span class=\"k\">with</span>\n    <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y1</span> <span class=\"k\">with</span>\n    <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">y2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x3</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x2</span> <span class=\"k\">with</span>\n    <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y2</span> <span class=\"k\">with</span>\n    <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x3</span> <span class=\"bp\">=</span> <span class=\"n\">y3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">D</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x3</span> <span class=\"k\">with</span>\n    <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y3</span> <span class=\"k\">with</span>\n    <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"n\">y4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">E</span> <span class=\"kd\">extends</span> <span class=\"n\">D</span> <span class=\"n\">where</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x4</span> <span class=\"k\">with</span>\n    <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y4</span> <span class=\"k\">with</span>\n    <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">y5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">F</span> <span class=\"kd\">extends</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x5</span> <span class=\"k\">with</span>\n    <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y5</span> <span class=\"k\">with</span>\n    <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">y6</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">G</span> <span class=\"kd\">extends</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n  <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x7</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x6</span> <span class=\"k\">with</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y7</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y6</span> <span class=\"k\">with</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x7</span> <span class=\"bp\">=</span> <span class=\"n\">y7</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">H</span> <span class=\"kd\">extends</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x8</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x7</span> <span class=\"k\">with</span>\n    <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y8</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y7</span> <span class=\"k\">with</span>\n    <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x8</span> <span class=\"bp\">=</span> <span class=\"n\">y8</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>\n<p>and one using the <code>toX</code> pattern </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Without </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>class Base where<br>\n  val : Nat</p>\n<p>instance x : Base := ⟨0⟩<br>\ninstance y : Base := ⟨0⟩</p>\n<p>class A' extends Base where<br>\n  a : Nat</p>\n<p>instance u1 : A' :=<br>\n  { toBase := x<br>\n    a := 0 }</p>\n<p>instance v1 : A' :=<br>\n  { toBase := y<br>\n    a := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u1 = v1 := rfl</p>\n<p>structure B' extends A' where<br>\n  b : Nat</p>\n<p>def u2 : B' :=<br>\n  { toA' := u1<br>\n    b := 0 }</p>\n<p>def v2 : B' :=<br>\n  { toA' := v1<br>\n    b := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u2 = v2 := rfl</p>\n<p>structure C' extends B' where<br>\n  c : Nat</p>\n<p>def u3 : C' :=<br>\n  { toB' := u2<br>\n    c := 0 }</p>\n<p>def v3 : C' :=<br>\n  { toB' := u2<br>\n    c := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u3 = v3 := rfl</p>\n<p>structure D' extends C' where<br>\n  d : Nat</p>\n<p>def u4 : D' :=<br>\n  { toC' := u3<br>\n    d := 0 }</p>\n<p>def v4 : D' :=<br>\n  { toC' := v3<br>\n    d := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u4 = v4 := rfl</p>\n<p>structure E' extends D' where<br>\n  e : Nat</p>\n<p>def u5 : E' :=<br>\n  { toD' := u4<br>\n    e := 0 }</p>\n<p>def v5 : E' :=<br>\n  { toD' := v4<br>\n    e := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u5 = v5 := rfl</p>\n<p>structure F' extends E' where<br>\n  f : Nat</p>\n<p>def u6 : F' :=<br>\n  { toE' := u5<br>\n    f := 0 }</p>\n<p>def v6 : F' :=<br>\n  { toE' := v5<br>\n    f := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u6 = v6 := rfl</p>\n<p>structure G' extends F' where<br>\n  g : Nat</p>\n<p>def u7 : G' :=<br>\n  { toF' := u6<br>\n    g := 0 }</p>\n<p>def v7 : G' :=<br>\n  { toF' := v6<br>\n    g := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u7 = v7 := rfl</p>\n<p>structure H' extends G' where<br>\n  h : Nat</p>\n<p>def u8 : H' :=<br>\n  { toG' := u7<br>\n    h := 0 }</p>\n<p>def v8 : H' :=<br>\n  { toG' := v7<br>\n    h := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u8 = v8 := rfl</p>\n</div></div>\n<p>using <code>lake build</code> gives </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cumulative<span class=\"w\"> </span>profiling<span class=\"w\"> </span>times:\n<span class=\"w\">    </span>attribute<span class=\"w\"> </span>application<span class=\"w\"> </span><span class=\"m\">0</span>.00508ms\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span>new<span class=\"w\"> </span><span class=\"m\">0</span>.0201ms\n<span class=\"w\">    </span>interpretation<span class=\"w\"> </span><span class=\"m\">0</span>.639ms\n<span class=\"w\">    </span><span class=\"nb\">type</span><span class=\"w\"> </span>checking<span class=\"w\"> </span><span class=\"m\">0</span>.445ms\n</code></pre></div>\n<p>on the <code>with</code> patterns and </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cumulative<span class=\"w\"> </span>profiling<span class=\"w\"> </span>times:\n<span class=\"w\">    </span>attribute<span class=\"w\"> </span>application<span class=\"w\"> </span><span class=\"m\">0</span>.00458ms\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span>new<span class=\"w\"> </span><span class=\"m\">0</span>.0193ms\n<span class=\"w\">    </span>interpretation<span class=\"w\"> </span><span class=\"m\">0</span>.63ms\n<span class=\"w\">    </span><span class=\"nb\">type</span><span class=\"w\"> </span>checking<span class=\"w\"> </span><span class=\"m\">0</span>.174ms\n</code></pre></div>\n<p>on the <code>toX</code> pattern</p>\n<p>That difference in type checking seems significant.</p>",
        "id": 379914753,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690679040
    },
    {
        "content": "<p>Here's a new theory for why moving <code>instance : Mul (TensorProduct _ _ _)</code> to its own declaration helped: It means that the default value for <code>npow</code> field is not populated with a copy of that instance that has to duplicate the <code>mul</code> field</p>",
        "id": 380347434,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690810776
    },
    {
        "content": "<p>Certainly Lean got very interested in proving <code>npowRec =?= npowRec</code> in the traces when everything was still slow (this is mentioned in the second post at the top); it was one of the things which would show up 100 times in the traces and take 0.02 seconds each time.</p>",
        "id": 380350108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690811241
    },
    {
        "content": "<p>Can default arguments be more declarative?</p>",
        "id": 380350451,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690811297
    },
    {
        "content": "<p>Also which of the following the describes the behavior? I don't supply a value for the field so</p>\n<ol>\n<li>Lean attempts to synthesis one. Failing it fails back to the default</li>\n<li>Lean uses the default value</li>\n</ol>",
        "id": 380350913,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690811400
    },
    {
        "content": "<p>I'm working on a PR that just removes these defaults, they're a constant source of bugs</p>",
        "id": 380352547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690811668
    },
    {
        "content": "<p>Opt in should be the default at least</p>",
        "id": 380352872,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690811723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380350913\">said</a>:</p>\n<blockquote>\n<p>Lean attempts to synthesis one. Failing it fails back to the default</p>\n</blockquote>\n<p>Synthesize in what sense? These fields aren't typeclasses, so TC synthesis isn't relevant here</p>",
        "id": 380353348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690811793
    },
    {
        "content": "<p>Via <code>Try this</code> or something similar</p>",
        "id": 380353464,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690811811
    },
    {
        "content": "<p>They are fields of typeclasses right?</p>",
        "id": 380353513,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690811820
    },
    {
        "content": "<p>To be clear, if they are removed, I won't shed a tear</p>",
        "id": 380353660,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690811844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380352547\">said</a>:</p>\n<blockquote>\n<p>I'm working on a PR that just removes these defaults, they're a constant source of bugs</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6262\">#6262</a> is that PR</p>",
        "id": 380353722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690811855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380353513\">said</a>:</p>\n<blockquote>\n<p>They are fields of typeclasses right?</p>\n</blockquote>\n<p>And we usually have those typeclasses floating around in the context. But I understand the answer</p>",
        "id": 380356827,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690812359
    },
    {
        "content": "<p>It sounds like you're saying Lean should try filling the <code>nsmul</code> field with <code>AddMonoid.nsmul</code> (synthesizing the implicit TC argument in that declaration)?</p>",
        "id": 380357296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690812419
    },
    {
        "content": "<p>Yes.</p>",
        "id": 380357561,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690812459
    },
    {
        "content": "<p>We could presumably set the default to <code>by exact AddMonoid.nsmul &lt;|&gt; exact nsmulRec</code></p>",
        "id": 380357926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690812513
    },
    {
        "content": "<p>It would tell me what failed right? In terms of missing fields?</p>",
        "id": 380359346,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690812684
    },
    {
        "content": "<p>If you used <code>by exact AddMonoid.nsmul</code>, yes</p>",
        "id": 380359731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690812732
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380347434\">said</a>:</p>\n<blockquote>\n<p>Here's a new theory for why moving <code>instance : Mul (TensorProduct _ _ _)</code> to its own declaration helped: It means that the default value for <code>npow</code> field is not populated with a copy of that instance that has to duplicate the <code>mul</code> field</p>\n</blockquote>\n<p>So which of the changes that Matt made on <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...mrb/remove_useless_fields\">this branch</a> do you think will have a useful effect? I don't want to keep spamming !bench</p>",
        "id": 380397303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690818301
    },
    {
        "content": "<p>I think that you can infer the changes from the original run on <code>Kaehler</code>.</p>",
        "id": 380397905,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690818380
    },
    {
        "content": "<p>I've begun a larger removal effort and am trying to get the current changes to compile at the moment</p>",
        "id": 380398148,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690818421
    },
    {
        "content": "<p>Every change in that branch looks good to me, though I'm curious to know whether it makes a difference</p>",
        "id": 380398823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818531
    },
    {
        "content": "<p>(I'd be happy to merge it anyway as long as it doesn't make performance much worse)</p>",
        "id": 380398910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818544
    },
    {
        "content": "<p>If you want a fun <code>with</code> that is deep, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">booleanAlgebra</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BooleanAlgebra</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- Pi.booleanAlgebra</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span> <span class=\"o\">:</span> <span class=\"n\">BooleanAlgebra</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">))</span> <span class=\"k\">with</span>\n    <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∪</span> <span class=\"bp\">·</span><span class=\"o\">),</span>\n    <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">),</span>\n    <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">∩</span> <span class=\"bp\">·</span><span class=\"o\">),</span>\n    <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span>\n    <span class=\"n\">compl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">},</span>\n    <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"n\">univ</span><span class=\"o\">,</span>\n    <span class=\"n\">sdiff</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">t</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 380399029,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690818564
    },
    {
        "content": "<p>Ah, that brings up something I was just going to say</p>",
        "id": 380399162,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818593
    },
    {
        "content": "<p>I think that instance should remain a <code>with</code>, because otherwise it unfolds weirdly</p>",
        "id": 380399327,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818615
    },
    {
        "content": "<p>The <code>smul := SMul.comp.smul f</code> stuff from your branch is a much less bad version of this, where removing that line causes it to unfold with an extra coercion</p>",
        "id": 380399470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818637
    },
    {
        "content": "<p>Yes, this seems to be the main negative from experience now</p>",
        "id": 380399853,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690818702
    },
    {
        "content": "<p>But the <code>compHom</code> stuff could be fixed by changing those bits of API to use <code>MonoidHomClass</code></p>",
        "id": 380400909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818863
    },
    {
        "content": "<p>Which didn't exist at the time</p>",
        "id": 380400944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690818869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380397303\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380347434\">said</a>:</p>\n<blockquote>\n<p>Here's a new theory for why moving <code>instance : Mul (TensorProduct _ _ _)</code> to its own declaration helped: It means that the default value for <code>npow</code> field is not populated with a copy of that instance that has to duplicate the <code>mul</code> field</p>\n</blockquote>\n<p>So which of the changes that Matt made on <a href=\"https://github.com/leanprover-community/mathlib4/compare/master...mrb/remove_useless_fields\">this branch</a> do you think will have a useful effect? I don't want to keep spamming !bench</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6241\">#6241</a> splits off the field elimination changes. Everything has been benched together in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a>. </p>\n<p>You can see the most recent run <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149#issuecomment-1656531998\">here</a> on the latter PR. All the changes outside of Kaehler are due to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6241\">#6241</a> I think</p>",
        "id": 380401231,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690818914
    },
    {
        "content": "<p>I've bumped the commit that you merged in from master to the top of the benchmark queue</p>",
        "id": 380403963,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690819339
    },
    {
        "content": "<p>Though I guess <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/24b2d3ab-ebc9-4b6a-b8c4-8813a378efff/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=42ced2f01a2da3ff4d20caf991af6a88f406260d\">http://speedcenter.informatik.kit.edu/mathlib4/compare/24b2d3ab-ebc9-4b6a-b8c4-8813a378efff/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=42ced2f01a2da3ff4d20caf991af6a88f406260d</a> is probably close enough</p>",
        "id": 380405031,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690819461
    },
    {
        "content": "<p>I was just looking through old scratch files and I see that there's still one raised heartbeat in <code>RingTheory.AdjoinRoot</code>. Looking at the traces in the proof, they're again just full of things where Lean is taking 1 second to prove things which look syntactically equal (and I can't work out if they are syntactically equal because any attempt to turn on pp.all crashes VS Code). Here's an example of a trace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">124474</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">MulHomClass.toFunLike</span> <span class=\"bp\">=?=</span> <span class=\"n\">MulHomClass.toFunLike</span> <span class=\"bp\">▼</span>\n                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">124430</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalRingHomClass.toMulHomClass.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalRingHomClass.toMulHomClass.1</span> <span class=\"bp\">▼</span>\n                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">124316</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f_1</span> <span class=\"bp\">↦</span> <span class=\"n\">f_1.toFun</span><span class=\"o\">,</span>\n                                  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f_1</span> <span class=\"bp\">↦</span> <span class=\"n\">f_1.toFun</span><span class=\"o\">,</span> <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">080956</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">f_1</span> <span class=\"bp\">↦</span> <span class=\"n\">f_1.toFun</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">f_1</span> <span class=\"bp\">↦</span> <span class=\"n\">f_1.toFun</span> <span class=\"bp\">▼</span>\n                                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">080834</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span> <span class=\"bp\">→+*</span>\n                                      <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n                                        <span class=\"n\">Ideal.span</span>\n                                          <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span>\n                                              <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span> <span class=\"bp\">→+*</span>\n                                      <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n                                        <span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041883</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n                                        <span class=\"n\">Ideal.span</span>\n                                          <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span>\n                                              <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n                                        <span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">033986</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">▶</span>\n                                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">004940</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"bp\">▼</span>\n                                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">004925</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonAssocSemiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonAssocSemiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▼</span>\n                                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">041582</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n                                            <span class=\"n\">Ideal.span</span>\n                                              <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span>\n                                                  <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span>\n                                            <span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}</span> <span class=\"bp\">▶</span>\n                                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">724339</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"bp\">▼</span>\n                                        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">724329</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Semiring.toNonUnitalSemiring.1</span> <span class=\"bp\">=?=</span> <span class=\"n\">Semiring.toNonUnitalSemiring.1</span> <span class=\"bp\">▼</span>\n                                          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">724139</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">NonUnitalNonAssocSemiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">NonUnitalNonAssocSemiring.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">▼</span>\n                                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">011918</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">RingCon.Quotient</span>\n                                                  <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.ringCon</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">Ideal.span</span>\n                                                      <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span>\n                                                          <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}))</span> <span class=\"bp\">=?=</span> <span class=\"n\">RingCon.Quotient</span>\n                                                  <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.ringCon</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"n\">f</span><span class=\"bp\">✝</span><span class=\"o\">}))</span> <span class=\"bp\">▶</span>\n                                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">534922</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">AddCommMonoid.mk</span> <span class=\"n\">_</span> <span class=\"bp\">=?=</span> <span class=\"n\">AddCommMonoid.mk</span> <span class=\"n\">_</span> <span class=\"bp\">▶</span>\n                                            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">177104</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">MulZeroClass.toMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">MulZeroClass.toMul</span> <span class=\"bp\">▶</span>\n</code></pre></div>\n<p>Everything is of the form <code>X =?= X</code> at least according to the prettyprinter. Something triggered this nightmare (this is exactly what the Kaehler file looked like before we started tinkering) but I don't really have a good understanding of what the crucial step was which made all this stuff magically vanish. Could it be this for example?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quotEquivOfEq</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"bp\">⧸</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Submodule.quotEquivOfEq</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">⟩</span>\n      <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Or is it obviously not that? Which <code>with</code>s do I try and remove? Does anyone have a gut feeling as to which ones are causing the trouble? For example I removed one in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6144\">#6144</a> and it seemed to make things worse, not better.</p>",
        "id": 380405183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690819483
    },
    {
        "content": "<p>That looks a bit unbelievable to me, I think I'd prefer to see the fresh run</p>",
        "id": 380405472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690819527
    },
    {
        "content": "<p>Oh lol the two files which were slower in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6144\">#6144</a> (<code>Mathlib.Algebra.Category.ModuleCat.Abelian</code> and <code>Mathlib.Algebra.Category.ModuleCat.Limits</code>) are precisely the two files spoiling the sea of green speedups in the speedcenter link you just posted! Does that make it more believable?</p>",
        "id": 380406115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690819625
    },
    {
        "content": "<p>Wait... -20% wall-clock?</p>",
        "id": 380422972,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690822494
    },
    {
        "content": "<p>I assumed this run had failed</p>",
        "id": 380423476,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690822581
    },
    {
        "content": "<p>I have <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> now where I removed a bunch of <code>with</code>'s from instances in <code>Data</code>. It builds locally now. </p>\n<p>It is mainly to see the results of <code>!bench</code>.</p>",
        "id": 380485001,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690835176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380405472\">said</a>:</p>\n<blockquote>\n<p>That looks a bit unbelievable to me, I think I'd prefer to see the fresh run</p>\n</blockquote>\n<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/ee1ac79b-3f4b-468d-9346-6d49c006c2b7\">Here's</a> the fresh run. Do we think this is real?</p>",
        "id": 380493845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690837589
    },
    {
        "content": "<p>That’s pretty crazy</p>",
        "id": 380495716,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690838184
    },
    {
        "content": "<p>Can someone explain exactly what I'm looking at? What's the diff between the commits we're benchmarking?</p>",
        "id": 380495779,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690838212
    },
    {
        "content": "<p>What do you see? I only get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Not</span> <span class=\"n\">Found</span>\n<span class=\"n\">The</span> <span class=\"n\">requested</span> <span class=\"n\">URL</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"n\">on</span> <span class=\"n\">this</span> <span class=\"n\">server.</span>\n</code></pre></div>",
        "id": 380496218,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690838370
    },
    {
        "content": "<p>Riccardo, you're meant to see <br>\n<a href=\"/user_uploads/3121/QfRq8dFLoph1scF3XdxKa8hI/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/QfRq8dFLoph1scF3XdxKa8hI/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/QfRq8dFLoph1scF3XdxKa8hI/image.png\"></a></div>",
        "id": 380496653,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690838488
    },
    {
        "content": "<p>Works on my machine... The diff is exactly <a href=\"https://github.com/leanprover-community/mathlib4/pull/6241\">#6241</a> vs the version of master it last merged</p>",
        "id": 380496682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690838496
    },
    {
        "content": "<p>Lean is building mathlib 20% faster because of the changes in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6241\">#6241</a> vs the master according to the speed center</p>",
        "id": 380496765,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690838515
    },
    {
        "content": "<p>The individual file changes track because it is reproducing what happened in Kaehler which this was split from</p>",
        "id": 380496965,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690838557
    },
    {
        "content": "<p>But 20% overall is very surprising</p>",
        "id": 380497073,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690838586
    },
    {
        "content": "<p>Any opposition to merging this as is? Sure, it makes a bad file worse, but 20% overall is huge</p>",
        "id": 380497115,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690838602
    },
    {
        "content": "<p>that is insane (20% that is, not the idea to merge it)</p>",
        "id": 380497147,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690838612
    },
    {
        "content": "<p>Wow, that's really impressive</p>",
        "id": 380497418,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690838685
    },
    {
        "content": "<p>It would be interesting to know if there was one change in that PR in particular that is responsible, but not to the point of refraining from making the other changes</p>",
        "id": 380497471,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690838702
    },
    {
        "content": "<p>something seems fishy though, why don't more files have significant (&gt;20%) changes?</p>",
        "id": 380497796,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690838779
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> is in the same spirit and will be done in a couple hours</p>",
        "id": 380498026,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690838832
    },
    {
        "content": "<p>I think it's only the ones using quotients that are affected</p>",
        "id": 380498027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690838832
    },
    {
        "content": "<p>And those 6 files account for &gt;20% of the entire compile time of mathlib?</p>",
        "id": 380498126,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690838862
    },
    {
        "content": "<p>Their changes were only ~10% better (as far as instructions go anyway, which I think we're using as a proxy for compile time)</p>",
        "id": 380498279,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690838904
    },
    {
        "content": "<p>Sorting by most-removed-instructions first:</p>\n<p><a href=\"/user_uploads/3121/ANbNzmE4_68XsVQ9WaXsQK6b/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ANbNzmE4_68XsVQ9WaXsQK6b/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ANbNzmE4_68XsVQ9WaXsQK6b/image.png\"></a></div>",
        "id": 380498745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690839036
    },
    {
        "content": "<p>It's strange that the number of instructions has decreased overall by only 0.08%</p>",
        "id": 380498878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690839096
    },
    {
        "content": "<p>Maybe we're using much less memory somehow?</p>",
        "id": 380498923,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690839114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, is \"instructions\" measuring only CPU instructions in userspace, or in kernel virtual memory handlers too?</p>",
        "id": 380499104,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690839171
    },
    {
        "content": "<p>I think it's worth stressing that <code>Mathlib.Algebra.Category.ModuleCat.Limits</code>, the file which gets slower by 15%, is about 200 lines and compiles on my machine in 8 seconds. Whereas files like Kaehler were taking 6+ minutes to compile this time last week, so 15% speedup is a visible difference.</p>",
        "id": 380501070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690839837
    },
    {
        "content": "<p>Aha, maybe the point is that there were several files which take a <em>very</em> long time to compile, and several of these got faster, but not by more than 5%?</p>",
        "id": 380501722,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690840093
    },
    {
        "content": "<p>The per-file metric we're using is instructions, which only improved by 0.08% globally; But the global metrics also include wall time, which got <em>substantially</em> faster</p>",
        "id": 380502237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840278
    },
    {
        "content": "<p>Getting faster: Yes! Recently I've been watching mathlib compile (because I don't want to spam the speedcenter but have been doing a lot of testing), and it compiles the first 1800 files really quickly and you think \"wow, we're half way through and it's only taken about 10 minutes\" and then at the end there are some files which take 10+ minutes to compile.</p>",
        "id": 380502245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690840282
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 380502262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840289
    },
    {
        "content": "<p>Kevin, I think maybe you haven't caught on to the point I'm making (sorry if you have, it just seemed like we're talking on different wavelengths): this speedcenter run gives a 20% decrease <em>across all of mathlib</em>, but ... <em>only 6 individual files</em> had a decrease by more than 5% (of instructions). That seemed off to me.</p>",
        "id": 380502373,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690840322
    },
    {
        "content": "<p>Jireh, see my <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380502237\">comment above</a>: that 20% is a very different metric to the 5%, as we don't measure wall time per file.</p>",
        "id": 380502463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840346
    },
    {
        "content": "<p>Is it though? I thought that instructions were supposed to be a good proxy for build time?</p>",
        "id": 380502599,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690840391
    },
    {
        "content": "<p>My hunch is that instructions are only measured in user space</p>",
        "id": 380502637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840403
    },
    {
        "content": "<p>And therefore doesn't include costs due to file IO or memory page faults</p>",
        "id": 380502682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840422
    },
    {
        "content": "<p>Maybe we want to change the speedcenter to list wall time per file instead of instructions per file then?</p>",
        "id": 380502893,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690840495
    },
    {
        "content": "<p>I don't think the \"machine changed between runs\" explanation is plausible, because we benchmarked the commit history <code>A &lt;-- C &lt;-- B</code> (where <code>B</code> is the magic PR) in the order <code>A B C</code>, and the diff between A and C is negligeable</p>",
        "id": 380503080,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690840558
    },
    {
        "content": "<p>I'm not necessarily arguing the run is invalid, only the speedcenter data seemed fishy under my presuppositions about what it was measuring, but your explanation I think points out that my assumptions may be invalid.</p>",
        "id": 380504924,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690841209
    },
    {
        "content": "<p>I’m skeptical. <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/8a8ae7f5-7f83-4994-84fb-0fd821345634/to/cf8599d5-9dbf-4104-9315-f3c0677c847c\">This run</a> has these changes +</p>\n<ul>\n<li>extra instances in Kaehler</li>\n<li>split of <code>semiRing</code> instance in TensorProduct into parents</li>\n</ul>\n<p>Wall clock improves but only 1%. Perhaps I am confused.</p>",
        "id": 380506824,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690841909
    },
    {
        "content": "<p>But you can see that <code>with</code> causes problems in simple cases like below. </p>\n<p>If Lean can figure out that all fields have been filled, can it store the info as though it was specified by the latter pattern?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/379914753\">said</a>:</p>\n<blockquote>\n<p>I made two different versions of repeatedly extending instances and checking equality using <code>rfl</code>. </p>\n<p>One using the <code>with</code> pattern: </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>With</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Base</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Base</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"kd\">extends</span> <span class=\"n\">Base</span> <span class=\"n\">where</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">x1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">y1</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x1</span> <span class=\"bp\">=</span> <span class=\"n\">y1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x1</span> <span class=\"k\">with</span>\n    <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y2</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y1</span> <span class=\"k\">with</span>\n    <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x2</span> <span class=\"bp\">=</span> <span class=\"n\">y2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x3</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x2</span> <span class=\"k\">with</span>\n    <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y3</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y2</span> <span class=\"k\">with</span>\n    <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x3</span> <span class=\"bp\">=</span> <span class=\"n\">y3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">D</span> <span class=\"kd\">extends</span> <span class=\"n\">C</span> <span class=\"n\">where</span>\n  <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x3</span> <span class=\"k\">with</span>\n    <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y4</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y3</span> <span class=\"k\">with</span>\n    <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x4</span> <span class=\"bp\">=</span> <span class=\"n\">y4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">E</span> <span class=\"kd\">extends</span> <span class=\"n\">D</span> <span class=\"n\">where</span>\n  <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x4</span> <span class=\"k\">with</span>\n    <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y5</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y4</span> <span class=\"k\">with</span>\n    <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x5</span> <span class=\"bp\">=</span> <span class=\"n\">y5</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">F</span> <span class=\"kd\">extends</span> <span class=\"n\">E</span> <span class=\"n\">where</span>\n  <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x5</span> <span class=\"k\">with</span>\n    <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y6</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y5</span> <span class=\"k\">with</span>\n    <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x6</span> <span class=\"bp\">=</span> <span class=\"n\">y6</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">G</span> <span class=\"kd\">extends</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n  <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x7</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x6</span> <span class=\"k\">with</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y7</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y6</span> <span class=\"k\">with</span>\n    <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x7</span> <span class=\"bp\">=</span> <span class=\"n\">y7</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">H</span> <span class=\"kd\">extends</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">x8</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">x7</span> <span class=\"k\">with</span>\n    <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">y8</span> <span class=\"o\">:</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">y7</span> <span class=\"k\">with</span>\n    <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">x8</span> <span class=\"bp\">=</span> <span class=\"n\">y8</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>\n<p>and one using the <code>toX</code> pattern </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Without </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>class Base where<br>\n  val : Nat</p>\n<p>instance x : Base := ⟨0⟩<br>\ninstance y : Base := ⟨0⟩</p>\n<p>class A' extends Base where<br>\n  a : Nat</p>\n<p>instance u1 : A' :=<br>\n  { toBase := x<br>\n    a := 0 }</p>\n<p>instance v1 : A' :=<br>\n  { toBase := y<br>\n    a := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u1 = v1 := rfl</p>\n<p>structure B' extends A' where<br>\n  b : Nat</p>\n<p>def u2 : B' :=<br>\n  { toA' := u1<br>\n    b := 0 }</p>\n<p>def v2 : B' :=<br>\n  { toA' := v1<br>\n    b := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u2 = v2 := rfl</p>\n<p>structure C' extends B' where<br>\n  c : Nat</p>\n<p>def u3 : C' :=<br>\n  { toB' := u2<br>\n    c := 0 }</p>\n<p>def v3 : C' :=<br>\n  { toB' := u2<br>\n    c := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u3 = v3 := rfl</p>\n<p>structure D' extends C' where<br>\n  d : Nat</p>\n<p>def u4 : D' :=<br>\n  { toC' := u3<br>\n    d := 0 }</p>\n<p>def v4 : D' :=<br>\n  { toC' := v3<br>\n    d := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u4 = v4 := rfl</p>\n<p>structure E' extends D' where<br>\n  e : Nat</p>\n<p>def u5 : E' :=<br>\n  { toD' := u4<br>\n    e := 0 }</p>\n<p>def v5 : E' :=<br>\n  { toD' := v4<br>\n    e := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u5 = v5 := rfl</p>\n<p>structure F' extends E' where<br>\n  f : Nat</p>\n<p>def u6 : F' :=<br>\n  { toE' := u5<br>\n    f := 0 }</p>\n<p>def v6 : F' :=<br>\n  { toE' := v5<br>\n    f := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u6 = v6 := rfl</p>\n<p>structure G' extends F' where<br>\n  g : Nat</p>\n<p>def u7 : G' :=<br>\n  { toF' := u6<br>\n    g := 0 }</p>\n<p>def v7 : G' :=<br>\n  { toF' := v6<br>\n    g := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u7 = v7 := rfl</p>\n<p>structure H' extends G' where<br>\n  h : Nat</p>\n<p>def u8 : H' :=<br>\n  { toG' := u7<br>\n    h := 0 }</p>\n<p>def v8 : H' :=<br>\n  { toG' := v7<br>\n    h := 0 }</p>\n<p>set_option profiler true in<br>\nset_option trace.Meta.isDefEq true in<br>\nexample : u8 = v8 := rfl</p>\n</div></div>\n<p>using <code>lake build</code> gives </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cumulative<span class=\"w\"> </span>profiling<span class=\"w\"> </span>times:\n<span class=\"w\">    </span>attribute<span class=\"w\"> </span>application<span class=\"w\"> </span><span class=\"m\">0</span>.00508ms\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span>new<span class=\"w\"> </span><span class=\"m\">0</span>.0201ms\n<span class=\"w\">    </span>interpretation<span class=\"w\"> </span><span class=\"m\">0</span>.639ms\n<span class=\"w\">    </span><span class=\"nb\">type</span><span class=\"w\"> </span>checking<span class=\"w\"> </span><span class=\"m\">0</span>.445ms\n</code></pre></div>\n<p>on the <code>with</code> patterns and </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cumulative<span class=\"w\"> </span>profiling<span class=\"w\"> </span>times:\n<span class=\"w\">    </span>attribute<span class=\"w\"> </span>application<span class=\"w\"> </span><span class=\"m\">0</span>.00458ms\n<span class=\"w\">    </span>compilation<span class=\"w\"> </span>new<span class=\"w\"> </span><span class=\"m\">0</span>.0193ms\n<span class=\"w\">    </span>interpretation<span class=\"w\"> </span><span class=\"m\">0</span>.63ms\n<span class=\"w\">    </span><span class=\"nb\">type</span><span class=\"w\"> </span>checking<span class=\"w\"> </span><span class=\"m\">0</span>.174ms\n</code></pre></div>\n<p>on the <code>toX</code> pattern</p>\n<p>That difference in type checking seems significant.</p>\n</blockquote>",
        "id": 380507534,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690842204
    },
    {
        "content": "<p>There's certainly something weird going on with the benchmark tool here; these two pages compare the same commits, but give different results:</p>\n<ul>\n<li><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/ee1ac79b-3f4b-468d-9346-6d49c006c2b7?hash1=d8c7d9897527e99b28862cdf5a4a13aefee95897\">http://speedcenter.informatik.kit.edu/mathlib4/compare/e7b27246-a3e6-496a-b552-ff4b45c7236e/to/ee1ac79b-3f4b-468d-9346-6d49c006c2b7?hash1=d8c7d9897527e99b28862cdf5a4a13aefee95897</a></li>\n<li><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/ee1ac79b-3f4b-468d-9346-6d49c006c2b7\">http://speedcenter.informatik.kit.edu/mathlib4/run-detail/ee1ac79b-3f4b-468d-9346-6d49c006c2b7</a></li>\n</ul>",
        "id": 380512846,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690844411
    },
    {
        "content": "<p>Looking on the bright side, they're both a sea of green.</p>",
        "id": 380513074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690844501
    },
    {
        "content": "<p>Any one build things locally and compare the times yet? :)</p>",
        "id": 380513352,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690844614
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380352547\">said</a>:</p>\n<blockquote>\n<p>I'm working on a PR that just removes these defaults, they're a constant source of bugs</p>\n</blockquote>\n<p>Right before porting, I started (and didn't finish) a PR that merges <code>npow</code> + axioms into a <code>structure</code> with a <code>Unique</code> instance.</p>",
        "id": 380523773,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690849656
    },
    {
        "content": "<p>This could help with removing defaults.</p>",
        "id": 380523831,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690849684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380513352\">said</a>:</p>\n<blockquote>\n<p>Any one build things locally and compare the times yet? :)</p>\n</blockquote>\n<p>Didn't see much difference overall</p>",
        "id": 380528480,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690851411
    },
    {
        "content": "<p>There is something weird going on where very rarely, perhaps every 1000th run, all time-based benchmarks are 20% faster. When the identical run is repeated, the speedup vanishes. I wonder if that is what happened here.</p>",
        "id": 380587469,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690875730
    },
    {
        "content": "<p>In general, any time-based change that does not come with at least a similar instructions change is suspect</p>",
        "id": 380587771,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690875795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380499104\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>, is \"instructions\" measuring only CPU instructions in userspace, or in kernel virtual memory handlers too?</p>\n</blockquote>\n<p>It's whatever <code>perf stat</code> is measuring, i.e. hardware performance counters I assume</p>",
        "id": 380588156,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690875877
    },
    {
        "content": "<p>I've triggered a repeat benchmark to see if that helps</p>",
        "id": 380592717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690876801
    },
    {
        "content": "<p>Do you have any understanding of why the diff view vs commit view above show different benchmarks?</p>",
        "id": 380592977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690876854
    },
    {
        "content": "<p>It's not the same base commit: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6008\">#6008</a> vs <a href=\"https://github.com/leanprover-community/mathlib4/pull/6089\">#6089</a></p>",
        "id": 380596374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690877497
    },
    {
        "content": "<p>Oh, that would do it</p>",
        "id": 380596686,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690877560
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> completed. <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/fe7a980d-c2ea-4b3e-b629-8ea68d48f3fb/to/a0fa80fe-0e7c-47f3-982e-cf67c12734f4\">Results</a>. </p>\n<p>(Edited) Two easy (expected) gains: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6282\">#6282</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/6283\">#6283</a></p>",
        "id": 380646823,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690886887
    },
    {
        "content": "<p>Are those <a href=\"https://github.com/leanprover-community/mathlib4/pull/6282\">#6282</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/6283\">#6283</a>?  Note the <code>2</code> instead of <code>8</code>!</p>",
        "id": 380650703,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690887554
    },
    {
        "content": "<p>Thanks</p>",
        "id": 380651257,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690887649
    },
    {
        "content": "<p>I think 95% of the bad performance in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> can be traced to <a href=\"https://github.com/leanprover-community/mathlib4/commit/c99fb8e1c535f1531dd409f91c0248c33a7ae66c#r123296409\">this change</a></p>",
        "id": 380697821,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690896036
    },
    {
        "content": "<p>After the change in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6282\">#6282</a> to <code>instance field : Field ℚ</code>, the following is <code>field</code> with <code>pp.explicit</code> </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>New</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">Field.mk</span> <span class=\"n\">ℚ</span> <span class=\"n\">commRing</span> <span class=\"n\">instInvRat</span> <span class=\"n\">instDivRat</span> <span class=\"n\">field.proof_1</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zpowRec</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toOne</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">commRing</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span> <span class=\"n\">ℚ</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">ℚ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">commRing</span><span class=\"o\">)))))</span>\n    <span class=\"n\">instInvRat</span><span class=\"o\">)</span>\n  <span class=\"n\">field.proof_2</span> <span class=\"n\">field.proof_3</span> <span class=\"n\">field.proof_4</span> <span class=\"n\">nontrivial</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RatCast.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rat.cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">instRatCastRat</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n      <span class=\"bp\">@</span><span class=\"n\">Ne</span> <span class=\"n\">ℚ</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n        <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoid.toMonoid</span> <span class=\"n\">ℚ</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoidWithZero.toCommMonoid</span> <span class=\"n\">ℚ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toCommMonoidWithZero</span> <span class=\"n\">ℚ</span> <span class=\"n\">commGroupWithZero</span><span class=\"o\">))))))</span>\n            <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toInv</span> <span class=\"n\">ℚ</span> <span class=\"n\">commGroupWithZero</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n          <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toInv</span> <span class=\"n\">ℚ</span> <span class=\"n\">commGroupWithZero</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">field.proof_5</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">instMulRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">field.proof_6</span>\n</code></pre></div>\n</div></div>\n<p>Before </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Old</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Rat.field</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span>  <span class=\"n\">commRing</span><span class=\"bp\">;</span>\n<span class=\"k\">let</span> <span class=\"n\">src_1</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">commRing</span><span class=\"bp\">;</span>\n<span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.mk</span> <span class=\"n\">ℚ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoidWithZero.mk</span> <span class=\"n\">ℚ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoid.mk</span> <span class=\"n\">ℚ</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.mk</span> <span class=\"n\">ℚ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Mul.mk</span> <span class=\"n\">ℚ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">instMulRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n          <span class=\"n\">commGroupWithZero.proof_1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">One.mk</span> <span class=\"n\">ℚ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">commGroupWithZero.proof_2</span> <span class=\"n\">commGroupWithZero.proof_3</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.npow</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">)))</span> <span class=\"n\">commGroupWithZero.proof_4</span>\n        <span class=\"n\">commGroupWithZero.proof_5</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n        <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n          <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">ℚ</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))))))</span>\n              <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">ℚ</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))))))</span>\n              <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.mk</span> <span class=\"n\">ℚ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">commGroupWithZero.proof_6</span> <span class=\"n\">commGroupWithZero.proof_7</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"n\">instInvRat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Div.mk</span> <span class=\"n\">ℚ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HDiv.hDiv</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHDiv</span> <span class=\"n\">ℚ</span> <span class=\"n\">instDivRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n  <span class=\"n\">commGroupWithZero.proof_8</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">zpowRec</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">One.mk</span> <span class=\"n\">ℚ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Mul.mk</span> <span class=\"n\">ℚ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">instMulRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.mk</span> <span class=\"n\">ℚ</span> <span class=\"n\">Rat.inv</span><span class=\"o\">))</span>\n  <span class=\"n\">commGroupWithZero.proof_9</span> <span class=\"n\">commGroupWithZero.proof_10</span> <span class=\"n\">commGroupWithZero.proof_11</span> <span class=\"n\">commGroupWithZero.proof_12</span>\n  <span class=\"n\">commGroupWithZero.proof_13</span> <span class=\"n\">Rat.mul_inv_cancel</span>\n<span class=\"bp\">@</span><span class=\"n\">Field.mk</span> <span class=\"n\">ℚ</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.mk</span> <span class=\"n\">ℚ</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.mk</span> <span class=\"n\">ℚ</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.mk</span> <span class=\"n\">ℚ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.mk</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.mk</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.mk</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.mk</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddSemigroup.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Add.mk</span> <span class=\"n\">ℚ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">ℚ</span> <span class=\"n\">instAddRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span>\n                  <span class=\"n\">field.proof_1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.mk</span> <span class=\"n\">ℚ</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">field.proof_2</span> <span class=\"n\">field.proof_3</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoid.nsmul</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoid.toAddMonoid</span> <span class=\"n\">ℚ</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">ℚ</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">ℚ</span>\n                        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">)))))))</span>\n                <span class=\"n\">field.proof_4</span> <span class=\"n\">field.proof_5</span><span class=\"o\">)</span>\n              <span class=\"n\">field.proof_6</span><span class=\"o\">)</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Mul.mk</span> <span class=\"n\">ℚ</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">instMulRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">field.proof_7</span> <span class=\"n\">field.proof_8</span>\n            <span class=\"n\">field.proof_9</span> <span class=\"n\">field.proof_10</span><span class=\"o\">)</span>\n          <span class=\"n\">field.proof_11</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">One.mk</span> <span class=\"n\">ℚ</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">field.proof_12</span> <span class=\"n\">field.proof_13</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNatCast</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">)))</span> <span class=\"n\">field.proof_14</span> <span class=\"n\">field.proof_15</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.npow</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">)))</span> <span class=\"n\">field.proof_16</span> <span class=\"n\">field.proof_17</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Neg.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Neg.neg</span> <span class=\"n\">ℚ</span> <span class=\"n\">instNegRat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSub</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))</span> <span class=\"n\">field.proof_18</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.zsmul</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))</span> <span class=\"n\">field.proof_19</span> <span class=\"n\">field.proof_20</span> <span class=\"n\">field.proof_21</span> <span class=\"n\">field.proof_22</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toIntCast</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))</span> <span class=\"n\">field.proof_23</span> <span class=\"n\">field.proof_24</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n        <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))))))</span>\n            <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toMul</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonUnitalSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Ring.toSemiring</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommRing.toRing</span> <span class=\"n\">ℚ</span> <span class=\"n\">src</span><span class=\"o\">))))))</span>\n            <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"n\">instInvRat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toDiv</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n      <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HDiv.hDiv</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHDiv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toDiv</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">))</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoid.toMonoid</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoidWithZero.toCommMonoid</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toCommMonoidWithZero</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">))))))</span>\n          <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toInv</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.zpow</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.zpow</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span> <span class=\"mi\">0</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n      <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.zpow</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoid.toMonoid</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoidWithZero.toCommMonoid</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toCommMonoidWithZero</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">))))))</span>\n          <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.zpow</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n      <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.zpow</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toInv</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.zpow</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nontrivial</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">RatCast.mk</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Rat.cast</span> <span class=\"n\">ℚ</span> <span class=\"n\">instRatCastRat</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">),</span>\n      <span class=\"bp\">@</span><span class=\"n\">Ne</span> <span class=\"n\">ℚ</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>\n        <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semigroup.toMul</span> <span class=\"n\">ℚ</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Monoid.toSemigroup</span> <span class=\"n\">ℚ</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoid.toMonoid</span> <span class=\"n\">ℚ</span>\n                    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommMonoidWithZero.toCommMonoid</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toCommMonoidWithZero</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">))))))</span>\n            <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toInv</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n          <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Eq</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Inv.inv</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">CommGroupWithZero.toInv</span> <span class=\"n\">ℚ</span> <span class=\"n\">src_1</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">field.proof_25</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℚ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul</span> <span class=\"n\">ℚ</span> <span class=\"n\">instMulRat</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span><span class=\"o\">)</span> <span class=\"n\">field.proof_26</span>\n</code></pre></div>\n</div></div>",
        "id": 380704434,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690897205
    },
    {
        "content": "<p>I did not unfold <code>commRing</code> but did <code>commGroupWithZero</code> (<code>src_1</code>). If you reduce the let bindings there is an even bigger difference.</p>",
        "id": 380705991,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690897461
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6282\">#6282</a> speed <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/86f5ea9f-0a39-4a03-8346-be4bf40bee93\">results</a> in. Unambiguously good.</p>",
        "id": 380777592,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690909095
    },
    {
        "content": "<p>After mucking around for a bit now, it is clear a lot more remains on the table for speeding up building. </p>\n<p>It seems that the penalty compounds with nested <code>with</code> constructions so classes in the algebraic hierarchy are particularly affected. These <code>with</code>'s are buried deep. For example, <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Algebra/MonoidAlgebra/Basic.lean\">MonoidAlgebra.Basic</a> has ~50. </p>\n<p>One main limitation is that we often want to override a field from a parent with a defeq expression that elaborates more quickly in the given context. I don't see how to do this in an efficient manner without <code>with</code> or something like it. </p>\n<p>Another is that it is very inconvenient (and invites foot-guns) to try to build these instances \"by hand\" even when you are not overriding existing fields.</p>",
        "id": 380819034,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690918646
    },
    {
        "content": "<p>Is it really the <code>with</code>s or is it Eric's observation <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380347434\">here</a> or are these two separate issues?</p>",
        "id": 380822167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690919584
    },
    {
        "content": "<p>I think these are two separate problems that can interact</p>",
        "id": 380822463,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690919663
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6283\">#6283</a> speed <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/1ed91d01-45f4-45a2-9d05-996d09b28b72/to/49659128-d9fb-4160-944b-bac92ffddb5e\">results</a>. Again all green above 5%</p>",
        "id": 380848112,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690927312
    },
    {
        "content": "<p>Probably someone should open a lean 4 issue citing some of these benchmarked PRs, where one small change can have such a drastic effect. Or is this only happening because we have gigantic terms and it's all our own fault?</p>",
        "id": 380849987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690927771
    },
    {
        "content": "<p>I really hope we can explore adding a term elaborator in these instance definitions that helps out. e.g. <code>instance : Bar X := fix_instance% { .... }</code>. Does someone who's being keeping up with these fixes have a suggestion about what such a <code>fix_instance%</code> could usefully do?</p>\n<p>Would just <code>dsimp%</code> help? Have we tried it?</p>\n<p>(I appreciate that if this works in the long run we might want to override <code>instance</code>, but that should not happen until after a <code>fix_instance%</code> can be demonstrated to work.)</p>",
        "id": 380853506,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690929283
    },
    {
        "content": "<p><code>dsimp</code> would be better than nothing, but I don't think it's the full algorithm here</p>",
        "id": 380853862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690929484
    },
    {
        "content": "<p>And is there an approximate criterion for what sort of instances would benefit from a <code>dsimp%</code>? I am tempted to just shove it in all over the library and benchmark.</p>",
        "id": 380854160,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690929615
    },
    {
        "content": "<p>Reconstruct instance in preferred parent projected form?</p>",
        "id": 380854702,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690929898
    },
    {
        "content": "<p>My guess would be that it's universally harmless globally, and sometimes a waste of time locally</p>",
        "id": 380857186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690931100
    },
    {
        "content": "<p>It would be nice if it could generate intermediate class instances prioritizing the declarations given to it and their projections.</p>",
        "id": 380857591,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690931273
    },
    {
        "content": "<p>I don't know how much that would really help: it's pretty common that those immediate instances actually hold more generally, and so need to be written by hand anyway</p>",
        "id": 380860212,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690932300
    },
    {
        "content": "<p>If they are in the context, I guess just pick them up.</p>",
        "id": 380861521,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690932994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380854160\">said</a>:</p>\n<blockquote>\n<p>And is there an approximate criterion for what sort of instances would benefit from a <code>dsimp%</code>? I am tempted to just shove it in all over the library and benchmark.</p>\n</blockquote>\n<p>If there is a <code>with</code>, go for it</p>",
        "id": 380861545,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690933010
    },
    {
        "content": "<p>Sadly the -20% wall clock <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/1cb9c91c-2da8-4f50-b806-9c7fccd3f097/to/b732e65f-2fbc-4253-bd57-a9d7dc5124b2\">disappeared</a></p>",
        "id": 380861749,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690933176
    },
    {
        "content": "<p>Getting timeouts with my simple-minded <code>dsimp%</code>:/</p>",
        "id": 380873091,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690937901
    },
    {
        "content": "<p>It's not crazy that having to allow higher <code>maxHeartbeats</code> on an <code>instance ... := dsimp% ...</code> could then save <code>maxHeartbeats</code> during later syntheses, and thus be valuable overall.</p>",
        "id": 380873459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690938106
    },
    {
        "content": "<p>These are pretty egregious</p>",
        "id": 380877224,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690939968
    },
    {
        "content": "<p>Is the structure generation algorithm documented somewhere? It might be possible to improve it by removing useless <code>with</code> clauses automatically, for example, but for this we would first need to understand how things are done now.</p>",
        "id": 380925248,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1690960043
    },
    {
        "content": "<p>Added more to <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> and got another set of pretty nice speed <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/1ed91d01-45f4-45a2-9d05-996d09b28b72/to/b7d05b7c-6dd2-4386-abec-1c376f284bab\">results</a></p>",
        "id": 380973066,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690970359
    },
    {
        "content": "<p>I love the way that the speedcenter always keeps us waiting with these links. It should print out \"And the winner is...\" on that blank screen. Or am I the only one who has to wait 5+ seconds for the output?</p>",
        "id": 381027821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690980680
    },
    {
        "content": "<p>I have this hunch that the perennial red Algebra.Category.ModuleCat.Limits should be individually fixed because there's something pretty weird going on there that makes it slower when everything else is faster. I am wondering if you are de-<code>with</code>ing one side of an equation but not the other, but I had a look yesterday and couldn't isolate the problem; I just saw that the long declaration goes up from 150K heartbeats to 180K as a result of your PR and the trace is also much longer.</p>",
        "id": 381028422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690980809
    },
    {
        "content": "<p>What seems to be added to the trace is as usual a bunch of super-unhelpful \"I take 0.5 seconds proving that two things which look syntactically equal with pp.all off are defeq\"</p>",
        "id": 381028667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690980854
    },
    {
        "content": "<blockquote>\n<p>I have this hunch that the perennial red Algebra.Category.ModuleCat.Limits should be individually fixed</p>\n</blockquote>\n<p>A reminder that I have <a href=\"https://github.com/leanprover-community/mathlib4/pull/6265\">#6265</a> that at least makes this file much shorter</p>",
        "id": 381029095,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690980944
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\">. Note however that this file is about colimits, and Kevin is pointing to the file about limits.</p>",
        "id": 381034661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690981897
    },
    {
        "content": "<p>Since I was fixing things from master mindlessly, there is overlap with the other PR. <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> is something I dump all changes into so I can bench them all at once and preserve resources. </p>\n<p>I have more defined thoughts. I’ll share them when I get to a computer. TLDR: term too big due extra eta expansion and unification handles those terms less efficiently (maybe because of size but maybe something more intrinsic). Resulting terms need more unfolding . This compounds until we get deep and things break. </p>\n<p>I’ve been fairly lazy about changing the <code>with</code> construction pattern. Not touching <code>def</code>’s, leaving knotty ones alone. Totally unsupported speculation: we can get that 20% wall clock speed up back with a complete overhaul. I wouldn’t be surprised if it’s 50% or more.</p>",
        "id": 381042659,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690983395
    },
    {
        "content": "<p>The speed improvements from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> also are getting into concrete categories which make me more hopeful</p>",
        "id": 381045144,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690983804
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/380496218\">said</a>:</p>\n<blockquote>\n<p>What do you see? I only get</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Not</span> <span class=\"n\">Found</span>\n<span class=\"n\">The</span> <span class=\"n\">requested</span> <span class=\"n\">URL</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">found</span> <span class=\"n\">on</span> <span class=\"n\">this</span> <span class=\"n\">server.</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I got the same error.<br>\nI'd be interested in looking at performance as well -- is there some list you have to be on to see the speedcenter? (Can it be opened to all if so?)</p>",
        "id": 381048580,
        "sender_full_name": "John Nicol",
        "timestamp": 1690984447
    },
    {
        "content": "<p>It's an https only error, or something similar</p>",
        "id": 381048797,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690984493
    },
    {
        "content": "<p>It works in chrome for me, but not in Firefox (even if I disable htpps only)</p>",
        "id": 381048900,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1690984515
    },
    {
        "content": "<p>Thanks, that's it! Was able to view in Chrome</p>",
        "id": 381049360,
        "sender_full_name": "John Nicol",
        "timestamp": 1690984606
    },
    {
        "content": "<p>Most of the speed regressions in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a> are in smaller files. The exception is <code>Analysis.NormedSpace.Star.Multiplier</code> which I cannot seem to track to the changes. Someone who is more familiar with that file might be able to better pinpoint it.</p>",
        "id": 381229150,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690995111
    },
    {
        "content": "<p>I'll have a look, I wrote it.</p>",
        "id": 381231319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690995455
    },
    {
        "content": "<p>Well, I'm not sure exactly what's going on yet, but <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=DoubleCentralizer.coeHom#doc\">docs#DoubleCentralizer.coeHom</a> is <em>extremely</em> slow, and everything else seems fine (or at least passable).</p>",
        "id": 381243281,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690997465
    },
    {
        "content": "<p>Thanks for narrowing it down!</p>",
        "id": 381243931,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1690997614
    },
    {
        "content": "<p>I'm still working on it btw, that was just a status update.</p>",
        "id": 381245402,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690997935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Sorry it took me a while to get around to this, but if you want to you can cherry pick <a href=\"https://github.com/leanprover-community/mathlib4/pull/6318\">#6318</a>. This declaration was very slow on master too. I'm not sure exactly what is contributing to the slowdown in this file from <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a>, and it may not be this declaration. But I didn't notice too much else that was incredibly slow. With <a href=\"https://github.com/leanprover-community/mathlib4/pull/6318\">#6318</a>, this file now compiles in about 55 seconds on my machine (12 cores), and it seems pretty close both on top of master and on top of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6276\">#6276</a>, so I wouldn't worry about it too much (IMO).</p>",
        "id": 381276427,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691005118
    },
    {
        "content": "<p>I thought that number of cores was not relevant when compiling a Lean 4 file because, in contrast to Lean 3, Lean 4 can only use one core per file. Am I out of date?</p>",
        "id": 381278530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691005694
    },
    {
        "content": "<p>oh, you're right, I forgot!</p>",
        "id": 381278732,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691005763
    },
    {
        "content": "<p>In any case, it's a pretty snappy machine.</p>",
        "id": 381278794,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691005781
    },
    {
        "content": "<p>Great! Thanks.</p>",
        "id": 381281074,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691006360
    },
    {
        "content": "<p>Experimenting with a more systematic banishing of <code>with</code>, I de-<code>with</code>ed every structure term in a single file, <code>MonoidAlgebra.Basic</code>, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6319\">#6319</a>. This file is the basis for polynomials so I thought it would give me the sense of the effects of such changes downstream.</p>",
        "id": 381326435,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691025285
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/c7852218-4442-4a5f-8923-2062c59fbe45/to/983e5b47-fde8-42df-a6cd-eb25c178f7e5\">Results</a></p>",
        "id": 381326454,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691025291
    },
    {
        "content": "<p>I think a good pattern might be to mix <code>with </code> with <code>toBaseClass</code></p>",
        "id": 381326590,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691025346
    },
    {
        "content": "<p>That way you don't forget to set any defaults, but you also get the preferred structure</p>",
        "id": 381326666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691025364
    },
    {
        "content": "<p>Can you give a more concrete example?</p>",
        "id": 381326762,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691025405
    },
    {
        "content": "<p>Sure, replace your</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">{</span> <span class=\"n\">toNonUnitalSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonUnitalSemiring</span><span class=\"o\">,</span>\n    <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonAssocSemiring.natCast</span>\n    <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonAssocSemiring.natCast_zero</span>\n    <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonAssocSemiring.natCast_succ</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonAssocSemiring.one_mul</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonAssocSemiring.mul_one</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"o\">{</span> <span class=\"n\">MonoidAlgebra.nonAssocSemiring</span> <span class=\"k\">with</span>\n    <span class=\"n\">toNonUnitalSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">MonoidAlgebra.nonUnitalSemiring</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(untested)</p>",
        "id": 381327085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691025539
    },
    {
        "content": "<p>It looks like that doesn't work currently</p>",
        "id": 381327770,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691025833
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n  <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"k\">with</span>\n    <span class=\"n\">toA</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#print</span> <span class=\"n\">c</span>\n<span class=\"c1\">--- def c : C :=</span>\n<span class=\"c1\">--- let src := b;</span>\n<span class=\"c1\">--- @C.mk a { num := @B.num src }</span>\n</code></pre></div>",
        "id": 381327850,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691025857
    },
    {
        "content": "<p>Though I wish it did. Re-writing those <code>with</code> patterns in that file was a bit tedious</p>",
        "id": 381328246,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691026065
    },
    {
        "content": "<p><code>MonoidAlgebra.Basic</code> only improved by 5% itself compared to down stream improvements of up to 62% (<code>FieldTheory.Cardinality</code>).</p>",
        "id": 381328830,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691026381
    },
    {
        "content": "<p>Given that changes to only one file could produce this, I feel pretty confident that systematic changes would yield significant benefit.</p>",
        "id": 381329193,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691026647
    },
    {
        "content": "<p>That's a very good example. Can you open a Lean 4 issue describing it? If we could get improvements in the structure generator, this could mean that it would not be necessary to review all of mathlib to eliminate the <code>with</code>.</p>",
        "id": 381374222,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1691046212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/381327770\">said</a>:</p>\n<blockquote>\n<p>It looks like that doesn't work currently</p>\n</blockquote>\n<p>What makes you say that? The important bit is the implicit <code>toA</code> argument, which is correctly populated with <code>a</code> not <code>{ val := a.val }</code></p>",
        "id": 381393984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691050874
    },
    {
        "content": "<p>Sorry. I took that too literally. I agree it would be better than the existing pattern. How much of the problem it eliminates, I’m not sure.</p>",
        "id": 381426614,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691057456
    },
    {
        "content": "<p>If anything it might be better, because the <code>let</code>s it introduce give lean a small chance to decide not to substitute them <code>n</code> times</p>",
        "id": 381430867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691058476
    },
    {
        "content": "<p>That would be nice of it worked as so. Certainly worth a look.</p>",
        "id": 381433423,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691059104
    },
    {
        "content": "<p>I’ll rework <a href=\"https://github.com/leanprover-community/mathlib4/pull/6319\">#6319</a> to use this pattern and see. (In a couple hours)</p>",
        "id": 381433794,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691059197
    },
    {
        "content": "<p>My understanding of the structure generation algorithm and how unification handles the resulting terms is still hazy.</p>",
        "id": 381434263,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691059304
    },
    {
        "content": "<p>In terms of an end game, I think the performance hit isn’t “mathlib’s own fault” and it is worthwhile to try to interest upstream for discussion.</p>",
        "id": 381435465,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691059571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/381433794\">said</a>:</p>\n<blockquote>\n<p>I’ll rework <a href=\"https://github.com/leanprover-community/mathlib4/pull/6319\">#6319</a> to use this pattern and see. (In a couple hours)</p>\n</blockquote>\n<p>Indeed an <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/c7852218-4442-4a5f-8923-2062c59fbe45/to/ad01e2d7-e057-449b-b3f2-2769bf28d4e0\">improvement</a></p>",
        "id": 381630118,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691105773
    },
    {
        "content": "<p>Given the last run, I think a simple improvement would be simply be to extend <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.expandParentFields#doc\">docs#Lean.Elab.Term.expandParentFields</a> so that if the parent occurs in <code>Source.explicit</code> then you just slot that instead of expanding.</p>",
        "id": 381977940,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691183841
    },
    {
        "content": "<p>Very decent. Slightly over 1% reduction for wall-clock.</p>",
        "id": 382042157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691215559
    },
    {
        "content": "<p>Hello everyone. I'm also trying to speed up some ring theory files. Can I use <code>!bench</code> command in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6330\">my PR</a>?</p>",
        "id": 382215563,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1691264088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455791\">@Yuyang Zhao</span>, yes, you may!</p>\n<p>As suggested <a href=\"#narrow/stream/270676-lean4/topic/benchmark.20bot.3A.20Found.20no.20runs.20to.20compare.20against.2E/near/382135356\">here</a>, it may be worthwhile to check that the commit on master which you branch diverges from has already been benchmarked, by looking <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/home\">here</a>. If that's not the case, you could rebase your PR onto one that has been.</p>",
        "id": 382236608,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691277022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/381374222\">said</a>:</p>\n<blockquote>\n<p>That's a very good example. Can you open a Lean 4 issue describing it? If we could get improvements in the structure generator, this could mean that it would not be necessary to review all of mathlib to eliminate the <code>with</code>.</p>\n</blockquote>\n<p>Did anyone ever do this? I couldn't find an issue so I opened <a href=\"https://github.com/leanprover/lean4/issues/2387\">https://github.com/leanprover/lean4/issues/2387</a> . <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> or <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> do you have anything to add?</p>",
        "id": 382427698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691349176
    },
    {
        "content": "<p>I think there are simple changes that would produce most of the benefit <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/381977940\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/381977940</a></p>\n<p>Currently the algorithm treats all instances before the <code>with</code> equally. They each get a <code>let src := inst</code>. Next the field projections get expanded. Then they figure out how to slot the <code>src</code>’s in to see what fields can have terms generated. </p>\n<p>A simple rule would be that if <code>inst</code> is an instance of the parent field you would reduce the let and feed it into the parent projection. Otherwise do as you have done.</p>",
        "id": 382438740,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691354635
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6398\">#6398</a> is a good example of the efficacy of this vs the current setup</p>",
        "id": 382438840,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691354708
    },
    {
        "content": "<blockquote>\n<p>A simple rule would be that if inst is an instance of the parent field you would reduce the let and feed it into the parent projection. Otherwise do as you have done.</p>\n</blockquote>\n<p>A slightly more complex rule is to first try populating the base field with <code>toBase := src.toBase</code> (for each <code>src</code> in turn) before falling back on <code>toBase := { x := src.x, y = src.y }</code></p>",
        "id": 382447154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691359886
    },
    {
        "content": "<p>Which would then also catch things like \"there is an existing <code>Monoid</code> instance but no existing Group\"</p>",
        "id": 382447278,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691359936
    },
    {
        "content": "<p>Good news is that the structure pattern changes and the removal of universe meta-variables seem complementary in terms of performance benefit. In <a href=\"https://github.com/leanprover-community/mathlib4/pull/6427\">#6427</a>, I merged <a href=\"https://github.com/leanprover-community/mathlib4/pull/6319\">#6319</a> and <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370\">#6370</a> and benchmarked. <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/c7852218-4442-4a5f-8923-2062c59fbe45/to/a4d1efb4-e5c7-410f-8909-cbcfe76fa7dd\">Results</a>.</p>",
        "id": 382932871,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691496609
    },
    {
        "content": "<p>And you're sure that this is not this weird glitch we sometimes see in the speedcenter? It doesn't look like it is though, does it: you seem to be consistently producing huge speedups.</p>",
        "id": 383020851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691513294
    },
    {
        "content": "<p>It is basically adding together the speedups from the two PRs so I would expect it look good. The question was mainly about how much one change might cannibalize improvements from other one.</p>",
        "id": 383021152,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691513364
    },
    {
        "content": "<p>There should be another nice one incoming for <a href=\"https://github.com/leanprover-community/mathlib4/pull/6370\">#6370</a>. I replaced all the <code>Sort _</code>'s with <code>Sort*</code>'s and want to make sure there isn't anything strange occurring to be safe.</p>",
        "id": 383021731,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691513484
    },
    {
        "content": "<p>I am also trying <a href=\"https://github.com/leanprover/lean4/compare/master...mattrobball:lean4:master\">this</a> and fumbling toward a release for it.</p>",
        "id": 383022342,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691513620
    },
    {
        "content": "<p>I am currently blocked by <a href=\"https://github.com/mattrobball/lean4/actions/runs/5799546481/job/15719781042\">GitHub Pages</a> for reasons I don't understand</p>",
        "id": 383027815,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691514914
    },
    {
        "content": "<p>You need to enable pages in the repository settings I think</p>",
        "id": 383030657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691515652
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/lean4/actions/runs/5797063191/job/15711875042\">Here</a> is run from Scott's fork.</p>",
        "id": 383030870,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691515708
    },
    {
        "content": "<p>It looks like <del>I</del> one can skip that <code>Publish manual</code> step?</p>",
        "id": 383030978,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691515738
    },
    {
        "content": "<p>Oh <a href=\"https://github.com/semorrison/lean4/blob/8de1c0786c5b2f77f94b19224f4b08a054f935d4/.github/workflows/nix-ci.yml#L106\">https://github.com/semorrison/lean4/blob/8de1c0786c5b2f77f94b19224f4b08a054f935d4/.github/workflows/nix-ci.yml#L106</a> </p>\n<p>I guess I should push to a branch?</p>",
        "id": 383031717,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691515921
    },
    {
        "content": "<p>For clarity, I checked the worst offenders (&gt;100% slowdown) on <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/c7852218-4442-4a5f-8923-2062c59fbe45/to/a4d1efb4-e5c7-410f-8909-cbcfe76fa7dd\">Results</a> and they were both super small and quick files, so that's basically noise.</p>",
        "id": 383031913,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1691515950
    },
    {
        "content": "<p>I just deleted that task</p>",
        "id": 383034812,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691516698
    },
    {
        "content": "<p>Now I am stuck releasing the artifacts. <a href=\"https://github.com/mattrobball/lean4/actions/runs/5801517467/job/15728447672\">https://github.com/mattrobball/lean4/actions/runs/5801517467/job/15728447672</a></p>",
        "id": 383088489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691531971
    },
    {
        "content": "<p>Does deleting these lines work? <a href=\"https://github.com/mattrobball/lean4/actions/runs/5801517467/workflow#L283-L284\">https://github.com/mattrobball/lean4/actions/runs/5801517467/workflow#L283-L284</a></p>",
        "id": 383091990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691533330
    },
    {
        "content": "<p>Apparently I didn't push the fix I found online <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 383093565,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691534192
    },
    {
        "content": "<p>Well, I didn't accomplish what I want. But it did <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/6a409fca-2274-44b6-a345-6c11aacd2a47/to/a831a065-2d8b-4eea-823a-b64ccf239e89\">something</a>, including -2.5% wall clock</p>",
        "id": 383272580,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691585900
    },
    {
        "content": "<p>I understand the landscape better though.</p>",
        "id": 383272911,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691585958
    },
    {
        "content": "<p>We never tested the <code>let_mvar%</code> change from the porting meeting, right?</p>",
        "id": 383273124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691585988
    },
    {
        "content": "<p>Scott tried to get a release built but it timed out on the <code>structInst*</code> tests</p>",
        "id": 383273360,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586018
    },
    {
        "content": "<p>Oh, so <code>let_mvar%</code> was much worse?</p>",
        "id": 383273447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691586034
    },
    {
        "content": "<p>I don't know I would use worse. You couldn't build a release because of timeouts on failed tests. I think that is probably a bad overall indicator</p>",
        "id": 383273901,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586090
    },
    {
        "content": "<p>This change here as best I understand it now is that: instead of trying to synthesize an instance, try the <code>with</code>'s beforehand</p>",
        "id": 383274415,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586158
    },
    {
        "content": "<p>This will not help in most of our situations because Lean will not fallback to tc synthesis if we provide enough data in the <code>with</code>'s</p>",
        "id": 383274733,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586215
    },
    {
        "content": "<p>I had a previous version where you just stuck in the structure instance for the field if it occurred in a <code>with</code> but that failed one test.</p>",
        "id": 383275214,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586284
    },
    {
        "content": "<p>The reason is failed is the following.</p>",
        "id": 383275458,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586317
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span>  <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 383276246,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586427
    },
    {
        "content": "<p>The expectation is that if we provide <code>y := 0</code>then we are asking Lean to explicitly override <code>a</code> and replace <code>a.y</code> with <code>0</code></p>",
        "id": 383276576,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586474
    },
    {
        "content": "<p>I think this is reasonable and doubt it will change</p>",
        "id": 383276999,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586541
    },
    {
        "content": "<p>So our current pattern of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"n\">someModule</span> <span class=\"k\">with</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span> <span class=\"bp\">\\</span><span class=\"n\">smul</span> <span class=\"bp\">.</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>will need to change</p>",
        "id": 383277247,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586592
    },
    {
        "content": "<p>Regardless of whatever happens</p>",
        "id": 383277401,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586610
    },
    {
        "content": "<p>Rule: only provide the fields of a <code>with</code>'ed field structure instance if you actually want to change the term</p>",
        "id": 383277813,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586678
    },
    {
        "content": "<p>I think that is pretty reasonable</p>",
        "id": 383277930,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586701
    },
    {
        "content": "<p>Violating makes Lean unfold the <code>with</code> structure instance and rebuild a new one regardless if the provided field syntactically identical</p>",
        "id": 383278188,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586742
    },
    {
        "content": "<p>Assuming we accept this and change our behavior in mathlib, we still have examples like <a href=\"https://github.com/leanprover-community/mathlib4/pull/6398\">#6398</a> where I provide the structure instance as a <code>with</code> instead of as field projection directly</p>",
        "id": 383278997,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586880
    },
    {
        "content": "<p>I think I it is reasonable ask that there be no serious difference in behavior between these two patterns</p>",
        "id": 383279284,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691586931
    },
    {
        "content": "<p>I think I can hack something together that does that today (but don't hold me to it!)</p>",
        "id": 383279900,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691587034
    },
    {
        "content": "<p>Getting the release workflow kinks worked out yesterday will help</p>",
        "id": 383280161,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691587081
    },
    {
        "content": "<p>I think unfolding the terms generated and reduce <code>let</code>'s as with  <code>dsimp%</code> or <code>let_mvar%</code> will still suffer from the same timeout issues</p>",
        "id": 383280759,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691587187
    },
    {
        "content": "<p>One needs to create a update/reduce function for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.StructInst.Struct#doc\">docs#Lean.Elab.Term.StructInst.Struct</a> type which checks if  a <code>with</code> structure instance has the correct type as a field and if so drops it from the type and updates the value of the field</p>",
        "id": 383281750,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691587355
    },
    {
        "content": "<p>Even if you do this, setting field values upstream in parent structures will override this. Great care is taken to make sure this occurs correctly</p>",
        "id": 383282427,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691587474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/383272580\">said</a>:</p>\n<blockquote>\n<p>Well, I didn't accomplish what I want. But it did <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/6a409fca-2274-44b6-a345-6c11aacd2a47/to/a831a065-2d8b-4eea-823a-b64ccf239e89\">something</a>, including -2.5% wall clock</p>\n</blockquote>\n<p>I should say that, with my current level of understanding, the changes I made could conceivably be a no-op. It certainly doesn't look like it though from the benchmark run.</p>",
        "id": 383292038,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691589067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/383273360\">said</a>:</p>\n<blockquote>\n<p>Scott tried to get a release built but it timed out on the <code>structInst*</code> tests</p>\n</blockquote>\n<p>To clarify here, it wasn't timing out because it was slow, but actually getting into an infinite loop and crashing.</p>",
        "id": 383437275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691625963
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- def b : B :=  let src := a;  { toA := src, y := 0 }</span>\n</code></pre></div>",
        "id": 383983942,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691763913
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6527\">#6527</a></p>",
        "id": 383996253,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691765727
    },
    {
        "content": "<p>So the behavior in current nightly is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- def b : B :=  let src := a;  { toA := { x := src.x }, y := 0 }</span>\n</code></pre></div>\n<p>which is one extra structure eta expansion than seems necessary. </p>\n<p>From staring at traces, this seems to be the dominant factor in the diminished performance compared to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toA</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>But we will see shortly</p>",
        "id": 383999172,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691766186
    },
    {
        "content": "<p>Zeta reducing the expression should be straightforward but zeta reducing the syntax would be better.</p>",
        "id": 383999930,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691766309
    },
    {
        "content": "<p>6527 is failing CI BTW <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> (which might stop the bench from working)</p>",
        "id": 384003047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691766733
    },
    {
        "content": "<p>I need to fix some <code>simps</code></p>",
        "id": 384003181,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691766752
    },
    {
        "content": "<p>Yeah, it should be taken off until I fix them. Too eager!</p>",
        "id": 384003299,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691766770
    },
    {
        "content": "<p>How does this compile under your change?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 384004261,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691766929
    },
    {
        "content": "<p>Same as before I imagine.</p>",
        "id": 384004364,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691766945
    },
    {
        "content": "<p>But that can be fixed</p>",
        "id": 384004412,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691766954
    },
    {
        "content": "<p>What we want is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#print</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- def b : B :=  let src := c;  { toA := c.toA, y := c.y }</span>\n</code></pre></div>",
        "id": 384004591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691766984
    },
    {
        "content": "<p>Right</p>",
        "id": 384004727,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767003
    },
    {
        "content": "<p>There are two things</p>\n<ul>\n<li>reduce the let</li>\n<li>check <del>parents</del> fields of the explicit sources</li>\n</ul>",
        "id": 384004969,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767036
    },
    {
        "content": "<p>I didn't reduce the let and currently only check that an explicit source is a direct projection from a parent</p>",
        "id": 384005112,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767055
    },
    {
        "content": "<p>The latter is straightforward</p>",
        "id": 384005245,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767077
    },
    {
        "content": "<p>The former should be done on <code>Syntax</code> but I am scared of <code>Syntax</code></p>",
        "id": 384005441,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767099
    },
    {
        "content": "<p>Reducing the <code>let</code> would be equivalent to the <code>let_mvar%</code> approach, which already failed...</p>",
        "id": 384006955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767329
    },
    {
        "content": "<p>You can't do it on the whole term or it will blow up</p>",
        "id": 384007058,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767347
    },
    {
        "content": "<p>Can you link to where the <code>let_mvar%</code> approach was tested?</p>",
        "id": 384007119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767358
    },
    {
        "content": "<p>You need to do it as it builds the fields</p>",
        "id": 384007297,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767382
    },
    {
        "content": "<p>The fields built using <code>Name</code>'s and <code>Syntax</code></p>",
        "id": 384007738,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767442
    },
    {
        "content": "<p>Before being properly elaborated</p>",
        "id": 384007861,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767456
    },
    {
        "content": "<p>I think using <code>letI</code> would not fail in the same way as <code>let_mvar%</code>, although that would require upstreaming <code>letI</code></p>",
        "id": 384008305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691767522
    },
    {
        "content": "<p>That's a good idea.</p>",
        "id": 384008470,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/384008305\">said</a>:</p>\n<blockquote>\n<p>in the same way as <code>let_mvar%</code></p>\n</blockquote>\n<p>What way was that?</p>",
        "id": 384008550,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767555
    },
    {
        "content": "<p>some kind of stack overflow, I did not investigate in detail</p>",
        "id": 384008722,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691767577
    },
    {
        "content": "<p>Do we have a build log  / PR / commit?</p>",
        "id": 384008775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767584
    },
    {
        "content": "<p>I had to drop a very basic function from <code>Mathlib.Lean.Expr.Basic</code> into the file already</p>",
        "id": 384008819,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/384008775\">said</a>:</p>\n<blockquote>\n<p>Do we have a build log  / PR / commit?</p>\n</blockquote>\n<p>Let me get the link</p>",
        "id": 384009181,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767648
    },
    {
        "content": "<p><a href=\"https://github.com/digama0/lean4/tree/structinst_letmvar\">https://github.com/digama0/lean4/tree/structinst_letmvar</a> is the PR, I think Scott built it locally and reported the errors to me via PM</p>",
        "id": 384009474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691767686
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/lean4/actions/runs/5793010682\">https://github.com/semorrison/lean4/actions/runs/5793010682</a></p>",
        "id": 384009579,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767706
    },
    {
        "content": "<p>But reducing the let only goes so far</p>",
        "id": 384009873,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767751
    },
    {
        "content": "<p>There is just an extra eta expansion right now. It serves no use</p>",
        "id": 384010026,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767776
    },
    {
        "content": "<p>Yeah, but the unifier knows to priority eta expansions (that's how we ultimately un-reverted the first fix to <a href=\"https://github.com/leanprover-community/mathlib4/pull/2074\">#2074</a>)</p>",
        "id": 384010123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691767790
    },
    {
        "content": "<p>It still seems noticably slower than without it</p>",
        "id": 384010548,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767850
    },
    {
        "content": "<p>I did use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=zetaReduce#doc\">docs#zetaReduce</a> on all the generated exprs and didn't see much benefit</p>",
        "id": 384010876,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767903
    },
    {
        "content": "<p>I broke something in mathlib so I know it had an effect</p>",
        "id": 384011090,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691767935
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/compare/master...mattrobball:lean4:master#diff-74ec7ce0fddd264dbeb36430d0d071fd0793d3d18d343aa9db0df1e7ce732c9d\">Here</a> are the changes</p>",
        "id": 384012958,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691768258
    },
    {
        "content": "<p>But a lesson I have learned from this is that messing with expressions latter on are the wrong thing to do</p>",
        "id": 384013530,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691768362
    },
    {
        "content": "<p>Interesting changes required</p>",
        "id": 384021600,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691769772
    },
    {
        "content": "<p>Two sorry's leave me from a working mathlib to benchmark. </p>\n<ul>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=unitization_apply_coe#doc\">docs#unitization_apply_coe</a> was <code>rfl</code> and now that doesn't seem to return if allowed to run </li>\n<li><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=stereographic_apply_neg#doc\">docs#stereographic_apply_neg</a> seems to have forgotten an <code>AddHomClass</code> for <code>orthogonalProjection</code></li>\n</ul>",
        "id": 384093701,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691788181
    },
    {
        "content": "<p><a href=\"http://speedcenter.informatik.kit.edu/mathlib4/run-detail/5ea15b21-0ede-4c5c-a79d-f33c4477501a\">Bench</a></p>",
        "id": 384265683,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691846888
    },
    {
        "content": "<p>Next I’ll try reducing the let’s</p>",
        "id": 384265782,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691846915
    },
    {
        "content": "<p>My guess is this is sniffing out defeq abuse.</p>",
        "id": 384271007,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1691848225
    },
    {
        "content": "<p>Ok. I think I have the let's reduced.</p>",
        "id": 384857405,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692034863
    },
    {
        "content": "<p>And of course the unused arguments linter is terribly unhappy now</p>",
        "id": 384862103,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692035908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/381028422\">said</a>:</p>\n<blockquote>\n<p>I have this hunch that the perennial red Algebra.Category.ModuleCat.Limits should be individually fixed because there's something pretty weird going on there that makes it slower when everything else is faster. I am wondering if you are de-<code>with</code>ing one side of an equation but not the other, but I had a look yesterday and couldn't isolate the problem; I just saw that the long declaration goes up from 150K heartbeats to 180K as a result of your PR and the trace is also much longer.</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6539\">This one is -51%</a>. (Sorry just remembered)</p>",
        "id": 385253585,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692118970
    },
    {
        "content": "<p>I updated the toolchain in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6539\">#6539</a> so that the following is the expansion</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- let src := a; { toA := a }</span>\n</code></pre></div>",
        "id": 385253942,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692119096
    },
    {
        "content": "<p>Currently this is only for direct projections to the parent.</p>",
        "id": 385254014,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692119122
    },
    {
        "content": "<p>Reducing the let's is a little hacky because it is hard to access them from inside the elaboration process for a structure instance. </p>\n<p>When elaborating </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"n\">a2</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>get transformed into </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">src1</span> <span class=\"o\">:=</span> <span class=\"n\">a1</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"n\">src2</span> <span class=\"o\">:=</span> <span class=\"n\">a2</span><span class=\"bp\">;</span> <span class=\"bp\">...;</span> <span class=\"o\">{</span><span class=\"n\">src1</span><span class=\"o\">,</span> <span class=\"n\">src2</span><span class=\"o\">,</span><span class=\"bp\">....</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>So by the time we are actually ready to elaborate the structure instance all we have is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">src1</span><span class=\"o\">,</span> <span class=\"n\">src2</span><span class=\"o\">,</span><span class=\"bp\">...</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>for syntax.</p>",
        "id": 385254685,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692119385
    },
    {
        "content": "<p>I used <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.toSyntax#doc\">docs#Lean.Expr.toSyntax</a> from std but only after going around in a big circle</p>",
        "id": 385254870,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692119467
    },
    {
        "content": "<p>One can try to reduce all the let's, not just those where the terms come from parent structures, but that broke mathlib more than I had patience to fix at the moment.</p>",
        "id": 385255048,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692119553
    },
    {
        "content": "<p>Once the benchmark runner is back up, I will put up the changes to testing</p>",
        "id": 385255489,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692119756
    },
    {
        "content": "<p>Results of <code>gtime -v lake build</code>. </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Status quo</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Command being timed: &quot;lake build&quot;\nUser time (seconds): 19902.59\nSystem time (seconds): 1558.12\nPercent of CPU this job got: 805%\nElapsed (wall clock) time (h:mm:ss or m:ss): 44:22.89\nAverage shared text size (kbytes): 0\nAverage unshared data size (kbytes): 0\nAverage stack size (kbytes): 0\nAverage total size (kbytes): 0\nMaximum resident set size (kbytes): 6873120\nAverage resident set size (kbytes): 0\nMajor (requiring I/O) page faults: 15422\nMinor (reclaiming a frame) page faults: 509525547\nVoluntary context switches: 10893\nInvoluntary context switches: 25634018\nSwaps: 0\nFile system inputs: 0\nFile system outputs: 0\nSocket messages sent: 0\nSocket messages received: 0\nSignals delivered: 0\nPage size (bytes): 16384\nExit status: 0\n</code></pre></div>\n\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Reduce structure etas on parent projections</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Command being timed: &quot;lake build&quot;\nUser time (seconds): 19760.47\nSystem time (seconds): 1561.97\nPercent of CPU this job got: 794%\nElapsed (wall clock) time (h:mm:ss or m:ss): 44:42.38\nAverage shared text size (kbytes): 0\nAverage unshared data size (kbytes): 0\nAverage stack size (kbytes): 0\nAverage total size (kbytes): 0\nMaximum resident set size (kbytes): 5501072\nAverage resident set size (kbytes): 0\nMajor (requiring I/O) page faults: 13286\nMinor (reclaiming a frame) page faults: 508399649\nVoluntary context switches: 12351\nInvoluntary context switches: 21228594\nSwaps: 0\nFile system inputs: 0\nFile system outputs: 0\nSocket messages sent: 0\nSocket messages received: 0\nSignals delivered: 0\nPage size (bytes): 16384\nExit status: 0\n</code></pre></div>\n\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Reduce lets and structure etas on parent projections </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>Command being timed: &quot;lake build&quot;\nUser time (seconds): 20122.82\nSystem time (seconds): 1727.32\nPercent of CPU this job got: 674%\nElapsed (wall clock) time (h:mm:ss or m:ss): 53:57.94\nAverage shared text size (kbytes): 0\nAverage unshared data size (kbytes): 0\nAverage stack size (kbytes): 0\nAverage total size (kbytes): 0\nMaximum resident set size (kbytes): 5840496\nAverage resident set size (kbytes): 0\nMajor (requiring I/O) page faults: 4733\nMinor (reclaiming a frame) page faults: 508012729\nVoluntary context switches: 13404\nInvoluntary context switches: 35005133\nSwaps: 0\nFile system inputs: 0\nFile system outputs: 0\nSocket messages sent: 0\nSocket messages received: 0\nSignals delivered: 0\nPage size (bytes): 16384\nExit status: 0\n</code></pre></div>\n\n</div></div>",
        "id": 385269121,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692125560
    },
    {
        "content": "<p><code>AlgebraicGeometry</code> and <code>Analysis.Calculus</code> stand out as being very unhappy with the loss of an extra eta expansion. They are almost <a href=\"http://speedcenter.informatik.kit.edu/mathlib4/compare/c0b1f7d5-4fac-4aa3-b1c7-d3ccdb301bd3/to/5ea15b21-0ede-4c5c-a79d-f33c4477501a\">uniformly red</a>. </p>\n<p>I would guess they are even more unhappy about the reduced let bindings. Their unhappiness is outweighing the gains elsewhere probably.</p>",
        "id": 385269729,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692125839
    },
    {
        "content": "<p>As to why they are unhappy (and I guess <code>Analysis.InnerProductSpace</code> also), any insight would be appreciated.</p>",
        "id": 385270247,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692126053
    },
    {
        "content": "<p>I imagine that they continually need to unfold things to unify and this throws additional work to do that.</p>",
        "id": 385270346,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692126099
    },
    {
        "content": "<p>It could also be that there is some overhead to how lets are reduced, given the roundabout manner of implementation.</p>",
        "id": 385270667,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692126248
    },
    {
        "content": "<p>Looking at the example from <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Instance.20priorities.20for.20quotients.20of.20MvPolynomial\">#mathlib4 &gt; Instance priorities for quotients of MvPolynomial</a> that Eric gave</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.RingQuot</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.Ideal.QuotientOperations</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Finset</span> <span class=\"n\">MvPolynomial</span> <span class=\"n\">Ideal.Quotient</span> <span class=\"n\">Ideal</span> <span class=\"n\">RingQuot</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A trivial relation is enough to show problems</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">MvPolynomial</span> <span class=\"n\">M</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Quot_r</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">0</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"o\">(</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"o\">((</span><span class=\"n\">Quot_r</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">⧸</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>it looks like the main cause of the timeout is that the <code>with</code> instance pattern creates terms of the form <code>B.mk (A.mk ...) ...</code> due to the eta expansion (as opposed to <code>B.mk instA ...</code>) which need to be unfolded to check that <code>A.mk =?= A.mk</code>. </p>\n<p>But the <code>with</code> pattern is layered over and over in the hierarchy so Lean has to go a few layers deep to make sure things are def eq before continuing. One pass in itself is manageable but Lean needs to do this multiple times to get <code>Algebra R ((Quot_r R M) ⧸ I)</code> which leads to the timeouts.</p>",
        "id": 385284450,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692132961
    },
    {
        "content": "<p>Here is a mathlib-free (in the sense I copy-pasta'ed a large chunk of the hierarchy) example based on the example above. It can probably be whittled down further </p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>slower </p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">MWE</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"n\">zero</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">nsmul</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">nsmul</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">nsmul</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddSemigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">AddCommSemigroup</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SubNegMonoid</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">Sub</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">sub</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"n\">zsmul</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span>\n  <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">zsmul</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n  <span class=\"n\">zsmul_succ'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zsmul</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">zsmul</span> <span class=\"o\">(</span><span class=\"n\">Int.ofNat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">zsmul_neg'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">zsmul</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">zsmul</span> <span class=\"n\">n.succ</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroup</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SubNegMonoid</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddGroup</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">G</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">one</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">one</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">M₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">zero</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">M₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Distrib</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NatCast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NatCast</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddMonoid</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:</span> <span class=\"n\">natCast</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">zero</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">natCast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">natCast</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">one</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"o\">(</span><span class=\"n\">S₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">S₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">S₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">npow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n  <span class=\"n\">npow_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">npow</span> <span class=\"mi\">0</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">one</span>\n  <span class=\"n\">npow_succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">npow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommSemigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">mul</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">CommSemigroup</span> <span class=\"n\">M</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IntCast</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">intCast</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">IntCast</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddMonoidWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroup</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">intCast_ofNat</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">intCast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">NatCast.natCast</span> <span class=\"n\">n</span>\n  <span class=\"n\">intCast_negSucc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">intCast</span> <span class=\"o\">(</span><span class=\"n\">Int.negSucc</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">NatCast.natCast</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddCommGroupWithOne</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">M₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Distrib</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">AddCommMonoidWithOne</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonUnitalNonAssocSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonAssocRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalNonAssocRing</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n    <span class=\"n\">AddCommGroupWithOne</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NonAssocSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">AddGroupWithOne</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalCommSemiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalSemiring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CommSemigroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">NonUnitalCommRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NonUnitalRing</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CommSemigroup</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">CommRing.toCommSemiring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RingQuot</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">RingQuot</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">one</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">RingQuot</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instAddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instMonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">npow_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSemiring</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">instAddCommMonoid</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">instMonoidWithZero</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"n\">natCast</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">natCast_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">natCast_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instRing</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">instSemiring</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">intCast</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">intCast_ofNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">intCast_negSucc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instCommSemiring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">instSemiring</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">CommSemiring.toSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">instSemiring</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n</div></div>\n<p>To make it 10x faster change <code>instRing</code> and <code>instCommSemiring</code> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instRing</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">instSemiring</span> <span class=\"n\">r</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">sub</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">sub_eq_add_neg</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">zsmul_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">intCast</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">intCast_ofNat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">intCast_negSucc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instCommSemiring</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">RingQuot</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">toSemiring</span> <span class=\"o\">:=</span> <span class=\"n\">instSemiring</span> <span class=\"n\">r</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Things are still fast overall of course because checking <code>sorry</code> = ?= <code>sorry</code> is much less expensive than with actual data. But when you get into a \"real-world\" situation like the above where we need to check this equality between two <code>Semiring</code> structures over and over the costs add up.</p>",
        "id": 385318217,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692149833
    },
    {
        "content": "<p>The extra eta expansion doesn't occur if we supply a structure instance sharing the common parent</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">toA</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">true</span><span class=\"o\">⟩}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b'</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- extra eta</span>\n<span class=\"c1\">-- let src := a;</span>\n<span class=\"c1\">-- { toA := { x := src.x } }</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">b'</span>\n<span class=\"c1\">-- no extra eta</span>\n<span class=\"c1\">-- let src := c;</span>\n<span class=\"c1\">-- { toA := src.toA }</span>\n</code></pre></div>\n<p>except in the degenerate case where <code>C = A</code>.</p>",
        "id": 385322752,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692151869
    },
    {
        "content": "<p>So I think the changes in the first toolchain of <a href=\"https://github.com/leanprover-community/mathlib4/pull/6539\">#6539</a> are probably optimal here. (Ignoring all the cases where mathlib forces to Lean to unfold and chop up the provided structure instance by providing a redundant value for the parent structure. Those will need to be changed on their own.)</p>",
        "id": 385323297,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692152140
    },
    {
        "content": "<p>More stripped down example but still hits the main point </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ACM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MWZ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NUNASR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">ACM</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NUSR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NUNASR</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NASR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NUNASR</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NUNAR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NUNASR</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NUSR</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">NASR</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">MWZ</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NUCSR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">NUSR</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CSR</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SR</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instACM</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ACM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instMWZ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MWZ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instSR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SR</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">instACM</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">instMWZ</span> <span class=\"n\">α</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instCSR</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CSR</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CSR.toSR</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instCSR'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CSR</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span><span class=\"bp\">;</span> <span class=\"o\">{</span><span class=\"n\">toSR</span> <span class=\"o\">:=</span> <span class=\"n\">src</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CSR.toSR</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The important part of the trace on the first <code>rfl</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000116</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000102</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000091</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instACM</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instMWZ</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n        <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000086</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000079</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000059</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">instSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNUSR</span><span class=\"o\">,</span>\n                <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">instSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toMWZ</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000024</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toNUSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000015</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instSR</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where Lean has to go all the way down to check that the structure instance provided for the parent class is what you get when you project back to that parent class. </p>\n<p>Compare this to the second <code>rfl</code> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000058</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000044</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000035</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instACM</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n        <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instMWZ</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n        <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000030</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSR</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000025</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">instCSR'</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000007</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">instSR</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instACM</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n                <span class=\"k\">let</span> <span class=\"n\">src</span> <span class=\"o\">:=</span> <span class=\"n\">instMWZ</span> <span class=\"n\">α</span><span class=\"bp\">;</span>\n                <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n                  <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">toNUSR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toNUNASR</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">toACM</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span> <span class=\"n\">toMWZ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>where Lean has to do some reductions but never opens up the <code>SR</code> instance.</p>",
        "id": 385471466,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692194903
    },
    {
        "content": "<p>The extra eta expansion coming from the <code>with</code> pattern in <code>instCSR</code> forces Lean to open it up during unification.</p>",
        "id": 385471759,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692194966
    },
    {
        "content": "<p>With no data, this is lower cost. But it is still twice as expensive as without the extra eta expansion. </p>\n<p>With data, it gets worse. </p>\n<p>Then when you have structures built on top of these and have to perform this unification multiple times you start to time out.</p>",
        "id": 385472437,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692195134
    },
    {
        "content": "<p>Hmm. It looks like I didn't catch all the extra eta expansions</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">B</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- let src := b;</span>\n<span class=\"c1\">--  { x := src.toA.x, y := src.toA.y }</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">bar</span>\n<span class=\"c1\">-- { x := b.toA.x, y := b.toA.y }</span>\n</code></pre></div>",
        "id": 385539894,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692219028
    },
    {
        "content": "<p>For example, we currently have </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">200</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">‹</span><span class=\"n\">Ring</span> <span class=\"n\">α</span><span class=\"o\">›</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which is not just <code>Ring.toSemiring</code></p>",
        "id": 385540386,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692219208
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6621\">#6621</a> changing to <code>Ring.toSemiring</code> doesn't seem to help much. Either on its own or in addition to the reducing the extra eta expansions. </p>\n<p>But, the new run does tell me that <code>ring</code> is incredibly unhappy with loss of eta expansions. That may be feeding the majority of the regressions.</p>",
        "id": 385715562,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692291087
    },
    {
        "content": "<p>Calculus has <a href=\"http://speed.lean-fro.org/mathlib4/compare/eeea435b-2dc1-4606-9876-268ac642714d/to/3d2235de-eb11-424c-a126-83d33dda5250\">turned green</a> now along with all but some sporadic files and most of AG</p>",
        "id": 386176483,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692500103
    },
    {
        "content": "<p>What did you do to manage that?</p>",
        "id": 386216875,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1692533681
    },
    {
        "content": "<p><a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/Field.2EtoSemifield\">#mathlib4 &gt; Field.toSemifield</a>  clicking on drop downs in traces in <code>LinearAlgebra.FreeModule.Norm</code> before and after the change until things  diverged</p>",
        "id": 386217889,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692534487
    },
    {
        "content": "<p><code>ring</code> improved a good deal but is still suffering so optimistically I just need to do this a few more times :)</p>",
        "id": 386217981,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692534600
    },
    {
        "content": "<p>The pattern </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">field</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">B</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">field</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>defeats the changes here to an extent since specifying a field of a provided structure forces Lean to unfold it to insert that field into the constructor (with all the other fields coming from <code>b</code>). </p>\n<p>This is fine if you need to change the subobject field but we often have <code>add := add</code> which is just re-inferring the <code>add</code> we have from <code>AddMonoid</code>, for example. These expanded terms slow things down in the same way the extra eta expansions do. </p>\n<p>I went back to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MonoidAlgebra.Basic#doc\">docs#MonoidAlgebra.Basic</a> and eliminated this pattern. <a href=\"http://speed.lean-fro.org/mathlib4/compare/3d2235de-eb11-424c-a126-83d33dda5250/to/e7b27246-a3e6-496a-b552-ff4b45c7236e?hash2=0c2b2d77953c36896dfbe5425c9ea427dc5a96df\">Here</a> is the diff from the speedcenter from the last run above. </p>\n<p>Even less red. Most of the remaining red got materially better, except for non elliptic curve AG.</p>",
        "id": 386246882,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692554960
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/eeea435b-2dc1-4606-9876-268ac642714d/to/f5b75ef7-1e74-4a07-94aa-8ed5e64576d2\">Change</a> from current master</p>",
        "id": 386246958,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692555035
    },
    {
        "content": "<p>After looking through the regressions, I feel fairly confident there will be across the board improvement in Mathlib with these changes. </p>\n<p>The simplest and most impactful change is a two-line addition to core (not counting doc strings). </p>\n<p>I have opened an RFC <a href=\"https://github.com/leanprover/lean4/pull/2451\">lean4#2451</a> to discuss it and would appreciate any and all feedback!</p>",
        "id": 386937041,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692818583
    },
    {
        "content": "<p>I surely missed the last developments about all these problems, what is the current situation? It would be nice to write down somewhere what has been done (for example, are we supposed to avoid <code>with</code> now? Is this documented?).</p>",
        "id": 389453463,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694013786
    },
    {
        "content": "<p>TLDR: currently structure instance elaboration produces terms that are needlessly unfolded causing unification to work harder than it should. </p>\n<p>Two of the main ways this happens are :</p>\n<ul>\n<li>in </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p><code>b</code> is not elaborated as <code>{ toA := a }</code> but as <code>{ toA := A.mk 0 }</code>. This also seems like a bug since </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">C</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">c</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>will elaborate to <code>{ toA := c.toA }</code>. </p>\n<ul>\n<li>continuing with the above, </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">b</span><span class=\"bp\">’</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>results in the same expanded term as before. </p>\n<p>Unification of <code>b</code> and <code>b’</code> is quicker if they were both <code>{ toA := a}</code> since <code>a = a</code>. With the two issues above, the inputs to <code>A.mk</code> all have to be checked. As terms get bigger and the behavior gets nested, slowdowns accumulate.</p>",
        "id": 389540628,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694048599
    },
    {
        "content": "<p>To address the first issue, there is <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a>.</p>",
        "id": 389540746,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694048668
    },
    {
        "content": "<p>To (partially) address the second, there is <a href=\"https://github.com/leanprover-community/mathlib4/pull/6965\">#6965</a></p>",
        "id": 389540785,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694048696
    },
    {
        "content": "<p>Combined they give the following <a href=\"http://speed.lean-fro.org/mathlib4/compare/72857998-7f0d-4e8e-9ef3-068c7b6e91dc/to/012165d6-a4c4-4c1a-81ab-dd097ecb1b99\">improvements</a> including a 4.6% drop in total CPU instructions. </p>\n<p>Anecdotally, they seem to dramatically help speed up instance synthesis for algebraic type classes. Some examples: <a href=\"#narrow/stream/287929-mathlib4/topic/shortcut.20for.20.60Seminorm.2EinstMulAction.60.3F/near/387411986\">one</a>, <a href=\"#narrow/stream/287929-mathlib4/topic/ModuleCat.2Emk.20slowness/near/389362471\">two</a>, <a href=\"#narrow/stream/287929-mathlib4/topic/Instance.20priorities.20for.20quotients.20of.20MvPolynomial/near/384785135\">three</a>, <a href=\"#narrow/stream/287929-mathlib4/topic/Slow.20SecondCountableEither/near/388386827\">four</a></p>",
        "id": 389540939,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694048795
    },
    {
        "content": "<p>The dominant term in these improvements is the first the change</p>",
        "id": 389541031,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694048869
    },
    {
        "content": "<p>There is one more way to get an expanded term</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n</code></pre></div>\n<p><code>a</code> does not elaborate as <code>b.toA</code> but as <code>A.mk b.toA._ </code></p>",
        "id": 389541196,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694048988
    },
    {
        "content": "<p>This last one is fairly common pattern in mathlib. I am not sure if it is one that should be supported.</p>",
        "id": 389541311,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694049048
    },
    {
        "content": "<p>To make it work, it would require a change to core. But perhaps mathlib should just use <code>b.toA</code> directly instead.</p>",
        "id": 389541435,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694049133
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 389584543,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1694069809
    },
    {
        "content": "<p>What do you think of the <code>with</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.comp#doc\">docs#RingHom.comp</a> ?</p>",
        "id": 389584641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694069853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I have a PR in the works (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6791\">#6791</a>) that makes all morphisms flat structures, which would make the <code>with</code> irrelevant</p>",
        "id": 389587714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694071005
    },
    {
        "content": "<p>We already fully disintegrate and reassemble morphisms when casting from ring_hom to monoid_hom (because we do so via <code>MonoidHomClass</code>), so there's no benefit at all to the nested structures there</p>",
        "id": 389587826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694071054
    },
    {
        "content": "<p>Unfortunately this is now ugly in a different way because we have to fight lack of core support, but I think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> had some ideas about changing core to fix this</p>",
        "id": 389588199,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694071200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/389584641\">said</a>:</p>\n<blockquote>\n<p>What do you think of the <code>with</code> in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=RingHom.comp#doc\">docs#RingHom.comp</a> ?</p>\n</blockquote>\n<p>I’m guessing you could remove that <code>toFun</code>. But not sure if you want to </p>\n<p>I didn’t touch fields outside algebraic ones in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6965\">#6965</a> for the most part.</p>",
        "id": 389688197,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694099883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/slowness.20in.20ring.20theory.20file/near/389588199\">said</a>:</p>\n<blockquote>\n<p>Unfortunately this is now ugly in a different way because we have to fight lack of core support, but I think <span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> had some ideas about changing core to fix this</p>\n</blockquote>\n<p>Are you referring to something other than Matthew's core PR?</p>",
        "id": 389930231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694197900
    },
    {
        "content": "<p>Yes. Eric has a separate mathlib PR for flat structures on morphism classes</p>",
        "id": 389930346,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694197951
    },
    {
        "content": "<p>Mario, I'm referring to your <code>class Foo extends @[flat] Bar</code> proposal from some time ago</p>",
        "id": 389943564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694203863
    },
    {
        "content": "<p>Update: After succumbing to the pressures of life for a bit, this is back on track. <a href=\"https://github.com/leanprover-community/mathlib4/pull/7257\">#7257</a> has working copy of mathlib with the change in the toolchain (in case you want to throw your problem at it). </p>\n<p>Comments:</p>\n<ul>\n<li><code>AlgebraicGeometry</code> is very unhappy that is has to work harder to unfold its giant terms to unify. Very unhappy. But the current design is not sustainable and only the result of a sprint to the finish in the port. </li>\n<li><code>Pi.smul_apply</code> enters into the <code>rw</code> vs <code>simp</code> realm with the change </li>\n<li><code>OperatorNorm</code> compiles things even more <a href=\"https://github.com/leanprover-community/mathlib4/pull/7299\">#7299</a> </li>\n<li>the original motivation of this thread <code>RingTheory.Kaehler</code> does not like the change either so I've resuscitated <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> which almost knocks it out of the top 15 in CPU instructions</li>\n</ul>",
        "id": 392354042,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695312657
    },
    {
        "content": "<p><a href=\"http://speed.lean-fro.org/mathlib4/compare/17111f65-044f-42f6-8b88-a9c44a8039f8/to/1275d3de-97e6-4f02-95e6-1f380bf3f946\">Here</a> is the most recent speed run</p>",
        "id": 392354328,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695312780
    },
    {
        "content": "<p>How about fix this up (title, remove draft status) as a proper PR? I'm very keen to get to the point we can merge this. There's still a bunch of work to move every possible change that can be done without <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> into separate PRs, so that it becomes possible to get <a href=\"https://github.com/leanprover/lean4/pull/2478\">lean4#2478</a> merged.</p>",
        "id": 392424166,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695347033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> yes great work on <a href=\"https://github.com/leanprover-community/mathlib4/pull/6149\">#6149</a> ! Is there an easy way to see a list of files with the most CPU instructions?</p>",
        "id": 392454118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695366620
    },
    {
        "content": "<p>Quickest way:  go to the latest bench run and sort the values for each metric by decreasing size.</p>",
        "id": 392487658,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1695378252
    }
]