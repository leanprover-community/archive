[
    {
        "content": "<p>I have a goal of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">qt</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">hqgt1</span><span class=\"o\">:</span> <span class=\"n\">Fact</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">M</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">M</span>\n<span class=\"n\">IH</span><span class=\"o\">:</span> <span class=\"n\">degree</span> <span class=\"o\">{</span> <span class=\"n\">toFinsupp</span> <span class=\"o\">:=</span> <span class=\"n\">List.toFinsupp</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.filter</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">¬</span><span class=\"n\">List.getD</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)))</span>\n<span class=\"n\">ha₁</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">insert</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n<span class=\"n\">ha₂</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">List.getD</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ha₅</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">Finset.range</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"n\">ha₆</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">List.length</span> <span class=\"n\">xs</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>and this should follow from <code>linarith</code> (via <code>ha₆</code>), but I get the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">neg_nonpos_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">Linarith.nat_cast_nonneg</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">Linarith.nat_cast_nonneg</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">MonoidWithZero.toZero</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">(</span><span class=\"n\">WithBot</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">NegZeroClass.toZero</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Is this expected behaviour?</p>",
        "id": 401020016,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1699476283
    },
    {
        "content": "<p>No, if you could minify it that would be helpful to debug further</p>",
        "id": 401036438,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699483970
    },
    {
        "content": "<p>I think the error message is saying that linarith can't handle this because <code>WithBot Nat</code> is a semiring and not a ring</p>",
        "id": 401041170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699486990
    },
    {
        "content": "<p><code>linarith</code> should be able to handle proving the goal from h6 in this example, and indeed it can in a simplified example c.f.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">l.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">linarith</span>\n</code></pre></div>\n<p>so it must be some other part of the context confusing things, which shouldn't happen. But I can't reproduce the failure easily without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 401042173,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1699487719
    },
    {
        "content": "<p>I think this recently came up and I made a PR to fix it, unsure if it landed</p>",
        "id": 401064926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699500458
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7916\">#7916</a> did land</p>",
        "id": 401065079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699500522
    }
]