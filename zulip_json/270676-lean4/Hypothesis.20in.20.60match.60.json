[
    {
        "content": "<p>Consider the snippet below. I want to define the function <code>foo</code> through a dependent if-then-else, and to do pattern matching on one of the branches. But the hypothesis <code>h</code>given by <code>if</code> is in some patterns absurd, i.e. I am on the true branch but I know that the function is always false one some pattern, so <code>foo</code> is trivially defined through exfalso there. The problem is that the hypothesis from <code>if</code> remains stated in the local context in terms of the general variable <code>t</code>, instead of by replacing <code>t</code> with its form in the current pattern. Can this be done?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- let's say this is some function which returns `false` on `var (i + 1)`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"c1\">-- here `t` should be `i + 1`,but how do I get that `bar t = bar (i + 1)`?</span>\n    <span class=\"c1\">-- I know `h : bar t`, but `bar $ var (i + 1)` is false, si I want to apply False elimination</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    context:</span>\n<span class=\"cm\">    t : Term</span>\n<span class=\"cm\">    h : bar t = true</span>\n<span class=\"cm\">    i : Nat</span>\n<span class=\"cm\">    ⊢ Term</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265468660,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639902559
    },
    {
        "content": "<p>You can also match on <code>h</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">t</span> <span class=\"k\">then</span> <span class=\"k\">match</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">h'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    t : Term</span>\n<span class=\"cm\">    h : bar t = true</span>\n<span class=\"cm\">    i : Nat</span>\n<span class=\"cm\">    h' : bar (var (i + 1)) = true</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">else</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265472073,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1639907897
    },
    {
        "content": "<p>Or, equivalently, <code>match (generalizing := true) t with</code></p>",
        "id": 265472374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639908349
    },
    {
        "content": "<p>Added to the <code>match</code> docstring.</p>",
        "id": 265472800,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1639908966
    },
    {
        "content": "<p>Great, thank you both!</p>",
        "id": 265474311,
        "sender_full_name": "Horatiu Cheval",
        "timestamp": 1639911360
    },
    {
        "content": "<p>I have a similar issue to this where <code>match (generalizing := true)</code> doesn't seem to substitute the variables matched on. This is an #MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">State</span> <span class=\"o\">:=</span> <span class=\"n\">Std.HashMap</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">IsVal</span> <span class=\"o\">:</span> <span class=\"n\">State</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">IsVal</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">s.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">IsVal</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">s.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">generalizing</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> Information lost that v = none:</span>\n<span class=\"cm\">       Goals (1)</span>\n<span class=\"cm\">       s : State</span>\n<span class=\"cm\">       n : Nat</span>\n<span class=\"cm\">       n? : Option Nat</span>\n<span class=\"cm\">       v : Option Nat := Std.HashMap.find? s n</span>\n<span class=\"cm\">       ⊢ IsVal s n none</span>\n<span class=\"cm\">    -/</span>\n</code></pre></div>\n<p>Is there any way to keep the information that <code>s.find? n = none</code> in that case?</p>",
        "id": 328804709,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676811637
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 328805241,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676811888
    },
    {
        "content": "<p>As a workaround you can do two consecutive matches and deal with the inner cases separately</p>",
        "id": 328809588,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1676814119
    },
    {
        "content": "<p>I think you're not really able to do generalization on let bindings. This works for the first case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">IsVal</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span><span class=\"o\">,</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n      <span class=\"n\">constructor</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 328811920,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676815256
    },
    {
        "content": "<p>Here's probably an easier way to go about defining this instance though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">IsVal_iff</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">IsVal</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"bp\">↔</span> <span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"bp\">=</span> <span class=\"n\">s.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n    <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">h</span>\n    <span class=\"n\">subst_vars</span>\n    <span class=\"n\">constructor</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">State</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">IsVal</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">n</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">?</span> <span class=\"bp\">=</span> <span class=\"n\">s.find</span><span class=\"bp\">?</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">isTrue</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">IsVal_iff</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">isFalse</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">IsVal_iff</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 328812446,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676815498
    },
    {
        "content": "<p>oh that's interesting, I didn't know you could do <code>match h : ... with</code> like in an <code>if</code>, that's exactly what I was looking for. Thanks! (the example was a simpler version just to show the issue)</p>",
        "id": 328814654,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1676816298
    }
]