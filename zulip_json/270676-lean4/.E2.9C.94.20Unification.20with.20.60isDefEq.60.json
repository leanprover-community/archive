[
    {
        "content": "<p>Hello, I am making my first steps in Lean4 metaprogramming.</p>\n<p>In this example, shouldn't the metavariable <code>mv</code> unify with the free variable <code>fv</code> when called with <code>isDefEq</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mv</span> <span class=\"bp\">←</span>  <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n  <span class=\"n\">mv.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">fvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">newLCtx</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.mkLocalDecl</span> <span class=\"n\">fvarId</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span> <span class=\"n\">BinderInfo.default</span>\n    <span class=\"n\">withLCtx</span> <span class=\"n\">newLCtx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLocalInstances</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">fv</span>  <span class=\"o\">:=</span> <span class=\"n\">mkFVar</span> <span class=\"n\">fvarId</span>\n      <span class=\"k\">let</span> <span class=\"n\">success</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">mv</span> <span class=\"n\">fv</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{success}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">assignment</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.getExprMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mv.mvarId</span><span class=\"bp\">!</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{assignment}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">tmv</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mv</span>\n      <span class=\"k\">let</span> <span class=\"n\">tfv</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fv</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{tmv} {tfv}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mwe</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">])</span>\n\n<span class=\"kd\">example</span> <span class=\"n\">mmwwee</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mwe</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">false</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">not</span><span class=\"bp\">-</span><span class=\"n\">available</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>meaning: not defeq, no assignment, same types. What did I miss?</p>\n<p>Thank you!</p>",
        "id": 343162122,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1679328151
    },
    {
        "content": "<p>This doesn't fix the problem, but here's your <code>mwe</code> modified to use the less-low-level <code>withLocalDeclD</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mv</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n  <span class=\"n\">mv.mvarId</span><span class=\"bp\">!.</span><span class=\"n\">withContext</span> <span class=\"k\">do</span>\n    <span class=\"n\">withLocalDeclD</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span> <span class=\"k\">fun</span> <span class=\"n\">fv</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">success</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">mv</span> <span class=\"n\">fv</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{success}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">assignment</span> <span class=\"bp\">←</span> <span class=\"n\">getExprMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mv.mvarId</span><span class=\"bp\">!</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{assignment}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">tmv</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mv</span>\n      <span class=\"k\">let</span> <span class=\"n\">tfv</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fv</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{tmv} {tfv}\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mwe</span><span class=\"bp\">;</span> <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">])</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mwe</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 343164653,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679328765
    },
    {
        "content": "<p>You cannot assign a term to an mvar if the term contains a free variable not in scope when the mvar was created. Doing so could result in unbound variables.</p>",
        "id": 343165099,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679328879
    },
    {
        "content": "<p>ahhh, thank you!<br>\nwith this order, it unifies:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mwe</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">fvarId</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshFVarId</span>\n    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n    <span class=\"k\">let</span> <span class=\"n\">newLCtx</span> <span class=\"o\">:=</span> <span class=\"n\">ctx.mkLocalDecl</span> <span class=\"n\">fvarId</span> <span class=\"bp\">`</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span> <span class=\"n\">BinderInfo.default</span>\n    <span class=\"n\">withLCtx</span> <span class=\"n\">newLCtx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLocalInstances</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">fv</span>  <span class=\"o\">:=</span> <span class=\"n\">mkFVar</span> <span class=\"n\">fvarId</span>\n      <span class=\"k\">let</span> <span class=\"n\">mv</span> <span class=\"bp\">←</span>  <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"n\">Expr.const</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"o\">[])</span>\n      <span class=\"k\">let</span> <span class=\"n\">success</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">mv</span> <span class=\"n\">fv</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{success}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">assignment</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.getExprMVarAssignment</span><span class=\"bp\">?</span> <span class=\"n\">mv.mvarId</span><span class=\"bp\">!</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{assignment}\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">tmv</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mv</span>\n      <span class=\"k\">let</span> <span class=\"n\">tfv</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">fv</span>\n      <span class=\"n\">Lean.logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{tmv} {tfv}\"</span>\n      <span class=\"n\">pure</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"mwe\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"n\">mwe</span>\n\n<span class=\"kd\">example</span> <span class=\"n\">mmwwee</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">mwe</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 343166651,
        "sender_full_name": "Fabian Glöckle",
        "timestamp": 1679329259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"210057\">Fabian Glöckle</span> has marked this topic as resolved.</p>",
        "id": 343166685,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679329270
    }
]