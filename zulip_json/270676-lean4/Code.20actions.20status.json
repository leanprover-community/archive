[
    {
        "content": "<p>What's the current status of the work on code actions? (cc <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>). I am aware of the discussion on the RFC <a href=\"https://github.com/leanprover/lean4/pull/1494\">lean4#1494</a> from September, the merged PR <a href=\"https://github.com/leanprover/lean4/pull/1661\">lean4#1661</a> from October (\"a low-level system for registering LSP code actions\"), a <a href=\"#narrow/stream/270676-lean4/topic/code.20action.20behaviour.3F\">discussion</a> from November about the capabilities of that system, and a thread from December which <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20vs.20Idris.202/near/313529544\">digressed</a> into a code actions wishlist (cc <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>).</p>\n<p>There are a couple of mathlib3 features which I really miss in mathlib4, and which IIUC should be implemented as code actions:</p>\n<ul>\n<li>the clickable \"Try this\" for a suggestion (used in <code>library_search</code>, <code>polyrith</code>, <code>squeeze_simp</code>, <code>ring</code>, ...)</li>\n<li>the lightbulb which comes up on <code>{!!}</code> to fill in a skeleton for a structure</li>\n</ul>\n<p>Do the code actions we have now permit the implementation of these features?   I think that the lack of these two things is a significant enough degradation in the user experience that we should consider delaying the mathlib4 flag day until they are available.</p>\n<p>Another important code action would be something which autogenerates the boilerplate for the Lean 4-style <code>cases</code> and <code>induction</code>.  I would like to respect the wishes of the Lean 4 developers and use that style when I write Lean 4 code, but currently I find myself using the imitation-Lean-3 <code>cases'</code> and <code>induction'</code> just because they require so much less typing.</p>\n<p>Of course, there are tons of other goodies we could get with code actions, and I'm excited about them too, but the things I mentioned above seem like priorities to me.</p>",
        "id": 340674903,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678384336
    },
    {
        "content": "<p>Something to note is that in LSP terminology code actions are specifically about something that appears inline in the editor (e.g. the lightbulb in VSCode), whereas \"Try this\" appears in the infoview and is thus not a code action (of course it is one in a broader sense of the term). I proposed one mechanism for it in <a href=\"https://github.com/leanprover/lean4/pull/2064\">lean4#2064</a> which faced some opposition, although after some offline discussions with <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I think we perhaps worked out a solution that would make everyone happy (?). I am happy to look into it again in about two weeks or so.</p>",
        "id": 340693973,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1678389861
    },
    {
        "content": "<p>As for lightbulbs, as far as I remember the current infrastructure is basically already sufficient to implement something like <code>{!!}</code> expansion as a metaprogram that lives in mathlib4. There will certainly be rough edges to improve that can be fixed in core.</p>",
        "id": 340695030,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1678390171
    },
    {
        "content": "<p>Thanks for the update <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> !</p>",
        "id": 340752497,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1678415708
    },
    {
        "content": "<p>Something I would like to have is automatically running tactics (do I have too many CPUs...?). i.e. whenever VSCode can see that a proof is incomplete at the current cursor, it tries running something (e.g. <code>library_search</code>, or <code>hint</code> when we port it) in the background. If it succeeds, it would show a <code>try this</code> (or a light bulb, or greyed-out text at the cursor, tab-completion, etc).</p>\n<p>If I'm not on battery power, and not all my CPUs are maxed out, and I have an incomplete proof, surely <code>library_search</code> et al. should be running!</p>",
        "id": 340761739,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678422302
    },
    {
        "content": "<p>wouldn't that disrupt the infoview?</p>",
        "id": 340765799,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1678425325
    },
    {
        "content": "<p>If so, that's a UX problem that can be solved.</p>",
        "id": 340772555,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1678429448
    },
    {
        "content": "<p>We can run asynchronous computations in the infoview these days, so it shouldn't disrupt the infoview UI per se. It would however drain your battery rather quickly and max out your CPU, as Scott notes. As a middle ground, one could implement a widget with a toggle such that when the toggle is 'on', tactics would run in the background; otherwise not.</p>",
        "id": 340896713,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1678463003
    },
    {
        "content": "<p>I don't know anything about running stuff in the infoview. Can anyone point me to some existing code that is closest (even if far away) to what I want: inspect the goal, run a tactic, display something the infoview based on the result?</p>",
        "id": 341363057,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678678079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> the only resource we have at the moment is the <a href=\"https://leanprover.github.io/lean4/doc/examples/widgets.lean.html#the-user-widgets-system\">user widgets tutorial</a> which you can also <a href=\"https://lean.math.hhu.de/#url=https%3A%2F%2Fraw.githubusercontent.com%2Fleanprover%2Flean4%2Fmaster%2Fdoc%2Fexamples%2Fwidgets.lean\">load in Lean 4 Web</a>. It's possible to implement what you want analogously to the <code>#check as a service</code> example. However, the user widgets system is designed to be the bare minimum needed in Lean core to get things working, so this implementation would have to be super low-level. In particular, in order to run a tactic using a goal state you'd first need to retrieve the goal state from a command snapshot manually. <a href=\"https://github.com/leanprover-community/mathlib4/blob/92a01604610d9e6a0594d25ae4dfdc5c70c6406d/Mathlib/Tactic/Widget/CommDiag.lean#L151\">Here</a> is an example. Alternatively, you could wait on the higher-level goal display API coming to <a href=\"https://github.com/EdAyers/ProofWidgets4\">ProofWidgets4</a> sometime in the near futureâ„¢ (I will be working on this in two weeks or so).</p>",
        "id": 341892904,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1678824147
    }
]