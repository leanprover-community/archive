[
    {
        "content": "<p>There are quite some people that have expressed problems with the new variable command. Some complaints I've heard:</p>\n<ol>\n<li>The goal view shows variables that aren't actually relevant for this declaration, which clutters the goal state.</li>\n<li>It is not predictable what variables end up being included in a declaration (refactoring a proof might change it).</li>\n<li><code>variable (x : Nat) in def ...</code> doesn't actually force <code>x</code> to be included in the declaration.</li>\n<li>Variables are elaborated again for every declaration, which can be a performance issue and cause the variables to elaborate to different expressions in different declarations.</li>\n<li>It is not easy to see at a glance what the statement of a theorem is (what variables ended up included)</li>\n<li>There are large ugly variable declarations at the top of some files.</li>\n<li>It conflicts with potential features like parallel compilation of proofs or a mode where you don't execute proof scripts.</li>\n</ol>\n<p>5 and 6 were already problems in Lean 3 (5 improved a bit, since you can mouse-over the declaration name in Lean 4 to see the statement). <br>\n2 was somewhat already a problem in Lean 3, but much more so in Lean 4.</p>",
        "id": 376300208,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689676975
    },
    {
        "content": "<p>I believe many Mathlib4 users prefer the Lean 3 variable command over the Lean 4 one, acknowledging that the Lean 3 variable command also had issues.</p>",
        "id": 376300477,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689677020
    },
    {
        "content": "<p>Should we go back to the Lean 3 variable command? Can we make the variable command better than either Lean 3 or the current version in Lean 4?</p>",
        "id": 376300711,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689677055
    },
    {
        "content": "<p>At least for now, I still prefer the Lean 3 behaviour.</p>\n<p>Is it true that the Lean 4 behaviour has the advantage that <code>include</code> and <code>omit</code> statements are no longer required?</p>",
        "id": 376302996,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1689677516
    },
    {
        "content": "<p>Yes, that is correct, in Lean 4 you don't need the <code>include</code> and <code>omit</code> commands anymore.</p>",
        "id": 376303532,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689677631
    },
    {
        "content": "<blockquote>\n<p>Variables are elaborated again for every declaration, which can be a performance issue.</p>\n</blockquote>\n<p>This can also cause surprises, especially when they do not elaborate the same way every time</p>",
        "id": 376304836,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689677929
    },
    {
        "content": "<p>I am very happy to see <code>omit</code> and <code>include</code> gone, and hope that they are not coming back in an RFC!</p>",
        "id": 376307777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1689678572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20variable.20command.20discussion/near/376304836\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Variables are elaborated again for every declaration, which can be a performance issue.</p>\n</blockquote>\n<p>This can also cause surprises, especially when they do not elaborate the same way every time</p>\n</blockquote>\n<p>Good point. I added that to the first post.</p>",
        "id": 376311390,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689679317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20variable.20command.20discussion/near/376307777\">said</a>:</p>\n<blockquote>\n<p>I am very happy to see <code>omit</code> and <code>include</code> gone, and hope that they are not coming back in an RFC!</p>\n</blockquote>\n<p>How would you feel about the following, in combination with the Lean 3 heuristic? We can decide to not have a scoped version of <code>include</code>, but only a per-declaration version.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">include</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"k\">in</span>\n<span class=\"kd\">theorem</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 376312378,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1689679542
    },
    {
        "content": "<p>Another suggestion that was mentioned at some point: only use variables that appear explicitly in the goal, and typeclasses thereof. And force inclusion of variables with <code>{h}</code> or <code>(h)</code> with the following meaning: if there is an <code>h</code> in the list of variables, this forces the inclusion of <code>h</code> in the current statement (with the binder type you have just specificed). While if there is no <code>h</code>, then go back to <code>autoImplicit</code> behavior. With this, no need for <code>omit</code> and <code>include</code>.</p>",
        "id": 376320531,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689681282
    },
    {
        "content": "<p>I could also imagine <code>include h1 h2 in ...</code> syntax. The problem with <code>include</code> and <code>omit</code> was that I couldn't keep track of the current state of what is included and what not. But with <code>include in</code> that isn't a problem. Of course there is a bit of a risk that we would need an <code>include in</code> before 95% of the statements in certain files. But that just hints at another design issue in such a file.</p>",
        "id": 376321379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1689681447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Some design questions with that: What if these <code>{h}</code>/<code>(h)</code> variables do not appear in the same order as the declared <code>variable</code>s? What if they come after another variable with some name <code>n</code>, and <code>h</code> depends on a <code>variable</code> with name <code>n</code>? These are just some things that need to be clearly specified.</p>",
        "id": 376324559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689682050
    },
    {
        "content": "<p>If we have <code>include ... in</code>, it would be nice if you could override binder types, like <code>include {h} in</code> or <code>include (h) in</code>. (Though with Lean 4 dot notation, you don't need an explicit argument for the object anymore. It can be implicit.)</p>",
        "id": 376324935,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689682128
    },
    {
        "content": "<p>Even trivial examples cause <code>induction</code> to generalize irrelevant section variables</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Vector</span>\n  <span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">length</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>       <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">xs.length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n  <span class=\"kd\">theorem</span> <span class=\"n\">length_eq</span><span class=\"o\">:</span> <span class=\"n\">xs.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">induction</span> <span class=\"n\">xs</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp_all</span><span class=\"bp\">!</span>\n<span class=\"kd\">end</span> <span class=\"n\">Vector</span>\n</code></pre></div>",
        "id": 376326203,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1689682392
    },
    {
        "content": "<p>Indeed, these need to be specified. My take on these:</p>\n<ul>\n<li>when doing <code>{h}</code>, it means the old <code>include h</code> (so respect the position at which it was declared in the <code>variable</code> block).</li>\n<li>if <code>h</code> depends on some other variable <code>n</code> which was also in a <code>variable</code> block, then <code>n</code> should also be included, and transitively. If there is another different explicit <code>n</code> in the theorem statement, then the previous ones will be marked with a dagger by hygiene, as usual.</li>\n</ul>",
        "id": 376326856,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1689682546
    },
    {
        "content": "<p>I worry that it will be confusing that these <code>{h}</code>/<code>(h)</code> instructions might not correspond to where they appear as arguments in the completed theorem. Would there be any problem restricting these to always come first before normal arguments? (Maybe we disallow any <code>{h}</code>/<code>(h)</code> that come later if <code>h</code> would shadow a <code>variable</code> variable?)</p>",
        "id": 376331377,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689683452
    },
    {
        "content": "<p>Without yet forming an opinion on the overall issue, my first reaction would be that <code>variable/include ... in</code> appears to me as the more clear and confusion-avoiding option compared to overloading the meaning of regular binders, even if more verbose</p>",
        "id": 376347030,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689686334
    },
    {
        "content": "<p>To add to the examples, the only problem I had with the current <code>variable</code> command so far is that <code>sorry</code>ing a proof would change the signature of the declaration, which is annoying while working on stuff. a very simple <code>include surj in</code> that keeps order and implicitely as it was in the <code>variable</code> call would already suffice for this use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">surj</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_thm</span> <span class=\"o\">:</span> <span class=\"n\">STATEMENT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- Proof will eventually need `surj` but doesn't until the `sorry` is worked on.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">surj</span> <span class=\"o\">:</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">STATEMENT</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">my_thm</span> <span class=\"n\">surj</span> <span class=\"c1\">-- doesn't work until the proof of `my_thm` used the variable</span>\n</code></pre></div>\n<p>For the cluttered proof state, I'd be completely happy to just mark variables that could be included but aren't yet, if that was easy to implement:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">surj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- here</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_and_or</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/8bt-MGEYQJw4uLBfQxL9UNt1/screenshot-lean.png\">screenshot-lean.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8bt-MGEYQJw4uLBfQxL9UNt1/screenshot-lean.png\" title=\"screenshot-lean.png\"><img src=\"/user_uploads/3121/8bt-MGEYQJw4uLBfQxL9UNt1/screenshot-lean.png\"></a></div><p>(ofc there are other issues mentioned here which need to be addressed too. This is only the issue I'm confronted with most frequently.)</p>",
        "id": 376347205,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1689686359
    },
    {
        "content": "<p>It seems to me that a large part of the unpredictability issue has to do with how variable generalization works. I wonder if it would make sense for the variable command to make its variables non-generalizable. That would certainly cause different style of headaches since uses of generalization are often invisible, but it would fix a lot of issues mentioned here.</p>",
        "id": 376633224,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689767204
    },
    {
        "content": "<p>By which you mean, elaborate them all in the <code>variable</code> command, then use the elaborated version in all future declarations?</p>",
        "id": 376634496,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689767463
    },
    {
        "content": "<p>No, I think that's much stronger. I think that could create unusual relationships between universe levels, for example. (For example, a theorem of the type <code>{α : Type (max u v)} (x : α), x = x</code> just because variable elaborated <code>α</code> that way at the outset.) I'm thinking about the induction example, where the induction needs to generalize <code>n</code> but then automatically generalizes <code>ys</code> too since it depends on <code>n</code>. Maybe a more sophisticated implementation of generalization would also work.</p>",
        "id": 376639712,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689768393
    },
    {
        "content": "<p>Note that right now it usually happens in the other directions; definitions accidentally add the unusual relationships between universes because the implementer doesn't notice. It's very rare for that type of mistake to appear in the variables line, but quite common inside a theorem statement and even more common inside a definition.</p>",
        "id": 376641792,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689768794
    },
    {
        "content": "<p>I stumbled on yet another issue with the current automatic variable integration/removal, in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6689\">#6689</a>. I refactor a lemma A, which used to require assumptions <code>[SecondCountableTopology α] [SecondCountableTopology β]</code> and now only needs <code>[SecondCountableTopologyEither α β]</code> (a typeclass which follows from second countability either of <code>α</code> or <code>β</code>). Then I would like to weaken the assumptions of lemmas using A in the same way. Unfortunately, the unused variables linter won't tell me about them: if there are assumptions <code>[SecondCountableTopology α] [SecondCountableTopology β]</code> in the context, then the application of A will just happily use the first of them, and then the second one will be discarded silently at the end of the proof (so no unused variables). This means we end up with a suboptimal version of the new lemma, requiring <code>[SecondCountableTopology α]</code> instead of  <code>[SecondCountableTopologyEither α β]</code>.</p>\n<p>The unused variables linter has still found a few of them, where typeclasses were explicit in the statement, but I'm sure I'm missing a lot of them. Yet another case showing that our current variables management is not working as smoothly as it used to in Lean 3, this time hindering refactors.</p>\n<p>Is there already an RFC open somewhere about the variable management issue? Otherwise, I'll open one (in core or in mathlib?) explaning the various issues we had and the solutions that were advertised in this thread.</p>",
        "id": 386205222,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692524735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20variable.20command.20discussion/near/386205222\">said</a>:</p>\n<blockquote>\n<p>then the application of A will just happily use the first of them, and then the second one will be discarded silently at the end of the proof (so no unused variables).</p>\n</blockquote>\n<p>What do you mean by \"discarded silently\"; are you claiming that the argument ends up being tangled in the proof somehow but not being used?</p>",
        "id": 386205980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692525212
    },
    {
        "content": "<p>To apply Lemma A, you need to check the typeclass <code>[SecondCountableTopologyEither α β]</code>. So typeclass inference starts, finds that it follows from <code>[SecondCountableTopology α]</code>, and uses this instance. So it never needs <code>[SecondCountableTopology β]</code>.</p>",
        "id": 386206625,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692525685
    },
    {
        "content": "<p>And what you want it to do instead is use a local <code>[SecondCountableTopologyEither α β]</code> hypothesis?</p>",
        "id": 386206939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692525901
    },
    {
        "content": "<p>Yes, that would be better. But in the current situation there is no linter which can notice that.</p>",
        "id": 386207109,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1692526000
    }
]