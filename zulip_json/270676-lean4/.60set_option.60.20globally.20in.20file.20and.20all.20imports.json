[
    {
        "content": "<p>I would like to disable a certain linter (specifically the <code>unreachableTactic</code> linter) globally in a repository. I am aware that the command <code>set_option linter.unreachableTactic false</code> can be used to disable the linter in a specific file. Is there a way to make this setting carry over to all files in a repository that import the given file as well? (this does not appear to be the default behaviour of <code>set_option</code>).</p>",
        "id": 351315579,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1681995042
    },
    {
        "content": "<p>You can set options in your lakefile.</p>",
        "id": 351316249,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995201
    },
    {
        "content": "<p>(See the mathlib lakefile for examples.)</p>",
        "id": 351316310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1681995218
    },
    {
        "content": "<p>Out of curiosity: why would you like to disable that linter? Is it giving false positives?</p>",
        "id": 351325427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997181
    },
    {
        "content": "<p>In normal development I almost never see it</p>",
        "id": 351325555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span></p>",
        "id": 351325718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997254
    },
    {
        "content": "<p>I've been wondering about that too recently. So, setting options with this snipped in the <code>lakefile.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MyProject</span> <span class=\"o\">{</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"-DautoImplicit=false\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"-Dtactic.hygienic=false\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>sets the options fine when calling <code>lake build</code>, but they aren't used on files open in  VSCode (i.e. it does still introduce autoImplicits, but raises an error later when building). Can VSCode automatically use these options too somehow?</p>",
        "id": 351326230,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1681997373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"611517\">Amit Hogadi</span> has marked this topic as resolved.</p>",
        "id": 351327028,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681997550
    },
    {
        "content": "<p>There is another lake option for that</p>",
        "id": 351327481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997647
    },
    {
        "content": "<p>check out the std4 lakefile</p>",
        "id": 351327641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">std</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DwarningAsError=true\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-Dlinter.missingDocs=true\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-Dlinter.missingDocs=true\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 351327724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681997698
    },
    {
        "content": "<p>thanks!</p>",
        "id": 351328681,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1681997889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as unresolved.</p>",
        "id": 351336835,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681999595
    },
    {
        "content": "<p>@_<strong>Notification Bot|100006</strong> <a href=\"#narrow/stream/270676-lean4/topic/.60set_option.60.20globally.20in.20file.20and.20all.20imports/near/351327028\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"611517\">Amit Hogadi</span> has marked this topic as resolved.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"611517\">@Amit Hogadi</span>, I'm assuming you mis-clicked since I've not seen any involvement on Zulip</p>",
        "id": 351336914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681999619
    },
    {
        "content": "<p>yes. i am new to this portal and mis-clicked while browsing. apologies</p>",
        "id": 351337980,
        "sender_full_name": "Amit Hogadi",
        "timestamp": 1681999823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao</span> will confirm but this is almost certainly for extracting tactic data for potential machine learning, not for normal development.</p>",
        "id": 351353572,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1682003078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thank you very much. I couldn't get <code>\"-Dlinter.unreachableTactic=false\"</code> to work correctly as an entry in <code>moreLeanArgs</code>, but setting <code>warningAsError=false</code> does what I need.</p>",
        "id": 351367848,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682006306
    },
    {
        "content": "<p>can you give more information? That should work</p>",
        "id": 351369241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682006593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60set_option.60.20globally.20in.20file.20and.20all.20imports/near/351325427\">said</a>:</p>\n<blockquote>\n<p>Out of curiosity: why would you like to disable that linter? Is it giving false positives?</p>\n</blockquote>\n<p>As <span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> mentioned, I am attempting to extract tactic step data from <code>mathlib4</code>. I am using the strategy of overriding the <code>by</code> tactic to log the goal state and tactic name along the way, making special provisions for tactics like <code>simp</code> and <code>rw</code>. The <code>unreachableTactic</code> linter was throwing warnings and errors due to the way in which I was handling the <code>by</code> tactic; I wanted to disable it to ignore these warnings and continue extracting.</p>",
        "id": 351369654,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682006688
    },
    {
        "content": "<p>The exact error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"bp\">-</span><span class=\"n\">D</span> <span class=\"kd\">parameter</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"n\">configuration</span> <span class=\"n\">option</span> <span class=\"bp\">'</span><span class=\"n\">linter.unreachableTactic'</span>\n</code></pre></div>\n<p>followed by an exit with <code>code 1</code>.</p>",
        "id": 351370288,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682006839
    },
    {
        "content": "<p>This is the relevant portion of my <code>lakefile</code> (I am working on a fork of <code>Mathlib</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Mathlib</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"-DwarningAsError=false\"</span><span class=\"o\">,</span>\n    <span class=\"s2\">\"-Dpp.unicode.fun=true\"</span><span class=\"o\">,</span> <span class=\"c1\">-- pretty-prints `fun a â†¦ b`</span>\n    <span class=\"s2\">\"-Dlinter.unreachableTactic=false\"</span>\n  <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 351370566,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682006909
    },
    {
        "content": "<p>FYI that data should already be stored in the info tree if you use the regular <code>by</code></p>",
        "id": 351373107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682007619
    },
    {
        "content": "<p>Also, the <code>unreachableTactic</code> linter has a way for you to opt your custom syntax into being ignored by the linter, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Linter.UnreachableTactic.addIgnoreTacticKind#doc\">docs4#Std.Linter.UnreachableTactic.addIgnoreTacticKind</a></p>",
        "id": 351373565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682007746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60set_option.60.20globally.20in.20file.20and.20all.20imports/near/351373107\">said</a>:</p>\n<blockquote>\n<p>FYI that data should already be stored in the info tree if you use the regular <code>by</code></p>\n</blockquote>\n<p>Thanks. I was considering using <code>LeanInk</code> earlier, but I opted for this approach instead since I wanted to make minor modifications to the tactics (for example, <code>simp [a, b, c]</code> -&gt; <code>simp only [a, b, c, x, y, z]</code>) while logging them.</p>",
        "id": 351375978,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682008315
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60set_option.60.20globally.20in.20file.20and.20all.20imports/near/351373565\">said</a>:</p>\n<blockquote>\n<p>Also, the <code>unreachableTactic</code> linter has a way for you to opt your custom syntax into being ignored by the linter, see <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Linter.UnreachableTactic.addIgnoreTacticKind#doc\">docs4#Std.Linter.UnreachableTactic.addIgnoreTacticKind</a></p>\n</blockquote>\n<p>Thank you very much. This looks useful.</p>",
        "id": 351376113,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1682008337
    }
]