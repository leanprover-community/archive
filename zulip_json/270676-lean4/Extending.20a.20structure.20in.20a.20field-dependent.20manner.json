[
    {
        "content": "<p>I'd like to be able to write things along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">â†’</span> <span class=\"kt\">Type</span> <span class=\"c1\">-- some type family, demonstration purposes only</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"c1\">-- some structure parametrized by data</span>\n  <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">Foo</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>This doesn't work, and we (seem to) have to resort to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"n\">where</span>\n  <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span>\n  <span class=\"n\">toFoo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>However, I'm specifically after the ability to write structure instances nicely (in a flat manner) that you get with <code>extends</code>, as opposed to simply having something that typechecks/functions well. Is there a nice way to achieve this?</p>",
        "id": 373640325,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1688891585
    }
]