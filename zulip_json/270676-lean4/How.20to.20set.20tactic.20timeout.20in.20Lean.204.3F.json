[
    {
        "content": "<p>Hi,</p>\n<p>I'm wondering if there is an equivalent of Lean 3's <a href=\"https://github.com/leanprover-community/lean/blob/cce7990ea86a78bdb383e38ed7f9b5ba93c60ce0/library/init/meta/tactic.lean#L1665\">try_for_time</a> tactic in Lean 4. Thank you!</p>",
        "id": 365743528,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1686633983
    },
    {
        "content": "<p>Perhaps <code>set_option maxHeartbeats ... in ...</code> is useful? It is measured in \"heartbeats\" rather than seconds, and is a command, rather than a tactic combinator, but we can probably make something work.</p>",
        "id": 365748287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686635928
    },
    {
        "content": "<p>No, there is no equivalent of <code>try_for</code> and this is a big problem. There is a way to control the global heartbeat limit but it just causes a low level failure that can't be caught reliably. I don't think the situation has changed appreciably since <a href=\"https://github.com/leanprover/lean4/pull/1364\">lean4#1364</a></p>",
        "id": 365912005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686670695
    },
    {
        "content": "<p>Thank you Mario and Scott!</p>",
        "id": 365941434,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1686676989
    },
    {
        "content": "<p>The heartbeat is like a (deterministic) timeout for the entire module instead of a tactic?</p>",
        "id": 366312254,
        "sender_full_name": "Kaiyu Yang",
        "timestamp": 1686779998
    },
    {
        "content": "<p>Yes, the heartbeat counter provided in core counts up across the whole module. See <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=getRemainingHeartbeats#src\">src4#getRemainingHeartbeats</a> for some helper functions.</p>",
        "id": 366356610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686802117
    }
]