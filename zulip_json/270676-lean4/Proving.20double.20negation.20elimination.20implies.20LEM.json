[
    {
        "content": "<p>From Theorem Proving in Lean 4:</p>\n<blockquote>\n<p>One consequence of the law of the excluded middle is the principle of double-negation elimination:</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Or.elim</span> <span class=\"o\">(</span><span class=\"n\">em</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hnp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<blockquote>\n<p>Double-negation elimination allows one to prove any proposition, p, by assuming ¬p and deriving false, because that amounts to proving ¬¬p. In other words, double-negation elimination allows one to carry out a proof by contradiction, something which is not generally possible in constructive logic.<br>\nAs an exercise, you might try proving the converse, that is, showing that em can be proved from dne.</p>\n</blockquote>\n<p>I have no idea how to approach this exercise.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">emFromDne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">dne</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>any hints?</p>",
        "id": 362740019,
        "sender_full_name": "James Sully",
        "timestamp": 1685623281
    },
    {
        "content": "<p>IIRC you want to prove this with the quantifiers a bit differently: <code>(∀ p, ¬¬ p → p) → ∀ p, p ∨ ¬ p</code></p>",
        "id": 362741220,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685623526
    },
    {
        "content": "<p>are you sure? quantifiers are chapter 4, this exercise is from chapter 3!</p>",
        "id": 362742244,
        "sender_full_name": "James Sully",
        "timestamp": 1685623740
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#classical-logic\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#classical-logic</a></p>",
        "id": 362742681,
        "sender_full_name": "James Sully",
        "timestamp": 1685623829
    },
    {
        "content": "<p><code>emFromDne</code> is not provable constructively</p>",
        "id": 362744121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685624109
    },
    {
        "content": "<p>yep, that seems to be the point of this section of the chapter, not that I entirely understand that point</p>",
        "id": 362745131,
        "sender_full_name": "James Sully",
        "timestamp": 1685624322
    },
    {
        "content": "<p>Yes, the exercise probably has to be moved/removed. </p>\n<p>If you want to go a bit deeper: take a look at the <a href=\"https://en.wikipedia.org/wiki/Heyting_algebra#/media/File:Rieger-Nishimura.svg\">Free Heyting Algebra on one variable</a>. These are all the propositions you can state with one (propositional) variable, up to constructive equivalence. The ordering relation corresponds to the implications you can constructively prove. Since <code>¬¬ p → p</code> is higher than <code>p ∨ ¬ p</code>, you can prove the former from the latter, but not the other way around.</p>",
        "id": 362745172,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1685624333
    },
    {
        "content": "<p>Ok, I don't really understand that, but I'll take your word for it that I should move on.</p>",
        "id": 362746451,
        "sender_full_name": "James Sully",
        "timestamp": 1685624581
    },
    {
        "content": "<p>appreciate the help!</p>",
        "id": 362746763,
        "sender_full_name": "James Sully",
        "timestamp": 1685624640
    },
    {
        "content": "<p>Do you know of a good easy to grok introduction to the distinction between constructive and classical logic?</p>",
        "id": 362747154,
        "sender_full_name": "James Sully",
        "timestamp": 1685624715
    },
    {
        "content": "<p>I think what is meant in Theorem Proving in Lean is that if you take dne as an axiom, then you can prove em:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">em</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 362753903,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1685625955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/Proving.20double.20negation.20elimination.20implies.20LEM/near/362745172\">said</a>:</p>\n<blockquote>\n<p>Yes, the exercise probably has to be moved/removed. </p>\n</blockquote>\n<p>For what it's worth: I read this part last week and was also confused. Here is my elementary solution:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">dne</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- Exercise 9 in \"Examples of Propositional Validities\"</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">demorgan</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">q</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">),</span> <span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">em</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hnn</span> <span class=\"o\">:</span> <span class=\"bp\">¬¬</span><span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"k\">from</span> <span class=\"n\">dne</span> <span class=\"n\">hnn</span>\n  <span class=\"k\">fun</span> <span class=\"n\">hn</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">demorgan</span> <span class=\"n\">hn</span>\n    <span class=\"k\">have</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">dne</span> <span class=\"o\">(</span><span class=\"n\">h.right</span><span class=\"o\">)</span>\n    <span class=\"k\">have</span> <span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">h.left</span>\n    <span class=\"n\">hnp</span> <span class=\"n\">hp</span>\n</code></pre></div>\n<p>I think if the extra explanation by <span class=\"user-mention\" data-user-id=\"453098\">@Dan Velleman</span>  was provided in the text, it would be clear what to do.</p>",
        "id": 362946379,
        "sender_full_name": "Michiel Huttener",
        "timestamp": 1685688904
    }
]