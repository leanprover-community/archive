[
    {
        "content": "<p>Someone gave me the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#isDefEq \"</span> <span class=\"n\">t₁</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"===\"</span> <span class=\"n\">t₂</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t₁</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">e₂</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t₂</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">isEq</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Meta.isDefEq</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isEq}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">isDefEq</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">===</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>and to my surprise it prints false? However when I run it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#isDefEq \"</span> <span class=\"n\">t₁</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"===\"</span> <span class=\"n\">t₂</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t₁</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">e₂</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t₂</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">isEq</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Meta.isDefEq</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isEq}\"</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">isDefEq</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">===</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get true? Why is the Nat annotation relevant here? In my understanding it should pick the <code>OfNat Nat</code> default instance and just know that it is natural numbers getting thrown around here and the behavior should not change if I add these annotations? So what am I misunderstanding?</p>",
        "id": 326212731,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675708920
    },
    {
        "content": "<p>I think you're missing a <code>synthesizeSyntheticMVarsUsingDefault</code> here.</p>",
        "id": 326217983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675710519
    },
    {
        "content": "<p>In the first example, Lean hasn't decided yet that <code>0</code> is a natural number.</p>",
        "id": 326218027,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675710538
    },
    {
        "content": "<p>It could be a type with weird ops where <code>0 + 0 = 1</code> (and <code>0 ≠ 1</code>).</p>",
        "id": 326218131,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675710568
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#isDefEq \"</span> <span class=\"n\">t₁</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"===\"</span> <span class=\"n\">t₂</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">e₁</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t₁</span> <span class=\"n\">none</span>\n    <span class=\"k\">let</span> <span class=\"n\">e₂</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">t₂</span> <span class=\"n\">none</span>\n    <span class=\"n\">Term.synthesizeSyntheticMVarsUsingDefault</span>\n    <span class=\"k\">let</span> <span class=\"n\">isEq</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">Lean.Meta.isDefEq</span> <span class=\"n\">e₁</span> <span class=\"n\">e₂</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{isEq}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">isDefEq</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">===</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- true</span>\n<span class=\"bp\">#</span><span class=\"n\">isDefEq</span> <span class=\"mi\">1</span> <span class=\"bp\">===</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span>\n<span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 326218827,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1675710794
    }
]