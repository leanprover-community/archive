[
    {
        "content": "<p>I'm currently seeing a panic in the mathlib4_docs CI that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">DocGen4.Process.InstanceInfo.ofDefinitionVal</span> <span class=\"n\">DocGen4.Process.InstanceInfo</span><span class=\"o\">:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"o\">:</span> <span class=\"n\">unreachable</span> <span class=\"n\">code</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">lean_panic_fn</span><span class=\"bp\">+</span><span class=\"mi\">0x9e</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad37b71ce</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_DocGen4_Process_InstanceInfo_ofDefinitionVal</span><span class=\"bp\">+</span><span class=\"mi\">0x5c4</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0beb694</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_DocGen4_Process_DocInfo_ofConstant___lambda__1</span><span class=\"bp\">+</span><span class=\"mi\">0x1b6a</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0bf673a</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_DocGen4_Process_DocInfo_ofConstant</span><span class=\"bp\">+</span><span class=\"mi\">0x155</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0bf6ae5</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_List_forIn_loop___at_DocGen4_Process_process___spec__14___lambda__1</span><span class=\"bp\">+</span><span class=\"mi\">0xa00</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0bfbbc0</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_List_forIn_loop___at_DocGen4_Process_process___spec__14</span><span class=\"bp\">+</span><span class=\"mi\">0x3d0</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0bfecf0</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_DocGen4_Process_process</span><span class=\"bp\">+</span><span class=\"mi\">0x4ee</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0c0058e</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_DocGen4_load</span><span class=\"bp\">+</span><span class=\"mi\">0x3a7</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0c04427</span><span class=\"o\">]</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"o\">(</span><span class=\"n\">l_runSingleCmd</span><span class=\"bp\">+</span><span class=\"mi\">0x166</span><span class=\"o\">)[</span><span class=\"mi\">0x564ad0bcab66</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>It occurs after updating doc-gen from <code>leanprover/lean4:v4.0.0</code> to <code>leanprover/lean4:v4.1.0-rc1</code></p>\n<p>The confusing thing about this is that it hits this unreachable: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/InstanceInfo.lean#L31\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/InstanceInfo.lean#L31</a> and as the doc-string of <code>isClass?</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">  `isClass? type` return `some ClsName` if `type` is an instance of the class `ClsName`.</span>\n<span class=\"sd\">  Example:</span>\n<span class=\"sd\">  ```</span>\n<span class=\"sd\">  #eval do</span>\n<span class=\"sd\">    let x ← mkAppM ``Inhabited #[mkConst ``Nat]</span>\n<span class=\"sd\">    IO.println (← isClass? x)</span>\n<span class=\"sd\">    -- (some Inhabited)</span>\n<span class=\"sd\">  ```</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>So this should always return <code>some</code> if <code>v</code> is an instance and if you go up to the call site here: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/DocInfo.lean#L161\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Process/DocInfo.lean#L161</a> you will see it only gets called if <code>isInstance</code> is true. So I claim that there is no reason this unreachable! should ever get hit and this is a regression.</p>\n<p>I'll add a panic mentioning the name of the instance to create an MWE, just putting this out here in case someone might have an idea for how this regressed already.</p>",
        "id": 391773397,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695070421
    },
    {
        "content": "<p><code>CategoryTheory.Factorisation.instIsTerminalFactorisationInstCategoryFactorisationTerminal</code> this seems to be one of the offending instances, which corresponds to this one: <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/CategoryTheory/Category/Factorisation.lean#L119\">https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/CategoryTheory/Category/Factorisation.lean#L119</a> I don't know how people effectively minimize things that are so deep within mathlib? If someone wants to try the litmus test would be a meta program of the form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">``</span><span class=\"n\">CategoryTheory.Factorisation.instIsTerminalFactorisationInstCategoryFactorisationTerminal</span><span class=\"o\">)</span>\n  <span class=\"n\">isClass</span><span class=\"bp\">?</span> <span class=\"n\">type</span>\n</code></pre></div>\n<p>as long as this shows <code>none</code> the instance is still breaking the invariant.</p>",
        "id": 391779504,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695073293
    },
    {
        "content": "<p>I think that doc-gen is right, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IsTerminal#doc\">docs#IsTerminal</a> isn't a class even after unfolding, so the problem isn't the lean upgrade but simply the new content in mathlib. I have made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7245\">#7245</a> to fix this. We should also add a linter so that this type of mistake is caught by mathlib CI and not docgen.</p>",
        "id": 391792347,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695080248
    },
    {
        "content": "<p>In that case I have a second question now if you look here: <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions\">https://github.com/leanprover-community/mathlib4_docs/actions</a> build times dropped from around 1h15min to 30min, did we change the machines that doc-gen is running on? Alternatively it must be skipping some work now due to a bug I guess.</p>",
        "id": 391843337,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695106992
    },
    {
        "content": "<p>And I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7250\">#7250</a> for the linter, there is one other failure that I might expect would show up in doc gen. And another internal declaration that should be skipped anyway. So hopefully isinstance -&gt; type is a class holds going forward</p>",
        "id": 391873360,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695116855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391843337\">said</a>:</p>\n<blockquote>\n<p>In that case I have a second question now if you look here: <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions\">https://github.com/leanprover-community/mathlib4_docs/actions</a> build times dropped from around 1h15min to 30min, did we change the machines that doc-gen is running on? Alternatively it must be skipping some work now due to a bug I guess.</p>\n</blockquote>\n<p>I'm not sure about that, the artifact on github is the same size as previously, so if it is skipping something it doesn't seem to be skipping something that forms a lot of the output</p>",
        "id": 391873873,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695116980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391873360\">said</a>:</p>\n<blockquote>\n<p>And I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7250\">#7250</a> for the linter, there is one other failure that I might expect would show up in doc gen. And another internal declaration that should be skipped anyway. So hopefully isinstance -&gt; type is a class holds going forward</p>\n</blockquote>\n<p>Maybe we want this to be an error in the compiler instead of just a linter in mathlib? Doing an instance for a non class doesn't ever seem useful to me.</p>",
        "id": 391874209,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695117050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391873873\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391843337\">said</a>:</p>\n<blockquote>\n<p>In that case I have a second question now if you look here: <a href=\"https://github.com/leanprover-community/mathlib4_docs/actions\">https://github.com/leanprover-community/mathlib4_docs/actions</a> build times dropped from around 1h15min to 30min, did we change the machines that doc-gen is running on? Alternatively it must be skipping some work now due to a bug I guess.</p>\n</blockquote>\n<p>I'm not sure about that, the artifact on github is the same size as previously, so if it is skipping something it doesn't seem to be skipping something that forms a lot of the output</p>\n</blockquote>\n<p>That's a good heuristic indeed. Who controls the machines that this runs on? / who can we ask about whether the machines changed? I dont think a ~2x speedup can be justified by optimizations that we did on the compiler overnight.</p>",
        "id": 391874519,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695117115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391874209\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/isClass.3F.20panic!/near/391873360\">said</a>:</p>\n<blockquote>\n<p>And I made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7250\">#7250</a> for the linter, there is one other failure that I might expect would show up in doc gen. And another internal declaration that should be skipped anyway. So hopefully isinstance -&gt; type is a class holds going forward</p>\n</blockquote>\n<p>Maybe we want this to be an error in the compiler instead of just a linter in mathlib? Doing an instance for a non class doesn't ever seem useful to me.</p>\n</blockquote>\n<p>I think that is a reasonable thing to do, though presumably it will require a little bit of thought as to how to handle the one exception to the linter there (a mutual block of inductives). So it might not be a 1-line fix in core</p>",
        "id": 391875496,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695117391
    },
    {
        "content": "<p>Interesting, I didn't realize that the <code>instance</code> attribute didn't check that the type was a class. I think I remember that in Lean 3 it was an error making instances for non-classes.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo'</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo'</span> <span class=\"o\">:=</span> <span class=\"n\">Foo'.mk</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">Foo'.mk</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 391876890,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695117842
    },
    {
        "content": "<p>You can't use non-classes for instance arguments at least:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid binder annotation, type is not a class instance</span>\n<span class=\"cm\">  Nat</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 391877133,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695117917
    },
    {
        "content": "<p>In Lean 3 it's indeed an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"c1\">-- error: `Foo' is not a class</span>\n</code></pre></div>",
        "id": 391877436,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1695118008
    },
    {
        "content": "<p>In fact, Lean 3 and Lean 4 swapped behaviour precisely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"c1\">-- Lean 3 error: `Foo' is not a class</span>\n<span class=\"c1\">-- Lean 4: no problem</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">Foo</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n<span class=\"c1\">-- Lean 3: no problem</span>\n<span class=\"c1\">-- Lean 4 error: invalid binder annotation, type is not a class instance</span>\n</code></pre></div>",
        "id": 391878164,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1695118275
    }
]