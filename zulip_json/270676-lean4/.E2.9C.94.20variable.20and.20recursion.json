[
    {
        "content": "<p>Hi, is there a reason why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span>              <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span>       <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"n\">zero_add</span>\n</code></pre></div>\n<p>type checks, while extracting the implicit parameter to a variable</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_add</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">m</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">calc</span>\n      <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">_</span>              <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">k</span>       <span class=\"o\">:=</span> <span class=\"n\">congrArg</span> <span class=\"n\">_</span> <span class=\"n\">zero_add</span>\n</code></pre></div>\n<p>gives the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">congrArg</span> <span class=\"n\">Nat.succ</span> <span class=\"n\">zero_add</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">zero_add</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I'm not sure if it's a bug (I'm using \"4.0.0-nightly-2023-07-29\")</p>",
        "id": 380125429,
        "sender_full_name": "Francesco Cielo",
        "timestamp": 1690748148
    },
    {
        "content": "<p>I'm on mobile, but is there only one, or two variables called <code>m</code> in the second version?</p>",
        "id": 380126493,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690748518
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> , it was on a file of its own (I tried to eliminate all other factors), and the only change is moving <code>{m : Nat}</code> to a <code>variable</code> instead of having it as part of the theorem declaration. So I think only one if I understand what you are asking</p>",
        "id": 380127102,
        "sender_full_name": "Francesco Cielo",
        "timestamp": 1690748774
    },
    {
        "content": "<p>I was wondering whether Lean autoimplicitly introduces a new variable also called <code>m</code> in the second case.  Anyway, it is probably not the case.</p>",
        "id": 380127491,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690748932
    },
    {
        "content": "<p>I know that <code>match</code> and <code>variable</code> interact in weird ways -- in fact, just <code>variable</code> on its own interacts in weird ways!</p>",
        "id": 380127718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690749006
    },
    {
        "content": "<p>Btw, the error message seems to suggest that the <code>match</code> did not really match the <code>m</code> you think, that is the origin of my question.  However, away from a computer, I have little hope of debugging effectively, sorry!</p>",
        "id": 380128029,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690749117
    },
    {
        "content": "<p>No problem :) I see what you mean, on the other hand that variable is the only <code>m</code> in scope.<br>\n<code>#check zero_add</code> gives <code>∀ {m : Nat}, 0 + m = m</code> in both cases</p>",
        "id": 380129057,
        "sender_full_name": "Francesco Cielo",
        "timestamp": 1690749476
    },
    {
        "content": "<p>Does the error message in the second case change, if you add <code>nonrec</code> before <code>theorem</code>?</p>",
        "id": 380129358,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690749570
    },
    {
        "content": "<p>yes, it changes to <code>unknown identifier 'zero_add'</code></p>",
        "id": 380129519,
        "sender_full_name": "Francesco Cielo",
        "timestamp": 1690749620
    },
    {
        "content": "<p>I suspect that this is expected behaviour: when you do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span><span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">you</span> <span class=\"n\">only</span> <span class=\"n\">recurse</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">latter</span> <span class=\"n\">Nat</span> <span class=\"n\">here</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"n\">on</span> <span class=\"bp\">`</span><span class=\"n\">m</span><span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>the <code>m</code> is \"almost\" fixed.  I am slightly surprised that using <code>match m</code> explicitly there does not override this, but it is somehow consistent... Maybe?</p>",
        "id": 380130726,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690750097
    },
    {
        "content": "<p>Yes this is expected behavior. Putting things in a variable line in lean 4 is the equivalent of putting variables before the colon in lean 3: they do not appear in the type of the local constant used for recursive calls, so they are implicitly fixed</p>",
        "id": 380144023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690756518
    },
    {
        "content": "<p>Thanks, my naive understanding of <code>variable</code> was that if it binds an identifier it's automatically added as a parameter to the top level definition, but I guess things are more complicated than that :)</p>",
        "id": 380401917,
        "sender_full_name": "Francesco Cielo",
        "timestamp": 1690819020
    },
    {
        "content": "<p>That's totally a reasonable understanding, I think it's just when defining things recursively that this understanding has to be modified.</p>",
        "id": 380406769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690819736
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477253\">Francesco Cielo</span> has marked this topic as resolved.</p>",
        "id": 380601796,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690878550
    }
]