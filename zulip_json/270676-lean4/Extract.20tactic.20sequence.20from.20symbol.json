[
    {
        "content": "<p>Given a symbol in the environment, say <code>funext</code>, is there a way to retrieve the sequence of tactics that was used to prove it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">funext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">eqv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">eqv</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">Quot.liftOn</span> <span class=\"n\">f</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"k\">show</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">eqv</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">congrArg</span> <span class=\"n\">extfunApp</span> <span class=\"o\">(</span><span class=\"n\">Quot.sound</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The expression which fulfills the type of <code>funext</code> can be extracted from <code>Environment.constMap</code>, but there is no way to obtain the list of tactics.</p>\n<p>I suspect that I would need to tap into the kernel and direct it to parse the source file to find out about the sequence of tactics. Is there a relevant function that does this?</p>",
        "id": 396794162,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1697416050
    },
    {
        "content": "<p>The full syntax is stored in <code>InfoTree</code>, which you need to go hold of from somewhere. There are examples of processing declarations and doing various things with the <code>Syntax</code> in <a href=\"https://github.com/semorrison/lean-training-data\">https://github.com/semorrison/lean-training-data</a>. In particular, if you don't mind recompiling the file that contains the declaration you're interested in, the <code>Frontend.lean</code> in that repository will give you everything you could ask for (Syntax for each declaration, etc).</p>",
        "id": 396800324,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697419481
    },
    {
        "content": "<p>Another program doing that is <a href=\"https://github.com/leanprover/LeanInk\">LeanInk</a>.</p>",
        "id": 396802213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697420606
    }
]