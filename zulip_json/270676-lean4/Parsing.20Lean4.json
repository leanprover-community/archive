[
    {
        "content": "<p>What is the easiest way to parse Lean4 into an expression tree?   For example toplevel: a folder, subsequent: files / folers, within each file: and expression tree of the various Lean4 constructs.  Everything OOP preferably.   I think the Lean4 kernel (C++) would already do this, is that correct?</p>",
        "id": 398550196,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698262828
    },
    {
        "content": "<p>Not sure if I understood the question, but... the best way to parse lean is using the lean compiler itself, since you can extend lean's syntax in lean and have custom elaborators etc. So if you want to build some tooling for lean, you'd probably just add that functionality to the lean compiler itself, I think? (I'm not a lean dev, I just hacked a few things on my own)</p>",
        "id": 398551527,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698263497
    },
    {
        "content": "<p>What are you trying to accomplish?</p>",
        "id": 398551637,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1698263541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/Parsing.20Lean4/near/398551637\">said</a>:</p>\n<blockquote>\n<p>What are you trying to accomplish?</p>\n</blockquote>\n<p>First, we're making a Quiver-based editor (a single-page calculator basically) site that converts your diagram into some Lean code.  It would be nice in the future if this communication were two way, and the only way I can see to do that faithfully / robustly would be to parse Lean.</p>",
        "id": 398558574,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698266925
    },
    {
        "content": "<p>For example, they can functor a diagram into a new diagram, that will have its own data in the lean code</p>",
        "id": 398558736,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698267006
    },
    {
        "content": "<p>Any suggestions ?</p>",
        "id": 398558747,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698267011
    },
    {
        "content": "<p>I already am aware of the CD widget, but it doesn't do everything (yet)</p>",
        "id": 398558821,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698267065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üê∫</span>  I guess another way to do this would be the same as widget's approach: there are some specialized lean objects that communicate with the widget side.  So that means we could probably code everything in Lean4 itself without messing with the kernel.  These objects need to support editing though of their properties from the widget.</p>",
        "id": 398559454,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698267392
    },
    {
        "content": "<p>I'll start here:<br>\n<a href=\"https://code.visualstudio.com/api/get-started/your-first-extension\">https://code.visualstudio.com/api/get-started/your-first-extension</a></p>",
        "id": 398561732,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698268523
    },
    {
        "content": "<p>I guess what we want to do is get the Quiver js app to run inside of VsCode.</p>",
        "id": 398561754,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698268538
    },
    {
        "content": "<p>I'll also reverse engineer how the current widgets api works</p>",
        "id": 398561820,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1698268568
    },
    {
        "content": "<p>Yes, the <strong>only</strong> way to parse Lean is with Lean. If you try anything else you will end up unhappy. :-)</p>\n<p>If you'd like an example of using the Lean Frontend, see <a href=\"https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean\">https://github.com/semorrison/lean-training-data/blob/master/TrainingData/Frontend.lean</a>, which includes functions to process a file, returning a <code>String</code>, a <code>Syntax</code>, and an <code>Environment</code> for each declaration in the file (along with error messages and info trees!)</p>",
        "id": 398577359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698276735
    },
    {
        "content": "<p>Sorry this isn't a nicely document tutorial, but it's a starting point. :-)</p>",
        "id": 398577367,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698276745
    }
]