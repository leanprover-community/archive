[
    {
        "content": "<p>It seems Lean4 has a problem with recursive properties.</p>\n<p>I want to declare a property that a recursive structure was constructed using a smart constructor. The smart constructor mainly constructs a hash field and the property would allow me to trust the hash field's value was properly precomputed.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Desc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">Desc</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hash_with_name</span> <span class=\"o\">(</span><span class=\"n\">_name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">):</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- mock hash function</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Desc.intro_func</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">):</span> <span class=\"n\">Desc</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Desc.intro</span>\n    <span class=\"n\">name</span>\n    <span class=\"o\">(</span><span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span><span class=\"o\">)</span>\n    <span class=\"n\">params</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Forall</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">Forall</span> <span class=\"n\">p</span> <span class=\"o\">([]</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">},</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">Forall</span> <span class=\"n\">p</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">Forall</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">IsSmart</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span> <span class=\"n\">Desc</span><span class=\"o\">):</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isSmart</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span>\n    <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"n\">hash</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">hash</span> <span class=\"bp\">=</span> <span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">Forall</span> <span class=\"n\">IsSmart</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I get an error: <code>error: unexpected inductive type occurrence</code></p>\n<p>I only get the error if I include the line <code>→ Forall IsSmart params</code>. So I suspect it has something to do with two recursive inductive types calling each other.</p>\n<p>I first asked about this on stack exchange, thinking I was doing something wrong.<br>\n<a href=\"https://proofassistants.stackexchange.com/questions/2045/unexpected-inductive-type-occurrence-error-for-recursive-inductive-type/2057#2057\">https://proofassistants.stackexchange.com/questions/2045/unexpected-inductive-type-occurrence-error-for-recursive-inductive-type/2057#2057</a></p>\n<p>I also tried their suggestion of using mutual, but that didn't work <a href=\"https://gist.github.com/awalterschulze/f3e95406063c0e5e6bff97343c93b2b0\">https://gist.github.com/awalterschulze/f3e95406063c0e5e6bff97343c93b2b0</a></p>\n<p>I have now also reported an issue to lean4, but I am not sure whether it is an issue: <a href=\"https://github.com/leanprover/lean4/issues/2195\">https://github.com/leanprover/lean4/issues/2195</a></p>\n<p>I am wondering if this is a bug in Lean or if I am doing something wrong?</p>",
        "id": 352027066,
        "sender_full_name": "awalterschulze",
        "timestamp": 1682242659
    },
    {
        "content": "<p>The mutual one can be fixed by changing <code>d</code> to be an index instead of a parameter (moving the argument to the right of the colon makes it an index, whereas it's a parameter if it's on the left):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">IsSmart</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isSmart</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n      <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span><span class=\"o\">),</span>\n      <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"n\">hash</span> <span class=\"n\">params</span> <span class=\"n\">reader</span>\n      <span class=\"bp\">→</span> <span class=\"n\">hash</span> <span class=\"bp\">=</span> <span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span>\n      <span class=\"bp\">→</span> <span class=\"n\">reader</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">\\/</span> <span class=\"n\">reader</span> <span class=\"bp\">=</span> <span class=\"n\">List.any</span> <span class=\"n\">params</span> <span class=\"n\">get_reader</span>\n      <span class=\"bp\">→</span> <span class=\"n\">AllIsSmart</span> <span class=\"n\">params</span>\n      <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">d</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">IsSmart'</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isSmart</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n      <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span>\n      <span class=\"n\">hash</span> <span class=\"bp\">=</span> <span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span>\n      <span class=\"bp\">→</span> <span class=\"n\">reader</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"bp\">\\/</span> <span class=\"n\">reader</span> <span class=\"bp\">=</span> <span class=\"n\">List.any</span> <span class=\"n\">params</span> <span class=\"n\">get_reader</span>\n      <span class=\"bp\">→</span> <span class=\"n\">AllIsSmart</span> <span class=\"n\">params</span>\n      <span class=\"bp\">→</span> <span class=\"n\">IsSmart'</span> <span class=\"o\">(</span><span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"n\">hash</span> <span class=\"n\">params</span> <span class=\"n\">reader</span><span class=\"o\">)</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">AllIsSmart</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"n\">AllIsSmart</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Desc</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">},</span> <span class=\"n\">IsSmart</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">AllIsSmart</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"n\">AllIsSmart</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 352091858,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1682266725
    },
    {
        "content": "<p>You can do more or less the same thing with an additional adjustment for the base version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IsSmart</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isSmart</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span>\n    <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"n\">hash</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">hash</span> <span class=\"bp\">=</span> <span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">params</span> <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>or you can omit the equality arguments and just do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IsSmart</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isSmart</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">params</span> <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"o\">(</span><span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span><span class=\"o\">)</span> <span class=\"n\">params</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It looks like this was discussed in the stackexchange post, but <code>Desc</code> is a nested inductive which makes a lot of subsequent uses more complex internally.</p>",
        "id": 352092498,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1682266984
    },
    {
        "content": "<p>Somewhere in the chain of the nested and the two inductive props, there's a positivity error (you get the right error when you make <code>d</code> an index).</p>",
        "id": 352092780,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1682267120
    },
    {
        "content": "<p>I see if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IsSmart</span><span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isSmart</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">reader</span><span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">),</span>\n    <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"n\">hash</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">hash</span> <span class=\"bp\">=</span> <span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">Forall</span> <span class=\"n\">IsSmart</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>then you get the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">4</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">_nested.Forall_1.cons'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>Is this the positivity error you are referring to?<br>\nI think this error message could also use some work.</p>",
        "id": 352489729,
        "sender_full_name": "awalterschulze",
        "timestamp": 1682417125
    },
    {
        "content": "<p>Thank you for the solution,<br>\nI really like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">IsSmart</span> <span class=\"o\">:</span> <span class=\"n\">Desc</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isSmart</span><span class=\"o\">:</span> <span class=\"bp\">∀</span>\n    <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">params</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Desc</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hash</span><span class=\"o\">:</span> <span class=\"n\">UInt64</span><span class=\"o\">),</span>\n    <span class=\"n\">desc</span> <span class=\"bp\">=</span> <span class=\"n\">Desc.intro</span> <span class=\"n\">name</span> <span class=\"n\">hash</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"n\">hash</span> <span class=\"bp\">=</span> <span class=\"n\">hash_with_name</span> <span class=\"n\">name</span> <span class=\"n\">params</span>\n    <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">param</span><span class=\"o\">,</span> <span class=\"n\">param</span> <span class=\"bp\">∈</span> <span class=\"n\">params</span> <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">param</span><span class=\"o\">)</span>\n    <span class=\"bp\">→</span> <span class=\"n\">IsSmart</span> <span class=\"n\">desc</span>\n</code></pre></div>\n<p>I didn't know about being able to use ∈ on lists</p>",
        "id": 352489919,
        "sender_full_name": "awalterschulze",
        "timestamp": 1682417177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"557483\">awalterschulze</span> has marked this topic as resolved.</p>",
        "id": 352489958,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682417190
    }
]