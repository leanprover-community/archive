[
    {
        "content": "<p>What's the general strategy in Lean to show that I'm never going to create a cycle in the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Calc</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span>  <span class=\"n\">Calc</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Calc</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Calc</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"n\">eval</span> <span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"n\">eval</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">isLeaf</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">):</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">assign</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">Calc</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Calc</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"n\">l'</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">l</span> <span class=\"bp\">==</span> <span class=\"n\">l'</span> <span class=\"k\">then</span> <span class=\"n\">var</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"k\">else</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span>\n  <span class=\"bp\">|</span> <span class=\"n\">plus</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">plus</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">times</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">times</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">assign</span> <span class=\"n\">l</span> <span class=\"n\">n</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c.isLeaf</span> <span class=\"c1\">-- totally insufficient for Lean...</span>\n</code></pre></div>",
        "id": 325729774,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675460790
    },
    {
        "content": "<p>Lean types are acyclic per definition, it is impossible to construct a cycle of an inductive type, you also dont have to show anything to Lean in the piece of code you are showing us right now, if you just leave your termination hint away Lean will accept it.</p>",
        "id": 325730080,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675460940
    },
    {
        "content": "<p>Maybe it's not? the first branch <code>val l' _ =&gt;</code> says <code>assign _ _ c</code> can be <code>c</code></p>",
        "id": 325730082,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675460940
    },
    {
        "content": "<p>I totally misunderstood your code</p>",
        "id": 325730348,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1675461054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Strategies.20for.20recursion.20on.20a.20DAG.20in.20Lean.3F/near/325730080\">said</a>:</p>\n<blockquote>\n<p>Lean types are acyclic per definition, it is impossible to construct a cycle of an inductive type, you also dont have to show anything to Lean in the piece of code you are showing us right now, if you just leave your termination hint away Lean will accept it.</p>\n</blockquote>\n<p>So it does -- I had a bug, added a <code>termination_by</code>, fixed the bug and it turns out the <code>termination_by</code> made Lean grumpy...</p>",
        "id": 325730353,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675461058
    },
    {
        "content": "<p>In general as long as you are doing what we call structural recursion. That is, doing a recursive call on something that has at least one constructor less than your input the auto termination checker will accept your things.</p>",
        "id": 325730471,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675461122
    },
    {
        "content": "<p>Yeah, I confused myself then confused the checker :-) The error message here is strange, BTW...</p>",
        "id": 325730677,
        "sender_full_name": "Arien Malec",
        "timestamp": 1675461218
    },
    {
        "content": "<p>(So what you have here is really a tree, not a graph; even though its memory representation can be a graph in case multiple nodes use the same shared reference).</p>",
        "id": 325730873,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675461325
    },
    {
        "content": "<p>Hm, I'd say its as good as we can do. You gave it a measure for termination, it simplified with that measure as far as it could and noticed you have to derive False in a certain branch and told you it cannot close that proof so you have to do that for it. What else would you have expected to happen?</p>",
        "id": 325730984,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675461365
    },
    {
        "content": "<p>What would be an idiomatic way to use \"real\" DAGs in Lean? I mean you should be able to fine grain control what nodes are shared etc</p>",
        "id": 325779319,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1675496250
    },
    {
        "content": "<p>You can use indices into a graph node array instead of direct references, like in Rust. Then you can even represent cycles.</p>",
        "id": 325792790,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675503687
    },
    {
        "content": "<p>It will also be much nicer to work with than it is in rust since you have <code>StateT</code>/<code>do</code>.</p>",
        "id": 325865393,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1675533653
    }
]