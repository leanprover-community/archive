[
    {
        "content": "<p>Is this error expected? I was surprised that the metavariable name <code>?h</code> refers to the same metavariable in different subgoals.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">h1</span> <span class=\"bp\">?</span><span class=\"n\">h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"n\">h2</span> <span class=\"bp\">?</span><span class=\"n\">h</span> <span class=\"c1\">-- error, since `?h` has type `p`.</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hr</span>\n</code></pre></div>\n<p>(note: I generally don't type <code>?h</code> myself, but <code>?_</code>. In this case I used <code>apply?</code> in two separate subgoals, and the suggestions of <code>apply?</code> are of the form <code>refine ... ?h</code>)</p>",
        "id": 402486577,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700146068
    },
    {
        "content": "<p>Oh, I was just thinking about opening an RFC about this. Yes, this is a known issue and it is surprising to me that it isn't a higher concern given that we use short goal names all the time</p>",
        "id": 402513949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700153562
    },
    {
        "content": "<p>The thing is, the tactic state doesn't really have \"scoping\" in the sense that you are thinking about</p>",
        "id": 402514098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700153607
    },
    {
        "content": "<p>It's even worse than this: <code>apply</code> and other tactics automatically name their goals, and if you use that name in your <code>?foo</code> metavariables then you will pick up old assignments</p>",
        "id": 402514314,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700153672
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">?</span><span class=\"n\">y</span>\n    <span class=\"c1\">-- z := 0 + 1</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"n\">z</span>\n</code></pre></div>",
        "id": 402514959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700153881
    },
    {
        "content": "<p>I think this is not a higher concern because we rarely name goals ourselves, and all automatically-named goals generate a fresh name (I think?)</p>",
        "id": 402516788,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700154400
    },
    {
        "content": "<p>No, they are not fresh names, that's the issue</p>",
        "id": 402517252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154547
    },
    {
        "content": "<p>they are completely outside the hygiene system</p>",
        "id": 402517283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154561
    },
    {
        "content": "<p>unless you write <code>?a</code> or <code>case a =&gt;</code> inside a macro but that's not a very common situation</p>",
        "id": 402517340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154584
    },
    {
        "content": "<p>I see. What I meant is that <code>apply</code> will at least not re-use existing metavariables with the same user-facing name.</p>",
        "id": 402517886,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700154721
    },
    {
        "content": "<p>But when you use the metaprogramming API to create a new named mvar, it will not be unified with other mvars with the same user name, it will just \"shadow\" the original</p>",
        "id": 402517945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154726
    },
    {
        "content": "<p>No, it will</p>",
        "id": 402517952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154729
    },
    {
        "content": "<p>Er, it can make multiple goals with the same name but the metaprogramming API doesn't try to be smart about this and unify them, unlike the <code>?a</code> syntax</p>",
        "id": 402518089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154768
    },
    {
        "content": "<p>I mean, in this example, the second <code>apply f</code> will generate 2 new subgoals, not reuse the existing <code>?x</code> and <code>?y</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 402518145,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700154789
    },
    {
        "content": "<p>Oh juicy, I just got a stack overflow</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">True</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"n\">next</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">apply</span> <span class=\"n\">f</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"bp\">?</span><span class=\"n\">x</span>\n</code></pre></div>",
        "id": 402518214,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700154813
    },
    {
        "content": "<p>yep, that one is fun</p>",
        "id": 402518249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154823
    },
    {
        "content": "<p>The exposed mvar names issue was brought up in <a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Hide.20intermediate.20goals.20from.20user.3F\">this thread</a>, which suggests a combinator for hiding goals created during execution of some monad computation</p>",
        "id": 402518284,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700154836
    },
    {
        "content": "<p>this has to do with the fact that lean doesn't really do the occurs check as often as it should</p>",
        "id": 402518415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700154861
    },
    {
        "content": "<p>Maybe we should just have another syntax like <code>?=a</code> for reusing an existing metavariable, this is almost impossible to use correctly from a user perspective as currently designed</p>",
        "id": 402518950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700155031
    },
    {
        "content": "<p>(and I can count on one hand the number of times I actually wanted to reuse a metavariable with named mvar syntax)</p>",
        "id": 402519246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700155120
    },
    {
        "content": "<p>Fair, although I can personally also count on one hand the number of times I actually gave a metavariable a name manually.</p>",
        "id": 402519414,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700155177
    },
    {
        "content": "<p>True. But that road leads to \"<code>?a</code> considered harmful\"</p>",
        "id": 402519568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700155210
    },
    {
        "content": "<p>We could certainly have <code>apply?</code> et al explicitly use <code>?_</code> instead of named mvars</p>",
        "id": 402519658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700155240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> Here's the issue for your last example: <a href=\"https://github.com/leanprover/lean4/issues/2504\">bug: exact tactic is missing an occurs check</a></p>",
        "id": 402520391,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700155503
    },
    {
        "content": "<p>I think you could trace that <code>apply?</code> behavior back to the <code>show_term</code> tactic, which tries to replicate the behavior of the tactic it replaces, including the names of generated goals</p>",
        "id": 402521195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700155740
    },
    {
        "content": "<p>Although I suppose it won't get the order right regardless</p>",
        "id": 402521291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700155769
    },
    {
        "content": "<p>Oh, we also have a new version of the \"a\"-bug <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> (although in this case <code>a</code> actually occurs in the definition of <code>And</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">refine</span> <span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"c1\">-- error</span>\n</code></pre></div>",
        "id": 402536648,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700161378
    }
]