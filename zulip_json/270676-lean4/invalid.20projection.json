[
    {
        "content": "<p>The following fails with <code>invalid projection g.1</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#fails\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">``</span><span class=\"n\">SimplicialObject.Splitting.πSummand_comp_ιSummand_comp_PInfty_eq_PInfty</span>\n  <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">info.type</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">body.eq</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Meta.reduceAll</span> <span class=\"n\">lhs</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"n\">fails</span>\n</code></pre></div>\n<p>Is this a bug, or am I doing something wrong?</p>",
        "id": 404400401,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701087682
    },
    {
        "content": "<p>You are probably returning <code>Expr</code>s from <code>forallTelescopeReducing</code> which are only valid in the extended <code>LocalContext</code> generated by <code>forallTelescopeReducing</code>. Use <code>Expr.toString</code> to inspect the expressions; they probably contain <code>FVarId</code>s that don't exist outside the <code>forallTelescopeReducing</code>.</p>",
        "id": 404401002,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701087913
    },
    {
        "content": "<p>Then this shouldn't fail though, should it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#fails\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">``</span><span class=\"n\">SimplicialObject.Splitting.πSummand_comp_ιSummand_comp_PInfty_eq_PInfty</span>\n  <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">info.type</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">body.eq</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.reduceAll</span> <span class=\"n\">lhs</span>\n      <span class=\"n\">return</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"n\">fails</span>\n</code></pre></div>",
        "id": 404403246,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701088712
    },
    {
        "content": "<p>Indeed. The failure happens during <code>reduceAll</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#fails\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"bp\">``</span><span class=\"n\">SimplicialObject.Splitting.πSummand_comp_ιSummand_comp_PInfty_eq_PInfty</span>\n  <span class=\"n\">forallTelescopeReducing</span> <span class=\"n\">info.type</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"n\">body.eq</span><span class=\"bp\">?</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"none\"</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">lhs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"before reduceAll\"</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.reduceAll</span> <span class=\"n\">lhs</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">toString</span> <span class=\"n\">x</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkNatLit</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"n\">fails</span>\n<span class=\"c1\">-- before reduceAll</span>\n<span class=\"c1\">-- invalid projection</span>\n<span class=\"c1\">--  g.1</span>\n</code></pre></div>\n<p>Looks like a bug to me, so I think you should create an issue (after inlining the type of <code>SimplicialObject....</code>, to remove the Mathlib dependency).</p>",
        "id": 404405798,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701089645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/invalid.20projection/near/404405798\">said</a>:</p>\n<blockquote>\n<p>I think you should create an issue (after inlining the type of <code>SimplicialObject....</code>, to remove the Mathlib dependency).</p>\n</blockquote>\n<p>I'm honestly not sure how to inline the type of <code>SimplicalObject...</code> as it's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Category.</span><span class=\"o\">{</span><span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Limits.HasFiniteCoproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.SimplicialObject</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SimplicialObject.Splitting</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">CategoryTheory.Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"n\">CategoryTheory.CategoryStruct.comp</span>\n      <span class=\"o\">(</span><span class=\"n\">SimplicialObject.Splitting.πSummand</span> <span class=\"n\">s</span>\n        <span class=\"o\">(</span><span class=\"n\">SimplicialObject.Splitting.IndexSet.id</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.mk</span> <span class=\"n\">n</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"n\">CategoryTheory.CategoryStruct.comp</span>\n        <span class=\"o\">(</span><span class=\"n\">SimplicialObject.Splitting.ιSummand</span> <span class=\"n\">s</span>\n          <span class=\"o\">(</span><span class=\"n\">SimplicialObject.Splitting.IndexSet.id</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.mk</span> <span class=\"n\">n</span><span class=\"o\">))))</span>\n        <span class=\"o\">(</span><span class=\"n\">HomologicalComplex.Hom.f</span> <span class=\"n\">AlgebraicTopology.DoldKan.PInfty</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">HomologicalComplex.Hom.f</span> <span class=\"n\">AlgebraicTopology.DoldKan.PInfty</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 404450588,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701103491
    },
    {
        "content": "<p>In case it helps at all, <code>Meta.reduce lhs (skipTypes := false) (explicitOnly := false)</code> turns up the error, and setting either of these arguments to the opposite value leads to no error, so it's an implicit type argument somewhere that's causing the failure.</p>",
        "id": 404464308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701108279
    },
    {
        "content": "<p>Here's something to help you minimize:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.AlgebraicTopology.DoldKan.SplitSimplicialObject</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"reduce'\"</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">ppSpace</span> <span class=\"n\">Parser.Tactic.location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">Mathlib.Tactic.runDefEqTactic</span> <span class=\"o\">(</span><span class=\"n\">reduceAll</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">loc</span><span class=\"bp\">?</span> <span class=\"s2\">\"reduce\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Limits.HasFiniteCoproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">CategoryTheory.SimplicialObject</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SimplicialObject.Splitting</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">SimplicialObject.Splitting.IndexSet.id</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.mk</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n      <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">reduce'</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  invalid projection</span>\n<span class=\"cm\">    g.1</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(I started with the original LHS and deleted things to this point.)</p>",
        "id": 404466151,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701109034
    },
    {
        "content": "<p>It seems like this error is coming from reducing a proof. After unfolding things for awhile manually, I've got to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Limits.HasFiniteCoproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">CategoryTheory.SimplicialObject</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SimplicialObject.Splitting</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SimplexCategory</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.mk</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">CategoryTheory.Category.id_comp</span> <span class=\"n\">g</span>\n      <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">reduce'</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  invalid projection</span>\n<span class=\"cm\">    g.1</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 404467727,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701109659
    },
    {
        "content": "<p>I found the source of the problem. First, you can get more information about the primitive projection using</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter.Delaborator</span> <span class=\"n\">SubExpr</span> <span class=\"k\">in</span>\n<span class=\"sd\">/-- Delaborator for `Prefunctor.obj` -/</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">proj</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabPrefunctorObjExp</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Expr.proj</span> <span class=\"n\">typeName</span> <span class=\"n\">idx</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">getExpr</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withProj</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">proj</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">typeName</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">idx</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>This makes the error message print as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">projection</span>\n  <span class=\"n\">proj</span><span class=\"bp\">✝</span> <span class=\"bp\">`</span><span class=\"n\">OrderHom</span> <span class=\"n\">g</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>That's to say, we're trying to do <code>g.1</code> as if <code>g</code> had type <code>OrderHom ..</code></p>\n<p>However, <code>g</code> has type <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimplexCategory.Hom#doc\">docs#SimplexCategory.Hom</a>, which is marked <code>irreducible</code>. This means that when <code>inferType</code> does whnf of the type of <code>g</code>, it gets stuck at <code>SimplexCategory.Hom</code> rather than reducing all the way to <code>OrderHom</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Limits.HasFiniteCoproducts</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">CategoryTheory.SimplicialObject</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">SimplicialObject.Splitting</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">CategoryTheory.Preadditive</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"o\">{</span><span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">SimplexCategory</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Opposite.op</span> <span class=\"o\">(</span><span class=\"n\">SimplexCategory.mk</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">unop</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">CategoryTheory.Category.id_comp</span> <span class=\"n\">g</span>\n      <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">--have : _ →o _ := g -- fails</span>\n  <span class=\"n\">reduce</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">SimplexCategory.Hom</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">→</span><span class=\"n\">o</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 404470158,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701110573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> I'm not sure this is a bug, though it's inconvenient having a term that you can do <code>inferType</code> on in one context but not in another. (Here's a related issue: <a href=\"https://github.com/leanprover/lean4/pull/2194\">lean4#2194</a>)</p>\n<p>One question is why you're reducing the lhs, and another is whether <code>Meta.reduce</code> will do instead of <code>Meta.reduceAll</code>.</p>",
        "id": 404470386,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701110656
    },
    {
        "content": "<p>I would at least ask Leo (via an issue) whether he considers this a bug. Imo having <code>reduceAll</code> fail on a well-typed term is not something one should have to expect.</p>",
        "id": 404473158,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701111773
    },
    {
        "content": "<p>I have no idea what is discussed in this thread! but this file on split simplicial objects is being slightly refactored in PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/8531\">#8531</a> (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/8531/files#diff-6aee2331c01c4301ce958e9d779555f8ed04259863471c15c9e38551bbbb0538R137\">https://github.com/leanprover-community/mathlib4/pull/8531/files#diff-6aee2331c01c4301ce958e9d779555f8ed04259863471c15c9e38551bbbb0538R137</a>)</p>",
        "id": 404484786,
        "sender_full_name": "Joël Riou",
        "timestamp": 1701117000
    },
    {
        "content": "<p>is there a mathlib-free MWE of this?</p>",
        "id": 404495967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701122433
    },
    {
        "content": "<p>I think this is reasonably representative, but the setup is slightly different from that last <code>example</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#reduce'\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Command.runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">withSynthesize</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.reduce</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e} : {← inferType e}\"</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">S'</span> <span class=\"o\">:=</span> <span class=\"n\">S</span>\n<span class=\"kd\">def</span> <span class=\"n\">S'.x</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">S.x</span> <span class=\"n\">s</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">S'</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S'</span><span class=\"o\">)</span>\n<span class=\"k\">#reduce</span><span class=\"bp\">'</span> <span class=\"n\">s.x</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">invalid projection</span>\n<span class=\"cm\">  s.1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 404497072,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701122895
    },
    {
        "content": "<p>It's the <code>inferType</code> that prints the error. Everything else is setting up an <code>Expr.proj</code> term.</p>",
        "id": 404497094,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701122907
    },
    {
        "content": "<p>Thanks for all the digging! The issue is <a href=\"https://github.com/leanprover/lean4/issues/2975\">#2975</a>. I haven't opened an issue on the repo before, so any feedback on how to improve it is very welcome :)</p>",
        "id": 404607800,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701169852
    }
]