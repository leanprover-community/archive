[
    {
        "content": "<p>I see that the bulk of SlimCheck has been ported to Lean 4 (both inside of Mathlib4, and also existing sort of independently in LSpec). It doesn't seem to have the tactic that existed in the Lean 3 version, that ran it and, if no counter-example was found, <code>admit</code>ed the proof. Does anyone have an implementation of that floating around?</p>",
        "id": 344125438,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1679616028
    },
    {
        "content": "<p>not as far as I know</p>",
        "id": 344125679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679616143
    },
    {
        "content": "<p>it is on the todo list, it should not be too hard</p>",
        "id": 344125702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679616164
    },
    {
        "content": "<p>I've not used it but maybe Lspec is helpful here in the interim <a href=\"https://github.com/lurk-lab/LSpec#integration-with-slimcheck\">https://github.com/lurk-lab/LSpec#integration-with-slimcheck</a></p>",
        "id": 344125834,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1679616264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I can _run_ the tests fine, I just was hoping for the tactic connection.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Yes, doesn't seem like it would be hard with knowledge of elab / etc... which I was hoping to not have to learn, at least not _right now_ :)</p>",
        "id": 344127204,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1679617143
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/1103\">!4#1103</a> is the issue tracking this. Maybe soon, perhaps. :-)</p>",
        "id": 344151460,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679628047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> thanks :) Though hoped for in Dec and not yet done... :(</p>",
        "id": 344256679,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1679662753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494227\">@Daniel Patterson</span> , please review <a href=\"https://github.com/leanprover-community/mathlib4/pull/3114\">!4#3114</a>.</p>",
        "id": 344719428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679868292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Wow! This looks amazing! I haven't been able to try it though as my binary search for a toolchain that'll build it hasn't been successful (tried latest, 2023-03-25, then 2023-03-17, whats in mathlib4 repo, then 2023-02-22, what's in aesop, then 2023-02-24, whats in std4, and then I gave up -- each had build errors on different modules, all in dependencies before Mathlib.Tactic.SlimCheck...)</p>",
        "id": 344727183,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1679873961
    },
    {
        "content": "<p>That's strange, and surely something messed up on your system, given that it builds in CI.</p>",
        "id": 344746961,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679884920
    },
    {
        "content": "<p>In that branch I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">17</span>\n</code></pre></div>\n<p>so you certainly shouldn't be trying anything except that.</p>",
        "id": 344747115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679885019
    },
    {
        "content": "<p>I would checkout the branch, maybe try some of:</p>\n<ul>\n<li><code>git clean -xfd</code></li>\n<li><code>rm -rf lake-packages/</code></li>\n<li><code>lake exe cache get</code></li>\n<li><code>lake exe cache get!</code></li>\n</ul>",
        "id": 344747191,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679885073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494227\">@Daniel Patterson</span>, did you ever get this sorted? I don't like the idea of leaving you without a working toolchain. :-)</p>",
        "id": 345275122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680053743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Sorry for the delay. It's been a very busy week! I just rebuilt stuff, and obviously there was some stale cached thing that was breaking stuff, as it all built fine, and the tactic works, so thanks! </p>\n<p>So, really, thanks again -- it'll be in front of a couple hundred students next week (as a demo, not in their hands...). It allows me to sort of come full circle in a nice way, as we _started_ with property-based testing (not in Lean), then moved to lean (in order to do _proofs_), and being able to circle back to PBT as we get to the last few weeks of class is really nice.</p>",
        "id": 345726926,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1680193219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"494227\">@Daniel Patterson</span>, are you missing the functionality for testing lists? I noticed that this was missing from the existing port of the core slim_check code, but didn't investigate adding it. If this is useful I can either try it myself or prod someone with better comparative advantage. :-)</p>",
        "id": 345786398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680210145
    },
    {
        "content": "<p>It would certainly be nice (for examples) but I can probably work around it. Itâ€™s not just a matter of declaring type class instances for them?</p>",
        "id": 345787946,
        "sender_full_name": "Daniel Patterson",
        "timestamp": 1680210727
    },
    {
        "content": "<p>Yes, presumably it's easy.</p>",
        "id": 345790727,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680211816
    }
]