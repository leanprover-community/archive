[
    {
        "content": "<p>Do we have a quick way to show:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.foo</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>And also:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Nat.bar</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span>\n</code></pre></div>\n<p>? I seem to struggle a lot with these basic inequalities of all things /o\\</p>",
        "id": 328545460,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676661262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases'</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">case_lt</span> <span class=\"n\">case_gt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">case_lt</span>\n  <span class=\"bp\">·</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 328546784,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676661772
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_gt_of_ne</span> <span class=\"n\">h2</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">linarith</span>\n</code></pre></div>",
        "id": 328547002,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676661860
    },
    {
        "content": "<p>I see, thank you! I tried to poke linarith at it but (as evident) it cannot solve the base goal on its own. Is there clear rules for what I can or cannot do with linarith?</p>",
        "id": 328547101,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676661902
    },
    {
        "content": "<p>Oh and I'd also especially be interested in the relation of <code>simp_arith</code> and <code>linarith</code> if someone knows about that.</p>",
        "id": 328547407,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676662022
    },
    {
        "content": "<p>In mathlib3 <code>linarith</code> was able to prove anything that followed from a correct-sign linear combination of inequalities. This included arguments by transitivity. In mathlib4 <code>linarith</code> seems to be somewhat weaker but I don't know any details.</p>",
        "id": 328548328,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676662330
    },
    {
        "content": "<p>Or full-on term mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt_succ</span> <span class=\"n\">h1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lt_of_ne</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 328548360,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676662344
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">p</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">tsub_lt_tsub_right_of_le</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n  <span class=\"n\">convert</span> <span class=\"n\">h3</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">eq_tsub_of_add_eq</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 328549846,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676662874
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">p</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_sub_cancel</span><span class=\"o\">]</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">tsub_lt_tsub_right_of_le</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 328550125,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676662985
    },
    {
        "content": "<p>Yours is probably clearer, but this also works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.add_sub_cancel</span> <span class=\"n\">m</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tsub_lt_tsub_right_of_le</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</code></pre></div>\n<p>or with the dreaded triangle</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Nat.add_sub_cancel</span> <span class=\"n\">m</span> <span class=\"n\">p</span> <span class=\"bp\">▸</span> <span class=\"n\">tsub_lt_tsub_right_of_le</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n</code></pre></div>",
        "id": 328551335,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676663415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> has marked this topic as resolved.</p>",
        "id": 328553989,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676664355
    }
]