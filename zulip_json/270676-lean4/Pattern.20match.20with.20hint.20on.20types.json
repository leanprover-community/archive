[
    {
        "content": "<p>Hi, I'm wondering if there's a simple syntax for providing type and motive for a <code>match</code>. Here's an example of what I want to achieve. In the following code, I want to tell lean that <code>a</code> is of type <code>TypeA</code> and use <code>motive</code> as the motive function when calling <code>casesOn</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">TypeA</span><span class=\"o\">)</span> <span class=\"n\">returning</span> <span class=\"n\">motive</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">Case1</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>I know I can probably go <code>let x: TypeA := a; @TypeA.casesOn ... (motive:=motive) x ...</code> but it would be nice if I can stick with <code>match</code>.</p>",
        "id": 401529782,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699722482
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">show</span> <span class=\"n\">Int</span> <span class=\"k\">from</span> <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">10</span>\n</code></pre></div>",
        "id": 401533596,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699726491
    },
    {
        "content": "<p>You can use <code>motive</code> to do that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 401535740,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1699729100
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 401536297,
        "sender_full_name": "Z. Wu",
        "timestamp": 1699729547
    }
]