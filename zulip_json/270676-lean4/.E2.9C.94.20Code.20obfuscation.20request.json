[
    {
        "content": "<p>I am working on a teaching material. I want to explain quantifiers on the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Use</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_succ_of_le</span> <span class=\"n\">k_le_n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>Weirdly, I don't like that the subgoal <code>n &lt; k → n + 1 ≤ k</code> is closed by <code>exact id</code>.<br>\nI'd like to write something similar to the code above it.<br>\nIs there a way to \"obfuscate\" the proof so that it uses a lemma to close the second subgoal?</p>",
        "id": 328398274,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676618043
    },
    {
        "content": "<p>PS: Where is the definition that makes <code>exact id</code> work?</p>",
        "id": 328398358,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676618081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Code.20obfuscation.20request/near/328398358\">said</a>:</p>\n<blockquote>\n<p>PS: Where is the definition that makes <code>exact id</code> work?</p>\n</blockquote>\n<p>I guess </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Nat.lt</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.le</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">m</span>\n</code></pre></div>",
        "id": 328398663,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1676618260
    },
    {
        "content": "<p>Is it in core? Is it in STD? Is it in mathlib?</p>",
        "id": 328399448,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676618659
    },
    {
        "content": "<p>In core. It is defined in <code>Prelude.lean</code></p>",
        "id": 328399767,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1676618795
    },
    {
        "content": "<p>Can I obfuscate the proof by calling <code>Nat.lt</code> as if it was a rewrite lemma? Or can I do something along the lines:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_succ_of_le</span> <span class=\"n\">k_le_n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">n_lt_k</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fooooooooo</span> <span class=\"n\">n_lt_k</span>\n</code></pre></div>",
        "id": 328472414,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641216
    },
    {
        "content": "<p><code>n &lt; k → n + 1 ≤ k</code> is one direction of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.succ_le#doc\">docs4#Nat.succ_le</a></p>",
        "id": 328473528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676641552
    },
    {
        "content": "<p>Does <code>example : n &lt; k → n + 1 ≤ k := by library_search</code> give you that answer automatically?</p>",
        "id": 328473693,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676641593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Code.20obfuscation.20request/near/328473693\">said</a>:</p>\n<blockquote>\n<p>Does <code>example : n &lt; k → n + 1 ≤ k := by library_search</code> give you that answer automatically?</p>\n</blockquote>\n<p>outputs <code>exact fun a =&gt; a</code></p>",
        "id": 328473852,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641641
    },
    {
        "content": "<p>Which is why I wrote <code>exact id</code> in my code above.</p>",
        "id": 328473898,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641661
    },
    {
        "content": "<p>In the end, I will probably release this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k_le_n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">n_lt_k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n_lt_k</span>\n</code></pre></div>\n<p>However, I am a bit unsure whether the obfuscation really improves the value of the example as a study material.<br>\nSome general rules would probably say \"NO\".</p>",
        "id": 328479942,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676643174
    },
    {
        "content": "<p>I'm not sure what you mean by \"obfuscation\" here - I think relying on the way <code>lt</code> is defined as `x.succ le y´ to be more obfuscated</p>",
        "id": 328482336,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676643813
    },
    {
        "content": "<p>Sorry, I mean \"hiding the definition behind writing three commands even though one would be enough\".</p>",
        "id": 328482572,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676643865
    },
    {
        "content": "<p>You could use <code>exact Nat.succ_le.mpr</code> as the one command</p>",
        "id": 328482668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643890
    },
    {
        "content": "<p>Can I do something like that for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k_le_n</span>\n</code></pre></div>\n<p>as well?</p>",
        "id": 328482824,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676643932
    },
    {
        "content": "<p>So for instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_le.mpr</span>\n</code></pre></div>",
        "id": 328482834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643936
    },
    {
        "content": "<p>Yes,  because</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k_le_n</span>\n</code></pre></div>\n<p>is <code>fun k_le_n =&gt; Nat.lt_succ_of_le k_le_n</code> which is obviously just <code>Nat.lt_succ_of_le</code></p>",
        "id": 328483009,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643975
    },
    {
        "content": "<p>If you want non-defeq-abuse ids, you could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Nat.succ_eq_add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.lt_succ</span><span class=\"o\">]</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 328483602,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644178
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">Nat.lt_succ_of_le</span><span class=\"o\">,</span> <span class=\"n\">Nat.succ_le.mp</span><span class=\"o\">⟩⟩</span>\n</code></pre></div>",
        "id": 328483774,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676644221
    },
    {
        "content": "<p>That should be <code>.mpr</code></p>",
        "id": 328483886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644256
    },
    {
        "content": "<p>It compiles!</p>",
        "id": 328483938,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676644271
    },
    {
        "content": "<p>I mean, I don't want to teach codegolf.</p>",
        "id": 328483946,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676644276
    },
    {
        "content": "<p>Sure, but so does using <code>id</code> there</p>",
        "id": 328483951,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644278
    },
    {
        "content": "<p>Oh right</p>",
        "id": 328483962,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676644283
    },
    {
        "content": "<p>Dammit</p>",
        "id": 328483977,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676644287
    },
    {
        "content": "<p><code>id</code> is unfolding defeq at one end, your version is doing it at both!</p>",
        "id": 328483993,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Code.20obfuscation.20request/near/328483946\">said</a>:</p>\n<blockquote>\n<p>I mean, I don't want to teach codegolf.</p>\n</blockquote>\n<p>You might want to teach that <code>#print your_lemma</code> produces pretty much exactly this code</p>",
        "id": 328484054,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644309
    },
    {
        "content": "<p>In fact it gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Exists.intro</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">k</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">left</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_succ_of_le</span><span class=\"o\">,</span> <span class=\"n\">right</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.succ_le.mpr</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 328484227,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Code.20obfuscation.20request/near/328479942\">said</a>:</p>\n<blockquote>\n<p>In the end, I will probably release this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_succ_of_le</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k_le_n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">n_lt_k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n_lt_k</span>\n</code></pre></div>\n<p>However, I am a bit unsure whether the obfuscation really improves the value of the example as a study material.<br>\nSome general rules would probably say \"NO\".</p>\n</blockquote>\n<p>I will probably go back to the long code. It is IMO easier to explain to beginners what happens there, line by line.</p>",
        "id": 328485862,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676644741
    },
    {
        "content": "<p>For symmetry you could replace the <code>apply</code> line with <code>rw [Nat.lt_succ]</code></p>",
        "id": 328486046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676644784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Code.20obfuscation.20request/near/328486046\">said</a>:</p>\n<blockquote>\n<p>For symmetry you could replace the <code>apply</code> line with <code>rw [Nat.lt_succ]</code></p>\n</blockquote>\n<p>Thanks a lot!! This is exactly the lemma I wanted!!</p>",
        "id": 328486448,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676644879
    },
    {
        "content": "<p>Or maybe this \"symmetric version\":</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">id</span>\n</code></pre></div>",
        "id": 328487655,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676645170
    },
    {
        "content": "<p>Nah. That makes it less visible where the rewriting happens. I'm going back to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"n\">intro</span> <span class=\"n\">k</span>\n  <span class=\"n\">constructor</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">k_le_n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.lt_succ</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">k_le_n</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">n_lt_k</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_le</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">n_lt_k</span>\n</code></pre></div>",
        "id": 328489275,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676645634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 328489294,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676645639
    }
]