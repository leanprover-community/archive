[
    {
        "content": "<p>How can I call an external process and get its output to be parsed in Lean4? Is there anything similar to <a href=\"https://hackage.haskell.org/package/process-1.6.7.0/docs/System-Process.html#v:createProcess\">https://hackage.haskell.org/package/process-1.6.7.0/docs/System-Process.html#v:createProcess</a> ?</p>",
        "id": 344967778,
        "sender_full_name": "Alexandre Rademaker",
        "timestamp": 1679951121
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.Process.spawn#doc\">docs4#IO.Process.spawn</a> and the related methods help?</p>",
        "id": 345012563,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1679971681
    },
    {
        "content": "<p>I use the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.System.IO</span>\n<span class=\"kn\">open</span> <span class=\"n\">IO.Process</span>\n\n<span class=\"sd\">/-- Pipe input into stdin of the spawned process, then return output upon completion. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">cmd_with_stdin</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">SpawnArgs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Output</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">child</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">spawn</span> <span class=\"o\">{</span> <span class=\"n\">args</span> <span class=\"k\">with</span> <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">child.takeStdin</span>\n  <span class=\"n\">stdin.putStr</span> <span class=\"n\">input</span>\n  <span class=\"n\">stdin.flush</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.asTask</span> <span class=\"n\">child.stdout.readToEnd</span> <span class=\"n\">Task.Priority.dedicated</span>\n  <span class=\"k\">let</span> <span class=\"n\">stderr</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">child.stderr.readToEnd</span>\n  <span class=\"k\">let</span> <span class=\"n\">exitCode</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">child.wait</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">IO.ofExcept</span> <span class=\"n\">stdout.get</span>\n  <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">exitCode</span><span class=\"o\">,</span> <span class=\"n\">stdout</span><span class=\"o\">,</span> <span class=\"n\">stderr</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 345090183,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680000244
    }
]