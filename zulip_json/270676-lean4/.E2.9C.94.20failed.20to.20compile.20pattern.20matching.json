[
    {
        "content": "<p>What is the problem with this function ? I don't understand the error message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">\"forward\"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pos.1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">pos.2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">\"up\"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>      <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pos.1</span><span class=\"o\">,</span> <span class=\"n\">pos.2</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"s2\">\"down\"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">pos.1</span><span class=\"o\">,</span> <span class=\"n\">pos.2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The error message is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">compile</span> <span class=\"n\">pattern</span> <span class=\"n\">matching</span><span class=\"o\">,</span> <span class=\"n\">stuck</span> <span class=\"n\">at</span>\n  <span class=\"n\">remaining</span> <span class=\"kd\">variables</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">:(</span><span class=\"n\">String</span><span class=\"o\">),</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span><span class=\"o\">:(</span><span class=\"n\">Int</span><span class=\"o\">)]</span>\n  <span class=\"n\">alternatives</span><span class=\"o\">:</span>\n    <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">:(</span><span class=\"n\">Int</span><span class=\"o\">)]</span> <span class=\"bp\">|-</span> <span class=\"o\">[</span><span class=\"s2\">\"forward\"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_1</span> <span class=\"n\">n</span>\n    <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">:(</span><span class=\"n\">Int</span><span class=\"o\">)]</span> <span class=\"bp\">|-</span> <span class=\"o\">[</span><span class=\"s2\">\"up\"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_2</span> <span class=\"n\">n</span>\n    <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">:(</span><span class=\"n\">Int</span><span class=\"o\">)]</span> <span class=\"bp\">|-</span> <span class=\"o\">[</span><span class=\"s2\">\"down\"</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h_3</span> <span class=\"n\">n</span>\n  <span class=\"n\">examples</span><span class=\"o\">:(</span><span class=\"n\">Prod.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 399775942,
        "sender_full_name": "Ludovic Kuty",
        "timestamp": 1698862898
    },
    {
        "content": "<p>The error message is strange, but you need a catchall case so the function returns something if the input string is not of one of those forms</p>",
        "id": 399776498,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698863156
    },
    {
        "content": "<p>I.e. you could do <code>| _ =&gt; unreachable!</code> which means \"return (0,0) in every other case but print a big scary warning to stdout when you do so\"</p>",
        "id": 399776607,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698863194
    },
    {
        "content": "<p>ok thanks. The answer to my previous question was also <code>_ =&gt; unreachable!</code>. I guess now I get it for good</p>",
        "id": 399776978,
        "sender_full_name": "Ludovic Kuty",
        "timestamp": 1698863359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663680\">Ludovic Kuty</span> has marked this topic as resolved.</p>",
        "id": 399776985,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698863363
    }
]