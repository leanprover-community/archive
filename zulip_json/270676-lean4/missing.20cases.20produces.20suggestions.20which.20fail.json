[
    {
        "content": "<p>This came up in LftCM:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">MyType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">MyType.le_of_rel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">MyType</span><span class=\"o\">},</span>\n  <span class=\"o\">(</span><span class=\"n\">a.1</span> <span class=\"bp\">≤</span> <span class=\"n\">b.1</span> <span class=\"bp\">∧</span> <span class=\"n\">a.2</span> <span class=\"bp\">=</span> <span class=\"n\">b.2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.2</span> <span class=\"bp\">∧</span> <span class=\"n\">a.2</span> <span class=\"bp\">≤</span> <span class=\"n\">b.2</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a.2</span> <span class=\"bp\">∧</span> <span class=\"n\">b.2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"n\">And.intro</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">_</span><span class=\"o\">))))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>tells me (correctly) there are two cases missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Or.inr</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">And.intro</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Or.inl</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">And.intro</span> <span class=\"n\">_</span> <span class=\"n\">Eq.refl</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>The first of these doesn't work because there are <em>too many</em> <code>@</code> signs printed here. The second also has this problem, but fixing the <code>@</code> signs  produces another problem, that Eq.refl wants an explicit argument. Fixing this produces a third problem, saying that dependent elimination failed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">when</span> <span class=\"n\">solving</span> <span class=\"n\">alternative</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"n\">motive</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">∧</span>\n          <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∨</span>\n        <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∧</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">≤</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∨</span>\n          <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∧</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">expected</span>\n  <span class=\"n\">motive</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n      <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">≤</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">∧</span>\n          <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∨</span>\n        <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∧</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">≤</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∨</span>\n          <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">∧</span> <span class=\"o\">{</span> <span class=\"n\">fst</span> <span class=\"o\">:=</span> <span class=\"n\">fst</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"n\">snd</span><span class=\"bp\">✝</span> <span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 389968128,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694219503
    },
    {
        "content": "<p>To be clear, I'm expecting to be able to induct on <code>Eq.refl</code> here, and I expected the suggestions for missing cases to be valid things to put in the match (note this latter property is true in lean 3)</p>",
        "id": 389968531,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694219746
    }
]