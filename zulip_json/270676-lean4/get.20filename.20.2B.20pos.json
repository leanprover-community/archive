[
    {
        "content": "<p>I'm looping over the environment, and have a <code>Lean.Name</code>. How can I get access to the file + position where it is declared?</p>",
        "id": 324252134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674899037
    },
    {
        "content": "<p>Found it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span> <span class=\"n\">declRangeExt.find</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 324254020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674899847
    },
    {
        "content": "<p>At least, that gives the position. Now I still need the filename</p>",
        "id": 324254117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674899886
    },
    {
        "content": "<p>Is this the idiomatic way to get the module name?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"bp\">←</span> <span class=\"n\">env.getModuleIdxFor</span><span class=\"bp\">?</span> <span class=\"n\">n</span>\n<span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">env.header.moduleNames.get</span><span class=\"bp\">!</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 324256794,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1674900951
    },
    {
        "content": "<p>I do it like this in doc-gen but idk if it is considered idiomatic</p>",
        "id": 324270192,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674905551
    },
    {
        "content": "<p>How do I go from the module name to a file name?</p>",
        "id": 396168863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697060543
    },
    {
        "content": "<p>that is; what's the analog to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/environment.decl_olean\">docs3#environment.decl_olean</a>?</p>",
        "id": 396169070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697060672
    },
    {
        "content": "<p>Ah, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findOLean#doc\">docs#Lean.findOLean</a></p>",
        "id": 396169730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697061050
    },
    {
        "content": "<p>You'll need lake related stuff to get the filename from a module Name because of how lake places them in lake-packages</p>",
        "id": 396226839,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697094051
    },
    {
        "content": "<p>to pass base to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findOLean#doc\">docs#Lean.findOLean</a> needs this</p>",
        "id": 396226963,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697094105
    },
    {
        "content": "<p>The major issue is to locate the package directory when you only have Package root</p>",
        "id": 396227113,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697094158
    },
    {
        "content": "<p>I have used</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">findLean</span> <span class=\"o\">(</span><span class=\"n\">mod</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">FilePath.mk</span> <span class=\"o\">((</span><span class=\"bp\">←</span> <span class=\"n\">findOLean</span> <span class=\"n\">mod</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString.replace</span> <span class=\"s2\">\"build/lib/\"</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">withExtension</span> <span class=\"s2\">\"lean\"</span>\n</code></pre></div>\n<p>in the past, but I know this does not work for source files from the Lean toolchain.</p>",
        "id": 396231951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697096173
    },
    {
        "content": "<p>This my current attempt (~ 250 loc) to minimize deps to revive the Lean 3 <code>decls</code>in blueprint: <a href=\"https://github.com/utensil/LeanBlueprintExample/blob/main/Exe/Decls.lean\">https://github.com/utensil/LeanBlueprintExample/blob/main/Exe/Decls.lean</a> (as a demonstration of how complicated it is)</p>\n<p>I've combined how things are done in doc-gen4 (now it moves to use lake <code>module:facet</code> which is difficult to strip off) and mathlib4 cache (which manually maps package names to package dirs with some assumptions that's why it can be free of lake deps).</p>\n<p>By lake deps I mean work in a standalone program using lake as a library dependency, it's way harder than writing things in a lakefile .  I'm still fighting lake to get it working, to be free of manual mapping package names to package dirs.</p>\n<p>I wonder why the file name information is not available directly as Lean is already compiling the file, why it gives a DeclarationRange but not a file name, and one has to work it out from module name+lake setup, or work out the source location based on where <code>olean</code> is compiled to by Lake (following a relative path mapping) like <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> did.</p>",
        "id": 396236501,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697098088
    },
    {
        "content": "<p>The correct way is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.initSrcSearchPath#doc\">docs4#Lean.initSrcSearchPath</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.SearchPath.findModuleWithExt#doc\">docs4#Lean.SearchPath.findModuleWithExt</a></p>",
        "id": 396237806,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697098554
    },
    {
        "content": "<p>Maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.SearchPath.findWithExt#doc\">docs#Lean.SearchPath.findWithExt</a> do the trick, but it should not be searching the file again as the file is already in the hand of Lean</p>",
        "id": 396237816,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697098559
    },
    {
        "content": "<p>For a loaded import the corresponding .lean file is <em>not</em> in the hands of Lean yet</p>",
        "id": 396237993,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697098610
    },
    {
        "content": "<p>Ah I see, Lean only has olean <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 396238255,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697098708
    },
    {
        "content": "<p>But how does Lean know <code>DeclarationRange</code>, doesn't it know the file if it knows <code>DeclarationRange</code>?</p>",
        "id": 396238718,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697098892
    },
    {
        "content": "<p>The file path is machine-specific, the location isn't. So we only persist the latter in the .olean.</p>",
        "id": 396248770,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697102385
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/get.20filename.20.2B.20pos/near/396237806\">said</a>:</p>\n<blockquote>\n<p>The correct way is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.initSrcSearchPath#doc\">docs4#Lean.initSrcSearchPath</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.SearchPath.findModuleWithExt#doc\">docs4#Lean.SearchPath.findModuleWithExt</a></p>\n</blockquote>\n<p>Performance-wise, this seems to be good enough as I only need to search once for each package, then cache the mapping. The relative part can be inferred.</p>",
        "id": 396251245,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697103230
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/get.20filename.20.2B.20pos/near/396237806\">said</a>:</p>\n<blockquote>\n<p>The correct way is to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.initSrcSearchPath#doc\">docs4#Lean.initSrcSearchPath</a> + <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.SearchPath.findModuleWithExt#doc\">docs4#Lean.SearchPath.findModuleWithExt</a></p>\n</blockquote>\n<p>The key thing here is that this finds the source file rather than the olean, I assume?</p>",
        "id": 396254226,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697104316
    },
    {
        "content": "<p>The key thing is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.findOLean#doc\">docs#Lean.findOLean</a> (for <code>.olean</code>) and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.SearchPath.findModuleWithExt#doc\">docs4#Lean.SearchPath.findModuleWithExt</a> (for <code>.olean</code> and <code>.lean</code>) both indeed are search which is IO heavy, should not be put into inner loop during processing many files/declarations.</p>",
        "id": 396256220,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697105000
    },
    {
        "content": "<p>The former calls (the variant of ) the latter internally.</p>",
        "id": 396256434,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697105069
    }
]