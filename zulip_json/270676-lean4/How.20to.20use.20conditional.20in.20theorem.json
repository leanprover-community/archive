[
    {
        "content": "<p>I am trying to apply the theorem <code>Nat.div_eq</code> in the form </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_eq</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n</code></pre></div>\n<p>I have terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n<span class=\"n\">d_leq</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>How do I conclude that I have a term <code>val : n / d = (n-d)/d + 1</code>?</p>",
        "id": 383539636,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691656956
    },
    {
        "content": "<p>Probably, use <code>have</code> rather than <code>let</code>.  Then <code>rw [if_pos] at this</code> should create a goal where you can use your two hypothesis.  Maybe...</p>",
        "id": 383540770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691657194
    },
    {
        "content": "<p>I tried something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">con</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_eq</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">d_pos</span><span class=\"o\">,</span> <span class=\"n\">d_leq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">con</span>\n</code></pre></div>\n<p>but it failed: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">equality</span> <span class=\"n\">or</span> <span class=\"n\">iff</span> <span class=\"n\">proof</span> <span class=\"n\">expected</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n<span class=\"n\">dn</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">x</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"n\">d_pos</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span>\n<span class=\"n\">d_leq</span><span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span>\n<span class=\"n\">con</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>Similarly with <code>simp</code> and <code>simp_arith</code>.</p>",
        "id": 383544107,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691657877
    },
    {
        "content": "<p>But did you try <code>rw [if_pos] at con</code>?</p>",
        "id": 383552252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691659535
    },
    {
        "content": "<p>Oh, I see, I did not know <code>if_pos</code> was a thing.  Let me try it.</p>",
        "id": 383556284,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691660355
    },
    {
        "content": "<p><code>if_pos</code> tells Lean to replace the <code>if ... then ... else ...</code> with the <code>then</code> conclusion and a proof of the <code>if</code> clause.</p>",
        "id": 383560349,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691661120
    },
    {
        "content": "<p>No, I cannot understand how to use this theorem, either in term or tactic mode.  In tactic mode, I am trying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">d_leq</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">con</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_eq</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">con</span>\n</code></pre></div>\n<p>but whatever I try after that, I get errors.</p>",
        "id": 383561810,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691661418
    },
    {
        "content": "<p>And I cannot see how to feed the assumptions in term mode.</p>",
        "id": 383561904,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691661435
    },
    {
        "content": "<p>For instance, how would one continue in term mode here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">d_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">d_leq</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"k\">have</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">d_pos</span><span class=\"o\">,</span> <span class=\"n\">d_leq</span><span class=\"o\">⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">con</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.div_eq</span> <span class=\"n\">n</span> <span class=\"n\">d</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">if_pos</span> <span class=\"n\">arg</span>\n</code></pre></div>",
        "id": 383562212,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691661498
    },
    {
        "content": "<p>If you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> I can try.</p>",
        "id": 383564935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691662119
    },
    {
        "content": "<p>Thank you Damiano and Scott, I managed to prove the theorem I wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">pos_of_div</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_eq</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span><span class=\"o\">]</span>\n    <span class=\"n\">repeat</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">calc</span>\n    <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp_arith</span> <span class=\"o\">[</span><span class=\"n\">Nat.zero_le</span><span class=\"o\">]</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span>           <span class=\"o\">:=</span> <span class=\"n\">this.symm</span>\n</code></pre></div>\n<p>I am still not quite sure how <code>if_pos</code> works in term mode, I will experiment and see.</p>",
        "id": 383572121,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1691663448
    },
    {
        "content": "<p>if_pos takes arguments and gives back an equality you can use to rewrite/Eq.subst in term mode.</p>",
        "id": 383574672,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1691664046
    },
    {
        "content": "<p>In this case, you could prove your <code>have</code> as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.div_eq</span> <span class=\"n\">n</span> <span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">if_pos</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n</code></pre></div>\n<p>but I am not sure that this is better than what you have.  Also, assigning a name to a hypothesis you use, improves legibility.</p>",
        "id": 383574758,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691664063
    },
    {
        "content": "<p>(Also, <code>repeat assumption</code> can be replaced by <code>assumption</code>.)</p>",
        "id": 383575142,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691664134
    }
]