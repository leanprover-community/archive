[
    {
        "content": "<p>In the following code,  a call to tactic <code>bar</code> is meant to expand to the same call to <code>foo</code>. But I don't know how to pass the optional syntax. Both variations below fail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">done</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkOptionalNode</span> <span class=\"n\">loc</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 375574239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689434293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <code>$[...]?</code> is used for optional syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375577581,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689435124
    },
    {
        "content": "<p>Thanks a lot. It almost work in my real use case. It fails in the presence of a mysterious <code>&amp;</code> in the original syntax;</p>",
        "id": 375578736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689435471
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"baz\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">done</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">ba</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"baz\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">ba</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375579019,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689435538
    },
    {
        "content": "<p>The syntax for individual tokens is a bit different</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">ba</span><span class=\"o\">:(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"baz\"</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"n\">baz</span><span class=\"bp\">%$</span><span class=\"n\">ba</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 375581940,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689436412
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 375583383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689436848
    },
    {
        "content": "<p>Next I need to remember how to write a macro which expand to several tactic calls, fighting the difference between <code>tactic</code> and <code>tactic_seq</code>.</p>",
        "id": 375587676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689438101
    },
    {
        "content": "<p>Say I want to add <code>done</code> after <code>foo $[baz%$ba]? $[$loc]?</code>, how do I do that?</p>",
        "id": 375587854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689438141
    },
    {
        "content": "<p>You can use parentheses to turn a tactic sequence into a single tactic</p>",
        "id": 375588298,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689438265
    },
    {
        "content": "<p>I knew there was a simple trick but I couldn't remember it. Thanks!</p>",
        "id": 375588460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689438321
    },
    {
        "content": "<p>I hit again the same issue as in July but I can't get the above answer to work. If have a tactic whose definition starts with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:((</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>and I want a macro <code>rwa_ineq</code> with the exact same syntax that call <code>rw_ineq</code> and then <code>assumption</code>. I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">withArg</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>but that doesn't work.</p>\n<p>Full code is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:((</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">withArg</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 400040337,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698972339
    },
    {
        "content": "<p>Here's one way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">withClause</span> <span class=\"o\">:=</span> <span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"n\">withClause</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:(</span><span class=\"n\">withClause</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">:</span><span class=\"n\">location</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">withArg</span><span class=\"o\">]</span><span class=\"bp\">?;</span> <span class=\"n\">assumption</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 400041416,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698972970
    },
    {
        "content": "<p>Here's another:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">tok</span><span class=\"o\">:</span><span class=\"s2\">\"rw_ineq\"</span> <span class=\"n\">rules</span><span class=\"o\">:</span><span class=\"n\">rwRuleSeq</span> <span class=\"n\">loc</span><span class=\"o\">:(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"n\">withArg</span><span class=\"o\">:((</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"rwa_ineq \"</span> <span class=\"n\">rwRuleSeq</span> <span class=\"o\">(</span><span class=\"n\">location</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">Lean.binderIdent</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rwa_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">rw_ineq</span> <span class=\"bp\">$</span><span class=\"n\">rws</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">loc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400041655,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698973086
    },
    {
        "content": "<p>Great, the first solution works (with minor ajustements to the code)! Thanks!</p>",
        "id": 400041896,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698973226
    },
    {
        "content": "<p>I'm still curious to understand why my original code didn't work (and it would be really great to have any of this documented somewhere).</p>",
        "id": 400042080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698973308
    }
]