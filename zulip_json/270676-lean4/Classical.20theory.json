[
    {
        "content": "<p>IIRC in Lean 3 there was a way to declare that one's entire project should be able to use classical reasoning, thus alleviating the pain of writing <code>open classical</code> everywhere. Is there a way to do this in Lean 4?</p>",
        "id": 338419039,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677522708
    },
    {
        "content": "<p>You do not have to <code>open Classical</code> to actual use classical logic, the axioms etc. are just in a namespace named <code>Classical</code> there is no magic afaik.</p>",
        "id": 338419304,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677522760
    },
    {
        "content": "<p>But I think if I don't <code>open Classical</code> I (for example) don't get certain type class instances automatically (e.g. <code>DecidablePred</code> for every predicate).</p>",
        "id": 338419462,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677522807
    },
    {
        "content": "<p>If you do <code>open scoped Classical</code> you get just the instances by the way.</p>",
        "id": 338419758,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677522887
    },
    {
        "content": "<p>I'm not recalling what you're talking about for Lean 3 -- I know about <code>open_locale classical</code> and <code>noncomputable theory</code>, but I'd only ever seen those at the top of a file.</p>",
        "id": 338419910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677522926
    },
    {
        "content": "<p>Yes, I don't think <code>open classical</code> gives any new instances in lean 3, I think it just literally copies stuff into the root namespace</p>",
        "id": 338420060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677522966
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.20theory/near/338420060\">said</a>:</p>\n<blockquote>\n<p>Yes, I don't think <code>open classical</code> gives any new instances</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">p</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">DecidablePred</span> <span class=\"n\">p</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 338420167,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677522998
    },
    {
        "content": "<p>Oh interesting! This was not a thing in Lean 3 AFAIK</p>",
        "id": 338420333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677523056
    },
    {
        "content": "<p>it doesnt work because the Decidable instance is a <code>scoped</code> one so indeed you have to open the scope to get this to work.</p>",
        "id": 338420366,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677523067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.20theory/near/338419910\">said</a>:</p>\n<blockquote>\n<p>I'm not recalling what you're talking about for Lean 3 -- I know about <code>open_locale classical</code> and <code>noncomputable theory</code>, but I'd only ever seen those at the top of a file.</p>\n</blockquote>\n<p>Perhaps I thought that <code>open_locale_classical</code> behaves like <code>open Classical</code> on every file in the project. Does it not?</p>",
        "id": 338420378,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677523071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Classical.20theory/near/338420366\">said</a>:</p>\n<blockquote>\n<p>it doesnt work because the Decidable instance is a <code>scoped</code> one so indeed you have to open the scope to get this to work.</p>\n</blockquote>\n<p>What is the whole <code>scoped</code> thing about?</p>",
        "id": 338420578,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677523129
    },
    {
        "content": "<p><code>scoped</code> instances are basically a replacement for the <code>open_locale</code> mechanism</p>",
        "id": 338420697,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523158
    },
    {
        "content": "<p>uh, its an attribute you can put on things like notation or instances that says \"only make this active if the user has opened the scope\".</p>",
        "id": 338420725,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677523166
    },
    {
        "content": "<p>The way <code>open_locale</code> worked is that you could register actual Lean code to run when you open a \"locale\"</p>",
        "id": 338420875,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523207
    },
    {
        "content": "<p>so for example adding <code>notation</code> or running the <code>attribute</code> command</p>",
        "id": 338420930,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523228
    },
    {
        "content": "<p>Thanks for all this info! I can use it to rephrase my original question <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>: <br>\nIs there a way to open scoped instances from a given namespace for an entire project instead of a single file?</p>",
        "id": 338421178,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677523322
    },
    {
        "content": "<p>I just checked the Lean 3 behavior, and <code>open_locale classical</code> did not work across modules. You had to do it per module.</p>",
        "id": 338421474,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523416
    },
    {
        "content": "<p>Kyle, I think this may have been a semi-recent fix. I recall not long ago that there was some problem with <code>open_locale classical</code> infecting downstream files. (Perhaps I'm misremembering, but I recall it distinctly.)</p>",
        "id": 338421734,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677523495
    },
    {
        "content": "<p>It has been exactly the same as writing this for a couple years:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">classical.prop_decidable</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">eq.decidable</span>\n</code></pre></div>",
        "id": 338421829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523517
    },
    {
        "content": "<p>You might be thinking of the <code>classical</code> tactic infecting later theorems in a file?</p>",
        "id": 338421879,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523537
    },
    {
        "content": "<p>Probably.</p>",
        "id": 338422046,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677523574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> Maybe a more general (and still reasonable) question would be \"is there a way to run some command at the beginning of every module in my project?\"</p>",
        "id": 338422317,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677523645
    },
    {
        "content": "<p>Marcus, I would assume that there is no way to open a scope for an entire project because it would need to go in the lake manifest, but then lake would somehow need to know about the scopes defined in imported projects. But perhaps people other than me have more clever ideas.</p>",
        "id": 338422570,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1677523696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> Actually, it turns out to be easy if you're OK with needing to import something. I just wasn't sure if this was allowed. Create a module containing <code>attribute [instance] Classical.propDecidable</code> and then import it in such a way that every module in your project (transitively) imports it.</p>",
        "id": 338423723,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677524025
    },
    {
        "content": "<p>Doesn't that only affect the current module (contrary to what one might think)? Or was that only for <code>-instance</code>?</p>",
        "id": 338428931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677525459
    },
    {
        "content": "<p>I guess it was contrary to contrary what one might think for me, since I thought it might work just like <code>-instance</code>, but in the test I did it actually carries over to another module.</p>",
        "id": 338429699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677525692
    },
    {
        "content": "<p>I guess that sort of makes sense but really it seems unnecessarily confusing</p>",
        "id": 338436737,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677527690
    },
    {
        "content": "<p>Do we wish to discourage <code>open Classical</code> in Mathlib4 the same way we (usually) discouraged <code>open_locale classical</code> in Mathlib3?</p>",
        "id": 378461968,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690289223
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Parity</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"n\">s.filter</span> <span class=\"n\">Even</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.fullNames</span> <span class=\"n\">true</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">fun s ↦ @Finset.filter</span>\n<span class=\"cm\">  ℕ</span>\n<span class=\"cm\">  (@Even ℕ instAddNat)</span>\n<span class=\"cm\">  (fun a ↦ Classical.propDecidable (@Even ℕ instAddNat a))</span>\n<span class=\"cm\">  s</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 378462127,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690289247
    },
    {
        "content": "<p>shows that definitions will still pick up the <code>Classical</code> instances if <code>open Classical</code> is active and this presumably causes definitional problems later on.</p>",
        "id": 378462398,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1690289293
    },
    {
        "content": "<p>I think <code>open Classical</code> should only ever be allowed in the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Classical</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 378488147,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690293900
    },
    {
        "content": "<p>Why does it pick up the classical instances? Should we decrease their priority?</p>",
        "id": 378490407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690294306
    },
    {
        "content": "<p>History says that this won't work -- lean will eventually find the bad instances somehow. We now have a good understanding of what we should be doing -- decidable assumptions to make theorem statements compile and the (now not broken) <code>classical</code> tactic in proofs.</p>",
        "id": 378522282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690299491
    },
    {
        "content": "<p>Kevin, there's one more missing piece which is using the classical instances in <code>def</code>s still</p>",
        "id": 378522965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690299627
    },
    {
        "content": "<p>Which is ok, but requires either <code>open Classical in</code> beforehand or <code>letI := Classical.dec _</code> or similar inside</p>",
        "id": 378523185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690299667
    }
]