[
    {
        "content": "<p>In the following example, my local notation doesn't work when used in a variable.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">quotPrecheck</span> <span class=\"n\">false</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"Fₙ\"</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fₙ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fₙ</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">a.1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.zero_le</span> <span class=\"c1\">-- uses `sorry`, since the type of `a` contains `sorry`.</span>\n</code></pre></div>\n<p>Is this a known issue? Is there a way to work around this?</p>",
        "id": 403962881,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700830614
    },
    {
        "content": "<p>It is known. I'm on mobile so I can't search, sorry.</p>",
        "id": 403973140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700834475
    },
    {
        "content": "<p>After searching slightly more, I indeed found this previous thread: <a href=\"#narrow/stream/287929-mathlib4/topic/Notation.20introduces.20sorry\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Notation.20introduces.20sorry</a></p>",
        "id": 403973499,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700834571
    },
    {
        "content": "<p>So in summary: a workaround is to use <code>set_option hygiene false</code>.</p>",
        "id": 403974249,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700834859
    },
    {
        "content": "<p>Would <code>notation3</code> work here?</p>",
        "id": 403985964,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1700839358
    },
    {
        "content": "<p><code>notation3</code> has the same behavior</p>",
        "id": 403988228,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700840268
    },
    {
        "content": "<p>By the way Floris, I learned this solution from <a href=\"#narrow/stream/270676-lean4/topic/A.20quirk.20with.20.60local.20notation.60/near/366150389\">someone also called Floris</a>.  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 403997244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700844586
    }
]