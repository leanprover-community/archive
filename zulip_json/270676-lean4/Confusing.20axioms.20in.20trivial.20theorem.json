[
    {
        "content": "<p>I would like to use the following assertion in my work (bare lean 4, no libraries):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Unfortunately, the assertion depends on a bizarre list of axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">mwe</span>\n\n<span class=\"bp\">'</span><span class=\"n\">mwe'</span> <span class=\"n\">depends</span> <span class=\"n\">on</span> <span class=\"kd\">axioms</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">Classical.choice</span><span class=\"o\">,</span> <span class=\"n\">Quot.sound</span><span class=\"o\">,</span> <span class=\"n\">propext</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>The <code>rfl</code> is not the problem, any proof I give of this depends on <code>Classical.choice</code> and<code> Quot.sound</code>.  Why is this, and is there a way to work with lists that avoids these axioms?</p>",
        "id": 390591263,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694550445
    },
    {
        "content": "<p>Guess: Those axioms come from the <code>l[0]</code> notation.</p>",
        "id": 390591415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694550504
    },
    {
        "content": "<p>I don't see anything bizarre in that list of axioms.</p>",
        "id": 390591757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694550645
    },
    {
        "content": "<p>I don't know the answer to your question but I do know that Lean doesn't really make an attempt to support non-classical arguments and this won't be the first time you'll run into this sort of thing. There are various tactics which use classical axioms too (probably when they don't need to but it just makes things easier). In his recent type theory podcast Leo argues that constructivism is hard to support and he has not seen an impactful project which is blocked by this design decision to be classical.</p>",
        "id": 390591802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694550666
    },
    {
        "content": "<p>Interesting, if you import <code>Mathlib.Data.Nat.Basic</code> then it only depends on <code>propext</code>. I think Yaël is right that it's the <code>l[0]</code> notation.</p>",
        "id": 390591917,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694550722
    },
    {
        "content": "<p>Reading the proof term, I <em>think</em> it's that <code>simp</code> is being run with <code>arith := true</code> to discharge the <code>0 &lt; List.length (l :: ls)</code> goal (and I'm inferring that it uses <code>Classical.choice</code>), but if you import enough mathlib then <code>simp</code> can handle the goal without making use of that option.</p>",
        "id": 390592255,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694550850
    },
    {
        "content": "<p>yes, the basic theorems used in the <code>simp_arith</code> decision procedure have an unnecessary use of choice due to... <a href=\"https://github.com/leanprover/lean4/issues/2414\"><code>split</code></a></p>",
        "id": 390592444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694550941
    },
    {
        "content": "<p>Indeed, using <code>Nat.zero_lt_succ _</code> explicitly eliminates the axioms.</p>",
        "id": 390592646,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694551022
    },
    {
        "content": "<p>Here's the syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(If you have it, use <code>haveI</code> to prevent a <code>let_fun</code> in the term)</p>\n<p>This works too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mwe</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">::</span> <span class=\"n\">ls</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 390592711,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694551058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390591802\">said</a>:</p>\n<blockquote>\n<p>In his recent type theory podcast Leo argues that constructivism is hard to support and he has not seen an impactful project which is blocked by this design decision to be classical.</p>\n</blockquote>\n<p>Of course, such a project will never be attempted if the stumbling block is <code>l[0]</code>, so this is a self-fulfilling prophecy.</p>\n<p>More importantly, I believe it is worth pursuing proofs with the weakest hypotheses that are \"reasonable\", both for the elegance/insight this can provide as well as the extensibility of  the result.  For example, someone may want to try weakening choice in a theorem to dependent or countable choice.  What is reasonable is debatable, but to me it seems reasonable for list access to <em>not</em> depend on the axiom of choice.</p>",
        "id": 390593133,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694551278
    },
    {
        "content": "<p>Lean is extensible enough that you can modify what tactics are used to handle indexing goals; see the <code>get_elem_tactic</code> tactic in core Lean</p>",
        "id": 390593756,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694551541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390593133\">said</a>:</p>\n<blockquote>\n<p>Of course, such a project will never be attempted if the stumbling block is <code>l[0]</code>, so this is a self-fulfilling prophecy.</p>\n</blockquote>\n<p>I take it you're meaning that <code>l[0]</code> seems very basic. But, it hides the fact that it's actually running a tactic to prove the index is within bounds for you. A less-fancy pre-Lean-4 version of this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=List.head#doc\">docs#List.head</a>, where you have to give a nonemptiness proof yourself.</p>",
        "id": 390595343,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694552234
    },
    {
        "content": "<p>you can just use <code>l[0]'_</code> if you want to provide the proof explicitly</p>",
        "id": 390595520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694552304
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That's a few messages up)</p>",
        "id": 390595976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694552479
    },
    {
        "content": "<p>but I agree with the thrust of <span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> 's argument, there are a bunch of things I could do to grow the choice free part of lean but which is blocked on stupid stuff in core. It's not just that lean doesn't care about constructivity, it is becoming more aggressively anti-intuitionistic over time</p>",
        "id": 390596043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694552500
    },
    {
        "content": "<p>to the point where a really simple proof fix to avoid a use of choice will end up with a long discussion and no progress, followed by a complaint that it takes up too much time of the maintainers and where are the big impactful projects?</p>",
        "id": 390596266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694552570
    },
    {
        "content": "<p>they say a journey of a thousand miles begins with a single step but if you can't take a step then no journeys will be happening</p>",
        "id": 390596502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694552654
    },
    {
        "content": "<p>I think the point is exactly that Leo doesn't want to travel a thousand miles in this direction. Hence he refuses to take the first step.</p>",
        "id": 390596959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694552840
    },
    {
        "content": "<p>My impression from the podcast was that he currently can't see where the interesting place is 1000 miles in that direction. This certainly aligns with my experience as a mathematician, where I was taught as an undergraduate that  Hilbert and Brouwer had a disagreement, Hilbert won, and that was the end of it. I have since come to realise that this is not the message being taught in computer science departments but in Leo's podcast he seems to be arguing that a lot of program verification can also be done classically as well, which I had not appreciated. Leo seems to be good at making hard decisions about what and what not to support, for example he dropped univalence when moving to lean 3 and now seems to be dropping constructivism when moving to lean 4. There are plenty of communities using the other provers who are interested in these more exotic (at least to me) logics but I guess you have to choose your battles and like it or not this seems to be what Leo has chosen.</p>",
        "id": 390598893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694553722
    },
    {
        "content": "<p>I think the discussion at <a href=\"https://github.com/leanprover-community/mathlib4/pull/2414\">#2414</a> has gotten rather muddied <a href=\"https://github.com/leanprover/lean4/issues/2414#issuecomment-1685144843\">from here on</a> about the difference between <code>noncomputable</code> and \"uses <code>classical.choice</code>\", which certainly doesn't help the prospects for that RFC</p>",
        "id": 390601068,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694554801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390596959\">said</a>:</p>\n<blockquote>\n<p>I think the point is exactly that Leo doesn't want to travel a thousand miles in this direction. Hence he refuses to take the first step.</p>\n</blockquote>\n<p>Mario's argument as I understand is that Leo it only has to travel at most 3 steps (the first of which has already been carefully planned), and then the other 1000 miles are Mario's problem</p>",
        "id": 390601167,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694554836
    },
    {
        "content": "<p>To be clear, I won't be going 1000 miles either. I'll probably go 1 mile and help others gearing up for the long haul</p>",
        "id": 390601290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694554913
    },
    {
        "content": "<p>One thing to consider is that constructivist users might be more likely to be converted by attempting the long haul and finding it too hard to be worth the effort, than they are by being told \"no we refuse to allow constructivism on principle\"</p>",
        "id": 390601927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694555253
    },
    {
        "content": "<p>I really like to be able to sell lean as the proof assistant that you can use to do anything as long as you put enough time and effort into it. The only thing between you and your goals is... you. That's a really great feeling to have, very freeing, and lean4 does a really great job of it. I see this constructivism business as being in the same category: if I see a pilgrim walking to mecca I might give some pointers but ultimately the trek is up to them. But standing in their way just because I'm not a muslim is not very nice</p>",
        "id": 390602335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694555433
    },
    {
        "content": "<p>It's one of the reasons that Lean stood out to me when I was first learning it - the focus on constructivism felt refreshing after being exposed to classical mathematics for the rest of my life.</p>",
        "id": 390604008,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1694556215
    },
    {
        "content": "<p>What focus on constructivism? Classical logic is already introduced almost at the very beginning: <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html?highlight=classical#classical-logic\">https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html?highlight=classical#classical-logic</a></p>",
        "id": 390605294,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694556809
    },
    {
        "content": "<p>well, the very fact that \"classical logic\" is introduced by this name, at the end as a separate category, after introducing a fully working basis for intuitionistic logic, contributes to this impression</p>",
        "id": 390605554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694556918
    },
    {
        "content": "<p>In actual classical logic texts it's three axioms + modus ponens and you are off to the races</p>",
        "id": 390605681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694556964
    },
    {
        "content": "<p>One of them is vaguely responsible for LEM but if you get rid of it you end up with a really weak implicational calculus, not intuitionistic logic</p>",
        "id": 390605749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694557004
    },
    {
        "content": "<p>or for example <code>/\\</code> and <code>\\/</code> will be definitions like <code>p /\\ q := ~(p -&gt; ~q)</code>, without even considering a standalone axiomatization for them - why would you? it's a waste of axioms when a definition will do fine</p>",
        "id": 390605990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694557133
    },
    {
        "content": "<p>For the record, I am not a constructivist, nor am I aiming for constructive proofs of various theorems.  I do care for using the weakest hypotheses I can reasonably work with to prove stuff; I see this as providing a service to people who want to use and extend my results (which includes my future self).</p>\n<p>And I believe that the simpler, more widely used, and more fundamental a result is (e.g. propositions in core), the more important it is to eliminate dependence on extraneous hypotheses, so that more people can use it, more easily and in more contexts.</p>",
        "id": 390606911,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694557523
    },
    {
        "content": "<p>Incidentally, the project <a href=\"https://github.com/leanprover-community/iris-lean\">https://github.com/leanprover-community/iris-lean</a> I've been working on is an implementation of a separation logic framework with a bunch of nice tactics for manipulating the logic, and the embedded logic is essentially intuitionistic, and this is important because it has actual models (in fact, proofs in the logic really are proofs about a class of models) which are anti-classical. This isn't topoi, but you see a lot of similar discussion there: inside some internal language you really have to be intuitionistic because the classical axioms just don't hold in all models under consideration.</p>",
        "id": 390607562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694557883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"492774\">Sky Wilshaw</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390604008\">said</a>:</p>\n<blockquote>\n<p>the focus on constructivism</p>\n</blockquote>\n<p>I meant in Lean's type theory, not mathlib.</p>",
        "id": 390621463,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1694566179
    },
    {
        "content": "<p>I would also like to see <code>Classical.choice</code> avoided in the most basic tactics such as <code>split</code>.<br>\n<code>simp</code> is relatively insignificant.</p>",
        "id": 390643914,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694579320
    },
    {
        "content": "<p>The argument for better support for non-classical logic being presented here seems to be \"then we can do more\". But it was already explained very early on in this thread how to do all the things that Ioannis wants to do in lean already without any changes to core, so this argument is incorrect. They have to avoid certain idioms -- but this is normal in the prover world if people want to use exotic logics. Look at how Voevodsky used Coq to do univalent mathematics, for example.</p>",
        "id": 390654690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694585912
    },
    {
        "content": "<p>In particular the design decision is \"everything is so configurable that you can do whatever you like\". Don't like core <code>split</code>? Then just don't use it.</p>",
        "id": 390655569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694586445
    },
    {
        "content": "<p>EDIT: I had written something wrong!</p>",
        "id": 390656371,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694586805
    },
    {
        "content": "<p>I would urge anyone who thinks that it's just a case of \"change core and all the problems go away\" to read Leo's detailed responses at <a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a> and then think about things from his point of view. Leo says that if he changes core then it won't solve the problem, there will still be cases where <code>split</code> works in a way not desirable to people working in exotic logics and who will still be arguing for more changes. Leo doesn't want this on his plate, he feels that the users can solve this themselves and he wants to make it their problem not his. If you are the lead dev in a project then sometimes you have to make hard decisions and this is a very good example.</p>",
        "id": 390656829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694587041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390598893\">said</a>:</p>\n<blockquote>\n<p>I have since come to realise that this is not the message being taught in computer science departments</p>\n</blockquote>\n<p>Since this keeps coming up: Constructivism wasn't mentioned in our computer science department. I believe most CS people don't know what constructivism is and that it's mostly folks who are adjacent to theorem provers and related topics like logic and formal methods who are aware of it.</p>",
        "id": 390656865,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1694587064
    },
    {
        "content": "<p>Though from the people I've talked to, the automated formal methods people at our university didn't really seem to know much about it, either.</p>",
        "id": 390657433,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1694587364
    },
    {
        "content": "<p>My impression from listening to the podcast is that lean 3 taught Leo the very important lesson that you cannot please all of the people all of the time and I think Mario's post above is an attempt to argue that this change to split will have this effect. Leo's response is that it won't work and there will still be people who are not pleased. Changing split now will come back to bite him later when people want him to change it again, observing that he's changed it once already so it's not unreasonable to change it more.</p>",
        "id": 390658238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694587802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390655569\">said</a>:</p>\n<blockquote>\n<p>In particular the design decision is \"everything is so configurable that you can do whatever you like\". Don't like core <code>split</code>? Then just don't use it.</p>\n</blockquote>\n<p>This is what Mario did with <code>by_cases</code> in Std4. But if possible, we all don't like to duplicate or replace tactics. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390656829\">said</a>:</p>\n<blockquote>\n<p>I would urge anyone who thinks that it's just a case of \"change core and all the problems go away\" to read Leo's detailed responses at <a href=\"https://github.com/leanprover/lean4/pull/2414\">lean4#2414</a> and then think about things from his point of view. Leo says that if he changes core then it won't solve the problem, there will still be cases where <code>split</code> works in a way not desirable to people working in exotic logics and who will still be arguing for more changes. Leo doesn't want this on his plate, he feels that the users can solve this themselves and he wants to make it their problem not his. If you are the lead dev in a project then sometimes you have to make hard decisions and this is a very good example.</p>\n</blockquote>\n<p>I believe the new tactic is still much better than the original for these people, at least this tactic works for them now. Also, it would not disrupt its normal function.</p>\n<p>I don't strongly want that PR to be merged. It's understandable not to merge it. But I also don't think that's bad.</p>",
        "id": 390660958,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694589017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390656829\">said</a>:</p>\n<blockquote>\n<p>Leo says that if he changes core then it won't solve the problem, there will still be cases where <code>split</code> works in a way not desirable to people working in exotic logics and who will still be arguing for more changes.</p>\n</blockquote>\n<p>The proposed change makes <code>split</code> behave the same way as <code>split_ifs</code> did in Lean 3, which I don't recall anyone ever complaining about.</p>\n<blockquote>\n<p>he feels that the users can solve this themselves and he wants to make it their problem not his.</p>\n</blockquote>\n<p>If Mario decides to \"solve this themselves\", this means throwing out the entire <code>split</code> and <code>simp</code> tactics and writing them again from scratch in Std4, which is obviously an even worse outcome!</p>",
        "id": 390662818,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694589771
    },
    {
        "content": "<p>Not for Leo!</p>",
        "id": 390663685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694590175
    },
    {
        "content": "<p>If Mario wants to take on the mantle of person who pleases all of the people all of the time then I'm sure everyone will be fine with that, until Mario also realises that it's not possible.</p>",
        "id": 390663902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694590261
    },
    {
        "content": "<p>Leo's argument is that rewriting split and simp does not solve the problem, it just means that people continue to complain but now have evidence that you'll buckle. This is exactly where Leo doesn't want to be.</p>",
        "id": 390664104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694590357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390662818\">said</a>:</p>\n<blockquote>\n<p>which is obviously an even worse outcome!</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390663685\">said</a>:</p>\n<blockquote>\n<p>Not for Leo!</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2412#issuecomment-1680843762\">this message from Leo to Mario</a> suggests otherwise:</p>\n<blockquote>\n<p>That said, I must express my disappointment regarding your consideration to duplicate simp and split in Std. I entrusted you with the responsibility of maintaining Std due to your expertise and dedication, and you have indeed done a commendable job. Duplicating such significant components can lead to fragmentation, causing confusion and inconsistencies for our users. Our shared goal is to ensure that Lean and Std offer a coherent and seamless experience. Let's work together to avoid such divergences.</p>\n</blockquote>",
        "id": 390665540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694590968
    },
    {
        "content": "<p>Yes, I stand corrected. It looks like a more accurate summary of the situation is simply then that it is very difficult to please all of the people all of the time :-(</p>",
        "id": 390676338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694595016
    },
    {
        "content": "<p>Perhaps the answer then is to develop a new repo where non-classical versions of these tactics are maintained. This provides a focus point where people interested in non-classical logics can develop the things they want to see in Lean (this is what Voevodsky did for example, he didn't ask for changes in Coq, he just used Coq in a new way with his univalence library, and it's what Gabriel did with univalence in Lean 3).</p>",
        "id": 390677371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694595394
    },
    {
        "content": "<blockquote>\n<p>Perhaps the answer then is to develop a new repo where non-classical versions of these tactics are maintained.</p>\n</blockquote>\n<p>Making a new repo with the entire tactics (and all their dependencies: other tactics built on top of them and lemmas proved with them) duplicated is a lot more work than someone deciding to maintain a fork of Lean4 with 9 lines added; but this is exactly the type of community-fragmenting behavior that Leo didn't want.</p>",
        "id": 390685918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694598532
    },
    {
        "content": "<p>Which is to say; I think our current stance is effectively just to tell these users to go away and use some other system.</p>",
        "id": 390687683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694599123
    },
    {
        "content": "<p>I think that \"sometimes we have to tell some potential users to go and use some other system\" is an unfortunate consequence of \"you can't please all of the people all of the time\", a fact which is very hard to get around despite Mario's optimism. Leo is not afraid to tell some people that he cannot afford to suppor them -- for example this is what he told all the univalent users at the 2/3 switch, and I know there was great disappointment from some people at that time. The goal of the project is not to please all of the people all of the time, it seems to be far more focussed now on enabling big impactful projects, which is a far more pragmatic goal for a system such as Lean. For example I have had far more positive feedback from Leo when discussing a possible formalisation of a proof of Fermat's Last Theorem.</p>",
        "id": 390688662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694599473
    },
    {
        "content": "<p>This has been a very interesting debate. </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusing.20axioms.20in.20trivial.20theorem/near/390598893\">said</a>:</p>\n<blockquote>\n<p>This certainly aligns with my experience as a mathematician, where I was taught as an undergraduate that  Hilbert and Brouwer had a disagreement, Hilbert won, and that was the end of it. </p>\n</blockquote>\n<p>In my current practice, I agree with this (but beware! I'm a logician).</p>\n<p>Going kinda orthogonally to Lean's foundations, for me it makes a difference whether we are talking about LEM or AC. I always assume LEM, but there is  some significant math a few miles in the direction of LEM + ¬AC (plus countable choice, for instance). Namely, there are translations of sorts between statements in the lines of \"¬AC + Every set of reals is Lebesgue measurable\" and \"AC + Every <em>definable</em> set is Lebesgue measurable\" (an instance of \"definable\" is given by the  <a href=\"https://en.wikipedia.org/wiki/Projective_hierarchy\">projective sets</a>). This is the content of Theorem 2 in this <a href=\"https://doi.org/10.2307/1970696\">paper</a> by Solovay.</p>",
        "id": 390707199,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1694606353
    },
    {
        "content": "<p>For me, it's not about pleasing everyone. It's just providing a convenience that isn't hard to do and will not annoy other people. We do not support univalence because we do need something against it. It is far more difficult to support than this PR.</p>",
        "id": 390707285,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1694606392
    }
]