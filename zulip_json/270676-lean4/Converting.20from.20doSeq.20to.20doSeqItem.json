[
    {
        "content": "<p>Is there a better way to write the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doSeqToItem</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadRef</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadQuotation</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeqItem</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doSeqItem</span><span class=\"bp\">|</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">trivial</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402205324,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700046242
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">doSeqToItem</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadRef</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadQuotation</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeqItem</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doSeqItem</span><span class=\"bp\">|</span> <span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402206284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046576
    },
    {
        "content": "<p>you'd think this starts a new <code>do</code> scope, but it doesn't</p>",
        "id": 402206334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046595
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n    <span class=\"n\">pure</span> <span class=\"mi\">10</span>\n  <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"o\">(</span><span class=\"k\">do</span>\n        <span class=\"n\">return</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">pure</span> <span class=\"mi\">0</span>\n    <span class=\"n\">pure</span> <span class=\"mi\">10</span>\n  <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 402206758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700046746
    },
    {
        "content": "<p>And a follow up question, how do I go from a  <code>TSyntax `doElem</code>  to a <code>TSyntax `Lean.Parser.Term.doSeq : Type</code>?</p>",
        "id": 402208545,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700047250
    },
    {
        "content": "<p>(and why is it a fake<code> `doElem </code> name and not a real declaration unlike <code>doSeq</code>?)</p>",
        "id": 402209373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700047464
    },
    {
        "content": "<p><code>doElem</code> and a few others like <code>term</code> use unqualified names for the syntax kind, I think this is an outdated style and we would prefer they are all declarations but for now there are fake declarations like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Category.term#src\">src#Lean.Parser.Category.term</a> for hanging the docs for these</p>",
        "id": 402209823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047588
    },
    {
        "content": "<p>what they have in common is these are all extensible syntax categories, not individual definitions</p>",
        "id": 402210401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047730
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doElemToSeq</span> <span class=\"o\">{</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadRef</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadQuotation</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">doElem</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">``</span><span class=\"n\">doSeq</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doSeq</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">doElem</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402210775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700047823
    },
    {
        "content": "<p>It's not entirely clear to me what the difference between <code>doSeqItem</code> and <code>doElem</code> is</p>",
        "id": 402211352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700047978
    },
    {
        "content": "<p>not much:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doSeqItem</span>      <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"n\">ppLine</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">doElemParser</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optional</span> <span class=\"s2\">\"; \"</span>\n</code></pre></div>",
        "id": 402211644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700048051
    },
    {
        "content": "<p>Thanks! The context here is <a href=\"https://github.com/leanprover-community/quote4/pull/27\">https://github.com/leanprover-community/quote4/pull/27</a>, where <code>return</code> is misbehaving</p>",
        "id": 402218486,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700049778
    },
    {
        "content": "<p>oh that's right, quote4 had this horrible hack with <code>comefrom</code> being laundered through <code>assert!</code> to work around the fact that <code>do</code> elaboration is not extensible</p>",
        "id": 402220865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050361
    },
    {
        "content": "<p>To me it looks like <code>comefrom</code> is just an optimization</p>",
        "id": 402220975,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050389
    },
    {
        "content": "<p>(in order to avoid duplicating a match alternative</p>",
        "id": 402221040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050407
    },
    {
        "content": "<p>this line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">doSeq</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">body</span><span class=\"o\">))</span> <span class=\"n\">expectedType</span>\n</code></pre></div>\n<p>is adding a new <code>do</code> scope</p>",
        "id": 402221134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050431
    },
    {
        "content": "<p>possibly on purpose?</p>",
        "id": 402221162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050440
    },
    {
        "content": "<p>no that's definitely the bug, although maybe it's not clear how to elaborate that in the context of the outer do block</p>",
        "id": 402221944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050626
    },
    {
        "content": "<p>I assume you saw that my PR deleted those lines already?</p>",
        "id": 402222016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050646
    },
    {
        "content": "<p>can you explain what the new version is doing by example?</p>",
        "id": 402222394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050756
    },
    {
        "content": "<p>Its directly substituting the alternations as syntax, rather than trying to declare them as <code>let</code>s and resume them</p>",
        "id": 402222575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050800
    },
    {
        "content": "<p>I think the problem is that <code>_qq_match</code> is handling the alternation itsel</p>",
        "id": 402222683,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050816
    },
    {
        "content": "<p>does this involve duplicating syntax?</p>",
        "id": 402222967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050895
    },
    {
        "content": "<p>Yes, it does. Is that bad for other reasons?</p>",
        "id": 402223008,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050910
    },
    {
        "content": "<p>it involves duplicating it in a loop, no less</p>",
        "id": 402223326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050986
    },
    {
        "content": "<p>I think I understand a way to avoid doing that (build an <code>Option</code> of a sigma type, and ultimately do the final match on that), but it might be a larger refactor than I have time for today</p>",
        "id": 402223351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700050992
    },
    {
        "content": "<p>this seems like it would explode exponentially</p>",
        "id": 402223368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700050997
    },
    {
        "content": "<p>The usual technique used for the <code>do</code> elaborator is to capture the remainder of the block into a closure and jump to it under certain circumstances</p>",
        "id": 402223618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700051054
    },
    {
        "content": "<p>I think that's what the <code>comefrom</code> stuff was about</p>",
        "id": 402223649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700051063
    },
    {
        "content": "<p>But that's not an option because it interferes with the real do notation</p>",
        "id": 402223692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700051081
    },
    {
        "content": "<p>I think the solution here is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">alt</span>\n</code></pre></div>\n<p>should be a macro for</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">match_eq</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span><span class=\"n\">do_q_match</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">alt</span>\n</code></pre></div>",
        "id": 402223969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700051158
    },
    {
        "content": "<p>what's the <code>match_eq</code> part about?</p>",
        "id": 402225149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700051434
    },
    {
        "content": "<p>Well, actually rather than doing two macro expansions I would just suggest building both the <code>⟨x, y⟩</code> pattern and the expression to go in for <code>do_q_match ~q(f $x $y) e</code> in a single go</p>",
        "id": 402225566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700051534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Converting.20from.20doSeq.20to.20doSeqItem/near/402225149\">said</a>:</p>\n<blockquote>\n<p>what's the <code>match_eq</code> part about?</p>\n</blockquote>\n<p>It contains the <code>$e =Q f $x $y</code> term</p>",
        "id": 402227520,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700052019
    }
]