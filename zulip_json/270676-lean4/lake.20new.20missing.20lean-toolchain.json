[
    {
        "content": "<p>I would like to test this change, but I'm not good enough at wrestling lake. I tried <code>lake  +leanprover/lean4-pr-releases:pr-release-2393 new endproof math</code> by imitation. But this creates a folder with no <code>lean-toolchain</code> file, no manifest, no <code>lake-packages</code>. I tried creating a <code>lean-toolchain</code> file, ran <code>lake update</code> but then the mathlib lean-toolchain is incompatible. Is there a way to have this working? Or should I test this without mathlib?</p>",
        "id": 389457952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694014764
    },
    {
        "content": "<p>Yes, testing without mathlib might be the simplest option. I didn't check whether we had already accumulated breaking changes compared to mathlib master's toolchain.</p>",
        "id": 389470386,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694016750
    },
    {
        "content": "<p>Removing <code>math</code> from the lake invocation doesn fix the missing <code>lean-toolchain bug</code>. Running <code>lake  +leanprover/lean4-pr-releases:pr-release-2393 new endproof</code> produces a <code>endproof</code> folder without a <code>lean-toolchain</code> file.</p>",
        "id": 389543075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694049999
    },
    {
        "content": "<p>I see the same thing. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>?</p>",
        "id": 389543743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694050339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Does the PR release set the <code>Lean.toolchain</code>?</p>",
        "id": 389543872,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694050441
    },
    {
        "content": "<p>There would also then to be a mathlib cache for said toolchain.</p>",
        "id": 389544281,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694050584
    },
    {
        "content": "<p>No, it doesn't. I will work on fixing that. I had assumed in this case that the explicit toolchain in the <code>lake +xyz</code> invocation would do something!</p>",
        "id": 389544713,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694050803
    },
    {
        "content": "<p>Can <code>lake new</code> print a big helpful warning message if it decides not to create a <code>lean-toolchain</code>, rather than silently giving you an unusable project?</p>",
        "id": 389544791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694050842
    },
    {
        "content": "<p>Setting <code>Lean.toolchain</code> in PR releases does not look like a good idea. e.g. in <code>src/Init/Meta.lean</code> you can see that the <code>toolchain</code> is either going to be empty or to start with <code>leanprover/lean4</code>. Changing this would require gross plumbing that modifies the PR build process.</p>\n<p>Can't <code>lake +xyz</code> just automatically use <code>xyz</code> as the toolchain? It seems like the natural behaviour.</p>",
        "id": 389545793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694051395
    },
    {
        "content": "<p>Unfortunately that <code>+xyz</code> is handled by elan, Lake has no idea about it</p>",
        "id": 389588326,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694071233
    },
    {
        "content": "<p>There's an issue tracking this now, <a href=\"https://github.com/leanprover/lean4/pull/2518\">lean4#2518</a>.</p>",
        "id": 389591199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694072223
    },
    {
        "content": "<p>There Mac suggested that elan could set an environment variable so the <code>+toolchain</code> information could be picked up.</p>",
        "id": 389591437,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694072293
    }
]