[
    {
        "content": "<p>I was trying to keep universes sorted in some kind of order, but was really scratching my head about where a <code>max u1 u2</code> was coming from in my terms, because u1 and u2 never appeared together without a bunch of other universes. I've minimised it to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.ConcreteCategory.Basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u₂</span> <span class=\"n\">v₁</span> <span class=\"n\">u₁</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"n\">u₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"k\">#check</span> <span class=\"n\">P</span> <span class=\"c1\">-- P : CategoryTheory.Functor.{0, max (max u₁ u₂) v₁, 0, max (max (u₁ + 1) (u₂ + 1)) (v₁ + 1)}...</span>\n<span class=\"c1\">--                                         ^^^^^^^^^^^^^^^^^^</span>\n\n<span class=\"c1\">-- Why the heck not `max (max u₁ v₁) u₂`?</span>\n\n<span class=\"k\">#check</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"n\">u₂</span> <span class=\"c1\">-- ((max (max u₁ v₁) u₂) + 1) as expected</span>\n</code></pre></div>\n<p>which really surprises me. Lean is applying random theorems about max universes like associativity or commutativity or something, without even mentioning it, at a kind of random time.</p>",
        "id": 371308604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688160649
    },
    {
        "content": "<p>Yes, Lean sorts the arguments to max.</p>",
        "id": 371308691,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688160685
    },
    {
        "content": "<p>(Sometimes.)</p>",
        "id": 371308708,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688160690
    },
    {
        "content": "<p>Does it sort arguments of the form <code>max b c a</code> sometimes too?</p>",
        "id": 371308797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688160719
    },
    {
        "content": "<p>I wasn't sure whether to try and manipulate things this way, or whether I should do what Adam suggested and give up and hope that lean 4 comes up with better universe unification algorithms.</p>",
        "id": 371308954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688160758
    },
    {
        "content": "<p>There's only a binary max under the hood.</p>",
        "id": 371308960,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688160762
    },
    {
        "content": "<p>I don't think that changing <code>max u v w</code> to <code>max (max u w) v</code> will have any observable effect right now.  The only workaround we have that works is <code>TypeMax</code>.</p>",
        "id": 371309141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688160834
    },
    {
        "content": "<p>I've found that Lean is actually quite good at unifying things like <code>max (max a b) (max a+1 c)</code> = <code>max b c (a+1)</code>, it's just that it fails the moment anything is a <code>?u</code>.</p>",
        "id": 371309171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1688160843
    },
    {
        "content": "<p>This is a great summary of the current situation with universe unification.</p>",
        "id": 371309261,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1688160868
    }
]