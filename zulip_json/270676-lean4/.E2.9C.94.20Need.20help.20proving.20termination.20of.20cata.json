[
    {
        "content": "<p>I'm new to Lean so hopefully this is easy. I have two type-specific fold/catamorphism implementations, <code>cata</code> and <code>cata'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ExprF</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">pow</span>  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ExprF.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ExprF</span> <span class=\"n\">β</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">n</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cata</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"o\">(</span><span class=\"n\">ExprF.zero</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"n\">ExprF.zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"o\">(</span><span class=\"n\">ExprF.succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">$</span> <span class=\"n\">ExprF.succ</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"o\">(</span><span class=\"n\">ExprF.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">$</span> <span class=\"n\">ExprF.add</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"o\">(</span><span class=\"n\">ExprF.mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">$</span> <span class=\"n\">ExprF.mul</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"o\">(</span><span class=\"n\">ExprF.pow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">$</span> <span class=\"n\">ExprF.pow</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cata'</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">$</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"n\">cata'</span> <span class=\"n\">alg</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The termination checker is happy with the more explicit <code>cata</code>, but <code>cata'</code>, which uses the auxiliary <code>ExprF.map</code> function, gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>fail to show termination for\n  cata'\nwith errors\nstructural recursion cannot be used\n\nfailed to prove termination, use `termination_by` to specify a well-founded relation\n</code></pre></div>\n<p>I looked at the docs and some examples using <code>termination_by</code> and <code>decreasing_by</code> but nothing I've tried has appeased it.</p>\n<p>What is the most idiomatic way to make this work? </p>\n<p>Also, is it possible to generalize this to work for any <code>Functor</code>, <a href=\"https://wiki.haskell.org/Catamorphisms#Haskell_Implementation\">like we can do in Haskell</a>?</p>\n<p>Thank you!</p>",
        "id": 364284371,
        "sender_full_name": "Geoffrey Churchill",
        "timestamp": 1686145536
    },
    {
        "content": "<p>This won't work with an arbitrary functor.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span>\n<span class=\"bp\">|</span> <span class=\"n\">inj</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span>\n</code></pre></div>\n<p>Gives the error: <code>(kernel) arg #2 of 'Expr.inj' contains a non valid occurrence of the datatypes being declared</code>. This is because the occurrence of <code>Expr</code> in <code>Expr.inj</code> is not positive. Thus Lean can't verify that this is a safe inductive definition.</p>\n<p>The reason why your <code>Expr</code> still works is that the functor <code>ExprF</code> is defined inductively. This allows Lean to unravel the definition of <code>ExprF</code> and see that the occurrences of <code>Expr</code> are all positive in the unraveled definition. This can be seen by looking at the recursor for <code>Expr</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recursor</span> <span class=\"n\">Expr.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">motive_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n  <span class=\"o\">{</span><span class=\"n\">motive_2</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span>\n    <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"o\">(</span><span class=\"n\">Expr.inj</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n      <span class=\"n\">motive_2</span> <span class=\"n\">ExprF.zero</span> <span class=\"bp\">→</span>\n        <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"o\">(</span><span class=\"n\">ExprF.succ</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n          <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"o\">(</span><span class=\"n\">ExprF.add</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n            <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"o\">(</span><span class=\"n\">ExprF.mul</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n              <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">a_1</span> <span class=\"bp\">→</span> <span class=\"n\">motive_2</span> <span class=\"o\">(</span><span class=\"n\">ExprF.pow</span> <span class=\"n\">a</span> <span class=\"n\">a_1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive_1</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>You see that Lean expects recursive definitions using <code>Expr</code> to be unraveled. In other words, your definition <code>cata</code> is actually the right one for Lean.</p>\n<p>PS: You can circumvent the restriction to safe inductive definitions using the <code>unsafe</code> keyword. If you're absolutely sure your inductive is actually safe, you can then create a wrapper for it to use it in safe code. (This is tricky and there are inevitable costs.)</p>",
        "id": 364365827,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1686162832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> Thank you for the detailed explanation. I'm not yet able to make much sense of the recursor, but I guess the appearance of each of the constructors is what is relevant.</p>\n<p>My other question was how I can get started proving termination of <code>cata'</code>, which differs from <code>cata</code> only in that it defers the explicit constructor matching to <code>ExprF.map</code> rather than inlining it. Do you know how I might approach this? Or if there are any similar examples I could pattern match on? Thank you.</p>",
        "id": 364370348,
        "sender_full_name": "Geoffrey Churchill",
        "timestamp": 1686164061
    },
    {
        "content": "<p>The right way is <code>cata</code>. To prove termination for <code>cata'</code> you would need to unravel <code>ExprF.map</code>, which is pretty much the same as just writing <code>cata</code>.</p>",
        "id": 364374790,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1686165306
    },
    {
        "content": "<p>Ah got it that makes sense. Thank you for the help!</p>",
        "id": 364376470,
        "sender_full_name": "Geoffrey Churchill",
        "timestamp": 1686165776
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"622779\">Geoffrey Churchill</span> has marked this topic as resolved.</p>",
        "id": 364376515,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686165783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"622779\">@Geoffrey Churchill</span> A style suggestion: You can remove <code>Expr</code>/<code>Exprf</code> in constructors if the type is know (Lean is smart enough to infer it). Also, Lean code generally uses <code>&lt;|</code> as notation instead of <code>$</code>. For example, here is a more idiomatic definition of <code>cata</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cata</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">)</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364394795,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686171801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> oh thanks that looks much nicer. Style suggestions are always appreciated!</p>",
        "id": 364398285,
        "sender_full_name": "Geoffrey Churchill",
        "timestamp": 1686173207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"622779\">@Geoffrey Churchill</span> Also, I do not know if your <code>Expr</code> is really a one constructor type or if that is just for a MWE. But, if it is, you could use the anonymous constructor <code>⟨...⟩</code> to save more characters:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cata</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>    <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364398717,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686173377
    },
    {
        "content": "<p>Another option is to do a tiered match to save some code duplication:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cata</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">exprf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">match</span> <span class=\"n\">exprf</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span>  <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364399240,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686173562
    },
    {
        "content": "<p>(Which is like your <code>cata'</code> / <code>map</code> combo, but in the same function so Lean termination checking does not get confused.</p>",
        "id": 364399654,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686173762
    },
    {
        "content": "<p>That raise a interesting question, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> , is there some way to hint at the termination checker to unfold/inline a definition to allow extract such embeddings into separate functions?</p>",
        "id": 364400289,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686174018
    },
    {
        "content": "<p>It is interesting what is breaking termination checking here. This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">cata</span> <span class=\"n\">alg</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But this does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">a</span><span class=\"o\">⟩</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">((</span><span class=\"n\">cata</span> <span class=\"n\">alg</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>That is, partial applications of <code>cata</code> confuse the termination checker. It needs the full application to see that it terminates.</p>",
        "id": 364404351,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686175832
    },
    {
        "content": "<p>It seems the termination checker is missing a beta reduction somewhere in its algorithm (though there may be some reason why it cannot use it). <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, any thoughts?</p>",
        "id": 364409917,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686178537
    },
    {
        "content": "<p>that doesn't sound too surprising to me</p>",
        "id": 364410014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686178580
    },
    {
        "content": "<p>I generally just make sure to write recursive calls fully applied</p>",
        "id": 364410060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686178607
    },
    {
        "content": "<p>certainly it can't look through map-like definitions ATM, this is one of the blockers to getting good nested inductive support</p>",
        "id": 364410253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686178689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> True the manual case is kind of irrelevant, but the lack of the beta reduction is what actually breaks the <code>cata'</code> case (because the <code>f a</code> is not beta reduced after substituting <code>f := cata' alg</code>).</p>",
        "id": 364410260,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686178691
    },
    {
        "content": "<p>one way to do that kind of thing would be to take a partial function, baking in the assumption that the argument is less than the input so that WF recursion works</p>",
        "id": 364410359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686178761
    },
    {
        "content": "<p>and now I see this is actually a nested induction question</p>",
        "id": 364410394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686178796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> we can also use some elaboration helpers to get things in shape (except for the nested beta-reduction):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span><span class=\"o\">:</span><span class=\"n\">lead</span> <span class=\"s2\">\"beta_reduce \"</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Core.betaReduce</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">x</span> <span class=\"n\">none</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"def_inline \"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">id.getId</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">defnInfo</span> <span class=\"o\">{</span><span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">us</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">mvs</span> <span class=\"bp\">←</span> <span class=\"n\">us.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">v.instantiateLevelParams</span> <span class=\"n\">us</span> <span class=\"n\">mvs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unsupported constant type\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unknown identifier '{Lean.mkConst id.getId}'\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cata'</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">beta_reduce</span> <span class=\"o\">(</span><span class=\"n\">def_inline</span> <span class=\"n\">ExprF.map</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata'</span> <span class=\"n\">alg</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n  <span class=\"n\">alg</span> <span class=\"n\">f</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  f: ExprF α := match x with</span>\n<span class=\"cm\">  | ExprF.zero =&gt; ExprF.zero</span>\n<span class=\"cm\">  | ExprF.succ n =&gt; ExprF.succ ((cata' alg) n)</span>\n<span class=\"cm\">  | ExprF.add a b =&gt; ExprF.add ((cata' alg) a) ((cata' alg) b)</span>\n<span class=\"cm\">  | ExprF.mul a b =&gt; ExprF.mul ((cata' alg) a) ((cata' alg) b)</span>\n<span class=\"cm\">  | ExprF.pow a b =&gt; ExprF.pow ((cata' alg) a) ((cata' alg) b)</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 364410544,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686178863
    },
    {
        "content": "<p>Actually, this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cata'</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.inj</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">beta_reduce</span> <span class=\"o\">(</span><span class=\"n\">def_inline</span> <span class=\"n\">ExprF.map</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cata'</span> <span class=\"n\">alg</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 364410845,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686179012
    },
    {
        "content": "<p>So the problem isn't simply the nested beta reduction, but how the termination checker handles partial applications</p>",
        "id": 364411270,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686179268
    },
    {
        "content": "<p>Finally, here is an example combining <code>def_inline</code> and <code>beta_reduce</code> into a cleaner package:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span><span class=\"o\">:</span><span class=\"n\">lead</span> <span class=\"s2\">\"elab_inline \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">expectedType</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">id</span> <span class=\"n\">vs</span> <span class=\"o\">:=</span> <span class=\"n\">x.getAppFn</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">vs</span><span class=\"o\">,</span> <span class=\"n\">x.getAppArgs</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwErrorAt</span> <span class=\"n\">t</span> <span class=\"s2\">\"term is not a constant or application of a constant\"</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">id</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">defnInfo</span> <span class=\"o\">{</span><span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"n\">us</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Core.betaReduce</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"n\">v.instantiateLevelParams</span> <span class=\"n\">us</span> <span class=\"n\">vs</span><span class=\"o\">)</span> <span class=\"n\">args</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">t</span> <span class=\"s2\">\"unsupported constant type for '{Lean.mkConst id}'\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">t</span> <span class=\"s2\">\"unknown identifier '{Lean.mkConst id}'\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cata'</span> <span class=\"o\">(</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">ExprF</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">alg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elab_inline</span> <span class=\"n\">x.map</span> <span class=\"o\">(</span><span class=\"n\">cata'</span> <span class=\"n\">alg</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 364413259,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686180527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Rather than <code>Core.betaReduce</code>, which is global, you might do a <a href=\"#narrow/stream/287929-mathlib4/topic/dsimp.20only.20for.20universal.20cleanup/near/352096260\">more local one</a> that only applies to the outer function application, though I haven't read this thread carefully enough to know if there's a deeper problem</p>",
        "id": 364703126,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686270573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> That sounds and looks reasonable to me. It does work for a standard case of <code>elab_inline</code> were the goal is just to reduce the head. Unfortunately, in this example, we actually do need the global beta reduction to beta reduce the application of the passed function (e.g., <code>(cata' alg ·)</code>) to get the termination checker to play nice.</p>",
        "id": 364704046,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686271106
    }
]