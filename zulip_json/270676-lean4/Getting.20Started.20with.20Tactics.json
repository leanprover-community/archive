[
    {
        "content": "<p>I'd like to create a tactic that </p>\n<ol>\n<li>reads in all <code>?x &lt; ?y</code>, <code>?u = ?v</code> hypothesis (for Int's)</li>\n<li>applies transitive rules to get the complete set of possible relations</li>\n<li>adds in the not cases -- like <code>?x &lt; ?y -&gt; Not ?x = ?y</code></li>\n<li>searches for a contradiction to prove the goal</li>\n</ol>\n<p>However, I don't know where to get started and have only a rudimentary<br>\nidea of how tactics work.</p>\n<p>Any suggestions?</p>",
        "id": 329103925,
        "sender_full_name": "Daniel Bourgeois",
        "timestamp": 1676954877
    },
    {
        "content": "<p>Definitely check out Arthur et al's metaprogramming book <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">here</a>. Goes through all the basics of metaprogramming in Lean!</p>",
        "id": 329104013,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676954929
    },
    {
        "content": "<p>(btw, is the tactic you're describing covered by linarith? though maybe that's a bit heavy of a tactic for your purposes)</p>",
        "id": 329104184,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676955040
    },
    {
        "content": "<p>I cannot comment on how tactics are implemented because I never implemented one in my life. Just two cents:<br>\n(1) I think your step 3 is unnecessary.<br>\n(2) You will obtain something strictly weaker than <code>linarith</code>.</p>",
        "id": 329145454,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676973131
    },
    {
        "content": "<p>Has <code>omega</code> been implemented in Lean 4 btw?</p>",
        "id": 329146520,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676973507
    },
    {
        "content": "<p>No, not yet</p>",
        "id": 329146613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676973544
    },
    {
        "content": "<p>So <code>omega</code> might be a great project for <span class=\"user-mention\" data-user-id=\"573468\">@Daniel Bourgeois</span> instead!</p>",
        "id": 329146993,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676973679
    },
    {
        "content": "<p>Not necessarily full <code>omega</code> but something along the lines <span class=\"user-mention\" data-user-id=\"573468\">@Daniel Bourgeois</span> described but for <code>Nat</code> instead of <code>Int</code>.</p>",
        "id": 329147224,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676973751
    },
    {
        "content": "<p>I don't know much about this stuff, but I think implementing a performant version of <code>omega</code> is highly non-trivial.</p>",
        "id": 329148114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1676974012
    },
    {
        "content": "<p>I feel a strong temptation to become a troll and say that <code>omega</code> was never performant.</p>",
        "id": 329148480,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676974123
    },
    {
        "content": "<p>Anyways, I better shut up. Especially when I don't know shit about how tactics work inside.</p>",
        "id": 329148815,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676974233
    },
    {
        "content": "<p>There is a <code>micromega</code> branch on mathlib4</p>",
        "id": 329150073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676974639
    },
    {
        "content": "<p>which apparently hasn't been touched since july</p>",
        "id": 329150466,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676974764
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/commits/micromega\">https://github.com/leanprover-community/mathlib4/commits/micromega</a></p>",
        "id": 329150511,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676974780
    },
    {
        "content": "<p>it's basically a port of <a href=\"https://github.com/coq/coq/tree/master/plugins/micromega\">https://github.com/coq/coq/tree/master/plugins/micromega</a></p>",
        "id": 329150706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676974839
    },
    {
        "content": "<p>Does Coq have something better than the micromega tho?</p>",
        "id": 329151596,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676975044
    },
    {
        "content": "<p>don't let the name fool you, micromega is huge</p>",
        "id": 329151778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975065
    },
    {
        "content": "<p>it is leagues better than lean 3 <code>omega</code></p>",
        "id": 329151930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975093
    },
    {
        "content": "<p>it also includes the equivalent of <code>linarith</code> and <code>nlinarith</code></p>",
        "id": 329152059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975130
    },
    {
        "content": "<p>(as separate tactics)</p>",
        "id": 329152099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975139
    },
    {
        "content": "<p>micromega is the name of the overall package</p>",
        "id": 329152146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975153
    },
    {
        "content": "<p><a href=\"https://coq.github.io/doc/V8.11.0/refman/addendum/micromega.html\">https://coq.github.io/doc/V8.11.0/refman/addendum/micromega.html</a></p>",
        "id": 329152533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Getting.20Started.20with.20Tactics/near/329150073\">said</a>:</p>\n<blockquote>\n<p>There is a <code>micromega</code> branch on mathlib4</p>\n</blockquote>\n<p>Oh. I somehow wrongly assumed that <code>micromega</code> was supposed to be a temporary replacement for <code>omega</code> until the full <code>omega</code> gets implemented in Lean 4.</p>",
        "id": 329153465,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676975486
    },
    {
        "content": "<p>no, lean 3 <code>omega</code> is not something we want to port. It was never complete in the first place</p>",
        "id": 329153713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975550
    },
    {
        "content": "<p>I have a strong love-hate relationship with <code>omega</code> in Lean 3.</p>",
        "id": 329153927,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676975616
    },
    {
        "content": "<p>if you are motivated I encourage you to pick up the branch and port the rest</p>",
        "id": 329154188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975702
    },
    {
        "content": "<p>I am motivated but definitely not competent to do it.</p>",
        "id": 329154343,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676975758
    },
    {
        "content": "<p>if you can read coq/ML it's mostly straightforward</p>",
        "id": 329154475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975793
    },
    {
        "content": "<p>I stopped about a third of the way into <a href=\"https://github.com/coq/coq/blob/master/plugins/micromega/polynomial.ml\">https://github.com/coq/coq/blob/master/plugins/micromega/polynomial.ml</a></p>",
        "id": 329154501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975806
    },
    {
        "content": "<p>I can hardly read Lean, let alone other languages.</p>",
        "id": 329154581,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676975835
    },
    {
        "content": "<p>compare <a href=\"https://github.com/leanprover-community/mathlib4/blob/micromega/Mathlib/Tactic/Micromega/Polynomial.lean\">https://github.com/leanprover-community/mathlib4/blob/micromega/Mathlib/Tactic/Micromega/Polynomial.lean</a></p>",
        "id": 329154673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975872
    },
    {
        "content": "<p>for me the hard part was knowing the types of things in the ML code, since I was just reading it from github and ML does global type inference so it's hard to see the types</p>",
        "id": 329155013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676975968
    },
    {
        "content": "<p>linarith worked, except it was necessary to insert <code>have x : False := by linarith</code> and then use <code>x</code> otherwise linarith complains that it can't synthesize <code>LinearOrder</code></p>\n<p>For learning purposes, I still want to have a go at implementing the tactic described.</p>",
        "id": 329218594,
        "sender_full_name": "Daniel Bourgeois",
        "timestamp": 1676993093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Getting.20Started.20with.20Tactics/near/329155013\">said</a>:</p>\n<blockquote>\n<p>for me the hard part was knowing the types of things in the ML code, since I was just reading it from github and ML does global type inference so it's hard to see the types</p>\n</blockquote>\n<p>highly recommend installing Millet (language server for ML), there's a vscode extension with everything packaged nicely</p>",
        "id": 329227847,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676995200
    }
]