[
    {
        "content": "<p>It seems that the delaborator has a bug where parenthesis are missing when needed in some cases (unless the bug is in <code>formatTerm</code> and <code>Syntax.reprint</code>. The code that gives this is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">PrettyPrinter</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabView</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"bp\">←</span>  <span class=\"n\">getConstInfo</span> <span class=\"n\">name</span>\n    <span class=\"k\">let</span> <span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"n\">info.value</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n    <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span>  <span class=\"n\">delab</span> <span class=\"n\">term</span>\n    <span class=\"k\">let</span> <span class=\"n\">fmt</span> <span class=\"bp\">←</span>  <span class=\"n\">formatTerm</span> <span class=\"n\">stx</span>\n    <span class=\"n\">return</span> <span class=\"n\">fmt.pretty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">egComp</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">α'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α'</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">egComp</span> <span class=\"c\">/-</span><span class=\"cm\"> def egComp : {α β γ α' : Type} → (α' → β → γ) → (α → α') → α → β → γ :=</span>\n<span class=\"cm\">-- fun {α β γ α'} f g a b =&gt; f (g a) b -/</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">delabView</span> <span class=\"bp\">`</span><span class=\"n\">egComp</span> <span class=\"c1\">-- \"fun {α β γ α'} f g a b =&gt; f g a b\"</span>\n</code></pre></div>\n<p>The parenthesis in <code>(g a)</code> are dropped in the last case. If I use <code>Syntax.reprint</code> I get the same error. However going straight from the expression to format is fine as in the print statement. Since I am using custom delaborators for data extraction, I need to do this in two steps (debugging my code showed what seems an upstream bug).</p>",
        "id": 381330447,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691027315
    },
    {
        "content": "<p>Looking at the syntax, the problem seems to be in <code>Syntax.reprint</code> as well as <code>formatTerm</code>. The right-hand side is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Syntax.node</span>\n          <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.synthetic</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">87381</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">87381</span> <span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n          <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.app</span>\n          <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Syntax.ident</span>\n              <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.synthetic</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">1398096</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">1398096</span> <span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n              <span class=\"s2\">\"f\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n              <span class=\"bp\">`</span><span class=\"n\">f</span>\n              <span class=\"o\">[],</span>\n            <span class=\"n\">Lean.Syntax.node</span>\n              <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.none</span><span class=\"o\">)</span>\n              <span class=\"bp\">`</span><span class=\"n\">null</span>\n              <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Syntax.node</span>\n                  <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.synthetic</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">1398097</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">1398097</span> <span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n                  <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.app</span>\n                  <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Syntax.ident</span>\n                      <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.synthetic</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">5592388</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">5592388</span> <span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n                      <span class=\"s2\">\"g\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n                      <span class=\"bp\">`</span><span class=\"n\">g</span>\n                      <span class=\"o\">[],</span>\n                    <span class=\"n\">Lean.Syntax.node</span>\n                      <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.none</span><span class=\"o\">)</span>\n                      <span class=\"bp\">`</span><span class=\"n\">null</span>\n                      <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Syntax.ident</span>\n                          <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.synthetic</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">5592389</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">5592389</span> <span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n                          <span class=\"s2\">\"a\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n                          <span class=\"bp\">`</span><span class=\"n\">a</span>\n                          <span class=\"o\">[]]],</span>\n                <span class=\"n\">Lean.Syntax.ident</span>\n                  <span class=\"o\">(</span><span class=\"n\">Lean.SourceInfo.synthetic</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">349525</span> <span class=\"o\">}</span> <span class=\"o\">{</span> <span class=\"n\">byteIdx</span> <span class=\"o\">:=</span> <span class=\"mi\">349525</span> <span class=\"o\">}</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n                  <span class=\"s2\">\"b\"</span><span class=\"bp\">.</span><span class=\"n\">toSubstring</span>\n                  <span class=\"bp\">`</span><span class=\"n\">b</span>\n                  <span class=\"o\">[]]]</span>\n</code></pre></div>",
        "id": 381366134,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691043712
    },
    {
        "content": "<p>I see my mistake. If I use <code>ppTerm</code> the result is correct.<br>\nStill, should the above be considered a bug?</p>",
        "id": 381377479,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691047091
    },
    {
        "content": "<p>If you look at the definition of <code>ppExpr</code>, you will find three components it is made up of:</p>\n<ul>\n<li>delaborator</li>\n<li>parenthesizer</li>\n<li>formatter</li>\n</ul>\n<p>At this point you can probably guess which step you are missing :)</p>",
        "id": 381384355,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691048703
    },
    {
        "content": "<p>Where is the parenthesizer (just to learn - in my code I will use ppTerm).</p>",
        "id": 381397422,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1691051574
    },
    {
        "content": "<p>The main entry point <code>ppTerm</code> uses is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.PrettyPrinter.parenthesizeCategory#doc\">docs#Lean.PrettyPrinter.parenthesizeCategory</a></p>",
        "id": 381398203,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691051769
    }
]