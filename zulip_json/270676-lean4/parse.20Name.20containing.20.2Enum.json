[
    {
        "content": "<p>What's the best way to parse a <code>Name</code>? Lean's <code>ident</code> parser works fine for things like <code>a.b.c</code>, but as soon as a number is involved (as in <code>a.1</code>), it fails.</p>",
        "id": 405539552,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701527519
    },
    {
        "content": "<p>There is a <code>name</code> parser. Does it work?</p>",
        "id": 405543700,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701531020
    },
    {
        "content": "<p>No, it doesn't</p>",
        "id": 405547736,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701534544
    },
    {
        "content": "<p><code>.num</code> components cannot be parsed by the name parser, those are magic internal names that can only be produced with metaprogramming</p>",
        "id": 405560478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701545431
    },
    {
        "content": "<p>That said I have been thinking about making a <code>raw_name%</code>  parser which allows <code>a.1</code> to be parsed. The trouble is that this would not be an <code>ident</code> so you couldn't just use it anywhere an ident is expected, so you would have to resort to the same macro trick I've used <a href=\"#narrow/stream/113489-new-members/topic/.E2.9C.94.20Mathlib.2EAlgebra.2EGroup.2EDefs.2E_auxLemma.20.2C.20.20unknown.20identif.2E.2E.2E/near/404808175\">previously</a>, and in that case having a special name parser wouldn't help that much</p>",
        "id": 405560609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701545576
    }
]