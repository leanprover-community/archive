[
    {
        "content": "<p>I have the following structure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- \"4.3.0-nightly-2023-10-05\"</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ValidRName</span> <span class=\"o\">(</span><span class=\"n\">candidate</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">candidate.length</span>\n  <span class=\"bp\">∧</span> <span class=\"n\">candidate.length</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">100</span>\n  <span class=\"bp\">∧</span> <span class=\"n\">Char.isAlpha</span> <span class=\"n\">candidate.front</span>\n  <span class=\"bp\">∧</span> <span class=\"n\">candidate.all</span> <span class=\"n\">Char.isAlphanum</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">ValidRName</span> <span class=\"n\">candidate</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">instDecidableAnd</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RName</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span>  <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">valid</span> <span class=\"o\">:</span> <span class=\"n\">ValidRName</span> <span class=\"n\">name</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">RName</span> <span class=\"n\">where</span>\n  <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s2\">\"def\"</span><span class=\"o\">,</span> <span class=\"n\">valid</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">decide</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If I change the <code>default.name</code> string to <code>\"defa\"</code>, <code>\"defau\"</code>, <code>\"defaul\"</code> consecutively, I observe a rapid (exponential?) increase in the decision time.  Using <code>name := \"defaultName\"</code> incurs a max heartbeat timeout.</p>\n<p>This should not be happening, I think; the <code>ValidRName</code> predicate is simple and the four assertions should be checking out rapidly.  Any ideas?</p>",
        "id": 395408151,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696677377
    },
    {
        "content": "<p>Fixed in <a href=\"https://github.com/leanprover/lean4/pull/2612\">lean4#2612</a></p>",
        "id": 395408503,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696677604
    }
]