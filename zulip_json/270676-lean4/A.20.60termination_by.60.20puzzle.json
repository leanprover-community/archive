[
    {
        "content": "<p>Why doesn't <code>fooSS</code> work? Obviously it's because of <code>termination_by</code> but I don't understand exactly why. How does <code>termination_by</code> change the inductive definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Nat</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"n\">n</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">n</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo00</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo0S</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fooS0</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fooSS</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">foo</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails!?</span>\n</code></pre></div>",
        "id": 347013749,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1680665802
    },
    {
        "content": "<p>PS:  To avoid confusion, <code>foo</code> is identically zero, so <code>fooSS</code> is definitely true.</p>",
        "id": 347014780,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1680666532
    },
    {
        "content": "<p><code>by rw [foo]</code> works</p>",
        "id": 347020168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680669827
    },
    {
        "content": "<p>the answer to your question is that when you use <code>termination_by</code> it uses well-founded recursion instead of structural recursion to define the function, and WF definitions generally don't have many definitional equalities, you have to use the defining equations directly</p>",
        "id": 347020273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680669886
    },
    {
        "content": "<p>Thanks Mario.  I've figured out that I can access what I wanted to know using the option <code>trace.Elab.definition.wf</code> (the <code>wf</code> is what I couldn't figure out before Mario's hint).</p>",
        "id": 347183966,
        "sender_full_name": "Fran√ßois G. Dorais",
        "timestamp": 1680708647
    },
    {
        "content": "<p>[deleted]</p>",
        "id": 379739160,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1690623450
    }
]