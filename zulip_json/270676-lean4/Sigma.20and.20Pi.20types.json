[
    {
        "content": "<p>Is there a library I can load to  be able to use the standard notations for dependent types? </p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mi>x</mi><mo>:</mo><mi>τ</mi><mo separator=\"true\">,</mo><mi>p</mi><mi>x</mi><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">\\Sigma x:\\tau, p x\\;\\;\\; </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span></span></span>   and    <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext><mtext>  </mtext><mtext>  </mtext><mi mathvariant=\"normal\">Π</mi><mi>x</mi><mo>:</mo><mi>τ</mi><mo separator=\"true\">,</mo><mi>p</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\;\\;\\; \\Pi x:\\tau, p x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">Π</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">x</span></span></span></span></p>\n<p>I get the symbols, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Π</span></span></span></span>  and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> but they don't seem to be bound to the corresponding dependent types.</p>",
        "id": 340974998,
        "sender_full_name": "James Caldwell",
        "timestamp": 1678486610
    },
    {
        "content": "<p>Unfortunately, the notation seems to have disappeared from Lean:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/master/doc/lean3changes.md#dependent-function-types\">https://github.com/leanprover/lean4/blob/master/doc/lean3changes.md#dependent-function-types</a></p>",
        "id": 340975652,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678486823
    },
    {
        "content": "<p>Only the Pi one, it was replaced in favour of <code>(x : t) -&gt; p x</code> or the forall one. Sigma you can still use</p>",
        "id": 340976254,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678487033
    },
    {
        "content": "<p>OK - I see that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>x</mi><mo>:</mo><mi>τ</mi><mo separator=\"true\">,</mo><mi>p</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\forall x:\\tau,p x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.1132em;\">τ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">x</span></span></span></span> is equivalent - I can live with that.  Looking at Core.lean, it seems like someome could roll their own which is why I asked.</p>",
        "id": 340977427,
        "sender_full_name": "James Caldwell",
        "timestamp": 1678487471
    },
    {
        "content": "<p>You can definitely define your own notation.</p>",
        "id": 340977736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678487571
    },
    {
        "content": "<p>Lean 3 had <code>Σ i : ι, p i</code> and <code>Π i : ι, p i</code>. Lean4 encourages you to write those as <code>(i : ι) × p i</code> and <code>(i : ι) → p i</code>, although for whatever reason only actually removed the pi syntax and left the sigma syntax intact.</p>",
        "id": 341149415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678550126
    }
]