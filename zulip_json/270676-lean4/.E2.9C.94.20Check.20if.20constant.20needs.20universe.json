[
    {
        "content": "<p>Say I have a <code>Name</code> <code>nm</code> corresponding to a value and I need to know whether or not I need to give it any universe levels. One way to do that is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">List</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">nm</span> <span class=\"o\">[])</span>\n    <span class=\"c1\">-- do not need any universe levels</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- needs at least one universe level</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>is there a way in which I don't need to use <code>inferType</code>?</p>",
        "id": 370818414,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1688051044
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ConstantInfo.levelParams#doc\">docs#Lean.ConstantInfo.levelParams</a></p>",
        "id": 370819885,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1688051295
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nm</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">List</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">nm</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"no such declaration {nm}\"</span>\n  <span class=\"k\">if</span> <span class=\"n\">decl.levelParams.isEmpty</span> <span class=\"k\">then</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"does not have level params\"</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"has level params\"</span>\n</code></pre></div>",
        "id": 370819910,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688051301
    },
    {
        "content": "<p>You shouldn't use <code>inferType</code> to do type checking, since its contract is that for type-correct expressions it gives you the type, but it's allowed to produce nonsense for type-incorrect expressions</p>",
        "id": 370820139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688051348
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.check#doc\">docs#Lean.Meta.check</a> is a type checker</p>",
        "id": 370820347,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688051380
    },
    {
        "content": "<p>Got it. Thanks!</p>",
        "id": 370820677,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1688051436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360938\">Tomaz Gomes</span> has marked this topic as resolved.</p>",
        "id": 370820839,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688051467
    }
]