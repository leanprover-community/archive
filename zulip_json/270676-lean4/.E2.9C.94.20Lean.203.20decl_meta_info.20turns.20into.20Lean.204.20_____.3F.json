[
    {
        "content": "<p>Any idea how I can access the docstring <em>of the calling method</em> in Lean 4 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"add_tactic_doc \"</span> <span class=\"n\">tdeStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"o\">:=</span> <span class=\"c1\">-- \"My docstring\"</span>\n  <span class=\"bp\">...</span>\n\n<span class=\"sd\">/-- My docstring -/</span>\n<span class=\"n\">add_tactic_doc</span> <span class=\"n\">tde</span>\n</code></pre></div>\n<p>In Lean 3 it was done with <code>interactive.decl_meta_info</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[user_command]</span> <span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">add_tactic_doc_command</span> <span class=\"o\">(</span><span class=\"n\">mi</span> <span class=\"o\">:</span> <span class=\"n\">interactive.decl_meta_info</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"bp\">$</span> <span class=\"n\">tk</span> <span class=\"s2\">\"add_tactic_doc\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">parser</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">pe</span> <span class=\"bp\">←</span> <span class=\"n\">parser.pexpr</span><span class=\"o\">,</span>\n  <span class=\"n\">tde</span> <span class=\"bp\">←</span> <span class=\"n\">eval_pexpr</span> <span class=\"n\">tactic_doc_entry</span> <span class=\"n\">pe</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.add_tactic_doc</span> <span class=\"n\">tde</span> <span class=\"n\">mi.doc_string</span> <span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 310944546,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1668816057
    },
    {
        "content": "<p>You can match on it. This is how I did it for <code>alias</code>: <a href=\"https://github.com/leanprover-community/mathlib4/blob/6be213c40a0e46497724faf413026818ba8d9798/Mathlib/Tactic/Alias.lean#L96\">https://github.com/leanprover-community/mathlib4/blob/6be213c40a0e46497724faf413026818ba8d9798/Mathlib/Tactic/Alias.lean#L96</a></p>",
        "id": 310948905,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668818749
    },
    {
        "content": "<p>I'm not sure what the corresponding syntax would be for an <code>elab</code> statement.</p>",
        "id": 310949008,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668818798
    },
    {
        "content": "<p>I prefer using <code>@[command_elab]</code> or <code>elab_rules</code> over <code>elab</code> because they seem simpler. With <code>elab_rules</code>, I think you could do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">doc</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"n\">add_tactic_doc</span> <span class=\"bp\">$</span><span class=\"n\">tdeStx</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 310949302,
        "sender_full_name": "David Renshaw",
        "timestamp": 1668818971
    },
    {
        "content": "<p>Just made the following work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"n\">dc</span><span class=\"o\">:</span><span class=\"n\">docComment</span> <span class=\"bp\">?</span> <span class=\"s2\">\" add_tactic_doc \"</span> <span class=\"n\">tdeStx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">docString</span> <span class=\"o\">:=</span> <span class=\"n\">dc</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">getDocStringText</span> <span class=\"n\">docString</span>\n      <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 310949492,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1668819086
    },
    {
        "content": "<p>For anyone who'll be searching through zulip - it's a <code>declModifiers</code> thing (<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Command.lean#L73\">https://github.com/leanprover/lean4/blob/master/src/Lean/Parser/Command.lean#L73</a>), you can probably determine other meta properties via this method (<code>visibility</code>, <code>noncomputable</code>, <code>unsafe</code>,  <code>partial</code>, etc.).</p>",
        "id": 310950494,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1668819674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480079\">Evgenia Karunus</span> has marked this topic as resolved.</p>",
        "id": 310952954,
        "sender_full_name": "Notification Bot",
        "timestamp": 1668821437
    }
]