[
    {
        "content": "<p>Related note, it would be very helpful for anyone doing code analysis to enforce <code>-- theorem_end</code> and  <code>--lemma_end</code> like comment tags at the end of theorems and lemmas respectively  to facilitate parsing lean4 files. This was the most appropriate thread I could find to add this comment, so please redirect if there is better place.</p>",
        "id": 365419150,
        "sender_full_name": "John Mercer",
        "timestamp": 1686534811
    },
    {
        "content": "<p>I don't think it's a good idea to try to parse lean4 files with anything other than lean4... We're never going to expect people to write comments like this.</p>",
        "id": 365421060,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686535896
    },
    {
        "content": "<p>Moreover, we can use macroses to generate similar theorems.</p>",
        "id": 365428898,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686540943
    },
    {
        "content": "<p>And we have attributes that generate theorems and definitions.</p>",
        "id": 365429003,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686540967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/rfc.3A.20theorem.20names/near/365421060\">said</a>:</p>\n<blockquote>\n<p>I don't think it's a good idea to try to parse lean4 files with anything other than lean4... We're never going to expect people to write comments like this.</p>\n</blockquote>\n<p>Hi Scott, can you please elaborate? Is there some functionality in lean4 I'm not seeing to, e.g., list all theorems and lemmas?<br>\n[theorem name], [conjecture], [proof body (i.e. everything after <code>:=</code>)]</p>",
        "id": 365548569,
        "sender_full_name": "John Mercer",
        "timestamp": 1686573681
    },
    {
        "content": "<p>Have a look at <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment#doc\">docs4#Lean.Environment</a> and around.</p>",
        "id": 365549092,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1686573779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"516752\">John Mercer</span> <a href=\"#narrow/stream/270676-lean4/topic/rfc.3A.20theorem.20names/near/365548569\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/rfc.3A.20theorem.20names/near/365421060\">said</a>:</p>\n<blockquote>\n<p>I don't think it's a good idea to try to parse lean4 files with anything other than lean4... We're never going to expect people to write comments like this.</p>\n</blockquote>\n<p>Hi Scott, can you please elaborate? Is there some functionality in lean4 I'm not seeing to, e.g., list all theorems and lemmas?<br>\n[theorem name], [conjecture], [proof body (i.e. everything after <code>:=</code>)]</p>\n</blockquote>\n<p>Lean can be infinitely customized via meta programming, you can introduce arbitrary syntax with arbitrary meaning (including auto generating theorems) so processing lean with something that is not a fully fledged lean compiler is bound to fail.</p>",
        "id": 365584004,
        "sender_full_name": "Henrik B√∂ving",
        "timestamp": 1686580471
    },
    {
        "content": "<p>7 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/rfc.3A.20theorem.20names\">#lean4 &gt; rfc: theorem names</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 365584885,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686580637
    },
    {
        "content": "<p>John, a classic example of where you would find theorems that are auto-generated and don't show up explicitly in the source (which is why you need to parse Lean with Lean), would be any theorem in <code>mathlib</code> marked with the <code>to_additive</code> or <code>simps</code> attributes. Now, maybe you don't want to include these theorems, but for instance, there is no explicit code which gives the foundational result: \"the quotient of a Banach space by a subspace is complete\" (note: unless the subspace is closed the quotient is only seminormed) because here we are taking an <em>additive</em> group quotient, for which <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuotientAddGroup.completeSpace#doc\">docs4#QuotientAddGroup.completeSpace</a> applies, but this declaration is autogenerated from <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=QuotientGroup.completeSpace#doc\">docs4#QuotientGroup.completeSpace</a> using <code>to_additive</code> (see <a href=\"https://github.com/leanprover-community/mathlib4/blob/5a919533f110b7d76410134a237ee374f24eaaad/Mathlib/Topology/Algebra/UniformGroup.lean#L1012C1-L1038\">source</a>).</p>",
        "id": 365619582,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1686587770
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/Mathlib/Data/UInt.lean#L30\">Data.UInt</a></p>",
        "id": 365630869,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1686590428
    },
    {
        "content": "<p>It‚Äôs not too difficult to list all theorems in a given file from a lean metaprogram. You can get the Environment object, and then iterate through all constants filtering them to only theorems, done.</p>",
        "id": 365873166,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1686663599
    },
    {
        "content": "<p>Filtering for only a specific import file is only a little bit more involved, I did that for one of my projects. If you can‚Äôt figure it out yourself I can go dig that code up.</p>",
        "id": 365873523,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1686663657
    },
    {
        "content": "<p>Thanks everyone for the great feedback and help! Will do another iteration of investigation and testing (based on info above) and will get back to you.</p>",
        "id": 366024922,
        "sender_full_name": "John Mercer",
        "timestamp": 1686705424
    }
]