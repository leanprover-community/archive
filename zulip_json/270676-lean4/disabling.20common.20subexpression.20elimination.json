[
    {
        "content": "<p>I would like to measure how many times a certain function gets called in an expression if naively evaluated. Just adding <code>dbg_trace</code> to that function does not work as there seems to be some form of common subexpression elimination. Consider this code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"calling foo\"</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- calling foo</span>\n<span class=\"c1\">-- 8.000000</span>\n<span class=\"k\">#eval</span> <span class=\"n\">f</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>it prints out <code>calling foo</code> only once. I would expect twice.</p>\n<p>A more complicated example:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span> <span class=\"o\">:=</span>\n  <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"calling foo\"</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fooD</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"bp\">×</span><span class=\"o\">(</span><span class=\"n\">Float</span><span class=\"bp\">→</span><span class=\"n\">Float</span><span class=\"bp\">×</span><span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n   <span class=\"k\">fun</span> <span class=\"n\">dz</span> <span class=\"bp\">=&gt;</span>\n     <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">dz</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">dz</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Float</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ydg0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo_1</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">ydg0</span> <span class=\"n\">ydg0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">xdf0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo_1.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo_2</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">xdf0</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ydg0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo_2.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo_3</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">ydg0</span> <span class=\"n\">ydg0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">xdf0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo_3.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo_4</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">xdf0</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ydg0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo_4.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo_5</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">ydg0</span> <span class=\"n\">ydg0</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">xdf0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo_5.fst</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">zdfoo_6</span> <span class=\"o\">:=</span> <span class=\"n\">fooD</span> <span class=\"n\">xdf0</span> <span class=\"n\">x</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">ydg0</span> <span class=\"o\">:=</span> <span class=\"n\">zdfoo_6.fst</span><span class=\"bp\">;</span>\n    <span class=\"o\">(</span><span class=\"n\">ydg0</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">dz</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_6</span> <span class=\"n\">dz</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_1</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_5</span> <span class=\"n\">dxdy.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_2</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_4</span> <span class=\"n\">dxdy_1.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_3</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_3</span> <span class=\"n\">dxdy_2.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_4</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_2</span> <span class=\"n\">dxdy_3.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_5</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_1</span> <span class=\"n\">dxdy_4.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_6</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_5.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_7</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_5.snd</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_8</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_2</span> <span class=\"n\">dxdy_3.snd</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_9</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_1</span> <span class=\"n\">dxdy_8.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_10</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_9.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_11</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_9.snd</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_12</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_4</span> <span class=\"n\">dxdy_1.snd</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_13</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_3</span> <span class=\"n\">dxdy_12.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_14</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_2</span> <span class=\"n\">dxdy_13.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_15</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_1</span> <span class=\"n\">dxdy_14.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_16</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_15.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_17</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_15.snd</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_18</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_2</span> <span class=\"n\">dxdy_13.snd</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_19</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo_1</span> <span class=\"n\">dxdy_18.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_20</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_19.fst</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">dxdy_21</span> <span class=\"o\">:=</span> <span class=\"n\">Prod.snd</span> <span class=\"n\">zdfoo</span> <span class=\"n\">dxdy_19.snd</span><span class=\"bp\">;</span>\n      <span class=\"n\">dxdy_6.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_6.snd</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dxdy_7.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_7.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_4.snd</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"n\">dxdy_10.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_10.snd</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dxdy_11.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_11.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_8.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n            <span class=\"n\">dxdy_2.snd</span> <span class=\"bp\">+</span>\n          <span class=\"o\">(</span><span class=\"n\">dxdy_16.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_16.snd</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dxdy_17.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_17.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_14.snd</span> <span class=\"bp\">+</span>\n              <span class=\"o\">(</span><span class=\"n\">dxdy_20.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_20.snd</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">dxdy_21.fst</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_21.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">dxdy_18.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n            <span class=\"n\">dxdy_12.snd</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n        <span class=\"n\">dxdy.snd</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- 17 × calling foo</span>\n<span class=\"c1\">-- 385875968.000000</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"mi\">4</span>\n</code></pre></div>\n</div></div>\n<p>which prints out <code>calling foo</code> only 17 times, but I would expect <code>7 + 22 * 2 = 51</code> times. </p>\n<p>I'm generating this kind of code automatically and I want to measure how many times a certain function gets evaluated to get a better idea which code generation is better/worse. I do not want this this measurement be skewed by downstream optimizations.</p>",
        "id": 395877275,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696942421
    },
    {
        "content": "<p>The question is can I disable this common subexpression elimination? Or is there a different way to measure how many times a function gets called when expression is evaluated naively?</p>",
        "id": 395877649,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696942549
    },
    {
        "content": "<p>wrap it in a state monad that counts each call? :p that might be a bit of a heavy solution though...</p>",
        "id": 395949340,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696966590
    },
    {
        "content": "<p>(i don't know of any way to turn off the compiler optimizations other than constant lifting...)</p>",
        "id": 395949473,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696966676
    },
    {
        "content": "<p>Yeah I thought of using monads but I do not generate monadic code and turning it into monadic is probably as hard as writing a meta code that inspects the code and counts the number of calls. I really do not know how to approach this apart from effectively writing my own interpreter.</p>",
        "id": 395971624,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1696978825
    }
]