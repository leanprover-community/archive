[
    {
        "content": "<p>Is there a way to determine which definitions/theorems a given theorem depends on (for the purpose of deleting unused ones)?</p>",
        "id": 388856364,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693770621
    },
    {
        "content": "<p>I don't have an answer but I would also find this useful - especially if it's restricted to a particular folder / set of files rather than all of mathlib</p>",
        "id": 388865159,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693776984
    },
    {
        "content": "<p>There was a tool in mathlib3 but I don't think it got ported. It was <a href=\"https://leanprover-community.github.io/mathlib_docs/tactic/find_unused.html\">https://leanprover-community.github.io/mathlib_docs/tactic/find_unused.html</a></p>",
        "id": 388865509,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693777301
    },
    {
        "content": "<p>This looks really useful!</p>",
        "id": 388865630,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693777388
    },
    {
        "content": "<p>This is should be easy to implement on top of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Expr.getUsedConstants#src\">src#Expr.getUsedConstants</a> or <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ConstantInfo.getUsedConstants#src\">src#ConstantInfo.getUsedConstants</a>. </p>\n<p>A nicer implementation than the mathlib3 approach would just be a command <code>#find_unused in ...</code>, that prints a list of the constants declared in the current file (up to this point) not used in the declarations constructed in the <code>...</code>.</p>\n<p>I'd hope that this would actually be a relatively easy learning project for someone wanting to start metaprogramming.</p>",
        "id": 388871776,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693783134
    },
    {
        "content": "<p>Learning metaprogramming has been on my to-do list for a while - if I get time I might try to implement it, but don't let that stop anyone with more knowledge/experience than me.</p>",
        "id": 388872831,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1693784173
    },
    {
        "content": "<p>I got sniped by this because of the breadcrumbs Scott laid out. It seemed like it would be straightforward to do this by starting with the <code>whatsnew</code> code, but there was a gotcha: certain declarations can be artificially used by additional internal declarations that Lean generates when processing.</p>\n<p>This reports both unused declarations and declarations that have finally become used by the new declarations.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Expr.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"c1\">-- Generalized monad for `Lean.Name.isBlackListed`</span>\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Name.isBlackListed'</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">declName</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">sorryAx</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">if</span> <span class=\"n\">declName</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"s2\">\"inj\"</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">if</span> <span class=\"n\">declName</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">str</span> <span class=\"n\">_</span> <span class=\"s2\">\"noConfusionType\"</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">true</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">$</span> <span class=\"n\">declName.isInternal'</span>\n   <span class=\"bp\">||</span> <span class=\"n\">isAuxRecursor</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n   <span class=\"bp\">||</span> <span class=\"n\">isNoConfusion</span> <span class=\"n\">env</span> <span class=\"n\">declName</span>\n  <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isRec</span> <span class=\"n\">declName</span> <span class=\"bp\">&lt;||&gt;</span> <span class=\"n\">isMatcher</span> <span class=\"n\">declName</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.FindUnused</span>\n\n<span class=\"sd\">/-- Remove all blacklisted names from the given environment.</span>\n<span class=\"sd\">This might not be accurate since the blacklist function is a heuristic. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">filterNames</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">PHashMap</span> <span class=\"n\">Name</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">PHashMap</span> <span class=\"n\">Name</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">env'</span> <span class=\"o\">:=</span> <span class=\"n\">env</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">env</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">n.isBlackListed'</span> <span class=\"k\">then</span>\n      <span class=\"n\">env'</span> <span class=\"o\">:=</span> <span class=\"n\">env'.erase</span> <span class=\"n\">n</span>\n  <span class=\"n\">return</span> <span class=\"n\">env'</span>\n\n<span class=\"sd\">/-- `#find_unused in $command` executes the command and then prints the</span>\n<span class=\"sd\">pre-existing unused declarations in this module that remain unused. -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"#find_unused \"</span> <span class=\"s2\">\"in\"</span> <span class=\"n\">ppLine</span> <span class=\"n\">cmd</span><span class=\"o\">:</span><span class=\"n\">command</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oldEnv</span> <span class=\"bp\">←</span> <span class=\"n\">filterNames</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₂</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">elabCommand</span> <span class=\"n\">cmd</span>\n  <span class=\"n\">finally</span>\n    <span class=\"k\">let</span> <span class=\"n\">newEnv</span> <span class=\"bp\">←</span> <span class=\"n\">filterNames</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kd\">constants</span><span class=\"bp\">.</span><span class=\"n\">map₂</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">usedNames</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">uniquelyUsedNames</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">unusedNames</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">oldEnv</span> <span class=\"k\">do</span>\n      <span class=\"n\">usedNames</span> <span class=\"o\">:=</span> <span class=\"n\">usedNames.union</span> <span class=\"n\">c.getUsedConstants</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">newEnv</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"n\">oldEnv.contains</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n        <span class=\"n\">for</span> <span class=\"n\">n'</span> <span class=\"k\">in</span> <span class=\"n\">c.getUsedConstants</span> <span class=\"k\">do</span>\n          <span class=\"n\">unless</span> <span class=\"n\">usedNames.contains</span> <span class=\"n\">n'</span> <span class=\"k\">do</span>\n            <span class=\"n\">uniquelyUsedNames</span> <span class=\"o\">:=</span> <span class=\"n\">uniquelyUsedNames.insert</span> <span class=\"n\">n'</span>\n          <span class=\"n\">usedNames</span> <span class=\"o\">:=</span> <span class=\"n\">usedNames.insert</span> <span class=\"n\">n'</span>\n    <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">oldEnv</span> <span class=\"k\">do</span>\n      <span class=\"n\">unless</span> <span class=\"n\">usedNames.contains</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n        <span class=\"n\">unusedNames</span> <span class=\"o\">:=</span> <span class=\"n\">unusedNames.insert</span> <span class=\"n\">n</span>\n    <span class=\"k\">let</span> <span class=\"n\">pp</span> <span class=\"o\">(</span><span class=\"n\">names</span> <span class=\"o\">:</span> <span class=\"n\">NameSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MessageData</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">consts</span> <span class=\"o\">:=</span> <span class=\"n\">names.toArray</span>\n      <span class=\"k\">let</span> <span class=\"n\">consts</span> <span class=\"bp\">←</span> <span class=\"n\">consts.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findDeclarationRanges</span><span class=\"bp\">?</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">newEnv.find</span><span class=\"bp\">!</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">consts</span> <span class=\"o\">:=</span> <span class=\"n\">consts.insertionSort</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d'</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">d'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">d'</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n          <span class=\"n\">Position.lt</span> <span class=\"n\">d.range.pos</span> <span class=\"n\">d'.range.pos</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">false</span>\n      <span class=\"k\">let</span> <span class=\"n\">consts</span> <span class=\"bp\">←</span> <span class=\"n\">consts.mapM</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{mkConst n (c.levelParams.map .param)}\"</span>\n      <span class=\"n\">return</span> <span class=\"n\">consts.toList</span>\n    <span class=\"k\">let</span> <span class=\"n\">unusedNames'</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">unusedNames</span>\n    <span class=\"k\">let</span> <span class=\"n\">uniquelyUsedNames'</span> <span class=\"bp\">←</span> <span class=\"n\">pp</span> <span class=\"n\">uniquelyUsedNames</span>\n    <span class=\"n\">unless</span> <span class=\"n\">unusedNames'.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Declarations that are still unused:{</span>\n<span class=\"s2\">        indentD &lt;| .joinSep unusedNames' \"</span><span class=\"o\">,</span> <span class=\"s2\">\"}\"</span>\n    <span class=\"n\">unless</span> <span class=\"n\">uniquelyUsedNames'.isEmpty</span> <span class=\"k\">do</span>\n      <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Declarations are only used by this command:{</span>\n<span class=\"s2\">        indentD &lt;| .joinSep uniquelyUsedNames' \"</span><span class=\"o\">,</span> <span class=\"s2\">\"}\"</span>\n</code></pre></div>",
        "id": 388878819,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693788067
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fAux</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fAux</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find_unused</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Declarations that are still unused:</span>\n<span class=\"cm\">  g</span>\n\n<span class=\"cm\">Declarations are only used by this command:</span>\n<span class=\"cm\">  f</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 388878878,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693788096
    }
]