[
    {
        "content": "<p>When rewriting under binders, <code>simp</code> seems to be applying <code>funext</code> on the function from the binder being rewriten, not on the rewriting theorem itself. Is there a specific reason for that?</p>\n<p>Each theorem marked as <code>@[simp]</code> can be reduced to <code>funext</code> normal form before adding to the simp set. For example, <code>∀ (P Q : Prop), ¬(P ∧ Q) ↔ ¬P ∨ ¬Q</code> can be reduced to <code>(λ (P Q : Prop) =&gt; ¬(P ∧ Q)) = (λ (P Q : Prop) =&gt; ¬P ∨ ¬Q)</code> and if we try to simplify the statement <code>∀ (A B : Prop), true ∨ ¬(A ∧ B)</code> using that theorem, simp would interpret it as <code>∀ (A B : Prop), true ∨ f A B</code> where <code>f</code> is the LHS of the rewriting theorem. This should save a lot of time during simplification and shorten the resulting proof size.</p>\n<p>Are there any flaws with this idea?</p>",
        "id": 324449637,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675005135
    },
    {
        "content": "<p>this would turn every rewriting problem into a higher order rewriting problem, which is a lot harder and would significantly reduce successful rewrites</p>",
        "id": 324450645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675005534
    },
    {
        "content": "<p>For instance, what if the goal was <code>∀ (B A : Prop), true ∨ ¬(A ∧ B)</code> instead? <code>simp</code> would then normalize the expression to <code>∀ (B A : Prop), true ∨ (λ (B A : Prop) =&gt; ¬(A ∧ B)) B A</code> which no longer matches the normalized equation in the simp set</p>",
        "id": 324450900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675005669
    },
    {
        "content": "<p>Or maybe it would normalize to <code>∀ (B A : Prop), (λ (B A : Prop) =&gt; true ∨ ¬(A ∧ B)) B A</code> instead which doesn't look at all like the equation in the simp set</p>",
        "id": 324451072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675005759
    },
    {
        "content": "<p>For non-dependent functions, abstracting the LHS away shouldn't be hard at all. The LHS is <code>λ (P Q : Prop) =&gt; ¬(P ∧ Q)</code>, so we have pattern <code>¬(?P ∧ ?Q)</code> in the simp decision tree. If the goal is <code>∀ (B A : Prop), true ∨ ¬(A ∧ B)</code>, simp would visit each subexpression and try to match against some pattern from the decision tree. When it sees <code>¬(A ∧ B)</code>, simp would replace it with <code>(λ (P Q : Prop) =&gt; ¬(P ∧ Q)) A B</code>, so the goal would become <code>∀ (B A : Prop), true ∨ (λ (P Q : Prop) =&gt; ¬(P ∧ Q)) A B</code> as expected.</p>",
        "id": 324451953,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675006141
    },
    {
        "content": "<p>I don't see how this is effectively different from just instantiating the simp lemma instead</p>",
        "id": 324452095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675006207
    },
    {
        "content": "<p>By not using <code>funext</code> when simplifying and therefore shortening the resulting proof term.</p>",
        "id": 324452235,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675006300
    },
    {
        "content": "<p>But I don't understand why <code>funext</code> would be involved in the first place</p>",
        "id": 324452284,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675006321
    },
    {
        "content": "<p>Oh you mean for rewriting under binders?</p>",
        "id": 324452398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675006368
    },
    {
        "content": "<p>The point I'm trying to make is that after reducing to funext normal form, we can replace lambda arguments from the LHS with metavariables and store the pattern in the global simp decision tree. When matching a term against the decision tree, we would keep track of metavariable assignments for each path (and the number of paths we follow would be proportional to the number of metavariables, which can be considered a constant). Not sure how hard it would be to implement this though.</p>",
        "id": 324455588,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675007753
    },
    {
        "content": "<p>It's an interesting idea although it's not clear to me whether the resulting proof is meaningfully smaller or easier to check; seems like you trade <code>funext</code> for a more complicated motive to <code>eq.rec</code></p>",
        "id": 324457991,
        "sender_full_name": "Reid Barton",
        "timestamp": 1675008949
    },
    {
        "content": "<p>In the set theoretic theorem prover I'm developing, after implementing this simplification algorithm the performance increased significantly, and proof terms turned out to be shorter. So I thought maybe we can implement something similar in Lean as well. But on the other hand, Lean is dependently typed, so it's hard to know in advance whether this algorithm would bring any benefit.</p>",
        "id": 324539688,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1675063520
    }
]