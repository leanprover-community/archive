[
    {
        "content": "<p>This is a minimisation of <a href=\"https://github.com/leanprover-community/aesop/pull/89\">aesop#89</a>, where <code>simp_all?</code> includes a private equation lemma in the <code>simp only</code> list.</p>\n<p>In <code>Mathlib/Min1.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToAdditive</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Invert an element of α. -/</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">InvolutiveInv</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inv</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">inv_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span> <span class=\"o\">(</span><span class=\"n\">attr</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">)</span><span class=\"kd\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">involutiveInv</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">InvolutiveInv</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">InvolutiveInv</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">inv_inv</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Real</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">InvolutiveInv</span> <span class=\"n\">Real</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Real</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>In <code>Min.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Min1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">zero_mem_iff_zero_mem_neg</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Real</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">tactic.simp.trace</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"n\">simp_all</span>\n  <span class=\"c1\">-- Try this: simp_all only [_private.Mathlib.Min1.0.involutiveNeg._eq_1]</span>\n</code></pre></div>\n<p>The <code>simp_all only</code> suggestion obviously can't work, but I'm not sure who the culprit is. Is there an expectation that the simp database doesn't contain private theorems? If so, <code>to_additive</code> probably needs fixing. If not, how should simp tracing deal with these private theorems?</p>",
        "id": 406552591,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1701958937
    }
]