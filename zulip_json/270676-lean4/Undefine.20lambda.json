[
    {
        "content": "<p>Is there a way to undefine the special function syntax for λ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">λ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"c1\">-- unexpected token 'λ'; expected '_' or identifier</span>\n</code></pre></div>",
        "id": 393673936,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695897063
    },
    {
        "content": "<p>No, undefining tokens is not allowed. But let's do it anyway:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Trie.isEmpty</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">Node</span> <span class=\"n\">none</span> <span class=\"bp\">.</span><span class=\"n\">leaf</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Trie.erase</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Trie</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">s.atEnd</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Trie.Node</span> <span class=\"n\">none</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">s.get</span> <span class=\"n\">i</span>\n        <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">s.next</span> <span class=\"n\">i</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">m.find</span> <span class=\"n\">compare</span> <span class=\"n\">c</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">loop</span> <span class=\"n\">t</span> <span class=\"n\">i</span>\n        <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">m.erase</span> <span class=\"n\">compare</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">m.insert</span> <span class=\"n\">compare</span> <span class=\"n\">c</span> <span class=\"n\">t</span>\n        <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩</span>\n  <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">t</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"n\">t</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"delete_token\"</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tk</span> <span class=\"o\">:=</span> <span class=\"n\">tk.getString</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">parserExtension.ext.getState</span> <span class=\"n\">env</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">top</span> <span class=\"o\">::</span> <span class=\"n\">states</span> <span class=\"o\">:=</span> <span class=\"n\">s.stateStack</span> <span class=\"k\">then</span>\n    <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"k\">with</span> <span class=\"n\">state.tokens</span> <span class=\"o\">:=</span> <span class=\"n\">top.state.tokens.erase</span> <span class=\"n\">tk</span> <span class=\"o\">}</span>\n      <span class=\"n\">parserExtension.ext.setState</span> <span class=\"n\">env</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">stateStack</span> <span class=\"o\">:=</span> <span class=\"n\">top</span> <span class=\"o\">::</span> <span class=\"n\">states</span> <span class=\"o\">}</span>\n\n<span class=\"n\">delete_token</span> <span class=\"s2\">\"λ\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">λ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span>\n                        <span class=\"c1\">-- ^ expected token</span>\n</code></pre></div>",
        "id": 393694214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695901956
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 393694716,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695902071
    },
    {
        "content": "<p>It doesn't work, though. The reason is that even though we have undefined lambda as a token, it is still not an identifier character as determined by this function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isLetterLike</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"mi\">0x3b1</span>  <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x3c9</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0x3bb</span><span class=\"o\">)</span> <span class=\"bp\">||</span>                  <span class=\"c1\">-- Lower greek, but lambda</span>\n  <span class=\"o\">(</span><span class=\"mi\">0x391</span>  <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x3A9</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0x3A0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0x3A3</span><span class=\"o\">)</span> <span class=\"bp\">||</span> <span class=\"c1\">-- Upper greek, but Pi and Sigma</span>\n  <span class=\"o\">(</span><span class=\"mi\">0x3ca</span>  <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x3fb</span><span class=\"o\">)</span> <span class=\"bp\">||</span>                                   <span class=\"c1\">-- Coptic letters</span>\n  <span class=\"o\">(</span><span class=\"mi\">0x1f00</span> <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x1ffe</span><span class=\"o\">)</span> <span class=\"bp\">||</span>                                  <span class=\"c1\">-- Polytonic Greek Extended Character Set</span>\n  <span class=\"o\">(</span><span class=\"mi\">0x2100</span> <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x214f</span><span class=\"o\">)</span> <span class=\"bp\">||</span>                                  <span class=\"c1\">-- Letter like block</span>\n  <span class=\"o\">(</span><span class=\"mi\">0x1d49c</span> <span class=\"bp\">≤</span> <span class=\"n\">c.val</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">c.val</span> <span class=\"bp\">≤</span> <span class=\"mi\">0x1d59f</span><span class=\"o\">)</span>                                   <span class=\"c1\">-- Latin letters, Script, Double-struck, Fractur</span>\n</code></pre></div>\n<p>So we get the same error that one would get with <code>fun д =&gt; д</code>: it's not a legal identifier character</p>",
        "id": 393694873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695902114
    },
    {
        "content": "<p>sadly this definition is not extensible, so we can't do anything about it</p>",
        "id": 393695022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695902151
    },
    {
        "content": "<p>Ah, I see, <code>U+03BB</code> is explicitly banned.</p>",
        "id": 393695038,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695902153
    },
    {
        "content": "<p>However, that's not the end of the story: even if it's a token we can still make it a macro that expands to an identifier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"λ\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkIdent</span> <span class=\"bp\">`«λ»</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">λ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span>\n</code></pre></div>\n<p>and it works! This is the same trick that used to be used to make <code>this</code> work. (It's a bit leaky but you should be able to use it most places an identifier is legal.)</p>",
        "id": 393695422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695902241
    },
    {
        "content": "<p>Huh, that's really interesting.</p>",
        "id": 393695820,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695902331
    },
    {
        "content": "<p>also, just in case you were not aware, even reserved words and non-identifier characters can be used in identifiers if you wrap them in the guillemets as in <code>«λ»</code></p>",
        "id": 393696255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695902419
    },
    {
        "content": "<p>I think I've seen that trick before in a couple of places like lakefiles and with weird filenames.</p>",
        "id": 393696393,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695902452
    },
    {
        "content": "<p>And protected <code>exists</code>/<code>forall</code> lemmas.</p>",
        "id": 393696680,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695902513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefine.20lambda/near/393694214\">said</a>:</p>\n<blockquote>\n<p>No, undefining tokens is not allowed. But let's do it anyway:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Trie.isEmpty</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">t</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">Node</span> <span class=\"n\">none</span> <span class=\"bp\">.</span><span class=\"n\">leaf</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">Lean.Parser.Trie.erase</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">Trie</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">String.Pos</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Trie</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩,</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">s.atEnd</span> <span class=\"n\">i</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">true</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">Trie.Node</span> <span class=\"n\">none</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">s.get</span> <span class=\"n\">i</span>\n        <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">s.next</span> <span class=\"n\">i</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">m.find</span> <span class=\"n\">compare</span> <span class=\"n\">c</span>\n        <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">loop</span> <span class=\"n\">t</span> <span class=\"n\">i</span>\n        <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">t.isEmpty</span> <span class=\"k\">then</span> <span class=\"n\">m.erase</span> <span class=\"n\">compare</span> <span class=\"n\">c</span> <span class=\"k\">else</span> <span class=\"n\">m.insert</span> <span class=\"n\">compare</span> <span class=\"n\">c</span> <span class=\"n\">t</span>\n        <span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">⟩</span>\n  <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"n\">t</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getD</span> <span class=\"n\">t</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"delete_token\"</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">tk</span> <span class=\"o\">:=</span> <span class=\"n\">tk.getString</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">parserExtension.ext.getState</span> <span class=\"n\">env</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">top</span> <span class=\"o\">::</span> <span class=\"n\">states</span> <span class=\"o\">:=</span> <span class=\"n\">s.stateStack</span> <span class=\"k\">then</span>\n    <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"k\">with</span> <span class=\"n\">state.tokens</span> <span class=\"o\">:=</span> <span class=\"n\">top.state.tokens.erase</span> <span class=\"n\">tk</span> <span class=\"o\">}</span>\n      <span class=\"n\">parserExtension.ext.setState</span> <span class=\"n\">env</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">stateStack</span> <span class=\"o\">:=</span> <span class=\"n\">top</span> <span class=\"o\">::</span> <span class=\"n\">states</span> <span class=\"o\">}</span>\n\n<span class=\"n\">delete_token</span> <span class=\"s2\">\"λ\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">λ</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">λ</span>\n                        <span class=\"c1\">-- ^ expected token</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is the most cursed meta program I've seen you produce so far :P</p>",
        "id": 393697234,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1695902632
    },
    {
        "content": "<p>You can see I've taken the lessons from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/PSA.20about.20trusting.20Lean.20proofs\">#general &gt; PSA about trusting Lean proofs</a> to heart. Lean is the language where no means \"well...\"</p>",
        "id": 393698295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695902860
    },
    {
        "content": "<p>Why did we decide to change all the <code>λ</code>s to <code>fun</code> in mathlib if it's so hard to actually use <code>λ</code> as a name anyway?</p>",
        "id": 393698816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695902974
    },
    {
        "content": "<p>I thought the argument was always \"I want to use <code>λ</code> for a variable\"</p>",
        "id": 393698935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695902999
    },
    {
        "content": "<p>It is, but lambda is defined in core</p>",
        "id": 393699026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903011
    },
    {
        "content": "<p>and it wasn't designed to be optional</p>",
        "id": 393699070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903020
    },
    {
        "content": "<p>Was the thinking that step one was remove <code>λ</code> from mathlib, and step 2 is complain loudly at core until it becomes optional?</p>",
        "id": 393699173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695903053
    },
    {
        "content": "<p>I think so</p>",
        "id": 393699234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903064
    },
    {
        "content": "<p>My understanding is that the reason <code>λ</code> is actually a non-identifier character rather than simply a token like other reserved words is so that people can write <code>λa =&gt; a</code> (compare with <code>funny =&gt; ny</code> which does not work)</p>",
        "id": 393699628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903147
    },
    {
        "content": "<p>That seems pretty reasonable, but totally at odds with the decision by mathlib to not use <code>λ</code> at all</p>",
        "id": 393700534,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695903345
    },
    {
        "content": "<p>This whole part of the code is directly lifted from lean 3</p>",
        "id": 393700692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903371
    },
    {
        "content": "<p>including the bizarre identifier list</p>",
        "id": 393700725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903380
    },
    {
        "content": "<p>which also excludes Pi even though it's not a token anymore</p>",
        "id": 393700852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903405
    },
    {
        "content": "<p>For some context, the project I'm working on has some ordinal parameters that on paper are named λ, κ, μ, so I have to awkwardly capitalise λ in code.</p>",
        "id": 393701065,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903455
    },
    {
        "content": "<p>I'd hoped that with <code>fun</code> this wouldn't be an issue in Lean 4.</p>",
        "id": 393701158,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefine.20lambda/near/393699628\">said</a>:</p>\n<blockquote>\n<p>so that people can write <code>λa =&gt; a</code></p>\n</blockquote>\n<p>But on the other hand this seems quite useful!</p>",
        "id": 393701452,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903531
    },
    {
        "content": "<p>You can also write <code>«λ»</code>, which would perhaps be less crazy.</p>",
        "id": 393701508,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695903542
    },
    {
        "content": "<p>λ currently shows up in over 200 places, I don't really want to litter my code with guillemets that much.</p>",
        "id": 393701643,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903574
    },
    {
        "content": "<p>Oh sorry, Mario already said so. <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 393701691,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1695903585
    },
    {
        "content": "<p>It doesn't really make sense to rename the ordinals either, because λ takes the role of a limit ordinal.</p>",
        "id": 393702020,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903651
    },
    {
        "content": "<p>how about <code>ⲗ</code> or <code>Ⲗ</code>?</p>",
        "id": 393702209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903708
    },
    {
        "content": "<p>Somewhat expectedly I get <code>expected token</code> using either of those.</p>",
        "id": 393702546,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903801
    },
    {
        "content": "<p>oh, they are coptic letters so I would have guessed they would fall under the identifier classification</p>",
        "id": 393702752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695903869
    },
    {
        "content": "<p>They're U+2C9(6|7), which apparently aren't in the range.</p>",
        "id": 393702863,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903904
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/qEK1T54oIySJuDAHJfYKmKNd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/qEK1T54oIySJuDAHJfYKmKNd/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/qEK1T54oIySJuDAHJfYKmKNd/image.png\"></a></div>",
        "id": 393702935,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903928
    },
    {
        "content": "<p>Not to be confused with...<br>\n<a href=\"/user_uploads/3121/VjOThSgvTCxKN9rnV9VNJbi4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/VjOThSgvTCxKN9rnV9VNJbi4/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/VjOThSgvTCxKN9rnV9VNJbi4/image.png\"></a></div>",
        "id": 393703015,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1695903952
    },
    {
        "content": "<p>if mathlib can survive fine without lambda for functions, I think that's pretty good evidence that <em>everyone</em> will survive without lambdas for functions :p</p>",
        "id": 394483061,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696268430
    },
    {
        "content": "<p>(wrt the core change)</p>",
        "id": 394483121,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696268451
    }
]