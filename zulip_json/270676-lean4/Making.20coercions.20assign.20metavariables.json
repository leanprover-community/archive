[
    {
        "content": "<p>Is there a way to make the following coercion work somehow without annotating the type of <code>a</code>, changing <code>f</code> or <code>Foo</code>, or supplying <code>b</code> directly at the call site? I feel as though <code>outParam</code>s might be relevant, but I'm not totally sure how to use them here.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Bar</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">âŸ¨âŸ©</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">âŸ¨âŸ©</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">}</span> <span class=\"bp\">â†’</span> <span class=\"n\">Bar</span> <span class=\"n\">b</span> <span class=\"bp\">â†’</span> <span class=\"n\">Unit</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> application type mismatch</span>\n<span class=\"cm\">  f a</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  a</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Foo true : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Bar b : Type -/</span>\n</code></pre></div>",
        "id": 383653038,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691678646
    },
    {
        "content": "<p>Do you want <code>f : Bar b â†’ Unit</code> specifically instead of <code>f : {b : Bool} â†’ Bar b â†’ Unit</code>? I'd expect it to work if you make <code>b</code> be an additional implicit argument to <code>f</code>.</p>",
        "id": 383663986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691680383
    },
    {
        "content": "<p>Oops, I guess autoimplicits work differently in <code>variable</code>? (Fixed)</p>",
        "id": 383667810,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691681007
    },
    {
        "content": "<p>In any case, it doesn't work when <code>b</code> is an implicit argument either. :(</p>",
        "id": 383667883,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691681018
    },
    {
        "content": "<p>It looks like it does consider the instance, but it doesn't succeed for some reason:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- [tryResolve] ðŸ’¥ Coe (Foo true) (Bar ?m.537) â‰Ÿ Coe (Foo ?m.613) (Bar ?m.613)</span>\n</code></pre></div>",
        "id": 383672400,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691681753
    },
    {
        "content": "<p>Re <code>outParam</code>, I think that's only for <code>class</code> definitions, not instances.</p>",
        "id": 383672483,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1691681766
    },
    {
        "content": "<p>Do all the variants of <code>Coe</code> like <code>CoeTC</code> or <code>CoeTail</code> or whatever, help here? I have no idea what any of these mean in Lean 4 or where to read about them (I just about understood them in Lean 3)</p>",
        "id": 383687722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691684668
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Making.20coercions.20assign.20metavariables/near/383687722\">said</a>:</p>\n<blockquote>\n<p>Do all the variants of <code>Coe</code> like <code>CoeTC</code> or <code>CoeTail</code> or whatever, help here? I have no idea what any of these mean in Lean 4 or where to read about them (I just about understood them in Lean 3)</p>\n</blockquote>\n<p>None of the variants fix the issues</p>",
        "id": 383694506,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1691685924
    },
    {
        "content": "<p>Secondedâ€”I was just about to report the same thing :)</p>",
        "id": 383694767,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691685971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Making.20coercions.20assign.20metavariables/near/383672400\">said</a>:</p>\n<blockquote>\n<p>It looks like it does consider the instance, but it doesn't succeed for some reason:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"k\">#check</span> <span class=\"n\">f</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- [tryResolve] ðŸ’¥ Coe (Foo true) (Bar ?m.537) â‰Ÿ Coe (Foo ?m.613) (Bar ?m.613)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Is the <code>MCtxDepth</code> bumped at some point for some reason? (Btw, I wonder: is there a way we can trace that? I imagine it would be helpful in general to be able to see that certain mvars aren't currently assignable in defeq traces!)</p>",
        "id": 383695415,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691686098
    },
    {
        "content": "<p>My current guess is that the <code>withNewMCtxDepth</code> in <code>synthInstance?</code> prevents <code>?m.537</code> in the above trace from being assigned.</p>\n<p>If that's correct, then this is actually an issue that has come up several times in the past. I wonder if there's a way around this, in principle. E.g. maybe it'd be useful if metavariables created for implicit arguments could be assigned freely by TC search. (This would presumably require a new field in <code>MetavarDecl</code> to keep track of a metavariable's original <code>BinderInfo</code>, if it was originally created for an expression that had a <code>BinderInfo</code> associated with it.) Or maybe that would be problematic for some reason; still, it could be interesting to explore.</p>",
        "id": 383806026,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1691720226
    }
]