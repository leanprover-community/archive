[
    {
        "content": "<p>Consider the MWE: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Case10</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Case01</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Case00</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span>  <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Inhabited</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n</code></pre></div>\n<hr>\n<p>Lean prints out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">temp</span> <span class=\"n\">elan</span> <span class=\"n\">run</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">18</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">df49512880fd</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"bp\">~/</span><span class=\"n\">temp</span> <span class=\"n\">elan</span> <span class=\"n\">run</span> <span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">18</span> <span class=\"n\">lean</span> <span class=\"kd\">extends</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n<span class=\"kd\">extends</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">Case10.toInhabited</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Case10</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">A</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Case10</span> <span class=\"n\">A</span> <span class=\"bp\">?</span><span class=\"n\">B</span>\n<span class=\"kd\">extends</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">Case00.toInhabited</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Case00</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Inhabited</span> <span class=\"n\">A</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Case00</span> <span class=\"n\">A</span> <span class=\"bp\">?</span><span class=\"n\">B</span>\n</code></pre></div>\n<hr>\n<ul>\n<li>First off, I am not even sure what it is trying to synthesize. The error message states that it is trying to synthesize an <code>[Inhabited A]</code> instance.</li>\n<li>For <code>Case00</code>, I wonder we do not synthesize the information in the order of <code>[A, Inhabited A, B]</code>.</li>\n<li>For <code>Case10</code>, what is the problem? Is it that <code>A</code> is marked as an <code>outParam</code>, and must thus be synthesized at the end, while also extending from <code>Inhabited A</code>, thereby needing to the synthesized at the beginning?</li>\n</ul>",
        "id": 360308995,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1684769857
    },
    {
        "content": "<p>What the error message says is that Lean can't figure an order in which to process the subgoals of the <code>Case??.toInhabited</code> instance during TC synthesis (you get this instance because you've extended <code>Inhabited</code>).  This order is computed when declaring the instance, before synthesizing an actual Inhabited instance.</p>",
        "id": 360396643,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684799622
    },
    {
        "content": "<p>The problem with Case10 and Case00 is that you could add this instance later on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">hugeProblem</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMonoid</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Case00</span> <span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"n\">where</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<p>Now think what happens when you then look for an <code>Inhabited Nat</code> instance.  We first apply <code>Case00.toInhabited</code>, and get a <code>Case00 Nat ?B</code> subgoal.  Then we apply <code>hugeProblem</code> and get two subgoals: <code>AddMonoid Nat</code> and <code>AddMonoid ?B</code>.  And that second subgoal is really, really bad.  Because Lean will then try to enumerate all possible additive monoids, which will usually diverge.  (I say usually, because in this case we could add a high priority <code>AddMonoid PUnit</code> instance to short-circuit it.  But in general this won't really work if you've got a subgoal like <code>Module Rat (Prod Nat ?B)</code>.)</p>",
        "id": 360397420,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800207
    },
    {
        "content": "<p>So to be safe, we statically check that you never get a subgoal with metavariable in non-outparams (like <code>Case00 A ?B</code> here, which could lead to <code>AddMonoid ?B</code>, etc.).</p>",
        "id": 360397519,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800266
    },
    {
        "content": "<p>I think it would make sense to just not declare the instance in this case, it is weird to be getting an error about an instance the user never wrote</p>",
        "id": 360397685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684800398
    },
    {
        "content": "<p>There are two possible fixes here: 1) do not declare the instance, and 2) mark B as (semi)outparam.</p>",
        "id": 360398034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800615
    },
    {
        "content": "<p>Both are valid depending on the circumstances, and it's up to the user to decide.  I'd rather not make this choice silently.</p>",
        "id": 360398078,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684800653
    },
    {
        "content": "<p>how does the user \"decide\" not to declare the instance, if they still want it to be a parent structure as regards other lean behaviors?</p>",
        "id": 360398135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684800706
    },
    {
        "content": "<p>I don't think we have any syntax to opt into that behavior</p>",
        "id": 360398232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684800754
    },
    {
        "content": "<p><code>class Case00 (A B : Type) where [toInhabited : Inhabited A]</code> seems like a good enough match, at least in this case.</p>",
        "id": 360400127,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684801917
    },
    {
        "content": "<p>(Although of course it's not a parent structure.)</p>",
        "id": 360400193,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684801939
    },
    {
        "content": "<p>Is <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234228.20cannot.20find.20synthesization.20order.20for.20instance/near/360502379\">this</a> question another instance of the same thing?</p>",
        "id": 360517478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684845212
    },
    {
        "content": "<p>I am getting the synthesization order error and I am still confused by the above discussion. The code I have is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Encodable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">encode</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span>\n  <span class=\"n\">decode</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">α</span>\n\n<span class=\"sd\">/-- Any `Encodable α δ` instance gives us a trivial `Coe α δ` instance -/</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Encodable</span> <span class=\"n\">α</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">δ</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Encodable.encode</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>And it shows the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">instCoe</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Encodable</span> <span class=\"n\">α</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">Coe</span> <span class=\"n\">α</span> <span class=\"n\">δ</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Encodable</span> <span class=\"bp\">?</span><span class=\"n\">α</span> <span class=\"n\">δ</span>\n</code></pre></div>",
        "id": 360624038,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684870576
    },
    {
        "content": "<p>I am confused by it saying there's a metavariable. If it tries to derive <code>Coe</code> from <code>Encodable</code>, aren't all the variables specified?</p>",
        "id": 360624310,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684870681
    },
    {
        "content": "<p>(Note that this is not the mathlib <code>Encodable</code>)</p>",
        "id": 360624793,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684870816
    },
    {
        "content": "<p>No, Coe is chained right to left, the first argument is unspecified (a metavariable)</p>",
        "id": 360626406,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684871393
    },
    {
        "content": "<p>CoeTC might be the best choice here.</p>",
        "id": 360626834,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684871550
    },
    {
        "content": "<p>Ok cool yes, that worked thanks.</p>",
        "id": 360628292,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1684872122
    }
]