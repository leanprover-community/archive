[
    {
        "content": "<p>I tried it myself (after updating <code>elan</code> to version 3.0.0), I got the following error message after entering <code>lake +stable new SuperShinyProject</code>: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">toolchain</span> <span class=\"bp\">'</span><span class=\"n\">stable'</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">the</span> <span class=\"n\">binary</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">sophie</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">stable</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 389898200,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694185224
    },
    {
        "content": "<p>Use <code>+leanprover/lean4:stable</code>. The shortcut only works after updating elan.</p>",
        "id": 389901615,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694186298
    },
    {
        "content": "<p>Thanks, it works ! What confuses me is that I did update elan before trying ? (Maybe I didn't update it enough ? I have version 3.0.0 now.)</p>",
        "id": 390002456,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694242224
    },
    {
        "content": "<p>Sorry, it's me again, probably being very stupid again.<br>\nBut, well, I created a new project using <code>lake +leanprover/lean4:stablenew SuperShinyProject math</code>, I and unlike what happens when I create a project using some version of <code>nightly</code>, it didn't create a <code>lean-toolchain</code> file in the project. In fact, the only things there are <code>lakefile.lean</code> and <code>SuperShinyProject.lean</code>.<br>\nAlso, neither <code>lake update</code> nor <code>lake exe cache get</code> will run, they both give the same error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">defaultTarget</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>\n<p>Just a sanity check, did I need to reinstall Lean4 before I started using the new release ? Because I thought that updating <code>elan</code> would be enough, but apparently not.</p>",
        "id": 390016847,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694253387
    },
    {
        "content": "<p>Wait, I just created a <code>lean-toolchain</code> by hand, containing only <code>leanprover/lean4:4.0.0</code>, and now the next command <code>lean --version</code> is running. Fingers crossed.</p>",
        "id": 390017396,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694253755
    },
    {
        "content": "<p>(I got confused, because <code>cat lean-toolchain</code> just complained that <code>lean-toolchain</code> didn't exist, so I thought that the previous command should have created it. But maybe it shouldn't and I was supposed to create it myself all along.)</p>",
        "id": 390017491,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694253839
    },
    {
        "content": "<p>Hmrf. It did download <code>lean</code>, I got the message <code>Lean (version 4.0.0, commit ec941735c80d, Release)</code> and was happy. Then I tried playing with a Lean file and I get the error message </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">sophie</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/lake print-paths Init` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">defaultTarget</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration.</span>  <span class=\"n\">Please</span> <span class=\"n\">restart</span> <span class=\"n\">the</span> <span class=\"n\">server</span> <span class=\"n\">after</span> <span class=\"n\">fixing</span> <span class=\"n\">the</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file.</span>\n</code></pre></div>\n<p>again. I just edited <code>lakefile.lean</code> to comment the offending line 11 and I'm trying again, fingers crossed.</p>",
        "id": 390018052,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694254210
    },
    {
        "content": "<p>(could we move discussion outside of <a class=\"stream\" data-stream-id=\"113486\" href=\"/#narrow/stream/113486-announce\">#announce</a>?)</p>",
        "id": 390018094,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1694254256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span>, in what you've written above there is no space between <code>+leanprover/lean4:stable</code>  and <code>new</code>, but there needs to be!</p>",
        "id": 390018112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694254271
    },
    {
        "content": "<p>(I will move in a moment.)</p>",
        "id": 390018122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694254277
    },
    {
        "content": "<p>Unfortunately I can't reproduce your problem at the moment. For me,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span> <span class=\"n\">new</span> <span class=\"n\">SuperShinyProject</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>creates a new directory <code>SuperShinyProject</code> containing a <code>lean-toolchain</code> (with contents <code>leanprover/lean4:v4.0.0</code>).</p>",
        "id": 390018195,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694254337
    },
    {
        "content": "<p>So I think we should go back a step and work out why that is not working for you (before editing too many files at random! :-)</p>",
        "id": 390018208,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694254352
    },
    {
        "content": "<p>13 messages were moved here from <a class=\"stream-topic\" data-stream-id=\"113486\" href=\"/#narrow/stream/113486-announce/topic/First.20official.20release\">#announce &gt; First official release</a> by <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span>.</p>",
        "id": 390018262,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694254418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20lake.20new/near/390018112\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span>, in what you've written above there is no space between <code>+leanprover/lean4:stable</code>  and <code>new</code>, but there needs to be!</p>\n</blockquote>\n<p>Sorry, that was a copying mistake, I definitely had the space in my terminal.</p>",
        "id": 390018510,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694254605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20lake.20new/near/390018208\">said</a>:</p>\n<blockquote>\n<p>So I think we should go back a step and work out why that is not working for you (before editing too many files at random! :-)</p>\n</blockquote>\n<p>Sure. First thing, elan: <code>elan -V</code> replies <code>elan 3.0.0 (cdb40bff5 2023-09-08)</code>. Is this good or should I update something ?</p>",
        "id": 390018560,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694254666
    },
    {
        "content": "<p>(I also vote to rename the thread \"Sophie is an idiot who can't create a Lean project to save her life\"...)</p>",
        "id": 390018856,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694254866
    },
    {
        "content": "<p>Just to comfort Sophie. I updated elan to the last version (the same as your <code>elan 3.0.0</code>, then did</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">stable</span> <span class=\"n\">new</span> <span class=\"n\">SuperShinyProject</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>This created a <code>superShinyProject</code> subdirectory. It has a <code>lean-toolchain</code> file in it. However, when I open the folder <code>superShinyProject</code> in vscode, and then the file <code>superShinyProject.lean</code> in it, I get the following error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0\\bin\\lake.exe print-paths Init` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">object</span> <span class=\"n\">file</span> <span class=\"bp\">'</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0\\lib\\lean\\Lake.olean' of module Lake does not exist</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Lake'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">axiom</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">builtin_initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">def</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">example</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">inductive</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixl</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixr</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">opaque'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">postfix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">prefix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"kd\">theorem</span><span class=\"bp\">'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n<span class=\"n\">Invalid</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration.</span>  <span class=\"n\">Please</span> <span class=\"n\">restart</span> <span class=\"n\">the</span> <span class=\"n\">server</span> <span class=\"n\">after</span> <span class=\"n\">fixing</span> <span class=\"n\">the</span> <span class=\"n\">Lake</span> <span class=\"n\">configuration</span> <span class=\"n\">file.</span>\n</code></pre></div>",
        "id": 390019178,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694255093
    },
    {
        "content": "<p>(Also also, my method of editing files at random seems to have worked, I now have a Lean project where <code>lake build</code> runs. And more importantly to me, I can work on Lean files in it.)</p>",
        "id": 390019253,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694255154
    },
    {
        "content": "<p>And if I do <code>lake build</code> in the directory project, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">object</span> <span class=\"n\">file</span> <span class=\"bp\">'</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0\\lib\\lean\\Lake.olean' of module Lake does not exist</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Lake'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">12</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"n\">abbrev'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">axiom</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">builtin_initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">class</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">def</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">elab_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">example</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">inductive</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixl</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">infixr</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">initialize'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">instance</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">macro_rules'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">notation</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">opaque'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">postfix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">prefix</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"kd\">structure</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"bp\">'</span><span class=\"n\">syntax'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"kd\">theorem</span><span class=\"bp\">'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>\n<p>(I'm glad I'm always working directly on mathlib)</p>",
        "id": 390019310,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694255170
    },
    {
        "content": "<p>The content of <code>lakefile.lean</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">Â«</span><span class=\"n\">SuperShinyProject</span><span class=\"bp\">Â»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">Â«</span><span class=\"n\">SuperShinyProject</span><span class=\"bp\">Â»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390019528,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694255340
    },
    {
        "content": "<p>Well if I run <code>lake +leanprover/lean4:stable new SuperShinyProject math</code> (with a project name that is not already used), I still don't get a <code>lean-toolchain</code>. My <code>lakefile.lean</code> says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">superShinyProject</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[defaultTarget]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">SuperShinyProject</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390019681,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694255448
    },
    {
        "content": "<p>What, why do I have <code>@[defaultTarget]</code> and not <code>@[default_target]</code> like SÃ©bastien ? I edited <code>lakefile.lean</code> to change that, and now <code>lake update</code> will run. (I also had to create <code>lean-toolchain</code> by hand first. This is black magic.)</p>",
        "id": 390019866,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694255578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20lake.20new/near/390019310\">said</a>:</p>\n<blockquote>\n<p>And if I do <code>lake build</code> in the directory project, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">.\\</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">object</span> <span class=\"n\">file</span> <span class=\"bp\">'</span><span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">Sebastien</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.0.0\\lib\\lean\\Lake.olean' of module Lake does not exist</span>\n</code></pre></div>\n<p>(I'm glad I'm always working directly on mathlib)</p>\n</blockquote>\n<p>And indeed, this file does not exist. In the directory <code>C:\\Users\\Sebastien\\.elan\\toolchains\\leanprover--lean4---v4.0.0\\lib\\lean</code>, there are files <code>Init.ilean</code>, <code>Init.olean</code> and subdirectories <code>Init</code> and <code>Lake</code>, both of them populated with many <code>ilean</code> and <code>olean</code> files.</p>",
        "id": 390020025,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694255690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"318709\">@Sophie Morel</span> Oh, this is an elan gotcha I forgot about but that I want to address soon: if you've already installed a previous stable version of Lean, you first have to run <code>elan update stable</code>. Or use <code>+leanprover/lean4:4.0.0</code> directly.</p>",
        "id": 390029831,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694261667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> The file does exist in <a href=\"https://github.com/leanprover/lean4/releases/download/v4.0.0/lean-4.0.0-windows.tar.zst\">https://github.com/leanprover/lean4/releases/download/v4.0.0/lean-4.0.0-windows.tar.zst</a>. Could you run <code>elan toolchain uninstall leanprover/lean4:v4.0.0</code> and try again?</p>",
        "id": 390030131,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694261914
    },
    {
        "content": "<p>I have uninstalled all my previous toolchains, started again, and it works fine. Probably something had already been downloaded by an old version of <code>elan</code> and was conflicting with something else, but since I have wiped everything away I won't be able to help you diagnose it. In any case, this shouldn't affect newcomers.</p>",
        "id": 390031890,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1694263252
    },
    {
        "content": "<p>That's good to hear. As it was in the right directory, my best guess would be a corrupted elan download. (Un)fortunately that seems like a extremely rare occurrence so I wouldn't even know where to start looking.</p>",
        "id": 390032355,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694263665
    },
    {
        "content": "<p>I am waiting for <code>elan update stable</code> to finish running and then I'll try again.</p>",
        "id": 390032483,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694263765
    },
    {
        "content": "<p>I got the message <code>  stable updated - Lean (version 4.0.0, commit ec941735c80d, Release)</code> from <code>elan</code> (and no error message).</p>\n<p>Then I ran <code>lake +leanprover/lean4:stable new ShinyProject math</code>. Still no <code>lean-toolchain</code>, and I get the same error messages as before when I try to run <code>lake update</code> or <code>lake exe cache get</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">defaultTarget</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>\n<p>I think that I should burn my computer, exorcise the ashes and start with a new machine.</p>",
        "id": 390033106,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694264253
    },
    {
        "content": "<p>Ah, this only works if you literally use <code>+stable</code> as in the beginning. I'm removing the code responsible for this confusion as we speak.</p>",
        "id": 390033587,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694264638
    },
    {
        "content": "<p>Ah yes, I tried with <code>lake +stable</code> and I got a toolchain.</p>",
        "id": 390033763,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694264768
    },
    {
        "content": "<p>I am on my way to the nearest church to light a votive candle. Thanks for the help !</p>",
        "id": 390033843,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1694264854
    },
    {
        "content": "<p>I really should fix this then so we can spend less on candles!</p>",
        "id": 390034011,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694264988
    },
    {
        "content": "<p>I am creating a new project and after some trial-and-error I detect the following behaviour:</p>\n<ul>\n<li>If I duly follow the instructions <a href=\"https://leanprover-community.github.io/install/project.html\">here</a> line-by-line everything goes smoothly.</li>\n<li>If I bravely modify the sugested names <code>my_project</code> and <code>MyProject</code> to <code>Expose</code> and <code>Expose</code>, everything is OK again.</li>\n<li>But if I too bravely modify <code>my_project</code> and <code>MyProject</code> to <code>foo</code> and <code>bar</code>, <em>my</em> <code>imports</code> are not recognized (the <code>mathlib</code> ones are OK).</li>\n</ul>\n<p>Is this expected?</p>",
        "id": 392016712,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1695169989
    },
    {
        "content": "<p>No, this is not expected. Could you check if it's still the case if you use <code>lake +x</code> where x is the latest nightly?</p>",
        "id": 392021851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695172549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>, oh, maybe my mistake --- when you say that you put your files in <code>bar/</code>, are you changing the <code>lean_lib</code> line in your <code>lakefile</code> from <code>lean_lib Â«FooÂ» {</code>  to <code>lean_lib Â«barÂ» {</code>? If you don't do that then just putting Lean files in <code>bar/</code> will not allow you to import other files from <code>bar/</code>.</p>",
        "id": 392026997,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695175286
    },
    {
        "content": "<p>There does seem to be a <code>lake</code> issue hiding here, however.</p>",
        "id": 392027261,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695175415
    },
    {
        "content": "<p>With <code>lean_lib Â«barÂ»</code> (note lower-case), and files in <code>bar/A.lean</code> and <code>bar/B.lean</code>, then <code>lake build bar.B</code> fails with <code>`error: unknown target </code>bar.B<code>`` but </code>lake build Bar.B` succeeds.</p>\n<p>Importing either <code>bar.B</code> or <code>Bar.B</code> works. (This is all on macos, which has the nasty feature of case-sensitive filenames that you can refer to with the wrong cases...)</p>",
        "id": 392027631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695175620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, what can we do about this? What should the behaviour be?</p>",
        "id": 392028064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695175819
    },
    {
        "content": "<p>does it work with <code>+</code>?</p>",
        "id": 392028160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695175866
    },
    {
        "content": "<p><code>lake build +bar.B</code></p>",
        "id": 392028170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695175870
    },
    {
        "content": "<p>A different error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">+</span><span class=\"n\">bar.A</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">module</span> <span class=\"bp\">`</span><span class=\"n\">bar.A</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 392028347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695175963
    },
    {
        "content": "<p>what's the project setup?</p>",
        "id": 392028393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695175985
    },
    {
        "content": "<p><code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">Â«</span><span class=\"n\">foo</span><span class=\"bp\">Â»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">Â«</span><span class=\"n\">bar</span><span class=\"bp\">Â»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 392028443,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176014
    },
    {
        "content": "<p>and a file <code>bar/A.lean</code>.</p>",
        "id": 392028458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176022
    },
    {
        "content": "<p>I assume the mathlib dependency is unnecessary</p>",
        "id": 392028474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176031
    },
    {
        "content": "<p>Is there a <code>bar.lean</code>?</p>",
        "id": 392028548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176059
    },
    {
        "content": "<p>Behaviour is the same before and after renaming <code>/Foo.lean</code> to <code>/bar.lean</code>.</p>",
        "id": 392028609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176100
    },
    {
        "content": "<p>the default configuration includes only <code>bar.lean</code> and its transitive dependencies in the lib</p>",
        "id": 392028617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176102
    },
    {
        "content": "<p>what is the contents of <code>bar.lean</code>?</p>",
        "id": 392028688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176136
    },
    {
        "content": "<p>But I should still be able to build the non-transitively imported files, without munging the case!</p>",
        "id": 392028691,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176138
    },
    {
        "content": "<p><code>def hello := \"world\"</code></p>",
        "id": 392028705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176146
    },
    {
        "content": "<p>it has no deps?</p>",
        "id": 392028714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176153
    },
    {
        "content": "<p>Nothing</p>",
        "id": 392028721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176157
    },
    {
        "content": "<p>in that case <code>bar.A</code> is not a target in the project</p>",
        "id": 392028790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176175
    },
    {
        "content": "<p>I'm not expecting <code>lake build</code> to build <code>bar/A.lean</code>. But shouldn't I be able to build it still?</p>",
        "id": 392028826,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176194
    },
    {
        "content": "<p>no</p>",
        "id": 392028846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176200
    },
    {
        "content": "<p>this is an open feature request</p>",
        "id": 392028865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176211
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/pull/147\">lake#147</a></p>",
        "id": 392028893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176225
    },
    {
        "content": "<p>right now the only way to build orphan files is <code>lake env lean bar/A.lean</code></p>",
        "id": 392028974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176266
    },
    {
        "content": "<p>which is how we normally build test files</p>",
        "id": 392029016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176283
    },
    {
        "content": "<p>Oops, okay, sorry for the noise.</p>",
        "id": 392029052,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176290
    },
    {
        "content": "<p>Ah, there is still a problem.</p>",
        "id": 392029086,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176308
    },
    {
        "content": "<p>Starting fresh, I now have:<br>\n<code>lakefile.lean</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">Â«</span><span class=\"n\">foo</span><span class=\"bp\">Â»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"bp\">Â«</span><span class=\"n\">bar</span><span class=\"bp\">Â»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add any library configuration options here</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 392029115,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176328
    },
    {
        "content": "<p>and files <code>bar/A.lean</code> (empty) and <code>bar/B.lean</code> (just contains <code>import bar.A</code>).</p>",
        "id": 392029169,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176358
    },
    {
        "content": "<p>and <code>bar.lean</code> containing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">bar.A</span>\n<span class=\"kn\">import</span> <span class=\"n\">bar.B</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hello</span> <span class=\"o\">:=</span> <span class=\"s2\">\"world\"</span>\n</code></pre></div>",
        "id": 392029204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176379
    },
    {
        "content": "<p>That seems valid, no? Or at least something a user might reasonably do. :-)</p>",
        "id": 392029231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176395
    },
    {
        "content": "<p>yes that looks valid</p>",
        "id": 392029242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176402
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Bar</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">DYLD_LIBRARY_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kim</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.1.0-rc1/bin/lean ./././Bar.lean -R ././. -o ./build/lib/Bar.olean -i ./build/lib/Bar.ilean -c ./build/ir/Bar.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stdout</span><span class=\"o\">:</span>\n<span class=\"bp\">./././</span><span class=\"n\">Bar.lean</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">bar'</span>\n<span class=\"n\">You</span> <span class=\"n\">might</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"kn\">open</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kim</span><span class=\"bp\">/</span><span class=\"n\">scratch</span><span class=\"bp\">/</span><span class=\"n\">foo'</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">workspace</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">editor</span>\n<span class=\"bp\">./././</span><span class=\"n\">Bar.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kd\">constant</span> <span class=\"bp\">'</span><span class=\"n\">String'</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kim</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.1.0-rc1/bin/lean` exited with code 1</span>\n</code></pre></div>",
        "id": 392029323,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176429
    },
    {
        "content": "<p>Similarly opening either <code>bar.lean</code> or <code>bar/B.lean</code> gives the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">bar'</span>\n<span class=\"n\">You</span> <span class=\"n\">might</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"kn\">open</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">kim</span><span class=\"bp\">/</span><span class=\"n\">scratch</span><span class=\"bp\">/</span><span class=\"n\">foo'</span> <span class=\"n\">as</span> <span class=\"n\">a</span> <span class=\"n\">workspace</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">editor</span>\n</code></pre></div>",
        "id": 392029371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176456
    },
    {
        "content": "<p>what is the toolchain version?</p>",
        "id": 392029412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176483
    },
    {
        "content": "<p>v4.1.0-rc1, just checking now with latest nightly</p>",
        "id": 392029449,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176509
    },
    {
        "content": "<p>Same behaviour on <code>nightly-2023-09-19</code>.</p>",
        "id": 392029532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176541
    },
    {
        "content": "<p>Ah, the default <code>roots</code> for a <code>lean_lib</code> is <code>#[toUpperCamelCase name]</code></p>",
        "id": 392029833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176709
    },
    {
        "content": "<p>meaning that even if you call it <code>bar</code> lake will be looking for <code>Bar.lean</code> and <code>Bar/A.lean</code></p>",
        "id": 392029887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176736
    },
    {
        "content": "<p>Okay, I think I this point we can ping <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> and leave it with them.</p>",
        "id": 392029898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176747
    },
    {
        "content": "<p>Options:</p>\n<ol>\n<li>We insist that the names of <code>lean_lib</code>s start with a capital --- and error if not.</li>\n<li>We make things work with lower-case <code>lean_lib</code>s.</li>\n</ol>\n<p>I don't particularly mind which (as long as option 1. actually errors).</p>",
        "id": 392029968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695176771
    },
    {
        "content": "<p>oh, apparently there is also <code>libName</code> which is also defaulted to <code>toUpperCamelCase name</code>, so I guess a library can have three \"names\" for resolution purposes</p>",
        "id": 392030011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176806
    },
    {
        "content": "<p>my 2c: remove the <code>toUpperCamelCase</code> from these defaults. We can have a default convention of using upper camel case for lib names, but we shouldn't do any extra re-casing if the user puts a lowercase lib name anyway</p>",
        "id": 392030263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695176947
    },
    {
        "content": "<p>Wait did someone say earlier that if <code>lake build</code> doesn't build it, it can't be built? Then I don't know how to make a lean project. After following the instructions aren't you left with a file called name_of_project.lean  containing some random hello world thing? I usually just ignore this file (because it's code so I don't understand it) and the Lakefile (because I don't understand it either) and just start developing in the directory which has got the same level as the project name. IIRC everything works. Am I misrembering?</p>",
        "id": 392052282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695191610
    },
    {
        "content": "<p>It works, but only as much as any single file project works</p>",
        "id": 392052594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695191814
    },
    {
        "content": "<p>those files are not officially a part of any library and will not be built by <code>lake build</code></p>",
        "id": 392052688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695191878
    },
    {
        "content": "<p>The recommendation is to replace the hello world file with your own code, not ignore it</p>",
        "id": 392052812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695191929
    },
    {
        "content": "<p>And this has to be one of those stupid files which imports all the files in your project and which never used to exist? This is a compulsory file in any lean 4 project despite the fact that it could be made programatically? Is this mentioned in any documentation?</p>",
        "id": 392052981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192025
    },
    {
        "content": "<p>You can make a project without the stupid import everything file, but you have to modify your lakefile to do it</p>",
        "id": 392053054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192078
    },
    {
        "content": "<p>But it's ok to delete the hello world bit?</p>",
        "id": 392053248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192193
    },
    {
        "content": "<p>yes of course</p>",
        "id": 392053257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192202
    },
    {
        "content": "<p>I have no understanding of these files, I don't know what's ok any more</p>",
        "id": 392053291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192228
    },
    {
        "content": "<p>I thought what I was doing (ignoring everything) was ok</p>",
        "id": 392053349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192245
    },
    {
        "content": "<p>well it's fine as long as everything works for you</p>",
        "id": 392053372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192268
    },
    {
        "content": "<p>There's some <code>main</code> mentioned, I have no idea what that is but it sounds like the kind of thing you shouldn't be deleting</p>",
        "id": 392053419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192302
    },
    {
        "content": "<p>that's because the default project is a binary, while math projects probably want a lib</p>",
        "id": 392053448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192325
    },
    {
        "content": "<p>I just prove theorems, I've never had to deal with <code>main</code>, I don't know what the difference is between a module, a library and any of these other CS code words</p>",
        "id": 392053561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192374
    },
    {
        "content": "<p>a library (<code>lean_lib</code>) is something that compiles to make oleans</p>",
        "id": 392053598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192399
    },
    {
        "content": "<p>an executable (<code>lean_exe</code>) is something that goes through compilation into a program you can run</p>",
        "id": 392053629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192423
    },
    {
        "content": "<p>math projects basically never need the latter</p>",
        "id": 392053643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192435
    },
    {
        "content": "<p>when you use <code>lake new foo math</code> it will automatically set up a library for you</p>",
        "id": 392053763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192493
    },
    {
        "content": "<p>But it still makes a hello world file IIRC</p>",
        "id": 392053791,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192513
    },
    {
        "content": "<p>not one with a <code>def main</code> though</p>",
        "id": 392053805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192525
    },
    {
        "content": "<p>just <code>def hello := \"world\"</code></p>",
        "id": 392053817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192531
    },
    {
        "content": "<p>testing it now, it actually doesn't create the folder, just a single file containing the hello world</p>",
        "id": 392053864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192572
    },
    {
        "content": "<p>Can it instead make a file saying</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- change this file to a file which imports all your theorems</span>\n<span class=\"c1\">-- eg</span>\n<span class=\"c1\">-- import Foo.basic</span>\n<span class=\"c1\">-- import Foo.main_theorem</span>\n<span class=\"c1\">-- and put your theorems in the `Foo` directory</span>\n</code></pre></div>\n<p>if you called your project <code>Foo</code>?</p>",
        "id": 392054124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192710
    },
    {
        "content": "<p>well the point of a template is to show you that</p>",
        "id": 392054199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192730
    },
    {
        "content": "<p>I see.</p>",
        "id": 392054225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695192746
    },
    {
        "content": "<p>so it should just do that with some foobar theorems</p>",
        "id": 392054233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695192751
    },
    {
        "content": "<p>Here's a sample \"look ma, no import all file\" project:</p>\n<p><code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">Â«</span><span class=\"n\">my</span><span class=\"bp\">-</span><span class=\"n\">project</span><span class=\"bp\">Â»</span>\n\n<span class=\"c1\">-- require mathlib from git</span>\n<span class=\"c1\">--   \"https://github.com/leanprover-community/mathlib4.git\"</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MyProject</span> <span class=\"n\">where</span>\n  <span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">`</span><span class=\"n\">MyProject</span><span class=\"o\">]</span>\n</code></pre></div>\n<p><code>MyProject/A.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><code>MyProject/B.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">MyProject.A</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p><code>lake build</code> will build everything in <code>MyProject</code>, and files can import each other as demonstrated. There is no <code>MyProject.lean</code> file in the project.</p>",
        "id": 392054694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695193013
    },
    {
        "content": "<p>As of <code>v4.1.0-rc1</code>, this template is automatically created:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">v4.1.0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span> <span class=\"n\">new</span> <span class=\"n\">my_project</span> <span class=\"n\">math</span>\n</code></pre></div>\n<p>creates a <code>my_project/MyProject.lean</code> and a <code>my_project/MyProject/Basic.lean</code>.</p>\n<p>Further, <code>my_project/MyProject.lean</code> contains:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- This module serves as the root of the `MyProject` library.</span>\n<span class=\"c1\">-- Import modules here that should be built as part of the library.</span>\n<span class=\"kn\">import</span> <span class=\"bp\">Â«</span><span class=\"n\">MyProject</span><span class=\"bp\">Â».</span><span class=\"n\">Basic</span>\n</code></pre></div>",
        "id": 392060019,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695195679
    },
    {
        "content": "<p>I think this is pretty much the behaviour we want, no?</p>",
        "id": 392060082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695195713
    },
    {
        "content": "<p>(Maybe a minor improvement would be to have some logic that omits the <code>Â«</code> and <code>Â»</code> when they are unneeded.)</p>",
        "id": 392060170,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695195740
    },
    {
        "content": "<p>Oh, great to wake up and realise it was not just stupid me. Thanks!</p>\n<p>Perhaps we can update <a href=\"https://leanprover-community.github.io/install/project.html\">the page</a> mentioning <code>lake +v4.1.0-rcl</code> (and possibly some hints for newcomers about the evolution of the cabbalistic <code>4.1.0-rcl</code>) instead of <code>lean4:nightly-2023-02-04</code>?</p>",
        "id": 392061503,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1695196365
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#in-a-new-project\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#in-a-new-project</a> has the correct instructions. This duplication is unfortunate.</p>",
        "id": 392061728,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695196464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>, note that is it <code>rc1</code> (i.e. release candidate one) rather than <code>rcl</code>.</p>",
        "id": 392067375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695198585
    },
    {
        "content": "<p>In the link Sebastian has just provided there is the much better suggestion to use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"o\">:</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n</code></pre></div>\n<p>rather than <code>lake +x</code> for any \"fixed\" x. This incantation says: please use whatever toolchain Mathlib is currently using!</p>",
        "id": 392067571,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695198644
    },
    {
        "content": "<p>I hope that in the near future there will just be no need to specify any <code>+x</code> incantations.</p>",
        "id": 392067854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695198739
    },
    {
        "content": "<p>In fact I made a PR earlier today suggesting removing this from the leanprover-community instructions:</p>\n<p><a href=\"https://github.com/leanprover-community/leanprover-community.github.io/pull/365\">https://github.com/leanprover-community/leanprover-community.github.io/pull/365</a></p>",
        "id": 392068002,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695198798
    },
    {
        "content": "<p>I think the two reasonable alternatives here are:</p>\n<ul>\n<li>have the instructions everywhere advise using <code>lake +leanprover-community/mathlib4:lean-toolchain</code>, and then transition (hopefully as soon as the release of <code>v4.1.0</code>) to just advising using <code>lake</code>.</li>\n<li>have the instructions already just advise using <code>lake</code></li>\n</ul>",
        "id": 392068275,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695198876
    },
    {
        "content": "<p>Isn't that still problematic when mathlib is currently on an RC? Well, it will <em>probably</em> work, just download first a stable and then an RC Lean</p>",
        "id": 392069109,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695199203
    },
    {
        "content": "<p>And it will reliably do that only when people have upgraded to the unmerged elan PR as well as set their default toolchain correctly</p>",
        "id": 392069781,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695199482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20lake.20new/near/392061728\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#in-a-new-project\">https://github.com/leanprover-community/mathlib4/wiki/Using-mathlib4-as-a-dependency#in-a-new-project</a> has the correct instructions. This duplication is unfortunate.</p>\n</blockquote>\n<p>Well, I would say that is more than unfortunate. Especially because it is the first where one lands from <a href=\"https://leanprover-community.github.io/index.html\">the entry page</a>, clicking on \"Working on Lean Projects\".</p>",
        "id": 392075916,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1695201707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/help.20with.20lake.20new/near/392028846\">said</a>:</p>\n<blockquote>\n<p>no</p>\n</blockquote>\n<p>I am confused about this claim that <code>lake build</code> will only work for files which are \"targets in the project\". This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>buzzard@buster:~/lean-projects$<span class=\"w\"> </span>lake<span class=\"w\"> </span>new<span class=\"w\"> </span>Foo<span class=\"w\"> </span>math\ninfo:<span class=\"w\"> </span>Downloading<span class=\"w\"> </span>lean-toolchain\nbuzzard@buster:~/lean-projects$<span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span>Foo\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>ls\nFoo.lean<span class=\"w\">  </span>lakefile.lean<span class=\"w\">  </span>lean-toolchain\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>mkdir<span class=\"w\"> </span>Foo\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span>Foo\nbuzzard@buster:~/lean-projects/Foo/Foo$<span class=\"w\"> </span>cat<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>Defs.lean\nimport<span class=\"w\"> </span>Mathlib\ndef<span class=\"w\"> </span>a<span class=\"w\"> </span>:<span class=\"w\"> </span>Nat<span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">37</span>\nbuzzard@buster:~/lean-projects/Foo/Foo$<span class=\"w\"> </span>cat<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>Theorems.lean\nimport<span class=\"w\"> </span>Foo.Defs\n\nexample<span class=\"w\"> </span>:<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">37</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span>rfl\nbuzzard@buster:~/lean-projects/Foo/Foo$<span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span>..\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Foo.Theorems\nerror:<span class=\"w\"> </span>missing<span class=\"w\"> </span>manifest<span class=\"p\">;</span><span class=\"w\"> </span>use<span class=\"w\"> </span><span class=\"sb\">`</span>lake<span class=\"w\"> </span>update<span class=\"sb\">`</span><span class=\"w\"> </span>to<span class=\"w\"> </span>generate<span class=\"w\"> </span>one\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>lake<span class=\"w\"> </span>update\ncloning<span class=\"w\"> </span>https://github.com/leanprover-community/mathlib4.git<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/mathlib\ncloning<span class=\"w\"> </span>https://github.com/mhuisi/lean4-cli.git<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/Cli\ncloning<span class=\"w\"> </span>https://github.com/gebner/quote4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/Qq\ncloning<span class=\"w\"> </span>https://github.com/JLimperg/aesop<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/aesop\ncloning<span class=\"w\"> </span>https://github.com/leanprover/std4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/std\ncloning<span class=\"w\"> </span>https://github.com/EdAyers/ProofWidgets4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/proofwidgets\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">0</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Fetching<span class=\"w\"> </span>proofwidgets<span class=\"w\"> </span>cloud<span class=\"w\"> </span>release\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">7</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\nAttempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">3777</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDownloaded:<span class=\"w\"> </span><span class=\"m\">3777</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span>attempted<span class=\"w\"> </span><span class=\"m\">3777</span>/3777<span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"m\">100</span>%<span class=\"w\"> </span>success<span class=\"o\">)</span>\nDecompressing<span class=\"w\"> </span><span class=\"m\">3777</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nunpacked<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">5923</span><span class=\"w\"> </span>ms\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\n<span class=\"o\">[</span><span class=\"m\">1</span>/2<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Foo\nbuzzard@buster:~/lean-projects/Foo$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Foo.Theorems\n<span class=\"o\">[</span><span class=\"m\">3775</span>/3777<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Foo.Defs\n<span class=\"o\">[</span><span class=\"m\">3776</span>/3777<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Foo.Theorems\nbuzzard@buster:~/lean-projects/Foo$\n</code></pre></div>",
        "id": 392126363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1695219092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> For a default <code>math</code> project named <code>Foo</code>, anything under the <code>Foo</code> directory is part of the library <code>Foo</code>. The problem is that, without <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <code>globs</code> code, <code>lake build</code> will not build those files (<code>lake build Foo.&lt;module-name&gt;</code> will though.</p>",
        "id": 392163905,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695231007
    },
    {
        "content": "<p>I've just made an issue to track the camel-casing issue discussed above, to make sure we don't forget it. <a href=\"https://github.com/leanprover/lean4/issues/2567\">https://github.com/leanprover/lean4/issues/2567</a></p>",
        "id": 392220483,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1695251888
    }
]