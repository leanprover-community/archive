[
    {
        "content": "<p>Porting <code>RingTheory.TensorProduct</code> I noticed that there were a few times when <code>simp only [A,B,C]</code> in mathlib3 had to be changed to <code>simp only [A], rw [B], simp only [C]</code>. This is kind of annoying because debugging a failing <code>simp</code> call is slow and you never know what isn't firing if you don't understand the mathematics properly.</p>\n<p>So here's an example on the <code>RingTheory.TensorProduct</code> branch <a href=\"https://github.com/leanprover-community/mathlib4/pull/4004\">!4#4004</a>, which I know isn't ideal, but it at least indicates how far I've got with debugging. The <code>simp</code> call which fails and needs to be turned into a <code>rw</code> is <a href=\"https://github.com/leanprover-community/mathlib4/blob/ecaeab7f0d1601b2edb4e5ec877e308e8630cc8e/Mathlib/RingTheory/TensorProduct.lean#L497-L498\">here</a>, and here's what's going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span> <span class=\"c1\">-- for notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span>\n    <span class=\"c1\">-- `(y + z)` but with a different `+`</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddZeroClass.toAdd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.addZeroClass.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">_</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">A</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">B</span> <span class=\"n\">_</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))))</span>\n        <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Goal is `x * (y + z) = x * y + x * z`</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n  <span class=\"c1\">-- Alternative finish:</span>\n  <span class=\"c1\">-- change x * (y + z) = x * y + x * z -- changes `+` syntactically but not definitionally</span>\n  <span class=\"c1\">-- simp only [mul_add] -- now works</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>In the PR, somehow addition has managed to become a noncanonical addition, which is what seems to stop <code>simp</code> from working, but doesn't stop <code>rw</code>. Hopefully someone will come up with a better example but maybe is this already enough of a clue for people to explain what's going on.</p>",
        "id": 358857932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684275690
    },
    {
        "content": "<p>Uh oh; does this mean <code>simp</code> is keying on the instance arguments in the DiscrTree?</p>",
        "id": 358860438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684276985
    },
    {
        "content": "<p><code>RingTheory.TensorProduct</code> not <code>LinearAlgebra.TensorProduct</code>, right?</p>",
        "id": 358861019,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277277
    },
    {
        "content": "<p>Thanks -- fixed</p>",
        "id": 358861336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684277420
    },
    {
        "content": "<p><code>simp only [(mul_add)] </code> works here</p>",
        "id": 358861385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277453
    },
    {
        "content": "<p><code>simp [(X)]</code> is a standard trick to fix <code>simp [X]</code> not working</p>",
        "id": 358861409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277463
    },
    {
        "content": "<p><code>simp only [mul_add x]</code> also works, but I saw an example of the form <code>forall x y z, x * (y + z) = ...</code> where you didn't have access to the variables.</p>",
        "id": 358861471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684277507
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358861385\">said</a>:</p>\n<blockquote>\n<p><code>simp only [(mul_add)] </code> works here</p>\n</blockquote>\n<p>Whatever is going on?</p>",
        "id": 358861483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684277519
    },
    {
        "content": "<p><code>mul_add</code> by itself is treated like <code>@mul_add</code> I think. <code>(mul_add)</code> is the same as <code>@mul_add _ _ _</code></p>",
        "id": 358861537,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277531
    },
    {
        "content": "<p><code>simp</code> treats it as a lemma name not an expression</p>",
        "id": 358861554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277545
    },
    {
        "content": "<p>Like <code>#check mul_add</code> vs <code>#check (mul_add)</code></p>",
        "id": 358861564,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277554
    },
    {
        "content": "<p>So I think the cause of the failure is the same as whatever causes <code>simp [@mul_add]</code> to fail</p>",
        "id": 358861598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277575
    },
    {
        "content": "<p>Not that I know what that is</p>",
        "id": 358861611,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684277581
    },
    {
        "content": "<p>I can't get the bracket trick to work on lines 1191-1193 of RingTheory.TensorProduct. The Lean 3 proof <code>simp only [module_aux_apply, mul_smul, smul_comm a₁ b₂, algebra.tensor_product.tmul_mul_tmul, linear_map.mul_apply]</code> becomes </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">),</span> <span class=\"n\">Algebra.TensorProduct.tmul_mul_tmul</span><span class=\"o\">]</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">moduleAux_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">smul_comm</span> <span class=\"n\">a₁</span> <span class=\"n\">b₂</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>in Lean 4 -- but regardless of what the Lean 3 proof is, is it surprising that this can't be compressed (by me) to one line in Lean 4? Note also that \"you have to randomly put brackets around some of the proofs\" is not particularly user-friendly.</p>",
        "id": 358862262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684277944
    },
    {
        "content": "<blockquote>\n<p>Note also that \"you have to randomly put brackets around some of the proofs\" is not particularly user-friendly.</p>\n</blockquote>\n<p>Especially since this makes <code>@[simp]</code> useless, as the rule is also \"anything tagged <code>simp</code> that has this problem has to be added manually in <code>()</code>s\"</p>",
        "id": 358863046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684278339
    },
    {
        "content": "<p>Does replacing <code>smul_comm a₁ b₂</code> with <code>smul_comm a₁ b₂ _</code> work?</p>",
        "id": 358863119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684278364
    },
    {
        "content": "<p>And if not, then <code>smul_comm a₁ b₂ (_ : TheRightType)</code> will almost certainly work</p>",
        "id": 358863159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684278378
    },
    {
        "content": "<p>If this is the \"simp wants the canonical instance\" problem, another thing is <code>@mul_comm _ (_)</code>, where <code>(_)</code> is at the instance argument, and the parentheses cause it to be treated like an implicit argument instead.</p>",
        "id": 358863616,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684278660
    },
    {
        "content": "<p>The goal is <code>⊢ a₂ • a₁ • b₂ • b₁ • m = a₂ • b₂ • a₁ • b₁ • m</code> on line 1193, and <code>rw [smul_comm a₁ b₂]</code> works, but <code>simp only [smul_comm a₁ b₂]</code> fails, <code>simp only [smul_comm a₁ b₂ (b₁ • m)]</code> works, <code>simp only [(smul_comm a₁ b₂)]</code> fails.</p>",
        "id": 358863767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684278726
    },
    {
        "content": "<p>The paren trick only makes a difference for unapplied lemmas</p>",
        "id": 358864192,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684279000
    },
    {
        "content": "<p>Did <code>simp only [smul_comm a₁ b₂ _]</code> fail? What type is <code>m</code>?</p>",
        "id": 358864232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684279029
    },
    {
        "content": "<p>This works on line 497 <code>simp [@mul_add _ (_) (_) (_), @add_mul _ (_) (_) (_), h, h']</code> (though of course it's uglier than before)</p>",
        "id": 358864364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684279114
    },
    {
        "content": "<p>Kyle, I thought we already found that <code>simp[(mul_add), (add_mul), h, h']</code> works fine there too?</p>",
        "id": 358864607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684279268
    },
    {
        "content": "<p>I think the two are equivalent</p>",
        "id": 358864663,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684279311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358864232\">said</a>:</p>\n<blockquote>\n<p>Did <code>simp only [smul_comm a₁ b₂ _]</code> fail? What type is <code>m</code>?</p>\n</blockquote>\n<p><code>simp only [smul_comm a₁ b₂ _]</code> fails. The relevant types are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2364979</span>\n<span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2364982</span>\n<span class=\"n\">B</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2364985</span>\n<span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2364988</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹¹</span><span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹⁰</span><span class=\"o\">:</span> <span class=\"n\">AddCommMonoid</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁹</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁸</span><span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">A</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁷</span><span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">B</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁶</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁵</span><span class=\"o\">:</span> <span class=\"n\">Module</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝⁴</span><span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝³</span><span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝²</span><span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝¹</span><span class=\"o\">:</span> <span class=\"n\">IsScalarTower</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">SMulCommClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">a₁</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">b₁</span><span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"n\">a₂</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">b₂</span><span class=\"o\">:</span> <span class=\"n\">B</span>\n</code></pre></div>",
        "id": 358873071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684284404
    },
    {
        "content": "<p>Then I predict <code>simp only [smul_comm a₁ b₂ (_ : M)]</code> will work</p>",
        "id": 358875877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684285526
    },
    {
        "content": "<p>Indeed it does work. But the bottom line is that this is very confusing for users. My mental model of <code>simp</code> is \"try <code>rw [X]</code> for every <code>X</code> which looks like it might work\" and this is clearly not what's happening here, in the sense that <code>rw</code> works but <code>simp</code> needs some hints. Why is this happening? Is it worth opening an issue? Do you have any idea how to minimise? This is confusing for users.</p>",
        "id": 358977321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684328427
    },
    {
        "content": "<p>My guess it that <code>simp</code> gives up on the typeclass argument to <code>smul_comm </code> rather than finding it by unification</p>",
        "id": 358977834,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684328549
    },
    {
        "content": "<p>Is there a <code>simp -vvvv</code> mode?</p>",
        "id": 358977988,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684328589
    },
    {
        "content": "<p>Which is a general pattern in Lean 4; there are many places where typeclass search is no longer allowed to fall back to unification. I think this was a deliberate choice to avoid confusion, but I can't help but feel this consistently makes things more confusing.</p>",
        "id": 358978061,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684328606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358977988\">said</a>:</p>\n<blockquote>\n<p>Is there a <code>simp -vvvv</code> mode?</p>\n</blockquote>\n<p>Do you just mean <code>set_option trace.Meta.Tactic.simp true</code> or something else?</p>",
        "id": 358978472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684328709
    },
    {
        "content": "<p><code>simp only [smul_comm a₁ b₂]</code> -&gt; </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"n\">inst</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">SMulCommClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span>\n<span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"n\">a₁</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">b₁</span><span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"n\">a₂</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">b₂</span><span class=\"o\">:</span> <span class=\"n\">B</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a₂</span> <span class=\"bp\">•</span> <span class=\"n\">a₁</span> <span class=\"bp\">•</span> <span class=\"n\">b₂</span> <span class=\"bp\">•</span> <span class=\"n\">b₁</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span> <span class=\"bp\">•</span> <span class=\"n\">b₂</span> <span class=\"bp\">•</span> <span class=\"n\">a₁</span> <span class=\"bp\">•</span> <span class=\"n\">b₁</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n<span class=\"n\">Messages</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">TensorProduct.lean</span><span class=\"o\">:</span><span class=\"mi\">1195</span><span class=\"o\">:</span><span class=\"mi\">6</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">discharge</span><span class=\"bp\">?</span><span class=\"o\">:</span> <span class=\"n\">SMulCommClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.discharge</span><span class=\"o\">]</span> <span class=\"n\">smul_comm</span> <span class=\"n\">a₁</span> <span class=\"n\">b₂</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">discharge</span> <span class=\"n\">hypotheses</span>\n      <span class=\"n\">SMulCommClass</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 358978671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684328759
    },
    {
        "content": "<p>I confess to not knowing about that. Is it helpful?</p>",
        "id": 358978703,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684328762
    },
    {
        "content": "<p>Oh, I was expecting that to be <code>SMulCommClass A B ?_</code>. I'm even more confused about why it's stuck there. Maybe it forgot to instantiate the metavariable  before doing TC search?</p>",
        "id": 358978907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684328810
    },
    {
        "content": "<p>Thanks! That should be helpful to me though maybe not verbose enough in general</p>",
        "id": 358979734,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684329024
    },
    {
        "content": "<p>You can also switch on <code>isDefEq</code> for more fun (I forget its full name, but <code>set_option</code> is one of the few places where autocomplete currently works well in Lean 4, unlike imports and theorem names...)</p>",
        "id": 358979913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684329075
    },
    {
        "content": "<p>Yeah and tracing <code>synthInstance</code> too</p>",
        "id": 358980078,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684329120
    },
    {
        "content": "<p>I don’t know how many times I’ve had to break out a giant failing<code>simp</code> (that worked ML3) into line by line <code>rw</code> because I can’t see inside</p>",
        "id": 358980602,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684329245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/358979913\">said</a>:</p>\n<blockquote>\n<p>(I forget its full name, but <code>set_option</code> is one of the few places where autocomplete currently works well in Lean 4, unlike imports and theorem names...)</p>\n</blockquote>\n<p>What's this about theorem names?</p>",
        "id": 358981880,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684329574
    },
    {
        "content": "<p>Autocomplete: I'll start a new thread. I had assumed this was well-known. Maybe I'm doing something wrong</p>",
        "id": 358985588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684330538
    },
    {
        "content": "<p>I tried to minimise this more. Is this behaviour expected?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Ring.Defs</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">AddZeroClass</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span> <span class=\"c1\">-- note AddZeroClass -&gt; Add -&gt; HAdd</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"n\">R</span> <span class=\"n\">bar</span><span class=\"o\">))</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- ⊢ a * (b + c) = a * b + a * c</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>I don't know whether randomly making <code>def</code>s and throwing them into the typeclass system is asking for trouble. Note that in <code>LinearAlgebra.TensorProduct</code> we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- porting note: This is added as a local instance for `SMul.aux`.</span>\n<span class=\"c1\">-- For some reason type-class inference in Lean 3 unfolded this definition.</span>\n<span class=\"kd\">def</span> <span class=\"n\">addMonoid</span> <span class=\"o\">:</span> <span class=\"n\">AddMonoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"o\">(</span><span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.Eqv</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">addMonoid</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 359648592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684500320
    },
    {
        "content": "<p>Probably that should have been <code>reducible</code></p>",
        "id": 359650098,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684500657
    },
    {
        "content": "<p>That fixes the simple example</p>",
        "id": 359650288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684500693
    },
    {
        "content": "<p>Rather annoyingly it doesn't fix the RingTheory.TensorProduct example (although mathlib compiles up to this point with the definition made reducible)</p>",
        "id": 359653785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684501356
    },
    {
        "content": "<p>OK so maybe the reducible def is a red herring. This demonstrates the issue on master:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span> <span class=\"c1\">-- for notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- works fine</span>\n  <span class=\"n\">done</span>\n\n<span class=\"c1\">-- stuff which comes up in the below trace</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Distrib.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">AddCon.Quotient</span> <span class=\"o\">(</span><span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.Eqv</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span>\n    <span class=\"c1\">-- `(y + z)` but with `+` coming from `AddZeroClass` instead of via `Distrib`</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)))</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- Goal is `x * (y + z) = x * y + x * z`</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">*</span>\n    <span class=\"c1\">-- `(y + z)` but with `+` coming from `Distrib` (the default `+`)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HAdd.hAdd</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHAdd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">inferInstance</span><span class=\"o\">)))</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"c1\">-- now works</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>The relevant trace is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>...\n[Meta.isDefEq] ❌ AddZeroClass.toAdd =?= Distrib.toAdd ▼\n  [] ❌ AddZeroClass.toAdd =?= Distrib.toAdd ▼\n    [] ❌ inferInstance.2 =?= NonUnitalNonAssocSemiring.toDistrib.2 ▼\n      [] ❌ AddSemigroup.toAdd =?= AddSemigroup.toAdd ▼\n        [] ❌ AddMonoid.toAddSemigroup.1 =?= AddMonoid.toAddSemigroup.1 ▼\n          [] ❌ AddSemigroup.toAdd =?= { add := fun x x_1 ↦ x + x_1 } ▼\n            [] ❌ (Function.Surjective.addSemigroup Quotient.mk'' (_ : Function.Surjective Quotient.mk'')\n                    (_ :\n                      ∀ (x x_1 : FreeAddMonoid (A × B)),\n                        Quotient.mk'' (x + x_1) = Quotient.mk'' (x + x_1))).1 =?= { add := fun x x_1 ↦ x + x_1 } ▼\n              [] ❌ { add := Add.add } =?= { add := fun x x_1 ↦ x + x_1 } ▼\n                [] ❌ Add.add =?= fun x x_1 ↦ x + x_1 ▼\n                  [] ❌ fun x x_1 ↦ x + x_1 =?= fun a ↦ Add.add a ▼\n                    [] ❌ A ⊗[R] B =?= AddCon.Quotient (addConGen (TensorProduct.Eqv R A B)) ▼\n                      [] ❌ TensorProduct =?= @AddCon.Quotient\n                      [onFailure] ❌ A ⊗[R] B =?= AddCon.Quotient (addConGen (TensorProduct.Eqv R A B))\n                      [onFailure] ❌ A ⊗[R] B =?= AddCon.Quotient (addConGen (TensorProduct.Eqv R A B))\n                [onFailure] ❌ { add := Add.add } =?= { add := fun x x_1 ↦ x + x_1 }\n                [onFailure] ❌ { add := Add.add } =?= { add := fun x x_1 ↦ x + x_1 }\n\n[Meta.Tactic.simp.discharge] @mul_add, failed to assign instance\n      Add (A ⊗[R] B)\n    sythesized value\n      Distrib.toAdd\n    is not definitionally equal to\n      AddZeroClass.toAdd\n</code></pre></div>",
        "id": 359684230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684507583
    },
    {
        "content": "<p>It looks to me like <code>Meta.isDefEq</code> is telling lies with <code> [onFailure] ❌ A ⊗[R] B =?= AddCon.Quotient (addConGen (TensorProduct.Eqv R A B))</code>. Any idea why?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">TensorProduct</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">TensorProduct.Eqv</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">Quotient</span>\n</code></pre></div>",
        "id": 359684420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684507628
    },
    {
        "content": "<p>Is it irreducible somehow?</p>",
        "id": 359689292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684508619
    },
    {
        "content": "<p>And can you get to a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that fails to prove the equality of those types by <code>rfl</code>?</p>",
        "id": 359689518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684508667
    },
    {
        "content": "<p>They're definitionally equal. The three examples near the top of the code are all <code>rfl</code>. I wouldn't know where to start answering your question (or, in some sense, what it means)</p>",
        "id": 359713014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684513937
    },
    {
        "content": "<p>Does <code>[onFailure] ❌ A ⊗[R] B =?= AddCon.Quotient (addConGen (TensorProduct.Eqv R A B))</code> indicate that Lean can get into a state where this is not proved by <code>rfl</code>?</p>",
        "id": 359713159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684513977
    },
    {
        "content": "<p>I'm concerned there might be some unpleasant eta-and-quotients problem going on here</p>",
        "id": 359759244,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684527246
    },
    {
        "content": "<p>But maybe it just means \"not proved by refl with reducible transparency\"</p>",
        "id": 359759353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684527293
    },
    {
        "content": "<p>Which is still a problem, because somehow we've ended up unfolded on the RHS but not the LHS and now lean says \"oh, these aren't reducibly equal any more\"</p>",
        "id": 359759521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684527359
    },
    {
        "content": "<p>I think this is the failure:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">iR</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">iA</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">iRA</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">iB</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">iRB</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span> <span class=\"c1\">-- for notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n      <span class=\"bp\">@</span><span class=\"n\">Distrib.toAdd</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toDistrib</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n                  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.TensorProduct.instSemiringTensorProductToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToModuleToModule</span>\n                <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span> <span class=\"n\">B</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">))))</span>\n    <span class=\"bp\">=</span>\n      <span class=\"bp\">@</span><span class=\"n\">AddZeroClass.toAdd</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">inferInstance</span>\n          <span class=\"o\">(</span><span class=\"n\">AddZeroClass</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">TensorProduct.addZeroClass</span> <span class=\"n\">R</span> <span class=\"n\">iR</span> <span class=\"n\">A</span> <span class=\"n\">B</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">A</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">A</span> <span class=\"n\">iA</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonUnitalNonAssocSemiring.toAddCommMonoid</span> <span class=\"n\">B</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toNonUnitalNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring</span> <span class=\"n\">B</span> <span class=\"n\">iB</span><span class=\"o\">)))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">iR</span> <span class=\"n\">iA</span> <span class=\"n\">iRA</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Algebra.toModule</span> <span class=\"n\">R</span> <span class=\"n\">B</span> <span class=\"n\">iR</span> <span class=\"n\">iB</span> <span class=\"n\">iRB</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n          <span class=\"kd\">by</span>\n            <span class=\"n\">with_reducible_and_instances</span>\n              <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 359761482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684528076
    },
    {
        "content": "<p>replacing <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=inferInstance#doc\">docs4#inferInstance</a> with <code>id</code> fixes it!?</p>",
        "id": 359761749,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684528165
    },
    {
        "content": "<p>Also the name of <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Algebra.TensorProduct.instSemiringTensorProductToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToModuleToModule#doc\">docs4#Algebra.TensorProduct.instSemiringTensorProductToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToModuleToModule</a> is outrageous</p>",
        "id": 359762040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684528274
    },
    {
        "content": "<p>Maybe this is less painful to look at:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.TensorProduct</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">TensorProduct</span> <span class=\"c1\">-- for notation</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Distrib.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Distrib.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">with_reducible_and_instances</span>\n              <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 359762643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684528482
    },
    {
        "content": "<p>I hope you're laughing because this helps, as opposed to my having completely misunderstood something :-) I've never seen <code>with_reducible_and_instances</code> before (as you can probably guess from my earlier posts). Is this example a problem? Is it a \"diamond\" if different instances aren't definitionally equal at this level of reducibility?</p>",
        "id": 359762904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684528607
    },
    {
        "content": "<p>I'm laughing because mine was outrageously long</p>",
        "id": 359763137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684528713
    },
    {
        "content": "<p>Yours doesn't look like quite the same state as mine (mine is exactly what <code>simp</code> tried), but probably it makes sense to debug yours first</p>",
        "id": 359763222,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684528742
    },
    {
        "content": "<p>I'm surprised that mine isn't the same as yours, I've been looking at these terms for hours today and I thought that the <code>Add</code> point was was precisely where they were diverging and it was all typeclass inference after that.</p>",
        "id": 359763451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684528815
    },
    {
        "content": "<p>Note that <a href=\"#narrow/stream/287929-mathlib4/topic/!4.234120.20Analysis.2EConvex.2EStrictConvexSpace/near/359761959\">this</a> is yet another example from the port where <code>simp</code> is failing but <code>rw</code>ing the appropriate lemma saves the day.</p>",
        "id": 359763853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684528976
    },
    {
        "content": "<p>(a) Are you expecting my example (or more generally our examples) to not fail and (b) could it be fixed by some <code>simp!</code> tactic which tries harder?</p>",
        "id": 359764111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684529084
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/leanprover-community/mathlib4/compare/remove-weird-TensorProduct-instance\">https://github.com/leanprover-community/mathlib4/compare/remove-weird-TensorProduct-instance</a> will help?</p>",
        "id": 359764521,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684529262
    },
    {
        "content": "<p>I think the problem is not <code>simp</code>, but the rules for typeclass unification in the face of type wrappers</p>",
        "id": 359764565,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684529277
    },
    {
        "content": "<p>Maybe making <code>TensorProduct</code> reducible would solve the problem!</p>",
        "id": 359764640,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684529293
    },
    {
        "content": "<p>(after all, it is \"just\" the quotient of a FreeAddMonoid; it's not like we put any incompatible instances on it)</p>",
        "id": 359764728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684529329
    },
    {
        "content": "<p>I tried making <code>TensorProduct</code> reducible and a simp call in the same file broke</p>",
        "id": 359764752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684529340
    },
    {
        "content": "<p>That might be because of hacks that were added during porting</p>",
        "id": 359764811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684529355
    },
    {
        "content": "<p>So you think that this is not a lean issue but a mathlib issue? In which case we could move to <a class=\"stream\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4\">#mathlib4</a></p>",
        "id": 359764903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684529386
    },
    {
        "content": "<p>Maybe typeclass unification in the face of type wrappers is still sufficiently leany</p>",
        "id": 359765770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684529713
    },
    {
        "content": "<p>There's also the related (new?) gotcha that <code>{ add := fun (a b : A) =&gt; .. }</code> and <code>{ add := fun (a b : id A) =&gt; .. }</code> are no longer defeq instances.</p>",
        "id": 359766657,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684530028
    },
    {
        "content": "<p>So we should make <code>id</code> reducible? ;-)</p>",
        "id": 359766737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684530065
    },
    {
        "content": "<p>I actually wanted to write <code>ᵒᵖ</code>, but that's been changed to a structure recently.  But I think we have plenty of other <code>def MyType := ..</code>.</p>",
        "id": 359766913,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684530127
    },
    {
        "content": "<p><code>Lex</code> might be a reasonable example</p>",
        "id": 359767795,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684530465
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/359766657\">said</a>:</p>\n<blockquote>\n<p>There's also the related (new?) gotcha that <code>{ add := fun (a b : A) =&gt; .. }</code> and <code>{ add := fun (a b : id A) =&gt; .. }</code> are no longer defeq instances.</p>\n</blockquote>\n<p>I think this is pretty much the same gotcha</p>",
        "id": 359767894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684530490
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/359764811\">said</a>:</p>\n<blockquote>\n<p>That might be because of hacks that were added during porting</p>\n</blockquote>\n<p>How do I see the diff between what mathlib3port thought and what Floris thought in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2539\">!4#2539</a> ? After the squash merge has the relevant commit (the one generated by the script) vanished?</p>",
        "id": 359770792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684531590
    },
    {
        "content": "<p>I'm sad we don't have a good answer to that</p>",
        "id": 359770869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531625
    },
    {
        "content": "<p>RingTheory.TensorProduct compiles on branch <code>remove-weird-TensorProduct-instance</code> BTW</p>",
        "id": 359770893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684531641
    },
    {
        "content": "<p>Your best options are:</p>\n<ul>\n<li>open up the porting PR and look at the original commits there</li>\n<li>download the latest version from mathport, and pretend the hundreds of lines of warnings aren't there</li>\n</ul>",
        "id": 359770932,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531658
    },
    {
        "content": "<p>The first option doesn't capture any additional hacks that were added in further porting PRs</p>",
        "id": 359771020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531690
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Distrib.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">B</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">with_reducible_and_instances</span>\n              <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>still fails on <code>remove-weird-TensorProduct-instance</code></p>",
        "id": 359771143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684531745
    },
    {
        "content": "<p>Thanks for checking, I didn't bother doing a build locally, and of course was punished by having to wait for the entire build to get oleans</p>",
        "id": 359771506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531919
    },
    {
        "content": "<p>I'm not really surprised, but it was worth a try</p>",
        "id": 359771591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531935
    },
    {
        "content": "<p>I think diagnosing the failure that made us need that instance in the first place might help work out what's going on here</p>",
        "id": 359771631,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684531953
    },
    {
        "content": "<p>I tried making <code>TensorProduct</code> reducible but it's horrible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"n\">AddCon.addMonoid</span> <span class=\"o\">(</span><span class=\"n\">addConGen</span> <span class=\"o\">(</span><span class=\"n\">Eqv</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">))</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">AddCommMonoid.toAddMonoid</span>\n</code></pre></div>\n<p>etc (200 errors)</p>",
        "id": 359775011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684533687
    },
    {
        "content": "<p>(on your branch,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">nsmul_succ</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Nat.succ_eq_one_add</span><span class=\"o\">,</span> <span class=\"n\">TensorProduct.one_smul</span><span class=\"o\">,</span> <span class=\"n\">TensorProduct.add_smul</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>fixes the first one, and then all hell breaks loose)</p>",
        "id": 359775333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684533835
    },
    {
        "content": "<p>(Re the diff, I just downloaded the raw files after each relevant commit from GH and then compared locally)</p>",
        "id": 359775596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684533963
    },
    {
        "content": "<p>So I'm now out of ideas and out of my depth with this one. Note that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">AddZeroClass.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Distrib.toAdd</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n            <span class=\"n\">with_reducible_and_instances</span>\n              <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>I have no idea what this <code>with_reducible_and_instances</code> thing is about, or how to debug further.</p>",
        "id": 359777397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684534844
    },
    {
        "content": "<p>OK, next example (found by Jeremy Tan in porting PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/4120\">!4#4120</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Topology.MetricSpace.Isometry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">PF</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">PE</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">PF</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">PE</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">PF</span> <span class=\"bp\">→</span> <span class=\"n\">PE</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">Isometry</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">PF</span><span class=\"o\">)</span>  <span class=\"o\">:</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- no change</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hi.dist_eq</span><span class=\"o\">]</span> <span class=\"c1\">-- dist (f p) (f p) -&gt; dist p p</span>\n  <span class=\"n\">change</span> <span class=\"n\">dist</span> <span class=\"n\">p</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 359782224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684537326
    },
    {
        "content": "<p><code>simp only [hi.dist_eq p p]</code> doesn't work, <code>simp only [(hi.dist_eq)]</code> doesn't work</p>",
        "id": 359782349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684537409
    },
    {
        "content": "<p>Solved: this one is fixed by changing <code>{PF : Type _}</code> to <code>{PF : Type u}</code>. OK so what the heck is going on there?</p>",
        "id": 359782538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684537527
    },
    {
        "content": "<p>This is the second time today that a problem has been solved by changing <code>Type _</code> to <code>Type u</code>. Is <code>Type _</code> considered harmful?</p>",
        "id": 359782665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684537585
    },
    {
        "content": "<p>(<a href=\"#narrow/stream/287929-mathlib4/topic/LinearAlgebra.2EDual/near/359692985\">first time</a>)</p>",
        "id": 359782698,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684537620
    },
    {
        "content": "<p>OK next one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Filtered</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span> <span class=\"n\">CategoryTheory.Category</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">CategoryTheory.Limits</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SmallCategory</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmallCategory</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">IsFiltered</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">FinCategory</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k'</span> <span class=\"n\">k''</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">k'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kf</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">gf</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">k'</span> <span class=\"bp\">⟶</span> <span class=\"n\">kf</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">⟶</span> <span class=\"n\">j'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">kf</span> <span class=\"n\">f</span> <span class=\"bp\">⟶</span> <span class=\"n\">k''</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">k''</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k''</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k''</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">gf</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">j</span> <span class=\"bp\">≫</span> <span class=\"n\">gf</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Bifunctor.map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bifunctor.map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- does something</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Bifunctor.map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- does something</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>No <code>Type _</code> in sight, the bracket trick doesn't fix it, it's unfortunately now my bedtime. This came from <a href=\"https://github.com/leanprover-community/mathlib4/pull/3605\">!4#3605</a> (now merged).</p>",
        "id": 359785017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684539093
    },
    {
        "content": "<p>One might hope that this one is minimisable to something mathlib-free without too much trouble.</p>",
        "id": 359785529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684539480
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/359782665\">said</a>:</p>\n<blockquote>\n<p>Is <code>Type _</code> considered harmful?</p>\n</blockquote>\n<p>I'd say yes. It's certainly far more harmful than it was in lean 3.</p>\n<p>The lean 4</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">something</span> <span class=\"o\">:</span> <span class=\"n\">that_uses</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is the same as the Lean 3</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">something</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">that_uses</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>But not the same as using <code>variable {A : Type _}</code> in Lean 3</p>",
        "id": 359830628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684570716
    },
    {
        "content": "<p>Should we repurpose <code>Type*</code> to mean <code>variable {A : Type*}</code>?</p>",
        "id": 359831347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684570981
    },
    {
        "content": "<p>I would like it to mean <code>universe uA</code> <code>{A : Type uA}</code></p>",
        "id": 359832177,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684571277
    },
    {
        "content": "<p>Yeah sorry that's I meant</p>",
        "id": 359834803,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684572195
    },
    {
        "content": "<p>If Type _ is a footgun, wouldn't it be better to suggest changing it?</p>",
        "id": 359840752,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684573999
    },
    {
        "content": "<p>You mean, in core Lean?</p>",
        "id": 359840826,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1684574032
    },
    {
        "content": "<p>It's not so much that <code>Type _</code> is a new footgun, but that <code>variable</code> is much better at aiming things towards your feet than it used to be</p>",
        "id": 359842175,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684574446
    },
    {
        "content": "<p>Oh <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bifunctor.map_id_comp#doc\">docs4#CategoryTheory.Bifunctor.map_id_comp</a> just doesn't work at all with <code>simp</code>;  here's a much simpler example (just copying the definition of the declaration):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Products.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₃</span><span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_id_comp</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">Functor.map_comp</span><span class=\"o\">,</span> <span class=\"n\">prod_comp</span><span class=\"o\">,</span> <span class=\"n\">Category.comp_id</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- closes goal</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 359872281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684583077
    },
    {
        "content": "<p>Now mathlib-free: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Category</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n  <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">10</span> <span class=\"s2\">\" ⟶ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Category.Hom</span> <span class=\"c1\">-- \\hom</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Category.id</span>  <span class=\"c1\">-- \\b1</span>\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">80</span> <span class=\"s2\">\" ≫ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Category.comp</span> <span class=\"c1\">-- \\gg</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">Hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X.1</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">X.2</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.2</span><span class=\"o\">)</span>\n  <span class=\"n\">id</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">𝟙</span> <span class=\"n\">X.1</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"n\">X.2</span><span class=\"o\">⟩</span>\n  <span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">f.1</span> <span class=\"bp\">≫</span> <span class=\"n\">g.1</span><span class=\"o\">,</span> <span class=\"n\">f.2</span> <span class=\"bp\">≫</span> <span class=\"n\">g.2</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₃</span><span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Functor'</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Category.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">W</span>\n  <span class=\"n\">map</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">26</span> <span class=\"s2\">\" ⥤ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Functor'</span> <span class=\"c1\">-- \\func</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_id_comp</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[(</span><span class=\"n\">map_id_comp</span><span class=\"o\">)]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_id_comp</span> <span class=\"n\">F</span> <span class=\"n\">W</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"c1\">-- does nothing</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_id_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- closes goal</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>What's going on here?</p>",
        "id": 359882734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684586005
    },
    {
        "content": "<p>So in summary, I'm baffled by: (1) the above example (mathlib-free), (2) <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/359782538\">this example</a> (using mathlib) where changing <code>Type _</code> to <code>Type u</code> makes <code>simp</code> magically work, and (3) the discussion about tensor products above, where I am unclear about whether <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/359771143\">that</a> is something which needs to be fixed in mathlib and, if so, how to fix it. They're all examples from the port where <code>simp [X]</code> failed but <code>rw [X]</code> worked.</p>",
        "id": 359883277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684586189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> any ideas? I've tried to summarise this thread in the above post.</p>",
        "id": 359883646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684586315
    },
    {
        "content": "<p>The MWE example fails because <code>map_id_comp F W f g</code> has the type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Functor'.map</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"o\">((</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and the goal has type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Functor'.map</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n    <span class=\"n\">map_id_comp</span> <span class=\"n\">F</span> <span class=\"n\">W</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 359905996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684593297
    },
    {
        "content": "<p>It worked in Lean 3. Do you understand why?</p>",
        "id": 359906815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684593549
    },
    {
        "content": "<p>My guess is that the <code>(W, X).fst</code> subterm is entered into the discrimination tree without being reduced, which means that it will not match <code>W</code></p>",
        "id": 359906822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684593551
    },
    {
        "content": "<p>In this case you can fix the issue at the simp lemma</p>",
        "id": 359906960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684593591
    },
    {
        "content": "<p>this also works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_id_comp</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_id_comp</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 359907162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684593639
    },
    {
        "content": "<p>this is a bug, I think</p>",
        "id": 359907201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684593651
    },
    {
        "content": "<p>Is there some way that an end user like me can see this forest of discrimination trees somehow?</p>",
        "id": 359910997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684594820
    },
    {
        "content": "<p>I'm using this for testing right now</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"discriminate\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">@</span><span class=\"n\">DiscrTree.mkPath</span> <span class=\"n\">true</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">map_id_comp</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">×</span> <span class=\"n\">D</span> <span class=\"bp\">⥤</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n      <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">F.map</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">discriminate</span> <span class=\"n\">Functor'.map</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">⟶</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span>\n  <span class=\"n\">discriminate</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Prod.mk</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"bp\">⟶</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 359911694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684595062
    },
    {
        "content": "<p>Here's an even simpler version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">discriminate</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst</span>\n  <span class=\"n\">discriminate</span> <span class=\"n\">W</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.DiscrTree.Key.proj</span> <span class=\"bp\">`</span><span class=\"n\">Prod</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">Lean.Meta.DiscrTree.Key.const</span> <span class=\"bp\">`</span><span class=\"n\">Prod.mk</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">Lean.Meta.DiscrTree.Key.fvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">32614</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">Lean.Meta.DiscrTree.Key.fvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">32616</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">Lean.Meta.DiscrTree.Key.fvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">32983</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">Lean.Meta.DiscrTree.Key.fvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">32984</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n<span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Lean.Meta.DiscrTree.Key.fvar</span> <span class=\"o\">(</span><span class=\"n\">Lean.Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_uniq</span> <span class=\"mi\">32983</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 359912220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684595233
    },
    {
        "content": "<p>As I understand it this should be reduced</p>",
        "id": 359912266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684595250
    },
    {
        "content": "<p>so that they are the same</p>",
        "id": 359912290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684595257
    },
    {
        "content": "<p>It appears this is deliberate, this is the action of the <code>simpleReduce := true</code> flag in DiscrTree, which was added in response to a previous mathlib bug report</p>",
        "id": 359914074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684595795
    },
    {
        "content": "<p>basically without it you can't have simp lemmas like <code>(W, X).fst = W</code> because they look like <code>W = W</code> to simp</p>",
        "id": 359914218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684595846
    },
    {
        "content": "<p>So do we just have to add a ton of little simp lemmas like <code>(W,X).fst = W</code>?</p>",
        "id": 359923792,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684599438
    },
    {
        "content": "<p>I think this requires some more design work, because we can't just undo the previous bugfix, there is a tension here</p>",
        "id": 359924627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684599805
    },
    {
        "content": "<p>like, do you want that to be a simp lemma or not?</p>",
        "id": 359924670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684599821
    },
    {
        "content": "<p>should simp see through it or not?</p>",
        "id": 359924704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684599835
    },
    {
        "content": "<p>the example that is used in the <code>DiscrTree</code> docstring is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">liftOn_mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">Quot.liftOn</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(which is a real simp lemma in mathlib)</p>",
        "id": 359924895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684599914
    },
    {
        "content": "<p>If we had a separate tactic that does all such reductions, the we wouldn’t need any additional silly simp lemmas, and for the category theory library we could just add that tactic to <code>aesop_cat</code>’s rules</p>",
        "id": 359925934,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684600341
    },
    {
        "content": "<p>In lean3 it was quite common to use <code>dsimp only</code> for such a purpose</p>",
        "id": 359926409,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684600519
    },
    {
        "content": "<p>I think it might make sense to let simp apply lemmas up to reducible defeq as normal (meaning that <code>liftOn_mk</code> et al would loop and are not marked <code>simp</code>), and then when it is done to postprocess any remaining result by doing reducible defeq reductions (i.e. <code>dsimp only</code>)</p>",
        "id": 359927060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684600780
    },
    {
        "content": "<p>without that follow up step something like <code> Quot.liftOn (Quot.mk r a) f h = sorry</code> would be left unreduced because simp would look at it and see <code>f a</code> and hence have nothing to do</p>",
        "id": 359927190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684600828
    },
    {
        "content": "<p>BTW I recently ran into an example where <code>rw</code> doesn’t work (without explicitly filling in some parameters) but <code>simp only …</code> does. It didn’t involve any binders, and <code>rw</code> really should have worked. It came up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4113\">!4#4113</a> . I didn’t think it was a big deal, but if it is, I could try to minimize the example.</p>",
        "id": 359928359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684601242
    },
    {
        "content": "<p>Specifically it was the <code>simp only [&lt;- types_comp_apply]</code> steps in that PR</p>",
        "id": 359928564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684601307
    },
    {
        "content": "<p>Hard to say, it doesn't sound familiar</p>",
        "id": 359929636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684601764
    },
    {
        "content": "<p>I thought it might be related, because I suspected some differences in reduction strategies were to blame here as well.</p>",
        "id": 359930994,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684602394
    },
    {
        "content": "<p>But I didn’t really spend too much time investigating.</p>",
        "id": 359931089,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684602440
    },
    {
        "content": "<p>I'm quite surprised by a failure illustrated in <code>Example 2</code> below. It has the characteristics that:</p>\n<ol>\n<li><code>simp only [Pi.smul_apply]</code> fails but both <code>simp only [Pi.smul_apply _]</code> and <code>rw [Pi.smul_apply]</code> work,</li>\n<li>the failure is triggered by adding <code>let</code> statement to the context <em>which does not change the goal</em>.</li>\n</ol>\n<p>Here are the examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Pi.Algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Algebra.Basic</span>\n\n<span class=\"c1\">-- Example 1: succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- Example 2: fails!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- Fails!</span>\n</code></pre></div>",
        "id": 386568325,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692697083
    },
    {
        "content": "<p>Further experimentation reveals other things like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Example 3: succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- Example 4: succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n\n<span class=\"c1\">-- Example 5: succeeds</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">Algebra.toSMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"k\">have</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- succeeds</span>\n</code></pre></div>",
        "id": 386568388,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692697104
    },
    {
        "content": "<p>(This came up in the course of trying to understand why I had to write <code>Pi.smul_apply _</code> instead of just <code>Pi.smul_apply</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6666\">#6666</a> )</p>",
        "id": 386568594,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692697188
    },
    {
        "content": "<p>If you bump <code>maxHeartbeats.synthInstance</code> does Example 2 succeed?</p>",
        "id": 386569009,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692697346
    },
    {
        "content": "<p>Nope. I just tried adding: <code>set_option synthInstance.maxHeartbeats 10000000</code> and the failure persists (everything is instant btw.)</p>",
        "id": 386569204,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692697437
    },
    {
        "content": "<p>What does <code>trace.Meta.synthInstance</code> look like between the Example 1 and 2? (Sorry, I would look but am not at a computer.)</p>",
        "id": 386571172,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692698198
    },
    {
        "content": "<p>If I place <code>set_option trace.Meta.synthInstance true</code> at the top of the file and then place the cursor over the <code>simp only</code> lines, then for both <code>Example 1</code> and <code>Example 2</code> I see the same result, namely:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.synthInstance</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"bp\">▶</span>\n</code></pre></div>",
        "id": 386571558,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692698337
    },
    {
        "content": "<p>I should asked for <code>isDefEq</code>! Here is the failure </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000443</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">bar</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">α</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000439</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">bar</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000431</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000366</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulWithZero.toSMulZeroClass.1</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000293</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000258</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">SMul.smul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000252</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n              <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000249</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000234</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n                  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000230</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000023</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">SMul.smul</span>\n                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000004</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n                    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000110</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000012</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">SMul.smul</span>\n                      <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n                      <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000003</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n          <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000006</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>vs </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000002</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Algebra.toSMul</span>\n</code></pre></div>",
        "id": 386575695,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692699825
    },
    {
        "content": "<p>Note that changing <code>CommRing</code> to <code>Ring</code> makes things succeed.</p>",
        "id": 386577103,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692700336
    },
    {
        "content": "<p>Going through <code>Algebra</code> does seem to happen quite often with <code>CommRing</code>. Is this intended?</p>",
        "id": 386577263,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692700399
    },
    {
        "content": "<p>I don't know (and thanks for digging into this btw!).</p>",
        "id": 386577415,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692700443
    },
    {
        "content": "<p>I don't understand why adding something to the context using <code>let</code> can have such an (or indeed any) effect and I wonder should this be the case.</p>\n<p>In fact my understanding here is all very shallow, what I really want to know is: can we make <code>simp</code> work in cases like this?</p>",
        "id": 386577858,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692700594
    },
    {
        "content": "<p>This is odd. Replacing <code>simp only</code> with <code>rw</code> in Example 2 gives unification success</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">001067</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">bar</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">α</span>\n  <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">001064</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">bar</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">001052</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000927</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulWithZero.toSMulZeroClass.1</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000843</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000824</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">▶</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n          <span class=\"o\">[]</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">000000</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 386580287,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692701416
    },
    {
        "content": "<p>That's right, I even highlighted this in my first post!</p>",
        "id": 386580339,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692701434
    },
    {
        "content": "<p>Even weirder (I think) is that <code>simp only [Pi.smul_apply _]</code> works whereas <code>simp only [Pi.smul_apply]</code> fails!</p>",
        "id": 386580392,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692701461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/386577858\">said</a>:</p>\n<blockquote>\n<p>I don't understand why adding something to the context using <code>let</code> can have such an (or indeed any) effect and I wonder should this be the case.</p>\n<p>In fact my understanding here is all very shallow, what I really want to know is: can we make <code>simp</code> work in cases like this?</p>\n</blockquote>\n<p>I've seen this already and in the past it was that the <code>let</code> introduces some <code>mdata</code> in the target expression.  I do not exactly know why, but I suspect that this is some of the issue.</p>",
        "id": 386581306,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692701779
    },
    {
        "content": "<p>Here is how you can see it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- Example 2: fails!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"k\">do</span>  <span class=\"c1\">-- app</span>\n    <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ctorName</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">run_tac</span> <span class=\"k\">do</span>  <span class=\"c1\">-- mdata</span>\n    <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ctorName</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- Fails!</span>\n</code></pre></div>",
        "id": 386581512,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692701871
    },
    {
        "content": "<p>So, the <code>let</code> binding changes the expression underlying your goal.  <code>.mdata</code> is <code>DefEq</code> to the original thing, but there might be a missing <code>consumeMData</code> somewhere.</p>",
        "id": 386581809,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692701971
    },
    {
        "content": "<p>This is how the two expressions begin:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- pre let: inspect '(r • f) a = r • f a'</span>\n<span class=\"bp\">'</span><span class=\"n\">Eq'</span> <span class=\"c1\">-- app</span>\n<span class=\"bp\">|-'</span><span class=\"n\">_uniq.1612'</span> <span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|-'</span><span class=\"n\">HSMul.hSMul'</span> <span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|-'</span><span class=\"n\">_uniq.1612'</span> <span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Tactic.LeanUtils.to_left_right._hyg.47'</span><span class=\"o\">)</span> <span class=\"c1\">-- forallE</span>\n\n<span class=\"c1\">-- post let: inspect '(r • f) a = r • f a'</span>\n<span class=\"bp\">'</span><span class=\"o\">[</span><span class=\"n\">noImplicitLambda</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">a'</span> <span class=\"c1\">-- mdata</span>\n<span class=\"bp\">|-'</span><span class=\"n\">Eq'</span> <span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|-'</span><span class=\"n\">_uniq.1612'</span> <span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|-'</span><span class=\"n\">HSMul.hSMul'</span> <span class=\"c1\">-- app</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-'</span><span class=\"n\">_uniq.1612'</span> <span class=\"c1\">-- fvar</span>\n<span class=\"bp\">|</span>   <span class=\"bp\">|</span>   <span class=\"bp\">|-</span><span class=\"o\">(</span><span class=\"bp\">'</span><span class=\"n\">a._</span><span class=\"bp\">@.</span><span class=\"n\">Mathlib.Tactic.LeanUtils.to_left_right._hyg.47'</span><span class=\"o\">)</span> <span class=\"c1\">-- forallE</span>\n</code></pre></div>",
        "id": 386582296,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692702173
    },
    {
        "content": "<p>The extra mdata field is <code>[noImplicitLambda := true]</code>, while <code> (r • f) a = r • f a</code> is the \"initial\" expression.</p>",
        "id": 386582346,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692702195
    },
    {
        "content": "<p>Matthew, maybe this is entirely unrelated, but I have seen you fight very successfully a great battle with the <code>let</code>s in instances.  I wonder now if the <code>mdata</code> could be responsible for some of the issues...</p>",
        "id": 386583988,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692702816
    },
    {
        "content": "<p>As far as I know, <code>mdata</code> is a new feature of Lean 4 <code>Expr</code>: Lean 3 <code>expr</code> did not have an <code>mdata</code> field.</p>",
        "id": 386584165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692702879
    },
    {
        "content": "<p>I haven't read most of the details in this topic, but this bug was also observed in the last nightly bump <a href=\"https://github.com/leanprover-community/mathlib4/pull/6019\">#6019</a> (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6019#discussion_r1297060795\">see comment</a> and the comment below that) where sometimes <code>simp_rw</code> wouldn't work without these extra <code>_</code>. (<code>simp_rw</code> is implemented as <code>simp only</code>-calls)</p>",
        "id": 386585156,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692703307
    },
    {
        "content": "<p>Interesting. I think having to add these extra underscores is very bad because it means the user cannot trust <code>simp</code> to find the relevant lemmas and now needs to learn API by hand.</p>",
        "id": 386597002,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692707409
    },
    {
        "content": "<p>Interesting. I think having to add these extra underscores is very bad because it means the user cannot trust <code>simp</code> to find the relevant lemmas and now needs to learn API by hand.</p>",
        "id": 386597460,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692707556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/386583988\">said</a>:</p>\n<blockquote>\n<p>Matthew, maybe this is entirely unrelated, but I have seen you fight very successfully a great battle with the <code>let</code>s in instances.  I wonder now if the <code>mdata</code> could be responsible for some of the issues...</p>\n</blockquote>\n<p>Good idea. Though most of the problems I’ve seen, that we thought were due to expanded <code>let</code>’s, were our old friend structure eta, there are still some slowdowns in AG I cannot place. I’ll keep an eye peeled</p>",
        "id": 386598462,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692707883
    },
    {
        "content": "<p>Anyway, there is something else at play, since even manually replacing the target expression with the cleared <code>mdata</code>, leaves <code>simp</code> unable to continue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"c1\">-- Example 2: fails!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">run_tac</span> <span class=\"k\">do</span>  <span class=\"c1\">-- app</span>\n    <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ctorName</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">run_tac</span> <span class=\"k\">do</span>  <span class=\"c1\">-- before: mdata</span>\n              <span class=\"c1\">-- after: app</span>\n    <span class=\"k\">let</span> <span class=\"n\">tgt</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"k\">let</span> <span class=\"n\">mtgt</span> <span class=\"o\">:=</span> <span class=\"n\">tgt.consumeMData</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"before: {tgt.ctorName}</span><span class=\"se\">\\n</span><span class=\"s2\">after: {mtgt.ctorName}\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">new</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">replaceTargetDefEq</span> <span class=\"n\">mtgt</span>\n    <span class=\"n\">setGoals</span> <span class=\"o\">[</span><span class=\"n\">new</span><span class=\"o\">]</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span> <span class=\"c1\">-- Fails!</span>\n</code></pre></div>",
        "id": 386599370,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692708147
    },
    {
        "content": "<p>Also <code>Ring</code> would suffer similar to <code>CommRing</code> I imagine</p>",
        "id": 386599547,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692708202
    },
    {
        "content": "<p>By the way, <em>any</em> underscore seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">)]</span> <span class=\"c1\">-- Success!</span>\n</code></pre></div>",
        "id": 386601183,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692708705
    },
    {
        "content": "<p>Here is where things go off track: we are trying </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulWithZero.toSMulZeroClass.1</span>\n</code></pre></div>\n<p>which unfolds to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and then to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">SMul.smul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span>\n</code></pre></div>\n<p>when it fails and </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>when it succeeds with <code>rw</code></p>",
        "id": 386613797,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692712314
    },
    {
        "content": "<p>That <code>SMul.smul</code> is <code>@SMul.smul R R (Algebra.id R).1</code></p>",
        "id": 386614394,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692712461
    },
    {
        "content": "<p>This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and this doesn't </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Algebra.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 386620155,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692713827
    },
    {
        "content": "<p>In the <code>rfl</code> proof, we again unfold to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 386620584,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692713930
    },
    {
        "content": "<p>It will just never unfold <code>@SMul.smul R R (Algebra.id R).1</code> inside the <code>simp</code></p>",
        "id": 386623008,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692714569
    },
    {
        "content": "<p>I wish I had something that I could add; all I can say is that I'm very grateful that this is still receiving attention.</p>",
        "id": 386623415,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692714679
    },
    {
        "content": "<p>With </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">)]</span>\n</code></pre></div>\n<p>it creates a metavariable for the pi instance of <code>SMul</code> instead of using <code>bar</code> and assigns it during unification</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"bp\">?</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">i</span> <span class=\"bp\">=?=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 386624919,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692715056
    },
    {
        "content": "<p>I am not really talking about anything that I know, but does this look like lean should be waiting a little longer for <em>something</em> to unify?</p>",
        "id": 386626831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692715490
    },
    {
        "content": "<p>Hmm. Actually it does the same thing (creates a metavariable and assigns it) when it fails but then looks again for a pi instance.</p>",
        "id": 386627916,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692715762
    },
    {
        "content": "<p>It looks for the pi SMul instance when it succeeds but it fails to find it after a few attempts.</p>",
        "id": 386628467,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692715889
    },
    {
        "content": "<p>And just carries on to completion</p>",
        "id": 386628537,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692715909
    },
    {
        "content": "<p>These traces are not linear right?</p>",
        "id": 386628739,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692715949
    },
    {
        "content": "<p>What do you mean? The indentation is telling you the tree I guess.</p>",
        "id": 386629980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692716296
    },
    {
        "content": "<p>I get a bunch of separate nodes in the infoview window before expanding. Is this the order that Lean is doing things during its program flow?</p>",
        "id": 386630196,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692716356
    },
    {
        "content": "<p>I guess I was assuming that but I guess I can't be sure.</p>",
        "id": 386630539,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692716447
    },
    {
        "content": "<p>darn it, I minimised to make it mathlib free (this was easy thanks to <a href=\"https://github.com/kbuzzard/MweSkeletons\">https://github.com/kbuzzard/MweSkeletons</a>) but then the problem goes away :-/</p>",
        "id": 386640432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692719360
    },
    {
        "content": "<p>Oh I got it working on the tube home, will post in a bit</p>",
        "id": 386657871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692724176
    },
    {
        "content": "<p>So <a href=\"https://gist.github.com/kbuzzard/9bd2921a539afc6865302e55addafe31\">here</a> is a 500-line repro of the issue with no imports. I'm sure it can be cut down much further: I made it by cutting and pasting from other MWEs I've made over the last year or so.</p>",
        "id": 386661894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692725442
    },
    {
        "content": "<p>I don't see it mentioned above, but <code>simp only [(Pi.smul_apply)]</code> works instead of <code>simp only [Pi.smul_apply _] </code></p>",
        "id": 386662223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692725552
    },
    {
        "content": "<p>This came up repeatedly during the port</p>",
        "id": 386662243,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692725559
    },
    {
        "content": "<p>The problem is that <code>simp only [foo]</code> actually means <code>simp only [@foo]</code>, and if you actually want to use the expression <code>foo</code> as is, it needs to be <code>(foo)</code> to stop <code>simp</code> trying to be clever.</p>",
        "id": 386662276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692725570
    },
    {
        "content": "<p>But does this explain the regression when you randomly add a term to the context?</p>",
        "id": 386665617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692726516
    },
    {
        "content": "<p>No, it just explains why adding a seemingly obvious underscore makes a difference, because actually the change is that you added ~5 underscores, some of them as typeclass arguments</p>",
        "id": 386669717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692728209
    },
    {
        "content": "<p>I'm working on minimising the repro BTW</p>",
        "id": 386672395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692729460
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">algebra_hierarchy_classes_to_comm_ring</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semiring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommRing</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Ring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">algebra_hierarchy_classes_to_comm_ring</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">algebra_hierarchy_morphisms</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">FunLike</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">FunLike.insthasCoeToFun</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CoeFun</span> <span class=\"n\">F</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">↦</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"n\">where</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">FunLike.coe</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">ZeroHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">ZeroHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">OneHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">OneHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MulHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">toFun</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →ₙ* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulHom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">FunLike</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">N</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AddMonoidHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">ZeroHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">AddHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →+ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">AddMonoidHom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">AddMonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">AddHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">ZeroHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MonoidHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">OneHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MonoidHom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonoidHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">MulHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">OneHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">MonoidWithZeroHom</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">ZeroHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">MonoidHom</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →*₀ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MonoidWithZeroHom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">NonUnitalRingHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">α</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonoidWithZeroHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MonoidHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">ZeroHomClass</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →ₙ+* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">NonUnitalRingHom</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">RingHom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">α</span> <span class=\"bp\">→*</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→+</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→ₙ+*</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→*₀</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"s2\">\" →+* \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">RingHom</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">RingHomClass</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MonoidHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">AddMonoidHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n  <span class=\"n\">MonoidWithZeroHomClass</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instRingHomClass</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">RingHomClass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">f.toFun</span>\n\n<span class=\"c1\">-- this is needed to create the troublesome instance `Algebra.instid`</span>\n<span class=\"kd\">def</span> <span class=\"n\">RingHom.id</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">_root_.id..</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">algebra_hierarchy_morphisms</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">HSMul_stuff</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HSMul.hSMul</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"c1\">-- note that the function `SMulZeroClass.toSMul` is what disrupts `simp` later</span>\n<span class=\"kd\">class</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MulZeroClass.toSMulWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">*</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">HSMul_stuff</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Algebra_stuff</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"c1\">-- needed for troublesome `Algebra.instid`</span>\n<span class=\"kd\">def</span> <span class=\"n\">RingHom.toAlgebra'</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">i</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"n\">toRingHom</span> <span class=\"o\">:=</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">-- needed for troublesome `Algebra.instid`</span>\n<span class=\"kd\">def</span> <span class=\"n\">RingHom.toAlgebra</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"n\">i.toAlgebra'</span>\n\n<span class=\"c1\">-- comment this out and the failing `simp` works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Algebra.instid</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommSemiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Algebra</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">RingHom.id</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toAlgebra</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Algebra_stuff</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Pi_stuff</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Pi_stuff</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">oliver_example</span>\n\n<span class=\"kd\">theorem</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">β</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"n\">R</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Algebra.instid</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toSMul</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- they are defeq</span>\n  <span class=\"n\">trivial</span>\n\n<span class=\"c1\">-- this proof works fine</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- as does this one</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- the presence of `bar` messes up the first proof</span>\n<span class=\"c1\">-- set_option trace.Meta.isDefEq true in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n<span class=\"c1\">--  have qux : Algebra.toSMul = bar := rfl</span>\n  <span class=\"n\">fail_if_success</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- but not the second</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span> <span class=\"n\">_</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- The first proof is fixed again if we use `Ring` instead of `CommRing`.</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">SMulZeroClass.toSMul</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smul_apply</span><span class=\"o\">]</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">oliver_example</span>\n</code></pre></div>\n<p>(edit: removed all the monoids)</p>",
        "id": 386674660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692730421
    },
    {
        "content": "<p>That's all I have time for today but hopefully it is enough to help someone who wants to get to the bottom of this random apparently incorrect defeq failure.</p>",
        "id": 386678518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692732147
    },
    {
        "content": "<p>The trace of the failing defeq (obtained with <code>set_option trace.Meta.isDefEq true</code>) is here. If I've not made a mistake <code>Algebra.toSMul</code> and <code>bar</code> are defeq but the second cross in the list below is a failure.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Meta.isDefEq</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">↦</span> <span class=\"n\">bar</span> <span class=\"bp\">▼</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">α</span> <span class=\"bp\">=?=</span> <span class=\"n\">α</span>\n  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">bar</span> <span class=\"bp\">▼</span>\n    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Algebra.toSMul</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulZeroClass.toSMul</span> <span class=\"bp\">▼</span>\n      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Algebra.instid</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMulWithZero.toSMulZeroClass.1</span> <span class=\"bp\">▼</span>\n        <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Algebra.instid</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span> <span class=\"bp\">▼</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n          <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">SMul.smul</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">▼</span>\n            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n              <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">▼</span>\n                <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">↦</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"n\">a</span> <span class=\"bp\">▼</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">✅</span> <span class=\"n\">R</span> <span class=\"bp\">=?=</span> <span class=\"n\">R</span>\n                  <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">▼</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">HMul.hMul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">SMul.smul</span>\n                    <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n                    <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">▼</span>\n                      <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">@</span><span class=\"n\">Mul.mul</span> <span class=\"bp\">=?=</span> <span class=\"bp\">@</span><span class=\"n\">SMul.smul</span>\n                      <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n                      <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"n\">Mul.mul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n          <span class=\"o\">[</span><span class=\"n\">onFailure</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">(</span><span class=\"n\">Algebra.instid</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=?=</span> <span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">x_1</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x_1</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 386678849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692732282
    },
    {
        "content": "<p>They are but it cannot figure that out because it refuses to unfold <code>(Algebra.instid R).1</code> for some reason.</p>",
        "id": 386679778,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692732662
    },
    {
        "content": "<p>My understanding of the trace is that <code>(Algebra.instid R).1</code> is being unfolded, and what is failing is <code>x✝¹ * x✝ =?= SMul.smul x✝¹ x✝</code> for some reason. Lean seems to want to deduce this from <code>@HMul.hMul =?= @SMul.smul</code> which I don't think is true in the generality it asks?</p>",
        "id": 386682274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692733748
    },
    {
        "content": "<p>This failure here</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">✝</span> <span class=\"bp\">=?=</span> <span class=\"n\">SMul.smul</span> <span class=\"n\">x</span><span class=\"bp\">✝¹</span> <span class=\"n\">x</span><span class=\"bp\">✝</span>\n</code></pre></div>\n<p>with <code>pp.all</code> on is <code>@HMul.hMul R R R instHMul x✝¹ x✝ =?= @SMul.smul R R (Algebra.instid R).1 x✝¹ x✝</code> ... aah, maybe I see what you're getting at...</p>",
        "id": 386682708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692733927
    },
    {
        "content": "<p>The fact it flipped it to the other side is also part of the indication it doesn't want to unfold it</p>",
        "id": 386682818,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692733974
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2461\">lean4#2461</a></p>",
        "id": 387258072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692962499
    },
    {
        "content": "<p>Is the following a new example or more of the same?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp [h] -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>It seems especially simple. Fun fact: you can copy-paste this example into either Lean 3 or Lean 4 with no difference (except of course that <code>simp</code> will fail in Lean 4 and succeed in Lean 3).</p>",
        "id": 390538357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694530923
    },
    {
        "content": "<p>Can one change the transparency level unfolded for <code>simp</code> in some way? I didn't see it <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.Config#doc\">docs#Lean.Meta.Simp.Config</a></p>",
        "id": 390546493,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694533135
    },
    {
        "content": "<p>Tracing is not giving a lot to work with</p>",
        "id": 390546625,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694533171
    },
    {
        "content": "<p>At least I don't have to spend 5 hours making it mathlib-free though :D This is a great example and I wonder how much  other stuff it explains.</p>",
        "id": 390546808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694533213
    },
    {
        "content": "<p>Note that the standard hacks <code>simp [(h)]</code> and <code>simp [h _]</code> don't fix the problem.</p>",
        "id": 390547332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694533367
    },
    {
        "content": "<p>Even <code>simp [h (a, b)]</code> fails.</p>",
        "id": 390547548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694533431
    },
    {
        "content": "<p>Related</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp [h] -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 390548060,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694533570
    },
    {
        "content": "<p>Also </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp [h] -- fails</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 390548460,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694533706
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 390548650,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694533775
    },
    {
        "content": "<p>Using Lean 3 and looking at the proof terms constructed with <code>rw</code> and <code>simp</code>, I guess that <code>simp</code> is using some auto-generated congr-lemmas, maybe? (Those lovely <code>ᾰ</code>s make me suspect this.)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">As</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">Ar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span> <span class=\"n\">p.2</span> <span class=\"bp\">=</span> <span class=\"n\">p.2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">As</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  theorem As : ∀ {α β : Type} {f : α × β → β → β},</span>\n<span class=\"cm\">    (∀ (p : α × β), f p p.snd = p.snd) → ∀ (a : α) (b : β), f (a, b) b = b :=</span>\n<span class=\"cm\">  λ {α β : Type} {f : α × β → β → β} (h : ∀ (p : α × β), f p p.snd = p.snd) (a : α) (b : β),</span>\n<span class=\"cm\">    (id_tag tactic.id_tag.simp</span>\n<span class=\"cm\">       (((λ (a a_1 : β) (e_1 : a = a_1) (ᾰ ᾰ_1 : β) (e_2 : ᾰ = ᾰ_1), congr (congr_arg eq e_1) e_2) (f (a, b) b)</span>\n<span class=\"cm\">           b</span>\n<span class=\"cm\">           (h (a, b))</span>\n<span class=\"cm\">           b</span>\n<span class=\"cm\">           b</span>\n<span class=\"cm\">           (eq.refl b)).trans</span>\n<span class=\"cm\">          (propext (eq_self_iff_true b)))).mpr</span>\n<span class=\"cm\">      trivial</span>\n<span class=\"cm\">  -/</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Ar</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">theorem Ar : ∀ {α β : Type} {f : α × β → β → β},</span>\n<span class=\"cm\">  (∀ (p : α × β), f p p.snd = p.snd) → ∀ (a : α) (b : β), f (a, b) b = b :=</span>\n<span class=\"cm\">λ {α β : Type} {f : α × β → β → β} (h : ∀ (p : α × β), f p p.snd = p.snd) (a : α) (b : β),</span>\n<span class=\"cm\">  (id_tag tactic.id_tag.rw (eq.rec (eq.refl (f (a, b) b = b)) (h (a, b)))).mpr (eq.refl (a, b).snd)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 390548905,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694533844
    },
    {
        "content": "<p>Speaking of terms </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 390549504,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> congr lemmas are how simp navigates expressions. The <code>h (a, b)</code> in the term is what it's doing to the LHS of the <code>eq</code> and the <code>eq.refl b</code> is what it's doing to the RHS. You can also read off that <code>h (a, b)</code> is for turning <code>f (a, b) b</code> into <code>b</code>.</p>",
        "id": 390549927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694534157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/390549504\">said</a>:</p>\n<blockquote>\n<p>Speaking of terms </p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"c1\">-- works</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Automation is good, but the human touch is still out of reach...</p>",
        "id": 390550045,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534180
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 390550195,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534231
    },
    {
        "content": "<p><del>Matt, do you have an import for the working example in the last batch?  I get a <code>no progress</code> error.</del></p>",
        "id": 390550658,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534380
    },
    {
        "content": "<p>No imports. Only the first should work but typos might very easily creep in</p>",
        "id": 390550863,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534428
    },
    {
        "content": "<p>I guess I did something else because I get the error copying it back in...</p>",
        "id": 390551041,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534474
    },
    {
        "content": "<p><del>Ok, in your last batch, none of them work for me, not the first, nor the last, because of <code>unit</code>.</del></p>",
        "id": 390551051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534476
    },
    {
        "content": "<p>Trimmed</p>",
        "id": 390551093,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534491
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- goal is now f b = b and is not closed</span>\n</code></pre></div>",
        "id": 390551703,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534651
    },
    {
        "content": "<p>You can also dispense with the two types:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 390551850,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534688
    },
    {
        "content": "<p>How does <code>simp</code> reduce the extra simp args?</p>",
        "id": 390551994,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534719
    },
    {
        "content": "<p>No progress above and here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- simp made no progress</span>\n</code></pre></div>",
        "id": 390552220,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534771
    },
    {
        "content": "<p><code>Unit</code>?</p>",
        "id": 390552445,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694534854
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works!</span>\n</code></pre></div>",
        "id": 390552854,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694534982
    },
    {
        "content": "<p>The proof term is back at <code>eq_self</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span> <span class=\"bp\">↦</span> <span class=\"n\">of_eq_true</span> <span class=\"o\">(</span><span class=\"n\">eq_self</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 390553077,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694535055
    },
    {
        "content": "<p><code>set_option trace.Debug.Meta.Tactic.simp</code> is little more chatty. It says <code>no theorems found for rewriting f (a,b) b</code></p>",
        "id": 390553851,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694535296
    },
    {
        "content": "<p>Turns out that also <code>b</code> is a red herring:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">A</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- no progress</span>\n</code></pre></div>",
        "id": 390554278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694535432
    },
    {
        "content": "<p><code>Bool</code> fails if you want a \"small\" type</p>",
        "id": 390554522,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694535508
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/390538357\">said</a>:</p>\n<blockquote>\n<p>Is the following a new example or more of the same?</p>\n</blockquote>\n<p>I'm not sure I'd expect either <code>simp</code> or <code>rw</code> to work here; there's no syntactic match.</p>",
        "id": 390555948,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694536046
    },
    {
        "content": "<p>If you use <code>simp_all</code> this is what you get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">B</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp_all</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"k\">#print</span> <span class=\"n\">B</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">theorem B : ∀ {f : Prop → Prop} (a : Prop), f (a, a).fst = a → f a = a :=</span>\n<span class=\"cm\">fun {f} a h ↦ of_eq_true (Eq.trans (congrFun (congrArg Eq (id (id h))) a) (eq_self a))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 390556022,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694536076
    },
    {
        "content": "<p>It doesn't seem to work on Patrick's original example. What does <code>simp_all</code> do?</p>",
        "id": 390557646,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694536649
    },
    {
        "content": "<p>Here is also an example, after Eric's comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- no progress</span>\n</code></pre></div>\n<p>In this case, also <code>rw</code> fails, though (and of course <code>exact h</code> does work).</p>",
        "id": 390557685,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694536671
    },
    {
        "content": "<p>I only know what <code>simp_all</code> says when you hover over it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">simp_all</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">stronger</span> <span class=\"n\">version</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*`</span>\n<span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">hypotheses</span> <span class=\"n\">and</span> <span class=\"n\">target</span> <span class=\"n\">are</span> <span class=\"n\">simplified</span> <span class=\"n\">multiple</span> <span class=\"n\">times</span>\n<span class=\"n\">until</span> <span class=\"n\">no</span> <span class=\"n\">simplication</span> <span class=\"n\">is</span> <span class=\"n\">applicable.</span>\n<span class=\"n\">Only</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">dependent</span> <span class=\"n\">propositional</span> <span class=\"n\">hypotheses</span> <span class=\"n\">are</span> <span class=\"n\">considered.</span>\n</code></pre></div>",
        "id": 390557842,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694536730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/390557685\">said</a>:</p>\n<blockquote>\n<p>Here is also an example, after Eric's comment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- no progress</span>\n</code></pre></div>\n<p>In this case, also <code>rw</code> fails, though (and of course <code>exact h</code> does work).</p>\n</blockquote>\n<p>This is a transparency issue. Using </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myid</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>works for all tactics</p>",
        "id": 390558780,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694537122
    },
    {
        "content": "<p>I'd argue this is a transparency <em>feature</em>, not an issue</p>",
        "id": 390559140,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694537247
    },
    {
        "content": "<p>If tactics randomly treat things as transparent then transparency controls become useless (which was pretty much the case in Lean 3)</p>",
        "id": 390559173,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694537265
    },
    {
        "content": "<p>Ok. I meant \"the failure is due to transparency settings\". <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 390559311,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694537307
    },
    {
        "content": "<p>I prefer a useful <code>simp</code> with useless transparency controls rather than a useless <code>simp</code> with \"useful\" transparency controls.</p>",
        "id": 390559433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694537351
    },
    {
        "content": "<p>But this gets back to my continuing confusion here and in <a href=\"https://github.com/leanprover/lean4/pull/2461\">lean4#2461</a>. I thought that <code>simp</code> and <code>rw</code> shared the same default transparency setting (note do not read as transparency setting is <code>.default</code>). It is easy to see that in the <code>rw</code> config but I don't know where to look for <code>simp</code>. If they do share the same default, then I would expect some of these to succeed.</p>",
        "id": 390559735,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694537452
    },
    {
        "content": "<p>I think transparency controls are good and this is something else. But I am just talking out my <span aria-label=\"peach\" class=\"emoji emoji-1f351\" role=\"img\" title=\"peach\">:peach:</span>  atm</p>",
        "id": 390560463,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694537718
    },
    {
        "content": "<p>I think we should make an effort to highlight just how much we care about the issue of simp not firing when we would like, to the Lean developers. I spoke with <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> in person at LFTCM last week and I mentioned <a href=\"https://github.com/leanprover/lean4/issues/2461\">https://github.com/leanprover/lean4/issues/2461</a> (I was very impressed that he knew exactly which issue I meant from the vague description I gave!) The impression I got was that we have not conveyed how big a deal simp not firing is for us.</p>\n<p>I also note that we haven't really addressed Sebastian's question <a href=\"https://github.com/leanprover/lean4/issues/2461#issuecomment-1693292713\">here</a> and we probably should.</p>\n<p>I'd like to say more but I have to run and cook dinner now!</p>",
        "id": 390561616,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1694538151
    },
    {
        "content": "<p>I think the answer to this question is: no there is no such policy.</p>",
        "id": 390561792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538233
    },
    {
        "content": "<p>And I agree that this simp issue is really crucial. I'm porting the sphere eversion project and this issue is using 90% of my time.</p>",
        "id": 390561937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538273
    },
    {
        "content": "<p>Assuming I didn't make a silly mistake </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyProd</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyProd</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyProd.snd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">MyProd</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">p</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">_</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">MyProd.intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n  <span class=\"c1\">-- rw [h] -- works</span>\n</code></pre></div>",
        "id": 390561941,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694538274
    },
    {
        "content": "<p>What would be really really nice would be to have a tactic <code>simp!</code> that would work as the Lean 3 <code>simp</code> and a variant <code>simp!?</code> that would flag lemmas that required extra work, hopefully with advice about how to rewrite a better version.</p>",
        "id": 390562407,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538475
    },
    {
        "content": "<p>you know <code>simp!</code> already exists, right?</p>",
        "id": 390562527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538516
    },
    {
        "content": "<p>No, I don't.</p>",
        "id": 390562872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538667
    },
    {
        "content": "<p>But it doesn't help with my example, so it's something different.</p>",
        "id": 390562941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538704
    },
    {
        "content": "<p>And I can't learn what it does since it displays the docstring of <code>simp</code> and jump to definition jumps to <code>simp</code>.</p>",
        "id": 390563099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538753
    },
    {
        "content": "<p><code>simp‼</code></p>",
        "id": 390563116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538761
    },
    {
        "content": "<p>the docstring of <code>simp</code> should mention the <code>!</code> option</p>",
        "id": 390563178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538787
    },
    {
        "content": "<p>I think it did in lean 3</p>",
        "id": 390563191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538794
    },
    {
        "content": "<p>I guess not</p>",
        "id": 390563371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538846
    },
    {
        "content": "<p>I want <code>simp☢️</code> that tries really hard.</p>",
        "id": 390563395,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694538851
    },
    {
        "content": "<p>there is a short note in the lean 3 changelog:</p>\n<blockquote>\n<ul>\n<li>Add <code>iota_eqn : bool</code> field to <code>simp_config</code>. <code>simp {iota_eqn := tt}</code> uses<br>\n  all non trivial equation lemmas generated by equation/pattern-matching compiler.<br>\n  A lemma is considered non trivial if it is not of the form <code>forall x_1 ... x_n, f x_1 ... x_n = t</code> and<br>\n  a proof by reflexivity. <code>simp!</code> is a shorthand for <code>simp {iota_eqn := tt}</code>.<br>\n  For example, given the goal <code>... |- [1,2].map nat.succ = t</code>, <code>simp!</code> reduces the left-hand-side<br>\n  of the equation to <code>[nat.succ 1, nat.succ 2]</code>. In this example, <code>simp!</code> is equivalent to<br>\n<code>simp [list.map]</code>.</li>\n</ul>\n</blockquote>",
        "id": 390563497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694538895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/390563395\">said</a>:</p>\n<blockquote>\n<p>I want <code>simp☢️</code> that tries really hard.</p>\n</blockquote>\n<p>but which isn't aesop? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 390563591,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694538939
    },
    {
        "content": "<p>Does Aesop know and use all simp lemmas?</p>",
        "id": 390567226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694540400
    },
    {
        "content": "<p>only thing is I'm not sure how good it is as a non-finishing tactic. I think Jannis is working on that?</p>",
        "id": 390568350,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694540858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/simp.20.5BX.5D.20fails.2C.20rw.20.5BX.5D.20works/near/390561792\">said</a>:</p>\n<blockquote>\n<p>I think the answer to this question is: no there is no such policy.</p>\n</blockquote>\n<p>This is in answer to </p>\n<blockquote>\n<p>Is there a mathlib policy about whether two instances should be defeq without unfolding standard defs?</p>\n</blockquote>\n<p>right?</p>",
        "id": 390579595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694545212
    },
    {
        "content": "<p>I think the answer is \"yes, we almost have such a policy, there's <a href=\"https://github.com/leanprover-community/mathlib4/blob/8c31491fa9c95151e0596116748405d262387017/Mathlib/Algebra/HierarchyDesign.lean#L194-L209\">a library note</a> about putting <code>@[reducible]</code> on non-instance <code>def</code>s\"</p>",
        "id": 390579662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694545237
    },
    {
        "content": "<p>Sounds like we should see if a reducible <code>RingHom.toAlgebra</code> will make our lives better. Nothing breaks quickly</p>",
        "id": 390583785,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694547132
    },
    {
        "content": "<p>I think we might still run into trouble because <code>RingHom.id</code> is not (and should not be) reducible</p>",
        "id": 390585122,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694547768
    },
    {
        "content": "<p>I think it might reap some nice performance benefits even if it doesn't address the problems in this thread</p>",
        "id": 390585338,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1694547865
    },
    {
        "content": "<p>I can confirm that making <code>toAlgebra</code> reducible doesn't help with the mwe</p>",
        "id": 390585547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694547984
    }
]