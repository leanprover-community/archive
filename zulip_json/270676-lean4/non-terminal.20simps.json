[
    {
        "content": "<p>When learning Lean 3, I was told that it's considered bad practice to have an unconstrained <code>simp</code> that's not at the end of a proof, and instead should use <code>simp only [blah].</code> To help with this, if I recall correctly there was a <code>squeeze_simp</code> tactic in Lean 3 that helped to convert a <code>simp</code> to a <code>simp only</code> by listing what results <code>simp</code> was using, but in Lean 4 it doesn't seem to exist (or at least not under the same name)</p>\n<p>Is this still a convention in Lean 4 to not have non-terminal <code>simp</code>s? If so, is there a good way to figure out exactly what <code>simp</code> is doing?</p>",
        "id": 359096756,
        "sender_full_name": "Connor Gordon",
        "timestamp": 1684364315
    },
    {
        "content": "<p>Lean4 has <code>simp?</code></p>",
        "id": 359096830,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684364364
    },
    {
        "content": "<p>A huge bonus in lean4 is that <code>dsimp?</code> actually does something useful now!</p>",
        "id": 359096874,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684364399
    },
    {
        "content": "<p>In exchange for <code>ext?</code> :)</p>",
        "id": 359096971,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684364425
    },
    {
        "content": "<p>:(</p>",
        "id": 359096977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684364429
    },
    {
        "content": "<p><code>ext</code> needs some love. I realized today that <code>ext A B</code> doesn't work (sometimes? maybe all the time?) and often an additional <code>intro B</code> is needed.</p>",
        "id": 359097031,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684364468
    },
    {
        "content": "<p>But that''s something to be discussed elsewhere. For this thread, the OP should be perfectly happy with <code>simp?</code> :)</p>",
        "id": 359097206,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1684364534
    },
    {
        "content": "<p>Yes, that works great!</p>",
        "id": 359097230,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684364550
    },
    {
        "content": "<p>In Lean 3 too also (unless I am hallucinating)</p>",
        "id": 359097266,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1684364572
    },
    {
        "content": "<p><code>simp?</code> worked in Lean 3 but was less reliable than <code>squeeze_simp</code>. On the other hand <code>squeeze_dsimp</code> existed in Lean 3 and always gave the answer <code>dsimp only</code> whatever the actual answer was  ;-)</p>",
        "id": 359098082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1684365007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> <a href=\"#narrow/stream/270676-lean4/topic/non-terminal.20simps/near/359096971\">said</a>:</p>\n<blockquote>\n<p>In exchange for <code>ext?</code> :)</p>\n</blockquote>\n<p>A while ago I implemented <code>ext?</code> in <a href=\"https://github.com/leanprover/std4/pull/120\">std4#120</a>, it's just waiting for CI approval and review ;)</p>",
        "id": 359555449,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684478290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> can you take advantage of the new code actions features that Mario implemented? That is, can you make the \"Try this:\" clickable and substitutable as it was in Lean 3?</p>",
        "id": 359627067,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1684495705
    }
]