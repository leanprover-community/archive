[
    {
        "content": "<p>I am trying to figure out how to have lake use <code>pkg-config</code> to use include path and library path for a library using <code>pkg-config</code>.  e.g., in Bash, I'd make the include path <code>moreLeancArgs := #[$(pkg-config --cflags libuv)]</code> and also update <code>moreLinkArgs</code>.</p>\n<p>I've tried a few routes but all the routes I've seen so far look like they would involve a fair bit of code duplication.  Is there a recommended way to do that?</p>",
        "id": 397977929,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698015822
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Lake.2FAlly.20pkg-config.20libraries\">#lean4 &gt; Lake/Ally pkg-config libraries</a> by <span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span>.</p>",
        "id": 397977964,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698015843
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getPkgCflags</span> <span class=\"o\">(</span><span class=\"n\">pkgName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">output</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">IO.Process.output</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"pkg-config\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"--cflags\"</span><span class=\"o\">,</span> <span class=\"n\">pkgName</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">paths</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">output.stdout.splitOn</span> <span class=\"k\">do</span>\n    <span class=\"n\">paths</span> <span class=\"o\">:=</span> <span class=\"n\">paths.push</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">normalize</span>\n  <span class=\"n\">return</span> <span class=\"n\">paths</span>\n</code></pre></div>\n<p>in <code>lakefile.lean</code>?</p>\n<p>Tested with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">script</span> <span class=\"n\">cflags</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">path</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getPkgCflags</span> <span class=\"s2\">\"libuv\"</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n    <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">path</span>\n\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>where it will return an array of <code>-I...</code> or an empty array if not found.</p>",
        "id": 397981964,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698020221
    },
    {
        "content": "<p>You also need to somehow put IO inside the target definition (moreLinkArgs), how to do that?</p>",
        "id": 397982552,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1698020666
    },
    {
        "content": "<p>I think such lake configs are wrapped in SchedulerM which is on top of BaseIO</p>",
        "id": 397982988,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698021002
    },
    {
        "content": "<p>I do not recall if SchedulerM can lift EIO or not. but you can obtain BaseIO from EIO by handling exceptions on your own</p>",
        "id": 397983112,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698021069
    },
    {
        "content": "<p>On the latest nightly, the easiest way to do this is via the new <a href=\"https://github.com/leanprover/lean4/pull/2707\"><code>run_io</code></a> Lake utility.</p>",
        "id": 397984022,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698021659
    },
    {
        "content": "<p>(previously, this could be done by a custom elaborator, but that is currently causing some problems)</p>",
        "id": 397984090,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698021709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> Thanks!  <code>run_io</code> solved the problem.</p>",
        "id": 397997068,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698028964
    }
]