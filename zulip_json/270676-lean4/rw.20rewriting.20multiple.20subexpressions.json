[
    {
        "content": "<p>When does <code>rw</code> rewrite multiple subexpressions, and when does it just rewrite a single subexpression? Are there human-predictable rules?</p>",
        "id": 408415669,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702796053
    },
    {
        "content": "<p>(Is it that all equal subexpressions get rewritten together?)</p>",
        "id": 408415962,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702796349
    },
    {
        "content": "<p>It rewrites only one subexpression, but it can rewrite it in multiple locations.</p>",
        "id": 408421251,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702800801
    },
    {
        "content": "<p>Namely, <code>add_zero</code> rewrites <code>a + 0 = b ∧ a + 0 = c</code> to <code>a = b ∧ a = c</code> but <code>a + 0 = c ∧ b + 0 = c</code> to <code>a = c ∧ b + 0 = c</code>.</p>",
        "id": 408421338,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702800861
    },
    {
        "content": "<p>Ah, got it, thanks! :) (Maybe we should put this behavior in the docstring if anyone gets the chance—and preferably copy the <code>rewrite</code> docstring over to <code>rw</code> as well.)</p>",
        "id": 408425084,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1702803515
    },
    {
        "content": "<p>One of the keywords here is that it does the \"kabstract\" algorithm (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.kabstract#doc\">docs#Lean.Meta.kabstract</a>). It tries unifying the LHS of the rw lemma with every plausible subexpression in the target (\"plausible\" means that the subexpression has the same <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.toHeadIndex#doc\">docs#Lean.Expr.toHeadIndex</a>), and every subexpression that matches gets rewritten.</p>\n<p>Key here is that unification has the side effect of solving for metavariables, which causes the rw lemma to become specialized, so essentially the first match sets which subexpression it looks for in the rest of the expression. (And why metavariables? That's how you instantiate a lemma for isDefEq checks. In particular, rewrite uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.forallMetaTelescopeReducing#doc\">docs#Lean.Meta.forallMetaTelescopeReducing</a> on the type of the rw lemma and then uses <code>mkAppN</code> to feed these to the lemma itself.)</p>",
        "id": 408450485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702827040
    },
    {
        "content": "<p>Note also there's an open PR which will change the behaviour, \"feat: do not instantiate metavariables in kabstract/rw for disallowed occurrences\" <a href=\"https://github.com/leanprover/lean4/pull/2539\">lean4#2539</a>, although it has stalled for a while.</p>",
        "id": 408490103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702856645
    }
]