[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">[</span><span class=\"n\">Pure</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Bind</span> <span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">stacked</span><span class=\"o\">:</span> <span class=\"n\">Eff</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Free.pure</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">Free.bind</span> <span class=\"n\">val</span> <span class=\"n\">cont</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">simplify</span> <span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">extract</span> <span class=\"o\">(</span><span class=\"n\">cont</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>the compiler says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">Eff.extract</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">argument</span> <span class=\"bp\">#</span><span class=\"mi\">5</span> <span class=\"n\">was</span> <span class=\"n\">not</span> <span class=\"n\">used</span> <span class=\"n\">because</span> <span class=\"n\">its</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">family</span> <span class=\"n\">and</span> <span class=\"n\">indices</span> <span class=\"n\">are</span> <span class=\"n\">not</span> <span class=\"kd\">variables</span>\n  <span class=\"n\">Free</span> <span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">])</span> <span class=\"n\">α</span>\n\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>",
        "id": 290150953,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658259900
    },
    {
        "content": "<p>Can you show the definition of <code>Eff</code>?</p>",
        "id": 290184533,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1658280300
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Eff</span>\n\n<span class=\"kd\">class</span> <span class=\"kd\">inductive</span> <span class=\"n\">Has</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Has</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Has</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Has</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- any way to automate this?</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Has</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Has.zero</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">prev</span><span class=\"o\">:</span> <span class=\"n\">Has</span> <span class=\"n\">a</span> <span class=\"n\">xs</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Has</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Has.succ</span> <span class=\"n\">prev</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Union</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">[</span><span class=\"n\">prf</span><span class=\"o\">:</span> <span class=\"n\">Has</span> <span class=\"n\">ε</span> <span class=\"n\">εs</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Union</span> <span class=\"n\">εs</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simplify</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Union</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">]</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"n\">Union.mk</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:=</span> <span class=\"n\">Has.zero</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"c1\">-- example : Union [IO] Unit := Union.mk (IO.println \"Hello\")</span>\n<span class=\"c1\">-- example (M0 : Type -&gt; Type) : Union [M0, IO] Unit := Union.mk (IO.println \"Hello\")</span>\n\n<span class=\"kd\">mutual</span>\n  <span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n  <span class=\"kd\">inductive</span> <span class=\"n\">FreeView</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">_monad</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">_res</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FreeView</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">FreeView</span> <span class=\"n\">ε</span> <span class=\"n\">β</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Free</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">view</span> <span class=\"o\">:</span> <span class=\"n\">FreeView</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Free</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n  <span class=\"c1\">-- | mk : {t: Type u} -&gt; (view : FreeView m α) -&gt; Free m α</span>\n  <span class=\"c1\">-- | mk : {t: Type u} -&gt; (view : FreeView m α) -&gt; (arrs : TCQueue (Free m) t α) -&gt; Free m α</span>\n\n<span class=\"c1\">-- abbrev Arrs (m : Type u -&gt; Type v) : (α β : Type u) -&gt; Prop :=</span>\n  <span class=\"c1\">-- TCQueue $ Free m</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Free.mk</span> <span class=\"o\">(</span><span class=\"n\">FreeView.pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Free.bind</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cont</span><span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Free</span> <span class=\"n\">ε</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">val</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">FreeView.pure</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cont</span> <span class=\"n\">v</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">FreeView.bind</span> <span class=\"n\">mval</span> <span class=\"n\">mcont</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Free.mk</span>\n    <span class=\"o\">(</span><span class=\"n\">FreeView.bind</span> <span class=\"n\">mval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Free.bind</span> <span class=\"o\">(</span><span class=\"n\">mcont</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"n\">cont</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">Free.bind</span> <span class=\"n\">val</span> <span class=\"n\">cont</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">val</span>\n<span class=\"c1\">-- modify here</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Bind</span> <span class=\"o\">(</span><span class=\"n\">Free</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">Free.bind</span>\n</code></pre></div>",
        "id": 290227816,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658319975
    },
    {
        "content": "<p><code>(mcont a')</code> should be smaller than <code>val</code>, which is <code>mk (FreeView.bind mval mcont)</code></p>",
        "id": 290231975,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1658322590
    },
    {
        "content": "<p>Does the <code>termination_by</code> line fix your issue?</p>",
        "id": 290322396,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1658367538
    }
]