[
    {
        "content": "<p>Hi! I was working on a little project and I encountered some strange behavior. Here is a minimal working example</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">IO</span> <span class=\"n\">PUnit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bar</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">myVar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">myVar</span> <span class=\"o\">:=</span> <span class=\"n\">myVar</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{myVar}\"</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>The error I get is that <code>myVar</code> needs to be declared mutably in order to mutate it, but it clearly is. Is this a result of <code>myVar</code> being fixed when I enter the body of <code>baz</code>?  A similar example of nested dos works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo'</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">myVar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">do</span>\n    <span class=\"n\">myVar</span> <span class=\"o\">:=</span> <span class=\"n\">myVar</span> <span class=\"bp\">+</span> <span class=\"mi\">10</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{myVar}\"</span>\n\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>I guess I'm just wondering if the top example is intended behavior (excluding the error message which seems confusing) and if so specifically why? Thanks so much!</p>",
        "id": 369239531,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1687628944
    },
    {
        "content": "<p>Basically, mutable variables are only mutable in when you have nested do/if/for/unless expressions, but when you have a <code>do</code> inside a <code>fun</code> then it's not considered to be nested anymore. It might help remembering that the variables are just \"mutable\" -- the <code>do</code> notation is figuring out how to rewrite your code into functional programming equivalents to pass explicit state around. When you're passing that function to <code>baz</code>, it doesn't have the freedom to change that function so that this state is passed in and returned.</p>",
        "id": 369240305,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687629296
    },
    {
        "content": "<p>In the first example, Lean is seeing that you're trying to mutate <code>myVar</code> in a context where <code>myVar</code> isn't declared as a mutable variable (due to the <code>fun</code> separating this <code>do</code> from the outer <code>do</code>, so from that perspective it's the right error message, but it could probably be improved.</p>",
        "id": 369240560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687629400
    },
    {
        "content": "<p>In the second example, directly nested <code>do</code> notation is handled specially so it's able see <code>myVar</code> as still being mutable.</p>",
        "id": 369240813,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687629500
    },
    {
        "content": "<p>Ah I see, that makes sense, thanks!</p>",
        "id": 369240821,
        "sender_full_name": "Zach Battleman",
        "timestamp": 1687629505
    },
    {
        "content": "<p>I'm actually sort of surprised by the error message here -- I would've expected it to say that <code>myVar</code> is a constant defined outside the scope of the <code>do</code> block. It seems useful to differentiate this error from something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">myVar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">myVar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>where the \"only variables declared using <code>let mut</code> can be mutated\" error message makes more sense</p>",
        "id": 369269619,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687644310
    },
    {
        "content": "<p>I find it even more confusing in a situation like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">`bar` cannot be mutated, only variables declared using</span>\n<span class=\"cm\">`let mut` can be mutated. If you did not intent to mutate</span>\n<span class=\"cm\">but define `bar`, consider using `let bar` instead</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>But I'm not sure whether that information (is a constant defined in the current do-block?) is available to the do macro.</p>",
        "id": 369269896,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687644517
    }
]