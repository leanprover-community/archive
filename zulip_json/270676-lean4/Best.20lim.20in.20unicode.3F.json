[
    {
        "content": "<p>lim with an arrow under it is common throughout analysis and category theory as well.</p>\n<p>I can't seem to find one in the unicode catalogue but maybe those combining characters like combining underscore and combining right arrow could make one: l + combining _ + i + combining _ + m + combining -&gt;.</p>\n<p>I'm trying to find the right combining characters as I write this.</p>\n<p>Bonus if someone can get the arrow the other way.</p>",
        "id": 328116896,
        "sender_full_name": "Dean Young",
        "timestamp": 1676498731
    },
    {
        "content": "<p><code>li͢m</code></p>",
        "id": 328118099,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676499236
    },
    {
        "content": "<p>I think there is not a <code>←</code> version though. This is U+0362 \"Combining double rightwards arrow below\"</p>",
        "id": 328118558,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1676499409
    },
    {
        "content": "<p>I also made this:<br>\nl͟i͟m͟<br>\nif someone can  find a &gt; that goes under just nice it might work. I couldn't find one though.</p>",
        "id": 328324078,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577311
    },
    {
        "content": "<p>Using U+0332 (combining low line)<br>\nU+20D7 (combining right arrow) <br>\nU+0362 (combining double rightwards arrow below)<br>\nU+035F</p>",
        "id": 328324163,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577344
    },
    {
        "content": "<p>li͢m</p>",
        "id": 328324897,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577570
    },
    {
        "content": "<p>l͟i͢m</p>",
        "id": 328325120,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577626
    },
    {
        "content": "<p>those ones kinda suck.</p>",
        "id": 328325188,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577647
    },
    {
        "content": "<p>I would claim that you don't actually want to use notation like this, because font and editor support for combining monospace characters is really bad</p>",
        "id": 328325260,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676577667
    },
    {
        "content": "<p>oh huh ... could come out completely different on a different platform.</p>",
        "id": 328325349,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577695
    },
    {
        "content": "<p>If you want something pretty out of your lean code, you could define a <code>ToLatex : Expr -&gt; String</code> function of some kind</p>",
        "id": 328325525,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676577738
    },
    {
        "content": "<p>Oh that seems fun.</p>",
        "id": 328325609,
        "sender_full_name": "Dean Young",
        "timestamp": 1676577767
    },
    {
        "content": "<p>I'm pretty certain that other people will have tried it, but I haven't seen anyone announce anything. I think it would be a good exercise to build something like that for basic algebra. Once you have that, sharing it might encourage people to share what they tried</p>",
        "id": 328326420,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676578036
    },
    {
        "content": "<p>You could also sidestep the issue by writing \"colim\".</p>",
        "id": 328326654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676578113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Here's a screenshot of something that's in the works (part of what Patrick talked about at IPAM), and it contains a LaTeX pretty printer for <code>Expr</code>:</p>\n<p><a href=\"/user_uploads/3121/AS5LE8wutpRP7A97p59XkFmV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AS5LE8wutpRP7A97p59XkFmV/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/AS5LE8wutpRP7A97p59XkFmV/image.png\"></a></div><p>(Nothing about finsets has really been refined yet. I just happened to be looking at how it handled <code>Mathlib.Algebra.BigOperators.Basic</code>.)</p>",
        "id": 328329994,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676579437
    },
    {
        "content": "<p>Yes, I just watched that talk; very cool!</p>",
        "id": 328332984,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676580605
    }
]