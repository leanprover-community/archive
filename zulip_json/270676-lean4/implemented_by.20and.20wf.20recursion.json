[
    {
        "content": "<p>I got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfunUnsafe</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Error:</span>\n<span class=\"cm\">&gt; invalid 'implemented_by' argument 'myfunUnsafe', 'myfunUnsafe' has type</span>\n<span class=\"cm\">&gt;   {α : Type u_1} → (x : Array α) → Fin (Array.size x) → Array α</span>\n<span class=\"cm\">&gt; but 'myfun._unary' has type</span>\n<span class=\"cm\">&gt;   {α : Type u_1} → (x : Array α) ×' Fin (Array.size x) → Array α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">myfunUnsafe</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n</code></pre></div>\n<p>The error message claims that the type of <code>myfunUnsafe</code> is not correct, but the next doesn't work, of course.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfunUnsafe'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">×'</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Error:</span>\n<span class=\"cm\">&gt; invalid 'implemented_by' argument 'myfunUnsafe'', 'myfunUnsafe'' has type</span>\n<span class=\"cm\">&gt;   {α : Type u_1} → (x : Array α) ×' Fin (Array.size x) → Array α</span>\n<span class=\"cm\">&gt; but 'myfun'' has type</span>\n<span class=\"cm\">&gt;   {α : Type u_1} → (x : Array α) → Fin (Array.size x) → Array α</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">myfunUnsafe'</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myfun'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">myfun'</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n</code></pre></div>\n<p>It seems to be a bug to me.<br>\nAre there any workaround?</p>",
        "id": 402614964,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700196889
    },
    {
        "content": "<p>looks like a bug, the workaround is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myfun'</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">myfun'</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">implemented_by</span> <span class=\"n\">myfunUnsafe</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">myfun'</span> <span class=\"n\">x</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 402615381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700197185
    },
    {
        "content": "<p>Thank you. Should I open an issue?</p>",
        "id": 402615956,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700197404
    },
    {
        "content": "<p>my guess is that something is copying the <code>implemented_by</code> attribute to both the original function and the <code>myfun._unary</code> auxiliary function</p>",
        "id": 402616116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700197486
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2899\">lean4#2899</a></p>",
        "id": 402617230,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700198184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/implemented_by.20and.20wf.20recursion/near/402616116\">said</a>:</p>\n<blockquote>\n<p>my guess is that something is copying the <code>implemented_by</code> attribute to both the original function and the <code>myfun._unary</code> auxiliary function</p>\n</blockquote>\n<p>I confirmed you are right. The <code>myfun._unary</code>, which is generated by <code>Lean.Elab.WF.packDomain</code>, inherits the attributes from the source declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Defining an attribute that just stores names -/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">myExtension</span> <span class=\"o\">:</span>\n    <span class=\"n\">SimpleScopedEnvExtension</span> <span class=\"n\">Name</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerSimpleScopedEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">addEntry</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ns</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ns.push</span>\n    <span class=\"n\">initial</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">getMyExtensionDecls</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadEnv</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">myExtension.getState</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">myattr</span><span class=\"o\">)</span> <span class=\"s2\">\"myattr\"</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">myattr</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Show all declarations that inherits an attribute 'myattr'.\"</span>\n  <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">afterTypeChecking</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">MetaM.run'</span> <span class=\"k\">do</span> <span class=\"n\">myExtension.add</span> <span class=\"n\">declName</span>\n<span class=\"o\">}</span>\n\n<span class=\"sd\">/-------------------/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> In another file -/</span>\n<span class=\"sd\">/-------------------/</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">myattr</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n    <span class=\"n\">myfun</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">`myattr` is attached not only to `myfun` but also to `myfun._unary`.</span>\n<span class=\"cm\">&gt; #[`myfun._unary, `myfun]</span>\n<span class=\"cm\">-/</span>\n<span class=\"k\">#eval</span> <span class=\"n\">getMyExtensionDecls</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:=</span><span class=\"n\">Lean.CoreM</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 402655510,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700213892
    },
    {
        "content": "<p>I am not sure if <code>myfun._unary</code> should have the same attributes as <code>myfun</code>. IMHO, it shouldn't have any special attribute, and the attribute inheritance should be done using another attribute for this purpose, if necessary.</p>",
        "id": 402656753,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700214302
    },
    {
        "content": "<p>Most attributes that I can think of should only go on <code>myfun</code>: Everything that is external (doc related things, tactic registration etc.)<br>\nWhat attributes would have to be put on aux implementation definitions? Are there even any?</p>",
        "id": 402657394,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700214519
    },
    {
        "content": "<p>Here is another terrible example with Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">&gt; (kernel) unknown constant 'myfunZero._unary.proof_1'</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myfunOne</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">myfunOne</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n</code></pre></div>",
        "id": 402658597,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700214917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/implemented_by.20and.20wf.20recursion/near/402657394\">said</a>:</p>\n<blockquote>\n<p>Most attributes that I can think of should only go on <code>myfun</code>: Everything that is external (doc related things, tactic registration etc.)<br>\nWhat attributes would have to be put on aux implementation definitions? Are there even any?</p>\n</blockquote>\n<p>How about <code>specialize</code>?</p>",
        "id": 402660802,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700215562
    },
    {
        "content": "<p>For <code>to_additive</code> you’d want it on both, right?</p>",
        "id": 402671816,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700218800
    },
    {
        "content": "<p>Ah, you are right. The \"definition\" <code>to_additive</code> sees is the generated one using <code>myfunOne._unary</code>, so it also needs <code>myfunZero._unary</code>. The problem in the above example is likely that <code>to_additive</code> doesn't take care of the termination proof. In this sense, it may be the bug of <code>to_additive</code> rather than of <code>implemented_by</code>.</p>",
        "id": 402680545,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700221898
    },
    {
        "content": "<p><code>to_additive</code> does no effort to additivize definitions with well-founded recursion correctly, so it doesn't surprise me that it doesn't work. The workaround it to write both versions (the additive version first) and then connect them using <code>@[to_additive existing]</code>. Note: in your MWE there is no multiplicative structure to additivize, right?</p>",
        "id": 402704079,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1700229423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <code>to_additive</code> example is just an example and not a central problem here. And I still think it is a bug of <code>to_additive</code>; if it is not capable of dealing with well-founded recursion, it should produce an appropriate error, IMHO.</p>",
        "id": 402714029,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700232552
    },
    {
        "content": "<p>Isn’t there a command-form of <code>to_additive</code> that you could apply to <code>myFunOne._unary</code> and then to <code>myFunOne</code> after both have been defined and it would just work? Or is there something fundamental about well-founded recursion that causes issues with <code>to_additive</code>?</p>",
        "id": 402724737,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700235575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/implemented_by.20and.20wf.20recursion/near/402724737\">said</a>:</p>\n<blockquote>\n<p>Isn’t there a command-form of <code>to_additive</code> that you could apply to <code>myFunOne._unary</code> and then to <code>myFunOne</code> after both have been defined and it would just work? Or is there something fundamental about well-founded recursion that causes issues with <code>to_additive</code>?</p>\n</blockquote>\n<p>Hmm, the idea actually works!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myfunOne</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">myfunOne</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">myfunZero._unary</span><span class=\"o\">]</span> <span class=\"n\">myfunOne._unary</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">myfunOne</span> <span class=\"c1\">-- OK</span>\n</code></pre></div>",
        "id": 402726492,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700236177
    },
    {
        "content": "<p>So, the problem on <code>to_additive</code> is maybe that it doesn't generate the name of the additive counterpart of <code>myfunZero._unary</code> correctly.</p>",
        "id": 402726859,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700236297
    },
    {
        "content": "<p>It’s not complete, though. There are “<a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/PreDefinition/WF/Eqns.lean\">unfold equations</a>” attached to <code>myFunOne</code> that are not transferred:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myfunOne</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">x.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">next</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">i.1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">next</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">myfunOne</span> <span class=\"o\">(</span><span class=\"n\">x.swap</span> <span class=\"n\">i</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩)</span> <span class=\"o\">⟨</span><span class=\"n\">next</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x.size_swap</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">x</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.size</span> <span class=\"bp\">-</span> <span class=\"n\">i.1</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">myfunZero._unary</span><span class=\"o\">]</span> <span class=\"n\">myfunOne._unary</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span> <span class=\"n\">myfunOne</span> <span class=\"c1\">-- OK</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex1</span> <span class=\"o\">:</span> <span class=\"n\">myfunOne</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Fin.last</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">myfunOne</span>\n  <span class=\"c1\">-- no mention of myfunOne._unary</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ex2</span> <span class=\"o\">:</span> <span class=\"n\">myfunZero</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">Fin.last</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">true</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">myfunZero</span>\n  <span class=\"c1\">-- mentions of myfunZero._unary</span>\n  <span class=\"c1\">-- rfl still works, but more by accident</span>\n  <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I don’t know that corner of the system well; presumably <code>to_additive</code> could find them and translate them as well.</p>",
        "id": 402727407,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700236462
    },
    {
        "content": "<p>These are generated lazily, it seems. So maybe <code>to_additive</code> needs to register a getter for such lemmas on the additive variant, and when called, call it on the original version, take the lemmas, transfer them, and return them. But at this point it may be simpler to just copy the recursive definition :-)</p>",
        "id": 402729967,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700237149
    },
    {
        "content": "<p>The solution definitely depends on whether <code>to_additive</code> is attached to <code>myfunOne._unary</code> or not.</p>\n<p>Generally, it really depends on an attribute if <code>myfun._unary</code> should inherit it from <code>myfun</code>:</p>\n<ul>\n<li><code>specialize</code> <code>nospecialize</code> are examples which should be inherited; some functions in the core (e.g. <code>Array.zipWithAux</code>) assume this behavior.</li>\n<li><code>implemented_by</code> is one that shouldn't be.</li>\n</ul>\n<p>So, what would be the \"fix\" of the bug?</p>",
        "id": 402739647,
        "sender_full_name": "Jun Yoshida",
        "timestamp": 1700240409
    }
]