[
    {
        "content": "<p>I am surprised that this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.RunCmd</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"n\">true</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkFreshLevelMVar</span><span class=\"o\">)))</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>I was expecting by saying that I expect something of type <code>Sort _</code>, it will reject to elaborate <code>true</code> (as <code>true : Bool</code>). Is that now how the <code>expectedType</code> parameter works? The docstring didn’t say.</p>",
        "id": 393805030,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695935148
    },
    {
        "content": "<p>Ah, there exists <code>elabTermEnsuringType</code></p>",
        "id": 393805231,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695935254
    },
    {
        "content": "<p>Yeah, the expected type is a hint for what type you want from the elaborated term, but you need something like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.elabTermEnsuringType#doc\">docs#Lean.Elab.Term.elabTermEnsuringType</a> to elaborate with that hint and then try to insert a coercion if there's a type mismatch.</p>",
        "id": 393805389,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695935326
    },
    {
        "content": "<p>This function does <code>elabTerm</code> followed by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.ensureHasType#doc\">docs#Lean.Elab.Term.ensureHasType</a></p>",
        "id": 393805710,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695935516
    },
    {
        "content": "<p>Thanks! Reading through the code gave me a glimpse. Maybe I’ll PR a slight docstring addition, pointing to <code>elabTermEnsuringType</code>.</p>",
        "id": 393806033,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695935693
    },
    {
        "content": "<p>Watch out that there's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.elabTermEnsuringType#doc\">docs#Lean.Elab.Tactic.elabTermEnsuringType</a>, which <em>doesn't</em> insert a coercion. (It also does <code>Term.synthesizeSyntheticMVars</code> before unifying the type of the term with the expected type, which seems like it might be a bug -- I think this accounts for many problems with <code>refine</code> and its failure to synthesize instances.)</p>",
        "id": 393806863,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695936169
    },
    {
        "content": "<p>Hmm, not sure if I at this point can PR a better docstring than “It’s complicated, read the code” :-D</p>",
        "id": 393807011,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695936252
    }
]