[
    {
        "content": "<p>Lean accepts the following code without complaint:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.LiminfLimsup</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">baz</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"n\">Filter.limsup</span> <span class=\"n\">s</span> <span class=\"n\">qux</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am very surprised by this and would have expected it to complain that:</p>\n<ul>\n<li><code>bar</code> is undefined</li>\n<li><code>baz</code> is undefined</li>\n<li><code>qux</code> is undefined</li>\n</ul>\n<p>Is this expected behaviour?</p>",
        "id": 367744602,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206375
    },
    {
        "content": "<p>Those are all auto-implicit, right?</p>",
        "id": 367744783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687206446
    },
    {
        "content": "<p>Is that not simply <code>autoImplicit</code>? Try <code>set_option autoImplicit false</code></p>",
        "id": 367744792,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687206449
    },
    {
        "content": "<p>FWIW I encountered this because I was writing some code and I absent-mindedly wrote Mathlib3-style <code>at_top</code> instead of Mathlib4-style <code>atTop</code> in the declaration of a lemma and it took some time to understand that the reason various lemmas would not apply etc.</p>",
        "id": 367744832,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206464
    },
    {
        "content": "<p>I thought this <code>autoImplicit</code> madness only applied to lowercase Greek letters or something?</p>",
        "id": 367744957,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206498
    },
    {
        "content": "<p>Yeah, look for <code>autoImplicit</code> and you will see all the people complaining about this footgun.</p>",
        "id": 367745000,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687206515
    },
    {
        "content": "<p>Admittedly I've only recently started writing non-trivial amounts of Lean 4.</p>",
        "id": 367745010,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206521
    },
    {
        "content": "<p>I presume this has been asked before but: how can we nuke this feature from orbit?</p>",
        "id": 367745038,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206534
    },
    {
        "content": "<p>\"feature\"</p>",
        "id": 367745052,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206538
    },
    {
        "content": "<p>Or at least globally enable <code>set_option autoImplicit false</code> in Mathlib?</p>",
        "id": 367745121,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206560
    },
    {
        "content": "<p>I should add: thank you <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 367745208,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206594
    },
    {
        "content": "<p>I would vote for doing this only with 1-letter long variables (both greek and latin). It's pretty nice to write <code>[TopologicalSpace X]</code> instead of <code>{X : Type _} [TopologicalSpace X]</code>. But I've never used this feature for variables with more than one letter.</p>",
        "id": 367745660,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687206737
    },
    {
        "content": "<p>I will vote for anything that reduces the scope of this \"feature\".</p>",
        "id": 367745787,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206781
    },
    {
        "content": "<p>Who do I pester about this?</p>",
        "id": 367745879,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206817
    },
    {
        "content": "<p>Nobody since Leo is probably the only one who can decide this. Note that we can set the default to false at the mathlib level though. It may even be rather painless if we do it before the end of the port since I guess mathport does not use it.</p>",
        "id": 367746171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1687206908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367745660\">said</a>:</p>\n<blockquote>\n<p>I would vote for doing this only with 1-letter long variables (both greek and latin).</p>\n</blockquote>\n<p>This is actually quite nice because we have close to no one-letter definition.</p>",
        "id": 367746184,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687206912
    },
    {
        "content": "<p>A lot of people thought this sort of thing was nice in the 1950s.</p>",
        "id": 367746296,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206953
    },
    {
        "content": "<p>It wasn't.</p>",
        "id": 367746307,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206956
    },
    {
        "content": "<p>Just for the record, some people do like the feature: <a href=\"#narrow/stream/287929-mathlib4/topic/Auto-implicits\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Auto-implicits</a></p>",
        "id": 367747198,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1687207236
    },
    {
        "content": "<p>Good for them :) I'm happy for the feature to exist but IMHO it should default to <code>false</code> not <code>true</code>.</p>",
        "id": 367747289,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687207284
    },
    {
        "content": "<p>Other things (e.g. semantic syntax highlighting) have also changed since the 1950s. Would you still be against it if it was even more obvious from the colour that some things are variables and some are function names?</p>",
        "id": 367747449,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687207334
    },
    {
        "content": "<p>People from the 50s would likely also take great offense with the notion of implicit tactic state that is only made visible with an editor extension :)</p>",
        "id": 367747539,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1687207383
    },
    {
        "content": "<p>You are of course right to point out that merely appealing to the passage of time is no logical argument. However I believe this is clearly a case of an obviously awful default and the more links I find in Zulip the more wasted time I see.</p>",
        "id": 367747595,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687207399
    },
    {
        "content": "<p>I think autoImplicit should at least be false for mathbb symbols like <code>ℕ</code>. I can't give an opinion on the feature as a whole but many times I've forgotten to import the basics of <code>Mathlib</code> or didn't want to because it was the web editor, then became surprised that Lean failed to infer basic typeclass instances on <code>ℕ</code> because it was actually an implicit variable.</p>",
        "id": 367747634,
        "sender_full_name": "Niels Voss",
        "timestamp": 1687207418
    },
    {
        "content": "<p>You can't rely on highlighting to show this kind of information because of accessibility issues. I personally am colorblind and I can't find a color that would be both visually different and not too contrasted.</p>",
        "id": 367747739,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1687207449
    },
    {
        "content": "<p>I need to return to what I was actually working on before I cost myself half an hour by writing <code>at_top</code>. I will canvass for this to be changed when I have more time.</p>",
        "id": 367747809,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687207485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367747739\">said</a>:</p>\n<blockquote>\n<p>You can't rely on highlighting to show this kind of information because of accessibility issues. I personally am colorblind and I can't find a color that would be both visually different and not too contrasted.</p>\n</blockquote>\n<p>Inlay hints would help with this, but as Sebastian previously mentioned somewhere, their LSP design is unfortunately not well-suited for incremental file checking</p>",
        "id": 367747941,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1687207541
    },
    {
        "content": "<p>Maybe a different background color (e.g. bright red)?</p>",
        "id": 367749674,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687208231
    },
    {
        "content": "<p>Squiggly underlines?</p>",
        "id": 367749701,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687208254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367747739\">said</a>:</p>\n<blockquote>\n<p>You can't rely on highlighting to show this kind of information because of accessibility issues. I personally am colorblind and I can't find a color that would be both visually different and not too contrasted.</p>\n</blockquote>\n<p>I think this is a good point, but agree that it should be possible to configure other ways to display the information Lean returns (eg underlines, light block backgrounds, italicization, bolding), it would be great to have some settings file bundled in with mathlib that people can use to easily set this up</p>",
        "id": 367749866,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1687208326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367745787\">said</a>:</p>\n<blockquote>\n<p>I will vote for anything that reduces the scope of this \"feature\".</p>\n</blockquote>\n<p>The notion that something that was \"evil\" in the 1950s  remains evil now is absurd. Haskell autoImplicits types all the time. We are not entering programs on tapes or punch cards. We could definitely work to improve editor highlighting for this feature (for example a warning underline) for those who wish to configure it so.</p>",
        "id": 367755247,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687210897
    },
    {
        "content": "<p>Another idea would be to do what the rust extension does to show inferred  type signatures on top of declarations. In this case, to simply point out that auto implicit was used.</p>",
        "id": 367755341,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687210964
    },
    {
        "content": "<p>If that Rust extension uses inlay hints, then <a href=\"#narrow/stream/287929-mathlib4/topic/Auto-implicits/near/314219273\">it seems like that won't work for Lean</a></p>",
        "id": 367755659,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687211148
    },
    {
        "content": "<p>Fine, then maybe on the infoview?</p>",
        "id": 367755985,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687211334
    },
    {
        "content": "<p>Another counterpoint : removing autoimplicits clutters up theorem statements, which will be a debugging nightmare of its own, especially when one does cs stuff. From a usage standpoint, keeping it and adding an editor feature which displays the implicits might be simpler.</p>",
        "id": 367756778,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687211867
    },
    {
        "content": "<p>In this case, just the fact that there are two similar looking names in the implicit variables listing should show people that there is a typo</p>",
        "id": 367757753,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687212432
    },
    {
        "content": "<blockquote>\n<p>removing autoimplicits clutters up theorem statements</p>\n</blockquote>\n<p>I think <code>variables</code> makes this largely moot</p>",
        "id": 367758546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687212941
    },
    {
        "content": "<p>I am not sure about that. variables introduces its own problems when writing a function/theorem. EDIT: there was a thread about this. Anything in variables is automatically inserted as an assumption in all theorems in a section/namespace and there is no meaningful way to fix this automatically. One has to manually use prune or clear. Introducing a section for each higher order function would be a pain.</p>",
        "id": 367758930,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687213158
    },
    {
        "content": "<p>See the other thread: we have a solution, PR in the works.</p>",
        "id": 367758946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687213170
    },
    {
        "content": "<p>Not sure why we are having this conversation in two threads at once...</p>",
        "id": 367758965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687213188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367755341\">said</a>:</p>\n<blockquote>\n<p>Another idea would be to do what the rust extension does to show inferred  type signatures on top of declarations. In this case, to simply point out that auto implicit was used.</p>\n</blockquote>\n<p>As I have mentioned elsewhere, you can already see inferred type signatures for declarations by hovering over the declaration name or putting your cursor there and looking at \"expected type\"</p>",
        "id": 367760496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367760496\">said</a>:</p>\n<blockquote>\n<p>As I have mentioned elsewhere, you can already see inferred type signatures for declarations by hovering over the declaration name or putting your cursor there and looking at \"expected type\"</p>\n</blockquote>\n<p>I am using this all the time. But it seems it might help others with debugging if the implicits are shown without having to hover the mouse over the declaration.</p>",
        "id": 367760953,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687214381
    },
    {
        "content": "<p>Do we need a github bot that adds a comment under every declaration in a PR with its full type? This feels like the type of thing that's hard to catch during review (though admittedly <code>variables</code> had a similar problem), where typically the reviewer is not using an intelligent editor.</p>",
        "id": 367761540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687214728
    },
    {
        "content": "<p>Another related and hard to catch bug is <code>Sort _</code>, which can (and sometimes does) default to <code>Prop</code>.</p>",
        "id": 367762300,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687215150
    },
    {
        "content": "<p>Even just defaulting to <code>Type _</code> is usually a problem</p>",
        "id": 367762400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687215216
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> had a notational solution to that elsewhere</p>",
        "id": 367762485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687215247
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/function.2Ecombine/near/362309752\">Here's</a> a <code>Type*</code> notation that gives you types with distinct universe level variables. I think there ought to be a more sophisticated solution out there, where there are special universe level metavariables that are allowed to unify with nontrivial expressions (rather than just <code>0</code> or <code>1</code> for example), but at least it's something.</p>",
        "id": 367763017,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687215573
    }
]