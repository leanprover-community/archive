[
    {
        "content": "<p>This came up in the port of <code>CategoryTheory.Filtered</code> <a href=\"https://github.com/leanprover-community/mathlib4/pull/2493\">!4#2493</a> . I can't make a definition called <code>Y.x</code> because it's the field of a structure, but the definition <code>Y.x</code> is not already there</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Y</span> <span class=\"kd\">extends</span> <span class=\"n\">X</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Y.x</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X.x</span> <span class=\"n\">y.toX</span> <span class=\"c1\">-- invalid declaration name 'Y.x', structure 'Y' has field 'x'</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Y.x</span> <span class=\"c1\">-- unknown constant 'Y.x'</span>\n</code></pre></div>",
        "id": 338300277,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1677496959
    },
    {
        "content": "<p>Can we drop the <code>def</code> in mathlib3?</p>",
        "id": 338302351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677497537
    },
    {
        "content": "<p>I'd rather not. I merged the PR, but I do consider this a TODO, i.e. we want the mathlib4 setup to eventually match the current mathlib3 setup.</p>",
        "id": 338303319,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1677497825
    },
    {
        "content": "<p>What's the reason we have the def in lean3 (and what is the def in question?)</p>",
        "id": 338303482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677497877
    },
    {
        "content": "<p>It puts something from the <code>IsFilteredOrEmpty</code> namespace into the <code>IsFiltered</code> namespace, but the lemmas still apply to the <code>IsFilteredOrEmpty</code> class. It's done like that so people usually don't have to think about the <code>IsFilteredOrEmpty</code> class, because it's usually the <code>IsFiltered</code> class that they want, even if a lot of the lemmas don't use the <code>nonempty</code> assumption of <code>IsFiltered</code>.</p>",
        "id": 338304046,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1677498039
    },
    {
        "content": "<p>What's an example of a def we're talking about here?</p>",
        "id": 338304263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677498108
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/5107462b5e8dba552debeb8b1a1b9c2e536430d9/Mathlib/CategoryTheory/Filtered.lean#L142\">https://github.com/leanprover-community/mathlib4/blob/5107462b5e8dba552debeb8b1a1b9c2e536430d9/Mathlib/CategoryTheory/Filtered.lean#L142</a></p>",
        "id": 338307397,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1677499049
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_filtered.cocone_objs\">docs#category_theory.is_filtered.cocone_objs</a></p>",
        "id": 338307680,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677499147
    },
    {
        "content": "<p>Ah, so the motivation here is that we're actually working with a <code>class</code> not a <code>structure</code>, so there's no reasonable way to use dot notation</p>",
        "id": 338307897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677499209
    },
    {
        "content": "<p>Here's another example of where this shows up: when porting <code>CategoryTheory.Bicategory.Functor</code> I was faced with a Lean 4 goal of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">PrelaxFunctor.map₂</span> <span class=\"n\">G.toPrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">PrelaxFunctor.map₂</span> <span class=\"n\">F.toPrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n    <span class=\"o\">(</span><span class=\"n\">PrelaxFunctor.map₂</span> <span class=\"n\">G.toPrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">mapComp</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">≫</span>\n        <span class=\"n\">mapComp</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"bp\">≫</span>\n      <span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">G.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">◁</span>\n        <span class=\"o\">(</span><span class=\"n\">PrelaxFunctor.map₂</span> <span class=\"n\">G.toPrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">mapComp</span> <span class=\"n\">F</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n          <span class=\"n\">mapComp</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">PrelaxFunctor.map₂</span> <span class=\"n\">G.toPrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">mapComp</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n      <span class=\"n\">mapComp</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">≫</span>\n    <span class=\"o\">(</span><span class=\"n\">PrelaxFunctor.map₂</span> <span class=\"n\">G.toPrelaxFunctor</span> <span class=\"o\">(</span><span class=\"n\">mapComp</span> <span class=\"n\">F</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n          <span class=\"n\">mapComp</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">▷</span>\n        <span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">G.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span>\n      <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">G.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">G.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">g</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">G.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prefunctor.map</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">F.toPrelaxFunctor</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n</code></pre></div>\n<p>where the corresponding Lean 3 goal was the defeq but far more controlled</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">G.map₂</span> <span class=\"o\">(</span><span class=\"n\">F.map₂</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">G.map₂</span> <span class=\"o\">(</span><span class=\"n\">F.map_comp</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map_comp</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">◁</span> <span class=\"o\">(</span><span class=\"n\">G.map₂</span> <span class=\"o\">(</span><span class=\"n\">F.map_comp</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map_comp</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G.map₂</span> <span class=\"o\">(</span><span class=\"n\">F.map_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map_comp</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">G.map₂</span> <span class=\"o\">(</span><span class=\"n\">F.map_comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"n\">G.map_comp</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"bp\">▷</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">α_</span> <span class=\"o\">(</span><span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">F.map</span> <span class=\"n\">h</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">hom</span>\n</code></pre></div>\n<p>The autoported proof didn't work so I had to get my hands dirty and figure out why. Here <code>G : OplaxFunctor C D</code>, and <code>OplaxFunctor</code> extends <code>PrelaxFunctor</code>, which has a <code>map₂</code>.  The Lean 3 <code>G.map₂</code> was being expanded to <code>PrelaxFunctor.map₂ G.toPrelaxFunctor</code> and because it was showing up often, it was pretty horrible. I tried to tame the goal by defining <code>OplaxFunctor.map₂</code> to equal <code>PrelaxFunctor.map₂</code> and ran into precisely this issue, so I had to work with these super-unwieldy goals whilst debugging. Note that here everything is a structure.</p>",
        "id": 338332705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677506087
    },
    {
        "content": "<p>This sounds like something that the pretty-printing ought to handle</p>",
        "id": 338344702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677508645
    },
    {
        "content": "<p>That is, it should have an option to display <code>PrelaxFunctor.map₂ G.toPrelaxFunctor</code> as <code>G.map₂</code>, and it should probably be the default</p>",
        "id": 338344799,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677508670
    },
    {
        "content": "<p>This is also an issue with plain old (category-theoretic) functors. We need to add some delaborators, I guess...</p>",
        "id": 338403922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677519003
    },
    {
        "content": "<p>What's a delaborator and where can I learn about them?</p>",
        "id": 338404532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677519142
    },
    {
        "content": "<p><a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/pretty-printing.md\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/master/md/extra/pretty-printing.md</a></p>",
        "id": 338404805,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677519219
    },
    {
        "content": "<p>NB: I don't know if \"delaborator\" is precisely the right thing we need in this case.</p>",
        "id": 338404927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677519245
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I just noticed a (very) minor typo on <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/70a8ebaf5ac931eedf08761c0d1af5975641b233/md/extra/pretty-printing.md?plain=1#L20\">https://github.com/arthurpaulino/lean4-metaprogramming-book/blob/70a8ebaf5ac931eedf08761c0d1af5975641b233/md/extra/pretty-printing.md?plain=1#L20</a> (one of the <code>elaborator</code>s should be a <code>delaborator</code>)</p>",
        "id": 338408848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677520225
    },
    {
        "content": "<p>heh, I noticed that too and opened a PR :-)</p>",
        "id": 338409293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677520326
    }
]