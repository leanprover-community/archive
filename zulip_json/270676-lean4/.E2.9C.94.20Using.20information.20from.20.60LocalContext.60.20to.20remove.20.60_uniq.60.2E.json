[
    {
        "content": "<p>Hey, I wrote a simple utility tactic that logs the conclusion of the main goal.</p>\n<p>However, simply using:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"show_goal\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{‚ÜêPrettyPrinter.ppExpr (‚ÜêgetMainTarget)}\"</span>\n</code></pre></div>\n<p>doesn't quite work in cases where a unique identifier is internally assigned to a variable, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">‚ü©</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">show_goal</span> <span class=\"c1\">-- _uniq.643157 = default ‚Üí False</span>\n</code></pre></div>\n<p>The infoview itself says <code>w = default ‚Üí False</code>, which is what I would like to print.<br>\nI understand this information is available in <code>LocalContext</code> and I've tried something to the effect of:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"show_goal\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getMainDecl</span>\n  <span class=\"k\">let</span> <span class=\"n\">ldecls</span> <span class=\"o\">:=</span> <span class=\"n\">decl.lctx.decls</span>\n  <span class=\"n\">for</span> <span class=\"n\">ldecl</span> <span class=\"k\">in</span> <span class=\"n\">ldecls</span> <span class=\"k\">do</span>\n    <span class=\"n\">Lean.logInfo</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"name: {ldecl.get!.userName}\"</span>\n</code></pre></div>\n<p>This does reveal that the name <code>w</code>, which is what I would now like to substitute <code>_uniq.643157</code> for.</p>\n<p>Is there a simple way to match these <code>_uniq</code>names to <code>userName</code> so I can replace them?<br>\nOr is there a much simpler approach that would allow me to log <em>exactly</em> what's in the infoview?</p>",
        "id": 401244535,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1699567495
    },
    {
        "content": "<p>Try</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"show_goal\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{‚ÜêPrettyPrinter.ppExpr (‚ÜêgetMainTarget)}\"</span>\n</code></pre></div>",
        "id": 401245077,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699567738
    },
    {
        "content": "<p>And read <a href=\"#narrow/stream/287929-mathlib4/topic/weird.20tactic.20bug/near/370576262\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/weird.20tactic.20bug/near/370576262</a></p>",
        "id": 401245127,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699567768
    },
    {
        "content": "<p>Oh my, this works, thanks Patrick.</p>",
        "id": 401245260,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1699567812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364929\">Franti≈°ek Silv√°≈°i ü¶â</span> has marked this topic as resolved.</p>",
        "id": 401245270,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699567819
    },
    {
        "content": "<p>Because I'm in a good mood, I'll give you my trick to look like a meta-programming god: whenever someone asks a meta-programming question, answer \"Didn't you forget a <code>withMainContext</code>?\".</p>",
        "id": 401246328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699568350
    }
]