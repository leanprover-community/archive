[
    {
        "content": "<p>After <code>git pull</code> and <code>lake exe cache get</code> on master on mathlib today (which I probably last ran a few days ago) I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">manifest</span> <span class=\"n\">out</span> <span class=\"n\">of</span> <span class=\"n\">date</span><span class=\"o\">:</span> <span class=\"n\">git</span> <span class=\"n\">revision</span> <span class=\"n\">of</span> <span class=\"n\">dependency</span> <span class=\"bp\">'</span><span class=\"n\">proofwidgets'</span> <span class=\"n\">changed</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">update</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">update</span>\n</code></pre></div>\n<p>and my understanding is that using <code>lake update</code> on mathlib is exactly what I should never do. Should I just ignore this warning? Will everyone get it or did I do something weird?</p>",
        "id": 390039754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694270022
    },
    {
        "content": "<p>I think now the warning might actually be valid? But with the caveat that you should do it and make a standalone PR with it, and not do it as part of any other work</p>",
        "id": 390041506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694271502
    },
    {
        "content": "<p>Oh, I've definitely seen and ignored that message before for the same reason. Can you explain slightly further what that message is trying to say?</p>",
        "id": 390044026,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694273405
    },
    {
        "content": "<p>It's like pulling a repo that mathlib4 depends on, sees that HEAD of that dependent repo is not the version that mathlib4 is saying it depends on, and basically you're saying when that happens that one should basically help update mathlib4 to that newer version?</p>",
        "id": 390044101,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694273465
    },
    {
        "content": "<blockquote>\n<p>I think now the warning might actually be valid?</p>\n</blockquote>\n<p>By this I mean that there's now an \"inherited\" flag that is supposed to stop <code>lake update</code> updating too many things at once</p>",
        "id": 390044208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694273530
    },
    {
        "content": "<p>I think I'm still only partially following. First I think I misunderstood the message because I forgot the manifest is pulled -- that message means nothing of what I said right, it means \"you pulled mathlib4, lake ran some command, saw that the installed version of some dependency does not match the version in the newly pulled manifest, and is trying to tell you to run a command to update the installed version\", yeah?</p>",
        "id": 390044499,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694273746
    },
    {
        "content": "<p>And ok now you're saying basically that someone should indeed run <code>lake update</code> in that case, to update the installed deps, but run with that minimal update flag so they don't screw everything else up</p>",
        "id": 390044569,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694273775
    },
    {
        "content": "<p>Is that right? (If so maybe I do follow now)</p>",
        "id": 390044586,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694273790
    },
    {
        "content": "<p>In that case the cause is clear: <a href=\"https://github.com/leanprover-community/mathlib4/pull/7044\">#7044</a> was not good enough, and this wasn't caught by CI for some reason (maybe because it's only a warning). And once again the root cause is duplicated information in the lake world: when bumping the ProofWidgets dependency you need to modify both the lakefile and the manifest. <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 390044803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694273948
    },
    {
        "content": "<p>And, as usual, <code>lake</code> gives you the wrong advice to fix the issue. Here we need to update only <code>ProofWidgets</code> and following the <code>lake update</code> suggestion will mess up everything. We all need to configure our terminal/shell so that it automatically remove the string \"use <code>lake update</code> to update\" from any output.</p>",
        "id": 390044980,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694274103
    },
    {
        "content": "<p>Why don't we instead track <code>ProofWidgets@master</code> in the mathlib lakefile then, and make bump PRs in the way we do for other packages like std?</p>",
        "id": 390045033,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694274135
    },
    {
        "content": "<p>The downside is that its less obvious which version we are on ofc, but for other packages we dont seem to care</p>",
        "id": 390045054,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694274169
    },
    {
        "content": "<p>Alex, this isn't possible because we want to use compiled versions of ProofWidgets so that mathlib doesn't depend on a npm tooolchain.</p>",
        "id": 390045086,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694274214
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7056\">#7056</a></p>",
        "id": 390045179,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694274272
    },
    {
        "content": "<p>The build has failed, with error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"mi\">3629</span><span class=\"bp\">/</span><span class=\"mi\">3631</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.AlgebraicGeometry.Morphisms.FiniteType</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">process</span> <span class=\"bp\">'/</span><span class=\"n\">usr</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">bash'</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span>\n<span class=\"n\">Remove</span> <span class=\"n\">matcher</span><span class=\"o\">:</span> <span class=\"n\">gcc</span>\n</code></pre></div>\n<p>I re-ran it in case it was a transient glitch.</p>",
        "id": 390049305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694277897
    },
    {
        "content": "<p>The real error is a few thousand lines higher:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">3566</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Lean.Parser</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">proofwidgets</span><span class=\"bp\">/././</span><span class=\"n\">ProofWidgets</span><span class=\"bp\">/</span><span class=\"n\">Component</span><span class=\"bp\">/</span><span class=\"n\">SelectionPanel.lean</span>\n</code></pre></div>",
        "id": 390050003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694278600
    },
    {
        "content": "<p>Indeed it failed again.</p>",
        "id": 390054347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694282750
    },
    {
        "content": "<ul>\n<li>The actual versions of the packages in use are stored in <code>lake-manifest.json</code>. Changing only the versions in the lakefile but not in the manifest effectively does nothing: it only influences what <code>lake update</code> will do.</li>\n<li>Indeed <code>ProofWidgets</code> is packaged in such a way that you should only ever depend on a release tag. I would go as far as to say it is better practice not to depend on the development branch of <em>any</em> package, since if you do this then running <code>lake update</code> can randomly break things. That said the Lake versioning story appears to be evolving with Mac's work at the FRO, so there may be new best practices in the future.</li>\n<li>There have been breaking changes between ProofWidgets4 v0.0.13 and v0.0.15 so that bump needs to do a bit of actual fixing. Just did that now.</li>\n</ul>",
        "id": 390055497,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694283907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390055497\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Indeed <code>ProofWidgets</code> is packaged in such a way that you should only ever depend on a release tag. I would go as far as to say it is better practice not to depend on the development branch of <em>any</em> package, since if you do this then running <code>lake update</code> can randomly break things. That said the Lake versioning story appears to be evolving with Mac's work at the FRO, so there may be new best practices in the future.</li>\n</ul>\n</blockquote>\n<p>I would suggest having a <code>release</code> or <code>v0.0.x</code> branch that is only bumped to new tags. Lake is smart enough to <a href=\"https://github.com/leanprover/lean4/blob/3aa1cfcceabf7d091a3b2e5d4330df76767336ac/src/lake/Lake/Util/Git.lean#L104-L105\">intelligently</a> find a tag for the <code>HEAD</code> commit of a branch. Thus, so as long as very bump comes with a corresponding tag, downstream packages can still use a branch in the lakefile (and can thus update via <code>lake update proofwidgets</code>) while still getting the cloud release.</p>",
        "id": 390057669,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694286211
    },
    {
        "content": "<p>Wojciech's commit makes the branch build for me locally. Does it need to be Bors'ed again?</p>",
        "id": 390057757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694286284
    },
    {
        "content": "<p>It still fails CI <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 390060560,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694289348
    },
    {
        "content": "<p>Ah, the cloud release was broken. Sorry about that. Restarted the build now.</p>",
        "id": 390061936,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694290777
    },
    {
        "content": "<p>Looks good now and is hopefully about to be merged.</p>",
        "id": 390070990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694300517
    },
    {
        "content": "<p>Okay, I have made three new issues to track things that we could hopefully do better here:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/pull/2527\">lean4#2527</a> (configuration option so Mathlib can suppress all `manifest out of date warning except for opt-in users)</li>\n<li><a href=\"https://github.com/leanprover/lean4/pull/2525\">lean4#2525</a> (have <code>lake</code> suggest <code>lake update X</code> when <code>X</code> is out of date, rather than suggesting <code>lake update</code>)</li>\n<li><a href=\"https://github.com/leanprover/lean4/pull/2526\">lean4#2526</a> (<code>lake</code> command that generates this warning, but without running anything expensive (<code>build</code> or <code>exe</code>), so we can add a CI step to guard for today's problem)</li>\n</ul>",
        "id": 390072039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694301533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243791\">@David Renshaw</span> has just <a href=\"#narrow/stream/287929-mathlib4/topic/.60lake.20exe.20cache.20get.60.20broken/near/390087627\">reported</a> that the bump commits for ProofWidgets have broken the cache. <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, just pinging in case you have an idea.</p>\n<p>I think I am going to revert the bump to ProofWidgets, and merge it directly, and then we can try again later?</p>",
        "id": 390088914,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313343
    },
    {
        "content": "<p>(Also <span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span>  <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> in case they have ideas?)</p>",
        "id": 390088939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313362
    },
    {
        "content": "<p>We can't keep a broken cache, so any urgent workaround is welcome.</p>",
        "id": 390088996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694313390
    },
    {
        "content": "<p>I have no idea what could be causing this. I just want my shiny updated ProofWidgets.</p>",
        "id": 390089033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694313433
    },
    {
        "content": "<p>Okay, reverted on <code>master</code>.</p>",
        "id": 390089342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313655
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> is now the new PR for attempting to bump ProofWidgets. We should carefully check that the cache works on that branch before merging it!</p>",
        "id": 390089542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694313822
    },
    {
        "content": "<p>We should ping <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> as well.</p>",
        "id": 390089613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694313849
    },
    {
        "content": "<p>Are you sure we will get some cache for your revert commit?</p>",
        "id": 390089650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694313890
    },
    {
        "content": "<p>Nevermind, I just saw your message in the other stream.</p>",
        "id": 390089679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694313920
    },
    {
        "content": "<p>Oh no! I have no idea why this bump would break the cache. It doesn't do anything fundamentally differently than previous bumps.</p>",
        "id": 390089847,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694314065
    },
    {
        "content": "<p>Can you link the ProofWidgets PR that did the bump please?</p>",
        "id": 390090105,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694314264
    },
    {
        "content": "<p>I just made a PR that checks the manifest is up to date (thereby preventing future cases of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7044\">#7044</a> needing the followup <a href=\"https://github.com/leanprover-community/mathlib4/pull/7056\">#7056</a>).</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7071\">#7071</a></p>",
        "id": 390091829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694315598
    },
    {
        "content": "<p>Arthur, I'm sorry I don't understand your question.</p>",
        "id": 390091941,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694315669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>, there's not a single ProofWidgets PR that is relevant here. Here are the changes between 0.0.13 and 0.0.15 on ProofWidgets: <a href=\"https://github.com/EdAyers/ProofWidgets4/compare/v0.0.13...v0.0.15\">https://github.com/EdAyers/ProofWidgets4/compare/v0.0.13...v0.0.15</a></p>",
        "id": 390092033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694315734
    },
    {
        "content": "<p>It seems that <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a>, which bumps Mathlib's dependency on ProofWidgets from 0.0.13 to 0.0.15 breaks the cache.</p>",
        "id": 390092058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694315761
    },
    {
        "content": "<p>You can test this out now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gh</span> <span class=\"n\">pr</span> <span class=\"n\">checkout</span> <span class=\"mi\">7070</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>   <span class=\"bp\">#</span> <span class=\"n\">reports</span> <span class=\"n\">downloading</span> <span class=\"n\">everything</span> <span class=\"n\">successfully</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">#</span> <span class=\"n\">starts</span> <span class=\"k\">from</span> <span class=\"n\">scratch</span> <span class=\"o\">:</span><span class=\"bp\">-</span><span class=\"o\">(</span>\n</code></pre></div>",
        "id": 390092198,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694315877
    },
    {
        "content": "<p>Thanks. This diff is pretty big. I skimmed through it pretty quickly and the thing that caught my attention was the fact that it introduces a dependency on <code>Std</code>, which is also required by <code>Mathlib</code></p>",
        "id": 390093026,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694316492
    },
    {
        "content": "<p>I'm not on my PC right now. Does it build <em>everything</em> or just <code>Std</code>?</p>\n<p>My hypothesis is that the built files from <code>Std</code>, when required by <code>ProofWidgets</code>, end up with different traces from the ones required by <code>Mathlib</code>. We'd want those traces to overlap completely so the files downloaded for <code>Mathlib</code> can be used to compile <code>ProofWidgets</code>.</p>\n<p>There's also this: <code>ProofWidgets</code> might depend on files that <code>Mathlib</code> doesn't, which would cause their respective cache to be missing.</p>",
        "id": 390094078,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694317293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390094078\">said</a>:</p>\n<blockquote>\n<p>My hypothesis is that the built files from <code>Std</code>, when required by <code>ProofWidgets</code>, end up with different traces from the ones required by <code>Mathlib</code>. We'd want those traces to overlap completely so the files downloaded for <code>Mathlib</code> can be used to compile <code>ProofWidgets</code>.</p>\n</blockquote>\n<p>This is certainly a key concern. They must require exactly the same version of Std or one of them will be rebuilt. Rebuilding either is infeasible as both need to use a cloud build (ProofWidgets to avoid NPM and Mathlib to avoid long build times). However, it does seem like that both currently require the same version of <code>Std</code> (<code>e8c27f7</code>), so that is good at least.</p>",
        "id": 390117305,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694333985
    },
    {
        "content": "<p>Hm, the cloud build archive for ProofWidgets4 also does not contain any dependency oleans (for std4), so I'm not sure how downloading it could break the cache.</p>\n<p>The cloud releases for PW4 also does the following hack: I build the library on a single platform (currently Mac), and then upload that same release archive as the archive for all platforms ({linux-64/windows-64/macOS-64}.tar.gz). This is because the part that matters, building JS, is platform-independent. It's no problem if the platform-dependent part - the oleans - have to be rebuilt by consumers. I am conjecturing that this is not relevant to this issue because I am observing a full rebuild on 7070 even though I am on the same platform the release archive was actually built on.</p>",
        "id": 390160616,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694362000
    },
    {
        "content": "<p>Okay, here is building on the pre-bump commit:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>git<span class=\"w\"> </span>checkout<span class=\"w\"> </span>bump_proofwidgets_15\nPrevious<span class=\"w\"> </span>HEAD<span class=\"w\"> </span>position<span class=\"w\"> </span>was<span class=\"w\"> </span>f93f41c18<span class=\"w\"> </span>chore:<span class=\"w\"> </span>revert<span class=\"w\"> </span>ProofWidgets<span class=\"w\"> </span>bump<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">#7044 and #7056 (#7069)</span>\nSwitched<span class=\"w\"> </span>to<span class=\"w\"> </span>branch<span class=\"w\"> </span><span class=\"s1\">'bump_proofwidgets_15'</span>\nYour<span class=\"w\"> </span>branch<span class=\"w\"> </span>is<span class=\"w\"> </span>up<span class=\"w\"> </span>to<span class=\"w\"> </span>date<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"s1\">'origin/bump_proofwidgets_15'</span>.\n&gt;<span class=\"w\"> </span>git<span class=\"w\"> </span>checkout<span class=\"w\"> </span>HEAD~1\nNote:<span class=\"w\"> </span>switching<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'HEAD~1'</span>.\n\nYou<span class=\"w\"> </span>are<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"s1\">'detached HEAD'</span><span class=\"w\"> </span>state.<span class=\"w\"> </span>You<span class=\"w\"> </span>can<span class=\"w\"> </span>look<span class=\"w\"> </span>around,<span class=\"w\"> </span>make<span class=\"w\"> </span>experimental\nchanges<span class=\"w\"> </span>and<span class=\"w\"> </span>commit<span class=\"w\"> </span>them,<span class=\"w\"> </span>and<span class=\"w\"> </span>you<span class=\"w\"> </span>can<span class=\"w\"> </span>discard<span class=\"w\"> </span>any<span class=\"w\"> </span>commits<span class=\"w\"> </span>you<span class=\"w\"> </span>make<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this\nstate<span class=\"w\"> </span>without<span class=\"w\"> </span>impacting<span class=\"w\"> </span>any<span class=\"w\"> </span>branches<span class=\"w\"> </span>by<span class=\"w\"> </span>switching<span class=\"w\"> </span>back<span class=\"w\"> </span>to<span class=\"w\"> </span>a<span class=\"w\"> </span>branch.\n\nIf<span class=\"w\"> </span>you<span class=\"w\"> </span>want<span class=\"w\"> </span>to<span class=\"w\"> </span>create<span class=\"w\"> </span>a<span class=\"w\"> </span>new<span class=\"w\"> </span>branch<span class=\"w\"> </span>to<span class=\"w\"> </span>retain<span class=\"w\"> </span>commits<span class=\"w\"> </span>you<span class=\"w\"> </span>create,<span class=\"w\"> </span>you<span class=\"w\"> </span>may\n<span class=\"k\">do</span><span class=\"w\"> </span>so<span class=\"w\"> </span><span class=\"o\">(</span>now<span class=\"w\"> </span>or<span class=\"w\"> </span>later<span class=\"o\">)</span><span class=\"w\"> </span>by<span class=\"w\"> </span>using<span class=\"w\"> </span>-c<span class=\"w\"> </span>with<span class=\"w\"> </span>the<span class=\"w\"> </span>switch<span class=\"w\"> </span>command.<span class=\"w\"> </span>Example:\n\n<span class=\"w\">  </span>git<span class=\"w\"> </span>switch<span class=\"w\"> </span>-c<span class=\"w\"> </span>&lt;new-branch-name&gt;\n\nOr<span class=\"w\"> </span>undo<span class=\"w\"> </span>this<span class=\"w\"> </span>operation<span class=\"w\"> </span>with:\n\n<span class=\"w\">  </span>git<span class=\"w\"> </span>switch<span class=\"w\"> </span>-\n\nTurn<span class=\"w\"> </span>off<span class=\"w\"> </span>this<span class=\"w\"> </span>advice<span class=\"w\"> </span>by<span class=\"w\"> </span>setting<span class=\"w\"> </span>config<span class=\"w\"> </span>variable<span class=\"w\"> </span>advice.detachedHead<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"nb\">false</span>\n\nHEAD<span class=\"w\"> </span>is<span class=\"w\"> </span>now<span class=\"w\"> </span>at<span class=\"w\"> </span>f93f41c18<span class=\"w\"> </span>chore:<span class=\"w\"> </span>revert<span class=\"w\"> </span>ProofWidgets<span class=\"w\"> </span>bump<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"c1\">#7044 and #7056 (#7069)</span>\n&gt;<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover/std4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/std\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/gebner/quote4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/Qq\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/JLimperg/aesop<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/aesop\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/mhuisi/lean4-cli.git<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/Cli\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/EdAyers/ProofWidgets4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/proofwidgets\ninfo:<span class=\"w\"> </span>Downloading<span class=\"w\"> </span>proofwidgets/v0.0.13/macOS-64.tar.gz\ninfo:<span class=\"w\"> </span>Unpacking<span class=\"w\"> </span>proofwidgets/v0.0.13/macOS-64.tar.gz\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">7</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\ninfo:<span class=\"w\"> </span>stderr:\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>/usr/lib/system/libsystem_kernel.dylib<span class=\"w\"> </span>has<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">13</span>.5.0,<span class=\"w\"> </span>which<span class=\"w\"> </span>is<span class=\"w\"> </span>newer<span class=\"w\"> </span>than<span class=\"w\"> </span>target<span class=\"w\"> </span>minimum<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"m\">13</span>.0.0\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>/usr/lib/system/libsystem_platform.dylib<span class=\"w\"> </span>has<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">13</span>.5.0,<span class=\"w\"> </span>which<span class=\"w\"> </span>is<span class=\"w\"> </span>newer<span class=\"w\"> </span>than<span class=\"w\"> </span>target<span class=\"w\"> </span>minimum<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"m\">13</span>.0.0\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>/usr/lib/system/libsystem_pthread.dylib<span class=\"w\"> </span>has<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">13</span>.5.0,<span class=\"w\"> </span>which<span class=\"w\"> </span>is<span class=\"w\"> </span>newer<span class=\"w\"> </span>than<span class=\"w\"> </span>target<span class=\"w\"> </span>minimum<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"m\">13</span>.0.0\nNo<span class=\"w\"> </span>files<span class=\"w\"> </span>to<span class=\"w\"> </span>download\nDecompressing<span class=\"w\"> </span><span class=\"m\">3729</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nunpacked<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">1981</span><span class=\"w\"> </span>ms\n&gt;<span class=\"w\"> </span>cat<span class=\"w\"> </span>build/lib/Mathlib/Tactic/PPWithUniv.trace\n<span class=\"m\">3493117283209974879</span>%\n&gt;<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Mathlib.Tactic.PPWithUniv\n&gt;<span class=\"w\"> </span>cat<span class=\"w\"> </span>build/lib/Mathlib/Tactic/PPWithUniv.trace\n<span class=\"m\">3493117283209974879</span>%\n</code></pre></div>",
        "id": 390161976,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694363240
    },
    {
        "content": "<p>And here is building after:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>&gt;<span class=\"w\"> </span>git<span class=\"w\"> </span>checkout<span class=\"w\"> </span>bump_proofwidgets_15\nAlready<span class=\"w\"> </span>on<span class=\"w\"> </span><span class=\"s1\">'bump_proofwidgets_15'</span>\nYour<span class=\"w\"> </span>branch<span class=\"w\"> </span>is<span class=\"w\"> </span>up<span class=\"w\"> </span>to<span class=\"w\"> </span>date<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"s1\">'origin/bump_proofwidgets_15'</span>.\n&gt;<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover/std4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/std\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/gebner/quote4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/Qq\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/JLimperg/aesop<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/aesop\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/mhuisi/lean4-cli.git<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/Cli\ninfo:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/EdAyers/ProofWidgets4<span class=\"w\"> </span>to<span class=\"w\"> </span>./lake-packages/proofwidgets\ninfo:<span class=\"w\"> </span>Downloading<span class=\"w\"> </span>proofwidgets/v0.0.15/macOS-64.tar.gz\ninfo:<span class=\"w\"> </span>Unpacking<span class=\"w\"> </span>proofwidgets/v0.0.15/macOS-64.tar.gz\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">6</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">7</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\ninfo:<span class=\"w\"> </span>stderr:\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>/usr/lib/system/libsystem_kernel.dylib<span class=\"w\"> </span>has<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">13</span>.5.0,<span class=\"w\"> </span>which<span class=\"w\"> </span>is<span class=\"w\"> </span>newer<span class=\"w\"> </span>than<span class=\"w\"> </span>target<span class=\"w\"> </span>minimum<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"m\">11</span>.0.0\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>/usr/lib/system/libsystem_platform.dylib<span class=\"w\"> </span>has<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">13</span>.5.0,<span class=\"w\"> </span>which<span class=\"w\"> </span>is<span class=\"w\"> </span>newer<span class=\"w\"> </span>than<span class=\"w\"> </span>target<span class=\"w\"> </span>minimum<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"m\">11</span>.0.0\nld64.lld:<span class=\"w\"> </span>warning:<span class=\"w\"> </span>/usr/lib/system/libsystem_pthread.dylib<span class=\"w\"> </span>has<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">13</span>.5.0,<span class=\"w\"> </span>which<span class=\"w\"> </span>is<span class=\"w\"> </span>newer<span class=\"w\"> </span>than<span class=\"w\"> </span>target<span class=\"w\"> </span>minimum<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"m\">11</span>.0.0\nNo<span class=\"w\"> </span>files<span class=\"w\"> </span>to<span class=\"w\"> </span>download\nDecompressing<span class=\"w\"> </span><span class=\"m\">3729</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nunpacked<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"m\">2003</span><span class=\"w\"> </span>ms\n&gt;<span class=\"w\"> </span>cat<span class=\"w\"> </span>build/lib/Mathlib/Tactic/PPWithUniv.trace\n<span class=\"m\">11896431265506069789</span>%\n&gt;<span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Mathlib.Tactic.PPWithUniv\n<span class=\"o\">[</span><span class=\"m\">2</span>/3<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Mathlib.Tactic.PPWithUniv\n&gt;<span class=\"w\"> </span>cat<span class=\"w\"> </span>build/lib/Mathlib/Tactic/PPWithUniv.trace\n<span class=\"m\">3879143491258300896</span>%\n</code></pre></div>",
        "id": 390161984,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694363261
    },
    {
        "content": "<p>Observe that after the bump, <code>Tactic.PPWithUniv</code> has an incorrect trace fetched by the mathlib cache.</p>",
        "id": 390162050,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694363312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, might you be able to help us diagnose this?</p>",
        "id": 390220147,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694398652
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, from <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>'s report, it seems like a <code>cache</code> error, not a <code>lake</code> one.  <code>lake build</code> produces a consistent trace before and after the bump. The one stored in the cache  is simply not correct.</p>",
        "id": 390220523,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694398896
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>?</p>",
        "id": 390220720,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694399022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span>, how do we know that? Isn't it possible that what we're seeing here is that <code>lake</code> on CI is producing one trace, while <code>lake</code> locally is producing another trace? If then <code>cache</code> were faithfully transporting that <code>.trace</code> file, wouldn't we see what Wojciech observed above?</p>\n<p>How can we distinguish that situation from the alternative, in which <code>cache</code> is obtaining that <code>.trace</code> file from some bad source?</p>",
        "id": 390223935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694400988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390223935\">said</a>:</p>\n<blockquote>\n<p>Isn't it possible that what we're seeing here is that <code>lake</code> on CI is producing one trace, while <code>lake</code> locally is producing another trace?</p>\n</blockquote>\n<p>Why would the CI and local builds differ? The only thing I can I think of that would cause that would be some platform-dependent hashing. While the ProofWidgets cloud releases <em>are</em> platform-dependent, they have always been that way, so I am not sure why that would have changed anything (especially as the <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> did not import <code>ProofWidgets</code> in any new files). <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> also seemed to suggest that he had not changed anything in that regard either.</p>\n<p>However, to verify whether the problem is platform-dependency is the problem, we could try building <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> on both Linux 64bit what the CI runs and see if they get the same results as <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> (who is on a Mac) or the CI.</p>",
        "id": 390225162,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694401776
    },
    {
        "content": "<p>I mean, I think it's a mystery either way:</p>\n<ul>\n<li>why would the CI and local builds differ? (if the wrong <code>.trace</code> file is being produced, and <code>cache</code> is transporting is faithfully)</li>\n<li>where would a bad <code>.trace</code> file have come from (if the right <code>.trace</code> file is being produced in CI, but <code>cache</code> is delivering an incorrect one).</li>\n</ul>\n<p>The point is that we need to help Patrick and Wojciech distinguish between these two cases!</p>",
        "id": 390227882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694403424
    },
    {
        "content": "<p>Perhaps we should just modify CI on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> to display the relevant traces. That seems more reliable than trying to simulate a CI run on different hardware.</p>",
        "id": 390228018,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694403488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I just had <span aria-label=\"light bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"light bulb\">:light_bulb:</span> and think I know what the problem is. Std is being built as part of ProofWidgets and its build files are shipped in the ProofWidgets cloud release. Since they are part of ProofWidgets, they do not depend on ProofWidgets cloud release trace. Mathlib is then built with a Std which does depend on ProofWidgets cloud release and that is saved to the cache. A user then runs <code>cache get</code>, which unpacks ProofWidgets <code>Std</code> build files but does not clobber those files with the cache's<code>Std</code> files (because it is not run with as <code>get!</code>).  These <code>Std</code> files are thus the wrong ones leads to them being rebuilt along with their downstream dependents (i.e., most all of mathlib).</p>",
        "id": 390235650,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694408471
    },
    {
        "content": "<p>Interesting!</p>",
        "id": 390235898,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694408622
    },
    {
        "content": "<p>It seems that when <code>Std</code> is built on those two occasions, it would be better if the <code>.trace</code> files were the same either way. It is still <code>Std</code>, regardless of who is building it!</p>",
        "id": 390236238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694408788
    },
    {
        "content": "<p>At least, I think that is what is happening, there are some parts of  Wojciech's example that I am still not  sure how they fit into this picture. One way to test this theory is to see if <code>lake exe cache get!</code> helps any.</p>",
        "id": 390236323,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694408842
    },
    {
        "content": "<p>However, since the mathlib build also uses the cache, that may already have left it in an inconsistent state?</p>",
        "id": 390236745,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694409090
    },
    {
        "content": "<p>Upon further consideration, I think my assessment that Std being part of the cloud release and not being clobbered by cache is the problem is likely the right root cause.  However, I am not sure if my explanation as to why that is a problem is correct.</p>",
        "id": 390237296,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694409468
    },
    {
        "content": "<p>That was my hypothesis in more detail, but you said that they're using the same git revision of Std. My understanding is if that were the case, <code>lake build</code> would build the missing files from Std, only. It shouldn't end up with incompatible traces for the files that were built</p>",
        "id": 390292628,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694432791
    },
    {
        "content": "<p>Okay, this is not a fix, but at least some assistance from CI detecting this failure mode in future.</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/7099\">#7099</a> adds an extra CI step that runs <code>lake exe cache get</code> <strong>again</strong> after the build, and then runs <code>lake build</code> and errors if it builds anything. (The bash incantation to achieve this is probably fragile.)</p>\n</li>\n<li>\n<p>I've then made <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> (the 2nd attempt at bumping ProofWidgets) depend on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7099\">#7099</a>, and it correctly causes CI to fail at the \"check cache\" step.</p>\n</li>\n</ul>",
        "id": 390315413,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694440432
    },
    {
        "content": "<blockquote>\n<p>Std is being built as part of ProofWidgets and its build files are shipped in the ProofWidgets cloud release.</p>\n</blockquote>\n<p>There are no build files for <code>Std</code> in the <code>.tar.gz</code> that gets downloaded for the PW cloud release. Is there another <code>.tar.gz</code> being downloaded?</p>",
        "id": 390331482,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694444623
    },
    {
        "content": "<p>In particular, if I start from a clean folder (no <code>build/</code> or <code>lake-packages/</code>) on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a>, and run <code>lake build ProofWidgets</code>, no <code>olean</code>s for std are present or have been downloaded anywhere.</p>",
        "id": 390332769,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694444959
    },
    {
        "content": "<blockquote>\n<p>Mathlib is then built with a Std which does depend on ProofWidgets cloud release </p>\n</blockquote>\n<p>I also don't understand this statement. How can Std, a dependency of both Mathlib and PW4, <em>depend on</em> the PW4 cloud release? That sounds circuilar.</p>",
        "id": 390333221,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694445074
    },
    {
        "content": "<blockquote>\n<p>One way to test this theory is to see if <code>lake exe cache get!</code> helps any.</p>\n</blockquote>\n<p>It still rebuilds from scratch on my machine; combined with the fact that no <code>Std</code> files seem to be downloaded before <code>cache get!</code> runs, I am guessing something else must be happening.</p>",
        "id": 390333810,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694445229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> You are correct. I am completely wrong. Lake does not hoist build files, so the Std files would not be in the root package's build directory and thus not part of the cloud release.</p>",
        "id": 390351044,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694450701
    },
    {
        "content": "<p>An obvious potential problem is simply that ProofWidget cloud releases are currently system dependent, but I am not sure why that would be a new issue now since that has long been the case and this bump is not accompanied by a bump in Lean 4 / Lake to change anything about trace computation.</p>",
        "id": 390356655,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694452863
    },
    {
        "content": "<p>Furthermore, since rebuild is also happening on the CI, platform-dependency does not appear to be a potential issue.</p>",
        "id": 390356761,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694452912
    },
    {
        "content": "<p>It just seems like cache is somehow incorrectly storing the wrong traces?</p>",
        "id": 390356870,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694452949
    },
    {
        "content": "<p>Note that cache does not compute trace files ever, <code>lake</code> is the one responsible for generating those files</p>",
        "id": 390365147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694456309
    },
    {
        "content": "<p>the new <code>lean-cache</code> (not deployed) does calculate trace files, but only for verification purposes, it doesn't write trace files</p>",
        "id": 390365184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694456328
    },
    {
        "content": "<p>So if there are bad numbers in the cache files on the server then that means lake did something different on CI than on a local machine</p>",
        "id": 390365293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694456394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The problem here is that two subsequent runs of <code>lake build</code> on the same CI machine (before and after  <code>cache get</code>) are performing rebuilds of the same file. That seems to indicate cache is corrupting the file and/or trace.</p>",
        "id": 390383859,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694464370
    },
    {
        "content": "<p>Not only that, I believe from <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>'s report two subsequent <code>lake build</code>'s do not rebuild the file itself without the intervening <code>cache</code>, indicating that <code>lake</code> is not responsible. To verify,   <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  could potentially add a double <code>lake build</code> sanity check (no caching intervening) to make sure that lake is not doing so.</p>",
        "id": 390384156,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694464508
    },
    {
        "content": "<p>I have seen this variety of issue several times (I have asked for help on them here sometimes too) and it's always either some outdated state being used or system dependent hash calculation</p>",
        "id": 390384597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694464702
    },
    {
        "content": "<p>usually you will have the situation that <code>lake build</code> puts A in the file and <code>lake exe cache get</code> puts B in the file, you can run them in any order and they will both reliably do this</p>",
        "id": 390384738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694464784
    },
    {
        "content": "<p>and the reason is because when <code>lake build</code> was run in CI it put B in the file</p>",
        "id": 390384839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694464811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> True, but what seems to make this case confusing is that this problem is appearing on the CI machine itself. It runs <code>lake build</code> which presumably generates <code>A</code>,  uploads it to cache (via <code>cache commit</code>) and then calls <code>cache get</code> which seems to be putting <code>B</code> in the file, causing <code>lake build</code> to run again to generate <code>A</code>.</p>",
        "id": 390386551,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694465658
    },
    {
        "content": "<p>if it uploaded <code>A</code> to cache then <code>A</code> is what would be downloaded. The only kind of download failure I have seen here is truncated files, and the chances of this happening for a trace file is very small and quite obvious</p>",
        "id": 390386829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694465783
    },
    {
        "content": "<p>Looking at the <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6146608667/job/16676319758\">CI</a>, the <code>cache commit</code> line does appear to be produce an interesting \"Please commit your changes first\" line which is weird. The job is apparently running <code>lake exe cache commit || true</code> ignoring errors. On first glance, that seems like bad style instead of simply using the <code>continue-on-error</code> option on the GitHub action step.</p>",
        "id": 390386875,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694465811
    },
    {
        "content": "<p>the \"Please commit your changes first\" message seems to be normal, regular CI runs have it too</p>",
        "id": 390387194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466000
    },
    {
        "content": "<p>actually it seems like that might be a bug and all runs are borked</p>",
        "id": 390387414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466094
    },
    {
        "content": "<p>because if it outputs that then <code>lake exe cache commit</code> doesn't do anything</p>",
        "id": 390387464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466120
    },
    {
        "content": "<p>Yeah, that might be the problem....</p>",
        "id": 390387588,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694466167
    },
    {
        "content": "<p>this is the job that adds the <code>CACHE/c/COMMIT</code> file to the cache, which is currently unused</p>",
        "id": 390387596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466174
    },
    {
        "content": "<p>but apparently it is both unused and broken</p>",
        "id": 390387628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466190
    },
    {
        "content": "<p>Oh <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 390387642,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694466200
    },
    {
        "content": "<p>the real work is the <code>lake exe cache put</code> line</p>",
        "id": 390387657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466211
    },
    {
        "content": "<p>Still, the step should probably be using <code>continue-on-error</code> rather than <code>|| true</code> awaying errors.</p>",
        "id": 390387804,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694466284
    },
    {
        "content": "<p>It makes it hard to tell whether either of these commands are working.</p>",
        "id": 390388008,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694466366
    },
    {
        "content": "<p>I don't think they make much use of error codes to begin with</p>",
        "id": 390388052,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466398
    },
    {
        "content": "<p>I would hope they would at least produce a <code>1</code> if an error is encountered.</p>",
        "id": 390388133,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694466439
    },
    {
        "content": "<p>It looks like the newly added \"check the cache\" step doesn't even hit the network, so it's possible that one can reproduce the run locally?</p>",
        "id": 390388153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466455
    },
    {
        "content": "<p>at least, the \"Please commit your changes\" message is not accompanied by a nonzero error code</p>",
        "id": 390388266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694466509
    },
    {
        "content": "<p>Update: I have successfully replicated the issue using lean-cache (which reports more precise information regarding hash failures): on master all hashes are verified, but on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> you get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">ext</span>\n<span class=\"bp\">$</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">Nothing</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">186</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">94</span> <span class=\"n\">ms</span>\n<span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"mi\">29</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">were</span> <span class=\"n\">unpacked</span> <span class=\"n\">but</span> <span class=\"n\">the</span> <span class=\"n\">hash</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">match</span><span class=\"bp\">;</span>\n<span class=\"n\">run</span> <span class=\"bp\">`</span><span class=\"n\">lake</span> <span class=\"n\">build</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">rebuild</span> <span class=\"n\">these</span> <span class=\"n\">files</span> <span class=\"o\">(</span><span class=\"n\">and</span> <span class=\"n\">maybe</span> <span class=\"n\">report</span> <span class=\"n\">this</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 390461336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694504143
    },
    {
        "content": "<p>I think I cracked the puzzle, after lots of remote debugging (or at least most of it). Currently, the CI does <code>lake exe cache get</code>, compiles anything that is out of date, then uses <code>lake exe cache put</code> to put the new files on the server. For unknown reasons, the server acquired a file with the correct cache hash (i.e. <code>123.ltar</code> file name) but the incorrect lake hash (stored in the first few bytes of the file). Because of this, lake sees the affected files as being out of date and recompiles them in CI. Then <code>lake exe cache put</code> runs, and because it is not set to overwrite the cache, even though we have new oleans, because the old cache file is still there we do not pack some new files to replace it. Then we upload all the cache files back to the server, preserving the out of date hash.</p>",
        "id": 390499807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694518527
    },
    {
        "content": "<p>Nice! Do you have a solution?</p>",
        "id": 390500375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694518734
    },
    {
        "content": "<p>yes, a one-time <code>lake exe cache pack!</code> run in CI should fix it</p>",
        "id": 390500449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694518761
    },
    {
        "content": "<p>although I am considering adding some additional logic into <code>lake exe cache pack</code> to sniff the trace file out of the ltar to determine whether it should be overwritten even if it exists, so that it will be more self-correcting in the future</p>",
        "id": 390500866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694518899
    },
    {
        "content": "<p>This is great! I'm really looking forward to those new widgets :-) I watched Patrick's demo <a href=\"https://youtu.be/8MFGhOWeCNE\">https://youtu.be/8MFGhOWeCNE</a> recently and my understanding is that we need shiny new proofwidgets for the calc trickery :-) (start at 30m30s to see what we have to look forward to)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"8MFGhOWeCNE\" href=\"https://youtu.be/8MFGhOWeCNE\"><img src=\"https://uploads.zulipusercontent.net/3ef9e5370b6b30aa5a771f7edf1d42500673edff/68747470733a2f2f692e7974696d672e636f6d2f76692f384d4647684f5765434e452f64656661756c742e6a7067\"></a></div>",
        "id": 390500885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694518908
    },
    {
        "content": "<p>it looks like the \"palate cleanser\" worked</p>",
        "id": 390501989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694519349
    },
    {
        "content": "<p>Looks like this bors batch (of 17 PRs) failed with an error related to this <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6158436929/job/16711208573\">https://github.com/leanprover-community/mathlib4/actions/runs/6158436929/job/16711208573</a></p>",
        "id": 390504001,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694520059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you might want to take  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7099\">#7099</a> off the queue</p>",
        "id": 390504161,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694520115
    },
    {
        "content": "<p>uh oh</p>",
        "id": 390504406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694520197
    },
    {
        "content": "<p>it might be a hash collision</p>",
        "id": 390504427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694520205
    },
    {
        "content": "<p>seems pretty unlikely, but I can imagine that the reason the mystery cache file got on the server was because it was created by an unrelated run, and my palate cleanser just overwrote that file, causing the other build to fail for the same reason</p>",
        "id": 390504642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694520269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390504161\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> you might want to take  <a href=\"https://github.com/leanprover-community/mathlib4/pull/7099\">#7099</a> off the queue</p>\n</blockquote>\n<p>Done</p>",
        "id": 390504713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694520290
    },
    {
        "content": "<p>We can retry in the near future</p>",
        "id": 390504788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694520318
    },
    {
        "content": "<p>Also: huge shoutout to Mario for debugging this mystery!</p>",
        "id": 390504860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1694520345
    },
    {
        "content": "<p>The failed file in the other run is <code>ProofWidgets.Data.Json</code> which is also suspicious</p>",
        "id": 390505029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694520394
    },
    {
        "content": "<p>I think the issue is not a hash collision exactly, but rather the cache key isn't taking into account some input which lake is</p>",
        "id": 390505109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694520424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390500885\">said</a>:</p>\n<blockquote>\n<p>This is great! I'm really looking forward to those new widgets :-) I watched Patrick's demo <a href=\"https://youtu.be/8MFGhOWeCNE\">https://youtu.be/8MFGhOWeCNE</a> recently and my understanding is that we need shiny new proofwidgets for the calc trickery :-)</p>\n</blockquote>\n<p>there was also some other nice ones in <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>'s ITP presentation:) point to what you want to rewrite and it will generate <code>conv</code> to get you to that subgoal!</p>",
        "id": 390505426,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1694520518
    },
    {
        "content": "<p>I also showed it in my demo.</p>",
        "id": 390506644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694520951
    },
    {
        "content": "<p>Now the issue is manifesting on master: if you pull the cache then the proofwidgets files (and only those) are rebuilt by <code>lake build</code>. It seems to be a difference in the trace stored in <code>proofwidgets/v0.0.13/linux-64.tar.gz</code> and the one computed by <code>lake build</code> (and <code>lean-cache</code>). It would make sense that these bad hashes could get propagated/sustained through the cache, and there is at least one plausible mechanism for the bad hash (using oleans from the wrong arch and hoping they will end up the same in the end)</p>",
        "id": 390520571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694525337
    },
    {
        "content": "<p>AHA <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/v0.0.13/lean-toolchain\"><code>ProofWidgets-v0.0.13</code> uses the wrong lean-toolchain</a>, mathlib builds these files using <code>v4.0.0</code> but the distributed files were built by <code>nightly-2023-07-15</code>, and the toolchain is an input to the lake hash which is ignored by the cache hash (which only hashes the toolchain of mathlib itself, not dependent projects)</p>",
        "id": 390522465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694525978
    },
    {
        "content": "<p>And there is some competition here because both lake and cache want to unpack the files for <code>ProofWidgets</code>: lake has a zip file (with bad hashes) and cache has ltar files (with good hashes, usually)</p>",
        "id": 390523566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694526317
    },
    {
        "content": "<p>Unfortunately <code>v0.0.15</code> is <a href=\"https://github.com/EdAyers/ProofWidgets4/blob/v0.0.15/lean-toolchain\">also being built by a nightly</a> so it suffers from a similar issue, upgrading alone won't fix the mismatch. In fact I'm not sure how this whole setup ever really worked: whenever the proofwidgets toolchain doesn't exactly match mathlib's, lake will unpack the zip file and then immediately proceed to build the lean files and replace the originals</p>",
        "id": 390524334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694526562
    },
    {
        "content": "<p>oh no</p>",
        "id": 390524572,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694526634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I think this release thing doesn't really work as implemented. Before unpacking the release, you should check that the lean-toolchain is the same as the one being used for the compile, otherwise all the hashes will be useless and assuming they are correct leads to an inconsistent state. If it's not the same, then just proceed as if there is no release; mathlib's cache infrastructure can take over at that point but right now lake doesn't have any downstream opt-out for using releases</p>",
        "id": 390527032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694527365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390527032\">said</a>:</p>\n<blockquote>\n<p>Before unpacking the release, you should check that the lean-toolchain is the same as the one being used for the compile, otherwise all the hashes will be useless and assuming they are correct leads to an inconsistent state.</p>\n</blockquote>\n<p>Lake does not assume they are correct. It rebuilds the files if they are not. The Mathlib cache should be clobbering the proofwidget oleans anyway with its own, so nothing should break in that regard.</p>\n<p>One key issue here though is that the proof widget cloud release hash is platform-dependent which trickles down to any dependent olean and causes a rebuild, but that is not a new issue. It will also be fixed once <a href=\"https://github.com/leanprover/lean4/pull/2521\">lean4#2521</a> is merged (cloud releases no longer effect traces).</p>",
        "id": 390619112,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694564908
    },
    {
        "content": "<p>It should check this before downloading the zip file, because otherwise it's a waste of time to download it when you know nothing in it will be usable because the root hash is wrong</p>",
        "id": 390619464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565103
    },
    {
        "content": "<p>Moreover, mathlib has no use for the cloud build at all, I'd like to just turn it off. Why is \"prefer release build\" a choice of the dependency rather than the main package? At least there should be an override</p>",
        "id": 390619586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565169
    },
    {
        "content": "<blockquote>\n<p>the proof widget cloud release hash is platform-dependent</p>\n</blockquote>\n<p>I don't think this is an issue given that <span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> is faking platform independence by distributing the same file under three names</p>",
        "id": 390619734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390619464\">said</a>:</p>\n<blockquote>\n<p>It should check this before downloading the zip file, because otherwise it's a waste of time to download it when you know nothing in it will be usable because the root hash is wrong</p>\n</blockquote>\n<p>This is not necessarily true. Cloud releases can also contain FFI artifacts that are not Lean toolchain dependent (this is true, for instance, for <a href=\"https://github.com/lean-dojo/LeanInfer/tree/improve-installation\">LeanInfer</a>).</p>",
        "id": 390619885,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694565327
    },
    {
        "content": "<p>This is also true for ProofWidgets were the primary point of the cloud release is to ship the compiled JS which is not toolchain dependent.</p>",
        "id": 390620019,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694565390
    },
    {
        "content": "<p>I would rather it just have a zip file with those JS files that cache can unpack</p>",
        "id": 390620078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565431
    },
    {
        "content": "<p>the release stuff is just complicating matters</p>",
        "id": 390620089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565444
    },
    {
        "content": "<blockquote>\n<p>Now the issue is manifesting on master: if you pull the cache then the proofwidgets files (and only those) are rebuilt by lake build</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this definitely the same issue? As you note, the proofwidget oleans <em>are</em> supposed to be rebuilt because they may have been built for the wrong platform. The original problem was that mathlib itself was being rebuilt for some reason.</p>",
        "id": 390620128,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694565471
    },
    {
        "content": "<p>I'm not sure, I got cross-eyed tracking the issues</p>",
        "id": 390620222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565512
    },
    {
        "content": "<p>I think that issue persists on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a></p>",
        "id": 390620241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565526
    },
    {
        "content": "<p>confirmed, mathlib is being rebuilt on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a></p>",
        "id": 390620431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565622
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390620128\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> is this definitely the same issue? As you note, the proofwidget oleans <em>are</em> supposed to be rebuilt because they may have been built for the wrong platform.</p>\n</blockquote>\n<p>Hmm, in that case my change in <a href=\"https://github.com/leanprover/lean4/pull/2521\">lean4#2521</a> may cause them to <em>not</em> be rebuilt. <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span>, if the are platform dependent it might be worth adding a hash of the platform descriptor as an <code>extraDepTarget</code>?</p>",
        "id": 390620755,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694565820
    },
    {
        "content": "<p>no please stop breaking the build</p>",
        "id": 390620995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565957
    },
    {
        "content": "<p>we really need those hashes to not be OS dependent</p>",
        "id": 390621087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694565982
    },
    {
        "content": "<blockquote>\n<p>Hmm, in that case my change in <a href=\"https://github.com/leanprover/lean4/pull/2521\">lean4#2521</a> may cause them to not be rebuilt. </p>\n</blockquote>\n<p>Sorry, I was assuming that standard <code>.olean</code>s are platform dependent. If that's not the case, then neither are PW4 <code>.olean</code>s. They are at least toolchain-version-dependent, right?</p>",
        "id": 390621163,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694566038
    },
    {
        "content": "<p>they are actually not toolchain-version-dependent most of the time</p>",
        "id": 390621334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694566111
    },
    {
        "content": "<p>but it is hard to predict in advance whether a toolchain change will cause a change to the olean</p>",
        "id": 390621384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694566133
    },
    {
        "content": "<p>Oh, I see that the binary format does not store the string literal for the toolchain version. Does it store an <code>.olean</code>-format-version? If not, how does Lake know when to rebuild on toolchain bumps?</p>",
        "id": 390621552,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694566210
    },
    {
        "content": "<p>Oh, is it just that the trace includes the toolchain version, but the binary contents of the <code>.olean</code> itself might not technically change?</p>",
        "id": 390621626,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694566262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/git.20revision.20of.20dependency.20'proofwidgets'.20changed/near/390619586\">said</a>:</p>\n<blockquote>\n<p>Why is \"prefer release build\" a choice of the dependency rather than the main package?</p>\n</blockquote>\n<p>Sorry, I did not notice this comment before. The reason for this is because Lake's build are bottom-up not top-down. A build only knows its immediate dependencies, not nested ones and not its dependents. Fetching releases (as one of the first actions) is at the very bottom of this tree and thus only has access to its immediate package.  The whole dependency fetching part of Lake's design was inspired by the <a href=\"https://dl.acm.org/doi/abs/10.1145/3236774\">Build systems à la carte</a> paper.  </p>\n<p>However, Lake could provide an CLI override to forcibly turn this off for packages when it loads them by setting the loaded package configuration's <code>preferReleaseBuild</code> to <code>false</code>. </p>\n<blockquote>\n<p>Moreover, mathlib has no use for the cloud build at all, I'd like to just turn it off. </p>\n</blockquote>\n<p>This can still be done  currently if the package itself provides a configuration option to turn cloud releases off (e.g., via <code>-KnoCloudRelease</code> in ProofWidgets that sets <code>preferReleaseBuild</code> to <code>false</code>).</p>",
        "id": 390651845,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694584286
    },
    {
        "content": "<blockquote>\n<p>Moreover, mathlib has no use for the cloud build at all, I'd like to just turn it off. </p>\n</blockquote>\n<p>Note that for PW4 the cloud build is crucial to avoid everyone having to install and run NodeJS. It could in principle be rolled into the mathlib cache, but I would prefer to stick to general Lean package ecosystem tooling whenever possible.</p>",
        "id": 390789717,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694633811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, when you have a moment, would you mind summarising for me and <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> where you got to on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a>? I haven't looked at this since you started looking at it, and I don't have much sense of what needs to be done to give Patrick his shiny toys. :-)</p>",
        "id": 391037873,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694736996
    },
    {
        "content": "<p>There is an open PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/7143\">#7143</a> which will improve debugging for issues such as this one</p>",
        "id": 391037986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694737071
    },
    {
        "content": "<p>I think we also might want PW4 to use the same version as mathlib, although things should still work without this</p>",
        "id": 391038083,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694737110
    },
    {
        "content": "<p>some of the issues I was having with e.g. bad traces on nightly disappeared after some waiting, so I'm not sure if this is a temporary issue</p>",
        "id": 391038196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694737171
    },
    {
        "content": "<p>Great, thanks. I just restarted the build for <a href=\"https://github.com/leanprover-community/mathlib4/pull/7143\">#7143</a> (broken by the runner carnage), and <span aria-label=\"peace sign\" class=\"emoji emoji-270c\" role=\"img\" title=\"peace sign\">:peace_sign:</span>'d.</p>",
        "id": 391038567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694737326
    },
    {
        "content": "<p>I bumped the version of leantar in <a href=\"https://github.com/leanprover-community/mathlib4/pull/7143\">#7143</a>:</p>\n<blockquote>\n<p>The new version of leantar has a new function: <code>leantar -k 1234.ltar</code> will print out the \"comments\" in the file. If it is a file generated by an old version of leantar it will be empty, but files generated subsequent to this commit will show something along the lines <code>git=mathlib4@12de34</code> containing the commit sha for the run that generated this ltar file.</p>\n</blockquote>",
        "id": 391040668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694738153
    },
    {
        "content": "<p>I just tried <code>lean exe cache get &amp;&amp; lake build</code> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a> and it seems to work, can anyone else replicate?</p>",
        "id": 391041711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694738529
    },
    {
        "content": "<p>I'd very happy to try, but I have no idea what you want me to do.</p>",
        "id": 391041821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694738578
    },
    {
        "content": "<p>just check out the branch and see whether lake build does anything after cache get</p>",
        "id": 391042169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694738711
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3344</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">3344</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3344</span><span class=\"bp\">/</span><span class=\"mi\">3344</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3733</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">ProofWidgets.Data.Json</span> <span class=\"n\">hash</span> <span class=\"n\">before</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">10852882052451301938</span><span class=\"o\">),</span> <span class=\"n\">downloading</span> <span class=\"mi\">4</span><span class=\"n\">c5ca804ed29bc79.ltar</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">6790</span> <span class=\"n\">ms</span>\n<span class=\"n\">ProofWidgets.Data.Json</span> <span class=\"n\">hash</span> <span class=\"n\">after</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">16603086849742441083</span><span class=\"o\">)</span>\n<span class=\"n\">pmassot</span><span class=\"bp\">@</span><span class=\"n\">fixe</span><span class=\"bp\">-</span><span class=\"n\">massy</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">69</span><span class=\"bp\">/</span><span class=\"mi\">175</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Tactic.LabelAttr</span>\n<span class=\"o\">[</span><span class=\"mi\">69</span><span class=\"bp\">/</span><span class=\"mi\">177</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Data.Array.Defs</span>\n<span class=\"o\">[</span><span class=\"mi\">69</span><span class=\"bp\">/</span><span class=\"mi\">175</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Data.KVMap</span>\n<span class=\"o\">[</span><span class=\"mi\">69</span><span class=\"bp\">/</span><span class=\"mi\">178</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Mathlib.Lean.Meta.Simp</span>\n</code></pre></div>\n<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 391042696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694738888
    },
    {
        "content": "<p>This is on a fresh clone of mathlib after switching to the PR branch.</p>",
        "id": 391042798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694738932
    },
    {
        "content": "<p>Or did you mean it works for you in the sense that you get the message about the hash mismatch?</p>",
        "id": 391042854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694738959
    },
    {
        "content": "<p>well I've been doing all kinds of things including <code>lake exe cache pack</code> so it's possible my local cache is correct and fooling me</p>",
        "id": 391042925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694738989
    },
    {
        "content": "<p>I'm going to assume the issue persists, because I haven't actually changed anything :)</p>",
        "id": 391043229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694739096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> can you try clearing your cache and try again?</p>",
        "id": 391043650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694739238
    },
    {
        "content": "<p>I just cleared my cache and I still get a clean <code>lake build</code></p>",
        "id": 391043740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694739259
    },
    {
        "content": "<p>How do you clear your cache?</p>",
        "id": 391043758,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694739273
    },
    {
        "content": "<p><code>lake exe cache clean!</code> I think</p>",
        "id": 391043782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694739284
    },
    {
        "content": "<p>you can also just <code>rm ~/.cache/mathlib/*.ltar</code></p>",
        "id": 391043816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694739298
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pmassot</span><span class=\"bp\">@</span><span class=\"n\">fixe</span><span class=\"bp\">-</span><span class=\"n\">massy</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">rm</span> <span class=\"bp\">-</span><span class=\"n\">rf</span> <span class=\"bp\">~/.</span><span class=\"n\">cache</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span>\n<span class=\"n\">pmassot</span><span class=\"bp\">@</span><span class=\"n\">fixe</span><span class=\"bp\">-</span><span class=\"n\">massy</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">leantar</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">old</span><span class=\"bp\">;</span> <span class=\"n\">downloading</span> <span class=\"n\">more</span> <span class=\"n\">recent</span> <span class=\"n\">version</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">3733</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span><span class=\"o\">:</span> <span class=\"mi\">3733</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">attempted</span> <span class=\"mi\">3733</span><span class=\"bp\">/</span><span class=\"mi\">3733</span> <span class=\"bp\">=</span> <span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">100</span><span class=\"bp\">%</span> <span class=\"n\">success</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3733</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">ProofWidgets.Data.Json</span> <span class=\"n\">hash</span> <span class=\"n\">before</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">16603086849742441083</span><span class=\"o\">),</span> <span class=\"n\">downloading</span> <span class=\"mi\">4</span><span class=\"n\">c5ca804ed29bc79.ltar</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">198</span> <span class=\"n\">ms</span>\n<span class=\"n\">ProofWidgets.Data.Json</span> <span class=\"n\">hash</span> <span class=\"n\">after</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">2539444116390327465</span><span class=\"o\">)</span>\n<span class=\"n\">pmassot</span><span class=\"bp\">@</span><span class=\"n\">fixe</span><span class=\"bp\">-</span><span class=\"n\">massy</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">pmassot</span><span class=\"bp\">@</span><span class=\"n\">fixe</span><span class=\"bp\">-</span><span class=\"n\">massy</span><span class=\"o\">:</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">$</span>\n</code></pre></div>\n<p>is looking much better!</p>",
        "id": 391045874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694740059
    },
    {
        "content": "<p>Should we merge this?</p>",
        "id": 391062408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694746665
    },
    {
        "content": "<p>Is it true that the <code>lake exe cache pack!</code> invocation seems to fix the issue, but it is not clear why it does so or what the issue was? That would be mildly unsettling, though a fix is a fix!</p>",
        "id": 391064085,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1694747373
    },
    {
        "content": "<p><code>lake exe cache pack!</code> (followed by <code>lake exe cache put</code>, when run on CI) has the effect of overwriting any cache files with new versions. The purpose of <a href=\"https://github.com/leanprover-community/mathlib4/pull/7143\">#7143</a> is to help determine where the bad cache files actually came from - they could be from any run for any PR. So if things are fixed now I think we should just go forward with it and keep an eye out for similar issues later, and we will be able to find the run that conflicts. My guess is that what is happening is that there are two runs from different versions of something, which have the same cache key because some relevant difference is not being hashed. It's hard to debug that without knowing what are the runs in question.</p>",
        "id": 391064908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694747761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you typoed <code>bord merge</code> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7070\">#7070</a></p>",
        "id": 391073231,
        "sender_full_name": "Timo Carlin-Burns",
        "timestamp": 1694751389
    },
    {
        "content": "<p>Super-powered <code>calc</code> gets one step closer :-)</p>",
        "id": 391091638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694759882
    }
]