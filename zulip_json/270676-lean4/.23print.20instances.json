[
    {
        "content": "<p>Lean 3 had a builtin <code>#print instances has_one</code> command that you could use to quickly see what instances were available. Does Lean 4 have something equivalent?</p>",
        "id": 349216228,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681421757
    },
    {
        "content": "<p>For future reference, I believe the answer is no.</p>",
        "id": 354728390,
        "sender_full_name": "Mac Malone",
        "timestamp": 1682876599
    },
    {
        "content": "<p>However as doc-gen shows such a command can be implemented</p>",
        "id": 354729161,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1682876938
    },
    {
        "content": "<p>Is there any update on this question? Should we copy some code from doc-gen to std to get back <code>#print instances</code>?</p>",
        "id": 361989586,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685376992
    },
    {
        "content": "<p>Is there at least a command that takes a declaration name and tells whether it is an instance?</p>",
        "id": 361989611,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685377003
    },
    {
        "content": "<p>yes</p>",
        "id": 361989630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377013
    },
    {
        "content": "<p>well not a command but a lean 4 metaprogramming function</p>",
        "id": 361989669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377027
    },
    {
        "content": "<p>I understand this is doable by metaprogramming, I'm asking about end-user commands.</p>",
        "id": 361990830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685377433
    },
    {
        "content": "<p>someone would need to write the command. I don't think it is especially hard</p>",
        "id": 361990935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377463
    },
    {
        "content": "<p>I'm not suggesting you should do it, I'm asking whether it already exists.</p>",
        "id": 361991111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685377546
    },
    {
        "content": "<p><code>#print instances</code> does not exist, of course, otherwise you wouldn't be asking</p>",
        "id": 361991485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377662
    },
    {
        "content": "<p>an end user command that just says whether the specified declaration is an instance sounds rather overspecific, like a really basic version of <code>#print</code></p>",
        "id": 361991661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377717
    },
    {
        "content": "<p>I'm not sure why you would ever want to use it</p>",
        "id": 361991690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685377735
    },
    {
        "content": "<p>Does #print still show the <code>@[instance]</code> line in Lean 4?</p>",
        "id": 361991907,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685377810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.23print.20instances/near/361991485\">said</a>:</p>\n<blockquote>\n<p><code>#print instances</code> does not exist, of course, otherwise you wouldn't be asking</p>\n</blockquote>\n<p>It could have an other name. Lots of things were renamed in Lean 4.</p>",
        "id": 361992352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685377987
    },
    {
        "content": "<p>And indeed the second question wouldn't make sense if <code>#print</code> had the same behavior as in Lean 3.</p>",
        "id": 361992426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685378018
    },
    {
        "content": "<p>nope, <code>#print</code> had about 15 functions in lean 3, now it has only 2 IIRC</p>",
        "id": 361992427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378018
    },
    {
        "content": "<p>Are you arguing that it should not show attributes?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n<span class=\"c1\">-- def foo : Repr Nat :=</span>\n<span class=\"c1\">-- sorryAx (Repr Nat)</span>\n<span class=\"c1\">-- no `@[instance]`like we had in Lean 3 :(</span>\n</code></pre></div>",
        "id": 361992709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378129
    },
    {
        "content": "<p>of course it should</p>",
        "id": 361992765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378158
    },
    {
        "content": "<p>attribute delaboration was a thing I was going to work on but it got delayed. It needs a whole new framework that doesn't exist right now</p>",
        "id": 361992894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378203
    },
    {
        "content": "<p>doing it for enumerated attributes isn't so bad though</p>",
        "id": 361992925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378215
    },
    {
        "content": "<p>the print command does support a few (2 or 3) attributes</p>",
        "id": 361993011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378258
    },
    {
        "content": "<p>My assumption was that that was what Patrick was requesting by</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.23print.20instances/near/361989611\">said</a>:</p>\n<blockquote>\n<p>Is there at least a command that takes a declaration name and tells whether it is an instance?</p>\n</blockquote>",
        "id": 361993059,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378277
    },
    {
        "content": "<p><code>@[instance]</code> should probably be one of them</p>",
        "id": 361993065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378278
    },
    {
        "content": "<p>As I said, the command doesn't exist, but it's just one PR away from existing</p>",
        "id": 361993228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378330
    },
    {
        "content": "<p>adding <code>@[instance]</code> support to <code>#print</code> is probably a lot easier than general attribute delaboration</p>",
        "id": 361993302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378360
    },
    {
        "content": "<p>In terms of <code>#print instances SomeClass</code>; how about <code>#synth SomeClass</code>?</p>",
        "id": 361993385,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378391
    },
    {
        "content": "<p>what about it?</p>",
        "id": 361993482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378409
    },
    {
        "content": "<p>That is, have the same behavior switch as <code>#check foo</code> / <code>#check (foo)</code></p>",
        "id": 361993507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378420
    },
    {
        "content": "<p>If we want <code>#print instances</code> it can just be called <code>#print instances</code></p>",
        "id": 361993547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378442
    },
    {
        "content": "<p>I'm suggesting we merge it with synth</p>",
        "id": 361993585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378454
    },
    {
        "content": "<p>Asking for all the instances is a pretty similar request to asking for a specific one</p>",
        "id": 361993650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378475
    },
    {
        "content": "<p>unless there is a reason to believe that a different command would make more sense</p>",
        "id": 361993651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.23print.20instances/near/361993650\">said</a>:</p>\n<blockquote>\n<p>Asking for all the instances is a pretty similar request to asking for a specific one</p>\n</blockquote>\n<p>I'm not so sure about that</p>",
        "id": 361993695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378489
    },
    {
        "content": "<p>the <code>#synth</code> naming sounds really ill-suited for this task</p>",
        "id": 361993795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378522
    },
    {
        "content": "<p>it's actually probably a better fit for <code>#help</code>, which is all about listing information in the system</p>",
        "id": 361993915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378548
    },
    {
        "content": "<p>I'm suggesting:</p>\n<ul>\n<li><code>#synth SomeClass SomeType</code> means \"show me the output of <code>inferInstanceAs (SomeClass SomeType)</code>\"</li>\n<li><code>#synth SomeClass</code> means \"show me all instances for <code>SomeClass</code>\"</li>\n<li><code>#synth (SomeClass)</code> means  \"show me the output of <code>inferInstanceAs (SomeClass)</code>\" (for which <code>ToLevel</code> is the only real class)</li>\n</ul>",
        "id": 361993936,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378555
    },
    {
        "content": "<p>e.g. <code>#help tactic</code> shows all the tactics, <code>#help attr</code> shows all the attributes, <code>#help command</code>  shows all the commands etc</p>",
        "id": 361994094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685378606
    },
    {
        "content": "<p>Here's a proposal for a command to print instances: <a href=\"https://github.com/leanprover/std4/pull/148\">std4#148</a></p>\n<p>It has the same syntax as <code>#synth</code>, but rather than running the entire synth algorithm it just does the first step (<code>Lean.Meta.SynthInstance.getInstances</code>) and then prints out the list of results.</p>\n<p>For shorthand, if you write <code>#instances Add</code> for example, then it will auto-insert placeholders to turn the function into a type, so this is the same as <code>#instances Add _</code>. The fact it's a full expression lets you write things like <code>#instances OfNat _ (nat_lit 0)</code> to find specific kinds of instances.</p>",
        "id": 362008006,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685383402
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/.23print.20instances/near/361989586\">said</a>:</p>\n<blockquote>\n<p>Should we copy some code from doc-gen to std to get back <code>#print instances</code>?</p>\n</blockquote>\n<p>It turns out that the way doc-gen works is that after it's finished generating the docs for every declaration, it goes back and figures out for each class which of the declarations apply based on the type name. This makes sense for docgen, but for this command running the first step of the instance synthesis algorithm seems to make more sense (plus we get this more powerful query where we can partially apply arguments and leave placeholders).</p>",
        "id": 362008541,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685383590
    },
    {
        "content": "<p>Oh, you are further along than me, here's my <code>#print instance</code> impl:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Group.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n<span class=\"n\">elab</span> <span class=\"n\">tk</span><span class=\"o\">:</span><span class=\"s2\">\"#print \"</span> <span class=\"s2\">\"instance \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Command.liftTermElabM</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">â</span> <span class=\"n\">Term.elabType</span> <span class=\"n\">stx</span>\n    <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">â</span> <span class=\"n\">isClass</span><span class=\"bp\">?</span> <span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isSome</span> <span class=\"k\">do</span>\n      <span class=\"n\">throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"'{type}' is not a class\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">globalInstances</span> <span class=\"bp\">â</span> <span class=\"n\">getGlobalInstancesIndex</span>\n    <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"bp\">â</span> <span class=\"n\">globalInstances.getUnify</span> <span class=\"n\">type</span>\n    <span class=\"k\">let</span> <span class=\"n\">erasedInstances</span> <span class=\"bp\">â</span> <span class=\"n\">getErasedInstances</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"\"</span>\n    <span class=\"n\">for</span> <span class=\"n\">e</span> <span class=\"k\">in</span> <span class=\"n\">result.insertionSort</span> <span class=\"k\">fun</span> <span class=\"n\">eâ</span> <span class=\"n\">eâ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eâ.priority</span> <span class=\"bp\">&lt;</span> <span class=\"n\">eâ.priority</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">Expr.const</span> <span class=\"n\">c</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e.val</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n      <span class=\"k\">if</span> <span class=\"n\">erasedInstances.contains</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n        <span class=\"n\">continue</span>\n      <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">msg</span> <span class=\"bp\">++</span> <span class=\"bp\">.</span><span class=\"n\">ofPPFormat</span> <span class=\"o\">{</span> <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ctx.runMetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">PrettyPrinter.ppSignature</span> <span class=\"n\">c</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}\"</span>\n      <span class=\"o\">}</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"n\">msg</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"#print \"</span> <span class=\"s2\">\"instance \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#print</span> <span class=\"kd\">instance</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">instance</span> <span class=\"n\">Add</span>\n</code></pre></div>",
        "id": 362009643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685384000
    },
    {
        "content": "<p>I'm currently trying to figure out how to get the constant names to link, since it seems <code>ppSignature</code> doesn't do that automatically (cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> )</p>",
        "id": 362009729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685384032
    },
    {
        "content": "<p>I noticed that when I wrote <a href=\"https://github.com/leanprover-community/mathlib4/pull/1218/files#diff-3f972cf26c3a023c13b124300184bdf6616b84448254a318a471ccaec52cbbc7R182\">this line</a> in the <code>#explode</code> PR. There's a chance if you <a href=\"https://github.com/leanprover-community/mathlib4/pull/1218/files#diff-3f972cf26c3a023c13b124300184bdf6616b84448254a318a471ccaec52cbbc7R31\">set <code>pp.tagAppFns</code></a> when you do <code>ppSignature</code> you'll get it, though I haven't tried.</p>",
        "id": 362010254,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685384212
    },
    {
        "content": "<p>yep that works</p>",
        "id": 362010578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685384335
    },
    {
        "content": "<p>argh it doesn't work when the constant has universes</p>",
        "id": 362010645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685384362
    },
    {
        "content": "<p>false alarm, it does work but <code>AddSemigroup.toAdd</code> is missing declarationRanges so ctrl-click is broken for it</p>",
        "id": 362021727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685388684
    }
]