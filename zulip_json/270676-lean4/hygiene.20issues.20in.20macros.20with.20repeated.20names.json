[
    {
        "content": "<p>I'm struggling a little with this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"apply_mt\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"s2\">\" with \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">apply_mt</span> <span class=\"bp\">$</span><span class=\"n\">e</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mt</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ok</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_mt</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span>\n  <span class=\"c1\">-- h1 : c = d ⊢ a = b</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bad</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">≠</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply_mt</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- h1 : a ≠ b ⊢ a = b</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Here, the first tactic works as intended, but the second fails due to aliasing between the <code>$e</code> and <code>$e'</code> macro arguments. Is there a recommended workaround for this?</p>",
        "id": 399059662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698505703
    },
    {
        "content": "<p>Ideally I'd have some way to resolve the name up front; but presumably I can only do that within a <code>elab_rules</code> not a <code>macro_rules</code>?</p>",
        "id": 399060594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698506371
    },
    {
        "content": "<p>(I know here that I can just rewrite the tactic to use <code>intro</code> rather than <code>fun</code> to resolve the issue,  but I was hoping for a more general solution)</p>",
        "id": 399060692,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698506409
    }
]