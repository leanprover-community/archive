[
    {
        "content": "<p>In LFTCM2023, we had a problem related to \"apply?\" tactic. More precisely, after writing the \"apply?\" tactic, it gave several suggestions. However, after doing the corresponding replacement, say \"refine Iff.mpr mem_lowerBounds ?h.a\", then LEAN failed to continue. Thanks to Eric Wieser, he suggested to rewrite \"refine Iff.mpr mem_lowerBounds ?h.aa\" which solved the problem. It seems that it is a bug</p>",
        "id": 389371052,
        "sender_full_name": "DogaCanSertbas",
        "timestamp": 1693991041
    },
    {
        "content": "<p>(I am in the process of minimising the example for Doga)</p>",
        "id": 389371911,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693991335
    },
    {
        "content": "<p>On a related note, has the output of <code>apply?</code> ever been useful for you?</p>",
        "id": 389371938,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693991344
    },
    {
        "content": "<p>I am not attempting to criticize the tactic. I just want to know whether I should keep trying to make use of it.</p>",
        "id": 389372183,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693991410
    },
    {
        "content": "<p>In this actual case the third result of apply? was a sensible suggestion (although <code>rw?</code> finds the same correct lemma as its first suggestion, and avoids the <code>Iff.mpr</code> at the start). So I suppose it was useful but not as useful as <code>rw?</code> would have been</p>",
        "id": 389372329,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693991466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/apply.3F.20tactic.20fails.3F/near/389371938\">dedi</a>:</p>\n<blockquote>\n<p>On a related note, has the output of <code>apply?</code> ever been useful for you?</p>\n</blockquote>\n<p>As a beginner, I can say yes :)</p>",
        "id": 389372586,
        "sender_full_name": "DogaCanSertbas",
        "timestamp": 1693991555
    },
    {
        "content": "<p>I am happy to hear about it!</p>",
        "id": 389372714,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693991589
    },
    {
        "content": "<p>Speaking of beginners, it took me almost two years to learn what the <code>.mpr</code> thing means, lol.</p>",
        "id": 389372972,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1693991685
    },
    {
        "content": "<p>I'm struggling to get it more minimised, so here's my progress so far in case someone else can take it further:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">bad_definition</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">⨅</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">failure</span> <span class=\"o\">:</span> <span class=\"n\">bad_definition</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">ciInf_le_of_le</span> <span class=\"n\">_</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">·</span> <span class=\"n\">apply</span> <span class=\"n\">ciInf_le_of_le</span> <span class=\"n\">_</span> <span class=\"n\">le_rfl</span>\n    <span class=\"bp\">·</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">0</span>\n      <span class=\"n\">refine</span> <span class=\"n\">Iff.mpr</span> <span class=\"n\">mem_lowerBounds</span> <span class=\"bp\">?</span><span class=\"n\">h.a</span>\n      <span class=\"gr\">sorry</span>\n  <span class=\"bp\">·</span> <span class=\"n\">use</span> <span class=\"mi\">0</span>\n    <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 389375898,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1693992753
    },
    {
        "content": "<p>I'm not sure exactly what the correct fix is yet, but here is a more minimal example with the same behaviour (though in this case you could say that axiom f is written badly)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">a</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span>\n  <span class=\"n\">apply</span> <span class=\"n\">f</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">apply</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 389399288,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694000023
    },
    {
        "content": "<p>Would it work to have two axioms which both use the name <code>h</code>, so it's not attributable to bad naming of a single thing?</p>",
        "id": 389466977,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1694015945
    }
]