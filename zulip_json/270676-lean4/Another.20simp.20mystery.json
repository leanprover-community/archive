[
    {
        "content": "<p>Since Leo is currently working on the simplifier, I'm resuming my work to detect differences between Lean 3 and Lean 4 simp. I think the following is not directly something I've already discussed here. Compare Lean 3 code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exp_log</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and Lean 4 version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exp_log</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"c1\">-- fails</span>\n  <span class=\"c1\">-- simp [exp_log hx] would work</span>\n</code></pre></div>",
        "id": 398356577,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698179538
    },
    {
        "content": "<p>Of course in the example the version that works is one character shorter than the failing one, but this isn't always true.</p>",
        "id": 398356701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698179618
    },
    {
        "content": "<p>I tried making an mathlib-free example but failed to do it quickly and ran out of time for now.</p>",
        "id": 398356771,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698179644
    },
    {
        "content": "<p><del>The Lean 3 <code>hx</code> is presumably a statement about nats, so the examples aren't exactly the same?</del></p>",
        "id": 398364534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698183644
    },
    {
        "content": "<p>Sorry, that was a copy-paste issue on Zulip.</p>",
        "id": 398366892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698184940
    },
    {
        "content": "<p>The two examples are absolutely identical except it works in Lean 3 but not in Lean 4.</p>",
        "id": 398366933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698184965
    },
    {
        "content": "<p>Minimizing is tricky. Consider the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.SpecialFunctions.Log.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Real</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.Tactic.simp</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">exp</span> <span class=\"o\">(</span><span class=\"n\">log</span> <span class=\"bp\">$</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">exp_log</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"c1\">--fails</span>\n\n<span class=\"sd\">/-- Fake real numbers. -/</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span> <span class=\"kd\">axiom</span> <span class=\"n\">Rcast</span> <span class=\"o\">:</span> <span class=\"n\">NatCast</span> <span class=\"n\">R</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Rexp</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Rlog</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span>\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span> <span class=\"kd\">axiom</span> <span class=\"n\">Rlt</span> <span class=\"o\">:</span> <span class=\"n\">LT</span> <span class=\"n\">R</span>\n<span class=\"kd\">@[</span><span class=\"n\">instance</span><span class=\"kd\">]</span> <span class=\"kd\">axiom</span> <span class=\"n\">Rzero</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">Rexp_Rlog</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rexp</span> <span class=\"o\">(</span><span class=\"n\">Rlog</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.cast</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Rexp</span> <span class=\"o\">(</span><span class=\"n\">Rlog</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Rexp_Rlog</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">]</span> <span class=\"c1\">--works!</span>\n</code></pre></div>",
        "id": 398369739,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698186656
    },
    {
        "content": "<p>and using <code>@[instance] axiom Rzero : OfNat R 0</code> instead of <code>@[instance] axiom Rzero : Zero R</code> makes not difference.</p>",
        "id": 398369919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698186769
    }
]