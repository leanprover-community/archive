[
    {
        "content": "<p>How could I make a macro in Lean such that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>expands into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 282975293,
        "sender_full_name": "Joseph O",
        "timestamp": 1652986325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"n\">binder</span><span class=\"bp\">*</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 8</span>\n</code></pre></div>",
        "id": 282985507,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652991038
    },
    {
        "content": "<p>Here's a fun idea:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">binder</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">add</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 8</span>\n</code></pre></div>",
        "id": 282985928,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652991248
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 282988007,
        "sender_full_name": "Joseph O",
        "timestamp": 1652992222
    },
    {
        "content": "<p>There's something wrong with my code tho</p>",
        "id": 282988136,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652992277
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">add</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bla</span> <span class=\"n\">Int</span><span class=\"o\">])</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 5</span>\n</code></pre></div>\n<p>I would expect that to eval to <code>3</code>, but it's being evaluated to <code>5</code>. Maybe someone else might be able to help you</p>",
        "id": 282988560,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1652992467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I think its because the arguments are reversed</p>",
        "id": 282991324,
        "sender_full_name": "Joseph O",
        "timestamp": 1652993864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 282993328,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652995001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Definition.20Macro.3F/near/282985928\">said</a>:</p>\n<blockquote>\n<p>Here's a fun idea:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">binder</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">add</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">add</span> <span class=\"mi\">3</span> <span class=\"mi\">5</span> <span class=\"c1\">-- 8</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I tried to modify this to allow the type to be omitted and inferred by _, but it doesn't work and I don't know why.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">explicitBinder</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"n\">explicitBinder</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">defn</span><span class=\"o\">)</span> <span class=\"c\">/-</span><span class=\"cm\"> (priority := high) -/</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">binder</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"o\">(</span><span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">defn</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n<span class=\"c1\">-- Insertion of _ type for plain idents</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n<span class=\"c1\">-- Necessary to avoid strange errors - not sure exactly why</span>\n<span class=\"kn\">section</span> <span class=\"kd\">end</span>\n\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"c1\">-- elaboration for 'defn' not implemented</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">foo</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"c1\">-- unable to fill the _, but successfully defines `foo : Nat`</span>\n\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">(</span><span class=\"n\">const</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- elaboration for 'defn' not implemented</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">const</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">a</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- same</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">const</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- same</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">const</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"n\">β</span> <span class=\"n\">a</span><span class=\"o\">])</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- works</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">const</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"c1\">-- unable to fill all 3 _'s, but successfully defines `const`</span>\n</code></pre></div>\n<p>(Note: the warnings say that all holes in an explicitly given type for a declaration  are elaborated before looking at the body, so that an error there makes sense, although I'm not sure why those definitions work anyway if that's the case.)</p>\n<p>What is going wrong here?</p>",
        "id": 283030650,
        "sender_full_name": "Raghuram",
        "timestamp": 1653029433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as unresolved.</p>",
        "id": 283066749,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653052215
    },
    {
        "content": "<p>Hm can someone explain this weird behavior?<br>\n<a href=\"/user_uploads/3121/gsoDTwnvvwOyVsyUUq_bRhc0/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/sscpr5FgCNQwdVtinZ3vBsTu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/gsoDTwnvvwOyVsyUUq_bRhc0/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/gsoDTwnvvwOyVsyUUq_bRhc0/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sscpr5FgCNQwdVtinZ3vBsTu/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sscpr5FgCNQwdVtinZ3vBsTu/image.png\"></a></div>",
        "id": 283066800,
        "sender_full_name": "Joseph O",
        "timestamp": 1653052237
    },
    {
        "content": "<p>I can't understand what's wrong with those screenshots</p>",
        "id": 283066935,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653052318
    },
    {
        "content": "<p>For more context, here is <code>test3</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span>\n</code></pre></div>",
        "id": 283067048,
        "sender_full_name": "Joseph O",
        "timestamp": 1653052355
    },
    {
        "content": "<p>I believe you posted on the wrong thread</p>",
        "id": 283067120,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653052390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20Macro.3F/near/283067120\">said</a>:</p>\n<blockquote>\n<p>I believe you posted on the wrong thread</p>\n</blockquote>\n<p>I don't think so, because this has something to do with the definition macro</p>",
        "id": 283067297,
        "sender_full_name": "Joseph O",
        "timestamp": 1653052482
    },
    {
        "content": "<p>As when it is uncommented (the <code>add</code> function), it breaks <code>test3</code></p>",
        "id": 283067330,
        "sender_full_name": "Joseph O",
        "timestamp": 1653052501
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please</p>",
        "id": 283067369,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653052525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20Macro.3F/near/283067369\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> please</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(\"</span> <span class=\"s2\">\"define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">binder</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test3</span> <span class=\"c1\">-- [1, 2, 3, 4]</span>\n\n<span class=\"c1\">-- try commenting and uncommenting this line, and see what happens to the eval</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">add</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 283070062,
        "sender_full_name": "Joseph O",
        "timestamp": 1653053698
    },
    {
        "content": "<p>There's a conflict with the declaration of <code>binder</code></p>",
        "id": 283070599,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653053903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20Macro.3F/near/283070599\">said</a>:</p>\n<blockquote>\n<p>There's a conflict with the declaration of <code>binder</code></p>\n</blockquote>\n<p>Oh I see</p>",
        "id": 283070638,
        "sender_full_name": "Joseph O",
        "timestamp": 1653053917
    },
    {
        "content": "<p>I renamed them and I still get the same error</p>",
        "id": 283070953,
        "sender_full_name": "Joseph O",
        "timestamp": 1653054040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> <a href=\"#narrow/stream/270676-lean4/topic/Definition.20Macro.3F/near/283066800\">said</a>:</p>\n<blockquote>\n<p>Hm can someone explain this weird behavior?<br>\n<a href=\"/user_uploads/3121/gsoDTwnvvwOyVsyUUq_bRhc0/image.png\">image.png</a> <br>\n<a href=\"/user_uploads/3121/sscpr5FgCNQwdVtinZ3vBsTu/image.png\">image.png</a></p>\n</blockquote>\n<p>I got similar errors.  I think Lean is interpreting <code>(define ...)</code> as a term to which test3 is applied.  See if the error goes away if you put <code>section end</code> between the <code>#eval</code> and <code>(define ...)</code>.<br>\nAs for how to make <code>(define ...)</code> recognised as a separate command, I don't know.</p>",
        "id": 283071945,
        "sender_full_name": "Raghuram",
        "timestamp": 1653054421
    },
    {
        "content": "<p>Wait; are you not getting any errors on the <code>(define ...)</code> line when it's uncommented?  That's different from what I got.</p>",
        "id": 283072207,
        "sender_full_name": "Raghuram",
        "timestamp": 1653054523
    },
    {
        "content": "<p>Apparently the parens from <code>(define ⋯</code> is causing the confusion. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"let \"</span> <span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">binder'</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"⦃\"</span> <span class=\"s2\">\"define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">binder'</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"⦄\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⦃</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">⦄)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(⦃</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">⦄)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(⦃</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">⦄)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test3</span> <span class=\"c1\">-- [1, 2, 3, 4] works</span>\n\n<span class=\"o\">⦃</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">add</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">⦄</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 283072610,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653054706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span><br>\nHm do you find that weird?</p>",
        "id": 283089044,
        "sender_full_name": "Joseph O",
        "timestamp": 1653061804
    },
    {
        "content": "<p>A little bit. I <em>think</em> it's because of the syntax of <code>#eval</code>. I tried to find it in the Lean 4 repo but I couldn't. Maybe it doesn't use <code>withPosition</code> and <code>colGt</code> and thus it's still trying to consume whatever comes in the next line if it starts with <code>(</code></p>",
        "id": 283090230,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653062313
    },
    {
        "content": "<p>Oh i see</p>",
        "id": 283090292,
        "sender_full_name": "Joseph O",
        "timestamp": 1653062340
    },
    {
        "content": "<p>That makes sense with some previous things that happened before</p>",
        "id": 283090329,
        "sender_full_name": "Joseph O",
        "timestamp": 1653062354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"467926\">Joseph O</span> has marked this topic as resolved.</p>",
        "id": 283090338,
        "sender_full_name": "Notification Bot",
        "timestamp": 1653062358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Definition.20Macro.3F/near/283090230\">said</a>:</p>\n<blockquote>\n<p>A little bit. I <em>think</em> it's because of the syntax of <code>#eval</code>. I tried to find it in the Lean 4 repo but I couldn't. Maybe it doesn't use <code>withPosition</code> and <code>colGt</code> and thus it's still trying to consume whatever comes in the next line if it starts with <code>(</code></p>\n</blockquote>\n<p>Neither do <code>def</code> etc. It is expected that commands start with a token not in <code>term</code>. <code>\"(define\"</code> would work as well.</p>",
        "id": 283101737,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653067666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Definition.20Macro.3F/near/283101737\">said</a>:</p>\n<blockquote>\n<p><code>\"(define\"</code> would work as well.</p>\n</blockquote>\n<p>What do you mean by this? I couldn't make it work with <code>\"(define\"</code></p>",
        "id": 283103269,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653068458
    },
    {
        "content": "<p>Works for me</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">binder</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"s2\">\" := \"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"bp\">;</span> <span class=\"k\">let</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"k\">in</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">binder'</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">ident</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"(define\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">binder'</span><span class=\"bp\">+</span> <span class=\"s2\">\")\"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">])</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">$</span><span class=\"n\">ty</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">→</span> <span class=\"bp\">$</span><span class=\"n\">ty'</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">]</span> <span class=\"bp\">$</span><span class=\"n\">bs</span><span class=\"o\">:</span><span class=\"n\">binder'</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"bp\">$</span><span class=\"n\">nm</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test3</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">],</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">test3</span> <span class=\"c1\">-- [1, 2, 3, 4]</span>\n\n<span class=\"c1\">-- try commenting and uncommenting this line, and see what happens to the eval</span>\n<span class=\"o\">(</span><span class=\"n\">define</span> <span class=\"o\">([</span><span class=\"n\">add</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"n\">Nat</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">y</span> <span class=\"n\">Nat</span><span class=\"o\">])</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 283103847,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1653068740
    },
    {
        "content": "<p>Oh, you replaced <code>\"(\" \"define\"</code> by <code>\"(define\"</code>. I wasn't understanding what you meant</p>",
        "id": 283107900,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1653070651
    }
]