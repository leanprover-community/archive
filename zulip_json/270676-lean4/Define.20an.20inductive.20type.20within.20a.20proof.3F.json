[
    {
        "content": "<p>Is it possible to define an inductive type on the fly within a <code>def</code>/<code>theorem</code>?</p>\n<p>For example, here is a working snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Suppose I wanted to do the same thing but with a custom <code>Option</code>-like type which I define on the fly, like this (which doesn't compile):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">|</span> <span class=\"n\">myNone</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">mySome</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is there a syntax for this?</p>",
        "id": 339614376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677965802
    },
    {
        "content": "<p>This seems sort of awkward, e.g., what would the name of the recursor for this new type be (imagine that there are several of these, in different branches)</p>",
        "id": 339614823,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677966237
    },
    {
        "content": "<p>OK, so no :-)  Thanks!</p>",
        "id": 339614903,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677966274
    },
    {
        "content": "<p>In this case you could also use an inductive family, but maybe you have good reasons to prefer a recursive definition.</p>",
        "id": 339614945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677966324
    },
    {
        "content": "<p>I'm not sure what you mean by an inductive family (here) -- can you explain?</p>",
        "id": 339615037,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677966391
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">myNone</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mySucc</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339615142,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677966488
    },
    {
        "content": "<p>Ah!  In fact I was asking this question to think about variants on <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin2#doc\">docs4#Fin2</a>, and it seems that you have just explained how one would invent that definition.</p>",
        "id": 339615206,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1677966569
    },
    {
        "content": "<p>Another natural variant is the inductive def of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/vector\">docs#vector</a> which is very similar to this version of fin, as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Vector</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Vector</span> <span class=\"n\">_</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">Vector</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339636623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677985177
    },
    {
        "content": "<p>If I understand correctly, we avoid such defs because they're not as (computationally) efficient as the def in terms of subtypes? Is that right?</p>",
        "id": 339636965,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677985473
    },
    {
        "content": "<p>Well to be fair, Peano numerals and (to a lesser extent) linked lists are not that computationally efficient in the first place.</p>",
        "id": 339647069,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677994879
    },
    {
        "content": "<p>Another downside of these inductive families is that the representation of the \"data\" (like a natural number) is so tightly coupled to the \"property\" (like being less than <code>n</code>). For example if you want to do <code>fin.cast_succ</code> on <code>Foo</code>, you need to do recursion (and it takes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> time, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is the number).</p>",
        "id": 339647519,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677995309
    },
    {
        "content": "<p>In some contexts that tight coupling could be a good thing, but mostly it seems like a bad thing.</p>",
        "id": 339647533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677995334
    }
]