[
    {
        "content": "<p>Hi, when typing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"kd\">by</span> <span class=\"n\">native_decide</span>\n</code></pre></div>\n<p>Lean doesn't complain, and displays everything as if the term constructed by <code>native_decide</code>gave a correct proof. Trying this in a definition thankfully gives an error, I assume this is an unexpected behaviour ? If so, should I fill-in an issue ?</p>",
        "id": 324440358,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1675001365
    },
    {
        "content": "<p>yes, this is not intended behavior. It should have checked that <code>1 = 2</code> is false when adding the auxiliary declaration, so the error must have been suppressed somehow</p>",
        "id": 324441646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675001914
    },
    {
        "content": "<p>It appears that the issue is a distributed responsibility between <code>native_decide</code> and <code>#check</code>. <code>native_decide</code> constructs a term which would be ill-typed if the goal is false, and does not check because the check could be expensive and the kernel will check it anyway. Meanwhile <code>#check</code> does not pass the term to the kernel, it assumes the elaborator has already typechecked the input and just shows the type of the result.</p>",
        "id": 324442488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675002284
    },
    {
        "content": "<p><code>example</code> on the other hand does pass the result to the kernel, even though it rolls back the environment afterward</p>",
        "id": 324442801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675002388
    },
    {
        "content": "<p>Would there be any drawbacks from having <code>#check</code> pass the term to the kernel, apart from possible performance expense ?</p>",
        "id": 324442979,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1675002463
    },
    {
        "content": "<p>that does seem like the best option to me as well</p>",
        "id": 324443150,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675002533
    },
    {
        "content": "<p>Should I fill-in an issue on the lean4 repo ?</p>",
        "id": 324443214,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1675002559
    }
]