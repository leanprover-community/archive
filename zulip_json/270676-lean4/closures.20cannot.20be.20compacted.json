[
    {
        "content": "<p>I encountered internal panic with the error <code>INTERNAL PANIC: closures cannot be compacted</code>. Is the problem that I have <code>PersistentEnvExtension</code> that stores functions? </p>\n<p>I want to write a tactic that is user extensible by providing custom meta code. In particular, I have a special pass in the simplifier that checks if the head of an expression is a registered function, e.g. <code>foo</code>, and then calls user provided function <code>simpFoo : (expr : Expr) -&gt; SimpM (Option Step)</code>. I store <code>simpFoo</code> inside of <code>PersistentEnvExtension</code>. If it is the problem, how can I circumvent this?</p>",
        "id": 376423631,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1689700810
    },
    {
        "content": "<p>Yes, the serialisation to oleans does not support closures. You'll have to find a non-functional representation of the <code>simpFoo</code> functions.</p>",
        "id": 376425146,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689701201
    },
    {
        "content": "<p>Maybe you could look at how <code>norm_num</code> accomplishes this? It sounds like you're essentially implementing the same basic framework, since <code>norm_num</code> uses <code>simp</code> pre/post hooks. It might be more complicated since it uses discrimination trees to speed up matching. Here's its environment extension: <a href=\"https://github.com/leanprover-community/mathlib4/blob/e507f376cf8def4d84e636c00c3454f2262fcf71/Mathlib/Tactic/NormNum/Core.lean#L543\">https://github.com/leanprover-community/mathlib4/blob/e507f376cf8def4d84e636c00c3454f2262fcf71/Mathlib/Tactic/NormNum/Core.lean#L543</a></p>\n<p><code>NormNumExt</code> is the type of norm num extensions themselves (like your <code>simpFoo</code>)</p>",
        "id": 376425208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689701217
    },
    {
        "content": "<p>The usual solution is to store the <code>Name</code> of the constant which contains the <code>simpFoo</code> field in the env extension, and then evaluate it at runtime into a value of type <code>Expr -&gt; SimpM (Option Step)</code> by accessing the environment.</p>",
        "id": 376425908,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689701369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/closures.20cannot.20be.20compacted/near/376425908\">said</a>:</p>\n<blockquote>\n<p>The usual solution is to store the <code>Name</code> of the constant which contains the <code>simpFoo</code> field in the env extension, and then evaluate it at runtime into a value of type <code>Expr -&gt; SimpM (Option Step)</code> by accessing the environment.</p>\n</blockquote>\n<p>How do you do that?</p>",
        "id": 376426289,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1689701453
    },
    {
        "content": "<p>In the <code>norm_num</code> code, the <code>Entry</code> type is what's persisted (it's a discrimination tree key, plus the <code>Name</code> of the constant)</p>",
        "id": 376426513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689701506
    },
    {
        "content": "<p>Then <a href=\"https://github.com/leanprover-community/mathlib4/blob/e507f376cf8def4d84e636c00c3454f2262fcf71/Mathlib/Tactic/NormNum/Core.lean#L527\">this function</a> is used later to turn this constant back into a <code>NormNumExt</code>. See <a href=\"https://github.com/leanprover-community/mathlib4/blob/e507f376cf8def4d84e636c00c3454f2262fcf71/Mathlib/Tactic/NormNum/Core.lean#L551C5-L552C26\">these lines</a></p>",
        "id": 376426634,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689701528
    },
    {
        "content": "<p>The core function is <code>Environment.evalConstCheck</code> which takes the <code>Name</code> of a constant <code>c : T</code> in the environment, evaluates it, and gives you back a value of type <code>T</code>.</p>",
        "id": 376427647,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689701757
    },
    {
        "content": "<p>Great, thanks a lot! It is much clearer now and I see the purpose of <code>α</code> and <code>β</code> in the environment extensions. </p>\n<p>What is the difference between <code>ScopedEnvExtension</code> and <code>PersistentEnvExtension</code>? Which one should I use? What extra functionality does <code>PersistentEnvExtension</code> provide?</p>",
        "id": 376428254,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1689701885
    },
    {
        "content": "<p>Afaict, a <code>ScopedEnvExtension</code> <em>is</em> a <code>PersistentEnvExtension</code> which also handles namespaces, e.g. if you wanted to get the same behaviour as <code>scoped syntax ..</code>, you would need a <code>ScopedEnvExtension</code>. But if your custom data is not fine-grained enough to require scoping, maybe just <code>Persistent</code> is fine.</p>",
        "id": 376428902,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689702062
    },
    {
        "content": "<p>You could grep the Lean sources for <code>registerSimpleScopedEnvExtension</code>.</p>",
        "id": 376429212,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1689702144
    },
    {
        "content": "<p><code>ScopedEnvExtension</code>s can have <code>local</code> and <code>scoped</code> declarations, meaning that local entries go out of scope at the end of sections and scoped entries can re-enter the scope using <code>open</code></p>",
        "id": 376434010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689703246
    },
    {
        "content": "<p><code>PersistentEnvExtension</code> are just permanent additions to the env with no provision for erasure</p>",
        "id": 376434166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689703282
    },
    {
        "content": "<p>Thanks, makes sense</p>",
        "id": 376434286,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1689703314
    },
    {
        "content": "<p>Again thanks everyone for the help. It works as expected now!</p>",
        "id": 376480039,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1689716882
    }
]