[
    {
        "content": "<p>This rfl: <br>\n<a href=\"https://git.sr.ht/~mangoiv/leff/tree/4945e83c0d40965f3c756e8271c6cdaaffd448aa/item/src/Leff/Control/Algebra.lean#L45\">https://git.sr.ht/~mangoiv/leff/tree/4945e83c0d40965f3c756e8271c6cdaaffd448aa/item/src/Leff/Control/Algebra.lean#L45</a></p>\n<p>has the following goal: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span>\n  <span class=\"n\">Handler.handler</span> <span class=\"n\">handler₁</span> <span class=\"o\">(</span><span class=\"n\">σ₂</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Handler.handler</span> <span class=\"n\">handler₂</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">Handler.handler</span> <span class=\"n\">handler₁</span> <span class=\"o\">(</span><span class=\"n\">σ₂</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Handler.handler</span> <span class=\"n\">handler₂</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">Functor.map</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>for me those somehow don't look the same, why can rfl see those are the same? Or is this a display issue?</p>",
        "id": 386265615,
        "sender_full_name": "MangoIV",
        "timestamp": 1692571841
    },
    {
        "content": "<p>If we simplify the core of the equality, we see that we have:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>def core [Functor σ₁] [Functor σ₂] [LawfulFunctor σ₁]\n  [LawfulFunctor σ₂][Monad l] [LawfulMonad l]\n  (p : Functor.Comp σ₁ σ₂ α) :\n    (pure (f := l) &lt;$&gt; p) = Functor.map (pure (f := l)) &lt;$&gt; p :=  rfl\n</code></pre></div>\n<p>The left-hand-side is fmapping <code>pure</code> to create <code>Functor.Comp σ₁ σ₂ (l α)</code> by lifting the <code>pure</code> over the _entire_ functor <code>Functor.Comp σ₁ σ₂ </code>. </p>\n<p>the right-hand-side is using a \"map of map\" (see that there are two maps, one from <code>Functor.map</code>, and another from <code>&lt;$&gt;</code>, to lift <code>pure</code> through the _two layers_ of functors, one from <code>σ₂</code> and one from <code>σ₁</code>. This is possible, because the type <code>(Functor.Comp σ₁ σ₂) α</code> is defeq to <code>σ₁ (σ₂ (α))</code>.</p>",
        "id": 386267966,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692574285
    },
    {
        "content": "<p>yeah so it's kinda luck that i saw the type to be Comp sigma_1 sigma_2 instead of something else cause then I'd sit on it still :D Thank you for investigating!</p>",
        "id": 386268312,
        "sender_full_name": "MangoIV",
        "timestamp": 1692574612
    },
    {
        "content": "<p>Slightly cleaned up version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The Functor.comp applied to the argument</span>\n<span class=\"sd\">  is definitionally equal to the functors applied to the argument -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">comp_eq</span> <span class=\"o\">:</span> <span class=\"n\">Functor.Comp</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">Manually applied version of the LHS and RHS.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">core</span> <span class=\"o\">[</span><span class=\"n\">S1</span><span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">σ₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">S2</span><span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">σ₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ML</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Functor.Comp</span> <span class=\"n\">σ₁</span> <span class=\"n\">σ₂</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">Functor.Comp.map</span> <span class=\"n\">ML.pure</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">S1.map</span> <span class=\"o\">(</span><span class=\"n\">S2.map</span> <span class=\"n\">ML.pure</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>  <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 386268643,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692574942
    }
]