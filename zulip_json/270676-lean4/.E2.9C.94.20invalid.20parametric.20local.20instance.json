[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hogmanTheIntruder</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">Bar</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">birdmanThePerfumer</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span><span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Bar</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span>\n</code></pre></div>\n<p>Both throw </p>\n<blockquote>\n<p>invalid parametric local instance, parameter with type<br>\n  Foo α<br>\ndoes not have forward dependencies, type class resolution cannot use this kind of local instance because it will not be able to infer a value for this parameter.</p>\n</blockquote>\n<p>The second is not asking for type class synthesis. <del>Is this expected behavior?</del> It looks like my understanding was not complete. Changing the question: what is the correct way to write this?</p>",
        "id": 340877304,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678458641
    },
    {
        "content": "<p>This is strictly outside of the logic supported by TC synthesis.  What will happen is that if you write <code>hogmanTheIntruder</code>, then Lean will search for <code>Bar A</code> and completely forget about the <code>Foo A</code> constraint.  It would only find a blanket <code>Bar A</code> instance.  I would write go with <code>class EveryFooIsABar where yesItIs [Foo A] : Bar A</code>.</p>",
        "id": 340930408,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678471416
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>. That was my guess.</p>",
        "id": 340931204,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1678471629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306577\">Matthew Ballard</span> has marked this topic as resolved.</p>",
        "id": 340931505,
        "sender_full_name": "Notification Bot",
        "timestamp": 1678471713
    }
]