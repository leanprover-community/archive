[
    {
        "content": "<p>Consider the following example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo%\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">t</span>\n  <span class=\"n\">unless</span> <span class=\"n\">tp.isType</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"ERROR\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This results in <code>ERROR</code>, I think because the match in <code>isType</code> asks for <code>.sort (.succ _)</code>, but in this case it has the form <code>.sort (.max (.succ _) (.succ _))</code>. Is there a more robust way to check whether something is a type that allows for <code>max</code> in the level parameters?</p>",
        "id": 403389765,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700576221
    },
    {
        "content": "<p>I'm sure I've had to deal with this somewhere I just can't remember the short solution.<br>\nYou can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Level.isNeverZero#doc\">docs#Lean.Level.isNeverZero</a> I think, but maybe there is a function somewhere doing exactly what you want.</p>",
        "id": 403392412,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700576965
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo%\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">tp'</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">tp</span>\n  <span class=\"n\">unless</span> <span class=\"n\">tp'.isType</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"ERROR\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">t</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403392580,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1700577005
    },
    {
        "content": "<p>Aha, great, yeah I thought it may have something to do with the level mvars. Thanks!</p>",
        "id": 403392653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700577027
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/3682\">#3682</a> is what I was remembering</p>",
        "id": 403392677,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700577037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> that works for Nat, but I think what Alex points out is still an issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo%\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">let</span> <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">t</span>\n  <span class=\"k\">let</span> <span class=\"n\">tp</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">tp</span>\n  <span class=\"n\">unless</span> <span class=\"n\">tp.isType</span> <span class=\"k\">do</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"ERROR\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">foo</span><span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- ERROR</span>\n</code></pre></div>",
        "id": 403393280,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700577217
    },
    {
        "content": "<p>I think I'll introduce</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- If an `Expr` has the form `Type u`, then return `some u`, otherwise `none`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">type</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Level</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u.dec</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>thoughts?</p>",
        "id": 403406012,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1700580542
    },
    {
        "content": "<p>LGTM yes</p>",
        "id": 403430999,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700587857
    }
]