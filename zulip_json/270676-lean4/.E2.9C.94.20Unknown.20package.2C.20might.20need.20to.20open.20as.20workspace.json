[
    {
        "content": "<p>Newbie question: I'm trying to import one of my Lean files from another one. I'm using Visual Studio Code, and I have <code>/home/tanner/prog/lean-playground</code> open using the \"open folder\" menu option. The file I'm in is <code>/home/tanner/prog/lean-playground/Meta/VarietyInfo.lean</code>, and the file I want to import is <code>Fail.lean</code> in that same <code>Meta</code> directory. I'm getting the following error message:</p>\n<blockquote>\n<p>unknown package 'Meta'  <br>\nYou might need to open '/home/tanner/prog/lean-playground' as a workspace in your editor</p>\n</blockquote>\n<p>I already have that exact directory open using \"open folder\"; am I supposed to do something different?</p>",
        "id": 370614526,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688005982
    },
    {
        "content": "<p>The command I'm using to try to import it is <code>import Meta.Fail</code>.</p>",
        "id": 370614543,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688006002
    },
    {
        "content": "<p>do you have a lake project set up?</p>",
        "id": 370614750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688006164
    },
    {
        "content": "<p>No, and I haven't managed to figure out how to get lake installed. What I'm seeing seems to say that installing Lean should install lake too, but typing <code>lake</code> into a terminal window (even a newly launched one) gives me <code>Command 'lake' not found</code>. I do have elan, though.</p>\n<p>I'm on Ubuntu 22.04.</p>",
        "id": 370615271,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688006525
    },
    {
        "content": "<p>I just noticed that the \"Setting Up Lean\" page says, \"On Linux/macOS, you first have to follow the instructions printed by the Lean installation or log out and in again for the Lean executables to be available in you terminal.\" I don't think I've actually logged out and in again since I installed Lean a few days ago, so I'll try that.</p>",
        "id": 370616145,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688006863
    },
    {
        "content": "<p>All right, logging out and in again made lake show up as a command, and then I was able to run <code>lake init warrigalsstuff lib</code> to create a lakefile and all that jazz. However, the command <code>import Meta.Fail</code> still gives me the same error message it was giving me originally.</p>",
        "id": 370617788,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688007620
    },
    {
        "content": "<p>Oh, I figured it out! I can't just have arbitrarily named folders in the project root; I have to have all my source files (except the main file) in a folder whose name is the package name.</p>",
        "id": 370619206,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688008501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627517\">Tanner Swett</span> has marked this topic as resolved.</p>",
        "id": 370621087,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688009628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"627517\">Tanner Swett</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Unknown.20package.2C.20might.20need.20to.20open.20as.20workspace/near/370619206\">said</a>:</p>\n<blockquote>\n<p>Oh, I figured it out! I can't just have arbitrarily named folders in the project root; I have to have all my source files (except the main file) in a folder whose name is the package name.</p>\n</blockquote>\n<p>You can also have multiple folders via either multiple <code>lean_lib</code> statements (i.e, <code>lean_lib Foo</code>, <code>lean_lib Bar</code>) or by giving a single library multiple roots (i.e., <code>lean_lib MyStuff {roots := #[`Foo, `Bar]}</code>).</p>",
        "id": 370997097,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688100954
    },
    {
        "content": "<p>The later is useful when they all share a similar build configuration, the former is useful when they do not.</p>",
        "id": 370997210,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688100981
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 371306069,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688159695
    }
]