[
    {
        "content": "<p>The Lean 4 web editor and the natural number game use quite a bit of memory on our server, and I would like to figure out how to reduce that so that we can handle more users at once. Currently, we are using a docker container with gvisor to isolate each user into a sandbox. As a consequence we cannot make use of Lean's mmap memory sharing. Using other tools such as bubblewrap we should be able to resolve this.</p>\n<p>However, I just tried to run the game without using any security measures, and the processes still do not seem to share memory. Is there a way to see whether memory is shared other than just observing how much memory is used in total? Maybe we accidentally destroyed the memory sharing mechanism by modifying the Lean server for our game? How is this memory sharing implemented in the Lean server?</p>",
        "id": 383304215,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1691591027
    },
    {
        "content": "<p>The memory sharing is not implemented in lean at all. The way it works is that multiple independent processes request to <code>mmap</code> the same file, and the OS notices this and makes them share the same backing memory</p>",
        "id": 383351766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691599149
    },
    {
        "content": "<p>Only the oleans are shared, right? So the Environment will still take a big chunk of space for each process, won't it?</p>",
        "id": 383543851,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1691657828
    },
    {
        "content": "<p>It's a good question how much is actually in an <code>Environment</code> that is not just pointers in data in memory mapped oleans. I don't have a good guess, but would like to know!</p>",
        "id": 383563796,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691661855
    },
    {
        "content": "<p>The original mmap PR has some numbers I referenced in my thesis (ยง3.3):</p>\n<blockquote>\n<p>Indeed, when activating this extension we have seen great savings on mathport , a version of Lean 3 mathlib binary-translated to the Lean 4 module format: the time for importing these, at the time, 1871 modules fell from 2.3 to 1.5 seconds [Lean still gathers information such as a map of all declaration from the imports, so it cannot be 0; Leo later optimized the import time further independently of memory mapping.] , and more importantly the total heap size of all allocations fell from 1.2GB to 55MB.</p>\n</blockquote>",
        "id": 383566091,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691662362
    },
    {
        "content": "<p>It is probably more for current mathlib because of additional initialization of environment extensions</p>",
        "id": 383566204,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691662386
    },
    {
        "content": "<p>A message was moved from this topic to <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Term.20to.20tactic.20error\">#lean4 &gt; Term to tactic error</a> by <span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span>.</p>",
        "id": 383571518,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691663339
    },
    {
        "content": "<blockquote>\n<p>and more importantly the total heap size of all allocations fell from 1.2GB to 55MB.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> What's a good way to measure things like this? I am still not sure if the mmap works and it's other things that eat up space or if mmap is broken on our server for some reason.</p>",
        "id": 383678624,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1691682949
    },
    {
        "content": "<p>I think I used valgrind's massif</p>",
        "id": 383679994,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691683204
    },
    {
        "content": "<p>But I'm always disappointed that <code>time -v</code> doesn't do a better job there</p>",
        "id": 383680137,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691683226
    },
    {
        "content": "<p>I think it was <code>/proc/$PID/status</code> that does do a better job - RssFile vs RssAnon</p>",
        "id": 383683776,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691683932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129120\">@Alexander Bentkamp</span> I remembered it's actually much easier: use <code>lean --stats</code></p>",
        "id": 383931859,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691755170
    },
    {
        "content": "<p>Oh, that looks much easier indeed. Still, I can only see that the oleans have been loaded into some mmap'ed part of memory, but I can't be sure that they are actually shared between processes, can I?</p>",
        "id": 383932364,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1691755265
    },
    {
        "content": "<p>I don't see why that would not happen as long as it's indeed the same file</p>",
        "id": 383932780,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691755342
    },
    {
        "content": "<p>Okay, thanks!</p>",
        "id": 383939890,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1691756743
    }
]