[
    {
        "content": "<p>I'm writing polymorphic code where I want to fix a value for a whole file, but keep it as a parameter that I can later instantiate. It seems that neither <code>variable</code> nor <code>opaque</code> are what I'm looking for, but somewhere in-between. This sounds like it could be a common use case, so maybe there's already a solution?</p>\n<p>To be more concrete, say I was writing something like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SomeOption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">variant₁</span> <span class=\"o\">:</span> <span class=\"n\">SomeOption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">variant₂</span> <span class=\"o\">:</span> <span class=\"n\">SomeOption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">variant₃</span> <span class=\"o\">:</span> <span class=\"n\">SomeOption</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SomeConfiguration</span> <span class=\"n\">where</span>\n  <span class=\"n\">options</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SomeOption</span>\n  <span class=\"n\">otherstuff</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">someFunction</span> <span class=\"o\">:</span> <span class=\"n\">SomeOption</span> <span class=\"bp\">→</span> <span class=\"n\">SomeConfiguration</span> <span class=\"bp\">→</span> <span class=\"n\">SomeConfiguration</span>\n  <span class=\"bp\">|</span> <span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">conf</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">conf</span> <span class=\"k\">with</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">op</span><span class=\"o\">::</span><span class=\"n\">conf.options</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>If I want to be able to change the options/variants I have, I probably want to make  the <code>SomeOption</code> type a parameter of everything else. But then I need to put it everywhere explicitly to make sure I'm using the same type, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">SomeOption</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SomeConfiguration</span> <span class=\"n\">where</span>\n  <span class=\"n\">options</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SomeOption</span>\n  <span class=\"n\">otherstuff</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">someFunction</span> <span class=\"o\">:</span> <span class=\"n\">SomeOption</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">SomeConfiguration</span> <span class=\"n\">SomeOption</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">SomeConfiguration</span> <span class=\"n\">SomeOption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">conf</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">conf</span> <span class=\"k\">with</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">op</span><span class=\"o\">::</span><span class=\"n\">conf.options</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>AFAIU the <code>opaque</code> keyword would allow me to fix this type here, but then I cannot later define my <code>inductive SomeOption</code> from above and recover the original version, while letting me use a different type somewhere else, right? Or would I be able to do this with<code>@[implementedBy SomeOption]</code> (and e.g. have multiple \"implementations\" at different parts)?</p>",
        "id": 291688198,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659434415
    },
    {
        "content": "<p>(I'm aware the solution of putting it explicitly everywhere works, it just makes the code much less readable in my opinion, I guess my question is premised on that opinion)</p>",
        "id": 291688445,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659434539
    },
    {
        "content": "<p>Maybe a type class?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">SomeOption</span> <span class=\"n\">where</span>\n<span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">SomeOption</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">SomeConfiguration</span> <span class=\"n\">where</span>\n  <span class=\"n\">options</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">SomeOption.type</span>\n  <span class=\"n\">otherstuff</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">someFunction</span> <span class=\"o\">:</span> <span class=\"n\">SomeOption.type</span> <span class=\"bp\">→</span> <span class=\"n\">SomeConfiguration</span> <span class=\"bp\">→</span> <span class=\"n\">SomeConfiguration</span>\n  <span class=\"bp\">|</span> <span class=\"n\">op</span><span class=\"o\">,</span> <span class=\"n\">conf</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">conf</span> <span class=\"k\">with</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">op</span><span class=\"o\">::</span><span class=\"n\">conf.options</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 291690636,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1659436167
    },
    {
        "content": "<p>Yep, see also <a href=\"#narrow/stream/270676-lean4/topic/parameter/near/271747258\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/parameter/near/271747258</a></p>",
        "id": 291691021,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1659436445
    },
    {
        "content": "<p>oh, that's pretty cool! thanks!</p>",
        "id": 291691670,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1659436972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> has marked this topic as resolved.</p>",
        "id": 291691677,
        "sender_full_name": "Notification Bot",
        "timestamp": 1659436978
    }
]