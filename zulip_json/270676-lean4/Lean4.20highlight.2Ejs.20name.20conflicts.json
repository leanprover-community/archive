[
    {
        "content": "<p>As I finish up _Functional Programming in Lean_, I'm encountering more and more situations where tactic names collide with other names. For instance, the <code>intro</code> tactic collides with the name of <code>And.intro</code> and <code>True.intro</code>,.</p>\n<p>I'd very much like the rendered version of the book to have accurate highlighting. This implies that <code>And.intro</code> should be highlighted like any other constructor of a <code>structure</code>, and that the <code>intro</code> tactic should be highlighted just like the <code>case</code> or <code>induction</code> or <code>split</code> tactics.  I think that it's not feasible to extract accurate highlighting from Lean itself with the time and resources that are available, unfortunately, so I think I'm looking for the best kludge.</p>\n<p>One thing that seems doable is to have two highlight.js languages configured, one with keywords defined for the tactics used in the book, and one without. Then I can make sure that every tactic proof uses the leanTac language, and that ordinary programs use leanProg. This seems tedious and error-prone, but I can make it work. Does anyone else have another way to achieve accurate highlighting of a restricted set of examples?</p>",
        "id": 350596563,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681758432
    },
    {
        "content": "<p>It ought to be possible to hightlight <code>intro</code> and <code>.intro</code> separately</p>",
        "id": 350600160,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681759825
    },
    {
        "content": "<p>Where does the lean4 highlight.js code live?</p>",
        "id": 350600189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681759844
    },
    {
        "content": "<p>Unfortunately <code>intro</code> occurs bare in the definition of <code>And</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">And</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">intro</span> <span class=\"o\">::</span>\n  <span class=\"n\">left</span> <span class=\"o\">:</span> <span class=\"n\">a</span>\n  <span class=\"n\">right</span> <span class=\"o\">:</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I'll be opening up the repo for FP Lean very soon - it has a highlight.js based on a version that intended to highlight both Lean 3 and 4, and required lots of manual tweaking to achieve accuracy on the book's examples.</p>",
        "id": 350603541,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681761101
    },
    {
        "content": "<p>In other words, I don't know a good way in a regexp-based highlighter to make this <code>intro</code> look one way, and the <code>intro</code> tactic look another way. At least not one that isn't quite brittle and tricky.</p>",
        "id": 350603750,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681761179
    },
    {
        "content": "<p>(I do suspect that there's some kind of way to make things under <code>by </code> highlight differently than other things, but now it's starting to remind of hacking <code>font-lock</code> configs, and I unfortunately don't have the time for that)</p>",
        "id": 350604140,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681761326
    },
    {
        "content": "<p>I'd claim that trying to highlight both versions of lean with a single highlighter is a mistake</p>",
        "id": 350604316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681761393
    },
    {
        "content": "<p>Don't worry - the code no longer tries to do that. Nonetheless, trying to highlight Lean with regular expressions is also a mistake, but that's a mistake that I have no alternatives to at this stage in the project :-)</p>",
        "id": 350605472,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681761828
    }
]