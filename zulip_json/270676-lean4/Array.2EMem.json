[
    {
        "content": "<p>I saw a curious use of a structure on the <a href=\"https://github.com/leanprover/lean4/blob/dcb40f67c1ef635caf87423d5a4b1c4786f9d9ac/src/Init/Data/Array/Mem.lean#L23-L30\">Array Membership instance</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `a ∈ as` is a predicate which asserts that `a` is in the array `a s`. -/</span>\n<span class=\"c1\">-- NB: This is defined as a structure rather than a plain def so that a lemma</span>\n<span class=\"c1\">-- like `sizeOf_lt_of_mem` will not apply with no actual arrays around.</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as.data</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sizeOf_lt_of_mem</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Is this use of a structure still needed?  I noticed other Membership  instances don't always use a structure.</p>",
        "id": 401210327,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699553417
    },
    {
        "content": "<p>This was a recent change</p>",
        "id": 401210392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553451
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2774\">lean4#2774</a></p>",
        "id": 401210490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553503
    },
    {
        "content": "<p>Thanks.  I should have checked <code>git blame</code> before asking.</p>",
        "id": 401210604,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699553547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> has marked this topic as resolved.</p>",
        "id": 401210653,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699553569
    },
    {
        "content": "<p>I'm still not sure whether a structure is the right solution here, we don't normally use structures for this</p>",
        "id": 401210702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553590
    },
    {
        "content": "<p>e.g. <code>instance : LT (Fin n)</code> is just a <code>def</code></p>",
        "id": 401210733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110994\">Joe Hendrix</span> has marked this topic as unresolved.</p>",
        "id": 401210768,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699553622
    },
    {
        "content": "<p>I just stumbled across this class while working through potential definitions for a <code>Vector</code> class, so it's not blocking me, but it'd be good to understand the issue a bit better so I do the right thing for <code>Vector</code>.</p>",
        "id": 401210974,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699553710
    },
    {
        "content": "<p>The rationale given is:</p>\n<blockquote>\n<p>The definition for <code>a ∈ as</code> is intentionally not defeq to <code>a ∈ as.data</code> so that the termination tactics for Arrays don’t spuriously apply when recursing through lists.</p>\n</blockquote>\n<p>but I don't see why this is a problem, and/or why fixing the relevant tactics doesn't work</p>",
        "id": 401211028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span></p>",
        "id": 401211043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553743
    },
    {
        "content": "<p>There's a comment in <a href=\"https://github.com/leanprover/lean4/pull/2774\">lean4#2774</a> with a bit more detail, but I think it'd be great to have some clarity.</p>",
        "id": 401211211,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699553805
    },
    {
        "content": "<p>Maybe fixing the tactic would work; I didn’t dare to touch the <code>List</code> stuff when I was dabbling with <code>Array</code>. If someone has a better plan, please by all means implement it.</p>",
        "id": 401211226,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699553814
    },
    {
        "content": "<p>The problem was that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"array_mem_dec\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Array.sizeOf_lt_of_mem</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Array.sizeOf_lt_of_mem</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"n\">case'</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assumption</span>\n      <span class=\"n\">simp_arith</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>should look for <code>a  ∈ as</code> in the context. If that’s defeq to <code>a ∈ as.data</code>, it would match <code>x ∈ xs</code> (here <code>xs</code> being a normal list, no arrays around)</p>",
        "id": 401211482,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699553905
    },
    {
        "content": "<p>More specifically, is there a test case that fails without this?</p>",
        "id": 401211500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553913
    },
    {
        "content": "<p>Yes, otherwise I wouldn't even have noticed :-)</p>",
        "id": 401211529,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699553924
    },
    {
        "content": "<p>was it checked in?</p>",
        "id": 401211579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699553945
    },
    {
        "content": "<p>It was already there</p>",
        "id": 401211590,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699553950
    },
    {
        "content": "<p><code>tests/lean/run/wfForIn.lean</code> for example, based on my comments at the PR</p>",
        "id": 401211657,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699553989
    },
    {
        "content": "<p>Maybe I did something wrong, of course. OR maybe a <code>def</code> with some annotation that prevents reduction would be more idiomatic.</p>",
        "id": 401211759,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699554019
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Array'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Array'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">as.data.length</span>\n<span class=\"kd\">def</span> <span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">as.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">as.data.get</span> <span class=\"n\">i</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as.data</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">:=</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">as</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sizeOf_lt_of_mem</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">sizeOf_get</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">as.size</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"o\">(</span><span class=\"n\">as.get</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">as</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"array'_mem_dec\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Array'.sizeOf_lt_of_mem</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Array'.sizeOf_lt_of_mem</span> <span class=\"bp\">?</span><span class=\"n\">h</span><span class=\"o\">)</span>\n      <span class=\"n\">case'</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">assumption</span>\n      <span class=\"n\">simp_arith</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">decreasing_trivial</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">array'_mem_dec</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Term</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">printFns</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.app</span> <span class=\"n\">f</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">f</span>\n    <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">args</span> <span class=\"k\">do</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">sizeOf</span> <span class=\"n\">arg</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">sizeOf</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">List.sizeOf_lt_of_mem</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_arith</span><span class=\"o\">)</span>\n      <span class=\"n\">printFns</span> <span class=\"n\">arg</span>\n</code></pre></div>",
        "id": 401212574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699554342
    },
    {
        "content": "<p>Thanks for MWE’ing.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">irreducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array'</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">as.data</span>\n</code></pre></div>\n<p>seems to help. Is that preferable?</p>",
        "id": 401213092,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699554536
    },
    {
        "content": "<p>Alternatively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"array'_mem_dec\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">first</span>\n    <span class=\"bp\">|</span> <span class=\"n\">apply</span> <span class=\"n\">Array'.sizeOf_lt_of_mem</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"bp\">;</span> <span class=\"n\">done</span>\n    <span class=\"bp\">|</span> <span class=\"n\">with_reducible</span> <span class=\"n\">apply</span> <span class=\"n\">Nat.lt_trans</span> <span class=\"o\">(</span><span class=\"n\">Array'.sizeOf_lt_of_mem</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›)</span>\n      <span class=\"n\">simp_arith</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401213129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699554548
    },
    {
        "content": "<p>Should that be <code>with_reducible assumption</code>?</p>",
        "id": 401213950,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699554824
    },
    {
        "content": "<p>you could also put <code>with_reducible first ...</code></p>",
        "id": 401214226,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699554920
    },
    {
        "content": "<p>I figure for the first case it doesn't matter though since if it closed the goal then no problemo</p>",
        "id": 401214289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699554947
    },
    {
        "content": "<p>What sort of example is in mind for the <code>Nat.lt_trans</code> case?</p>",
        "id": 401214330,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699554960
    },
    {
        "content": "<p>the example at the end is pretty similar to what kind of thing would require that case</p>",
        "id": 401214477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699555021
    },
    {
        "content": "<p>you prove <code>sizeOf arg &lt; 1 + sizeOf f + sizeOf args</code> by transitivity on <code>sizeOf arg &lt; sizeOf args</code> and <code>sizeOf args &lt;= 1 + sizeOf f + sizeOf args</code> and solve the latter with <code>simp_arith</code></p>",
        "id": 401214556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699555059
    },
    {
        "content": "<p>Yep that makes sense.</p>",
        "id": 401214599,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699555078
    },
    {
        "content": "<p>I think ideally there would be some sort of chaining where a linear arithmetic procedure queried for additional facts about the terms it treats as uninterpreted variable, but that's out of scope for now.</p>",
        "id": 401214875,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699555187
    },
    {
        "content": "<p>I think what happens when this mistakenly applies in the list case is that you instead get the subgoal <code>sizeOf { data := args } &lt;= 1 + sizeOf f + sizeOf args</code> (where the LHS was able to unify because of eta for structures) and <code>sizeOf { data := args }</code> is larger, I think <code>1 + sizeOf args</code>, which makes it harder to prove</p>",
        "id": 401214961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699555205
    },
    {
        "content": "<p>IMO <code>simp_arith</code> is overkill here, it should be something more tailored to this kind of goal</p>",
        "id": 401215104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699555266
    },
    {
        "content": "<p>I think for now, I'd recommend using <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s tactic.  That's what I'll add for Vector.</p>",
        "id": 401215201,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699555306
    },
    {
        "content": "<p>the lean3 version of this tactic would just try <code>x &lt;= x + y</code> and <code>y &lt;= x + y</code> with backtracking</p>",
        "id": 401215351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699555354
    },
    {
        "content": "<p>but maybe <code>simp_arith</code> is better suited to the case where the user overrides the decreasing metric and now you have more interesting and arbitrary goals</p>",
        "id": 401215503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699555416
    },
    {
        "content": "<p>My (preliminary) impression is that the termination tactics are not quite compositional, and may need an overhaul. For example,  what if I nest multiple data structures; list of list of list. I’d expect the default tactic setup to use all the <code>List.Mem</code> assumptions and still arrive at the result. But unless I am mistaken, the current setup of <code>decreasing_trivial</code> is that is handles a finite set of typical cases, but only if it can solve them completely.</p>\n<p>Or maybe once we have <code>omega</code> the the tactic will first make all the <code>&lt;</code> facts known (by changing <code>List.Mem</code> assumptions to <code>&lt;</code>) and then simply call <code>omega</code>.</p>",
        "id": 401217653,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1699556221
    },
    {
        "content": "<p>Yeah, I think the current approach is too specific.  It'd be great to have a fast omega tactic with a mechanism for pulling <code>&lt;</code> facts out of the environment (using lemmas such as <code>sizeOf_lt_of_mem</code> automatically).</p>",
        "id": 401217936,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699556344
    },
    {
        "content": "<p>At least in the example above, forward chaining would probably provide be a good approach by seeing <code>arg ∈ args</code> in the hypotheses and automatically synthesizing <code>sizeOf arg &lt; sizeOf args</code>.</p>\n<p>Are there existing general forward chaining tactics in Lean?</p>",
        "id": 401219018,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1699556668
    },
    {
        "content": "<p>there is <code>apply at</code> in mathlib, we could use <code>apply thm at *</code> to mean forward chaining</p>",
        "id": 401219895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557028
    },
    {
        "content": "<p>usually <code>have</code> is used for forward chaining but it isn't easy to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">for</span> <span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"n\">context</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">thm</span> <span class=\"bp\">$</span><span class=\"n\">h</span>\n</code></pre></div>",
        "id": 401220203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699557155
    }
]