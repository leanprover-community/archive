[
    {
        "content": "<p>While messing with the olean dump tool I noticed that constructor indexes are only one byte, so I started to wonder what happens if you go past that. Turns out, nothing good... </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"mk_foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"mi\">257</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">Name.mkSimple</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"x{i}\"</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">mk_foo</span>\n\n<span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">blackBox</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span>\n<span class=\"k\">#eval</span> <span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">Foo.x256</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">matches</span> <span class=\"n\">Foo.x0</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n<span class=\"k\">#eval</span> <span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">Foo.x255</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">matches</span> <span class=\"n\">Foo.x0</span> <span class=\"mi\">1</span> <span class=\"c1\">-- unreachable_reached</span>\n</code></pre></div>\n<p>(The limit is a bit less than 256 because the numbers 245 on up are reserved for various kinds of special object in the runtime.)</p>",
        "id": 368760214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687499511
    },
    {
        "content": "<p>Separately, this file is also very slow to build and generates a 5 MB olean, even after disabling <code>genInjectivity</code>.</p>",
        "id": 368761611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687499705
    },
    {
        "content": "<p>I remember some GHC bug report complaining that the compiler was too slow on an inductive type with like 5000 constructors, so 250 seems way too low.</p>",
        "id": 368800836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687508459
    },
    {
        "content": "<p>e.g. GHC itself has an inductive type with a constructor for each of its ~700 primops<br>\n<a href=\"https://hackage.haskell.org/package/ghc-9.6.1/docs/GHC-Builtin-PrimOps.html#t:PrimOp\">https://hackage.haskell.org/package/ghc-9.6.1/docs/GHC-Builtin-PrimOps.html#t:PrimOp</a></p>",
        "id": 368801653,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687508629
    },
    {
        "content": "<p>I remember Coq had a similar bug where 256 constructors produces a proof of False</p>",
        "id": 368900105,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1687527505
    },
    {
        "content": "<p>In case anyone is wondering -- yes the wrong match still happens if <code>genInjectivity</code> is enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"mk_foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"mi\">257</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">Name.mkSimple</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"x{i}\"</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">1000000</span> <span class=\"k\">in</span>\n<span class=\"n\">mk_foo</span>\n\n<span class=\"kd\">@[noinline]</span> <span class=\"kd\">def</span> <span class=\"n\">blackBox</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">id</span>\n<span class=\"k\">#eval</span> <span class=\"n\">blackBox</span> <span class=\"o\">(</span><span class=\"n\">Foo.x256</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">matches</span> <span class=\"n\">Foo.x0</span> <span class=\"mi\">1</span> <span class=\"c1\">-- true</span>\n</code></pre></div>",
        "id": 368902489,
        "sender_full_name": "David Renshaw",
        "timestamp": 1687527913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/256.20constructors.20is.20enough.20for.20anyone/near/368760214\">said</a>:</p>\n<blockquote>\n<p>While messing with the olean dump tool I noticed that constructor indexes are only one byte, so I started to wonder what happens if you go past that. Turns out, nothing good... </p>\n</blockquote>\n<p>Note that this is only true fi the inductive is not \"enum-like\" (i.e., has fields). Enum-like inductives are unboxed and will properly grow in size with their number of alternatives. However, really large inductives are still very slow to compile.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span> <span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"mk_enum\"</span> <span class=\"n\">id</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">size</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"n\">size.getNat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkIdent</span> <span class=\"o\">(</span><span class=\"n\">Name.mkSimple</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"x{i}\"</span><span class=\"o\">))</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">set_option</span> <span class=\"n\">genInjectivity</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"n\">where</span>\n      <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">l</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">mk_enum</span> <span class=\"n\">Foo</span> <span class=\"mi\">256</span>\n<span class=\"n\">mk_enum</span> <span class=\"n\">Bar</span> <span class=\"mi\">255</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkFoo</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">x1</span> <span class=\"c1\">-- mkFoo : u16</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkBar</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">x1</span> <span class=\"c1\">-- mkBar : u8</span>\n</code></pre></div>",
        "id": 368971339,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687540905
    }
]