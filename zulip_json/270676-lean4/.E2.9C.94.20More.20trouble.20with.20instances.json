[
    {
        "content": "<p>It did not take too long for me to run into instance trouble in Lean4... I am still playing around with multiple preorders on the same type so I cannot declare them as instances, and this is causing me trouble with <code>SuccOrder</code>, when the preorder arises via some auxiliary construction. Here is a MWE that will hopefully clarify what I mean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.SuccPred.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">powersetToPreorder</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span>  <span class=\"n\">where</span>\n<span class=\"n\">le</span> <span class=\"o\">:=</span>  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span>\n<span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n<span class=\"n\">le_trans</span> <span class=\"o\">:=</span>  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">hXE</span> <span class=\"n\">hXc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hab</span> <span class=\"n\">hXE</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"n\">hXE</span> <span class=\"n\">hXc</span><span class=\"o\">)</span>\n<span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">triv</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">successeur1</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">SuccOrder</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">hsucc.succ</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- This works fine.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">successeur2</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">SuccOrder</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">powersetToPreorder</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">hsucc.succ</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- Failed to synthesize instance Preorder α, oh no. :-( But I told you what the preorder was when I declared hsucc...</span>\n</code></pre></div>\n<p>I don't understand why Lean understand what I mean by <code>hsucc.succ</code> in the first example but not the second. (I would be less confused if it understood neither example, though I would still be annoyed.)</p>\n<p>Unrelated question: when I defined the function <code>powersetToPreorder</code>, was there a way not to put the fields <code>lt</code> and <code>lt_iff_le_not_le</code> in the description of the preorder ? That is, is there some way to tell Lean \"just take <code>lt</code> to be equal to <code>fun a b =&gt; le a b ∧ ¬(le b a)\"</code>\"?</p>\n<p>Unrelated remark: I am trying to generalize some parts of my projects from finite preorders from locally finite preorders (or more precisely preorders whose antisymmetrization is locally finite), so I was very happy to find locally finite orders in mathlib.</p>",
        "id": 357934501,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683910217
    },
    {
        "content": "<p>This is usually where you would introduce a type synonym, something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OrderByPowerset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderByPowerset.of</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">OrderByPowerset</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">OrderByPowerset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">of.symm</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">of.symm</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 357936574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683910715
    },
    {
        "content": "<p>The way to tell lean to fill <code>lt</code> with the default is to remove the <code>lt := ...</code> line from your code.</p>",
        "id": 357938861,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683911225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/More.20trouble.20with.20instances/near/357938861\">said</a>:</p>\n<blockquote>\n<p>The way to tell lean to fill <code>lt</code> with the default is to remove the <code>lt := ...</code> line from your code.</p>\n</blockquote>\n<p>Hmm, I was sure that I tried and gotten an error, but now I am trying again and it appears to be working... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I suppose that I was doing something else wrong last time. Thanks !</p>",
        "id": 357944461,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683912651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/More.20trouble.20with.20instances/near/357936574\">said</a>:</p>\n<blockquote>\n<p>This is usually where you would introduce a type synonym, something like</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">OrderByPowerset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderByPowerset.of</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">OrderByPowerset</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">OrderByPowerset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">of.symm</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">of.symm</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Hmm, I am getting a lot of errors when I try to copy your code into my playground file. First Lean complains about the <code>Type*</code>, so I used <code>Type _</code>. (I am not sure about this; I was hoping that this is the Lean4 equivalent of <code>Type*</code>). Then it complains about the <code>(OrderByPowerset α)</code> in the instance definition, so I guessed it was a typo and used <code>OrderByPowerset s</code> and also changed the <code>E</code> to <code>s</code>. (But that means that I have to introduce the <code>s</code> somewhere.) But then Lean complains that it doesn't know what <code>of_symm</code> means ! I also don't know what it means, and the mathlib4 documentation search was not enlightening. Did I forget to import some basic file that would make all this work ?</p>\n<p>Anyway, I'll try to implement your solution this evening, thank you !</p>",
        "id": 357947450,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683913412
    },
    {
        "content": "<p>one should indeed do this with a synonym, but if you want to do it \"inline\" you can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">successeur2</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">SuccOrder</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">powersetToPreorder</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">powersetToPreorder</span> <span class=\"n\">E</span>\n  <span class=\"n\">hsucc.succ</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 357948971,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683913791
    },
    {
        "content": "<p>Here's a start for the synonym approach:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Algebra.Order</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.SuccPred.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">powersetToPreorder</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span>  <span class=\"n\">where</span>\n<span class=\"n\">le</span> <span class=\"o\">:=</span>  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span>\n<span class=\"n\">le_refl</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span>\n<span class=\"n\">le_trans</span> <span class=\"o\">:=</span>  <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hab</span> <span class=\"n\">hbc</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">X</span> <span class=\"n\">hXE</span> <span class=\"n\">hXc</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hab</span> <span class=\"n\">hXE</span> <span class=\"o\">(</span><span class=\"n\">hbc</span> <span class=\"n\">hXE</span> <span class=\"n\">hXc</span><span class=\"o\">)</span>\n<span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">⦄,</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"n\">lt_iff_le_not_le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">triv</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">successeur1</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hsucc</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">SuccOrder</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">hsucc.succ</span> <span class=\"n\">a</span>\n<span class=\"c1\">-- This works fine.</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderByPowerset</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">OrderByPowerset.of</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">OrderByPowerset</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Preorder</span> <span class=\"o\">(</span><span class=\"n\">OrderByPowerset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">powersetToPreorder</span> <span class=\"n\">E</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">successeur2</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">SuccOrder</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">OrderByPowerset</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">OrderByPowerset</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">OrderByPowerset</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n  <span class=\"n\">SuccOrder.succ</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 357950105,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683914066
    },
    {
        "content": "<p>Cool ! Thanks Adam for giving more details for the synonym approach. I'll see if your first solution works in my context, and if not I'll introduce the type synonyms and the preorder instances on them.</p>",
        "id": 357957489,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683915886
    },
    {
        "content": "<p>The first solution worked, even in my more complicated situation ! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  I'll remember both solutions in case I run into that type of trouble again.</p>",
        "id": 357973404,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683920879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"318709\">Sophie Morel</span> has marked this topic as resolved.</p>",
        "id": 357973454,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683920884
    }
]