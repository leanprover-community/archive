[
    {
        "content": "<p>Does <code>intro</code> work like <code>rintro</code> now? The following code works (to my surprise):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">⟨⟨</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">q</span><span class=\"o\">⟩,</span><span class=\"n\">r</span><span class=\"o\">⟩</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">,</span><span class=\"n\">p</span><span class=\"o\">,</span><span class=\"n\">r</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 339815532,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678094896
    },
    {
        "content": "<p>Also in core Lean is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hp</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">hq</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hq</span>\n</code></pre></div>\n<p>I'm not sure <code>rintro</code> is of much use anymore, but there are surely corner cases.</p>",
        "id": 339817021,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1678095319
    },
    {
        "content": "<p>BTW this is just a shortcut for <code>intro ...; match ... with | ... | ...</code></p>",
        "id": 339818832,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1678095807
    },
    {
        "content": "<p>Does it support the  <code>rfl</code> pattern?</p>",
        "id": 339819015,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1678095852
    },
    {
        "content": "<p>Yes, but it sometimes fails when you think it shouldn't. (I think this was discussed elsewhere recently but I forgot where.)</p>\n<p>Here is one (of many) excerpt from my code that's been compiling for well over a year now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">constructor</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.rev_fwd</span><span class=\"o\">]</span>\n      <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">e.fwd_rev</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>(The context is mostly irrelevant.)</p>",
        "id": 339820711,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1678096300
    },
    {
        "content": "<p>yes <code>intro</code> and <code>rintro</code> have a much more overlapping grammar now. <code>intro</code>'s syntax for pattern matching is a bit more heavyweight, and it also puts the pattern before each case rather than on the same line; which style is better depends on the context. Another consequence of repeating the cases is that you can't do stuff like <code>rintro ⟨a | b, c | d, e | f⟩</code> without repeating all the pattern matching permutations - this is also more convenient if you are following up with <code>&lt;;&gt; kitchen_sink</code></p>",
        "id": 339838698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101092
    },
    {
        "content": "<p>If I use it for one case only, does <code>intro</code> and <code>rintro</code> do the same?</p>",
        "id": 339839087,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678101214
    },
    {
        "content": "<p>No, they have a different syntax, although it looks similar in simple cases</p>",
        "id": 339839225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101252
    },
    {
        "content": "<p>in particular <code>rintro</code> uses \"<code>rcases</code> patterns\" while <code>intro</code> uses <code>term</code></p>",
        "id": 339839276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101271
    },
    {
        "content": "<p>So that means that with <code>intro</code> you can name constructors directly like <code>intro (And.intro x y)</code> while <code>rintro</code> can't</p>",
        "id": 339839386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101312
    },
    {
        "content": "<p>but on the other hand <code>rintro</code> has <code>rfl</code> which is actually a syntax for calling <code>subst</code> - actually pattern matching <code>rfl</code> in <code>intro</code> has a different effect and does not always work</p>",
        "id": 339839603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101379
    },
    {
        "content": "<p>also <code>-</code> is an rcases pattern which means to clear the variable from the context, there is no equivalent of this in <code>intro</code></p>",
        "id": 339839679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101406
    },
    {
        "content": "<p>Here's an example with the difference in behavior with pattern matching rfl:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"bp\">;</span> <span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Using <code>intro rfl;</code> doesn't work at all, <code>rfl</code> is introduced as a variable</p>",
        "id": 339840371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678101639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60intro.60.20is.20.60rintro.60/near/339838698\">said</a>:</p>\n<blockquote>\n<p>yes <code>intro</code> and <code>rintro</code> have a much more overlapping grammar now. <code>intro</code>'s syntax for pattern matching is a bit more heavyweight, and it also puts the pattern before each case rather than on the same line; which style is better depends on the context. Another consequence of repeating the cases is that you can't do stuff like <code>rintro ⟨a | b, c | d, e | f⟩</code> without repeating all the pattern matching permutations - this is also more convenient if you are following up with <code>&lt;;&gt; kitchen_sink</code></p>\n</blockquote>\n<p>How could you do that pattern? Say that the goal is currently <code>(a or b) and (c or d) and (e or f) -&gt; false</code>, what rintro / intro patterns would help?</p>",
        "id": 339842416,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1678102321
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">|</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"bp\">|</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this is assuming you really wanted the 8-way case split and also that the same tactic solved all the cases</p>",
        "id": 339843441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678102647
    },
    {
        "content": "<p>Is <code>kitchen_sink</code> a thing?</p>",
        "id": 339843997,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678102804
    },
    {
        "content": "<p>no, it's a stand-in for a high-automation tactic</p>",
        "id": 339844098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678102832
    },
    {
        "content": "<p>common kitchen-sink tactics include <code>rfl</code>, <code>decide</code>, <code>simp</code>, <code>tauto</code>, <code>obviously</code></p>",
        "id": 339844201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678102864
    },
    {
        "content": "<p>usually you would not be able to use a more targeted tactic like <code>exact</code> or <code>rw</code> because the terms to use in each case will be different</p>",
        "id": 339844331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678102910
    },
    {
        "content": "<p>Note that the <code>intro</code> pattern, while more verbose, is also more expressive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">∨</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cdef</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">ef</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this kind of pattern match is not expressible as a single rcases pattern</p>",
        "id": 339844602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678102994
    },
    {
        "content": "<p>more precisely, you cannot make subsequent case splits depend on earlier ones with an rcases pattern</p>",
        "id": 339844867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678103056
    },
    {
        "content": "<p>What does <code>obviously</code> do?</p>",
        "id": 339847334,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678103741
    },
    {
        "content": "<p>aka <code>tidy</code></p>",
        "id": 339871528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678110255
    },
    {
        "content": "<p><code>obviously</code> in principle supports more things via a plugin functionality, and it was used for such in <span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> 's original category theory library before it moved to mathlib, but in mathlib I think they are just synonyms</p>",
        "id": 339871731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678110329
    },
    {
        "content": "<p>I think that occasionally some case bash functionality is added to <code>obviously</code> to make it like <code>tidy++</code></p>",
        "id": 339876105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678111362
    }
]