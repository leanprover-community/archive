[
    {
        "content": "<p>Sometimes I want to run small fragments of code to test them out. Often I use something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span>\n</code></pre></div>\n<p>which works great.</p>\n<p>But how do I print stuff?</p>\n<p>The shortest I've found so far is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.debug</span> <span class=\"n\">true</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">debug</span><span class=\"o\">]</span> <span class=\"s2\">\"{9}\"</span>\n</code></pre></div>\n<p>Anything snappier? <code>logInfo</code> succeeds, but the messages don't seem to appear.</p>",
        "id": 343547585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1679444773
    },
    {
        "content": "<p>It might be cool to have something like the following macro somewhere:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"trace!\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">addRawTrace</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">trace</span><span class=\"bp\">!</span> <span class=\"s2\">\"{a}\"</span> <span class=\"c1\">-- 5</span>\n</code></pre></div>",
        "id": 343551036,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679445896
    },
    {
        "content": "<p>(<code>addRawTrace (s! \"{a}\")</code> is the extant, macroless version that I know of, but I'm not sure it counts as snappier!)</p>",
        "id": 343551318,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679445997
    },
    {
        "content": "<p>This would work after <a href=\"https://github.com/leanprover/lean4/pull/1967\">lean4#1967</a>.</p>",
        "id": 343552262,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679446346
    },
    {
        "content": "<p>In the meantime, I usually declare an elaborator if I want to test code.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{n}\"</span>\n<span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 343552623,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679446458
    },
    {
        "content": "<p>the defined-on-the-spot elaborator use case is mostly covered by <code>run_cmd</code> / <code>run_tac</code> / <code>run_elab</code>, although it does require an import</p>",
        "id": 343576268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679461155
    },
    {
        "content": "<p>(btw, here's a better version of <code>trace!</code> patterned more closely after <code>trace[...]</code> for when you just don't feel like setting an option:)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"trace!\"</span> <span class=\"n\">s</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"n\">s.raw.getKind</span> <span class=\"bp\">==</span> <span class=\"n\">interpolatedStrKind</span> <span class=\"k\">then</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩))</span> <span class=\"k\">else</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">s</span><span class=\"o\">⟩)</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span><span class=\"o\">))</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"n\">Lean.addRawTrace</span> <span class=\"bp\">$</span><span class=\"n\">msg</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"c1\">-- 7</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">7</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">$</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"n\">trace</span><span class=\"bp\">!</span> <span class=\"s2\">\"{n}\"</span>\n</code></pre></div>",
        "id": 343584662,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1679466435
    }
]