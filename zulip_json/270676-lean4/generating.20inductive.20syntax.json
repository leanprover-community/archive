[
    {
        "content": "<p>Still largely unfamiliar with metaprogramming, so I'm sure I am missing something obvious, but how do I generate the <code>TSyntax `Lean.Parser.Command.ctor</code> necessary for this metaprogram to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">keywordsRaw</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"s2\">\"struct\"</span>\n  <span class=\"o\">,</span> <span class=\"s2\">\"typedef\"</span>\n  <span class=\"o\">,</span> <span class=\"s2\">\"if\"</span>\n  <span class=\"o\">,</span> <span class=\"s2\">\"...\"</span> <span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Macro</span> <span class=\"k\">in</span>\n<span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"genKeywordType!\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">Keyword</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">$</span><span class=\"o\">(</span>\n      <span class=\"n\">keywordsRaw.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">kw</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>I've tried lots of different quotations to try to fill in the sorry, but haven't found the right one. I see from the parser for <code>ctor</code> that it should look something like <code>`(| $kw)</code> but that does not work. I also can't find any documentation in the metaprogramming book or on zulip about how to generate inductive decl syntax D:</p>\n<p>Should I just be building an <code>elab</code> command instead of a macro for this?</p>",
        "id": 346469991,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680505479
    },
    {
        "content": "<p>I think you probably don't want to generate the ctor yourself; it looks like you just want to make an identifier</p>",
        "id": 346470403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680505609
    },
    {
        "content": "<p>in which case you can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"genKeywordType!\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">Keyword</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">keywordsRaw</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346470539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680505663
    },
    {
        "content": "<p>aha!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"n\">macro</span> <span class=\"s2\">\"genKeywordType!\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">Keyword</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n    <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">keywordsRaw.map</span> <span class=\"n\">mkIdent</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">]</span><span class=\"bp\">*</span>\n  <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 346470750,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680505734
    },
    {
        "content": "<p>what does the <code>:ident</code> do there? if i remove it Lean complains about a syntax error at the <code>$[</code>! <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 346470857,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680505770
    },
    {
        "content": "<p>A general antiquotation could be standing in for a variety of syntax categories, so it is somewhat ambiguous for the parser</p>",
        "id": 346471240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680505904
    },
    {
        "content": "<p>Got it. So when I have weird parse errors I should annotate my antiquotations.</p>",
        "id": 346471410,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1680505944
    },
    {
        "content": "<p>it can't use type information because it is happening at parse time</p>",
        "id": 346471440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680505949
    }
]