[
    {
        "content": "<p>Are there short terms plan to move the JSX-like syntax out of doc-gen 4 into some specific library or core? I'm talking about that work that started in <a href=\"https://github.com/leanprover/lean4/pull/723\">https://github.com/leanprover/lean4/pull/723</a> and ended in in doc-gen4 through <a href=\"https://github.com/leanprover/doc-gen4/commit/11de4f7f5593a1ceaba284601b5ed3334f79e026\">https://github.com/leanprover/doc-gen4/commit/11de4f7f5593a1ceaba284601b5ed3334f79e026</a>. <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span></p>",
        "id": 324055491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674827440
    },
    {
        "content": "<p>In principle nothing speaks against that but I don't have concrete plans right now.</p>",
        "id": 324055653,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674827477
    },
    {
        "content": "<p>It could be useful outside of doc-gen</p>",
        "id": 324055891,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674827528
    },
    {
        "content": "<p>I'm very much aware of that, if someone wants to do this sure.</p>",
        "id": 324056305,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674827647
    },
    {
        "content": "<p>Do you think there will be no complication?</p>",
        "id": 324056555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674827731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what would you like to use it for? We have it here <a href=\"https://github.com/EdAyers/WidgetKit/blob/main/WidgetKit/Html.lean\">https://github.com/EdAyers/WidgetKit/blob/main/WidgetKit/Html.lean</a> , but there it will be specialized for use in widgets (i.e. we may change the data type to be widget-html rather than general-html)</p>",
        "id": 324057017,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674827852
    },
    {
        "content": "<p>I'd like to use it to write Html files that have nothing to do with doc-gen or widgets.</p>",
        "id": 324057264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674827906
    },
    {
        "content": "<p>in principle the HTML itself is just a single file in doc-gen4: <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/ToHtmlFormat.lean\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/ToHtmlFormat.lean</a></p>\n<p>The toStringAux can definitley need some work if you want to output pretty HTML but in principle you only need this file which as you can see has no dependencies to doc-gen itself.</p>",
        "id": 324057735,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1674828035
    },
    {
        "content": "<p>The file is quite small, you could probably just copy it into another project. I am not sure it is worth maintaining a single dsl-library for different use cases</p>",
        "id": 324057930,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674828083
    },
    {
        "content": "<p>Thanks, that is very useful to  know</p>",
        "id": 324058976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1674828344
    },
    {
        "content": "<p>I think we've added quite a few new features to the doc-gen4 version after it was forked from the widget code, so you probably want to copy the doc-gen4 version.</p>",
        "id": 324121007,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1674842685
    },
    {
        "content": "<p>As a nice exercise before bedtime I wanted to try to use this JSX code. But it doesn't support boolean attributed or the <code>&lt;!DOCTYPE html&gt;</code> tag. So I decided it would make a nice exercise. And of course I failed. I'm trying to edit <a href=\"https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/ToHtmlFormat.lean\">https://github.com/leanprover/doc-gen4/blob/main/DocGen4/Output/ToHtmlFormat.lean</a>. The dumbest addition I tried was to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"&lt;!DOCTYPE html&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Html.element</span> <span class=\"s2\">\"!DOCTYPE\"</span> <span class=\"n\">true</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"s2\">\"html\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n</code></pre></div>\n<p>to the macro rules at the end. I don't understand why this fails. I also fails if add <code>syntax \"&lt;!DOCTYPE html&gt;\" : jsxElement</code> somewhere up.</p>",
        "id": 325497468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675371946
    },
    {
        "content": "<p>Strictly speaking <code>&lt;!DOCTYPE html&gt;</code> isn't an element, since it does not end in <code>/&gt;</code> or <code>&lt;/!DOCTYPE&gt;</code></p>",
        "id": 325498328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372286
    },
    {
        "content": "<p>I understand this is a super weird piece of html. But my question is rather about Lean macros.</p>",
        "id": 325498456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675372330
    },
    {
        "content": "<p>I'm not sure syntax with internal spaces works</p>",
        "id": 325498504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372351
    },
    {
        "content": "<p>did you try <code>syntax \"&lt;!DOCTYPE\" \"html&gt;\"</code>?</p>",
        "id": 325498549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372371
    },
    {
        "content": "<p>Removing the space doesn't help</p>",
        "id": 325498625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675372401
    },
    {
        "content": "<p>Here is the full thing (depending on nothing outside core Lean):</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2021 Wojciech Nawrocki. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n\n<span class=\"cm\">Authors: Wojciech Nawrocki, Sebastian Ullrich, Henrik Böving</span>\n<span class=\"cm\">-/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Parser</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! This module defines:</span>\n<span class=\"cm\">- a representation of HTML trees</span>\n<span class=\"cm\">- together with a JSX-like DSL for writing them</span>\n<span class=\"cm\">- and widget support for visualizing any type as HTML. -/</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Html</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- TODO(WN): it's nameless for shorter JSON; re-add names when we have deriving strategies for From/ToJson</span>\n  <span class=\"c1\">-- element (tag : String) (flatten : Bool) (attrs : Array HtmlAttribute) (children : Array Html)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Array</span> <span class=\"n\">Html</span> <span class=\"bp\">→</span> <span class=\"n\">Html</span>\n  <span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Html</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Inhabited</span><span class=\"o\">,</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"n\">String</span> <span class=\"n\">Html</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Html.text</span><span class=\"o\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Html</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">attributesToString</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">))</span> <span class=\"o\">:</span><span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">attrs.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc</span> <span class=\"bp\">++</span> <span class=\"s2\">\" \"</span> <span class=\"bp\">++</span> <span class=\"n\">k</span> <span class=\"bp\">++</span> <span class=\"s2\">\"=</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span> <span class=\"n\">v</span> <span class=\"bp\">++</span> <span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"c1\">-- TODO: Termination proof</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">toStringAux</span> <span class=\"o\">:</span> <span class=\"n\">Html</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">tag</span> <span class=\"n\">false</span> <span class=\"n\">attrs</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">text</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;{tag}{attributesToString attrs}&gt;{s}&lt;/{tag}&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">tag</span> <span class=\"n\">false</span> <span class=\"n\">attrs</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">child</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;{tag}{attributesToString attrs}&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">{child.toStringAux}&lt;/{tag}&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">tag</span> <span class=\"n\">false</span> <span class=\"n\">attrs</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;{tag}{attributesToString attrs}&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">{children.foldl (· ++ toStringAux ·) \"\"}&lt;/{tag}&gt;</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">tag</span> <span class=\"n\">true</span> <span class=\"n\">attrs</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;{tag}{attributesToString attrs}&gt;{children.foldl (· ++ toStringAux ·) \"\"}&lt;/{tag}&gt;\"</span>\n<span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"n\">html</span> <span class=\"o\">:</span> <span class=\"n\">Html</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">html.toStringAux.trimRight</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">Html</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">toString</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">textLength</span> <span class=\"o\">:</span> <span class=\"n\">Html</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"n\">text</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.length</span>\n<span class=\"bp\">|</span> <span class=\"n\">element</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">children</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">lengths</span> <span class=\"o\">:=</span> <span class=\"n\">children.map</span> <span class=\"n\">textLength</span>\n  <span class=\"n\">lengths.foldl</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">escapePairs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"&amp;\"</span><span class=\"o\">,</span> <span class=\"s2\">\"&amp;amp\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"&lt;\"</span><span class=\"o\">,</span> <span class=\"s2\">\"&amp;lt\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"&gt;\"</span><span class=\"o\">,</span> <span class=\"s2\">\"&amp;gt\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"o\">,</span> <span class=\"s2\">\"&amp;quot\"</span><span class=\"o\">)</span>\n  <span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">escape</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">escapePairs.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">acc</span> <span class=\"o\">(</span><span class=\"n\">o</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">acc.replace</span> <span class=\"n\">o</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Html</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Jsx</span>\n<span class=\"kn\">open</span> <span class=\"n\">Parser</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">jsxElement</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">jsxChild</span>\n\n<span class=\"c1\">-- JSXTextCharacter : SourceCharacter but not one of {, &lt;, &gt; or }</span>\n<span class=\"kd\">def</span> <span class=\"n\">jsxText</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withAntiquot</span> <span class=\"o\">(</span><span class=\"n\">mkAntiquot</span> <span class=\"s2\">\"jsxText\"</span> <span class=\"bp\">`</span><span class=\"n\">jsxText</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">startPos</span> <span class=\"o\">:=</span> <span class=\"n\">s.pos</span>\n      <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">takeWhile1Fn</span> <span class=\"o\">(</span><span class=\"n\">not</span> <span class=\"bp\">∘</span> <span class=\"s2\">\"[{&lt;&gt;}]$\"</span><span class=\"bp\">.</span><span class=\"n\">contains</span><span class=\"o\">)</span> <span class=\"s2\">\"expected JSX text\"</span> <span class=\"n\">c</span> <span class=\"n\">s</span>\n      <span class=\"n\">mkNodeToken</span> <span class=\"bp\">`</span><span class=\"n\">jsxText</span> <span class=\"n\">startPos</span> <span class=\"n\">c</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[combinator_formatter Jsx.jsxText]</span> <span class=\"kd\">def</span> <span class=\"n\">jsxText.formatter</span> <span class=\"o\">:</span> <span class=\"n\">Formatter</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n<span class=\"kd\">@[combinator_parenthesizer Jsx.jsxText]</span> <span class=\"kd\">def</span> <span class=\"n\">jsxText.parenthesizer</span> <span class=\"o\">:</span> <span class=\"n\">Parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">jsxAttrName</span> <span class=\"o\">:=</span> <span class=\"n\">rawIdent</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">str</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsxAttrVal</span> <span class=\"o\">:=</span> <span class=\"n\">str</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">group</span><span class=\"o\">(</span><span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsxSimpleAttr</span> <span class=\"o\">:=</span> <span class=\"n\">jsxAttrName</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">jsxAttrVal</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsxBoolAttr</span> <span class=\"o\">:=</span> <span class=\"n\">str</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsxAttrSpread</span> <span class=\"o\">:=</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsxAttr</span> <span class=\"o\">:=</span> <span class=\"n\">jsxSimpleAttr</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">jsxAttrSpread</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">jsxBoolAttr</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;!DOCTYPE html&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">jsxElement</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"n\">rawIdent</span> <span class=\"n\">jsxAttr</span><span class=\"bp\">*</span> <span class=\"s2\">\"/&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">jsxElement</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"n\">rawIdent</span> <span class=\"n\">jsxAttr</span><span class=\"bp\">*</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"n\">jsxChild</span><span class=\"bp\">*</span> <span class=\"s2\">\"&lt;/\"</span> <span class=\"n\">rawIdent</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">jsxElement</span>\n\n\n<span class=\"n\">syntax</span> <span class=\"n\">jsxText</span>      <span class=\"o\">:</span> <span class=\"n\">jsxChild</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"{\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">jsxChild</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">jsxChild</span>\n<span class=\"n\">syntax</span> <span class=\"n\">jsxElement</span>   <span class=\"o\">:</span> <span class=\"n\">jsxChild</span>\n\n<span class=\"n\">scoped</span> <span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">jsxElement</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">translateAttrs</span> <span class=\"o\">(</span><span class=\"n\">attrs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Jsx.jsxAttr</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">as</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"n\">for</span> <span class=\"n\">attr</span> <span class=\"k\">in</span> <span class=\"n\">attrs.map</span> <span class=\"n\">TSyntax.raw</span> <span class=\"k\">do</span>\n    <span class=\"n\">as</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">attr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttr</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">jsxAttrName</span><span class=\"bp\">=$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">jsxAttrVal</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttrName</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">n</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttrName</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">n.getId</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n      <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttrVal</span><span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">v</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttrVal</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">v</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n      <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttr</span><span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">as</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxBoolAttr</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">n</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n  <span class=\"n\">return</span> <span class=\"n\">as</span>\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">htmlHelper</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">children</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MacroM</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)):=</span> <span class=\"k\">do</span>\n  <span class=\"n\">unless</span> <span class=\"n\">n.getId</span> <span class=\"bp\">==</span> <span class=\"n\">m.getId</span> <span class=\"k\">do</span>\n    <span class=\"n\">withRef</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Leading and trailing part of tags don't match: '{n}', '{m}'\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">cs</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"n\">for</span> <span class=\"n\">child</span> <span class=\"k\">in</span> <span class=\"n\">children</span> <span class=\"k\">do</span>\n    <span class=\"n\">cs</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">child</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxChild</span><span class=\"bp\">|$</span><span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">jsxText</span><span class=\"o\">)</span>    <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">Html.text</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">t.raw</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">getAtomVal</span><span class=\"o\">)))</span>\n    <span class=\"c1\">-- TODO(WN): elab as list of children if type is `t Html` where `Foldable t`</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxChild</span><span class=\"bp\">|</span><span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">})</span>          <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Html</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxChild</span><span class=\"bp\">|</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">])</span>          <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cs</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Html</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxChild</span><span class=\"bp\">|$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">jsxElement</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">cs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">jsxElement</span> <span class=\"o\">:</span> <span class=\"n\">Html</span><span class=\"o\">))</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span>                         <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n  <span class=\"k\">let</span> <span class=\"n\">tag</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"n\">n.getId</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"n\">cs</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"s2\">\"&lt;!DOCTYPE html&gt;\"</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Html.element</span> <span class=\"s2\">\"!DOCTYPE\"</span> <span class=\"n\">true</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"s2\">\"html\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">&lt;$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">attrs</span><span class=\"bp\">*</span> <span class=\"bp\">/&gt;</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">n.getId</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">attrs</span> <span class=\"bp\">←</span> <span class=\"n\">translateAttrs</span> <span class=\"n\">attrs</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Html.element</span> <span class=\"bp\">$</span><span class=\"n\">kind</span> <span class=\"n\">true</span> <span class=\"bp\">$</span><span class=\"n\">attrs</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">&lt;$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">attrs</span><span class=\"bp\">*</span> <span class=\"bp\">&gt;$</span><span class=\"n\">children</span><span class=\"bp\">*&lt;/$</span><span class=\"n\">m</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">tag</span><span class=\"o\">,</span> <span class=\"n\">children</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">htmlHelper</span> <span class=\"n\">n</span> <span class=\"n\">children</span> <span class=\"n\">m</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Html.element</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">quote</span> <span class=\"n\">tag</span><span class=\"o\">)</span> <span class=\"n\">true</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">translateAttrs</span> <span class=\"n\">attrs</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">children</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">end</span> <span class=\"n\">Jsx</span>\n\n<span class=\"sd\">/-- A type which implements `ToHtmlFormat` will be visualized</span>\n<span class=\"sd\">as the resulting HTML in editors which support it. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">ToHtmlFormat</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">formatHtml</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Html</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">Jsx</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Html</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;!</span><span class=\"n\">DOCTYPE</span> <span class=\"n\">html</span><span class=\"bp\">&gt;</span>\n</code></pre></div>\n</div></div>",
        "id": 325498766,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675372454
    },
    {
        "content": "<p>breaking up all the tokens seems to work</p>",
        "id": 325498894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372515
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"&lt;\"</span> <span class=\"s2\">\"!\"</span> <span class=\"s2\">\"DOCTYPE\"</span> <span class=\"s2\">\"html\"</span> <span class=\"s2\">\"&gt;\"</span> <span class=\"o\">:</span> <span class=\"n\">jsxElement</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">&lt;!</span><span class=\"n\">DOCTYPE</span> <span class=\"n\">html</span><span class=\"bp\">&gt;</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Html.element</span> <span class=\"s2\">\"!DOCTYPE\"</span> <span class=\"n\">true</span> <span class=\"bp\">#</span><span class=\"o\">[(</span><span class=\"s2\">\"html\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)]</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n</code></pre></div>",
        "id": 325498926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372529
    },
    {
        "content": "<p>actually every variation seems to work for me, including <code>syntax \"&lt;!DOCTYPE html&gt;\" : jsxElement</code></p>",
        "id": 325499128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372598
    },
    {
        "content": "<p>ah, I guess the issue in your version is that you put string quotes inside the quotation</p>",
        "id": 325499272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675372668
    },
    {
        "content": "<p>Oh! Indeed that fixes everything</p>",
        "id": 325499456,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675372735
    },
    {
        "content": "<p>I really don't know why I did that.</p>",
        "id": 325499507,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675372758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/JSX/near/325498328\">said</a>:</p>\n<blockquote>\n<p>Strictly speaking <code>&lt;!DOCTYPE html&gt;</code> isn't an element, since it does not end in <code>/&gt;</code> or <code>&lt;/!DOCTYPE&gt;</code></p>\n</blockquote>\n<p>In fact there's an entire separate grammar for this type of thing, such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;!</span><span class=\"n\">DOCTYPE</span> <span class=\"n\">note</span> <span class=\"o\">[</span>\n<span class=\"bp\">&lt;!</span><span class=\"n\">ELEMENT</span> <span class=\"n\">note</span> <span class=\"o\">(</span><span class=\"n\">to</span><span class=\"o\">,</span><span class=\"k\">from</span><span class=\"o\">,</span><span class=\"n\">heading</span><span class=\"o\">,</span><span class=\"n\">body</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;!</span><span class=\"n\">ELEMENT</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">PCDATA</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;!</span><span class=\"n\">ELEMENT</span> <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">PCDATA</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;!</span><span class=\"n\">ELEMENT</span> <span class=\"n\">heading</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">PCDATA</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;!</span><span class=\"n\">ELEMENT</span> <span class=\"n\">body</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">PCDATA</span><span class=\"o\">)</span><span class=\"bp\">&gt;</span>\n<span class=\"o\">]</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 325505070,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675374899
    },
    {
        "content": "<p>Based on <a href=\"https://github.com/facebook/react/issues/1035\">https://github.com/facebook/react/issues/1035</a> it seems that <code>&lt;!doctype html&gt;</code> is not supported by JSX either. Another reasonable design would be a <code>HtmlDocument</code> type that just injects that string as a prefix when written out to a file</p>",
        "id": 325505384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1675375022
    },
    {
        "content": "<p>I give up boolean arguments for now. My best effort is:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>/-\nCopyright (c) 2021 Wojciech Nawrocki. All rights reserved.\nReleased under Apache 2.0 license as described in the file LICENSE.\n\nAuthors: Wojciech Nawrocki, Sebastian Ullrich, Henrik Böving\n-/\nimport Lean.Data.Json\nimport Lean.Parser\n\n/-! This module defines:\n- a representation of HTML trees\n- together with a JSX-like DSL for writing them\n- and widget support for visualizing any type as HTML. -/\n\nopen Lean\n\ninductive HtmlAttribute where\n  | keyVal : String → String → HtmlAttribute\n  | bool : String → HtmlAttribute\n  deriving Repr, BEq, Inhabited, FromJson, ToJson\n\ninductive Html where\n  -- TODO(WN): it&#39;s nameless for shorter JSON; re-add names when we have deriving strategies for From/ToJson\n  -- element (tag : String) (flatten : Bool) (attrs : Array HtmlAttribute) (boolAttrs) (children : Array Html)\n  | element : String → Bool → Array HtmlAttribute → Array Html → Html\n  | text : String → Html\n  deriving Repr, BEq, Inhabited, FromJson, ToJson\n\ninstance : Coe String Html :=\n  ⟨Html.text⟩\n\nnamespace Html\n\ndef attributesToString (attrs : Array HtmlAttribute) :String :=\n  attrs.foldl (fun acc attr =&gt; match attr with | .keyVal k v =&gt; s!&quot;{acc} {k}=\\&quot;{v}\\&quot;&quot; | .bool a =&gt; s!&quot;{acc} {a}&quot;) &quot;&quot;\n\n-- TODO: Termination proof\npartial def toStringAux : Html → String\n| element tag false attrs #[text s] =&gt; s!&quot;&lt;{tag}{attributesToString attrs}&gt;{s}&lt;/{tag}&gt;\\n&quot;\n| element tag false attrs #[child] =&gt; s!&quot;&lt;{tag}{attributesToString attrs}&gt;\\n{child.toStringAux}&lt;/{tag}&gt;\\n&quot;\n| element tag false attrs children =&gt; s!&quot;&lt;{tag}{attributesToString attrs}&gt;\\n{children.foldl (· ++ toStringAux ·) &quot;&quot;}&lt;/{tag}&gt;\\n&quot;\n| element tag true attrs children =&gt; s!&quot;&lt;{tag}{attributesToString attrs}&gt;{children.foldl (· ++ toStringAux ·) &quot;&quot;}&lt;/{tag}&gt;&quot;\n| text s =&gt; s\n\ndef toString (html : Html) : String :=\n  html.toStringAux.trimRight\n\ninstance : ToString Html :=\n  ⟨toString⟩\n\npartial def textLength : Html → Nat\n| text s =&gt; s.length\n| element _ _ _ children =&gt;\n  let lengths := children.map textLength\n  lengths.foldl Nat.add 0\n\ndef escapePairs : Array (String × String) :=\n  #[\n    (&quot;&amp;&quot;, &quot;&amp;amp&quot;),\n    (&quot;&lt;&quot;, &quot;&amp;lt&quot;),\n    (&quot;&gt;&quot;, &quot;&amp;gt&quot;),\n    (&quot;\\&quot;&quot;, &quot;&amp;quot&quot;)\n  ]\n\ndef escape (s : String) : String :=\n  escapePairs.foldl (fun acc (o, r) =&gt; acc.replace o r) s\n\nend Html\n\nnamespace Jsx\nopen Parser PrettyPrinter\n\ndeclare_syntax_cat jsxElement\ndeclare_syntax_cat jsxChild\n\n-- JSXTextCharacter : SourceCharacter but not one of {, &lt;, &gt; or }\ndef jsxText : Parser :=\n  withAntiquot (mkAntiquot &quot;jsxText&quot; `jsxText) {\n    fn := fun c s =&gt;\n      let startPos := s.pos\n      let s := takeWhile1Fn (not ∘ &quot;[{&lt;&gt;}]$&quot;.contains) &quot;expected JSX text&quot; c s\n      mkNodeToken `jsxText startPos c s }\n\n@[combinator_formatter Jsx.jsxText] def jsxText.formatter : Formatter := pure ()\n@[combinator_parenthesizer Jsx.jsxText] def jsxText.parenthesizer : Parenthesizer := pure ()\n\nsyntax jsxAttrName := rawIdent &lt;|&gt; str\nsyntax jsxAttrVal := str &lt;|&gt; group(&quot;{&quot; term &quot;}&quot;)\nsyntax jsxSimpleAttr := jsxAttrName (&quot;=&quot; jsxAttrVal)?\nsyntax jsxAttrSpread := &quot;[&quot; term &quot;]&quot;\nsyntax jsxAttr := jsxSimpleAttr &lt;|&gt; jsxAttrSpread\n\nsyntax &quot;&lt;!DOCTYPE html&gt;&quot; : jsxElement\nsyntax &quot;&lt;&quot; rawIdent jsxAttr* &quot;/&gt;&quot; : jsxElement\nsyntax &quot;&lt;&quot; rawIdent jsxAttr* &quot;&gt;&quot; jsxChild* &quot;&lt;/&quot; rawIdent &quot;&gt;&quot; : jsxElement\n\n\nsyntax jsxText      : jsxChild\nsyntax &quot;{&quot; term &quot;}&quot; : jsxChild\nsyntax &quot;[&quot; term &quot;]&quot; : jsxChild\nsyntax jsxElement   : jsxChild\n\nscoped syntax:max jsxElement : term\n\ndef translateAttrs (attrs : Array (TSyntax `Jsx.jsxAttr)) : MacroM (TSyntax `term) := do\n  let mut as ← `(#[])\n  for attr in attrs.map TSyntax.raw do\n    as ← match attr with\n    | `(jsxAttrName| $n:jsxAttrName) =&gt;\n      let n ← match n with\n        | `(jsxAttrName| $n:str) =&gt; pure n\n        | `(jsxAttrName| $n:ident) =&gt; pure &lt;| quote (toString n.getId)\n        | _ =&gt; Macro.throwUnsupported\n      `(HtmlAttribute.bool $n)\n    | `(jsxAttr| $n:jsxAttrName=$v:jsxAttrVal) =&gt;\n      let n ← match n with\n        | `(jsxAttrName| $n:str) =&gt; pure n\n        | `(jsxAttrName| $n:ident) =&gt; pure &lt;| quote (toString n.getId)\n        | _ =&gt; Macro.throwUnsupported\n      let v ← match v with\n        | `(jsxAttrVal| {$v}) =&gt; pure v\n        | `(jsxAttrVal| $v:str) =&gt; pure v\n        | _ =&gt; Macro.throwUnsupported\n      `(($as).push &lt;| HtmlAttribute.keyVal $n ($v : String))\n    | `(jsxAttr| [$t]) =&gt; `($as ++ ($t : Array (String × String)))\n    | _ =&gt; Macro.throwUnsupported\n  return as\n\nprivate def htmlHelper (n : Syntax) (children : Array Syntax) (m : Syntax) : MacroM (String × (TSyntax `term)):= do\n  unless n.getId == m.getId do\n    withRef m &lt;| Macro.throwError s!&quot;Leading and trailing part of tags don&#39;t match: &#39;{n}&#39;, &#39;{m}&#39;&quot;\n  let mut cs ← `(#[])\n  for child in children do\n    cs ← match child with\n    | `(jsxChild|$t:jsxText)    =&gt; `(($cs).push (Html.text $(quote t.raw[0]!.getAtomVal)))\n    -- TODO(WN): elab as list of children if type is `t Html` where `Foldable t`\n    | `(jsxChild|{$t})          =&gt; `(($cs).push ($t : Html))\n    | `(jsxChild|[$t])          =&gt; `($cs ++ ($t : Array Html))\n    | `(jsxChild|$e:jsxElement) =&gt; `(($cs).push ($e:jsxElement : Html))\n    | _                         =&gt; Macro.throwUnsupported\n  let tag := toString n.getId\n  pure &lt;| (tag, cs)\n\nmacro_rules\n  | `(&lt;!DOCTYPE html&gt;) =&gt; `(Html.element &quot;!DOCTYPE&quot; true #[.bool &quot;html&quot;] #[])\n  | `(&lt;$n $attrs* /&gt;) =&gt; do\n    let kind := quote (toString n.getId)\n    let attrs ← translateAttrs attrs\n    `(Html.element $kind true $attrs #[])\n  | `(&lt;$n $attrs* &gt;$children*&lt;/$m&gt;) =&gt; do\n    let (tag, children) ← htmlHelper n children m\n    `(Html.element $(quote tag) true $(← translateAttrs attrs) $children)\n\n\nend Jsx\n\n/-- A type which implements `ToHtmlFormat` will be visualized\nas the resulting HTML in editors which support it. -/\nclass ToHtmlFormat (α : Type u) where\n  formatHtml : α → Html\n\n\nopen Jsx\n#eval &lt;!DOCTYPE html&gt;\n#eval &lt;script src=&quot;foo&quot;/&gt;\n#eval &lt;script src=&quot;bar&quot; async/&gt;\n</code></pre></div>\n</div></div>\n<p>where the last <code>#eval</code> fails.</p>",
        "id": 325505442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675375053
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttr</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">jsxAttrName</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttrName</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">n</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">jsxAttrName</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">quote</span> <span class=\"o\">(</span><span class=\"n\">toString</span> <span class=\"n\">n.getId</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n      <span class=\"bp\">`</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">as</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">HtmlAttribute.bool</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 325505831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675375221
    },
    {
        "content": "<p>Oh, this is silly again. I should go to bed. Thank you very much.</p>",
        "id": 325506871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675375662
    }
]