[
    {
        "content": "<p>How do I use a term-level let rec in tactic mode? Just defining a function does not bring it into scope for some reason, assuming I haven't missed something in my code <br>\nMWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.Cofinality</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Bounded</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Ordinal.Topology</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Parity</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">OrderTopology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">IsClub</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">unbounded</span> <span class=\"o\">:</span> <span class=\"n\">Set.Unbounded</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≤</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n  <span class=\"n\">closed</span> <span class=\"o\">:</span> <span class=\"n\">IsClosed</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">NoTopOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">isClub_FilterBasis</span><span class=\"o\">:</span> <span class=\"n\">FilterBasis</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">IsClub</span>\n  <span class=\"n\">nonempty</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">--⟨Set.univ, isClub_univ⟩</span>\n  <span class=\"n\">inter_sets</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span> <span class=\"bp\">∩</span> <span class=\"n\">y</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Set.subset_inter_iff</span><span class=\"o\">,</span> <span class=\"n\">Set.inter_subset_left</span><span class=\"o\">,</span> <span class=\"n\">Set.inter_subset_right</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">]</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"n\">swap</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">IsClosed.inter</span> <span class=\"n\">hx.closed</span> <span class=\"n\">hy.closed</span>\n    <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span>\n      <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n        <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">Even</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">hx.unbounded</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">else</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">hy.unbounded</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>There's no error, just f not appearing in the state</p>",
        "id": 384774706,
        "sender_full_name": "Uni Marx",
        "timestamp": 1692018988
    },
    {
        "content": "<p>It seems you can use <code>f</code>, e.g. by writing <code>exists f 0</code> on the next line, but you can't unfold its definition.</p>",
        "id": 384838944,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1692030830
    }
]