[
    {
        "content": "<p>Hello everyone!<br>\nI have an inductive type <code>HandT</code> and a mapping from each element of <code>HandT</code> to a Nat. Then, I create an instance of <code>LE</code> for <code>HandT</code> that compares two elements by comparing their associated Nat. However, it returns a <code>Prop</code>. I want to use the <code>&lt;=</code> symbol in a boolean context and Lean says that comparing to object of type <code>HandT</code> is not decidable and thus can not be converted to bool (which I understand). However, since the comparison between two <code>HandT</code> is the same as comparing two Nat (which is decidable), I am wondering how I can tell Lean that it is decidable as well. My code is below. Do you have any idea how I can do that ? Many thanks! </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HandT</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Five</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Four</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Full</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Three</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TwoP</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span>     <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Card</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HandT</span>\n<span class=\"kd\">def</span> <span class=\"n\">natOfHandT</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Card</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span>     <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TwoP</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Three</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Full</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Four</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Five</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">7</span>\n<span class=\"kd\">end</span> <span class=\"n\">HandT</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">HandT</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">↦</span> <span class=\"n\">HandT.natOfHandT</span> <span class=\"n\">h1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">HandT.natOfHandT</span> <span class=\"n\">h2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">compare</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n <span class=\"n\">h1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">h2</span> <span class=\"c1\">-- Not decidable</span>\n</code></pre></div>",
        "id": 406559835,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1701960873
    },
    {
        "content": "<p>You can do this like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">HandT</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Five</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Four</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Full</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Three</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TwoP</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span>     <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Card</span>  <span class=\"o\">:</span> <span class=\"n\">HandT</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HandT</span>\n<span class=\"kd\">def</span> <span class=\"n\">natOfHandT</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Card</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">P</span>     <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">|</span> <span class=\"n\">TwoP</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Three</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Full</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">5</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Four</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">6</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Five</span>  <span class=\"bp\">=&gt;</span> <span class=\"mi\">7</span>\n<span class=\"kd\">end</span> <span class=\"n\">HandT</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"n\">HandT</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">↦</span> <span class=\"n\">HandT.natOfHandT</span> <span class=\"n\">h1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">HandT.natOfHandT</span> <span class=\"n\">h2</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">HandT.le_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">HandT.natOfHandT</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">HandT.natOfHandT</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.rfl</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableRel</span> <span class=\"o\">((</span><span class=\"bp\">.</span> <span class=\"bp\">≤</span> <span class=\"bp\">.</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span> <span class=\"bp\">→</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decidable_of_decidable_of_iff</span> <span class=\"n\">HandT.le_iff.symm</span>\n<span class=\"kd\">def</span> <span class=\"n\">compare</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">HandT</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n <span class=\"n\">h1</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">h2</span> <span class=\"c1\">-- Not decidable</span>\n<span class=\"k\">#eval</span> <span class=\"n\">HandT.Five</span> <span class=\"bp\">≤</span> <span class=\"n\">HandT.Three</span>\n</code></pre></div>",
        "id": 406561039,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1701961211
    },
    {
        "content": "<p>I understand, thank you very much!</p>",
        "id": 406563615,
        "sender_full_name": "Gaëtan Serré",
        "timestamp": 1701961974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"635099\">Gaëtan Serré</span> has marked this topic as resolved.</p>",
        "id": 406563629,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701961978
    }
]