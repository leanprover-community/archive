[
    {
        "content": "<p>I am trying to describe a data structure similar to a binary decision diagram, but for representing Boolean expressions in algebraic normal form:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- ANF: algebraic normal form (a fully expanded sum-of-products polynomial)</span>\n<span class=\"c1\">-- basically a binary tree, where the V (variable) is ANDed to the HI branch,</span>\n<span class=\"c1\">-- and the result is XORed to the LO branch.</span>\n<span class=\"c1\">-- I (looks like a 1) represents \"true\"</span>\n<span class=\"c1\">-- O (looks like a 0) represents \"false\"</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ANF</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span>\n<span class=\"bp\">|</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span>\n<span class=\"bp\">|</span> <span class=\"n\">vhl</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lo</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">anf_not</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ANF</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ANF.I</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ANF.O</span>\n<span class=\"bp\">|</span> <span class=\"n\">ANF.O</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ANF.I</span>\n<span class=\"bp\">|</span> <span class=\"n\">ANF.vhl</span> <span class=\"n\">v</span> <span class=\"n\">hi</span> <span class=\"n\">lo</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ANF.vhl</span> <span class=\"n\">v</span> <span class=\"n\">hi</span> <span class=\"o\">(</span><span class=\"n\">anf_not</span> <span class=\"n\">lo</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">anf_xor</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ANF</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">:</span> <span class=\"n\">ANF</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ANF</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ANF.O</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">ANF.I</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">anf_not</span> <span class=\"n\">y</span>\n<span class=\"bp\">|</span> <span class=\"n\">ANF.vhl</span> <span class=\"n\">v1</span> <span class=\"n\">hi1</span> <span class=\"n\">lo1</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">match</span> <span class=\"n\">y</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ANF.O</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ANF.I</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">anf_not</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ANF.vhl</span> <span class=\"n\">v2</span> <span class=\"n\">hi2</span> <span class=\"n\">lo2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"c1\">-- construct a new node with the larger number on top</span>\n    <span class=\"k\">if</span> <span class=\"n\">v1</span> <span class=\"bp\">&gt;</span> <span class=\"n\">v2</span>  <span class=\"c1\">-- &lt;- type mismatch nat+ vs nat+1</span>\n    <span class=\"k\">then</span>  <span class=\"n\">ANF.O</span> <span class=\"c1\">-- just a placeholder expression</span>\n    <span class=\"k\">else</span> <span class=\"n\">ANF.I</span> <span class=\"c1\">-- just placeholder expression</span>\n</code></pre></div>\n<p>The full error I get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">v2</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">nat</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">nat</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I am aware that there is a concept called universes, but I'm surprised that I'm running into them right off the bat like this, and I have no idea what to do to fix it. Can someone help me understand what's going on here, and what to do instead?</p>",
        "id": 399574114,
        "sender_full_name": "Michal Wallace (tangentstorm)",
        "timestamp": 1698774854
    },
    {
        "content": "<p>Capitalize <code>nat</code></p>",
        "id": 399574581,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698775036
    },
    {
        "content": "<p>well... that did the trick. But why?</p>",
        "id": 399575205,
        "sender_full_name": "Michal Wallace (tangentstorm)",
        "timestamp": 1698775267
    },
    {
        "content": "<p>oh... i see... if it's lowercase, it's just a variable. Thanks, <span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> !</p>",
        "id": 399575474,
        "sender_full_name": "Michal Wallace (tangentstorm)",
        "timestamp": 1698775337
    },
    {
        "content": "<p>Lean doesn't know what <code>nat</code> is and tries to <a href=\"https://lean-lang.org/lean4/doc/autobound.html?highlight=implici#auto-bound-implicit-arguments\">make something up for it</a>.</p>",
        "id": 399575528,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698775354
    },
    {
        "content": "<p><code>set_option autoImplicit false</code> will make it error instead</p>",
        "id": 399575740,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698775425
    },
    {
        "content": "<p>And tell you the underlying issue is that <code>nat</code> is not defined</p>",
        "id": 399575921,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1698775495
    }
]