[
    {
        "content": "<p>Hi, I believe to have found an issue with eta-expansion of \"unit-like\" types. In particular, it isn't transitive in certain cases such as this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n    <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">⟨()⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails :(</span>\n</code></pre></div>\n<p>The issue seems to be that the <a href=\"https://github.com/leanprover/lean4/blob/18d6bce7a98d9f0fd1fc1262aff0bf53aaea774c/src/kernel/type_checker.cpp#L988\"><code>is_def_eq_unit_like</code></a> function checks only for inductive types with one constructor and no fields to the constructor, where it should check for inductives with one constructor for which all fields are themselves unit-like  . Should I open an issue ?</p>\n<p>On another note, perhaps it would be nice/desirable for eta-expansion to also apply to empty types, such that examples like these would work as well ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Bad</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Bad</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 363779269,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1685982230
    },
    {
        "content": "<p>Just to spell this out explicitly, Arthur's example is a new (to me) example of failure of transitivity of <code>rfl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n    <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">@[reducible]</span> <span class=\"kd\">def</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨()⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">q</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"n\">opaque</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 363790414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685984967
    },
    {
        "content": "<p>This is not intentional, but not a big priority either unless it breaks something actually important.  I'd file it as a bug.</p>",
        "id": 363797038,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685986622
    },
    {
        "content": "<p>It seems like eta-expansion fails to trigger in in more than one scenario, and not only for structures, but functions as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">())</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--fails</span>\n</code></pre></div>\n<p>I'll open an issue then. thanks for the input <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 363797717,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1685986776
    },
    {
        "content": "<p>Is eta enabled globally now? I thought it was partly disabled due to performance issues.</p>",
        "id": 363807459,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1685989332
    },
    {
        "content": "<p>Maybe I'm just thinking about eta for structures?</p>",
        "id": 363807629,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1685989382
    },
    {
        "content": "<p>Eta is globally enabled for functions and structures, there's no option to turn it off AFAIK</p>",
        "id": 363809278,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1685989854
    },
    {
        "content": "<p>The only thing that was ever disabled was eta for structures (aka one-constructor inductives) <em>during typeclass search</em></p>",
        "id": 363838263,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685998468
    },
    {
        "content": "<p>But that's now enabled too</p>",
        "id": 363838283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685998477
    }
]