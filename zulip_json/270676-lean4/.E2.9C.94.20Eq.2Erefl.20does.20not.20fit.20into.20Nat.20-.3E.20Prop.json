[
    {
        "content": "<p>Why does <code>Eq.refl</code> not pass the <code>isDefEq</code> check against <code>Nat -&gt; Prop</code>? Specifically, suppose <code>e1</code> is the <code>Nat -&gt; Prop</code> expression type and <code>e2</code> is <code>Eq.refl</code>, then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">←</span> <span class=\"n\">Meta.isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.inferType</span> <span class=\"n\">e2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>returns false.</p>",
        "id": 398971919,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698442882
    },
    {
        "content": "<p><code>Eq.refl {α := Nat}</code> does not pass this typecheck either</p>",
        "id": 398971979,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698442920
    },
    {
        "content": "<p><code>Eq.refl {α := Nat}</code> has type <code>forall n, n = n</code>, not <code>Nat -&gt; Prop</code>.</p>",
        "id": 398972130,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698443035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/Eq.2Erefl.20does.20not.20fit.20into.20Nat.20-.3E.20Prop/near/398972130\">said</a>:</p>\n<blockquote>\n<p><code>Eq.refl {α := Nat}</code> has type <code>forall n, n = n</code>, not <code>Nat -&gt; Prop</code>.</p>\n</blockquote>\n<p>Is there a way to convert between the two?</p>",
        "id": 398972377,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698443203
    },
    {
        "content": "<p>No, they're different concepts. <code>n = n</code> has type <code>Prop</code>, but it is not <code>Prop</code>. (This is a common confusion.)</p>",
        "id": 398972536,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1698443299
    },
    {
        "content": "<p>If you convert <code>forall n, n = n</code> to its type family <code>fun n, n = n</code> and then take the type of <em>that</em>, you do get <code>Nat -&gt; Prop</code> at least.</p>",
        "id": 398973279,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698443724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 398975058,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698444874
    }
]