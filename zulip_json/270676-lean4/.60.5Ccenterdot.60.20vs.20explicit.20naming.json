[
    {
        "content": "<p>I'm running into an issue where I'm able to get something to compile by using an explicit name for an argument to a lambda function, but not when I'm using the <code>\\centerdot</code>notation. I've narrowed it down (I think) to being an issue when I have a lambda function after a <code>bind</code>. Here's a minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ExHelper</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">H1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">H2</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ExType</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ExHelper</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ExHelperFun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ExHelper</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ExHelper</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ExFun</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ExType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ExType</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">C1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ExHelperFun</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ExFunWrong</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ExType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ExType</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">C1</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ExHelperFun</span> <span class=\"n\">i</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">C2</span> <span class=\"o\">(</span><span class=\"bp\">·</span><span class=\"o\">)))</span> <span class=\"c1\">-- doesn't work</span>\n\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   ExHelperFun i &gt;&gt;= some ?m.100442</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   some ?m.100442</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   Option ?m.100440 : Type ?u.100439</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   ExHelper → Option ExType : Type</span>\n</code></pre></div>\n<p>the error message type inference doesn't really make sense to me. Am I missing something? Thanks!</p>",
        "id": 386472573,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692650550
    },
    {
        "content": "<p>Center dot notation only works when there's a single level of parentheses. One trick you can do is to write <code>(.some &lt;| .C2 ·)</code>, since the <code>&lt;|</code> doesn't count as parentheses.</p>",
        "id": 386475427,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692651938
    },
    {
        "content": "<p><code>(.some (.C2 (·)))</code> means <code>(.some (.C2 (fun x =&gt; x)))</code></p>",
        "id": 386475552,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1692651981
    },
    {
        "content": "<p>ooh that makes more sense. Thank you :)</p>",
        "id": 386477420,
        "sender_full_name": "Bhakti Shah",
        "timestamp": 1692652921
    }
]