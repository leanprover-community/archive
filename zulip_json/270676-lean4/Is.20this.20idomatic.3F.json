[
    {
        "content": "<p>I have some questions about the code below. This is code I'm writing for use in a handson session to introduce software engineers to Lean. I'm aiming for a piece that shows the power of lean in a clear way, not necessarily the most golfed version.</p>\n<ul>\n<li>In checkValid, is there a way to do without the \"have prop\" lines? Messing with the structure like this feels weird.</li>\n<li>In checkValid, is there a way to do without the \"unreachable .none\"? Ideally I would just match on tx.kind and have two branches.</li>\n<li>Is there some way I can derive Repr  for Valid?</li>\n<li>Any other pointers? (I guess sumWithdraws/sumDeposits could be improved, but I'm tempted to leave it as is, because then \"write a sumDeposits\" function is a good exercise to include)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TransactionKind</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">deposit</span> <span class=\"o\">:</span> <span class=\"n\">TransactionKind</span>\n  <span class=\"bp\">|</span> <span class=\"n\">withdraw</span> <span class=\"o\">:</span> <span class=\"n\">TransactionKind</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Transaction</span> <span class=\"n\">where</span>\n  <span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">kind</span> <span class=\"o\">:</span> <span class=\"n\">TransactionKind</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TransactionHistory</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Transaction</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">balance</span> <span class=\"o\">(</span><span class=\"n\">hist</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">hist</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">tx</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">tx.kind</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"bp\">+</span> <span class=\"n\">tx.amount</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"bp\">-</span> <span class=\"n\">tx.amount</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Valid</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">afterDeposit</span>   <span class=\"o\">(</span><span class=\"n\">validity</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                   <span class=\"n\">Valid</span> <span class=\"o\">(⟨</span> <span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">afterWithdraw</span>  <span class=\"o\">(</span><span class=\"n\">validity</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">sufficientBalance</span> <span class=\"o\">:</span> <span class=\"n\">amount</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                   <span class=\"n\">Valid</span> <span class=\"o\">(⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sumWithdraws</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tx</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">tx.kind</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sumWithdraws</span> <span class=\"n\">txs</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tx.amount</span> <span class=\"bp\">+</span> <span class=\"n\">sumWithdraws</span> <span class=\"n\">txs</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sumDeposits</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tx</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">tx.kind</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tx.amount</span> <span class=\"bp\">+</span> <span class=\"n\">sumDeposits</span> <span class=\"n\">txs</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sumDeposits</span> <span class=\"n\">txs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">balanceCorrect</span> <span class=\"o\">(</span><span class=\"n\">validHistory</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"bp\">+</span> <span class=\"n\">sumWithdraws</span> <span class=\"n\">txs</span> <span class=\"bp\">=</span> <span class=\"n\">sumDeposits</span> <span class=\"n\">txs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">validHistory</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterDeposit</span> <span class=\"n\">validity</span> <span class=\"n\">amount</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp_arith</span>\n    <span class=\"n\">apply</span> <span class=\"n\">balanceCorrect</span> <span class=\"n\">validity</span>\n  <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">validity</span> <span class=\"n\">amount</span> <span class=\"n\">sufficientBalance</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">simp_arith</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">sufficientBalance</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">balanceCorrect</span> <span class=\"n\">validity</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkValid</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">txs</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tx</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">tx.kind</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span> <span class=\"k\">then</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">prevValid</span> <span class=\"bp\">←</span> <span class=\"n\">checkValid</span> <span class=\"n\">txs</span>\n        <span class=\"k\">have</span> <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">tx</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"n\">tx.amount</span><span class=\"o\">,</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"bp\">▸</span> <span class=\"bp\">.</span><span class=\"n\">afterDeposit</span> <span class=\"n\">prevValid</span> <span class=\"n\">tx.amount</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">if</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">tx.kind</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span> <span class=\"k\">then</span>\n        <span class=\"k\">if</span> <span class=\"n\">sufficientBalance</span> <span class=\"o\">:</span> <span class=\"n\">tx.amount</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"k\">then</span>\n          <span class=\"k\">do</span>\n            <span class=\"k\">let</span> <span class=\"n\">prevValid</span> <span class=\"bp\">←</span> <span class=\"n\">checkValid</span> <span class=\"n\">txs</span>\n            <span class=\"k\">have</span> <span class=\"n\">prop</span> <span class=\"o\">:</span> <span class=\"n\">tx</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">amount</span> <span class=\"o\">:=</span> <span class=\"n\">tx.amount</span><span class=\"o\">,</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n              <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h1</span><span class=\"o\">]</span>\n            <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">prop</span> <span class=\"bp\">▸</span> <span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">prevValid</span> <span class=\"n\">tx.amount</span> <span class=\"n\">sufficientBalance</span><span class=\"o\">)</span>\n        <span class=\"k\">else</span>\n          <span class=\"bp\">.</span><span class=\"n\">none</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">.</span><span class=\"n\">none</span>\n</code></pre></div>",
        "id": 384672000,
        "sender_full_name": "Pim Otte",
        "timestamp": 1691996852
    },
    {
        "content": "<p>You can simplify things by matching on the <code>Transaction</code>s and their kind directly.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">TransactionKind</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">deposit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">withdraw</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Transaction</span> <span class=\"n\">where</span>\n  <span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">kind</span> <span class=\"o\">:</span> <span class=\"n\">TransactionKind</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">TransactionHistory</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Transaction</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">balance</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>                         <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"bp\">+</span> <span class=\"n\">amount</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"bp\">-</span> <span class=\"n\">amount</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Valid</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">afterDeposit</span>   <span class=\"o\">(</span><span class=\"n\">validity</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                   <span class=\"n\">Valid</span> <span class=\"o\">(⟨</span> <span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">afterWithdraw</span>  <span class=\"o\">(</span><span class=\"n\">validity</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">amount</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n                   <span class=\"o\">(</span><span class=\"n\">sufficientBalance</span> <span class=\"o\">:</span> <span class=\"n\">amount</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n                   <span class=\"n\">Valid</span> <span class=\"o\">(⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sumWithdraws</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>                         <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span>       <span class=\"bp\">=&gt;</span> <span class=\"n\">sumWithdraws</span> <span class=\"n\">txs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">amount</span> <span class=\"bp\">+</span> <span class=\"n\">sumWithdraws</span> <span class=\"n\">txs</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">sumDeposits</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>                        <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">amount</span> <span class=\"bp\">+</span> <span class=\"n\">sumDeposits</span> <span class=\"n\">txs</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">sumDeposits</span> <span class=\"n\">txs</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">balanceCorrect</span> <span class=\"o\">:</span> <span class=\"n\">Valid</span> <span class=\"n\">txs</span> <span class=\"bp\">→</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"bp\">+</span> <span class=\"n\">sumWithdraws</span> <span class=\"n\">txs</span> <span class=\"bp\">=</span> <span class=\"n\">sumDeposits</span> <span class=\"n\">txs</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">empty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterDeposit</span> <span class=\"n\">validity</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_arith</span>\n    <span class=\"n\">apply</span> <span class=\"n\">balanceCorrect</span> <span class=\"n\">validity</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">validity</span> <span class=\"n\">_</span> <span class=\"n\">sufficientBalance</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp_arith</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">Nat.sub_add_cancel</span> <span class=\"n\">sufficientBalance</span><span class=\"o\">]</span>\n    <span class=\"n\">apply</span> <span class=\"n\">balanceCorrect</span> <span class=\"n\">validity</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">checkValid</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">txs</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">prevValid</span> <span class=\"bp\">←</span> <span class=\"n\">checkValid</span> <span class=\"n\">txs</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">afterDeposit</span> <span class=\"n\">prevValid</span> <span class=\"n\">amount</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">sufficientBalance</span> <span class=\"o\">:</span> <span class=\"n\">amount</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"k\">then</span>\n        <span class=\"k\">let</span> <span class=\"n\">prevValid</span> <span class=\"bp\">←</span> <span class=\"n\">checkValid</span> <span class=\"n\">txs</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">prevValid</span> <span class=\"n\">amount</span> <span class=\"n\">sufficientBalance</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">none</span>\n</code></pre></div>",
        "id": 384681357,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1691999417
    },
    {
        "content": "<p>Also, I wasn't aware that one could use <code>@[simp]</code> on non-theorem definitions, so I'm not sure if that's idiomatic.</p>",
        "id": 384682422,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1691999698
    },
    {
        "content": "<p>Ah, yes, that makes sense, thanks!</p>",
        "id": 384683275,
        "sender_full_name": "Pim Otte",
        "timestamp": 1691999908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20this.20idomatic.3F/near/384682422\">said</a>:</p>\n<blockquote>\n<p>Also, I wasn't aware that one could use <code>@[simp]</code> on non-theorem definitions, so I'm not sure if that's idiomatic.</p>\n</blockquote>\n<p>I wouldn't say <code>@[simp] def</code> is unidiomatic, e.g. <a href=\"https://github.com/leanprover/std4/blob/main/Std/Data/Option/Basic.lean\">https://github.com/leanprover/std4/blob/main/Std/Data/Option/Basic.lean</a> has several <code>@[simp] def</code>s. What it does AFAIK is it generates equational lemmas corresponding to the function definition which can then be used by <code>simp</code>.</p>",
        "id": 384700544,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1692003767
    },
    {
        "content": "<p>The equational lemmas are always generated. This is what lets you do <code>rw [my_def]</code>. What changes is whether the equational lemmas are tagged <code>@[simp]</code>.</p>",
        "id": 384701092,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1692003898
    },
    {
        "content": "<p>How can I see them without <code>@[simp]</code>? With <code>@[simp]</code> I can do </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f._eq_2</span>\n</code></pre></div>\n<p>but <code>f._eq_2</code> is unknown otherwise</p>",
        "id": 384702302,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1692004167
    },
    {
        "content": "<p>My recalling about this was based on <a href=\"#narrow/stream/270676-lean4/topic/Equational.20Lemmas\">this thread</a></p>",
        "id": 384703154,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1692004350
    },
    {
        "content": "<p>Try <code>whatsnew in def f : ...</code> (needs a mathlib import) to see what declarations are generated by a definition.</p>",
        "id": 384704359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692004620
    },
    {
        "content": "<blockquote>\n<p>Is this idiomatic?</p>\n</blockquote>\n<p>It's probably more idiomatic  to have <code>Valid : TransactionHistory → Prop</code> and then prove <code>Decidable (Valid txs)</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">decValid</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">txs</span> <span class=\"o\">:</span> <span class=\"n\">TransactionHistory</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">Valid</span> <span class=\"n\">txs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"bp\">.</span><span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">deposit</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">decValid</span> <span class=\"n\">txs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">prevValid</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">afterDeposit</span> <span class=\"n\">prevValid</span> <span class=\"n\">amount</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">prevValid'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterDeposit</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">prevValid'</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">amount</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">withdraw</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"n\">txs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">decValid</span> <span class=\"n\">txs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">prevValid</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">sufficientBalance</span> <span class=\"o\">:</span> <span class=\"n\">amount</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">balance</span> <span class=\"n\">txs</span> <span class=\"k\">then</span>\n        <span class=\"n\">isTrue</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">prevValid</span> <span class=\"n\">amount</span> <span class=\"n\">sufficientBalance</span><span class=\"o\">)</span>\n      <span class=\"k\">else</span>\n        <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">sb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sufficientBalance</span> <span class=\"n\">sb</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">prevValid'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">afterWithdraw</span> <span class=\"n\">v</span> <span class=\"n\">a</span> <span class=\"n\">sb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">prevValid'</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 384705637,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1692004871
    },
    {
        "content": "<p>Ah, yeah, that looks very clean. Thanks!</p>",
        "id": 384718396,
        "sender_full_name": "Pim Otte",
        "timestamp": 1692007482
    }
]