[
    {
        "content": "<p>Pre and post simp theorems are applied only until first match. By that I mean if simp rewrites an expression E to E' at pre/post step, simp does not try to apply pre/post theorems to E' but instead jumps into sub-expressions.</p>\n<p>This lead to this surprising behavior: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_simp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">↓</span><span class=\"n\">foo_simp</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- does not work</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">↓</span><span class=\"n\">foo_simp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>My application: I know my simp lemmas can eliminate <code>foo</code> in a single pass. I really want to achieve that as I'm working with rather large expressions and case like this tripped me over.</p>\n<p>I have modified tracing a bit to show pre and post stages and the trace for:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">↓</span><span class=\"n\">foo_simp</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">foo_simp</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">foo</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">post</span> <span class=\"n\">on</span> <span class=\"n\">foo</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">x</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">post</span> <span class=\"n\">on</span> <span class=\"n\">x</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>In constrast, in the working example the trace is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">foo_simp</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">f</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">post</span> <span class=\"n\">on</span> <span class=\"n\">f</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp.rewrite</span><span class=\"o\">]</span> <span class=\"n\">foo_simp</span><span class=\"o\">:</span><span class=\"mi\">1000</span><span class=\"o\">,</span> <span class=\"n\">foo</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">==&gt;</span> <span class=\"n\">f</span> <span class=\"n\">c</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">pre</span> <span class=\"n\">on</span> <span class=\"n\">c</span>\n<span class=\"o\">[</span><span class=\"n\">Meta.Tactic.simp</span><span class=\"o\">]</span> <span class=\"n\">Running</span> <span class=\"n\">post</span> <span class=\"n\">on</span> <span class=\"n\">c</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<hr>\n<p>I can fix this by writing my own variant of <code>Lean.Meta.Tactic.Simp.rewritePre</code> and passing it as a custom pre method. Is the current behavior desirable?</p>",
        "id": 283131736,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1653084118
    },
    {
        "content": "<p>Not sure if this is helpful coming so late, but to me the difference between the two cases is that the non-working example requires you to rewrite the same node in the expression tree multiple times, while the working example only rewrites the root once, then a child expression once.  I am curious about the logging code you used to debug simp though :)</p>",
        "id": 354595771,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1682820769
    },
    {
        "content": "<p>Have a look at how <code>norm_num</code> is implemented in mathlib. It calls the simplifier with custom pre/post methods, look at this <a href=\"https://github.com/leanprover-community/mathlib4/blob/385ed76c7eeb31e4f8db084119054c883b4e1c19/Mathlib/Tactic/NormNum/Core.lean#L705\">line</a></p>",
        "id": 354633725,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1682843978
    }
]