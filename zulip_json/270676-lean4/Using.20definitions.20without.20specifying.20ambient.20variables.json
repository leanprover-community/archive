[
    {
        "content": "<p>Consider the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">c</span>\n  <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Here I have introduced some ambient variables <code>a</code>, <code>b</code>, and defined a new quantity <code>c</code> in terms of these ambient variables.  However, as the example shows, if I want to actually use this new quantity, I have to specify the implicit input variables used to define <code>c</code>.  Is there a way to avoid doing this and just refer to a defined quantity like <code>c</code> without specifying inputs?  Changing <code>variable (a b : ℝ)</code> to <code>variable {a b : ℝ}</code> doesn't work because Lean cannot fill in the holes when working with <code>c</code>.</p>\n<p>In my actual application I have many more variables:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">ProbabilityTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddCommGroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ElementaryAddCommGroup</span> <span class=\"n\">G</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω₀₁</span> <span class=\"bp\">Ω₀₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω₀₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω₀₂</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ref_package</span> <span class=\"bp\">Ω₀₁</span> <span class=\"bp\">Ω₀₂</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"bp\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">MeasurableSpace</span> <span class=\"bp\">Ω</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"bp\">Ω</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">X₁</span> <span class=\"n\">X₂</span> <span class=\"n\">X₁'</span> <span class=\"n\">X₂'</span> <span class=\"o\">:</span> <span class=\"bp\">Ω</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">IdentDistrib</span> <span class=\"n\">X₁</span> <span class=\"n\">X₁'</span> <span class=\"n\">μ</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">IdentDistrib</span> <span class=\"n\">X₂</span> <span class=\"n\">X₂'</span> <span class=\"n\">μ</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h_indep</span> <span class=\"o\">:</span> <span class=\"n\">iIndepFun</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">hG</span><span class=\"o\">,</span> <span class=\"n\">hG</span><span class=\"o\">]</span> <span class=\"bp\">!</span><span class=\"o\">[</span><span class=\"n\">X₁</span><span class=\"o\">,</span> <span class=\"n\">X₂</span><span class=\"o\">,</span> <span class=\"n\">X₁'</span><span class=\"o\">,</span> <span class=\"n\">X₂'</span><span class=\"o\">]</span> <span class=\"n\">μ</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">h_min</span><span class=\"o\">:</span> <span class=\"n\">tau_minimizes</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ.map</span> <span class=\"n\">X₂</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">d</span><span class=\"o\">[</span> <span class=\"n\">X₁</span><span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"bp\">#</span> <span class=\"n\">X₂</span><span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"o\">]</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">I₁</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"o\">[</span> <span class=\"n\">X₁</span> <span class=\"bp\">+</span> <span class=\"n\">X₂</span> <span class=\"o\">:</span> <span class=\"n\">X₁'</span> <span class=\"bp\">+</span> <span class=\"n\">X₂</span> <span class=\"bp\">|</span> <span class=\"n\">X₁</span> <span class=\"bp\">+</span> <span class=\"n\">X₂</span> <span class=\"bp\">+</span> <span class=\"n\">X₁'</span> <span class=\"bp\">+</span> <span class=\"n\">X₂'</span> <span class=\"bp\">;</span> <span class=\"n\">μ</span> <span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">first_estimate</span> <span class=\"o\">:</span> <span class=\"n\">I₁</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">η</span> <span class=\"bp\">*</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- doesn't work because one needs to specify inputs to k, I₁</span>\n</code></pre></div>\n<p>but as it stands I cannot actually use the defined quantities <code>k</code>and <code>I₁</code> without explicitly specifying a lot of the input variables, which would clutter up the arguments enormously.</p>",
        "id": 402910585,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700338867
    },
    {
        "content": "<p>There's a trick mathlib uses, which is to define a local notation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">ring</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(I'm using mathlib's <code>notation3</code> here instead of core Lean's <code>notation</code> because there seems to be a small bug in Lean itself that I'll look into. In any case, <code>notation3</code> is able to pretty print <code>a + b</code> as <code>c</code>, but <code>notation</code> wouldn't have.)</p>",
        "id": 402911676,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700339656
    },
    {
        "content": "<p>That works, thanks!</p>",
        "id": 402911820,
        "sender_full_name": "Terence Tao",
        "timestamp": 1700339774
    },
    {
        "content": "<p>Hi, I have a similar situation as the above. My declared variables are actually global hypothesis (that are to appear in the main theorem afterwards). </p>\n<p>The problem is that I have several lemmas and function definitions (each having other arguments), and my goal is the same as above: Not needing to insert those hypothesis as arguments every time. </p>\n<p>Trying to reuse Terence's MWE, I would like to have a more complex <code>c</code> that takes arguments:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  0</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ℝ : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ℝ → ℝ → ℝ : Type</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I could not make <code>notation</code> nor <code>notation3</code> with the new argument <code>x</code>.</p>",
        "id": 408357833,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1702743758
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"c'\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">c'</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>or [edit: fixed, sorry]</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"n\">notation3</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 408358289,
        "sender_full_name": "Richard Copley",
        "timestamp": 1702744311
    },
    {
        "content": "<p>Thanks! It seems my mistake was trying to add the type signature to the <code>notation3</code> declaration <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 408358952,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1702744946
    }
]