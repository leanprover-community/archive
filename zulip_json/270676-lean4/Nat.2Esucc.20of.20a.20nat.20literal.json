[
    {
        "content": "<p>Is it possible to write a theorem <code>foo</code> such that <code>foo 37 a</code> is syntactically <code>38 ≤ a ∨ a ≤ 37</code>?   (For all values of 37.). I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">a.succ</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">OfNat.ofNat</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_or_ge</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>but although this is the result I wanted up to defeq, it isn't actually the result I wanted.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"mi\">37</span> <span class=\"n\">a</span> <span class=\"c1\">-- infoview shows `OfNat.ofNat (Nat.succ 37) ≤ a ∨ a ≤ OfNat.ofNat 37`</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">37</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"c1\">-- infoview shows `OfNat.ofNat (Nat.succ 37) ≤ a ∨ a ≤ 37`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 369551057,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687752524
    },
    {
        "content": "<p>Also, same question but for <code>(a : Nat) (b : Int)</code>,</p>",
        "id": 369551726,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687752934
    },
    {
        "content": "<p>is it allowed to be a custom macro that just looks like a theorem? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 369552076,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687753131
    },
    {
        "content": "<p>Sure, do tell! :)</p>",
        "id": 369552270,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687753252
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">num</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.quote</span> <span class=\"o\">(</span><span class=\"n\">n.getNat</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"k\">from</span> <span class=\"n\">Nat.lt_or_ge</span> <span class=\"bp\">..</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"mi\">37</span> <span class=\"n\">a</span> <span class=\"c1\">-- infoview shows `this: 38 ≤ a ∨ a ≤ 37`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 369552570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687753431
    },
    {
        "content": "<p>That's pretty cool.  Thanks!</p>",
        "id": 369552709,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1687753492
    }
]