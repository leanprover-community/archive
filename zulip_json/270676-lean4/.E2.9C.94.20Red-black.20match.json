[
    {
        "content": "<p>I defined a red-black tree balancing function verbatim as in Okasaki's <a href=\"https://www.cs.tufts.edu/comp/150FP/archive/chris-okasaki/redblack99.pdf\">paper</a>, and I am unable to prove that it reduces. I am finding that it does not follow by <code>rfl</code>, and even <code>simp</code> can't see through the <code>match</code>! What am I missing?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">RBColor</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">red</span> <span class=\"bp\">|</span> <span class=\"n\">black</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">RBTree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">color</span> <span class=\"o\">:</span> <span class=\"n\">RBColor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RBTree.balance</span> <span class=\"o\">:</span> <span class=\"n\">RBColor</span> <span class=\"bp\">→</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">black</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">black</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">),</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">d</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">black</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">black</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">color</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">color</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">RBTree</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">balance</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"n\">d</span> <span class=\"bp\">=</span>\n  <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">balance</span><span class=\"o\">]</span> <span class=\"c1\">-- doesn't unfold match</span>\n    <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 326962830,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676001138
    },
    {
        "content": "<p>huh, even <code>unfold balance.match_1</code> isn't doing much <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 326963310,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676001592
    },
    {
        "content": "<p>It might just be because it's not a match with exactly one case per constructor? are there other examples of simplifying through these nontrivial matches?</p>",
        "id": 326963626,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676001811
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RBTree.balance</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">RBColor</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RBTree</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">black</span><span class=\"o\">,</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">color</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">node</span> <span class=\"n\">color</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>even with this definition it does not reduce through the match. seems like a use case not yet covered.</p>",
        "id": 326964278,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676002466
    },
    {
        "content": "<p>oh wait, I think it actually works fine -- the issue here is that the parameters to balance you're matching on could still match the first branch (not the second, which is what it seems like you're going for)</p>",
        "id": 326979424,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676013646
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">balance_black_node_red_node_red</span> <span class=\"o\">:</span>\n  <span class=\"n\">balance</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">balance</span><span class=\"o\">]</span>\n  <span class=\"n\">next</span> <span class=\"n\">color</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">color</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>becomes unprovable. but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">balance_black_node_red_node_red</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">a'</span> <span class=\"n\">x'</span> <span class=\"n\">b'</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a'</span> <span class=\"n\">x'</span> <span class=\"n\">b'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">balance</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"n\">b</span> <span class=\"n\">y</span> <span class=\"n\">c</span><span class=\"o\">))</span> <span class=\"n\">z</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">red</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"bp\">.</span><span class=\"n\">black</span> <span class=\"n\">c</span> <span class=\"n\">z</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">balance</span><span class=\"o\">]</span>\n  <span class=\"n\">next</span> <span class=\"n\">color</span> <span class=\"n\">l</span> <span class=\"n\">a</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">color</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>is good :)</p>",
        "id": 326980252,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676014055
    },
    {
        "content": "<p>Just a guess but try to avoid overlapping patterns (i.e. your last catch-all pattern). Lean probably doesn't generate (useful) equation lemmas for these.</p>",
        "id": 327012692,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1676024931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Red-black.20match/near/326979424\">said</a>:</p>\n<blockquote>\n<p>oh wait, I think it actually works fine -- the issue here is that the parameters to balance you're matching on could still match the first branch (not the second, which is what it seems like you're going for)</p>\n</blockquote>\n<p>Ah, you're right. The pattern-match is only correct if you assume the input only \"slightly\" violates the red-black tree invariant that red nodes can't have red parents in that only one of the branches has a red-red sequence, and that's what the hypothesis <code>h</code> expresses. It's also probably why the function is split into two <a href=\"https://github.com/leanprover/lean4/blob/85119ba9d1035e169a6d8718627314a096c19a29/src/Lean/Data/RBMap.lean#L80\">in Lean core</a>.</p>",
        "id": 327108241,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676050433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> has marked this topic as resolved.</p>",
        "id": 327108357,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676050457
    },
    {
        "content": "<p>Wait no even that's not true, the standard implementation also uses <a href=\"https://github.com/leanprover/std4/blob/de7e2a79905a3f87cad1ad5bf57045206f9738c7/Std/Data/RBMap/Basic.lean#L216\">an overlapping pattern</a>. The proofs about it then <a href=\"https://github.com/leanprover/std4/blob/de7e2a79905a3f87cad1ad5bf57045206f9738c7/Std/Data/RBMap/WF.lean#L154\">reason</a> about particular cases using assumptions on color sequences.</p>",
        "id": 327112691,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676051687
    }
]