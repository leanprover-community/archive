[
    {
        "content": "<p>Consider:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ns</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span> <span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">@[appUnexpander Foo.mk]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpadFoo</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unexpand</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.mk</span> <span class=\"k\">#print</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">@[appUnexpander ns.Foo.mk]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpadFoo'</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">unexpand</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">ns.Foo.mk</span> <span class=\"k\">#print</span> <span class=\"n\">bar</span>\n<span class=\"kd\">end</span> <span class=\"n\">ns</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">def ns.foo : Foo :=</span>\n<span class=\"cm\">Foo.mk</span>\n<span class=\"cm\">def bar : ns.Foo :=</span>\n<span class=\"cm\">unexpand✝</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I would expect <code>ns.foo</code> to also print <code>unexpand✝</code>, but it does not. I guess this is because I declare the delaborator as <code>Foo.mk</code> and not <code>ns.Foo.mk</code>.  Is needing to name the delaborator with the \"full path\" (<code>ns.Foo.mk</code>) the expected behaviour? I'm trying to understand why <code>Foo.mk</code> does not suffice :)</p>",
        "id": 256876231,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633791805
    },
    {
        "content": "<p>Thanks for reporting this issue. I will push a fix soon.</p>",
        "id": 256877867,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633793428
    },
    {
        "content": "<p>Wow, this behavior was a bug?  I had just assumed needing the fully qualified name was a restriction of the attribute. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 256878001,
        "sender_full_name": "Mac",
        "timestamp": 1633793567
    },
    {
        "content": "<p>We prefer to call it unimplemented feature</p>",
        "id": 256878055,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633793639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> <br>\n<a href=\"https://github.com/leanprover/lean4/commit/fb27537b8ee686251f5e51d7daf6c467731994c3\">https://github.com/leanprover/lean4/commit/fb27537b8ee686251f5e51d7daf6c467731994c3</a></p>",
        "id": 256878146,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1633793724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> as Leo just noted, this is now fixed :)</p>",
        "id": 256878366,
        "sender_full_name": "Mac",
        "timestamp": 1633793937
    },
    {
        "content": "<p>Yep! Thanks for the super quick feature implementation :D</p>",
        "id": 256878399,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633793979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 256878404,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633793983
    },
    {
        "content": "<p>Nice, my favorite part about this feature is that <code>appUnexpander</code> now checks that the constant exists (and that you didn't make a typo).  We should also add this to <code>@[delab app....]</code> as well.</p>",
        "id": 256890861,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633805763
    },
    {
        "content": "<p>BTW, resolving this topic broke the link in Leo's commit message.</p>",
        "id": 256891940,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1633806790
    },
    {
        "content": "<p>We should probably remove the <code>evalKey</code> default to force ourselves to specify more appropriate values :) ...</p>",
        "id": 256897055,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1633811714
    }
]