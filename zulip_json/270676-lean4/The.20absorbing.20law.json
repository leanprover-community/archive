[
    {
        "content": "<p>I'm learning lean4 by mathematics in lean. In the sec 2.5 page 21, I notice that the left hand side of the second absorbing law is x \\lub x \\glb y but not x \\lub (x \\glb y). whiy these brakets can be ignored?</p>",
        "id": 368645056,
        "sender_full_name": "loooong",
        "timestamp": 1687455146
    },
    {
        "content": "<p><code>\\lub</code> and <code>\\glb</code> are notation, and the way notation works in Lean is that it has a \"binding power\". To give a familiar example: the binding power of <code>*</code> is larger than the binding power of <code>+</code>, so <code>a + b * c</code> gets parsed as <code>a + (b * c)</code>, whereas <code>a * b + c</code> gets parsed as <code>(a * b) + c</code>. To figure out why the brackets can be ignored you will need to know the binding power of <code>\\lub</code> and <code>\\glb</code>. In Lean 3 this was easily established using <code>#print notation</code> but I'm not sure what the lean 4 equivalent is. However one can still ctrl-click on the notation which takes you to the definitions of the symbols in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inherit_doc]</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">68</span> <span class=\"s2\">\" ⊔ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sup.sup</span>\n\n<span class=\"kd\">@[inherit_doc]</span>\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">69</span> <span class=\"s2\">\" ⊓ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inf.inf</span>\n</code></pre></div>\n<p>So <code>\\glb</code> has a slightly higher binding power than <code>\\lub</code> (69 &gt; 68) meaning that the brackets aren't needed.</p>",
        "id": 368650757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687456405
    },
    {
        "content": "<p>I would be interested in knowing if there is a trick to discover the binding power of the notation in Lean 4 without jumping to its definition.</p>",
        "id": 368651220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687456503
    },
    {
        "content": "<p>thank you <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> . <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 368655657,
        "sender_full_name": "loooong",
        "timestamp": 1687457569
    }
]