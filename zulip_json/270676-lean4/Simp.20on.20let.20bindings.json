[
    {
        "content": "<p>There is a bit unintuitive behavior of <code>simp</code> <br>\n on let bindings when doing only a single pass. </p>\n<p>I have a dummy identity function <code>foo</code> which I want to eliminate from an expression in a single pass of a simplifier. In case of let bindings this does not happen.</p>\n<p>I would consider this as a bug but I'm not sure.</p>\n<p>mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo_simp</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- problematic case - two `foo` are still there</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n   <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span>\n   <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">b</span>\n   <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo_simp</span><span class=\"o\">]</span>\n    <span class=\"n\">trace_state</span> <span class=\"c1\">-- foo (foo 0)</span>\n\n<span class=\"c1\">-- all `foo` are gone</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"mi\">0</span>\n   <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">a</span>\n   <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">b</span>\n   <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo_simp</span><span class=\"o\">]</span>\n    <span class=\"n\">trace_state</span> <span class=\"c1\">-- let a := 0; let b := a; let c := b; c</span>\n\n<span class=\"c1\">-- all `foo` are gone</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">lhs</span>\n    <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">})</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">foo_simp</span><span class=\"o\">]</span>\n    <span class=\"n\">trace_state</span> <span class=\"c1\">-- 0</span>\n</code></pre></div>\n<p>To fix this I propose to change this <a href=\"https://github.com/leanprover/lean4/blob/c826168cfa79d421c0723d5fbdd840595c29fe3a/src/Lean/Meta/Tactic/Simp/Main.lean#L691\">line</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">b.instantiate1</span> <span class=\"n\">v</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">b.instantiate1</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 327671735,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1676334036
    }
]