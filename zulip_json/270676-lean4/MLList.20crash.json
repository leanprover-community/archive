[
    {
        "content": "<p>In my <code>DiscrTree</code> project, I was told to use <code>MLList</code> as a list monad transformer, but when I tried this, it turned out to be terribly slow. So I decided to do a little test of its speed. But the following simple program made my lean crash:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">MetaM</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">continue</span>\n  <span class=\"n\">return</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">MLList.force</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"mi\">10000</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>telling me that<br>\n<code>Message: Server process for file:///(.......)/lake-packages/std/Std/Data/MLList/test.lean crashed, likely due to a stack overflow or a bug.\n  Code: -32902 </code><br>\nWhat's going on here?</p>",
        "id": 404755610,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701222082
    },
    {
        "content": "<p>Yeah, <code>force</code> is bad. <code>asArray</code> works fine.</p>",
        "id": 404756770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701222540
    },
    {
        "content": "<p>I replaced <code>force</code> by <code>asArray</code> and get the same error.</p>",
        "id": 404757028,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701222659
    },
    {
        "content": "<p>Strange. I get <code>#[4]</code>.</p>",
        "id": 404757322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701222798
    },
    {
        "content": "<p>Have you restarted the server?</p>",
        "id": 404757385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701222830
    },
    {
        "content": "<p>for me it works with 2000 and not with 3000</p>",
        "id": 404757386,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701222830
    },
    {
        "content": "<p>I just reloaded my VSCode, and get the same result</p>",
        "id": 404757625,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701222928
    },
    {
        "content": "<p>Yeah, okay, me too!</p>",
        "id": 404757784,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701222986
    },
    {
        "content": "<p>(As in, I was being confused by the error messages, and indeed mine also crashes at 3000, for either force or toArray.)</p>",
        "id": 404758432,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701223260
    },
    {
        "content": "<p>Looks like removing <code>@[specialize]</code> from <code>casesM</code> makes the issue go away</p>",
        "id": 404760557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701224171
    },
    {
        "content": "<p>I did this and ran the same test in the MLList/Basic.lean file, but I still get the error</p>",
        "id": 404760876,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701224324
    },
    {
        "content": "<p>Yeah, removing @[specialize] is not working for me.</p>",
        "id": 404760987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701224386
    },
    {
        "content": "<p>here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">inductive</span> <span class=\"n\">MLList</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">thunk</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"o\">(</span><span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">squash</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MLList</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">uncons</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">thunk</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">uncons</span> <span class=\"n\">t.get</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">squash</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span> <span class=\"o\">()</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">specialize</span><span class=\"kd\">]</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">casesM</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hnil</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"n\">xs.uncons</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hnil</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hcons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">cases</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hnil</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.casesM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">hnil</span> <span class=\"o\">())</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">hcons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ys</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.cases</span> <span class=\"n\">ys</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">m</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.cases</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">append</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"n\">xs</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"o\">(</span><span class=\"n\">MLList</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">nil</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">continue</span>\n  <span class=\"n\">return</span> <span class=\"mi\">4</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">IO</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"mi\">10000</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">squash</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">m</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 404762115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701224846
    },
    {
        "content": "<p>the stack overflow occurs in <code>MLList.casesM._elambda_1._at.MLList.g._spec_6</code> which looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MLList.casesM._elambda_1._at.MLList.g._spec_6</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">MLList.uncons._rarg</span> <span class=\"n\">x_3</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">pap</span> <span class=\"n\">MLList.casesM._elambda_1._at.MLList.g._spec_6._lambda_1</span> <span class=\"n\">x_1</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">app</span> <span class=\"n\">x_7</span> <span class=\"bp\">◾</span> <span class=\"bp\">◾</span> <span class=\"n\">x_8</span> <span class=\"n\">x_9</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_10</span>\n</code></pre></div>\n<p>This doesn't look recursive but I believe the <code>app</code> call at <code>x_10</code> is loading a function which is itself set up to call <code>MLList.casesM._elambda_1._at.MLList.g._spec_6</code></p>",
        "id": 404762950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701225213
    },
    {
        "content": "<p>minimized some more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.extract_closed</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">genSizeOfSpec</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">MLList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">squash</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">MLList</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">α</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Inhabited</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MLList</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">uncons</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">squash</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span> <span class=\"o\">()</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hcons</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">xs.uncons</span>\n    <span class=\"n\">return</span> <span class=\"n\">hcons</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.cases</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">loop</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MLList</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"mi\">4</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"n\">n</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Option</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">MLList</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"n\">cons</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">squash</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">m</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 404779106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701231902
    },
    {
        "content": "<p>I wish I knew a better way to do this other than by-hand evaluation, but we can work out the evaluation sequence for this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">10000</span><span class=\"o\">)</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">bind</span> <span class=\"o\">((</span><span class=\"n\">cons</span> <span class=\"o\">())</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">cases</span>\n    <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n<span class=\"bp\">·</span> <span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n</code></pre></div>\n<p>It stops here, but after pattern matching on <code>.squash m</code> and evaluating <code>m ()</code> it is run some more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n    <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">pure</span> <span class=\"n\">x</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9999</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">pure</span> <span class=\"o\">((</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n    <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9998</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n      <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9998</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n    <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n      <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9998</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n    <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">squash</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n    <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9998</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">cons</span> <span class=\"n\">x</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"o\">())</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">loop</span> <span class=\"mi\">9998</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">cons</span> <span class=\"n\">x</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">uncons</span>\n  <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>At this point the repeating pattern is clear, this will keep accumulating <code>&gt;&gt;= uncons</code> lines 10000 deep and run out of stack space</p>",
        "id": 404781719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701233441
    },
    {
        "content": "<p>which can be summarized as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">((</span><span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span>\n<span class=\"bp\">===&gt;</span>\n<span class=\"bp\">·</span> <span class=\"n\">uncons</span> <span class=\"o\">(</span><span class=\"n\">uncons</span> <span class=\"o\">((</span><span class=\"n\">loop</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">cons</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">cons</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>In other words, the MLList monad does not preserve tail-recursiveness</p>",
        "id": 404786788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701235453
    },
    {
        "content": "<p>Where does this leave us?</p>\n<ul>\n<li>MLList is just intrinsically limited (and we should put a big warning in the module doc)?</li>\n<li>Do you think we can add an extra operation inside the implementation of <code>MLList</code> that \"supports tail recursion\"...? Not really sure what that would mean.</li>\n</ul>",
        "id": 404791388,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701238323
    },
    {
        "content": "<p>I have a fix, at least it fixes the OP example</p>",
        "id": 404791518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701238429
    },
    {
        "content": "<p>I added a <code>MLList.uncons?</code> operation which returns <code>none</code> in the <code>thunk</code> and <code>squash</code> cases, and use it in <code>cases</code> and <code>bind</code> to avoid building up stacks of thunks if it's just <code>bind (pure a) ...</code></p>",
        "id": 404791701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701238486
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/407\">std#407</a></p>",
        "id": 404791993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701238665
    },
    {
        "content": "<p>I played around a bit more and found that even on a normal list monad, this makes lean crash. I really don't understand why:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">List</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">List.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">List.bind</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span>\n      <span class=\"n\">continue</span>\n  <span class=\"n\">return</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">g</span> <span class=\"mi\">10000</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 404875473,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701267426
    },
    {
        "content": "<p>Here's a more minimal example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myBind</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">Option.bind</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">Option</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">some</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">myBind</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Nat.foldM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"o\">())</span> <span class=\"o\">()</span> <span class=\"mi\">10000</span>\n</code></pre></div>\n<p>The only difference between <code>myBind</code> and the default <code>Option.bind</code> is that I have removed the <code>@[inline]</code> tag. If the <code>@[inline]</code> is present, it runs fine, but if it's not, then Lean crashes.</p>\n<p>My question is: is this stack overflow expected?</p>",
        "id": 404983560,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1701307753
    },
    {
        "content": "<p>yes, this is basically the same issue as for MLList</p>",
        "id": 405010267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701315970
    },
    {
        "content": "<p>The evaluation sequence I showed above also applies in the list case, it stacks up a bunch of <code>.. |&gt;.append [] |&gt;.append []</code> operations and so the evaluation uses up all the stack</p>",
        "id": 405010358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701315996
    },
    {
        "content": "<p>I found a way to solve this problem for List, by handling lists of length 1 separately:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myListBind</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.bind</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">List</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span> <span class=\"o\">:=</span> <span class=\"n\">List.pure</span>\n  <span class=\"n\">bind</span> <span class=\"o\">:=</span> <span class=\"n\">myListBind</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Nat.foldM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.pure</span> <span class=\"o\">())</span> <span class=\"o\">()</span> <span class=\"mi\">1000000</span>\n</code></pre></div>\n<p>Is such a fix something you would want to have in Lean?</p>",
        "id": 408897822,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1702983562
    },
    {
        "content": "<p>well, core lean doesn't even have a <code>Monad List</code> instance, so there is nothing to fix</p>",
        "id": 408909032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702985433
    }
]