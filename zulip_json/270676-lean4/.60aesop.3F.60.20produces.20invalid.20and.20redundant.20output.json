[
    {
        "content": "<p>I've ran across what looks like several bugs in aesop, occuring simultaneously.<br>\nSomewhat minimized example below (uses Lean 4.0.0-rc4 and mathlib as of this Wednesday).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.SmoothManifoldWithCorners</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Group.Measure</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">MeasureZero</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">MeasureTheory.Measure</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MeasureTheory.Measure.IsAddHaarMeasure</span> <span class=\"n\">μ</span><span class=\"o\">],</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">atlas</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">MeasureZero</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"bp\">∅</span><span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">μ</span> <span class=\"n\">_</span> <span class=\"n\">e</span> <span class=\"n\">_</span>\n  <span class=\"c1\">-- BUG: running `aesop?` here produces invalid output.</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- aesop?</span>\n</code></pre></div>\n<p>To reproduce, uncomment the commented <code>aesop?</code> call below.</p>",
        "id": 389816014,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694153113
    },
    {
        "content": "<p>The <strong>actual</strong> output I get is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rename_i</span> <span class=\"n\">inst</span> <span class=\"n\">inst_1</span> <span class=\"n\">inst_2</span> <span class=\"n\">inst_3</span> <span class=\"n\">inst_4</span> <span class=\"n\">inst_5</span> <span class=\"n\">inst_6</span> <span class=\"n\">inst_7</span> <span class=\"n\">inst_8</span> <span class=\"n\">inst_9</span> <span class=\"n\">a</span>\n  <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Function.comp_apply</span><span class=\"o\">,</span> <span class=\"n\">Set.inter_empty</span><span class=\"o\">,</span> <span class=\"n\">Set.image_empty</span><span class=\"o\">,</span> <span class=\"n\">MeasureTheory.OuterMeasure.empty'</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I <strong>expected</strong> /correct output would be<br>\n<code>simp_all only [ge_iff_le, gt_iff_lt, comp_apply, inter_empty, image_empty, OuterMeasure.empty']</code>.</p>",
        "id": 389816218,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694153187
    },
    {
        "content": "<p>I guess there are two (or three) bugs in aesop:</p>\n<ul>\n<li>the second line is indented by two spaces, it shouldn't be</li>\n<li>if the first line were longer, we'd have weird wrap-around, yielding incorrect syntax (see below)</li>\n<li>the first line is actually superfluous</li>\n</ul>",
        "id": 389816313,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694153251
    },
    {
        "content": "<p>Slightly longer variant exhibiting the second item:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.MeasureTheory.Function.Jacobian</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Geometry.Manifold.VectorBundle.SmoothSection</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Manifold</span> <span class=\"n\">MeasureTheory</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">Measure</span> <span class=\"n\">Function</span> <span class=\"n\">TopologicalSpace</span> <span class=\"n\">Set</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"c1\">-- declare a smooth manifold `M` over the pair `(E, H)`.</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- declare a smooth manifold `N` over the pair `(F, G)`.</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">J.Boundaryless</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FiniteDimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">MeasurableSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">BorelSpace</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">finrank</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">&gt;</span> <span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">J</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">MeasureZero</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">Measure</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsAddHaarMeasure</span> <span class=\"n\">μ</span><span class=\"o\">],</span> <span class=\"bp\">∀</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">atlas</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">iUnion</span> <span class=\"o\">{</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Encodable</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">Set</span> <span class=\"n\">N</span> <span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">MeasureZero</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">MeasureZero</span> <span class=\"n\">J</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>  <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">μ</span> <span class=\"n\">hμ</span> <span class=\"n\">e</span> <span class=\"n\">he</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span>  <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">J</span> <span class=\"bp\">∘</span> <span class=\"n\">e</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">e.source</span> <span class=\"bp\">∩</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"c1\">-- BUG: running `aesop?` here produces invalid output</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- aesop?</span>\n</code></pre></div>\n<p>Here, aesop?` produces the following output</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rename_i</span> <span class=\"n\">inst</span> <span class=\"n\">inst_1</span> <span class=\"n\">inst_2</span> <span class=\"n\">inst_3</span> <span class=\"n\">inst_4</span> <span class=\"n\">inst_5</span> <span class=\"n\">inst_6</span> <span class=\"n\">inst_7</span> <span class=\"n\">inst_8</span> <span class=\"n\">inst_9</span> <span class=\"n\">inst_10</span> <span class=\"n\">inst_11</span> <span class=\"n\">inst_12</span> <span class=\"n\">inst_13</span> <span class=\"n\">inst_14</span>\n      <span class=\"n\">inst_15</span> <span class=\"n\">inst_16</span> <span class=\"n\">inst_17</span>\n    <span class=\"n\">aesop_subst</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">]</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">comp_apply</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">gt_iff_lt</span><span class=\"o\">,</span> <span class=\"n\">OuterMeasure.iUnion_null_iff</span><span class=\"o\">]</span>\n    <span class=\"n\">intro</span> <span class=\"n\">i</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hs</span>\n    <span class=\"n\">simp_all</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ge_iff_le</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Changes in this variant.</p>\n<ul>\n<li>there are more instances, causing line wrap-around. (The line starting with inst_15 has four space indents; this is invalid syntax.)</li>\n<li>the aesop_subst line is also superfluous</li>\n<li>actually, the third line can just stay <code>simp_all only</code>.</li>\n</ul>",
        "id": 389816850,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694153546
    },
    {
        "content": "<p>The indentation issues are a limitation of the <code>Try this</code> widget (or maybe I'm using it wrong). Also reported at <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/Limits.20of.20Aesop.3F\">#lean4 &gt; Limits of Aesop?</a>.</p>\n<p>Removing the <code>rename_i</code> line (if possible) is on my TODO list. In general, the script produced by <code>aesop?</code> is often suboptimal (and sometimes buggy). I'm currently working on a general 'script optimisation' procedure that would take care of this stuff, but for now, you should expect to optimise the script manually.</p>",
        "id": 389929569,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694197596
    },
    {
        "content": "<p>Thanks for the fast response! I see, thanks for letting me know. (I wasn't aware of all of these.)<br>\nI look forward to seeing the script optimisation landing in aesop then :-)</p>",
        "id": 389939029,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694201811
    },
    {
        "content": "<p>Looking at the README now, I find the limitations of aesop? mentioned - though quite far down. I wonder if moving that further up would be wise.</p>",
        "id": 389939124,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694201865
    },
    {
        "content": "<p>I've added a sentence about the limitations of <code>aesop?</code> to the README, where <code>aesop?</code> is first mentioned. Thanks for the bug report! I'm very happy for people to test the script generation feature since it has seen little use so far.</p>",
        "id": 389956112,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694210780
    },
    {
        "content": "<p>Thanks so much for the fast response (also about the other issue).</p>",
        "id": 389957043,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694211308
    },
    {
        "content": "<p>And thanks for writing aesop, it's really helpful for me as a beginner to have such powerful automation available. At the moment, I use the proof script feature all the time :-)</p>",
        "id": 389957189,
        "sender_full_name": "Michael Rothgang",
        "timestamp": 1694211392
    },
    {
        "content": "<p>Nice, very happy to hear that!</p>",
        "id": 389957218,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1694211419
    }
]