[
    {
        "content": "<p>Consider the MWE inductive declaration:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Kind</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ExprKind</span> <span class=\"o\">:=</span>  <span class=\"n\">Unit</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">OpKind</span> <span class=\"o\">:</span> <span class=\"n\">Kind</span> <span class=\"bp\">→</span> <span class=\"n\">Kind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"o\">()</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">ExprKind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">ops</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">()</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">()</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">()</span> <span class=\"c1\">-- op ;; ops.</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ExprEval</span> <span class=\"o\">{</span><span class=\"n\">kindMotive</span> <span class=\"o\">:</span> <span class=\"n\">Kind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">opFold</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Kind</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">OpKind</span> <span class=\"n\">i</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">kindMotive</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">kindMotive</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">ek</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ops</span> <span class=\"o\">(</span><span class=\"n\">EVAL_OPS</span><span class=\"o\">:</span> <span class=\"n\">ExprEval</span> <span class=\"n\">opFold</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExprEval</span> <span class=\"n\">opFold</span> <span class=\"o\">(</span><span class=\"n\">Expr.ops</span> <span class=\"n\">op</span> <span class=\"n\">ops</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which fails with an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">arg</span> <span class=\"bp\">#</span><span class=\"mi\">9</span> <span class=\"n\">of</span> <span class=\"bp\">'</span><span class=\"n\">ExprEval.ops'</span> <span class=\"n\">contains</span> <span class=\"n\">a</span> <span class=\"n\">non</span> <span class=\"n\">valid</span> <span class=\"n\">occurrence</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">datatypes</span> <span class=\"n\">being</span> <span class=\"n\">declared</span>\n</code></pre></div>\n<p>Lean nightly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">new</span><span class=\"bp\">/</span><span class=\"n\">ssa</span><span class=\"bp\">/</span><span class=\"n\">ssa</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">03</span><span class=\"bp\">-</span><span class=\"mi\">01</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">0</span><span class=\"n\">da281fab48d</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I am unsure what's going wrong. The current example looks far too artificial, the code arises from writing an inductive type that represents derivation rules for stepping through the evaluation of an intrinsically well-typed AST.</p>",
        "id": 338953664,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1677704167
    },
    {
        "content": "<p><del>Superficially this looks like it could be related to a change in the last nightly - though I don't understand how:</del><br>\n<del>https://github.com/leanprover/lean4-nightly/commit/0da281fab48d353e9da080d81dc7d736836f84b6</del></p>",
        "id": 338954805,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1677704496
    },
    {
        "content": "<p>I get the same error with older nightlies, so it doesn't seem to be related to <a href=\"https://github.com/leanprover/lean4/pull/2125\">lean4#2125</a></p>",
        "id": 338955135,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677704603
    },
    {
        "content": "<p>Fixed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Kind</span> <span class=\"o\">:=</span> <span class=\"n\">Unit</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">ExprKind</span> <span class=\"o\">:=</span>  <span class=\"n\">Unit</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">OpKind</span> <span class=\"o\">:</span> <span class=\"n\">Kind</span> <span class=\"bp\">→</span> <span class=\"n\">Kind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">OpKind</span> <span class=\"o\">()</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"o\">:</span> <span class=\"n\">ExprKind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">ops</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">()</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">()</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"o\">()</span> <span class=\"c1\">-- op ;; ops.</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ExprEval</span> <span class=\"o\">{</span><span class=\"n\">kindMotive</span> <span class=\"o\">:</span> <span class=\"n\">Kind</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">opFold</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">o</span><span class=\"o\">:</span> <span class=\"n\">Kind</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">OpKind</span> <span class=\"n\">i</span> <span class=\"n\">o</span> <span class=\"bp\">→</span> <span class=\"n\">kindMotive</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">kindMotive</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"n\">ek</span>  <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ops</span> <span class=\"o\">(</span><span class=\"n\">EVAL_OPS</span><span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">ExprEval</span> <span class=\"n\">kindMotive</span> <span class=\"bp\">@</span><span class=\"n\">opFold</span> <span class=\"n\">ek</span> <span class=\"n\">ops</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ExprEval</span> <span class=\"n\">opFold</span> <span class=\"o\">(</span><span class=\"n\">Expr.ops</span> <span class=\"n\">op</span> <span class=\"n\">ops</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 338955469,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677704744
    },
    {
        "content": "<p>Is this just a wrong guess of the unification algorithm then?</p>",
        "id": 338956261,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677704979
    },
    {
        "content": "<p>It's a combination of the inductive module being overly pedantic, and the unifier being overly sloppy.  The inductive module wants the parameters (<code>kindMotive</code>, <code>opFold</code>, and <code>ek</code>) to match exactly (i.e., be free variables).  While the unifier creates a lambda for <code>opFold</code> and thinks that's good enough because it's defeq.</p>",
        "id": 338956779,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677705099
    },
    {
        "content": "<p>Is this an issue I should file?</p>",
        "id": 338961902,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1677706773
    },
    {
        "content": "<p>I don't think there's anything broken here. The error message could of course be better.</p>",
        "id": 338967076,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677708997
    },
    {
        "content": "<p>If you can easily work around it, I would just lay low for now.</p>",
        "id": 338967107,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1677709019
    }
]