[
    {
        "content": "<p>I have project X (which depends on Mathlib) uploaded to GitHub.<br>\nI have project Y in my computer, where Y depends on the project X from GitHub (and also on Mathlib, but I removed the explicit reference to Mathlib from Y's lakefile, so I get Mathlib only transitively).<br>\nNow, in order to build Y using Lake, I had to downgrade the lean-toolchain of Y to the X's lean-toolchain.<br>\nOnly then I managed to build Y.<br>\nIs this behavior expected?</p>",
        "id": 391184815,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694788134
    },
    {
        "content": "<p>What was the error message?</p>",
        "id": 391200427,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694791572
    },
    {
        "content": "<p>I don't remember. It was several screens long.</p>",
        "id": 391209814,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694793831
    },
    {
        "content": "<p>A natural follow-up question is:</p>\n<p>Let's say project X depends on Mathlib from day D and project Y depends on Mathlib from day E, where D &lt; E.<br>\nAre there circumstances under which Y can import X?</p>",
        "id": 391256523,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694809649
    },
    {
        "content": "<p>I am worried that one day I will need to import project A that depends on Mathlib version α and project B that depends on Mathlib version β into a project C (where the Mathlib version is under my control, but I cannot change either A or B, so one of them will certainly be \"off\"). In short:</p>\n<p>Mathlib α → A → C ← B ← Mathlib β</p>\n<p>This is probably the most serious issue from all I have described. Has it been taken into consideration when developing Lake?</p>",
        "id": 391258548,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694810037
    },
    {
        "content": "<p>The way you deal with this in other programming languages is that you put constraints on the versions that your package can operate with. So for example one might say I need it the version to be <code>&gt;= 1.3.0</code> and another might say <code>&gt;= 1.2.0</code> and <code>&lt;= 1.4.0</code>. And then you can run some constraint solver in your thing that ends up figuring out which one to use. But right now lake is not at all capable of doing this. I don't know if it is planned but we will definitely need a version resolution mechanism (regardless of whether we use semver or whatever else) sooner or later.</p>",
        "id": 391260555,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694810782
    },
    {
        "content": "<p>Unless A compiles with Mathlib β or B compiles with Mathlib α you are out of luck, because you can't have two mathlibs in the dependency graph</p>",
        "id": 391260854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694810957
    },
    {
        "content": "<p>What I think is very likely situation:</p>\n<p>Std σ → Mathlib α → A → C ← B ← Std τ</p>",
        "id": 391261381,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694811162
    },
    {
        "content": "<p>same deal</p>",
        "id": 391261437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694811182
    },
    {
        "content": "<p>you can control the version used by setting Std υ as a dependency in C, but you will probably be forced to use Std σ if you want the build cache from mathlib</p>",
        "id": 391261596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694811238
    },
    {
        "content": "<p>It's not a deal-breaker, because if you are lucky B still compiles with Std σ</p>",
        "id": 391261746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694811280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20with.20more.20projects/near/391260854\">said</a>:</p>\n<blockquote>\n<p>Unless A compiles with Mathlib β or B compiles with Mathlib α you are out of luck, because you can't have two mathlibs in the dependency graph</p>\n</blockquote>\n<p>Let's continue here:</p>\n<p>Mathlib α → A → C ← B ← Mathlib β</p>\n<p>If everything goes well and Mathlib β is newer than Mathlib α, both A and B will ideally compile with Mathlib β.<br>\nDoes then Lake have mechanisms that allow the author of C to specify {Mathlib β, A, B} while preserving the dependency on the original repositories containing A and B?</p>",
        "id": 391263350,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694811956
    },
    {
        "content": "<p>if C depends on Mathlib β then A and B will be compiled against it</p>",
        "id": 391263563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694812066
    },
    {
        "content": "<p>Oh, just keep an explicit dependency on Mathlib in the C's lakefile?</p>",
        "id": 391263753,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694812141
    },
    {
        "content": "<p>FWIW, I think the end solution that we're gravitating towards is to automate the process of dependency updates, so that all projects are up to date with all their dependencies at all times and there is never disagreement about which version of a dependency to use. (Though, being downstream of mathlib is going to be a challenge, given how frequently it updates...)</p>",
        "id": 391264139,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694812245
    },
    {
        "content": "<blockquote>\n<p>Though, being downstream of mathlib is going to be a challenge, given how frequently it updates.</p>\n</blockquote>\n<p>I expect it to be a big issue. Maybe just maybe Mathlib should have an official release, not more than once per month, and external projects be recommended to depend on the official release.</p>",
        "id": 391265087,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694812561
    },
    {
        "content": "<p>I have plans to let projects track less-frequently updating dependencies and stay up-to-date with respect to those; so for example, you could say \"stay up to date with lean-toolchain\" and then your project would only update Mathlib when it updates to the new toolchain releases :)</p>",
        "id": 391265979,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694812907
    },
    {
        "content": "<p>That might help for projects depending on multiple projects downstream of mathlib, but it sounds even more painful for that first line of dependents, since now you have a whole month of breaking changes to deal with, and a month's delay to get new content from mathlib</p>",
        "id": 391266098,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694812939
    },
    {
        "content": "<p>(I don't have good answers either, besides pushing as much as possible into mathlib for as long as that works)</p>",
        "id": 391266422,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694813095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20with.20more.20projects/near/391266098\">said</a>:</p>\n<blockquote>\n<p>it sounds even more painful for that first line of dependents</p>\n</blockquote>\n<p>that's the tradeoff you make as a library maintainer, based on how much breakage you expect from each update <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> but the goal is for your downstream clients to be able to choose to update less frequently than you do.</p>\n<p>the other goal is to be able to \"fix your downstreams\" before merging changes upstream. So if e.g. Martin cares a lot about project Y when updating project X, he can make the necessary changes to Y before even merging a change to X, so that there's no surprise breakage.</p>",
        "id": 391266680,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694813222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20with.20more.20projects/near/391266098\">said</a>:</p>\n<blockquote>\n<p>now you have a whole month of breaking changes to deal with, and a month's delay to get new content from mathlib</p>\n</blockquote>\n<p>I think it is not necessarily a dichotomy. You can have a ˙develop˙ branch that depends on the newest Mathlib, and you can have a release that syncs with the official Mathlib release. Most users of your library will depend on the latter.</p>",
        "id": 391266826,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1694813298
    },
    {
        "content": "<p>Has anyone rebuilt the mathlib update bot we had for mathlib 3, btw?</p>",
        "id": 391268181,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694814053
    },
    {
        "content": "<p>To put this in context,<em>at this point in time</em> it seems unlikely that anyone would want to depend on a project which depends on mathlib, let alone depending on two such projects. I am very unclear about the current concrete aims of mathlib; for me a key motivation was to get an undergraduate degree in mathematics in there, but this has now largely been achieved (at least for the undergraduate degree I took) and much of the work of my students could be summarised as getting a master's level course in there. But is the idea to let it expand forever?</p>",
        "id": 391273645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694816810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Lake.20with.20more.20projects/near/391273645\">said</a>:</p>\n<blockquote>\n<p>To put this in context,<em>at this point in time</em> it seems unlikely that anyone would want to depend on a project which depends on mathlib, let alone depending on two such projects. I am very unclear about the current concrete aims of mathlib; for me a key motivation was to get an undergraduate degree in mathematics in there, but this has now largely been achieved (at least for the undergraduate degree I took) and much of the work of my students could be summarised as getting a master's level course in there. But is the idea to let it expand forever?</p>\n</blockquote>\n<p>For the record, I do have the first kind of dependency. A project <code>LeanAide</code> has a bunch of tools and depends on Mathlib and another was a project which was code for my course, hence depended on LeanAide.</p>",
        "id": 391322945,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694837252
    },
    {
        "content": "<p>I stand corrected! Thanks Siddhartha.</p>",
        "id": 391331565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694842200
    }
]