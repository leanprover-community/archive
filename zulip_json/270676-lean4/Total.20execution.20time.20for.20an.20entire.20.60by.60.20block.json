[
    {
        "content": "<p>When I use <code>set_option profiler.true</code>, I get output like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">716</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Std.Tactic.obtain</span> <span class=\"n\">took</span> <span class=\"mi\">133</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">418</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">115</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.refine</span> <span class=\"n\">took</span> <span class=\"mi\">426</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"n\">took</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">CoeFun</span> <span class=\"n\">took</span> <span class=\"mi\">206</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">267</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">353</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.refine</span> <span class=\"n\">took</span> <span class=\"mi\">575</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">166</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">FiniteDimensional</span> <span class=\"n\">took</span> <span class=\"mi\">153</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">StrongRankCondition</span> <span class=\"n\">took</span> <span class=\"mi\">128</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">449</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">took</span> <span class=\"mi\">512</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">59</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">404</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module.Finite</span> <span class=\"n\">took</span> <span class=\"mi\">519</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.rewriteSeq</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">68</span><span class=\"n\">s</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">StrongRankCondition</span> <span class=\"n\">took</span> <span class=\"mi\">204</span><span class=\"n\">ms</span>\n<span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"n\">of</span> <span class=\"n\">Module</span> <span class=\"n\">took</span> <span class=\"mi\">548</span><span class=\"n\">ms</span>\n<span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">of</span> <span class=\"n\">Lean.Parser.Tactic.exact</span> <span class=\"n\">took</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">81</span><span class=\"n\">s</span>\n<span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"n\">took</span> <span class=\"mi\">129</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>How do I get lean to give me a total time for the entire proof? I think adding up the numbers won't work because the threshold causes some tactics to be omitted from this list.</p>",
        "id": 352232138,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682332702
    },
    {
        "content": "<p>set_option trace.profiler true + my excellent flame tool of course!</p>",
        "id": 352237621,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682334173
    },
    {
        "content": "<p>Is there any reason to still have <code>profiler</code>? Could it be renamed to <code>trace.profiler.basic</code> or something to make it easier to discover one if you know about the other?</p>",
        "id": 352238250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1682334287
    },
    {
        "content": "<p>You'll have to ask <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> I have in fact been adding withTraceNode stuff to many of the profileItM calls so it should be close to isomorphic by now...I believe the only thing trace.profiler can not access is the C part of the old code generator</p>",
        "id": 352238929,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682334469
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Total.20execution.20time.20for.20an.20entire.20.60by.60.20block/near/352238250\">said</a>:</p>\n<blockquote>\n<p>Is there any reason to still have <code>profiler</code>?</p>\n</blockquote>\n<p>The cumulative summary <code>profiler</code> outputs at the end is used by tools like the speedcenter and isn't really something that would fit into <code>trace.profiler</code> IMO. However, the intermediary <code>X took Y</code> messages could perhaps be removed in favor of <code>trace.profiler</code> when the old compiler is gone.</p>\n<blockquote>\n<p>Could it be renamed to <code>trace.profiler.basic</code> or something to make it easier to discover one if you know about the other?</p>\n</blockquote>\n<p>It doesn't really have to do anything with traces</p>",
        "id": 352271492,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682342116
    }
]