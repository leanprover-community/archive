[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">h.2</span><span class=\"o\">]</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">errors with</span>\n\n<span class=\"cm\">(kernel) invalid projection</span>\n<span class=\"cm\">  h.1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>That <code>h.1</code> should be an <code>h.2</code>, I guess.</p>",
        "id": 398289749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698154243
    },
    {
        "content": "<p>Is this a known issue?</p>",
        "id": 398289803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1698154263
    },
    {
        "content": "<p>I'm not sure if this is the same as <a href=\"#narrow/stream/270676-lean4/topic/Kernel.20Invalid.20Projection/near/396687189\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Kernel.20Invalid.20Projection/near/396687189</a>, they certainly seem related, but perhaps distinct</p>",
        "id": 398297256,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698156611
    },
    {
        "content": "<p>This has probably come up before, as <a href=\"https://github.com/leanprover/lean4-nightly/commit/c0b021e196e0f82ae51db12a771b18d2b9f69bfa\">c0b021e</a> seems to be addressing something similar. Perhaps a similar change would need to be applied to kernel-level code.</p>",
        "id": 398297262,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1698156612
    },
    {
        "content": "<p>that <em>was</em> the kernel level code. My guess is that Johan is on an old version and this will be fixed in the next one</p>",
        "id": 398357439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698179997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/invalid.20kernel.20projection.20error.20error/near/398357439\">said</a>:</p>\n<blockquote>\n<p>My guess is that Johan is on an old version and this will be fixed in the next one</p>\n</blockquote>\n<p>I tried this example on the latest nightly, and that didn't fix it.</p>",
        "id": 398427897,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1698219059
    },
    {
        "content": "<p>Oh! It's not an off by one error, the kernel is in fact complaining about <code>h.1</code> not being valid (it shows up in the type of <code>h.2</code>)</p>",
        "id": 398432744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698221120
    },
    {
        "content": "<p>On <a href=\"https://github.com/leanprover/lean4/pull/2747\">lean4#2747</a> you get a much more informative error message (notably not a <code>(kernel)</code> message):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">projection</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">expression</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">proposition</span> <span class=\"n\">and</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"n\">but</span> <span class=\"n\">the</span> <span class=\"n\">projected</span> <span class=\"n\">value</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n <span class=\"n\">depending</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">proposition</span> <span class=\"n\">w</span> <span class=\"n\">of</span> <span class=\"n\">type</span>\n  <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 398433010,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698221226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/invalid.20kernel.20projection.20error.20error/near/398432744\">said</a>:</p>\n<blockquote>\n<p>Oh! It's not an off by one error, the kernel is in fact complaining about <code>h.1</code> not being valid (it shows up in the type of <code>h.2</code>)</p>\n</blockquote>\n<p>What is the correct way to resolve this? I can't <code>match</code> on the intro statement either. Here's my use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.BigOperators</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.SetTheory.Cardinal.SchroederBernstein</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span> <span class=\"n\">Int</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">Equiv.ofInjectiveInjective</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.Injective</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.Injective</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">Function.Embedding.schroeder_bernstein</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Equiv.ofBijective</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span>\n</code></pre></div>\n<p>I want to construct a equivalence from two injective functions, but <code>h.1 h.2</code> fails.</p>",
        "id": 400866078,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699416131
    },
    {
        "content": "<p>you can use <code>h.choose</code> and <code>h.choose_spec</code> to apply the axiom of choice to extract a witness</p>",
        "id": 400866712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699416419
    },
    {
        "content": "<p>Aha, perfect, thanks! <code>  exact Equiv.ofBijective h.choose h.choose_spec</code>.</p>",
        "id": 400868094,
        "sender_full_name": "Gareth Ma",
        "timestamp": 1699417417
    }
]