[
    {
        "content": "<p>Is there a notion of newtype in lean? or should I just use a structure with one field?</p>",
        "id": 266302412,
        "sender_full_name": "Pi Lanningham",
        "timestamp": 1640735230
    },
    {
        "content": "<p>Either that or a <code>def</code>, e.g. <code>ReaderT</code> is defined with a <code>def</code></p>",
        "id": 266302556,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640735412
    },
    {
        "content": "<p>Do you mean creating your own type? Maybe <code>constant MyType : Type</code>?</p>",
        "id": 266302576,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640735467
    },
    {
        "content": "<p>No he means the <code>newtype</code> concept from haskell which is done in lean using a <code>def</code> or a one element <code>structure</code></p>",
        "id": 266302583,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640735501
    },
    {
        "content": "<p>As an example, this is how <code>ReaderT</code> is defined in Lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">ReaderT</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ρ</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">ReaderT.run</span> <span class=\"o\">{</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ReaderT</span> <span class=\"n\">ρ</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ρ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Vs haskell:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">newtype</span> <span class=\"n\">ReaderT</span> <span class=\"n\">r</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">ReaderT</span> <span class=\"o\">{</span> <span class=\"n\">runReaderT</span> <span class=\"o\">::</span> <span class=\"n\">r</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 266302711,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640735675
    },
    {
        "content": "<p>So, thinking out loud here, if I wanted to define a type <code>Hash</code> as an alias for ByteArray, I could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Hash</span> <span class=\"o\">:=</span> <span class=\"n\">ByteArray</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Message</span> <span class=\"n\">where</span>\n  <span class=\"n\">hash</span> <span class=\"o\">:</span> <span class=\"n\">Hash</span>\n</code></pre></div>\n<p>Is there a Lean-idiomatic way to attach a proof to that? i.e. <code>a hash is any byte array, so long as the size is 32 bytes</code> or something along those lines?</p>",
        "id": 266302881,
        "sender_full_name": "Pi Lanningham",
        "timestamp": 1640735917
    },
    {
        "content": "<p>Then <code>structure</code> comes in handy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Hash</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">properLength</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">32</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 266303230,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640736186
    },
    {
        "content": "<p>Okay multiple things:<br>\nFirst, there is a difference between an alias which would be an <code>abbrev</code> and a <code>def</code>, if you define a type using <code>def</code> it will <em>not</em> inherit the type class instances the type on the right hand side has automatically, if you define it with an <code>abbrev</code> it will.</p>\n<p>now is there a Lean idiomatic way to attach a proof to that, yes there are actually multiple, first way would be to just have it as a structure field:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">LenVec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">len</span> <span class=\"o\">:</span> <span class=\"n\">list.length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>second way would be using a subtype, example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- The rhs of this</span>\n<span class=\"kd\">def</span> <span class=\"n\">SortedBTree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">LinearOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">BTree</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">Sorted</span> <span class=\"n\">t</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>which of these two you pick in which situation I am actually not 100% sure about yet, especially since subtype is just:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Subtype</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">property</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">val</span>\n</code></pre></div>\n<p>I think if you just have value + property use a subtype, if you have more than one value or more than one property a structure with proofs might be better.</p>",
        "id": 266303239,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1640736208
    },
    {
        "content": "<p>Ooo, thank you! &lt;3  That's super helpful, both of you</p>",
        "id": 266303347,
        "sender_full_name": "Pi Lanningham",
        "timestamp": 1640736328
    },
    {
        "content": "<p>The <code>:= by simp</code> part of my example is serving as a default proof, if the user doesn't provide one when instantiating the structure</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Hash</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">properLength</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">byteArray2</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">byteArray3</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Hash</span> <span class=\"o\">:=</span> <span class=\"n\">Hash.mk</span> <span class=\"n\">byteArray2</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">Hash</span> <span class=\"o\">:=</span> <span class=\"n\">Hash.mk</span> <span class=\"n\">byteArray3</span> <span class=\"c1\">-- breaks</span>\n<span class=\"c1\">-- unsolved goals</span>\n<span class=\"c1\">-- ⊢ False</span>\n</code></pre></div>",
        "id": 266303459,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640736409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466744\">Pi Lanningham</span> has marked this topic as resolved.</p>",
        "id": 266305115,
        "sender_full_name": "Notification Bot",
        "timestamp": 1640738640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466744\">@Pi Lanningham</span> I forgot to mention this other alternative using inheritance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Hash</span> <span class=\"kd\">extends</span> <span class=\"n\">ByteArray</span> <span class=\"n\">where</span>\n  <span class=\"n\">properLength</span> <span class=\"o\">:</span> <span class=\"n\">data.size</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">byteArray2</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Hash</span> <span class=\"o\">:=</span> <span class=\"n\">Hash.mk</span> <span class=\"n\">byteArray2</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 266306251,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1640739941
    },
    {
        "content": "<p>Found this (old) thread and wanted to make it crystal clear: will the runtime representation of Hash be  exactly like ByteArray, i.e. no extra structure around ByteArray for both cases?</p>",
        "id": 290018522,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658176008
    },
    {
        "content": "<p>Yes, see <a href=\"https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c\">https://leanprover.github.io/lean4/doc/dev/ffi.html#translating-types-from-lean-to-c</a></p>",
        "id": 290018824,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658176180
    },
    {
        "content": "<p>I see an explicit mention to inductive types with a 'trivial structure' (one constructor, not unsafe, etc), but nothing about structures explicitly.</p>\n<p>Is that so because a structure is elaborated into an inductive with a single constructor?</p>",
        "id": 290019625,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1658176570
    },
    {
        "content": "<p>Yes, exactly. This translation is not considered something purely internal, as e.g. the anonymous constructor is documented likewise about single-constructor inductive types.</p>",
        "id": 290020443,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1658177018
    }
]