[
    {
        "content": "<p>Here's a strange issue I just ran up against: in the following, the last <code>rfl</code> tells me that these things are not actually defeq:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">Classical.choose</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Does anyone have any idea what's going on?</p>",
        "id": 407874356,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702529214
    },
    {
        "content": "<p>You can't unfold a let rec definition in the definition itself because let recs are allowed to be mutually recursive with the main lemma so they haven't been added to the environment, they are just local constants during elaboration</p>",
        "id": 407875325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529561
    },
    {
        "content": "<p>Oh. So basically I would have to extract <code>h</code> as a separate lemma, make <code>f</code> a separate definition, and go from there?</p>",
        "id": 407875490,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702529630
    },
    {
        "content": "<p>yes</p>",
        "id": 407875593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529655
    },
    {
        "content": "<p>Alright!</p>",
        "id": 407875636,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702529672
    },
    {
        "content": "<p>or make <code>f</code> a definition depending on <code>h</code></p>",
        "id": 407875637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529672
    },
    {
        "content": "<p>i.e. it's not necessary to make <code>h</code> separate too</p>",
        "id": 407875712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702529701
    },
    {
        "content": "<p>Not sure which one is uglier in my application but I'll work it out. Thanks!</p>",
        "id": 407875836,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1702529744
    }
]