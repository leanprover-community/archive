[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> ran into an issue in the mathlib port with typeclass inference looping. I minimised it, and it's quite surprising: if you don't tell Lean <code>alpha</code> explicitly, by the time it's figured out you mean <code>alpha</code> it seems to have forgotten that <code>alpha</code> is a MonoidWithZero.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.ofOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">One.ofOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"n\">M₀</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Semigroup</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">G</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"o\">(</span><span class=\"n\">S₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">S₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">S₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulOneClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">One</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroClass</span> <span class=\"n\">M₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Semigroup</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">MulOneClass</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MonoidWithZero</span> <span class=\"o\">(</span><span class=\"n\">M₀</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">MulZeroOneClass</span> <span class=\"n\">M₀</span><span class=\"o\">,</span> <span class=\"n\">SemigroupWithZero</span> <span class=\"n\">M₀</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">HSMul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instHSMul</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">HSMul</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">hSMul</span> <span class=\"o\">:=</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">HSMul.hSMul</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">where</span>\n  <span class=\"kn\">protected</span> <span class=\"n\">one_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">y</span> <span class=\"bp\">•</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulActionWithZero</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">MulAction</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulWithZero</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"n\">MulActionWithZero.toSMulWithZero</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"k\">Pi</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instZero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">smulWithZero</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMul</span> <span class=\"k\">with</span>\n    <span class=\"c1\">-- already this is odd:</span>\n    <span class=\"c1\">-- smul_zero := fun a =&gt; funext fun i =&gt; SMulZeroClass.smul_zero a -- \"failed to synthesize instance `SMulZeroClass α (f i)`\"</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">@</span><span class=\"n\">SMulZeroClass.smul_zero</span>  <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"c1\">-- needs the @</span>\n    <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMulWithZero.zero_smul</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mulAction</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">@</span><span class=\"n\">MulAction</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">m</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulAction.mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MulAction.one_smul</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000</span> <span class=\"c1\">-- consider turning trace.Meta.synthInstance to false if you</span>\n<span class=\"c1\">-- make this number much bigger</span>\n\n<span class=\"c1\">-- works fine</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mulAction</span> <span class=\"n\">α</span> <span class=\"k\">with</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero.smul_zero</span>\n    <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero.zero_smul</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- also works</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mulAction</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">α</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- but this seems to be looping</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero'</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MonoidWithZero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n    <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">mulAction</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Lean claims to not be able to find `MonoidWithZero α` even though it's explicitly given as an instance.</span>\n\n<span class=\"cm\">[Meta.synthInstance] 💥 (i : I) → SMulWithZero α (f i) ▼</span>\n<span class=\"cm\">  [] new goal (i : I) → SMulWithZero α (f i) ▶</span>\n<span class=\"cm\">  [] 💥 apply MulActionWithZero.toSMulWithZero to (i : I) → SMulWithZero α (f i) ▼</span>\n<span class=\"cm\">    [tryResolve] 💥 SMulWithZero α (f i) ≟ SMulWithZero (?m.15131 i) (?m.15132 i) ▼</span>\n<span class=\"cm\">      [] ❌ Zero α ▼</span>\n<span class=\"cm\">        [] new goal Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @MonoidWithZero.toZero to Zero α ▼</span>\n<span class=\"cm\">          [tryResolve] ✅ Zero α ≟ Zero α</span>\n<span class=\"cm\">          [] no instances for MonoidWithZero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @AddMonoid.toZero to Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @MulZeroOneClass.toZero to Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @MonoidWithZero.toMulZeroOneClass to MulZeroOneClass α ▶</span>\n<span class=\"cm\">        [] ✅ apply @AddZeroClass.toZero to Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @AddMonoid.toAddZeroClass to AddZeroClass α ▶</span>\n<span class=\"cm\">        [] ✅ apply @SemigroupWithZero.toZero to Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @MonoidWithZero.toSemigroupWithZero to SemigroupWithZero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @MulZeroClass.toZero to Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @MulZeroOneClass.toMulZeroClass to MulZeroClass α ▶</span>\n<span class=\"cm\">        [] ✅ apply @SemigroupWithZero.toMulZeroClass to MulZeroClass α ▶</span>\n<span class=\"cm\">        [] ✅ apply @Zero.ofOfNat0 to Zero α ▶</span>\n<span class=\"cm\">        [] ✅ apply @Zero.toOfNat0 to OfNat α 0 ▶</span>\n<span class=\"cm\">      [] ✅ I → MonoidWithZero α ▶</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 319109335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672705120
    },
    {
        "content": "<p>Thanks for bringing this to <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> Kevin.  I think I've minimized it a bit more actually:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zip</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"c1\">-- represents `Zero`</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMul</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">infixr</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"s2\">\" • \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMul.smul</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulAction</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulZeroClass</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">MulActionWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">MulAction</span> <span class=\"n\">R</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">SMulWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zip</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zip</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">SMulZeroClass</span> <span class=\"n\">R</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">MulActionWithZero.toSMulWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n    <span class=\"o\">[</span><span class=\"n\">Zip</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Zip</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pi</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instZero</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zip</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">Zip</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instSMul</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">SMul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span> <span class=\"bp\">•</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">smulWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zip</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zip</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">pi.instSMul</span> <span class=\"k\">with</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">mulAction</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulAction</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">MulAction</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">•</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">10000</span> <span class=\"c1\">-- consider turning trace off if you make this much bigger</span>\n\n<span class=\"c1\">-- seems to be looping</span>\n<span class=\"kd\">instance</span> <span class=\"n\">mulActionWithZero</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zip</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zip</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">MulActionWithZero</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n <span class=\"o\">{</span> <span class=\"n\">pi.mulAction</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">pi.smulWithZero</span> <span class=\"n\">_</span> <span class=\"k\">with</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pi</span>\n</code></pre></div>",
        "id": 319109651,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672705360
    },
    {
        "content": "<p>And I checked that the error doesn't appear for the corresponding code in Lean 3.</p>",
        "id": 319109700,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672705382
    },
    {
        "content": "<p>But i'm not sure how to read the typeclass inference trace.</p>",
        "id": 319109762,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672705428
    },
    {
        "content": "<p>I'm not entirely sure, but I think I have observed the same behavior when porting Mathlib/Data/Set/Intervals/Instances.lean<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/6c3e0a06af2816f8d6e046fc860c32e1185f9d0f/Mathlib/Data/Set/Intervals/Instances.lean#L342-L344\">Data/Set/Intervals/Instances.lean#L342-L344</a><br>\nHere one also gets an deterministic time out and the structure of the instance is very similar</p>",
        "id": 319192063,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1672751688
    },
    {
        "content": "<p>After taking a quick look, this slightly confusing behavior is due to nested TC resolution.  If you enable the <code>trace.Meta.isDefEq</code> option, then you'll see that the failing type class inference happens during unification.  The thing is, we only allow a single layer of nesting (so tc-&gt;defeq-&gt;tc is fine, but defeq-&gt;tc-&gt;defeq-&gt;tc is not).  So if you have a type class instance that requires nested TC resolution during TC synthesis (like the one here), then it won't be found during unification (i.e., when trying to fill in the underscore here).</p>",
        "id": 319247845,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672768147
    },
    {
        "content": "<p>Thanks for the information Gabriel.  Do you know why this feature was supported in Lean 3 but not in Lean 4?</p>",
        "id": 319264840,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1672773913
    },
    {
        "content": "<p>What I said is correct, but after some investigation it's not the issue here (although it might bite us in the future).  From what I can tell, all we're missing here is a <code>!</code>.  <a href=\"https://github.com/leanprover/lean4/commit/70a6c06eef060d8e14869e2848749287e5364742\">https://github.com/leanprover/lean4/commit/70a6c06eef060d8e14869e2848749287e5364742</a></p>",
        "id": 319267352,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672774875
    },
    {
        "content": "<p>Does this change have any effect on the examples at <a href=\"https://github.com/leanprover/lean4/pull/1986\">lean4#1986</a>?</p>",
        "id": 319273978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672777458
    },
    {
        "content": "<p>Not as far as I can tell.</p>",
        "id": 319274738,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672777765
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Pi.mulAction#doc\">docs4#Pi.mulAction</a> has <code>{m : Monoid α}</code> a typeclass variable being inferred by unification. Presumably this is intentional? Is this related?</p>",
        "id": 319276435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672778444
    },
    {
        "content": "<p>And does it change this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.SMulWithZero</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">I</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">smulWithZero</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n    <span class=\"n\">SMulWithZero</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">instSMul</span> <span class=\"k\">with</span>\n    <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">SMulZeroClass.smul_zero</span> <span class=\"n\">a</span> <span class=\"c1\">-- fails with error</span>\n    <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    failed to synthesize instance</span>\n<span class=\"cm\">    SMulZeroClass α (f i)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 319276740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672778601
    },
    {
        "content": "<p><code>    smul_zero := fun a =&gt; funext fun i =&gt; @SMulZeroClass.smul_zero α (f i) _ _ a -- works fine</code></p>",
        "id": 319277228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672778815
    },
    {
        "content": "<p>I see this in the traces of Heather's example:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>[Meta.isDefEq] 💥 ∀ (r : R) (a : (i : I) → f i), r • a = a =?= ∀ (r : R) (a : (i : I) → f i), r • a = a\n</code></pre></div>\n<p>Is this surprising?</p>",
        "id": 319280154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672779971
    },
    {
        "content": "<p>The bomb in synthInstance usually means that TC synthesis aborted because it saw a metavariable.  For example, you need to find an instance of <code>Group (?G, ?H)</code>. Then we abort and try again later when <code>?G</code> is filled in.</p>",
        "id": 319286505,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1672783025
    },
    {
        "content": "<p>But the bomb in the above had no metavariables I think</p>",
        "id": 319304399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672792379
    },
    {
        "content": "<p>This is the example with the heartbeat timeout, right? As soon as the limit is reached, any further isDefEq/whnf/... will bomb out in 0 steps. synthInstance is the only subsystem with a per-invocation limit.</p>",
        "id": 319348789,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672823900
    },
    {
        "content": "<p>But also, <a href=\"/user_uploads/3121/bSUvZexDAJH9E36AHaECWw15/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/bSUvZexDAJH9E36AHaECWw15/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/bSUvZexDAJH9E36AHaECWw15/image.png\"></a></div>",
        "id": 319348864,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672823938
    },
    {
        "content": "<p>How are you getting these type hovers in emacs in the info view? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 319349694,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672824291
    },
    {
        "content": "<p>By using VS Code :)</p>",
        "id": 319350172,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672824501
    },
    {
        "content": "<p>/o\\</p>",
        "id": 319350257,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672824559
    },
    {
        "content": "<p>So I am the last one left on emacs now huh.</p>",
        "id": 319350285,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1672824568
    },
    {
        "content": "<p>It's basically the only time I use VS Code. But I'm not holding my breath for widget support in Emacs either. I guess using an external web browser window as suggested before is the most realistic solution.</p>",
        "id": 319350723,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672824752
    },
    {
        "content": "<p>Are typeclass cycles allowed in Lean 4? </p>\n<p>Yesterday I tried to promote <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.free_of_finite_type_torsion_free%27#doc\">docs#Module.free_of_finite_type_torsion_free'</a> to an <code>instance</code> but I failed and I suspect this is because it forms a cycle with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.Free.noZeroSMulDivisors#doc\">docs#Module.Free.noZeroSMulDivisors</a></p>\n<p>I also tried to promote <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=isNoetherian_of_isNoetherianRing_of_finite#doc\">docs#isNoetherian_of_isNoetherianRing_of_finite</a> to an <code>instance</code> and again I failed and suspect this is because of the cycle it forms with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module.IsNoetherian.finite#doc\">docs#Module.IsNoetherian.finite</a></p>\n<p>I tried to see if I could understand based on reading <a href=\"https://arxiv.org/pdf/2001.04301.pdf\">https://arxiv.org/pdf/2001.04301.pdf</a> but I got lazy and decided I'd just ask here instead.</p>",
        "id": 385635549,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692264669
    },
    {
        "content": "<p>Yes, cycles should not be a problem.</p>",
        "id": 385647359,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692269083
    },
    {
        "content": "<p>I claim <a href=\"https://github.com/leanprover-community/mathlib4/pull/6548\">#6548</a> is further evidence that cycles are still problematic in Lean 4. I admit this is a bit vague since any new instance of course creates new work for typeclass inference but I think it's worth trying to collect a few examples of cycle-creating instances that are notably costly.</p>",
        "id": 386099924,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1692448298
    },
    {
        "content": "<p>Multiple files were touched, more were probably affected indirectly; out of these, one regressed by ~200ms and another one exceeded a threshold with no idea how close it was before, as already pointed out by Kevin. That is not evidence.</p>",
        "id": 386102437,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692449947
    },
    {
        "content": "<p>In the file that broke in <a href=\"https://github.com/leanprover-community/mathlib4/pull/6548\">#6548</a>, the lemma <code>XYIdeal_eq₂</code> goes from 93846 heartbeats to 109609 after adding <code>attribute [instance] CharP.charP_to_charZero</code>. The theorem <code>XYIdeal_neg_mul</code> goes from <code>803202</code> to <code>828585</code> after adding the same instance. I don't know if <code>count_heartbeats</code> is the thing we should be using here. <code>ring1</code> times out looking for a <code>CharZero</code> instance on <code>F[X][X]</code> that isn't there.</p>",
        "id": 386116506,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1692458731
    },
    {
        "content": "<p>I don't know if that wild goose chase for the CharZero instance is counted by heartbeats? It would probably be synthInstance heartbeats I guess.</p>",
        "id": 386345051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1692610154
    },
    {
        "content": "<p>I hope this is some better evidence that cycles are still problematic: <a href=\"https://github.com/leanprover-community/mathlib4/issues/6646#issuecomment-1691792488\">https://github.com/leanprover-community/mathlib4/issues/6646#issuecomment-1691792488</a><br>\n<a href=\"https://github.com/leanprover-community/mathlib4/compare/Co(ntra)variant-debug?expand=1\">diff to reproduce and profile</a></p>",
        "id": 387182915,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1692924008
    },
    {
        "content": "<p>Here's another example of problematic cycles I ran into recently: <a href=\"#narrow/stream/113488-general/topic/.60by_cases.60.20trying.20to.20find.20a.20weird.20instance/near/374893214\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/.60by_cases.60.20trying.20to.20find.20a.20weird.20instance/near/374893214</a></p>",
        "id": 387245450,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1692957303
    },
    {
        "content": "<p>I'm fairly certain the errors I'm encountering <a href=\"https://github.com/leanprover-community/mathlib4/actions/runs/6267609394/job/17021018812?pr=7309\">here</a> on <a href=\"https://github.com/leanprover-community/mathlib4/pull/7309\">#7309</a> are also due to cycle problems. This PR introduces two TC cycles, and it seems the latter (for <code>OrderedCommRing</code>) is causing the problems. For commit <code>987689ab10908b46992444e7f5075359ccacfcfd</code> on the relevant <a href=\"https://github.com/leanprover-community/mathlib4/tree/j-loreaux%2FOrderedStarRing\">branch#j-loreaux/OrderedStarRing</a>, one can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"c1\">-- without disabling this instance, the `inferInstance` call fails below.</span>\n<span class=\"c1\">-- if it's disabled, Lean finds the instance very quickly</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">StarOrderedRing.toOrderedCommRing</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">CommRing</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">CommSemiring</span> <span class=\"o\">(</span><span class=\"n\">AdjoinRoot</span> <span class=\"n\">f</span> <span class=\"bp\">⧸</span> <span class=\"n\">Ideal.map</span> <span class=\"o\">(</span><span class=\"n\">Ideal.Quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">Ideal.span</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">Ideal.map</span> <span class=\"n\">Polynomial.C</span> <span class=\"n\">I</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n    <span class=\"c1\">-- even with the instance above activated `CommRing.toCommSemiring` works.</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>Note: it's getting caught up in <code>isDefEq</code> and it's the <code>maxHeartbeats</code> timing out (not <code>synthInstance.maxHeartbeats</code>). The TC cycles I added don't actually change the data fields, but I think the issue may be that Lean is doing a lot of unbundling / rebundling because of new style structures, and then it can't unify.</p>",
        "id": 392444096,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1695361721
    }
]