[
    {
        "content": "<p>I want to prove lots of things (all the one-variable axioms for a commutative ring defined as a quotient) using this sequence of tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">try</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>How do I write one tactic which does this? I knew how to do this in Lean 3 and it's useful for teaching gimmicks.</p>",
        "id": 397554163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697739075
    },
    {
        "content": "<p>Here is one way</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"bp\">·</span> <span class=\"n\">intro</span> <span class=\"n\">a</span>\n    <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"mi\">1</span><span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span>\n  <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 397554661,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697739301
    },
    {
        "content": "<p>Actually this isn't good, I'll try and make a better version</p>",
        "id": 397554831,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697739372
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"buzzardify\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">try</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397554941,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697739438
    },
    {
        "content": "<p>I don't think that does what you think it does kyle, or at least I have no idea what that would do, <br>\nLook at the state after</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"buzzardify\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">ring</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">):</span> <span class=\"mi\">1</span><span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">s</span>\n  <span class=\"n\">buzzardify</span>\n</code></pre></div>",
        "id": 397556260,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697740121
    },
    {
        "content": "<p>I think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"buzzardify\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">try</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>works</p>",
        "id": 397556934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697740430
    },
    {
        "content": "<p>Oh, oops, should have tested more carefully (i.e., at all). You can use parentheses to group tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"buzzardify\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"o\">(</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span>\n  <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n  <span class=\"n\">simp</span>\n  <span class=\"n\">try</span> <span class=\"n\">ring</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 397557185,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697740542
    },
    {
        "content": "<p>Works in my use case! Thanks both of you! This is something I've been teaching this week.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- A \"pre-integer\" is just a pair of naturals.</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">MyPreint</span> <span class=\"o\">:=</span> <span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyPreint</span>\n\n<span class=\"sd\">/-- The equivalence relation on pre-integers, which we'll quotient out</span>\n<span class=\"sd\">by to get integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">x.1</span> <span class=\"bp\">+</span> <span class=\"n\">y.2</span> <span class=\"bp\">=</span> <span class=\"n\">x.2</span> <span class=\"bp\">+</span> <span class=\"n\">y.1</span>\n\n<span class=\"c1\">-- Lemma saying what definition of `R` is on ordered pairs</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">R_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- `linarith` tactic can do all the calculations to prove it's an equiv reln</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">R_refl</span> <span class=\"o\">:</span> <span class=\"n\">Reflexive</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">R_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">R_symm</span> <span class=\"o\">:</span> <span class=\"n\">Symmetric</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"n\">h</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">R_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">R_trans</span> <span class=\"o\">:</span> <span class=\"n\">Transitive</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">R_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"sd\">/-- Enable `≈` notation for `R` and ability to quotient by it  -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">R_equiv</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"n\">MyPreint</span> <span class=\"n\">where</span>\n  <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">R</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">R_refl</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">R_symm</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">R_trans</span><span class=\"o\">⟩</span>\n\n<span class=\"c1\">-- Teach the definition of `≈` to the simplifier</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">≈</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">R_def</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n\n<span class=\"c1\">-- Teach the definition of `Setoid.r` to the simplifier</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">equiv_def'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid.r</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">equiv_def</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n\n<span class=\"sd\">/-- Negation on pre-integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ab.2</span><span class=\"o\">,</span> <span class=\"n\">ab.1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- teach it to the simplifier</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">neg_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">neg</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Addition on pre-integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"bp\">+</span> <span class=\"n\">cd.1</span><span class=\"o\">,</span> <span class=\"n\">ab.2</span> <span class=\"bp\">+</span> <span class=\"n\">cd.2</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- teach it to the simplifier</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"sd\">/-- Multiplication on pre-integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">ab</span> <span class=\"n\">cd</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyPreint</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">ab.1</span> <span class=\"bp\">*</span> <span class=\"n\">cd.1</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span> <span class=\"bp\">*</span> <span class=\"n\">cd.2</span><span class=\"o\">,</span> <span class=\"n\">ab.1</span> <span class=\"bp\">*</span> <span class=\"n\">cd.2</span> <span class=\"bp\">+</span> <span class=\"n\">ab.2</span> <span class=\"bp\">*</span> <span class=\"n\">cd.1</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- teach it to the simplifier</span>\n<span class=\"kd\">@[</span><span class=\"n\">simp</span><span class=\"kd\">]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MyPreint</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MyPreint</span>\n\n<span class=\"sd\">/-- Make the integers as a quotient of preintegers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">MyInt</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient</span> <span class=\"n\">R_equiv</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MyInt</span>\n\n<span class=\"c1\">-- `0` notation (the equiv class of (0,0))</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"n\">MyInt</span> <span class=\"n\">where</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"c1\">-- `1` notation (the equiv class of (1,0))</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">One</span> <span class=\"n\">MyInt</span> <span class=\"n\">where</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">⟧</span>\n\n<span class=\"sd\">/-- Negation on integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">MyInt</span> <span class=\"bp\">→</span> <span class=\"n\">MyInt</span> <span class=\"o\">:=</span> <span class=\"n\">Quotient.map</span> <span class=\"n\">MyPreint.neg</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- to prove this is well-defined, we need to</span>\n  <span class=\"c1\">-- show some lemma or other</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MyPreint.neg</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- So prove this lemma</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- unary `-` notation</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Neg</span> <span class=\"n\">MyInt</span> <span class=\"n\">where</span> <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"n\">neg</span>\n\n<span class=\"sd\">/-- Addition on integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">MyInt</span> <span class=\"bp\">→</span> <span class=\"n\">MyInt</span> <span class=\"bp\">→</span> <span class=\"n\">MyInt</span>  <span class=\"o\">:=</span> <span class=\"n\">Quotient.map₂</span> <span class=\"n\">MyPreint.add</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- to show this is well-defined, we need to</span>\n  <span class=\"c1\">-- show some lemma or other</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n         <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MyPreint.add</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- So prove this lemma</span>\n  <span class=\"n\">linarith</span>\n\n<span class=\"c1\">-- `+` notation</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"n\">MyInt</span> <span class=\"n\">where</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"n\">add</span>\n\n<span class=\"sd\">/-- Multiplication on integers. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">MyInt</span> <span class=\"bp\">→</span> <span class=\"n\">MyInt</span> <span class=\"bp\">→</span> <span class=\"n\">MyInt</span>  <span class=\"o\">:=</span> <span class=\"n\">Quotient.map₂</span> <span class=\"n\">MyPreint.mul</span> <span class=\"bp\">&lt;|</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- to show this is well-defined, we need to show some lemma or other</span>\n  <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n         <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">MyPreint.mul</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- so prove this lemma (which in this case is nonlinear)</span>\n  <span class=\"n\">nlinarith</span>\n\n<span class=\"c1\">-- `*` notation</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"n\">MyInt</span> <span class=\"n\">where</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MyPreint</span>\n\n<span class=\"c1\">-- Every single proof of every single axiom is: \"replace all integers with</span>\n<span class=\"c1\">-- pairs of naturals, turn the question into a question about naturals,</span>\n<span class=\"c1\">-- and then get the `ring` tactic to prove it if it's not already proved by accident\"</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"int_proof₁\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">try</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"int_proof₂\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">try</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"int_proof₃\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span>\n  <span class=\"n\">focus</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n    <span class=\"n\">refine</span> <span class=\"n\">Quot.induction_on₃</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Quot.sound</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">try</span> <span class=\"n\">ring</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span> <span class=\"n\">MyInt</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">+</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₃</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₂</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">*</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₃</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₃</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₃</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₁</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">int_proof₂</span>\n</code></pre></div>\n<p>What's the next trick? Figure out just one <code>int_proof</code> tactic that counts the number of inputs?</p>",
        "id": 397558984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697741210
    },
    {
        "content": "<p>If you do not expect to need more than the three arguments, you can simply combine them by trying them each, until one succeeds...</p>",
        "id": 397568382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697745270
    },
    {
        "content": "<p>So then the only question left is whether lean 4 has a version of the <code>refine_struct</code> tactic meaning that I will be able to solve them all in one line</p>",
        "id": 397573059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697747406
    },
    {
        "content": "<p>you can always use <code>constructor &lt;;&gt; ...</code> or something...</p>",
        "id": 397575149,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697748482
    },
    {
        "content": "<p>oh no I see you want to just define the data, I get it.</p>",
        "id": 397575249,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697748520
    },
    {
        "content": "<p>do we have <code>refine_struct</code>? did anyone actually use that in lean3?</p>",
        "id": 397575272,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697748540
    },
    {
        "content": "<p>And also ignore all the fields with default instances!</p>",
        "id": 397575290,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697748550
    },
    {
        "content": "<p>I used it in eg the complex number game to prove that the complexes were a ring using a very similar strategy to the above</p>",
        "id": 397575339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697748576
    },
    {
        "content": "<p>About a hundred uses in mathlib3</p>",
        "id": 397577829,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1697749720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/tactic.20which.20is.20just.20a.20combination.20of.20other.20tactics/near/397575290\">said</a>:</p>\n<blockquote>\n<p>And also ignore all the fields with default instances!</p>\n</blockquote>\n<p>Is <a href=\"https://github.com/leanprover-community/mathlib4/pull/5745/files#diff-e5d82c5386e25ce16218699349a5ac7456350e114dfbfceac6937ccc1d903239R27\">https://github.com/leanprover-community/mathlib4/pull/5745/files#diff-e5d82c5386e25ce16218699349a5ac7456350e114dfbfceac6937ccc1d903239R27</a> what you want?</p>",
        "id": 397587402,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697755518
    },
    {
        "content": "<p>I don't know. Will that fill in an <code>nsmul</code> field which isn't populated by a tactic by default?</p>",
        "id": 397587652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697755693
    },
    {
        "content": "<p>What do you mean? <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>?</p>",
        "id": 397587901,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697755903
    },
    {
        "content": "<p>You can see a test file there which shows what it does</p>",
        "id": 397587956,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697755930
    },
    {
        "content": "<p>Some baby examples of combining tactics are at: <a href=\"https://github.com/siddhartha-gadgil/proofs-and-programs-2023/blob/2d3312143811f0679175c2614e454ad6d163608f/PnP2023/Lec_01_11/NatLe.lean#L188\">https://github.com/siddhartha-gadgil/proofs-and-programs-2023/blob/2d3312143811f0679175c2614e454ad6d163608f/PnP2023/Lec_01_11/NatLe.lean#L188</a></p>",
        "id": 397811775,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1697861466
    }
]