[
    {
        "content": "<p>In this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Eq.subst</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span>\n</code></pre></div>\n<p>I get the error message <code>application type mismatch Eq.subst h1 argument h1 has type b = a * m : Prop but is expected to have type b = a * m * n : Prop</code>.  If I use <code>@Eq.subst</code> and supply the motive explicitly, it works.  So I guess Lean isn't able to figure out the motive, but I'm surprised at that.  Isn't inferring the motive pretty straightforward in this case?</p>",
        "id": 305151705,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666273117
    },
    {
        "content": "<p><code>elab_as_eliminator</code> isn't much used in Lean 4. (It was added at some point to help porting mathlib but it isn't acutally used.)</p>\n<p>In term mode, you need to supply the motive for pretty much all recursors. Instead of <code>@Eq.subst</code>, you can use <code>Eq.subst (motive:=_)</code> so the other implicit arguments are filled in.</p>\n<p>That said, in the case of <code>Eq.subst</code>, you can simply use <code>▸</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">h2</span>\n</code></pre></div>",
        "id": 305212686,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1666290592
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/pull/1679\">lean4#1679</a></p>",
        "id": 305213919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666290996
    },
    {
        "content": "<p>I was assuming <code>h1 ▸ h2</code> was just shorthand for <code>Eq.subst h1 h2</code>--that's what it said in TPIL 3.  But I see that TPIL 4 says something slightly different--it says that <code>▸</code> is \"a macro built on top of Eq.subst and Eq.symm.\"  So I guess it has changed.<br>\nActually, when I hover over <code>h1 ▸ h2</code> in Lean it tells me that <code>▸</code> is a macro built on top of Eq.rec and Eq.symm.</p>",
        "id": 305216122,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666291762
    },
    {
        "content": "<p>It was changed, because <code>\\t</code> in lean 3 was very often useless / didn't do the obvious thing even when <code>by rw h; exact e</code> would work - which has exactly the same amount of information as <code>h \\t e</code></p>",
        "id": 305216475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1666291884
    },
    {
        "content": "<p><code>Eq.subst</code> is limited to propositions; <code>Eq.ndrec</code> is the same but applies to any sort. <code>Eq.rec</code> is the natural eliminator for equality but it has a more complex signature that is rarely of much use.</p>",
        "id": 305221494,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1666293675
    },
    {
        "content": "<p>With this setup:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Meta.Tactic.Rewrite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">ha</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"o\">⟨(</span><span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">ha</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hb</span> <span class=\"n\">_ha</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">hb</span><span class=\"o\">)⟩</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n  <span class=\"c1\">-- h₁ : (a → b) → b</span>\n  <span class=\"c1\">-- h₂ : (a → b) = b</span>\n  <span class=\"c1\">-- h₃ : b → b</span>\n</code></pre></div>\n<p><code>exact h₃</code> closes the goal, but <code>exact h₂ ▸ h₁</code> gives the following error</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>type mismatch\n  h₁\nhas type\n  (a → b) → b : Prop\nbut is expected to have type\n  (a → b) → a → b : Prop\n</code></pre></div>\n<p>Same error if I specify the expected type of <code>h₃</code>,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span> <span class=\"bp\">▸</span> <span class=\"n\">h₁</span>\n</code></pre></div>\n<p>Is there a bug here?</p>",
        "id": 327976329,
        "sender_full_name": "Richard Copley",
        "timestamp": 1676458337
    },
    {
        "content": "<p>Higher order unification is undecidable so it's just different algorithms giving different answers I guess</p>",
        "id": 328015782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676469155
    },
    {
        "content": "<p>My guess is that having access to the type of the term eq.subst is supposed to be producing changes how elaboration works.</p>",
        "id": 328016161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676469246
    },
    {
        "content": "<p>Must be! But we know it's possible to find a motive that does what is wanted, because we need only ignore the expected type <span aria-label=\"smiling face with tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"smiling face with tear\">:smiling_face_with_tear:</span></p>",
        "id": 328067341,
        "sender_full_name": "Richard Copley",
        "timestamp": 1676482188
    },
    {
        "content": "<p>Right, and we also know that no computer program can reliably find these motives, because there's no algorithm, so it's not clear that failure of a computer program to do so is a bug.</p>",
        "id": 328108712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676495267
    }
]