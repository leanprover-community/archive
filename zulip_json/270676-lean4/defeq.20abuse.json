[
    {
        "content": "<p>The Y problem: what's going on with the two examples? below The code between \"BEGIN\" and \"END\" is the same in both cases, but <code>rw [Nat.pred_succ]</code> succeeds in the first case and fails in the second. I suppose the <code>2</code> is actually <code>Nat.succ 1</code> in the first case but not the second case? But then what is it in the second case?</p>\n<p>The X problem: what's a sensible way to rewrite <code>Nat.pred 2</code> to <code>1</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Size</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"c1\">-- BEGIN</span>\n    <span class=\"c1\">-- ⊢ 2 * (x - x / 2) = 2 * (x / 2)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_sub_right_distrib</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_pred_right</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- ⊢ x * Nat.pred 2 = x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- END</span>\n    <span class=\"c1\">-- ⊢ x * 1 = x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_one</span><span class=\"o\">]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Size</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∣</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Nat.eq_of_mul_eq_mul_left</span> <span class=\"o\">(</span><span class=\"n\">zero_lt_two'</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- BEGIN</span>\n    <span class=\"c1\">-- ⊢ 2 * (x - x / 2) = 2 * (x / 2)</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"mi\">2</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.mul_sub_right_distrib</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.div_mul_cancel</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Nat.mul_pred_right</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- ⊢ x * Nat.pred 2 = x</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- END</span>\n    <span class=\"c1\">-- failed, did not find instance of pattern Nat.pred (Nat.succ ?n)</span>\n</code></pre></div>",
        "id": 327552006,
        "sender_full_name": "Richard Copley",
        "timestamp": 1676296158
    },
    {
        "content": "<p>Can you please include the imports for your examples, so that it's a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 327559566,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676297913
    },
    {
        "content": "<p>I have edited the imports into the examples.<br>\nInserting any of these before <code>rw [Nat.pred_succ]</code> makes the second case work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"c1\">-- no visible effect</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">nat_lit</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"c1\">-- no visible effect</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.succ</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"c1\">-- no visible effect</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)]</span> <span class=\"c1\">-- no visible effect</span>\n</code></pre></div>\n<p>But I wouldn't call them sensible!</p>",
        "id": 327572940,
        "sender_full_name": "Richard Copley",
        "timestamp": 1676301124
    },
    {
        "content": "<p>yeah, that's weird</p>",
        "id": 327575099,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676301639
    },
    {
        "content": "<p>if I do <code>set_option pp.all true</code>, then the first example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Dvd.dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.instDvdNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instMulNat</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n      <span class=\"o\">(</span><span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">2</span><span class=\"o\">))))</span>\n    <span class=\"n\">x</span>\n</code></pre></div>\n<p>and the second example is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Dvd.dvd.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.instDvdNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"n\">x</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">HMul.hMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instHMul.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">instMulNat</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n      <span class=\"o\">(</span><span class=\"n\">Nat.pred</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instOfNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoidWithOne.toNatCast.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n              <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoidWithOne.toAddMonoidWithOne.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toAddCommMonoidWithOne.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.semiring</span><span class=\"o\">))))</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instAtLeastTwoHAddNatInstHAddInstAddNatOfNat</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">0</span><span class=\"o\">)))))))</span>\n    <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 327575244,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676301690
    },
    {
        "content": "<p>So I guess maybe all those typeclass instances mean than somehow definitional equality / normalization is not getting as far in the second example.</p>",
        "id": 327575931,
        "sender_full_name": "David Renshaw",
        "timestamp": 1676301869
    },
    {
        "content": "<p>This may be because of the new numeric literal mechanism of lean4.  <code>1+1=2</code> for <code>AddMonoidWithOne</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=one_add_one_eq_two#doc\">docs4#one_add_one_eq_two</a>) is no longer a defeq. (edit: not the defeq problem, it's still defeq for Nats. But IIRC <code>2</code> in lean3 is syntactically equivalent to <code>1+1</code>, and in lean4 it's not)</p>",
        "id": 327604330,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1676309300
    },
    {
        "content": "<p><del><code>rw [←  one_add_one_eq_two]</code> may helps</del> (edit: seems it not helps, but you can <code>change x * 1 = x</code> directly)</p>",
        "id": 327604589,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1676309388
    },
    {
        "content": "<p><code>rw [← one_add_one_eq_two, Nat.add_one, Nat.pred_succ]</code> also works.</p>",
        "id": 327610584,
        "sender_full_name": "Yuyang Zhao",
        "timestamp": 1676311165
    },
    {
        "content": "<p><code>erw</code> also works. To summarize,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Cast.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">two'</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instOfNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">2</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddMonoidWithOne.toNatCast.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">AddCommMonoidWithOne.toAddMonoidWithOne.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">NonAssocSemiring.toAddCommMonoidWithOne.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span>\n            <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Semiring.toNonAssocSemiring.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat.semiring</span><span class=\"o\">))))</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">instAtLeastTwoHAddNatInstHAddInstAddNatOfNat</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span>\n          <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">0</span><span class=\"o\">)))))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">two'</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">pred_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">two'</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">two'</span>\n  <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pred_succ</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">two'</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">two'</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">one_add_one_eq_two</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_one</span><span class=\"o\">,</span> <span class=\"n\">Nat.pred_succ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat.pred</span> <span class=\"n\">two'</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">two'</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">pred_succ</span> <span class=\"mi\">1</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 327623323,
        "sender_full_name": "Richard Copley",
        "timestamp": 1676314937
    },
    {
        "content": "<p>(I think this is unfortunate)</p>",
        "id": 327624180,
        "sender_full_name": "Richard Copley",
        "timestamp": 1676315189
    }
]