[
    {
        "content": "<p>If I have a type which has a <code>Repr</code> instance, and I have a custom unexpander for (say) a constructor of that type, is it possible to get the results of <code>#eval</code> printed using the unexpander? </p>\n<p>For instance</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Foo.bar</span> <span class=\"c1\">-- prints as \"Foo.bar\"</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Custom\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Custom</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Foo.bar</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Custom</span> <span class=\"c1\">-- prints as \"Foo.bar\" as expected</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[app_unexpander Foo.bar]</span>\n<span class=\"kd\">def</span> <span class=\"n\">unexpand_sub</span> <span class=\"o\">:</span> <span class=\"n\">Unexpander</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Custom</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">Custom</span> <span class=\"c1\">-- Prints as  \"Custom\"</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Custom</span> <span class=\"c1\">-- still prints as \"Foo.bar\", but would like it to print as \"Custom\"</span>\n</code></pre></div>",
        "id": 327074380,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1676041516
    },
    {
        "content": "<p>I think the answer is 'no', because <code>#eval</code> evaluates a closed term into a value and completely forgets about the input syntax or <code>Expr</code>, whereas unexpanders operate on syntax trees.</p>",
        "id": 327110561,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1676051063
    },
    {
        "content": "<p>you could use <code>quote</code> to make a syntax and then unexpand it, though</p>",
        "id": 327111506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676051357
    },
    {
        "content": "<p>but basically the thing that turns the evaluated result into a string is the <code>Repr</code> instance, so any unexpander smarts would have to go in that implementation, assuming you don't want to add any extra logic to the <code>#eval</code> invocation itself</p>",
        "id": 327111774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676051432
    },
    {
        "content": "<p>Right, makes sense. Thanks for the inputs!</p>",
        "id": 327120748,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1676054096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"319223\">Logan Murphy</span> has marked this topic as resolved.</p>",
        "id": 327120755,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676054099
    }
]