[
    {
        "content": "<p>for a <code>i : Fin n</code>, if you cast with <code>h : n = m</code>, the cast can be pushed into the structure like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">push_cast</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">a.2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>\n<p>is there a better way to deal with this sort of situation? marking this lemma <code>simp</code> solved my particular problem but I'm not sure if I'm totally off base.</p>",
        "id": 369566709,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687758795
    },
    {
        "content": "<p>I'm trying to reduce the number of <code>suffices ...</code> I write <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 369566788,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687758819
    },
    {
        "content": "<p>I find it's usually better to avoid explicit rewrites like this and instead develop API for rewriting type arguments in a more controlled way. In this case, there's already <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fin.cast#doc\">docs4#Fin.cast</a></p>",
        "id": 369570030,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687759660
    },
    {
        "content": "<p>The fact <code>Fin.cast</code> gives an order isomorphism complicates things a bit, but it also unlocks further simplification opportunities.</p>",
        "id": 369570641,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687759808
    },
    {
        "content": "<p>Yeah. I'm working in Std right now so I will need to move the Fin.cast infrastructure up to Std (this is fine).</p>",
        "id": 369570764,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687759843
    },
    {
        "content": "<p>oh, actually, it is not fine, since Fin.cast is an order isomorphism. hm</p>",
        "id": 369571623,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687760096
    },
    {
        "content": "<p>I don't <em>think</em> we're trying to move all of that infrastructure up to Std yet. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thoughts? maybe something akin to <code>push_cast</code> (but not <code>@[simp]</code>) is a reasonable addition to Std.</p>",
        "id": 369571962,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687760202
    },
    {
        "content": "<p>Fin.cast can be a function</p>",
        "id": 369572061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687760244
    },
    {
        "content": "<p>and then rename the mathlib isomorphism?</p>",
        "id": 369572303,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687760313
    },
    {
        "content": "<p>once upon a time it was a function, but people started upgrading functions to equivs because it is notationally almost invisible, although this is less true in lean 4 than in lean 3</p>",
        "id": 369572315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687760319
    },
    {
        "content": "<p>it's only used as a function most of the time, IMO it was the wrong call to make it the default</p>",
        "id": 369572483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687760374
    },
    {
        "content": "<p>Adding to this, I'd suggest that we rename mathlib's <code>Fin.cast</code> to say <code>Fin.castIso</code> or <code>Fin.castEquiv</code>, keep the API surrounding it, and add a lemma that <code>Fin.cast n h = Fin.castEquiv n h</code>. There are places where you do want the equivalence version.</p>",
        "id": 369575945,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687761329
    },
    {
        "content": "<p>I probably can't do the refactor today, so if someone is feeling like doing a little refactor feel free :) otherwise I'll work on it tomorrow.</p>",
        "id": 369576771,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687761559
    }
]