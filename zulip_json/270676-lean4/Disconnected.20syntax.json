[
    {
        "content": "<p>Dear All,</p>\n<p>is it possible to throw an error at a disconnected syntax?  Here is an example of what I would like to achieve:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Tactic.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"twoErrors\"</span> <span class=\"n\">e1</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"~\"</span> <span class=\"n\">e2</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">throwErrorAt</span> <span class=\"n\">e1</span> <span class=\"s2\">\"Can there be a red squiggle also under {e2}\"</span>\n  <span class=\"n\">throwErrorAt</span> <span class=\"n\">e2</span> <span class=\"s2\">\"I would like to also underline e2\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">twoErrors</span> <span class=\"mi\">0</span> <span class=\"bp\">~</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- Can there be a red squiggle also under 1</span>\n</code></pre></div>\n<p>Thanks!</p>",
        "id": 384519808,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691939284
    },
    {
        "content": "<p>I see that it is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">]</span> <span class=\"c1\">-- both underscores are underlined, and nothing else</span>\n</code></pre></div>\n<p>but I still do not know how to achieve it myself!  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 384524130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691940246
    },
    {
        "content": "<p>don't use <code>throwErrorAt</code>, that has control flow effects. Use <code>logError</code> if you just want to add a squiggle</p>",
        "id": 384546036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691946565
    },
    {
        "content": "<p>note that I have said something along the lines of \"<code>logError</code> considered harmful\" in the past though, because it interacts in surprising ways with control flow combinators like <code>try</code> / <code>repeat</code></p>",
        "id": 384546327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691946658
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logError</span> <span class=\"s2\">\"you can't foo right now\"</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"bar\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">throwError</span> <span class=\"s2\">\"you can't bar right now\"</span>\n\n<span class=\"c1\">-- one nice thing about `logError`</span>\n<span class=\"c1\">-- is that you can keep giving errors after the tactic</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">bar</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- one not nice thing about `logError`</span>\n<span class=\"c1\">-- is that you can't suppress the error, at least with normal combinators</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">try</span> <span class=\"n\">bar</span>\n  <span class=\"n\">try</span> <span class=\"n\">foo</span> <span class=\"c1\">-- error</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 384547051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691946898
    },
    {
        "content": "<p>Mario, thank you very much!  I like this and I am planning to then log the errors and then throw an error, since I do not want to continue!</p>",
        "id": 384556980,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691950371
    },
    {
        "content": "<p>Basically, my use-case is that I want to throw an error when the user passes a list of terms, some of which are not suitable, and underline the unsuitable ones, but definitely throw an error after underlining!</p>",
        "id": 384557127,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691950421
    },
    {
        "content": "<p>Here is a sample of something similar to what I had in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">TSyntax</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"s2\">\"evens?\"</span> <span class=\"n\">nats</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">num</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">odds</span> <span class=\"o\">:=</span> <span class=\"n\">nats.getElems.filter</span> <span class=\"o\">(</span><span class=\"n\">getNat</span> <span class=\"bp\">·</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"n\">guard</span> <span class=\"o\">(</span><span class=\"n\">odds.size</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">*&gt;</span> <span class=\"n\">logInfoAt</span> <span class=\"n\">nm</span> <span class=\"s2\">\"All even!\"</span> <span class=\"bp\">&lt;|&gt;</span>\n    <span class=\"n\">odds.mapM</span> <span class=\"o\">(</span><span class=\"n\">logErrorAt</span> <span class=\"bp\">·</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">*&gt;</span>\n    <span class=\"n\">throwErrorAt</span> <span class=\"n\">nm</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The underlined numbers {odds} are odd!\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">evens</span><span class=\"bp\">?</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"mi\">10001</span>  <span class=\"c1\">-- The underlined numbers [1, 3, 5, 10001] are odd!</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">evens</span><span class=\"bp\">?</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">1000</span>    <span class=\"c1\">--  All even!</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>",
        "id": 384665185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691994767
    },
    {
        "content": "<p>Here is the \"guess the sequence\" version of the above:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"c1\">--  SPOILER ALERT: do not look at the implementation!  Go to the last line</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"n\">nm</span><span class=\"o\">:</span><span class=\"s2\">\"guess_the_next_number!\"</span> <span class=\"n\">nats</span><span class=\"o\">:(</span><span class=\"n\">colGt</span> <span class=\"n\">num</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"o\">(</span><span class=\"n\">data</span><span class=\"o\">,</span> <span class=\"n\">incorrects</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">con</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">for</span> <span class=\"n\">elt</span> <span class=\"k\">in</span> <span class=\"n\">nats.getElems</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">elt.getNat</span> <span class=\"bp\">!=</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">con</span> <span class=\"k\">then</span>\n      <span class=\"n\">logErrorAt</span> <span class=\"n\">elt</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n      <span class=\"k\">if</span> <span class=\"n\">con</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"k\">then</span> <span class=\"n\">data</span> <span class=\"o\">:=</span> <span class=\"n\">data.push</span> <span class=\"n\">elt</span> <span class=\"k\">else</span> <span class=\"n\">incorrects</span> <span class=\"o\">:=</span> <span class=\"n\">incorrects.push</span> <span class=\"n\">elt</span>\n    <span class=\"n\">con</span> <span class=\"o\">:=</span> <span class=\"n\">con</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">data.size</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"k\">then</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The sequence begins with 1, 2, 4, 8.\"</span> <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n  <span class=\"k\">match</span> <span class=\"n\">incorrects.size</span><span class=\"o\">,</span> <span class=\"n\">nats.getElems.size</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logInfoAt</span> <span class=\"n\">nm</span>\n                <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"k\">then</span> <span class=\"n\">init</span> <span class=\"bp\">++</span> <span class=\"s2\">\" Make a guess!\"</span>\n                 <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span> <span class=\"k\">then</span> <span class=\"s2\">\"Make a guess!\"</span>\n                 <span class=\"k\">else</span> <span class=\"s2\">\"🎉 Guess accomplished!  Keep guessing, if you want\"</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">incorrects.mapM</span> <span class=\"o\">(</span><span class=\"n\">logErrorAt</span> <span class=\"bp\">·</span> <span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"bp\">*&gt;</span>\n              <span class=\"n\">throwErrorAt</span> <span class=\"n\">nm</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The underlined numbers {data ++ incorrects} are wrong!\"</span>\n\n<span class=\"c1\">-- avoid looking at the implementation above!</span>\n\n<span class=\"n\">guess_the_next_number</span><span class=\"bp\">!</span>\n</code></pre></div>",
        "id": 384703640,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1692004453
    }
]