[
    {
        "content": "<p>I've been trying to call Rust code from Lean the last couple of days and just can't get it to work. I fundamentally don't understand what I'm doing, so I hope somebody can point me in the right direction.</p>\n<p>My setup is as follows:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Directory Structure</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>lean-egg/\n  lakefile.lean\n  Lean/\n    LeanEgg.lean\n    Main.lean\n    LeanEgg/Basic.lean\n  C/ffi.c\n  Rust/\n    Cargo.toml\n    src/lib.rs\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p><a href=\"http://lib.rs\">lib.rs</a>, ffi.c and Basic.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">rust_test</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u8</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;lean/lean.h&gt;</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"nf\">rust_test</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">extern</span> <span class=\"s2\">\"rust_test\"</span><span class=\"kd\">]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">rustTest</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span> <span class=\"bp\">→</span> <span class=\"n\">UInt8</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Cargo.toml and lakefile.lean</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"egg-for-lean\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"staticlib\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">[dependencies]</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"c1\">-- Cf. https://github.com/lurk-lab/RustFFI.lean</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">egg</span><span class=\"bp\">»</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">LeanEgg</span> <span class=\"n\">where</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Lean\"</span>\n  <span class=\"n\">precompileModules</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">srcDir</span> <span class=\"o\">:=</span> <span class=\"s2\">\"Lean\"</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">ffiC</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ffi.c\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">ffiO</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ffi.o\"</span>\n\n<span class=\"n\">target</span> <span class=\"n\">importTarget</span> <span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">oFile</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.buildDir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"c\"</span> <span class=\"bp\">/</span> <span class=\"n\">ffiO</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcJob</span> <span class=\"bp\">←</span> <span class=\"n\">inputFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"C\"</span> <span class=\"bp\">/</span> <span class=\"n\">ffiC</span>\n  <span class=\"n\">buildFileAfterDep</span> <span class=\"n\">oFile</span> <span class=\"n\">srcJob</span> <span class=\"k\">fun</span> <span class=\"n\">srcFile</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">flags</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-I\"</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLeanIncludeDir</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">]</span>\n    <span class=\"n\">compileO</span> <span class=\"n\">ffiC</span> <span class=\"n\">oFile</span> <span class=\"n\">srcFile</span> <span class=\"n\">flags</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">ffi</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"ffi\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">job</span> <span class=\"bp\">←</span> <span class=\"n\">fetch</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.target</span> <span class=\"bp\">``</span><span class=\"n\">importTarget</span>\n  <span class=\"n\">buildStaticLib</span> <span class=\"o\">(</span><span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">job</span><span class=\"o\">]</span>\n\n<span class=\"n\">extern_lib</span> <span class=\"n\">egg_for_lean</span> <span class=\"n\">pkg</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">proc</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"cargo\"</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"build\"</span><span class=\"o\">,</span> <span class=\"s2\">\"--release\"</span><span class=\"o\">],</span> <span class=\"n\">cwd</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Rust\"</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">nameToStaticLib</span> <span class=\"s2\">\"egg_for_lean\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">srcPath</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"Rust\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"target\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"release\"</span> <span class=\"bp\">/</span> <span class=\"n\">name</span>\n  <span class=\"n\">IO.FS.createDirAll</span> <span class=\"n\">pkg.nativeLibDir</span>\n  <span class=\"k\">let</span> <span class=\"n\">tgtPath</span> <span class=\"o\">:=</span> <span class=\"n\">pkg.nativeLibDir</span> <span class=\"bp\">/</span> <span class=\"n\">name</span>\n  <span class=\"n\">IO.FS.writeBinFile</span> <span class=\"n\">tgtPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.FS.readBinFile</span> <span class=\"n\">srcPath</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">tgtPath</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>\n<hr>\n<p>Now in <code>Main.lean</code> I do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">LeanEgg</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Hello world!\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">rustTest</span> <span class=\"mi\">123</span>\n</code></pre></div>\n<p>... which produces <code>Lean server printed an error: dyld[29803]: missing symbol called</code> on the <code>#eval</code>. If I set <code>precompileModules := false</code> in <code>lakefile.lean</code>, the error changes to:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Lean server printed an error: libc++abi: terminating due to uncaught exception of type lean::exception: could not find native implementation of external declaration 'rustTest' (symbols 'l_rustTest___boxed' or 'l_rustTest')\n</code></pre></div>\n<p>What am I doing wrong?</p>",
        "id": 401518427,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699715916
    },
    {
        "content": "<p>I actually don't see the reason. <br>\nCan you try <code>lake build</code> instead of <code>#eval</code>? It seems to be an interpreter problem.</p>\n<hr>\n<p>You can see <a href=\"https://github.com/SchrodingerZhu/hashbrown4lean\">https://github.com/SchrodingerZhu/hashbrown4lean</a> as an example.</p>",
        "id": 401564605,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1699756512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> Thanks for the hint! Indeed <code>lake build</code> fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ lake build\nstderr:\n    Finished release [optimized] target(s) in 0.00s\n[3/8] Building LeanEgg\n[6/8] Building Main\n[7/8] Compiling Main\n[8/8] Linking test\nerror: &gt; /Users/marcus/.elan/toolchains/leanprover--lean4---nightly/bin/leanc -o ./build/bin/test ./build/ir/Main.o ./build/ir/LeanEgg/Basic.o ./build/ir/LeanEgg.o ./build/lib/libegg_for_lean.a ./build/lib/libffi.a\nerror: stderr:\nld64.lld: warning: ./build/lib/libegg_for_lean.a(egg_for_lean-c19ef5f08729e256.egg_for_lean.9745f57065a7532b-cgu.0.rcgu.o) has architecture arm64 which is incompatible with target architecture x86_64\nld64.lld: error: undefined symbol: _rust_test\n&gt;&gt;&gt; referenced by ./build/ir/LeanEgg/Basic.o:(symbol _l_rustTest___boxed+0x1f)\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nerror: external command `/Users/marcus/.elan/toolchains/leanprover--lean4---nightly/bin/leanc` exited with code 1\n</code></pre></div>\n<p>This looks like it might be related to the problem addressed in <a href=\"#narrow/stream/270676-lean4/topic/elan.20toolchains.20broken.20on.20macos.20M1/near/306122168\">this thread</a>. That is, <code>leanc</code>seems to think that it should build for x86, even though I'm on Apple Silicon:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ arch\narm64\n\n$ leanc --version\nclang version 15.0.1 (https://github.com/llvm/llvm-project b73d2c8c720a8c8e6e73b11be4e27afa6cb75bdf)\nTarget: x86_64-apple-darwin23.0.0\nThread model: posix\nInstalledDir: /Users/marcus/.elan/toolchains/leanprover--lean4---nightly/bin\n</code></pre></div>\n<p>I'm not sure why I'm seeing this behaviour though, as the linked thread concludes with the problem being fixed.</p>",
        "id": 401620384,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699801950
    },
    {
        "content": "<p>Did you somehow install an x64 elan?</p>",
        "id": 401621730,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699803011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20FFI.20to.20Rust/near/401621730\">said</a>:</p>\n<blockquote>\n<p>Did you somehow install an x64 elan?</p>\n</blockquote>\n<p><del>How could I find that out?</del> Apparently, yes.</p>",
        "id": 401621791,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699803087
    },
    {
        "content": "<p>so the thing is you are actually running a emulated x64 leanc on Apple?</p>",
        "id": 401627513,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1699809030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/270676-lean4/topic/Help.20with.20FFI.20to.20Rust/near/401627513\">said</a>:</p>\n<blockquote>\n<p>so the thing is you are actually running a emulated x64 leanc on Apple?</p>\n</blockquote>\n<p>Yup, that seems to have been the problem. Sorry for the noise.</p>",
        "id": 401636424,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699818983
    }
]