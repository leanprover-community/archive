[
    {
        "content": "<p>Is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">name</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">name.getString</span><span class=\"bp\">!</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.fvar</span> <span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var.name.getString</span><span class=\"bp\">!</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"name*\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">n</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"term under ctor {Expr.ctorName nExpr}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">used</span> <span class=\"o\">:=</span> <span class=\"n\">name</span> <span class=\"n\">nExpr</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"n\">used.get</span><span class=\"bp\">!</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"g\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c1\">-- Fails. f is Expr.fvar but `var.name.getString!` returns \"\"</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"f\"</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 390679362,
        "sender_full_name": "Ben",
        "timestamp": 1694596159
    },
    {
        "content": "<p>There's a panic in your code, from calling <code>getString!</code>, and when there's a panic functions tend to return <code>default</code> values. What this function does is give you the last string component in a <code>Name</code>, but the problem is that the <code>Name</code> inside of an <code>fvar</code> ends in a number, not a string.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">name</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">name</span>\n<span class=\"bp\">|</span> <span class=\"n\">Expr.fvar</span> <span class=\"n\">var</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">var.name</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"name*\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">n</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"term = {nExpr}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">used</span> <span class=\"o\">:=</span> <span class=\"n\">name</span> <span class=\"n\">nExpr</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"used = {used}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{used.get!}\"</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">name</span><span class=\"bp\">*</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- \"_uniq.2706\" : String</span>\n<span class=\"c1\">-- term = f</span>\n<span class=\"c1\">-- used = some (_uniq.2676)</span>\n</code></pre></div>",
        "id": 390682249,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694597168
    },
    {
        "content": "<p>I am not sure that this is a bug.  If you look at the doc-string of <code>fvar</code> it says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">When</span> <span class=\"s2\">\"visiting\"</span> <span class=\"n\">the</span> <span class=\"n\">body</span> <span class=\"n\">of</span> <span class=\"n\">a</span> <span class=\"n\">binding</span> <span class=\"n\">expression</span> <span class=\"o\">(</span><span class=\"n\">i.e.</span> <span class=\"bp\">`</span><span class=\"n\">lam</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">forallE</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"n\">or</span> <span class=\"bp\">`</span><span class=\"n\">letE</span><span class=\"bp\">`</span><span class=\"o\">),</span>\n  <span class=\"n\">bound</span> <span class=\"kd\">variables</span> <span class=\"n\">are</span> <span class=\"n\">converted</span> <span class=\"n\">into</span> <span class=\"n\">free</span> <span class=\"kd\">variables</span> <span class=\"n\">using</span> <span class=\"n\">a</span> <span class=\"n\">unique</span> <span class=\"n\">identifier</span><span class=\"o\">,</span>\n  <span class=\"n\">and</span> <span class=\"n\">their</span> <span class=\"n\">user</span><span class=\"bp\">-</span><span class=\"n\">facing</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">(</span><span class=\"n\">for</span> <span class=\"bp\">`</span><span class=\"n\">LetE</span><span class=\"bp\">`</span><span class=\"o\">),</span> <span class=\"n\">and</span> <span class=\"n\">binder</span> <span class=\"n\">annotation</span>\n  <span class=\"n\">are</span> <span class=\"n\">stored</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">LocalContext</span><span class=\"bp\">`.</span>\n</code></pre></div>\n<p>so, the name appears to be stored in <code>LocalContext</code>, but your code does not access the local context, so I do not think that it has any way of knowing that <code>f</code> is <code>f</code>!</p>",
        "id": 390682275,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1694597178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"457144\">@Ben</span> I think you're looking for the <code>userName</code> of an fvar:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">Name</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.const</span> <span class=\"n\">name</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">name</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Expr.fvar</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">name.getUserName</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">none</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"name*\"</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">nExpr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">n</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"term = {nExpr}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">used</span> <span class=\"bp\">←</span> <span class=\"n\">name</span> <span class=\"n\">nExpr</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"used = {used}\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">mkStrLit</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{used.getD \"</span><span class=\"o\">(</span><span class=\"n\">no</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"s2\">\"}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">name</span><span class=\"bp\">*</span> <span class=\"n\">g</span>\n<span class=\"c1\">-- \"g\" : String</span>\n<span class=\"k\">#check</span> <span class=\"n\">name</span><span class=\"bp\">*</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- \"f\" : String</span>\n</code></pre></div>",
        "id": 390682744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694597350
    },
    {
        "content": "<p>Ah I see. Coming from Rust, when I saw the word \"panic\" I was expecting some kind of crash rather than it to be defaulted. Your <code>userName</code> change works perfectly!</p>",
        "id": 390684110,
        "sender_full_name": "Ben",
        "timestamp": 1694597844
    },
    {
        "content": "<p>Is there an example expression of <code>Expr.fvar</code> where <code>FVarId.name</code> is a string?</p>",
        "id": 390684360,
        "sender_full_name": "Ben",
        "timestamp": 1694597933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> has marked this topic as resolved.</p>",
        "id": 390684401,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694597949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Expr.2Efvar.20var.20has.20empty.20name/near/390684110\">said</a>:</p>\n<blockquote>\n<p>Ah I see. Coming from Rust, when I saw the word \"panic\" I was expecting some kind of crash rather than it to be defaulted. Your <code>userName</code> change works perfectly!</p>\n</blockquote>\n<p>At least in VS Code, there's a popup that says a panic has happened (make sure not to ignore them!)</p>",
        "id": 390686096,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694598599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"457144\">Ben</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Expr.2Efvar.20var.20has.20empty.20name/near/390684360\">said</a>:</p>\n<blockquote>\n<p>Is there an example expression of <code>Expr.fvar</code> where <code>FVarId.name</code> is a string?</p>\n</blockquote>\n<p>Every <code>fvar</code> generated by Lean has an id of the form <code>_uniq.NNN</code>, as far as I've ever known.</p>",
        "id": 390686214,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694598628
    }
]