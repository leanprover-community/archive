[
    {
        "content": "<p>In certain cases, trailing comments are not trimmed when formatting syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"fmt \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.formatCategory</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fmt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A comment a few lines below</span>\n</code></pre></div>\n<p>The logged info is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- A comment a few lines below</span>\n</code></pre></div>\n<p>Note that this doesn't happen with just <code>fmt h</code>; the named argument is necessary.</p>\n<p>(1) Is this intentional (or at least inevitable)? Should I open an issue?</p>\n<p>(2) Is there a simple workaround to trim the comments? (I couldn't find anything with Loogle.)</p>\n<p>It has implications for <code>Try this:</code> suggestions, such as <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/.02klzzwxh.3A0002.03.20suggestion.20includes.20comments\">#std4 &gt; <code>simp?</code> suggestion includes comments</a>.</p>",
        "id": 401253366,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699572542
    },
    {
        "content": "<p>Re: (2), I've just found <code>Lean.Syntax.unsetTrailing</code>, so I guess the question is really: is removing trailing info the right move when replacing syntax in <code>Try this:</code> suggestions?</p>",
        "id": 401253690,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699572747
    },
    {
        "content": "<p>I wonder if there should be some colGt-like-logic for trailing comments, if that's possible? In your example, I don't think anyone would consider that comment as being associated to that term. This is just a side thought I had.</p>\n<p>I think using <code>unsetTrailing</code> is sort of right (I've used it for this purpose at least). If you use it for <code>Try this:</code> suggestions though, does it end up deleting that comment?</p>",
        "id": 401259568,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699576181
    },
    {
        "content": "<p>The try this handler is already supposed to support this situation</p>",
        "id": 401259738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576249
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Formatting.20issue.3A.20trailing.20comments.20not.20trimmed/near/401259568\">said</a>:</p>\n<blockquote>\n<p>If you use it for <code>Try this:</code> suggestions though, does it end up deleting that comment?</p>\n</blockquote>\n<p>No, it doesn't; if you insert a suggestion with a trailing comment like this, you get two comments, as in <a class=\"stream-topic\" data-stream-id=\"348111\" href=\"/#narrow/stream/348111-std4/topic/.02klzzwxh.3A0002.03.20suggestion.20includes.20comments\">#std4 &gt; <code>simp?</code> suggestion includes comments</a> . I'm a bit confused as to why it considers it part of the syntax for formatting purposes, but not part of the syntax that gets replaced...</p>",
        "id": 401260115,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699576428
    },
    {
        "content": "<p>it half-works: it will not delete the comment, but it will use trailing whitespace from the replacement syntax, so the comment gets duplicated here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"fmt \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"n\">stx</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fmt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- A comment a few lines below</span>\n</code></pre></div>",
        "id": 401260141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576440
    },
    {
        "content": "<p>you have to call <code>unsetTrailing</code> yourself to get the desired behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"fmt \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(⟨</span><span class=\"n\">stx.raw.unsetTrailing</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 401260367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576535
    },
    {
        "content": "<p>I'm inclined to say this is working as intended; normally you wouldn't spit an input syntax directly back out as a try this, and even if you do it might be wrapped in other stuff, so I don't think it can be <code>addSuggestion</code>'s responsibility to clean it up</p>",
        "id": 401260584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576638
    },
    {
        "content": "<p>I don't know; it seems weird that <code>addSuggestion</code> is not idempotent by default</p>",
        "id": 401260768,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699576713
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"fmt \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">([</span><span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">]))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">fmt</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which has the even worse result</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Try</span> <span class=\"n\">this</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n      <span class=\"c1\">-- A comment a few lines below]</span>\n</code></pre></div>",
        "id": 401260806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576727
    },
    {
        "content": "<p>Is there an example where preprocessing the argument to <code>addSuggestion</code> with <code>unsetTrailing</code> produces undesired behavior?</p>",
        "id": 401261063,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699576824
    },
    {
        "content": "<p>well you might want to put a comment in the replacement</p>",
        "id": 401261151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576871
    },
    {
        "content": "<p>Ah right</p>",
        "id": 401261193,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699576892
    },
    {
        "content": "<p>in general <code>Syntax</code> lets you put comments anywhere before, inside, or after the tactic</p>",
        "id": 401261234,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576910
    },
    {
        "content": "<p>although as you can see line comments don't play well with outer syntax (note that the <code>]</code> is commented out in my example)</p>",
        "id": 401261349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699576956
    },
    {
        "content": "<p>I think what’s weird to me is the inconsistency between the range we’re replacing (trimmed) and what we’re writing into that range (untrimmed)</p>",
        "id": 401261836,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699577197
    },
    {
        "content": "<p>I’m not sure what the best way to handle it is, but I do worry this will become another minor responsibility for adding suggestions (“oh, you forgot <code>unsetTrailing</code>”)</p>",
        "id": 401261901,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699577232
    },
    {
        "content": "<p>unlike the replacement, the source ref is pretty much always going to be a source span, so comment trimming is more sensible there</p>",
        "id": 401261918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577247
    },
    {
        "content": "<p>this is probably true</p>",
        "id": 401261931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577259
    },
    {
        "content": "<p>Although we can get a sense of this by auditing all existing uses</p>",
        "id": 401262029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577287
    },
    {
        "content": "<p>hmm, what about an argument <code>(trimTrailing := true)</code> to <code>addSuggestion</code>? so if you really need to add a comment at the end, you can, but by default you don’t get bitten</p>",
        "id": 401262619,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699577529
    },
    {
        "content": "<p>Again, what do existing uses look like? How many of them are currently making this mistake?</p>",
        "id": 401262906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577672
    },
    {
        "content": "<p>True, I’ll check it out (unless I’m beaten to it) (later, I’m away from my computer)</p>",
        "id": 401262949,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699577692
    },
    {
        "content": "<p>I suspect the issue is not restricted to <code>addSuggestion</code>, almost any place you directly echo user syntax is susceptible (e.g. <code>simp?</code>)</p>",
        "id": 401263013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577721
    },
    {
        "content": "<p>Maybe the real question is “why are comments included in the trailing info in some situations but not others”</p>",
        "id": 401263267,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699577839
    },
    {
        "content": "<p>that depends on the situation. For example mathport is one example of echoing user syntax and it absolutely does want to preserve comments</p>",
        "id": 401263465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577914
    },
    {
        "content": "<p>(Actually, is it present in the syntax in both cases, but just formatted differently in different cases? I haven’t checked.)</p>",
        "id": 401263468,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699577915
    },
    {
        "content": "<p>Most synthetic tactic exprs don't have any comments to preserve in the first place, and I would expect most <code>addSuggestion</code> calls to be of this form</p>",
        "id": 401263600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699577985
    },
    {
        "content": "<p>I actually think this might be an underlying pretty-printing issue. I’m not sure what the behavior <em>should</em> be, but it’s inconsistent as is. Check it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"show \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">stx</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"parse:{indentD &lt;| if false then reprPrec stx 0 else \"</span><span class=\"n\">hidden</span><span class=\"s2\">\"}</span>\n<span class=\"s2\">fmt:{indentD &lt;|← PrettyPrinter.formatCategory `term stx}</span>\n<span class=\"s2\">pp:{indentD &lt;|← PrettyPrinter.ppCategory `term stx}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">show</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- a comment (not included in pp)</span>\n  <span class=\"k\">show</span> <span class=\"n\">h</span> <span class=\"o\">()</span>\n  <span class=\"c1\">-- a comment (included in pp)</span>\n  <span class=\"k\">show</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- a comment (included in pp)</span>\n  <span class=\"k\">show</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"c1\">-- a comment (not included in pp)</span>\n  <span class=\"k\">show</span> <span class=\"n\">Id.run</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"n\">return</span> <span class=\"o\">())</span>\n  <span class=\"c1\">-- a comment (included in pp)</span>\n</code></pre></div>\n<p>(Change the condition after <code>parse:</code> to see the raw syntax.)</p>\n<p>Note that trailing info is always present in the <code>format</code>ted versions. It’s just the pretty-printing that sometimes removes trailing info.</p>\n<p>Based on the last examples, it seems like maybe the parenthesizer is leaving trailing info if possible, but trimming it if it re-parenthesizes things. But the first example doesn’t appear to involve any re-parenthesization, so maybe this is off base.</p>",
        "id": 401277201,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699585302
    },
    {
        "content": "<p>(I better change the name of the topic…I’ll do so when I’m not on mobile.)</p>",
        "id": 401277766,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699585488
    }
]