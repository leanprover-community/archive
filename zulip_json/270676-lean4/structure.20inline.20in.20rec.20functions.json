[
    {
        "content": "<p>there's a pretty common pattern in <code>String</code> code of inlining the fields of <code>Substring</code> in the implementations of certain functions, presumably because it avoids the cost of constructing and deconstructing the structures. But this manual inlining is a bit of a pain and makes it harder to prove anything about their behavior... do we think this is a reasonable future optimization for the compiler to perform? it doesn't seem <em>too</em> complicated in the common case.</p>",
        "id": 371027825,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688109696
    },
    {
        "content": "<p>If the Substring is stack-allocated by an escape analysis, LLVM should do the destructuring itself I think. Or maybe it only does if the symbol is internal</p>",
        "id": 371036093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688111418
    },
    {
        "content": "<p>oh cool!</p>",
        "id": 371036176,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688111444
    },
    {
        "content": "<p>Then maybe I should stop manually inlining these substrings and do some tests instead <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 371036346,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688111475
    },
    {
        "content": "<p>Don't worry, I will do it if you don't</p>",
        "id": 371036420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111491
    },
    {
        "content": "<p>Note that I said \"an escape analysis\", we don't have one yet :)</p>",
        "id": 371036698,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688111539
    },
    {
        "content": "<p>I assume LLVM has an escape analysis on llvm ir, maybe the llvm backend of the compiler is sufficient to get this optimization automatically??</p>",
        "id": 371037458,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688111717
    },
    {
        "content": "<p>I am fairly pessimistic about LLVM's ability to remove lean allocations</p>",
        "id": 371037673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688111768
    },
    {
        "content": "<p>looking at the code, <code>lean_alloc_small</code> isn't even an LLVM approved malloc, so LLVM would be duty-bound to preserve any effects on the local allocator caused by the allocation function</p>",
        "id": 371039178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688112085
    },
    {
        "content": "<p>I believe this would require use of the <code>alloc-family</code> LLVM IR annotation (<a href=\"https://github.com/llvm/llvm-project/blob/main/llvm/test/Transforms/InstCombine/out-of-tree-allocator-optimizes-away.ll\">e.g.</a>), which <a href=\"https://github.com/search?q=repo%3Allvm%2Fllvm-project+alloc-family+path%3Aclang&amp;type=code\">doesn't</a> seem to be exposed by clang. So it would need to happen in the LLVM backend /cc <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> <span class=\"user-mention\" data-user-id=\"122318\">@Tobias Grosser</span></p>",
        "id": 371100684,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1688122834
    }
]