[
    {
        "content": "<p>Hello Everyone. I am a freshman in Lean4 and Theorem Proving, and I am reading Lean4 doc and am stuck in 10 type classes at Array Add. The code with bugs is as below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Array.zipWithAux</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span> <span class=\"bp\">⬝</span> <span class=\"bp\">+</span> <span class=\"bp\">⬝</span> <span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Add.add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Add.add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>it said <br>\n\"expected token\" <br>\nin the first \\dot location, and <br>\n\"application type mismatch<br>\n  #[1, 2].add<br>\nargument<br>\n  #[1, 2]<br>\nhas type<br>\n  Array Nat: Type<br>\nbut is expected to have type<br>\n  Add (Array Nat): Type\" <br>\nin the first #eval part. <br>\nAre there any clues to debug?<br>\nthank you, guys......</p>",
        "id": 351945225,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1682192334
    },
    {
        "content": "<p>the issue is that you're using <code>zipWithAux</code> instead of <code>zipWith</code></p>",
        "id": 351946306,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682193081
    },
    {
        "content": "<p>well, it does not help even if I use Array.zipWith, it still gives exactly the same error message. <br>\n<a href=\"/user_uploads/3121/pr_W6aMsy_7CfMgv6Ee95MNC/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/pr_W6aMsy_7CfMgv6Ee95MNC/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/pr_W6aMsy_7CfMgv6Ee95MNC/image.png\"></a></div>",
        "id": 351946686,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1682193350
    },
    {
        "content": "<p>Oh, it looks like this is the wrong dot. Try writing the dots with <code>\\.</code></p>",
        "id": 351946856,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682193461
    },
    {
        "content": "<p>It's indeed confusing that there are two dots around: <code>\\.</code> gives <code>·</code> and <code>\\cdot</code> gives <code>⬝</code> which looks the same but is a different unicode character.</p>",
        "id": 351947040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682193584
    },
    {
        "content": "<p>You want the first one in this case.</p>",
        "id": 351947047,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682193594
    },
    {
        "content": "<p>Thank you a lot, but there are still some problem remaining. If I use the \\.  and write like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Array.zipWith</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>it will report with </p>\n<p>invalid binder annotation, type is not a class instance<br>\n  Add a</p>\n<p>at the first Add position.<br>\nso I try  with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Ex2</span>\n<span class=\"kd\">class</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Array.zipWith</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">Add.add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- #[4, 6]</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- #[4, 6]</span>\n</code></pre></div>\n<p>but in the part \"(· + ·)\" ,  it gives problem <br>\n\"<br>\nfailed to synthesize instance<br>\n  HAdd a a ?m.19196<br>\n\"</p>\n<p>still need some clues for debugging, is it the problem of Add-Type?<br>\nBut Thank your help first~</p>",
        "id": 351948106,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1682194239
    },
    {
        "content": "<p>I copied and pasted your code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Add</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Array.zipWith</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and it works perfectly fine for me.</p>",
        "id": 351948506,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682194472
    },
    {
        "content": "<p>Oh I see, you have redefeined <code>Add</code>.</p>",
        "id": 351948593,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682194522
    },
    {
        "content": "<p>The issue is that lean has no way of knowing about the notation <code>+</code> with your bespoke <code>Add</code> class.</p>",
        "id": 351948622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682194539
    },
    {
        "content": "<p>You either need to use the built-in <code>Add</code> class, or define the <code>+</code> notation</p>",
        "id": 351948639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682194551
    },
    {
        "content": "<p>Although if you try to define <code>+</code>, you are likely to hit some issues with notation overloading.</p>",
        "id": 351949046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682194751
    },
    {
        "content": "<p>Thanks, I understand. It is always required to specify the namespace if there are multiple eponymous classes. I debugged the code with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">_root_.Add</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:</span><span class=\"n\">_root_.Add</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">add</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">Array.zipWith</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">_root_.Add.add</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- #[4, 6]</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"bp\">+</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">]</span>\n<span class=\"c1\">-- #[4, 6]</span>\n</code></pre></div>\n<p>and it works smoothly now.<br>\nThank you very much.</p>",
        "id": 351956323,
        "sender_full_name": "Meizu Fan",
        "timestamp": 1682199292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609478\">Meizu Fan</span> has marked this topic as resolved.</p>",
        "id": 351959344,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682201481
    }
]