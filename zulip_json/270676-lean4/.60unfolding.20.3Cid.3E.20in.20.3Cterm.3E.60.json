[
    {
        "content": "<p>is it possible to implement an elaborator that changes the reducibility of a definition for some scope? as an example use case,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">MyM</span> <span class=\"o\">:=</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">StateM</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">MyM</span> <span class=\"o\">:=</span> <span class=\"n\">unfolding</span> <span class=\"n\">MyM</span> <span class=\"k\">in</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>yes, i can force the unfolding in this case with some careful type ascription, but it's a roundabout solution when ^is really what I want to say.</p>",
        "id": 398958887,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698435771
    },
    {
        "content": "<p>I don't think so in general, since <code>reducible</code> is one of those attributes that can only be added to declarations in the same module.</p>\n<p>Do you need arbitrary unfolding of the definition though? It looks like you're interested in inheriting instances by unfolding a single type definition.</p>",
        "id": 398961074,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698436948
    },
    {
        "content": "<p>Not in this case. Just been thinking about the controlled unfolding paper :P</p>",
        "id": 398961595,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1698437177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> Here's such an elaborator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"c1\">-- Adapted from Meta.reduce</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">unfoldNames</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">visit</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MonadCacheT</span> <span class=\"n\">Expr</span> <span class=\"n\">Expr</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n    <span class=\"n\">checkCache</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Core.withIncRecDepth</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">whnfHeadPred</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"bp\">..</span> <span class=\"o\">:=</span> <span class=\"n\">e'.getAppFn</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"n\">false</span>\n        <span class=\"n\">p</span> <span class=\"n\">n</span>\n      <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkAppN</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">e.getAppFn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e.getAppArgs.mapM</span> <span class=\"n\">visit</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">lambdaTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkLambdaFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">forallTelescope</span> <span class=\"n\">e</span> <span class=\"k\">fun</span> <span class=\"n\">xs</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">mkForallFVars</span> <span class=\"n\">xs</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"n\">s</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">mkProj</span> <span class=\"n\">n</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">visit</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n  <span class=\"n\">visit</span> <span class=\"n\">e</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span>\n\n<span class=\"sd\">/-- `unfolding% x y ... in t` unfolds the names `x`, `y`, ... in the expected type</span>\n<span class=\"sd\">before elaborating `t`. -/</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"unfolding% \"</span> <span class=\"n\">ns</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"s2\">\" in \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;=</span> <span class=\"n\">expectedType</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"bp\">←</span> <span class=\"n\">ns.mapM</span> <span class=\"n\">resolveGlobalConstNoOverloadWithInfo</span>\n  <span class=\"k\">let</span> <span class=\"n\">expectedType</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expectedType</span>\n  <span class=\"k\">let</span> <span class=\"n\">expectedType</span> <span class=\"bp\">←</span> <span class=\"n\">unfoldNames</span> <span class=\"n\">expectedType</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">ns.contains</span> <span class=\"n\">n</span>\n  <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">expectedType</span>\n\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyM</span> <span class=\"o\">:=</span> <span class=\"n\">ExceptT</span> <span class=\"n\">String</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">StateM</span> <span class=\"n\">Unit</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">MyM</span> <span class=\"o\">:=</span> <span class=\"n\">unfolding</span><span class=\"bp\">%</span> <span class=\"n\">MyM</span> <span class=\"k\">in</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 398964268,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698438524
    }
]