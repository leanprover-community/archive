[
    {
        "content": "<p>Does Qq have antiquotations for expressions, or only free variables? This doesn't seem to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fin.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 375751133,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689512466
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Antiquotations are assumed to have type <code>Q(_)</code>.</p>",
        "id": 375809189,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689528819
    },
    {
        "content": "<p>So is <code>$(x)</code> not the same as <code>$x</code>? Or is there a special rule above because <code>n</code> is a free variable of known type?</p>",
        "id": 375816894,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689531994
    },
    {
        "content": "<p>the latter</p>",
        "id": 375816959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689532039
    },
    {
        "content": "<p>Is this just a syntactic limitation, or are there good reasons to require it to use free variables?</p>",
        "id": 375829231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689537392
    },
    {
        "content": "<p>Hmm, I'm still confused here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"c1\">-- ok</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">)))</span> <span class=\"c1\">-- error, type mismatch, got `Nat` expected `QQ _`</span>\n</code></pre></div>",
        "id": 375842878,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689545375
    },
    {
        "content": "<p>This is understandably confusing.  <code>$x</code> is the same as <code>$(x)</code> (same syntax), but <code>$((x))</code> is different (contains a parenthesis node).  And quote4 transforms non-identifier antiquotations to <code>let x' := (x); q($x')</code>.</p>",
        "id": 375846166,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689547342
    },
    {
        "content": "<p>What does quote4 do to identifiers? Is there a transformation <code>toQ</code> such that <code>$(x)</code> is equivalent to <code>$(toQ x)</code>?</p>",
        "id": 375846712,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689547695
    },
    {
        "content": "<p>(i.e. for when <code>x : Nat</code>)</p>",
        "id": 375846737,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689547713
    },
    {
        "content": "<p>The automatic <code>toExpr</code> is only applied to variables in the local context.</p>",
        "id": 375846924,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689547808
    },
    {
        "content": "<p>What I meant to ask is, can this be made to work?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.toExpr</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 375847515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689548166
    },
    {
        "content": "<p>Or is <code>Lean.toExpr</code> the wrong function there?</p>",
        "id": 375847527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689548181
    },
    {
        "content": "<p>Ah, <code>q($((show Q(Nat) from Lean.toExpr x)))</code> works</p>",
        "id": 375847919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689548446
    },
    {
        "content": "<p>Do we have these functions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">toTypeExprQ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Sort</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.toLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}))</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.toTypeExpr</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toExprQ</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToLevel.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}]</span> <span class=\"o\">[</span><span class=\"n\">Lean.ToExpr</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">toTypeExprQ</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.toExpr</span> <span class=\"n\">x</span>\n\n <span class=\"c1\">-- works, but needs the :)</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">((</span><span class=\"n\">toExprQ</span> <span class=\"n\">x</span> <span class=\"o\">:)))</span>\n</code></pre></div>",
        "id": 375849005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689549110
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">toExprQ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">inferInstance</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 375850453,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689549885
    },
    {
        "content": "<p>The <code>ToLevel</code> instances are obviously brittle, so I'd rather tend to a new <code>ToExprQ Nat</code> type class extending <code>ToLevel</code>.</p>",
        "id": 375850535,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689549926
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/5952\">#5952</a> contains the defs above, feel free to make the refactor you're suggesting</p>",
        "id": 375851351,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1689550526
    },
    {
        "content": "<p>I've put in the refactor.</p>",
        "id": 375867525,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689558846
    }
]