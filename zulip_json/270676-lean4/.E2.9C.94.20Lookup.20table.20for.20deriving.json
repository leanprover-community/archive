[
    {
        "content": "<p>Can I look up what <code>deriving ...</code> does? For example, I would like to know what the default behavior of <code>deriving Lean.ToJson</code> is.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span>\n<span class=\"n\">deriving</span>  <span class=\"n\">Lean.ToJson</span>\n</code></pre></div>",
        "id": 401325407,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1699609153
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/How.20to.20read.20a.20private.20definition/near/240869066\">This thread</a> answers the same question for <code>BEq</code>. Unfortunately it's not trivial.</p>",
        "id": 401334498,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699610745
    },
    {
        "content": "<p>The short answer is: use <code>set_option trace.Elab.command true</code>. Then if you place your cursor at <code>inductive X</code> you can see the relevant information in the info view :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.command</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">ToJson</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">[Elab.command] inductive X</span>\n<span class=\"cm\">    | a</span>\n<span class=\"cm\">    | b</span>\n<span class=\"cm\">    deriving ToJson ▼</span>\n<span class=\"cm\">  [] private def toJsonX✝ (x✝ : @X✝) : Json✝ :=</span>\n<span class=\"cm\">        match x✝ with</span>\n<span class=\"cm\">        | @X.a =&gt; toJson✝ \"a\"</span>\n<span class=\"cm\">        | @X.b =&gt; toJson✝ \"b\"</span>\n<span class=\"cm\">  [] instance : Lean.ToJson✝ (@X✝) :=</span>\n<span class=\"cm\">        ⟨toJsonX✝⟩</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 401335033,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1699610872
    },
    {
        "content": "<p>Thanks! Out of curiosity, can I also see the code that produced this? I would assume there is a meta program for each type class, or is there more magic involved?!?</p>",
        "id": 401337088,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1699611354
    },
    {
        "content": "<p>Does <code>whatsnew in</code> before the declaration give the <code>deriving</code> information?</p>",
        "id": 401337518,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699611449
    },
    {
        "content": "<p>How exactly do I use this? This doesn't parse:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">ToJson</span>\n</code></pre></div>",
        "id": 401338592,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1699611725
    },
    {
        "content": "<p>Oh, it is in mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Util.WhatsNew</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">whatsnew</span> <span class=\"k\">in</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">b</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">ToJson</span>\n</code></pre></div>\n<p>you can open this in the Lean playground and see that it gives a long output!</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>whatsnew output</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">instToJsonX._cstage1</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.noConfusion._cstage1.</span><span class=\"o\">{</span><span class=\"n\">v._</span><span class=\"bp\">@.</span><span class=\"n\">_hyg.8</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.match_1.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._cstage1.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">constructor</span> <span class=\"n\">X.b</span> <span class=\"o\">:</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">X._sizeOf_1</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">instToJsonX._closed_1._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._cstage1</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.noConfusion._rarg._closed_1._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.match_1._</span><span class=\"bp\">@.</span><span class=\"n\">_hyg.16.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">X.noConfusion.</span><span class=\"o\">{</span><span class=\"n\">v._</span><span class=\"bp\">@.</span><span class=\"n\">_hyg.8</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._closed_4._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">constructor</span> <span class=\"n\">X.a</span> <span class=\"o\">:</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">instToJsonX._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.noConfusion._rarg._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">instToJsonX</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._closed_3._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">X.noConfusionType.</span><span class=\"o\">{</span><span class=\"n\">v._</span><span class=\"bp\">@.</span><span class=\"n\">_hyg.7</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">recursor</span> <span class=\"n\">X.rec.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.toCtorIdx._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._closed_2._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">X.toCtorIdx</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X.a.sizeOf_spec</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">X.casesOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.noConfusion._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">X._sizeOf_inst</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">theorem</span> <span class=\"n\">X.b.sizeOf_spec</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX.</span><span class=\"bp\">«</span><span class=\"n\">_</span><span class=\"bp\">@».</span><span class=\"n\">_hyg.16._closed_1._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">toJsonX._</span><span class=\"bp\">@.</span><span class=\"n\">_hyg.16</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.noConfusion._rarg._lambda_1._cstage2</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">X.toCtorIdx._cstage1</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">X.recOn.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span>  <span class=\"o\">:=</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">X.a</span> <span class=\"o\">:</span>\n<span class=\"n\">X.b</span> <span class=\"o\">:</span>\n\n<span class=\"c1\">-- Lean.namespacesExt extension: 10 new entries</span>\n\n<span class=\"c1\">-- Lean.protectedExt extension: 2 new entries</span>\n\n<span class=\"c1\">-- Lean.auxRecExt extension: 2 new entries</span>\n\n<span class=\"c1\">-- Lean.noConfusionExt extension: 1 new entries</span>\n\n<span class=\"c1\">-- Lean.Compiler.inlineAttrs extension: 1 new entries</span>\n\n<span class=\"c1\">-- Lean.reducibilityAttrs extension: 5 new entries</span>\n\n<span class=\"c1\">-- Lean.Compiler.specExtension extension: 4 new entries</span>\n\n<span class=\"c1\">-- Lean.IR.declMapExt extension: 16 new entries</span>\n\n<span class=\"c1\">-- Lean.IR.UnreachableBranches.functionSummariesExt extension: 12 new entries</span>\n\n<span class=\"c1\">-- Lean.Meta.globalInstanceExtension extension: 2 new entries</span>\n\n<span class=\"c1\">-- Lean.Meta.Match.Extension.extension extension: 1 new entries</span>\n\n<span class=\"c1\">-- Lean.Meta.instanceExtension extension: 2 new entries</span>\n\n<span class=\"c1\">-- Lean.Compiler.LCNF.baseExt extension: 4 new entries</span>\n\n<span class=\"c1\">-- Lean.Compiler.LCNF.monoExt extension: 6 new entries</span>\n\n<span class=\"c1\">-- Lean.declRangeExt extension: 5 new entries</span>\n\n<span class=\"c1\">-- Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt extension: 5 new entries</span>\n\n<span class=\"c1\">-- Lean.Meta.simpExtension extension: 2 new entries</span>\n</code></pre></div>\n</div></div>",
        "id": 401339429,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699611906
    },
    {
        "content": "<p>Neat util! Among many other things that contains a similar output to <code>set_option trace.Elab.command true</code>. <br>\nBut now I'm interested in <em>what</em> produced this code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Presumably some meta program?</p>",
        "id": 401341645,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1699612478
    },
    {
        "content": "<p>Anyway, I am not sure that <code>whatsnew</code> will tell you which meta-program generated it, but the json deriving handler might be here?</p>\n<p><a href=\"https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Lean/Elab/Deriving/FromToJson.lean\">https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Lean/Elab/Deriving/FromToJson.lean</a></p>",
        "id": 401341732,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699612509
    },
    {
        "content": "<p>Ah yes, the keyword I was looking for was \"instance handler\". Thank you!</p>",
        "id": 401342407,
        "sender_full_name": "Björn Fischer",
        "timestamp": 1699612744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198384\">Björn Fischer</span> has marked this topic as resolved.</p>",
        "id": 401342416,
        "sender_full_name": "Notification Bot",
        "timestamp": 1699612749
    }
]