[
    {
        "content": "<p>It seems that, even if we add the required instances, we can't make use of → in calc expressions. E.g, the following doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">→</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">→</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">→</span> <span class=\"bp\">·</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"c1\">-- invalid 'calc' setp, relation expected</span>\n    <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>My guess is that it has to do with the fact that <code>α → β</code> is not recognized as <code>foo α β</code> for some <code>foo</code>, probably because it's a buitin and/or it's a special case of the more general dependent function notation. To illustrate that, note that the following does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FakeFun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Trans</span> <span class=\"n\">FakeFun</span> <span class=\"n\">FakeFun</span> <span class=\"n\">FakeFun</span> <span class=\"n\">where</span>\n  <span class=\"n\">trans</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span>\n\n<span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">FakeFun</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">f</span>\n    <span class=\"n\">FakeFun</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:=</span> <span class=\"n\">g</span>\n</code></pre></div>\n<p>My questions are:</p>\n<ul>\n<li>would it be possible to add it as a special case?</li>\n<li>since this is probably not high-priority to get fixed in core, are mathlib people okay with adding a <code>FakeFun</code> as above, with notation <code>→'</code>, to be used specifically for this purpose?</li>\n</ul>",
        "id": 394205714,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696163981
    },
    {
        "content": "<p>in lean 3 FakeFun was called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/implies\">docs3#implies</a></p>",
        "id": 394233467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696177811
    },
    {
        "content": "<p>But that was only for <code>Prop</code></p>",
        "id": 394266566,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696196926
    },
    {
        "content": "<p>and I would assume that <code>-&gt;</code> in calc only worked on props in lean 3 for the same reason</p>",
        "id": 394266671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696197045
    },
    {
        "content": "<p>But I would like it for non-Props</p>",
        "id": 394363564,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1696236399
    },
    {
        "content": "<p>In lean3 it was hard-coded in calc</p>",
        "id": 394376438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696239494
    }
]