[
    {
        "content": "<p>Does Lean 4 have fixed precision signed integer types? I see types like <code>UInt8</code> and <code>UInt32</code>, but no corresponding signed types.</p>",
        "id": 313890779,
        "sender_full_name": "Cole Shepherd",
        "timestamp": 1670218873
    },
    {
        "content": "<p>I have an implementation <a href=\"https://github.com/ammkrn/timelib/blob/main/Timelib/SignedInt.lean\">here</a> but there aren't signed integers in core/std yet.</p>",
        "id": 313891162,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1670219083
    },
    {
        "content": "<p>Is this on the roadmap for core/std?</p>",
        "id": 313893857,
        "sender_full_name": "Cole Shepherd",
        "timestamp": 1670220764
    },
    {
        "content": "<p>That has to be in core, because the operations need a primitive implementation</p>",
        "id": 313900089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670223977
    },
    {
        "content": "<p>Conversely I thought that the idea of core was that it contained only the things needed to implement core?</p>",
        "id": 313902618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670225276
    },
    {
        "content": "<p>It contains things that need support / integration with the runtime and/or compiler</p>",
        "id": 313902831,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670225383
    },
    {
        "content": "<p>obviously the compiler should know about your signed integer type so it can do e.g. constant propagation</p>",
        "id": 313902962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670225419
    },
    {
        "content": "<p>and it may or may not warrant support in the ABI as well, seeing as C has signed integer types</p>",
        "id": 313903036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670225467
    },
    {
        "content": "<p>I actually designed the new constant folder to allow users to add their own folders. In theory any library can inject their own constant folder for their own numeric types without issues so thats not a blocker.</p>\n<p>The other reason I can see would be that we might want to translate them to C types as you mentioned. But as mentioned in previous meetings I was hoping that ideally we might figure out a general way to have custom c integer types addable from outside the compiler.</p>",
        "id": 314075370,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1670258451
    },
    {
        "content": "<p>What is Chris Bailey's approach missing? If I understand it correctly, his integers will be unboxed if possible, right? However, I'm not 100% sure what is constant propagation doing and that might be the problematic part.</p>",
        "id": 314077734,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670259086
    },
    {
        "content": "<p>Maybe the function <code>Int8.neg</code> could be written in C to avoid subtraction and modulo.</p>",
        "id": 314078190,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670259212
    },
    {
        "content": "<p>How to add primitive integers like i8, i32 and IEEE floats f32, f64?</p>",
        "id": 329622235,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1677123080
    },
    {
        "content": "<p>It might be better to use Zig as backend, since signed integer wrapping is actually defined.<br>\n<a href=\"https://ziglang.org/documentation/0.10.1/#toc-Wrapping-Operations\">https://ziglang.org/documentation/0.10.1/#toc-Wrapping-Operations</a></p>",
        "id": 329622329,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1677123131
    },
    {
        "content": "<p>How to have arbitrary 32 bits of data in Lean?</p>",
        "id": 329622418,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1677123206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515610\">Locria Cyber</span> <a href=\"#narrow/stream/270676-lean4/topic/Fixed.20precision.20signed.20integer.20types/near/329622418\">said</a>:</p>\n<blockquote>\n<p>How to have arbitrary 32 bits of data in Lean?</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Data/ByteArray/Basic.html#ByteArray\">https://leanprover-community.github.io/mathlib4_docs/Init/Data/ByteArray/Basic.html#ByteArray</a> with length 4, or <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#UInt32\">https://leanprover-community.github.io/mathlib4_docs/Init/Prelude.html#UInt32</a></p>",
        "id": 329623721,
        "sender_full_name": "Chris Bailey",
        "timestamp": 1677124115
    },
    {
        "content": "<p><a href=\"https://git.envs.net/iacore/lean-primitives\">https://git.envs.net/iacore/lean-primitives</a><br>\nI've added f32 using bitcast</p>",
        "id": 340403303,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678291564
    },
    {
        "content": "<p>Not sure if it's of any good? Anyway, I need to ship assembly/Zig with the library.</p>",
        "id": 340403421,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678291597
    },
    {
        "content": "<p>It's done</p>",
        "id": 340433001,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678299289
    },
    {
        "content": "<p>C ABI is weird. on Linux-x64 returning f32 is different from u32</p>",
        "id": 340433344,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1678299381
    }
]