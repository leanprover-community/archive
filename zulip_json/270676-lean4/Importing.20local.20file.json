[
    {
        "content": "<p>Today in \"really really stupid questions\": I made this shiny new Lean4 project use lake, started coding, mathlib imports work fine, life is beautiful. Then I decided to split the project into several files, so I wrote a file GreatResults.lean, then created another file MorelGreatResults.lean and tried to start it with an <code>import GreatResults</code>.  And now Lean says <code>unknown package 'GreatResults'</code>. <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span> (I'm using VSCode and I did try opening the directory of my project, but it doesn't seem to make a difference.)  <br>\nBut, I don't get it, that was working fine in Lean3 and the sections of TPIL3/4 on importing don't look that different. The only thing I noticed is that TPIL3 says that <code>import foo</code> imports the file foo.lean, while TPIL4 imports the file <code>foo.olean</code>.  So I tried building the project and then quickly discovered that I had no idea how to do that. (I did a <code>lake init GreatResults.lean</code> followed by a <code>lake build</code>, and it created a lot of stuff but I don't see any olean files there. The lean files didn't have any errors in VSCode, though it did have a couple of <code>sorry</code>'s.)</p>",
        "id": 357654652,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683825338
    },
    {
        "content": "<p>Your project should have this structure:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>lakefile.lean\nlean-toolchain\nGreatResults.lean\nGreatResults/Morel.lean\nGreatResults/...\n</code></pre></div>\n<p>I.e. all Lean files other than the toplevel <code>GreatResults.lean</code> go into the <code>GreatResults</code> directory. (Other setups are also possible, but need fiddling with the <code>lakefile</code>.)</p>\n<p>The stuff about oleans is a red herring; they have the same function as in Lean 3 and importing also works similarly. <code>lake build</code> generates oleans, but places them into the <code>build</code> directory.</p>",
        "id": 357657178,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1683825972
    },
    {
        "content": "<p>TDLR: Put your great results in the <code>GreatResults</code> folder, and in the parent <code>GreatResults.lean</code> file you can <code>import GreatResults.RiemannHypothesis</code>.</p>",
        "id": 357657537,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683826063
    },
    {
        "content": "<p>Also, in <code>GreatResults/RiemannHypothesis.lean</code> you will be able to <code>import GreatResults.ZetaFunction</code></p>",
        "id": 357657745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683826107
    },
    {
        "content": "<p>Wait, I am not sure that I follow. Does that mean that I need to have one top-level file (say <code>GreatResults.lean</code>) that can import a bunch of other lean files that have to be in the <code>GreatResults</code> directory, but these other lean files cannot import each other ?</p>",
        "id": 357657969,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683826175
    },
    {
        "content": "<p>no, the files in the <code>GreatResults</code> folder can indeed import others in the same folder, just with the name <code>GreatResults.OtherFile</code> instead of <code>OtherFile</code></p>",
        "id": 357658198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683826222
    },
    {
        "content": "<p>Ah, that is what your second message meant!</p>",
        "id": 357658290,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683826248
    },
    {
        "content": "<p>Do I need to have a <code>src</code> folder like in Lean3 ? That is what I did, but maybe I shouldn't have.</p>",
        "id": 357658373,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683826267
    },
    {
        "content": "<p>No, <code>src</code> is gone in lean4+lake</p>",
        "id": 357658418,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683826279
    },
    {
        "content": "<p>Take a look at the folder structure of std4, for example: <a href=\"https://github.com/leanprover/std4\">https://github.com/leanprover/std4</a></p>",
        "id": 357658649,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683826334
    },
    {
        "content": "<p>mathlib4 is similar, but the lake setup is more complicated there: <a href=\"https://github.com/leanprover-community/mathlib4\">https://github.com/leanprover-community/mathlib4</a></p>",
        "id": 357658712,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683826351
    },
    {
        "content": "<p>Ok, I created a folder <code>AwesomeProject</code>, put my lean files there, and now they can import each other (and the imports also work in the toplevel file<code> AwesomeProject.lean</code>). Whew, thanks Adam and Jannis !</p>",
        "id": 357660122,
        "sender_full_name": "Sophie Morel",
        "timestamp": 1683826731
    }
]