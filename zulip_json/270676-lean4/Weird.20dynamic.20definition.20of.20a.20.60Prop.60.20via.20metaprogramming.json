[
    {
        "content": "<p>Suppose I have a lemma of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">thing</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">norm_num</span>\n  <span class=\"c1\">-- Possibly a strange-looking custom tactic is called here as well???</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h</span>\n  <span class=\"n\">assumption</span>\n</code></pre></div>\n<p>I would like to replace the sorry in the definition of P with a tactic that will inspect the proof state of <code>thing</code> and define P to be whatever the antecedent of the target is. So in this example, it will be <code>2 = x</code> and in general as we simplify the equality in the antecedent of the goal of <code>thing</code>, the definition of P will get correspondingly simpler.</p>\n<p>I suspect someone may think this looks like an X-Y problem, but I'm really interested in figuring out how to do exactly the above (or an explanation why it's not possible).</p>\n<p>Is this possible with Lean 4's metaprogramming facilities?</p>",
        "id": 408720446,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1702949482
    },
    {
        "content": "<p>When the definition <code>P</code> is elaborated <code>thing</code> is not yet in the environment, or parsed / elaborated itself, so unless you made them <code>mutual</code> I don't see how the value of <code>P</code> can depend on what you do in <code>thing</code></p>",
        "id": 408727841,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1702952760
    },
    {
        "content": "<p>You could make a term elaborator for P</p>",
        "id": 408728977,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702953115
    },
    {
        "content": "<p>But then the P appearing in the type of thing would be elaborated first</p>",
        "id": 408729180,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1702953170
    },
    {
        "content": "<p>Thanks so much for the tips guys! Mutual would be okay. <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> It would be totally fine to have the <code>P</code> in <code>thing</code> elaborated as well. Do you think you could give me a pointer on how to do that? I don't understand how it's possible to refer to the goal in <code>thing</code> from <code>P</code>. Is there some sort of thing analogous to <code>withMainContext</code> that allows me to peer into the types of stuff that's been mutually defined? An example would be a godsend!</p>",
        "id": 408751029,
        "sender_full_name": "Malcolm Langfield",
        "timestamp": 1702957526
    }
]