[
    {
        "content": "<p>Can I somehow modify my lakefile to automatically build a certain executable of a dependency? I'm looking at these <a href=\"https://github.com/leanprover/lean4/tree/master/src/lake#package-configuration-options\">lake docs</a> but I'm not quite sure what to use, maybe <code>extraDepTargets</code>?</p>\n<p>Ill demonstrate here with a project depending on <code>mathlib</code> and look at the <code>cache</code> executable, although my use case is a different package and different executable. In the example below, I would like to have the executable be built after calling <code>lake build</code></p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># clean start</span>\n$<span class=\"w\"> </span>rm<span class=\"w\"> </span>-rf<span class=\"w\"> </span>.lake\n\n<span class=\"c1\"># build the project</span>\n$<span class=\"w\"> </span>lake<span class=\"w\"> </span>build\ninfo:<span class=\"w\"> </span>mathlib:<span class=\"w\"> </span>cloning<span class=\"w\"> </span>https://github.com/leanprover-community/mathlib4.git<span class=\"w\"> </span>to<span class=\"w\"> </span><span class=\"s1\">'./.lake/packages/mathlib'</span>\n...\n<span class=\"o\">[</span><span class=\"m\">0</span>/2<span class=\"o\">]</span><span class=\"w\"> </span>Fetching<span class=\"w\"> </span>proofwidgets<span class=\"w\"> </span>cloud<span class=\"w\"> </span>release\n<span class=\"o\">[</span><span class=\"m\">1</span>/33<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Aesop.Nanos\n...\n<span class=\"o\">[</span><span class=\"m\">403</span>/404<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Game\n\n<span class=\"c1\"># e.g. the `cache` executable is not built yet</span>\n$<span class=\"w\"> </span>ls<span class=\"w\"> </span>.lake/packages/mathlib/.lake/build/\nir<span class=\"w\">  </span>lib\n\n<span class=\"c1\"># executing it, will build it first</span>\n$<span class=\"w\"> </span>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">1</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.IO\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">2</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Hashing\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">3</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Requests\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">5</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Building<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">7</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Compiling<span class=\"w\"> </span>Cache.Main\ninfo:<span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">9</span>/9<span class=\"o\">]</span><span class=\"w\"> </span>Linking<span class=\"w\"> </span>cache\nMathlib4<span class=\"w\"> </span>caching<span class=\"w\"> </span>CLI\nUsage:<span class=\"w\"> </span>cache<span class=\"w\"> </span><span class=\"o\">[</span>COMMAND<span class=\"o\">]</span>\n...\n\n<span class=\"c1\"># now it exists</span>\n$<span class=\"w\"> </span>ls<span class=\"w\"> </span>.lake/packages/mathlib/.lake/build/bin/\ncache<span class=\"w\">  </span>cache.hash<span class=\"w\">  </span>cache.trace\n</code></pre></div>",
        "id": 406775538,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1702047412
    },
    {
        "content": "<p><code>lake build</code> only builds the default target</p>",
        "id": 406775844,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702047499
    },
    {
        "content": "<p>Annotating <code>lean_exe</code> with <code>@[default_target]</code> is what you need for building the executable by default. <code>lake build cache</code> is what you need to build and not run <code>cache</code>.</p>",
        "id": 406776521,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702047720
    },
    {
        "content": "<p>It is tagged by <code>@[default_target]</code> just in the dependency's lakefile.</p>\n<p><code>lake build cache</code> is doing the right thing, thanks! Now I wonder how I manage that I can simply call <code>lake update -R &amp;&amp; lake build</code> instead of <code>lake update -R &amp;&amp; lake build &amp;&amp; lake build cache</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Can I mark <code>cache</code> as <code>default_target</code> in my lakefile even if it comes from another package? Or can I maybe call <code>lake build cache</code> in a post-update hook in my lakefile <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 406777656,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1702048042
    },
    {
        "content": "<p>probably just copying what mathlib does in its post-update-hook should work, I think</p>",
        "id": 406778065,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1702048138
    },
    {
        "content": "<p>Indeed, adding the following hook to the package defining the executable seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">When a package depending on GameServer updates its dependencies,</span>\n<span class=\"sd\">build the `gameserver` executable.</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">post_update</span> <span class=\"n\">pkg</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">rootPkg</span> <span class=\"bp\">←</span> <span class=\"n\">getRootPackage</span>\n  <span class=\"k\">if</span> <span class=\"n\">rootPkg.name</span> <span class=\"bp\">=</span> <span class=\"n\">pkg.name</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"c1\">-- do not run in GameServer itself</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\"> TODO: Could we use the Lake API instead of spawning a new process? -/</span>\n  <span class=\"k\">let</span> <span class=\"n\">toolchain</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">pkg.dir</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lean-toolchain\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">exitCode</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"elan\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"run\"</span><span class=\"o\">,</span> <span class=\"n\">toolchain.trim</span><span class=\"o\">,</span> <span class=\"s2\">\"lake\"</span><span class=\"o\">,</span> <span class=\"s2\">\"build\"</span><span class=\"o\">,</span> <span class=\"s2\">\"gameserver\"</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">wait</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">exitCode</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">logError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{pkg.name}: failed to build gameserver\"</span>\n</code></pre></div>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span> !</p>",
        "id": 406781829,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1702049335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385895\">@Jon Eugster</span> Regarding the TODO, I believe the following should do what you want here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runBuild</span> <span class=\"n\">gameserver.build</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">await</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 406909570,
        "sender_full_name": "Mac Malone",
        "timestamp": 1702111310
    }
]