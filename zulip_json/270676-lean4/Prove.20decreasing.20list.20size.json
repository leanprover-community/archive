[
    {
        "content": "<p>I have a function called <code>List.chunk</code> that turns a list into a list of chunks of a given size. I know it terminates but I have no idea how to prove it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Helper: Move n elements from source to acc. This terminates.</span>\n<span class=\"kd\">def</span> <span class=\"n\">extract</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">[],</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">([],</span> <span class=\"n\">acc.reverse</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">acc.reverse</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">extract</span> <span class=\"n\">n</span> <span class=\"n\">rest</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">acc</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">m.fst</span><span class=\"o\">,</span> <span class=\"n\">m.snd</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">extract</span> <span class=\"mi\">2</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"o\">[]</span>\n<span class=\"c1\">-- ([3, 4, 5], [1, 2])</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.chunk</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">list</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">rest</span><span class=\"o\">,</span> <span class=\"n\">chunk</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">extract</span> <span class=\"n\">n</span> <span class=\"n\">list</span> <span class=\"o\">[]</span>\n    <span class=\"n\">chunk</span> <span class=\"o\">::</span> <span class=\"n\">List.chunk</span> <span class=\"n\">rest</span> <span class=\"n\">n</span>         <span class=\"c1\">-- failed to prove termination.</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">l.length</span>\n</code></pre></div>\n<p>It wants me to prove <code>⊢ length rest &lt; length list</code> which sounds right but I don't know how to do that. Clearly <code>n</code> is positive, so <code>(rest, chunk) := extract n list []</code> should take <code>n</code> items thus <code>length rest &lt; length list</code>. I also don't fully understand what <code>termination_by</code> is doing, but it seemed to be a step in the right direction. Any help is appreciated.</p>",
        "id": 396667435,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1697305416
    },
    {
        "content": "<p>You want to write a lemma that shows that if you call <code>extract n xs acc</code> where <code>n &gt; 0</code> (which is the case in your thing, you can prove it in that particular match arm but also just use the match arm<code>| list, n + 1</code> to get this more easily) then the <code>rest</code> part of the output is smaller than <code>xs</code>, probably by induction, potentially generalizing on the <code>acc</code> argument. Once you have that lemma you can go on to prove the thing that <code>termination_by</code> wants you to do in a <code>have</code>. You can find general information about the workings of termination_by here: <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction\">https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html#well-founded-recursion-and-induction</a></p>",
        "id": 396669236,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697307425
    }
]