[
    {
        "content": "<p>I'm confused by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.data#doc\">docs#Array.data</a> and how it relates to <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Array.toList#doc\">docs#Array.toList</a>; the former is documented as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"sd\">/-- Convert a `List α` into an `Array α`. This function is overridden</span>\n<span class=\"sd\">  to `List.toArray` and is O(n) in the length of the list. -/</span>\n  <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"sd\">/-- Convert an `Array α` into a `List α`. This function is overridden</span>\n<span class=\"sd\">  to `Array.toList` and is O(n) in the length of the list. -/</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>Does \"X is overridden to Y\" mean \"X is <code>implemented_by</code> Y\"? Does it mean \"<code>X</code> is an implementation detail, use <code>Y</code> instead\"?</p>",
        "id": 398705430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698331552
    },
    {
        "content": "<p>It looks like it means the line below that in the source <code>attribute [extern \"lean_array_data\"] Array.data</code> which is similar in meaning to <code>implemented_by</code> yes</p>",
        "id": 398706571,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698331888
    },
    {
        "content": "<p>And that C function is simply calling <code>Array.toList</code> in Lean land. This detour is I think needed <code>implemented_by</code> would insis on equal types. But otherwise it's the same.  What's a better wording? “This projection is implemented by <code>Array.toList</code>”  maybe?</p>",
        "id": 398708244,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698332370
    },
    {
        "content": "<p>How do the types differ here?</p>",
        "id": 398710595,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698332979
    },
    {
        "content": "<p>Hmm, nevermind, I confused it with something else I tried with implemented_by.</p>",
        "id": 398711255,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698333176
    },
    {
        "content": "<p>So the C code merely translates between the different ABIs for <code>extern</code> and <code>export</code>:<br>\n<a href=\"https://github.com/leanprover/lean4/blob/6c5f79c0df01e9cd74ac4ee411ec392a5ac1b5d3/src/runtime/object.cpp#L346\">https://github.com/leanprover/lean4/blob/6c5f79c0df01e9cd74ac4ee411ec392a5ac1b5d3/src/runtime/object.cpp#L346</a><br>\n(Why is it even different?)</p>\n<p>So why isn't it using <code>implemented_by</code>? Because it'd an unsupported forward reference?</p>",
        "id": 398711772,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698333342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Understanding.20the.20docstring.20for.20docs.23Array.2Edata/near/398708244\">said</a>:</p>\n<blockquote>\n<p>What's a better wording? “This projection is implemented by <code>Array.toList</code>”  maybe?</p>\n</blockquote>\n<p>Perhaps \"implemented at runtime\". Also there should be a docstring on <code>Array.toList</code> that says \"do not use this function, it is an implementation detail; use <code>Array.data</code> instead\"</p>",
        "id": 398713905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698333938
    },
    {
        "content": "<p>Or the other way around (I think using <code>Array.toList</code>, and treating <code>Array</code> as an opaque type, is more natural, but not sure.)</p>",
        "id": 398715814,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698334421
    },
    {
        "content": "<p>Indeed; I guess my point is that the documentation makes it very hard to tell which pair of functions is the implementation detail! (it doesn't help that I would expect \"overridden by\" not \"overridden to\"...)</p>",
        "id": 398716254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698334556
    },
    {
        "content": "<p>I think the important message here is that <code>.mk</code> and <code>.data</code> are not just constructor and projection, as you would expect, and have very different performance characteristics. I’ll draft a PR and let you refine it.</p>",
        "id": 398716550,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698334669
    },
    {
        "content": "<p>Would renaming <code>.mk</code> to <code>ofList</code> and <code>data</code> to <code>toList</code> be reasonable, and renaming the existing <code>toList</code> to <code>private toListImpl</code> or similar?</p>",
        "id": 398717266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698334889
    },
    {
        "content": "<p>Probably. But when doing proofs, where these really are just constructor and projection, it’s nice to have <code>.mk</code> around, and to have a nicer variable name in inductions?  That’s the only reason I can think of right now why you might want to keep them separate.</p>",
        "id": 398718047,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698335127
    },
    {
        "content": "<p>Can you have a look at <a href=\"https://github.com/leanprover/lean4/pull/2771\">lean4#2771</a>, refine if needed, and express support otherwise? Then I’ll mark it ready for review.</p>",
        "id": 398718456,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698335276
    },
    {
        "content": "<p>(I did not explicitly describe one as “internal only”)</p>",
        "id": 398718612,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698335317
    },
    {
        "content": "<p>I think this doesn't solve the fundamental question I'm trying to answer, which is \"how do I pick between <code>.mk</code> and <code>.ofList</code>?\"</p>",
        "id": 398719789,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698335726
    },
    {
        "content": "<p>Hmm. My intuition is:  Pick <code>.ofList</code> if you are treating <code>Arrays</code> as an opaque data structure (e.g. when programming). Pick <code>.mk</code> if you are treating it as a wrapper around Lists (e.g. when proving). <br>\nBut I don’t know if this intuition is a good one, and if it is, how to concisely convey it.</p>",
        "id": 398722988,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698336750
    },
    {
        "content": "<p>I'd claim that you never  want <code>.ofList</code>, because it equal to and has the same performance characteristics as <code>.mk</code> but is harder to prove things about</p>",
        "id": 398724670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698337397
    },
    {
        "content": "<p>But it’s <em>much</em> easier to find, if you have a <code>List</code> and want an <code>Array</code>, and don’t know about the internal definition of <code>Array</code> :-D</p>",
        "id": 398725569,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698337721
    },
    {
        "content": "<p>Well then <code>mk</code> has the wrong name!</p>",
        "id": 398725639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698337742
    },
    {
        "content": "<p>Right</p>",
        "id": 398725670,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698337749
    },
    {
        "content": "<p>I guss I wouldn’t oppose a PR that renames <code>.mk</code> and <code>.data</code> and makes the other functions private.</p>",
        "id": 398725804,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698337801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Understanding.20the.20docstring.20for.20docs.23Array.2Edata/near/398718047\">said</a>:</p>\n<blockquote>\n<p>Probably. But when doing proofs, where these really are just constructor and projection, it’s nice to have <code>.mk</code> around</p>\n</blockquote>\n<p>I don't really buy that; in a proof you'd probably just use the angle brackets anyway, and <code>.ofList</code> is hardly much worse to type</p>\n<blockquote>\n<p>and to have a nicer variable name in inductions?</p>\n</blockquote>\n<p>Doesn't <code>induction</code> pretty much force us to name the induction argument manually anyway? I agree <code>toList</code> is slightly weirder than <code>data</code> as the induction variable, but there's not much in it</p>",
        "id": 398725971,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698337853
    },
    {
        "content": "<p>That’s true, the auto-picked name is rarely used in the end. I’m convinced.</p>",
        "id": 398726076,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698337898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/Understanding.20the.20docstring.20for.20docs.23Array.2Edata/near/398711772\">said</a>:</p>\n<blockquote>\n<p>So why isn't it using <code>implemented_by</code>? Because it'd an unsupported forward reference?</p>\n</blockquote>\n<p>The forward reference concern can be elided by using e.g. <code>attribute [implemented_by Array.toList] Array.data</code> after the relevant function is defined. I think this may be an interesting question to ask <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> or Leo because it seems to me that, if possible, using <code>implemented_by</code> would be much clearer (as it would be deducible from the Lean level that one implements the other without needing to look at the C code).</p>",
        "id": 398741084,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698343682
    },
    {
        "content": "<p>If you set thr attribute later, will it still affect the compilation of all definitions in between?</p>",
        "id": 398745254,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698345216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span>  No, but the in-between definitions shouldn't be using <code>Array.mk</code>/<code>data</code> (in their compiled code) anyway. For <code>Array.mk</code>, this certainly true as <code>List.toArray</code> is defined a little ways down in the same file. Unfortunately, <code>Array.toList</code> is defined separately in <code>Init.Data.Array.Basic</code>, so it is harder to keep <code>Array.data</code> honest (even though I suspect it still is).  Regardless, <code>implemented_by</code> simply does not work across files (understandably), so that separation does prevent it from being use for <code>Array.data</code>. Thus, now having relooked at it, supporting this file separation is probably (at least one reason) why the export/extern trick was used.</p>",
        "id": 398748592,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698346446
    },
    {
        "content": "<p>As an aside, If it was possible to mark the structure  constructors and projections <code>noncomputable</code>, one could have Lean force them not to be used in compiled code until they are provided with computable definitions via <code>implemented_by</code>.</p>",
        "id": 398748686,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698346486
    },
    {
        "content": "<p>FWIW I agree with Eric here: <code>data</code> should be preferred, but it should be renamed to <code>toList</code> and <code>toList</code> should never be used directly (it can even be private, although it is nice to have the proof of <code>toList = toListImpl</code> somewhere to make sure this isn't us pulling a fast one).</p>",
        "id": 398772743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698357185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I imagine it should be the reverse (<code>toListImpl = toList</code>) as a <code>@[simp]</code> lemma to make sure it disappears if it accidently used somewhere.</p>",
        "id": 398804106,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698373988
    },
    {
        "content": "<p>If it's not accessible without hacks (or even if it only has a weird name), I'm not too worried about it being accidentally used</p>",
        "id": 398804196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698374031
    },
    {
        "content": "<p>but sure, that ordering sounds fine</p>",
        "id": 398804264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698374045
    },
    {
        "content": "<p>I haven't seen any issues with people calling <code>List.mapTR</code> by mistake</p>",
        "id": 398804300,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698374058
    },
    {
        "content": "<p>Although those functions do show up in docgen and loogle; it might be nice to have some <code>@[hidden]</code> attribute to indicate that it isn't meant for general use</p>",
        "id": 398804527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698374159
    },
    {
        "content": "<p>Related to functions showing up in docs that shouldn’t, also see <a href=\"https://github.com/leanprover/lean4/issues/2719\">https://github.com/leanprover/lean4/issues/2719</a> about <code>let</code>/<code>where</code> functions showing up in docs and in doc linters.</p>",
        "id": 398842263,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698392200
    }
]