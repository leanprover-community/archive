[
    {
        "content": "<p>I have a macro of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">!!</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">rows</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">;*</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n</code></pre></div>\n<p>which matches things like <code>!![a, b; c d]</code>.</p>\n<p>How can I obtain a <code>Syntax</code> object corresponding to the entire <code>a, b</code> row, so that I can use it with <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Macro.throwErrorAt#doc\">docs4#Macro.throwErrorAt</a> ?</p>",
        "id": 350514702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681738147
    },
    {
        "content": "<p>If it's just about the error range, we often stick the beginning and end into <code>mkNullNode</code> for that purpose</p>",
        "id": 350525597,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681740372
    },
    {
        "content": "<p>Is there any way to obtain the <code>Syntax</code> nodes corresponding to the <code>,</code> and <code>;</code> tokens?</p>",
        "id": 350529046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681741047
    },
    {
        "content": "<p>Or in general, to capture position information in a syntax match, in order to pass it to <code>mkNullNode</code> later</p>",
        "id": 350529132,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681741071
    },
    {
        "content": "<p>not using the fancy syntax</p>",
        "id": 350533222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681741905
    },
    {
        "content": "<p>I would love to have some kind of <code>$tk@</code> syntax for capturing tokens</p>",
        "id": 350533610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681741951
    },
    {
        "content": "<p><code>mkNullNode</code> was good enough in the end</p>",
        "id": 350533637,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681741958
    },
    {
        "content": "<p>(context is <a href=\"https://github.com/leanprover-community/mathlib4/pull/3427\">!4#3427</a>)</p>",
        "id": 350533747,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1681741977
    }
]