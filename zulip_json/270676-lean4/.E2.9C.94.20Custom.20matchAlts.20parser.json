[
    {
        "content": "<p>I'm trying to write custom syntax for <code>Finsupp</code>, but I'm stumbling over how to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Parser.Term.matchAlts#doc\">docs#Lean.Parser.Term.matchAlts</a>.</p>\n<p>My naive attempt is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">lead</span> <span class=\"s2\">\"fun₀\"</span> <span class=\"n\">matchAlts</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>but this doesn't recognize <code>matchAlts</code>.</p>",
        "id": 381845397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691155438
    },
    {
        "content": "<p>This works, but leaves me none the wiser about what was going on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"n\">fun₀</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span><span class=\"o\">:</span><span class=\"n\">maxPrec</span>\n  <span class=\"n\">ppAllowUngrouped</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">unicodeSymbol</span> <span class=\"s2\">\"λ₀\"</span> <span class=\"s2\">\"fun₀\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">matchAlts</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">lead</span> <span class=\"bp\">«</span><span class=\"n\">fun₀</span><span class=\"bp\">»</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>",
        "id": 381859238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691157475
    },
    {
        "content": "<p>The <code>syntax</code> DSL (or rather <code>ParserDescr</code>) cannot handle optional arguments like on <code>matchAlts</code></p>",
        "id": 381863289,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691158070
    },
    {
        "content": "<p>So would <code>matchAltsExpr</code> work?</p>",
        "id": 381865613,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691158396
    },
    {
        "content": "<p>I don't see that declaration but that is the usual workaround, yes</p>",
        "id": 381866845,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691158582
    },
    {
        "content": "<p>Is the workaround I have above idiomatic, or can I combine those two commands somehow?</p>",
        "id": 381867404,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691158671
    },
    {
        "content": "<p>Oh yes, you can just make your def a <code>@[term_parser]</code> instead. Note though that you are using two different precedences</p>",
        "id": 381874601,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691159830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 381884716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691161582
    }
]