[
    {
        "content": "<p>Can anyone suggest how to solve a \"build cycle detected\" lake error?  It looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>% lake build\nerror: build cycle detected:\n  +Foo:lean.precompileImports\n  +Foo:bin\n  Foo/Foo:leanLib.lean\n  +Foo:lean.precompileImports\n</code></pre></div>",
        "id": 322789495,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674343468
    },
    {
        "content": "<p>that usually means there is an import cycle</p>",
        "id": 322789534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343511
    },
    {
        "content": "<p>If relevant, it's a new project and I've never successfully built it before; I've been tinkering with the lakefile and directory structure; so there may be artifacts of some kind that I need to delete.</p>",
        "id": 322789536,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674343513
    },
    {
        "content": "<p>But I don't think there's an import cycle: there's only one import in the main <code>Foo.lean</code> file.</p>",
        "id": 322789557,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674343550
    },
    {
        "content": "<p>this one looks a bit weird though, I think it is saying that <code>Foo</code> depends on itself</p>",
        "id": 322789561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343554
    },
    {
        "content": "<p>what does the lakefile look like</p>",
        "id": 322789615,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343587
    },
    {
        "content": "<p>Ah ... I think I have narrowed it down.  There are folders in my intended directory structure whose names start with numbers.  Is this illegal?  It seems to be fixed when I change this.</p>",
        "id": 322789842,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674343833
    },
    {
        "content": "<p>I don't think so?</p>",
        "id": 322789969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343967
    },
    {
        "content": "<p>it sounds like a bug if so</p>",
        "id": 322789986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674343981
    },
    {
        "content": "<p>It really seems to have fixed it so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 322790232,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674344168
    },
    {
        "content": "<p>can you make a MWE?</p>",
        "id": 322790509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1674344422
    },
    {
        "content": "<p>Yes -- not now but I'll do it in a few days.</p>",
        "id": 322790661,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1674344604
    },
    {
        "content": "<p>I was running into the same problem, and while creating a Mwe, I noticed that it can be solved by adding weird quotes<br>\nso in the initial commit in <br>\n<a href=\"https://github.com/mo271/mwe\">https://github.com/mo271/mwe</a><br>\nI get </p>\n<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code><span class=\"o\">&gt;</span> lake build\nerror: build cycle detected:\n  +Mwe:lean.precompileImports\n  +Mwe:bin\n  mwe/Mwe:leanLib.lean\n  +Mwe:lean.precompileImports\n</code></pre></div>\n<p>The diff that fixes is looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code>diff --git a/Mwe.lean b/Mwe.lean\nindex 005f72b..c6ce100 100644\n--- a/Mwe.lean\n+++ b/Mwe.lean\n@@ -1,2 +1,2 @@\n import Mwe.Test\n-import Mwe.1_starts_with_number\n+import Mwe.«1_starts_with_number»\n</code></pre></div>\n<p>What works no matter if the weird quotes are added in the <code>Mwe.lean</code> or not is</p>\n<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code><span class=\"o\">&gt;</span> lake build Mwe.1_starts_with_number\n</code></pre></div>\n<p>But the following never worked for me:</p>\n<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code><span class=\"o\">&gt;</span> lake build Mwe.«1_starts_with_number»\nerror: no such file <span class=\"k\">or</span> directory <span class=\"o\">(</span>error code: 2<span class=\"o\">)</span>\n  file: ./././Mwe/«1_starts_with_number».lean\n</code></pre></div>",
        "id": 347917726,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1680987385
    },
    {
        "content": "<p>oh, forgot to say:<br>\nI got the idea to try the quotes, because the output of the lake build command included them:</p>\n<div class=\"codehilite\" data-code-language=\"Fish\"><pre><span></span><code><span class=\"o\">&gt;</span> lake build Mwe.1_starts_with_number\nBuilding Mwe.«1_starts_with_number»\n</code></pre></div>",
        "id": 347917882,
        "sender_full_name": "Moritz Firsching",
        "timestamp": 1680987562
    },
    {
        "content": "<p>I'm surprised <code>import Mwe.1_starts_with_number</code> works in the first place, name components can't start with numbers afaik</p>",
        "id": 347929304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680995961
    },
    {
        "content": "<p>the guillemets are used to quote name components containing illegal characters that make them not legal identifiers or keywords</p>",
        "id": 347929469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680996048
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 348041483,
        "sender_full_name": "Mac Malone",
        "timestamp": 1681050392
    },
    {
        "content": "<p>This could be considered a bug in <code>ParseImportsFast</code>, it shouldn't succeed to parse that line as <code>import Mwe</code></p>",
        "id": 348043655,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1681051138
    },
    {
        "content": "<p>I am having the same problem with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span> <span class=\"o\">:</span> <span class=\"n\">dependency</span> <span class=\"n\">cycle</span> <span class=\"n\">detected</span><span class=\"o\">:</span>\n<span class=\"n\">mathlib</span>\n<span class=\"n\">mathlib</span>\n</code></pre></div>",
        "id": 350893139,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681855783
    },
    {
        "content": "<p>The strange (?) thing is that if I do <code>lake new something math</code> everything seems to work, but if I try <code>lake new Mathlib math</code>, I get the above error.</p>",
        "id": 350893288,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681855848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20.22build.20cycle.20detected.22/near/350893288\">said</a>:</p>\n<blockquote>\n<p>The strange (?) thing is that if I do <code>lake new something math</code> everything seems to work, but if I try <code>lake new Mathlib math</code>, I get the above error.</p>\n</blockquote>\n<p>Well this creates a new library called 'Mathlib'  that depends on 'Mathlib', which is a cyclic self-reference.</p>",
        "id": 350907306,
        "sender_full_name": "Mac Malone",
        "timestamp": 1681862543
    },
    {
        "content": "<p>Ok, so I *should not * call my new library <code>mathlib</code>. So I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">test</span> <span class=\"n\">math</span>\n<span class=\"n\">cd</span> <span class=\"n\">test</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n</code></pre></div>\n<p>and indeed I have a working <code>mathlib4</code>project.</p>",
        "id": 350966731,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681890656
    },
    {
        "content": "<p>But I wanted to run the script <code>./scripts/start_port.sh Mathlib/X/Y/Z.lean</code> (for suitable X, Y, Z of course) and it cannot find it: <code>bash: ./scripts/start_port.sh: No such file or directory</code>. Am I missing something in the porting procedure?</p>",
        "id": 350967264,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681890792
    },
    {
        "content": "<p>it is of course not in <code>./scripts</code> since that would be in your project, not in mathlib</p>",
        "id": 350967498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681890857
    },
    {
        "content": "<p>Ah right, it makes sense.</p>",
        "id": 350967630,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681890904
    },
    {
        "content": "<p>you could use <code>lake-packages/mathlib/scripts/start_port.sh</code> but does this even work outside mathlib?</p>",
        "id": 350967650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681890910
    },
    {
        "content": "<p><code>start_port.sh</code> is for creating new mathlib files</p>",
        "id": 350967706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681890928
    },
    {
        "content": "<p>Yes, this is what I would like to do.</p>",
        "id": 350967749,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681890939
    },
    {
        "content": "<p>I thought (wrongly, afaiu) that I should start a project and then work from there.</p>",
        "id": 350967884,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681890964
    },
    {
        "content": "<p>I mean even if you call it I would just expect it to make a mess of things</p>",
        "id": 350967925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681890975
    },
    {
        "content": "<p>pretty sure most porters are working inside mathlib itself</p>",
        "id": 350968031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681891005
    },
    {
        "content": "<p>And how should I proceed, rather? I am simply willing to (try to) port <code>ring_theory/localization/submodule.lean</code> that seems ready to be ported.</p>",
        "id": 350968123,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891034
    },
    {
        "content": "<p>Filippo, if you are proposing to join the porting effort then you should be cloning mathlib, not making a new project.</p>",
        "id": 350968143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681891040
    },
    {
        "content": "<p>Oh good: and by  <code>cloning</code>you mean the old good nice <code>git clone</code>?</p>",
        "id": 350968222,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891062
    },
    {
        "content": "<p>WOW, I was drowning myself for the sake of it...</p>",
        "id": 350968587,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891162
    },
    {
        "content": "<p>Thanks</p>",
        "id": 350968596,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891165
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">git</span> <span class=\"n\">clone</span> <span class=\"n\">git</span><span class=\"bp\">@</span><span class=\"n\">github.com</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib4.git</span>\n<span class=\"n\">cd</span> <span class=\"n\">mathlib4</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n</code></pre></div>\n<p>(the last command is the analogue of <code>leanproject get-cache</code>)</p>",
        "id": 350968608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681891170
    },
    {
        "content": "<p>Then <code>lake build</code> (the analogue of <code>leanproject build</code>) should return quickly because everything is built, and you can now start following the very clear instructions on the <a href=\"https://github.com/leanprover-community/mathlib4/wiki/Porting-wiki\">porting wiki</a>.</p>",
        "id": 350968894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681891244
    },
    {
        "content": "<p>Thanks! I though that there was a <code>lake</code> command that would create a copy of mathlib+cache, but now I see that the easiest way is the right one.</p>",
        "id": 350969020,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891272
    },
    {
        "content": "<p>the command <code>lake new myproj math</code> is for creating a fresh project of your own which depends on mathlib (I don't think it knows about the cache, but you can follow up with <code>lake exe cache get</code>)</p>",
        "id": 350969310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681891330
    },
    {
        "content": "<p>Oh, I see. I thought that <code>math</code> meant that it would have been <code>mathlib</code>, whereas it just adds <code>mathlib</code> as dependency. Thank you!</p>",
        "id": 350970124,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891524
    },
    {
        "content": "<p>I will try the port later, hoping to get somewhere! <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 350970254,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1681891555
    }
]