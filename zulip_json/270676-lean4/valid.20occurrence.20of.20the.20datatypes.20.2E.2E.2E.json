[
    {
        "content": "<p>Consider the following inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">children</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ref</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">IO.Promise</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the following error:</p>\n<blockquote>\n<p>(kernel) arg <a href=\"https://github.com/leanprover-community/mathlib/pull/1\">#1</a> of 'T.ref' contains a non valid occurrence of the datatypes being declared</p>\n</blockquote>\n<p>The same error happens if I use IO.Ref, but it works if I use something like a simpler wrapper:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Wrapper</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">T</span>\n<span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">(</span><span class=\"n\">children</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">ref</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">:</span> <span class=\"n\">Wrapper</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I did see earlier discussions on this same error message, but I still have no idea of what it means.</p>",
        "id": 324516062,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1675047403
    },
    {
        "content": "<p>Humm, one discussion did shed some light into the problem: <a href=\"https://github.com/leanprover/lean4/blob/a91b8619196b6d5d94a5bc39457b67314fd78953/src/Lean/Data/Json/Basic.lean#L137-L140\">https://github.com/leanprover/lean4/blob/a91b8619196b6d5d94a5bc39457b67314fd78953/src/Lean/Data/Json/Basic.lean#L137-L140</a> :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- uses RBNode instead of RBMap because RBMap is a def</span>\n<span class=\"c1\">-- and thus currently cannot be used to define a type that</span>\n<span class=\"c1\">-- is recursive in one of its parameters</span>\n</code></pre></div>\n<p>And Promise is indeed a <code>def</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Promise</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">PromiseImpl</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Does this mean that a Promise cannot be used in an inductive?</p>",
        "id": 324517111,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1675048054
    },
    {
        "content": "<p>yes, unless you use <code>unsafe</code></p>",
        "id": 324517619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675048340
    },
    {
        "content": "<p>it's not <code>def</code> specifically which is the problem but rather if you unfold the <code>def</code> you need to get an inductive type (and I'm guessing <code>PromiseImpl</code> is an <code>opaque</code>)</p>",
        "id": 324517671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675048391
    },
    {
        "content": "<p>Yes, PromiseImpl is an opaque. Using unsafe gets me past the immediate issue, but it seems that it locks me out of most (all?) deriving instances (e.g. invalid declaration, it uses unsafe declaration 'Term'), which, I think, means I would have to create the instances by hand.</p>\n<p>What is the proper solution to this even if it is not here in the short term?</p>",
        "id": 324594734,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1675081926
    },
    {
        "content": "<p>The deriving methods could probably be updated to generate <code>unsafe</code> definitions if the type itself is <code>unsafe</code>.</p>\n<p>The more general issues is that an <code>unsafe</code> type forces every function mentioning it to be <code>unsafe</code>. If you don't want this, you can try to create a safe version of your type which is then <code>implemented_by</code> the unsafe version. See <a href=\"https://github.com/JLimperg/aesop/blob/ccff5d4ae7411c5fe741f3139950e8bddf353dea/Aesop/Tree/Data.lean#L359\">here</a> for an example. You'll definitely pay a price in convenience though, e.g. <code>deriving</code> likely becomes impossible.</p>",
        "id": 324596656,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675082602
    }
]