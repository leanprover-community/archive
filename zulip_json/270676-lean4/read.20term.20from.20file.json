[
    {
        "content": "<p>Hi all,</p>\n<p>is there a way to read a term from a file in Lean4?</p>\n<p>The simplest example would be the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">ss</span> <span class=\"o\">:</span><span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"s2\">\"toto\"</span> <span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">args.head</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"n\">readTermFromFileName</span> <span class=\"n\">fileName</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {s.name}\"</span>\n</code></pre></div>\n<p>Note that the function <code>readTermFromFileName </code> gets the name at runtime, and not at compile time.<br>\nI managed to write a tactic that works with a statically known filename like in the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">readTermFromFileName</span> <span class=\"s2\">\"test.lean\"</span> <span class=\"o\">}</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {s.name}\"</span>\n</code></pre></div>\n<p>But I have a hard time understanding how to generalize this approach with a statically unknown filename.</p>\n<p>Best regards.<br>\n--<br>\nciprian</p>",
        "id": 400279369,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1699091149
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 400285419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699093972
    },
    {
        "content": "<p>what does <code>readTermFromFileName</code> do?</p>",
        "id": 400285445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699094008
    },
    {
        "content": "<p>What is the storage format in the file you are reading?</p>",
        "id": 400285541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699094085
    },
    {
        "content": "<p>You can parse JSON into an arbitrary data structure fairly easily with <code>deriving FromJson</code> on <code>TestS</code>, but if you want to parse lean syntax you will have to load an environment from somewhere to use with the elaborator</p>",
        "id": 400285602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699094163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/read.20term.20from.20file/near/400285445\">said</a>:</p>\n<blockquote>\n<p>what does <code>readTermFromFileName</code> do?</p>\n</blockquote>\n<p>fileName is a path to a file which contains a lean term as string like <code>⟨ \"toto\" ⟩</code></p>",
        "id": 400286089,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1699094592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/read.20term.20from.20file/near/400285602\">said</a>:</p>\n<blockquote>\n<p>You can parse JSON into an arbitrary data structure fairly easily with <code>deriving FromJson</code> on <code>TestS</code>, but if you want to parse lean syntax you will have to load an environment from somewhere to use with the elaborator</p>\n</blockquote>\n<p>I do not want to pass through JSON.<br>\nYes I guess we need an environment for the elaborator. Here is a more detailed example </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">nothing</span><span class=\"o\">:</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"s2\">\"nothing\"</span> <span class=\"o\">⟩</span>\n<span class=\"kd\">def</span> <span class=\"n\">s₁</span> <span class=\"o\">:</span><span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"s2\">\"something\"</span> <span class=\"o\">⟩</span> <span class=\"c1\">-- the contents of the file are ` ⟨ \"something\" ⟩`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">readTermFromFileName</span><span class=\"o\">(</span><span class=\"n\">fileName</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"bp\">$</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">code</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"o\">⟨</span> <span class=\"n\">fileName</span> <span class=\"o\">⟩</span>\n    <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"build/lib\"</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"bp\">#</span><span class=\"o\">[</span> <span class=\"o\">]</span> <span class=\"o\">{}</span>\n    <span class=\"k\">let</span> <span class=\"n\">estx</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Parser.runParserCategory</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">code</span>\n    <span class=\"k\">match</span> <span class=\"n\">estx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Except.ok</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"n\">s1</span> <span class=\"o\">:</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"c1\">-- How to get from stx to TestS ?</span>\n        <span class=\"n\">return</span> <span class=\"n\">s1</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Except.error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">nothing</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">args.head</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TestS</span> <span class=\"bp\">←</span> <span class=\"n\">readTermFromFileName</span> <span class=\"n\">fileName</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {s.name}\"</span>\n</code></pre></div>\n<p>The question is how to get from the Syntax object returned by the parser to the TestS object.</p>\n<p>an even more detailed example, that uses a tactic to read from a statically known filename is at: <a href=\"https://tinyurl.com/yawevj96\">https://tinyurl.com/yawevj96</a></p>",
        "id": 400287705,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1699095740
    },
    {
        "content": "<p>Here's a working example.</p>\n<p><code>Test.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">TestS</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runCommandElabM</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">cmdCtx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">fileName</span>     <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;empty&gt;\"</span>\n    <span class=\"n\">fileMap</span>      <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofString</span> <span class=\"s2\">\"\"</span>\n    <span class=\"n\">tacticCache</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">none</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">EIO.toIO'</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">cmdCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">run</span> <span class=\"o\">{</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">maxRecDepth</span> <span class=\"o\">:=</span> <span class=\"n\">maxRecDepth.defValue</span> <span class=\"o\">})</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.Error.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"unexpected internal error: {← e.toMessageData.toString}\"</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">readTermFromFileName</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">TestS</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">code</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"o\">⟨</span><span class=\"n\">fileName</span><span class=\"o\">⟩</span>\n  <span class=\"n\">initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"s2\">\"build/lib\"</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- this should be the name of the current module, or the one that contains the `TestS` definition</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Test</span><span class=\"o\">]</span> <span class=\"o\">{}</span>\n  <span class=\"n\">runCommandElabM</span> <span class=\"n\">env</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Parser.runParserCategory</span> <span class=\"n\">env</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"n\">code</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"parse error\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">``</span><span class=\"n\">TestS</span> <span class=\"o\">[]</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">stx</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">ty</span><span class=\"o\">)</span>\n    <span class=\"n\">Meta.evalExpr</span> <span class=\"n\">TestS</span> <span class=\"n\">ty</span> <span class=\"n\">e</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"n\">args.head</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">TestS</span> <span class=\"bp\">←</span> <span class=\"n\">readTermFromFileName</span> <span class=\"n\">fileName</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Hello, {s.name}\"</span>\n</code></pre></div>\n<p><code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">package</span> <span class=\"n\">test</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">test</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Test</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"c1\">-- this is important</span>\n</code></pre></div>\n<p><code>input.txt</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span> <span class=\"s2\">\"something\"</span> <span class=\"o\">⟩</span>\n</code></pre></div>\n<p>run as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">test</span> <span class=\"n\">input.txt</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Test</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Test</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">test</span>\n<span class=\"n\">Hello</span><span class=\"o\">,</span> <span class=\"n\">something</span>\n</code></pre></div>",
        "id": 400316661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699120317
    },
    {
        "content": "<p>Nice incantation.<br>\nThanks a lot Mario, I'll play with it tonigh <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 400320748,
        "sender_full_name": "Ciprian Teodorov",
        "timestamp": 1699124682
    },
    {
        "content": "<p>This works quite well as long as it runs in the source directory, but how about running it as a standalone somewhere else?</p>",
        "id": 407440551,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1702376023
    },
    {
        "content": "<p>Would you need to have some <code>~/.config/myProgram</code> folder where you would put your sources/compilation artifacts (?) so that you have access to it when loading terms?</p>",
        "id": 407440730,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1702376078
    },
    {
        "content": "<p>you can use <code>lake env</code> to set up <code>LEAN_PATH</code> to find the necessary oleans for loading terms at runtime</p>",
        "id": 407441473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702376310
    },
    {
        "content": "<p>As long as you only depend on syntax from lean core you can probably also just depend on the oleans provided by the <code>lean</code> in the PATH</p>",
        "id": 407441646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702376373
    },
    {
        "content": "<p><a href=\"https://github.com/AdrienChampion/loadTerms.lean/tree/a59d2dcee52c45cbcfc739957f5ad9f050da8747\">Here is a plug-and-play repo with Mario's code</a> for current and future readers</p>",
        "id": 407442213,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1702376574
    },
    {
        "content": "<p>Okay so the first time it runs, the program would typically create some <code>~/.config/myProgram</code> folder, put olean/sources there.  Then just make sure to set its <code>LEAN_PATH</code> so that term loading can find everything and it should work fine</p>",
        "id": 407442509,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1702376670
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 407442516,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1702376672
    }
]