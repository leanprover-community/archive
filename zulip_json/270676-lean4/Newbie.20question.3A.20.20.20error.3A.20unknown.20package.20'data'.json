[
    {
        "content": "<p>I have infinitude_of_primes.lean which I got from <a href=\"https://gist.github.com/ujjwal-9/36967b848bd1fa8c21b6e20b35a680b9\">https://gist.github.com/ujjwal-9/36967b848bd1fa8c21b6e20b35a680b9</a></p>\n<p>Is my setup wrong?  Is the code wrong?</p>\n<p>When I try to run it I get errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"n\">infinititude_of_primes.lean</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">data'</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">nat'</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">end</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">scopes</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">','</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">end</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">scopes</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">60</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"sc\">','</span><span class=\"bp\">;</span> <span class=\"n\">expected</span> <span class=\"n\">command</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">69</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"bp\">'</span><span class=\"kd\">end</span><span class=\"bp\">'</span><span class=\"o\">,</span> <span class=\"n\">insufficient</span> <span class=\"n\">scopes</span>\n</code></pre></div>\n<p>Here's how I installed lean:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">brew</span> <span class=\"n\">install</span> <span class=\"n\">elan</span> <span class=\"n\">mathlibtools</span>\n<span class=\"n\">elan</span> <span class=\"n\">toolchain</span> <span class=\"n\">install</span> <span class=\"n\">stable</span>\n<span class=\"n\">elan</span> <span class=\"n\">default</span> <span class=\"n\">stable</span>\n</code></pre></div>\n<p>the version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">0</span><span class=\"n\">d7051497ea0</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Here is the source code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- https://mathcs.clarku.edu/~djoyce/java/elements/bookIX/propIX20.html</span>\n\n<span class=\"c1\">-- Definitions about natural numbers and primes</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.prime</span>\n\n<span class=\"c1\">-- Library on linear arithmatic</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"c1\">-- Define namespace, which is natural numbers in this case</span>\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n\n<span class=\"c1\">-- Define theorem or goal to prove</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- between begin-end block we write tactics</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- define N to be a natural number as a part of our local hypothesis</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- Continue with proof as mentioned in link provided in header</span>\n  <span class=\"c1\">-- let M to be N! + 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- let p be smallest prime factor of M which is not 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n\n\n  <span class=\"c1\">-- define supporting hypothesis pp, p is prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- begin proof for supporting p being prime</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- minimum factor of a number is prime, but what about if M = 1</span>\n    <span class=\"n\">refine</span> <span class=\"n\">min_fac_prime</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- so here we prove M != 1 or M &gt; 1</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- this just automatically takes care of linear arithmatic required for proof</span>\n    <span class=\"n\">linarith</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- before this we had existenial statement but now we have condition in p</span>\n  <span class=\"n\">use</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- split our goal in  2 subgoals</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- proof by contradiction so it should output False</span>\n  <span class=\"o\">{</span><span class=\"n\">by_contradiction</span><span class=\"o\">,</span>\n\n   <span class=\"c\">/-</span><span class=\"cm\"> hypothesis h1, p divides N! + 1 proved by</span>\n<span class=\"cm\">   min_fac_dvd : ∀ (n : ℕ), n.min_fac ∣ n</span>\n<span class=\"cm\">   -/</span>\n   <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">min_fac_dvd</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n\n   <span class=\"c1\">-- hypothesis h2, p divides N!</span>\n   <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span>  <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n   <span class=\"kd\">begin</span>\n     <span class=\"n\">refine</span> <span class=\"n\">pp.dvd_factorial.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n     <span class=\"c1\">-- proved p &lt;= N, using hypothsis h</span>\n     <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"kd\">end</span><span class=\"o\">,</span>\n   <span class=\"c\">/-</span>\n<span class=\"cm\">   proved using dvd_add_right with support from local hypothesis h₂ and h₁</span>\n<span class=\"cm\">   -/</span>\n   <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nat.dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n   <span class=\"c1\">-- prime not dividing one using local hypothesis pp and h</span>\n   <span class=\"n\">exact</span> <span class=\"n\">prime.not_dvd_one</span> <span class=\"n\">pp</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n   <span class=\"c1\">-- second part of proof is just our hypothesis pp that we already proved</span>\n  <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">pp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 404215627,
        "sender_full_name": "Kai Middleton",
        "timestamp": 1700987033
    },
    {
        "content": "<p>The example you found is Lean 3, which is incompatible with Lean 4. This proof of the infinitude of primes in Lean 4 is not as readable but it might help you adapt the above proof to the current version of Lean: <a href=\"https://github.com/leanprover-community/mathlib4/blob/632ea7781942607e95dabee9f4d1335392d0f01a/Mathlib/Data/Nat/Prime.lean#L472-L481\">https://github.com/leanprover-community/mathlib4/blob/632ea7781942607e95dabee9f4d1335392d0f01a/Mathlib/Data/Nat/Prime.lean#L472-L481</a></p>",
        "id": 404218865,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700988150
    },
    {
        "content": "<p>Other people probably have readable Lean 4 versions of this proof, let's wait a bit to see if someone has a useful link</p>",
        "id": 404218968,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1700988184
    },
    {
        "content": "<p>Someone indeed may come along with such a link, but just in case, <span class=\"user-mention\" data-user-id=\"670265\">@Kai Middleton</span> here's a completely mechanical \"port\" of that proof to lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- https://mathcs.clarku.edu/~djoyce/java/elements/bookIX/propIX20.html</span>\n\n<span class=\"c1\">-- Definitions about natural numbers and primes</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"c1\">-- Mathlib's tactics library</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- We want to refer to some theorems about Natural numbers</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n\n<span class=\"c1\">-- Define theorem or goal to prove</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- After `by` we write our \"tactics\" to prove the theorem...</span>\n\n  <span class=\"c1\">-- let N be a natural number</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span>\n\n  <span class=\"c1\">-- Continue with proof as mentioned in link provided in header</span>\n  <span class=\"c1\">-- let M be N! + 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n  <span class=\"c1\">-- let p be smallest prime factor of M which is not 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">M.minFac</span>\n\n\n  <span class=\"c1\">-- define supporting hypothesis pp, p is prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- begin proof for supporting p being prime</span>\n    <span class=\"c1\">-- minimum factor of a number is prime, but what about if M = 1</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minFac_prime</span>\n    <span class=\"c1\">-- so here we prove M != 1 or M &gt; 1</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">N</span>\n    <span class=\"c1\">-- this just automatically takes care of linear arithmatic required for proof</span>\n    <span class=\"n\">linarith</span>\n\n  <span class=\"c1\">-- before this we had existenial statement but now we have condition in p</span>\n  <span class=\"n\">use</span> <span class=\"n\">p</span>\n\n  <span class=\"c1\">-- split our goal in  2 subgoals</span>\n  <span class=\"n\">constructor</span>\n\n  <span class=\"c1\">-- proof by contradiction so it should output False</span>\n  <span class=\"bp\">·</span> <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> hypothesis h1, p divides N! + 1 proved by</span>\n<span class=\"cm\">    min_fac_dvd : ∀ (n : ℕ), n.min_fac ∣ n</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">minFac_dvd</span> <span class=\"n\">M</span>\n\n    <span class=\"c1\">-- hypothesis h2, p divides N!</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span>  <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">pp.dvd_factorial.mpr</span> <span class=\"n\">_</span>\n      <span class=\"c1\">-- proved p &lt;= N, using hypothsis h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    proved using dvd_add_right with support from local hypothesis h₂ and h₁</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span>\n   <span class=\"c1\">-- prime not dividing one using local hypothesis pp and h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.not_dvd_one</span> <span class=\"n\">pp</span> <span class=\"n\">h</span>\n   <span class=\"c1\">-- second part of proof is just our hypothesis pp that we already proved</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pp</span>\n</code></pre></div>",
        "id": 404266599,
        "sender_full_name": "Julian Berman",
        "timestamp": 1701011443
    },
    {
        "content": "<p>(Minor mostly irrelevant note: There's some minor annoyance in that even though one has <code>open Nat</code> you still get Lean complaining that <code>Nat.Prime</code> conflicts with <code>_root_.Prime</code> I think there's some plan to unify those eventually? Maybe someone will teach both of us if there's some other way to not have to write <code>Nat.Prime</code>)</p>",
        "id": 404266728,
        "sender_full_name": "Julian Berman",
        "timestamp": 1701011534
    },
    {
        "content": "<p>I guess I could have put that in <code>namespace Nat</code> and probably that would work.</p>",
        "id": 404266756,
        "sender_full_name": "Julian Berman",
        "timestamp": 1701011567
    },
    {
        "content": "<p>I think we should namespace <code>_root_.Prime</code>. That's pretty bold to assume that no one will ever want to have a declaration called <code>Prime</code> in any other package...</p>",
        "id": 404305617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701045817
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321696\">Julian Berman</span> <a href=\"#narrow/stream/270676-lean4/topic/Newbie.20question.3A.20.20.20error.3A.20unknown.20package.20'data'/near/404266599\">said</a>:</p>\n<blockquote>\n<p>Someone indeed may come along with such a link, but just in case, <span class=\"user-mention silent\" data-user-id=\"670265\">Kai Middleton</span> here's a completely mechanical \"port\" of that proof to lean 4:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- https://mathcs.clarku.edu/~djoyce/java/elements/bookIX/propIX20.html</span>\n\n<span class=\"c1\">-- Definitions about natural numbers and primes</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Prime</span>\n\n<span class=\"c1\">-- Mathlib's tactics library</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"c1\">-- We want to refer to some theorems about Natural numbers</span>\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n\n<span class=\"c1\">-- Define theorem or goal to prove</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">infinitude_of_primes</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">p</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- After `by` we write our \"tactics\" to prove the theorem...</span>\n\n  <span class=\"c1\">-- let N be a natural number</span>\n  <span class=\"n\">intro</span> <span class=\"n\">N</span>\n\n  <span class=\"c1\">-- Continue with proof as mentioned in link provided in header</span>\n  <span class=\"c1\">-- let M be N! + 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n  <span class=\"c1\">-- let p be smallest prime factor of M which is not 1</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">M.minFac</span>\n\n\n  <span class=\"c1\">-- define supporting hypothesis pp, p is prime</span>\n  <span class=\"k\">have</span> <span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">Nat.Prime</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- begin proof for supporting p being prime</span>\n    <span class=\"c1\">-- minimum factor of a number is prime, but what about if M = 1</span>\n    <span class=\"n\">apply</span> <span class=\"n\">minFac_prime</span>\n    <span class=\"c1\">-- so here we prove M != 1 or M &gt; 1</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">factorial_pos</span> <span class=\"n\">N</span>\n    <span class=\"c1\">-- this just automatically takes care of linear arithmatic required for proof</span>\n    <span class=\"n\">linarith</span>\n\n  <span class=\"c1\">-- before this we had existenial statement but now we have condition in p</span>\n  <span class=\"n\">use</span> <span class=\"n\">p</span>\n\n  <span class=\"c1\">-- split our goal in  2 subgoals</span>\n  <span class=\"n\">constructor</span>\n\n  <span class=\"c1\">-- proof by contradiction so it should output False</span>\n  <span class=\"bp\">·</span> <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> hypothesis h1, p divides N! + 1 proved by</span>\n<span class=\"cm\">    min_fac_dvd : ∀ (n : ℕ), n.min_fac ∣ n</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">minFac_dvd</span> <span class=\"n\">M</span>\n\n    <span class=\"c1\">-- hypothesis h2, p divides N!</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span>  <span class=\"n\">factorial</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">pp.dvd_factorial.mpr</span> <span class=\"n\">_</span>\n      <span class=\"c1\">-- proved p &lt;= N, using hypothsis h</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_of_not_ge</span> <span class=\"n\">h</span>\n    <span class=\"c\">/-</span>\n<span class=\"cm\">    proved using dvd_add_right with support from local hypothesis h₂ and h₁</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.dvd_add_right</span> <span class=\"n\">h₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h₁</span>\n   <span class=\"c1\">-- prime not dividing one using local hypothesis pp and h</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Nat.Prime.not_dvd_one</span> <span class=\"n\">pp</span> <span class=\"n\">h</span>\n   <span class=\"c1\">-- second part of proof is just our hypothesis pp that we already proved</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">pp</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Thanks!  I tried this mechanical port but am getting some different errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lean</span> <span class=\"n\">infinititude_of_primes.lean</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">package</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib'</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"kn\">namespace</span> <span class=\"bp\">'</span><span class=\"n\">Nat'</span>\n<span class=\"n\">infinititude_of_primes.lean</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span><span class=\"mi\">39</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">expected</span> <span class=\"n\">token</span>\n</code></pre></div>\n<p>I did some googling; one hint was to set up LEAN_PATH?  But I'm not finding any real documentation to discuss that in greater depth.</p>\n<p>I like this idea of a standalone proof of the infinitude of primes as it should be a nice self contained demo of Lean capabilities on an easy but not completely trivial proof.</p>",
        "id": 404318758,
        "sender_full_name": "Kai Middleton",
        "timestamp": 1701052423
    },
    {
        "content": "<p>the normal way to invoke lean is via lake, in the context of a project</p>",
        "id": 404320584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701053000
    },
    {
        "content": "<p>See <a href=\"https://lean-lang.org/lean4/doc/setup.html#lake\">https://lean-lang.org/lean4/doc/setup.html#lake</a> or <a href=\"https://leanprover-community.github.io/install/project.html#creating-a-lean-project\">https://leanprover-community.github.io/install/project.html#creating-a-lean-project</a></p>",
        "id": 404321254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701053224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Newbie.20question.3A.20.20.20error.3A.20unknown.20package.20'data'/near/404321254\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://lean-lang.org/lean4/doc/setup.html#lake\">https://lean-lang.org/lean4/doc/setup.html#lake</a> or <a href=\"https://leanprover-community.github.io/install/project.html#creating-a-lean-project\">https://leanprover-community.github.io/install/project.html#creating-a-lean-project</a></p>\n</blockquote>\n<p>Ok thanks, I didn't know I couldn't just do a one-off, will give that a try.</p>",
        "id": 404338453,
        "sender_full_name": "Kai Middleton",
        "timestamp": 1701063454
    },
    {
        "content": "<p>you can, but only for files that don't import anything</p>",
        "id": 404339717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701064556
    },
    {
        "content": "<p>if you want to import <code>Mathlib</code> you need to make a project depending on mathlib via <code>lake new myproj math</code></p>",
        "id": 404339782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701064585
    }
]