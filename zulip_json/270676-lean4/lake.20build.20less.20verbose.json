[
    {
        "content": "<p>Is there some config option for <code>lake build</code> so that <code>logInfo</code>s (blue squigglies) are not printed to the shell?</p>",
        "id": 383965714,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691761012
    },
    {
        "content": "<p>Does <code>--quiet</code> (or <code>-q</code>) do what you want? (<code>lake --quiet build</code>)</p>",
        "id": 383971366,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691761949
    },
    {
        "content": "<p>no, that only suppresses status messages</p>",
        "id": 383972598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691762169
    },
    {
        "content": "<p><code>&gt; /dev/null</code> will probably work <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 383972754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691762199
    },
    {
        "content": "<p><code>moreLeanArgs := #[\"--quiet\"]</code>? (or <code>weakLeanArgs</code>)</p>",
        "id": 383973478,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691762335
    },
    {
        "content": "<p>I think both of these versions are good for not getting any output at all and only get the errors. However, what I was specifically looking for is:</p>\n<ul>\n<li>don't have <code>logInfo</code> printed</li>\n<li>still get <code>logWarning</code> printed (they are also printed to <code>stdout</code>)</li>\n<li>preferabble still get the <code>[1629/1649] Building Project.Algebra.Basic</code> messages, but not essential</li>\n</ul>",
        "id": 383975970,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691762697
    },
    {
        "content": "<p>I guess there is something like <code>WarningAsError</code> but I think with that the build fails if there are any warnings at all</p>",
        "id": 383976392,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691762765
    },
    {
        "content": "<p>I think the ability to do this in lake is limited by the fact that it doesn't receive messages in a machine readable format (e.g. json), it's just seeing lean print things to stdout</p>",
        "id": 383976978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691762860
    },
    {
        "content": "<p>I'm not sure which messages \"lean --quiet\" suppresses, but not all of them; the help says \"do not print verbose messages\". Give it a try? And the 'Building' message comes from lake, not lean, so shouldn't be affected by adding \"--quiet\" to <code>weakLeanArgs</code>.</p>",
        "id": 383977447,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691762937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20less.20verbose/near/383973478\">said</a>:</p>\n<blockquote>\n<p><code>moreLeanArgs := #[\"--quiet\"]</code>? (or <code>weakLeanArgs</code>)</p>\n</blockquote>\n<p>It seems like this has no effect for me at all. I'll need a second to investigate <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 383978977,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691763170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"400544\">Buster</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20less.20verbose/near/383973478\">said</a>:</p>\n<blockquote>\n<p><code>moreLeanArgs := #[\"--quiet\"]</code>? (or <code>weakLeanArgs</code>)</p>\n</blockquote>\n<p>looks like both of these versions still print infos to stdout (unless Im doing something wrong...), thanks for the suggestion though</p>",
        "id": 383983784,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691763892
    },
    {
        "content": "<p>Hmm, that's disappointing. It looks like \"--quiet\" only cancels a previous \"--verbose\".</p>",
        "id": 383983957,
        "sender_full_name": "Richard Copley",
        "timestamp": 1691763915
    },
    {
        "content": "<p>like I said, it disables status messages (i.e. <code>Building Foo.Bar</code>)</p>",
        "id": 383984852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691764048
    },
    {
        "content": "<p>I wasn't sure if <code>lake --quiet build</code> and <code>lean --quiet</code> were two different options and you were commenting on the former.</p>",
        "id": 383985367,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691764127
    },
    {
        "content": "<p>oh, does <code>lean</code> also have a <code>--quiet</code> option? I was commenting only on the former</p>",
        "id": 383985576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691764159
    },
    {
        "content": "<p><code>lean --quiet</code> is apparently equivalent to <code>set_option verbose false</code></p>",
        "id": 383986058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691764224
    },
    {
        "content": "<p>AFAICT this option has no effect</p>",
        "id": 383986489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691764293
    },
    {
        "content": "<p>oh well, I can live with a noisy output<span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 383987160,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691764385
    },
    {
        "content": "<p>the mathlib approach is just to try to avoid noisy output in the first place</p>",
        "id": 383987344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691764417
    },
    {
        "content": "<p>unless you are writing teaching material it's generally bad practice to leave things with info logging in the source</p>",
        "id": 383987780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691764474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20less.20verbose/near/383987344\">said</a>:</p>\n<blockquote>\n<p>the mathlib approach is just to try to avoid noisy output in the first place</p>\n</blockquote>\n<p>It is for teaching.  I like the idea to have <code>logInfo</code> to help people creating a game, something like \"Your exercise overwrites a statement existing in mathlib, the mathilb version will be used in the next level\" or \"You did not provide a tactic documentation, displaying the docstring instead\" can be really useful when writing NNG levels.</p>",
        "id": 383991628,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691765028
    },
    {
        "content": "<p>What I've been doing is just building twice. The first time you get all the blue underline information, the second time you don't.</p>",
        "id": 383998330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691766050
    },
    {
        "content": "<p>Well if you don't need to rebuild a file, you won't get any messages, info or warning, from that file</p>",
        "id": 384002395,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1691766640
    },
    {
        "content": "<p>Today I revisited this, so I'm leaving a note here for reference. My solution currently is to set <code>-Dtrace.debug</code> in the lakefile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">Game</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-Dtrace.debug=false\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-Dtrace.debug=true\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>and then use <code>trace[debug] \"a message that only displays in vscode.\"</code> to display blue squiggles in VS-Code that do not appear when calling <code>lake build</code>. The disadvantage is that you loose the perks of <code>logInfo</code> like <code>logInfoAt ref m!\"x: {x}\"</code>.</p>\n<p>Another option seems to be to misuse any inbuilt option in that way and then use <code>if autoLift.get (‚Üê getOptions) then</code> but obviously it's quite bad to set such an option and it might break things. I didn't find a way to set my custom option (<code>register_option</code>) depending on whether we run in server or not. I did not find a way to test if we are in server from within lean.</p>",
        "id": 397268925,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1697621119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20build.20less.20verbose/near/397268925\">said</a>:</p>\n<blockquote>\n<p>I did not find a way to test if we are in server from within lean.</p>\n</blockquote>\n<p>Yes, this is sadly a missing feature. It might be worth making an RFC issue on leanprover/lean4 requesting it. It may be sufficiently popular to get noticed.</p>",
        "id": 397361711,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697652226
    }
]