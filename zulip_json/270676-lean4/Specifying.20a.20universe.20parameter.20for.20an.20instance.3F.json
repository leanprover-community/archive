[
    {
        "content": "<p>I've defined a structure <code>Monoid.{u}</code> which is a monoid at universe level <code>u</code>. If I want to define a coercion from <code>Monoid.{u}</code> to <code>Type u</code>, I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Monoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Monoid.Elem</span>\n</code></pre></div>\n<p>But how do I forego the <code>universe u</code> declaration there and specify the universe parameter explicitly? I've tried placing various numbers of <code>.{u}</code>s in various places, and I've also tried to find documentation on how to do it, but I haven't found anything that works yet.</p>",
        "id": 373331610,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688765169
    },
    {
        "content": "<p>Have you tried not including <code>universe u</code> and leaving everything else the same?</p>",
        "id": 373334168,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688766200
    },
    {
        "content": "<p>Yeah. That gives the error <code>unknown universe level 'u'</code> at both occurrences of <code>u</code> there.</p>",
        "id": 373334303,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688766267
    },
    {
        "content": "<p>Ok, I take it you're disabling auto-implicits?</p>",
        "id": 373334355,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688766293
    },
    {
        "content": "<p>I'm not at Lean at the moment, but if you want to be explicit about the universe variables, I believe it's <code>instance {u} : CoeSort Monoid.{u} (Type u)</code> or <code>instance {u} instCoeSortMonoid : CoeSort Monoid.{u} (Type u)</code> (i.e., you might need to name the instance for it to parse correctly)</p>",
        "id": 373334393,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688766305
    },
    {
        "content": "<p>Aha! Neither one of those exactly worked, but I took your second suggestion and rearranged it and that worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">instCoeSortMonoidType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Monoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Monoid.Elem</span>\n</code></pre></div>",
        "id": 373335224,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688766635
    },
    {
        "content": "<p>And yeah, I do have auto-implicits off.</p>\n<p>Actually, the above declaration gives a linter warning since I'm not using instCoeSortMonoidType anywhere else, so I did this to suppress the warning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instCoeSortMonoidType.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"n\">Monoid.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">Monoid.Elem</span>\n</code></pre></div>\n<p>Not the prettiest thing ever, but I'll stick with it until I grow to hate it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 373336094,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688766912
    },
    {
        "content": "<p>What's the exact linter message you get without the suppression?</p>",
        "id": 373337248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1688767324
    },
    {
        "content": "<p>It's</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unused</span> <span class=\"kd\">variable</span> <span class=\"bp\">`</span><span class=\"n\">instCoeSortMonoidType</span><span class=\"bp\">`</span> <span class=\"o\">[</span><span class=\"n\">linter.unusedVariables</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 373338401,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1688767758
    },
    {
        "content": "<p>That seems wrong?</p>",
        "id": 373362769,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688780419
    }
]