[
    {
        "content": "<p>I want to do some reasoning about code written with do notation. The problem I encountered is that it uses <code>MProd</code> instead of <code>Prod</code> and this is an issue as mathlib does not support it. </p>\n<p>What would be the best course of action that I should take? I see only these three options and I don't like any of them:</p>\n<ol>\n<li>Add relevant API to mathlib using <code>MProd</code>. This would require quite a lot of works as I want to do some analysis/calculus . It would also be a huge code duplication.</li>\n<li>Push change in core to use <code>Prod</code>in do notation. The reason for <code>MProd</code> was discussed <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO/near/282832402\">here</a>. I guess switching back to <code>Prod</code> is very low priority.</li>\n<li>do something else with my life</li>\n</ol>\n<p>Anyone has a better idea?</p>",
        "id": 402341284,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700088534
    },
    {
        "content": "<p>What kind of API do you need? I would expect simp to just blast through the necessary statements</p>",
        "id": 402341757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700088787
    },
    {
        "content": "<p>I need topological vector space on <code>MProd X Y</code>. I need to show that <code>MProd.fst</code> is linear continuous.</p>",
        "id": 402346038,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700091324
    },
    {
        "content": "<p>why?</p>",
        "id": 402347302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700092142
    },
    {
        "content": "<p>that sounds very much like you are misusing the output of the do notation</p>",
        "id": 402347351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700092176
    },
    {
        "content": "<p>That is possible, I have to investigate more. The desugared code is still a bit of a mystery to me. I was differentiating through for loop and got stuck because I don't have any rules for MProd.fst.</p>",
        "id": 402347663,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700092326
    },
    {
        "content": "<p>Maybe I can eliminate it by running a simplifier but I first differentiate the code as it is and only then simplify.</p>",
        "id": 402347914,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700092498
    },
    {
        "content": "<p>the easy proof that <code>MProd X Y</code> is a top vec space is to pull back across the equiv to <code>Prod X Y</code></p>",
        "id": 402348651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700092954
    },
    {
        "content": "<p>and the proof that <code>MProd.fst</code> is linear continuous is that it is <code>Prod.fst</code> composed with the equiv</p>",
        "id": 402348780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700093002
    },
    {
        "content": "<p>And is there an API to transfer structure to another type given an equivalence between them?</p>",
        "id": 402349125,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700093183
    },
    {
        "content": "<p>I should hope so</p>",
        "id": 402349177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700093211
    },
    {
        "content": "<p>usually called <code>T.copy</code></p>",
        "id": 402349199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700093224
    },
    {
        "content": "<p>Would that create for example a new addition on <code>MProd X Y</code> if it already exists?</p>",
        "id": 402349405,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1700093329
    },
    {
        "content": "<p>yes</p>",
        "id": 402350552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700093879
    },
    {
        "content": "<p>but I don't think there will be any algebraic structure on this type that you didn't create</p>",
        "id": 402350618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700093895
    }
]