[
    {
        "content": "<p>Hi! I was wondering if there are some ways to find the name of a module given its ModuleIdx (module index)? I read through the relevant chapters of Lean 4 documents and learned that \"the module index is unique to each module\", so I suspect there should be some ways to map back from a ModuleIdx to the one-to-one-corresponding Module name? Thank you!</p>",
        "id": 370543305,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1687978523
    },
    {
        "content": "<p><code>env.header.moduleNames[i.toNat]!</code></p>",
        "id": 370574743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687986279
    },
    {
        "content": "<p>I agree that an API function would be helpful, so you don't have to carry around the knowledge that this <code>Array</code> is ordered correctly!</p>",
        "id": 370574917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687986336
    },
    {
        "content": "<p>Thank you very much, Scott!</p>",
        "id": 370582884,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1687988832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"601076\">Peiyang Song</span> has marked this topic as resolved.</p>",
        "id": 370889545,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688064189
    },
    {
        "content": "<p>For anyone who comes to this problem later, here is the function I wrote to do this <code>module index -&gt; module name</code> query. Please feel free to build on this for your own use :)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">modNameSearch</span> <span class=\"o\">(</span><span class=\"n\">queryIdx</span> <span class=\"o\">:</span> <span class=\"n\">ModuleIdx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">modName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Not-Found!\"</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">queryIdx</span> <span class=\"bp\">==</span> <span class=\"n\">env.getModuleIdx</span><span class=\"bp\">?</span> <span class=\"n\">env.header.mainModule</span> <span class=\"k\">then</span>\n    <span class=\"n\">modName</span> <span class=\"o\">:=</span> <span class=\"n\">env.header.mainModule</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">for</span> <span class=\"n\">candidateMod</span> <span class=\"k\">in</span> <span class=\"n\">env.header.moduleNames</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">queryIdx</span> <span class=\"bp\">==</span> <span class=\"n\">env.getModuleIdx</span><span class=\"bp\">?</span> <span class=\"n\">candidateMod</span> <span class=\"k\">then</span>\n        <span class=\"n\">modName</span> <span class=\"o\">:=</span> <span class=\"n\">candidateMod</span>\n        <span class=\"n\">return</span> <span class=\"n\">modName</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">modName</span>\n</code></pre></div>",
        "id": 371322727,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1688166429
    },
    {
        "content": "<p>Oh, was I wrong in claiming the invariant <code>env.header.moduleNames[env.getModuleIdx? n]! = n</code> for all <code>n</code> in <code>env.header.moduleNames</code>?</p>",
        "id": 371370556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688191799
    },
    {
        "content": "<p>No I don't think you were</p>",
        "id": 371375462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688193707
    },
    {
        "content": "<p>in fact <code>getModuleIdx?</code> is implemented like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getModuleIdx</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">moduleName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">ModuleIdx</span> <span class=\"o\">:=</span>\n  <span class=\"n\">env.header.moduleNames.findIdx</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">Â·</span> <span class=\"bp\">==</span> <span class=\"n\">moduleName</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so it's definitely going to satisfy that property!</p>",
        "id": 371376021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688193914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"601076\">@Peiyang Song</span>, do you see that you can simplify your definition using this?</p>",
        "id": 371377996,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1688194646
    },
    {
        "content": "<p>FWIW, I used essentially this here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/8192584d9606c688fcbafc63821a2c1e798337ab/Embedding/Main.lean#L16\">https://github.com/leanprover-community/mathlib4/blob/8192584d9606c688fcbafc63821a2c1e798337ab/Embedding/Main.lean#L16</a> </p>\n<p>Would it make sense to put such a function somewhere more widely available?</p>",
        "id": 371385761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688196892
    },
    {
        "content": "<p>Oh but now I see I could have just used <code>env.header.moduleNames.find?</code>.</p>",
        "id": 371387800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1688197422
    },
    {
        "content": "<p>Definitely! This makes sense, thank you Mario and Scott!</p>",
        "id": 371503475,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1688222864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20From.20ModuleIdx.20to.20Module.20name/near/371385761\">said</a>:</p>\n<blockquote>\n<p>FWIW, I used essentially this here: <a href=\"https://github.com/leanprover-community/mathlib4/blob/8192584d9606c688fcbafc63821a2c1e798337ab/Embedding/Main.lean#L16\">https://github.com/leanprover-community/mathlib4/blob/8192584d9606c688fcbafc63821a2c1e798337ab/Embedding/Main.lean#L16</a> </p>\n<p>Would it make sense to put such a function somewhere more widely available?</p>\n</blockquote>\n<p>This is also very good to know :) Thank you!</p>",
        "id": 371504141,
        "sender_full_name": "Peiyang Song",
        "timestamp": 1688223013
    }
]