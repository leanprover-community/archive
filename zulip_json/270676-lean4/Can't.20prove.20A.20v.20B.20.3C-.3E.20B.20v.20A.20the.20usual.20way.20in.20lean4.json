[
    {
        "content": "<p><a href=\"/user_uploads/3121/t2ApJJJXh2rCFLyrFFI9l9J7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/t2ApJJJXh2rCFLyrFFI9l9J7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/t2ApJJJXh2rCFLyrFFI9l9J7/image.png\"></a></div><p>I just copied / pasted from here:</p>\n<p><a href=\"https://stackoverflow.com/a/61771167/7076615\">https://stackoverflow.com/a/61771167/7076615</a></p>",
        "id": 359976518,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684631353
    },
    {
        "content": "<p>Hi! What you've just copied is in fact Lean 3, which is not compatible with Lean 4.</p>",
        "id": 359976840,
        "sender_full_name": "rami3l",
        "timestamp": 1684631656
    },
    {
        "content": "<p>You might want to try the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Iff.intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 359977208,
        "sender_full_name": "rami3l",
        "timestamp": 1684631991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span> That's awesome, but how does that \"|\" vertical bar notation work?</p>",
        "id": 359978147,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684632879
    },
    {
        "content": "<p>(It turns out that <code>assume h : p, t</code> just a sugar of <code>λ h : p, t</code> in Lean 3, which should just be written with a lambda now.)</p>",
        "id": 359978157,
        "sender_full_name": "rami3l",
        "timestamp": 1684632901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span>  yes, but understand, your code looks nothing like that syntax!  What's |?<br>\n:)</p>",
        "id": 359978188,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684632946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Can't.20prove.20A.20v.20B.20.3C-.3E.20B.20v.20A.20the.20usual.20way.20in.20lean4/near/359978147\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> That's awesome, but how does that \"|\" vertical bar notation work?</p>\n</blockquote>\n<p>Oh, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is just the same as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 359978303,
        "sender_full_name": "rami3l",
        "timestamp": 1684633050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span>  How can you have .inl without anything on the front of .?</p>",
        "id": 359978414,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684633171
    },
    {
        "content": "<p>A more literal translation of your original code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">Iff.intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hqp</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hqp</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 359978480,
        "sender_full_name": "rami3l",
        "timestamp": 1684633208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span>  Thank you!</p>",
        "id": 359978494,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684633238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"615361\">@rami3l</span> is there a way to do that using have / show?</p>",
        "id": 359978527,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684633279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Can't.20prove.20A.20v.20B.20.3C-.3E.20B.20v.20A.20the.20usual.20way.20in.20lean4/near/359978414\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span>  How can you have .inl without anything on the front of .?</p>\n</blockquote>\n<p>Briefly speaking, because Lean knows that you are matching against an <code>Or</code>, that is.</p>",
        "id": 359978612,
        "sender_full_name": "rami3l",
        "timestamp": 1684633335
    },
    {
        "content": "<p>We will study your proof carefully :)</p>",
        "id": 359978659,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684633407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Can't.20prove.20A.20v.20B.20.3C-.3E.20B.20v.20A.20the.20usual.20way.20in.20lean4/near/359978527\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> is there a way to do that using have / show?</p>\n</blockquote>\n<p>I only know about Lean 4, but it seems to me that the tactics mode is quite consistent between both versions, except that in Lean 4 you should  use <code>by</code> to start using tactics, and <code>;</code> instead of <code>,</code> as terminators.</p>\n<p>You should be able to learn from the examples in the tutorial: </p>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html?highlight=show#structuring-tactic-proofs\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html?highlight=show#structuring-tactic-proofs</a></p>",
        "id": 359979002,
        "sender_full_name": "rami3l",
        "timestamp": 1684633737
    },
    {
        "content": "<p>(I guess that the usages of <code>have</code> and <code>show</code> haven't changed too much, so if you have valid Lean 3 code using those constructs, you'll probably be fine in Lean 4 after some simple syntax rewrites.)</p>",
        "id": 359979303,
        "sender_full_name": "rami3l",
        "timestamp": 1684633997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"236489\">@Daniel Donnelly</span> Do you have a more concrete example of how you want to use <code>have</code> or <code>show</code> in this case?</p>",
        "id": 359979556,
        "sender_full_name": "rami3l",
        "timestamp": 1684634234
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> <a href=\"#narrow/stream/270676-lean4/topic/Can't.20prove.20A.20v.20B.20.3C-.3E.20B.20v.20A.20the.20usual.20way.20in.20lean4/near/359979002\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"236489\">Daniel Donnelly</span> <a href=\"#narrow/stream/270676-lean4/topic/Can't.20prove.20A.20v.20B.20.3C-.3E.20B.20v.20A.20the.20usual.20way.20in.20lean4/near/359978527\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"615361\">rami3l</span> is there a way to do that using have / show?</p>\n</blockquote>\n<p>I only know about Lean 4, but it seems to me that the tactics mode is quite consistent between both versions, except that in Lean 4 you should  use <code>by</code> to start using tactics, and <code>;</code> instead of <code>,</code> as terminators.</p>\n<p>You should be able to learn from the examples in the tutorial: </p>\n<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean4/tactics.html?highlight=show#structuring-tactic-proofs\">https://leanprover.github.io/theorem_proving_in_lean4/tactics.html?highlight=show#structuring-tactic-proofs</a></p>\n</blockquote>\n<p>I like this version, it's more _fun_:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">Iff.intro</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hpq</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hpq</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_left</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hqp</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.elim</span> <span class=\"n\">hqp</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span>  <span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_right</span> <span class=\"n\">p</span> <span class=\"n\">hq</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.intro_left</span> <span class=\"n\">q</span> <span class=\"n\">hp</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 359987950,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684640583
    }
]