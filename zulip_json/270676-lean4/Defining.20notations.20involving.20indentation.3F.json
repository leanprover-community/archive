[
    {
        "content": "<p>I'd like to define a notation that behaves similarly to the <code>structure</code> command. If I understand right, it's possible (maybe mandatory?) to have the fields of the structure indented, with the end of the indented block marking the end of the structure.</p>\n<p>With the <code>syntax</code> command, is it possible to define something that responds to indentation the same way? (If not, no problem; I'll use braces and semicolons or something.)</p>",
        "id": 375402722,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1689374480
    },
    {
        "content": "<p>Aha, I think I've figured it out:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"variety_info \"</span> <span class=\"o\">(</span><span class=\"n\">manyIndent</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n</code></pre></div>\n<p>This allows me to write stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">TwoSetsInfo</span> <span class=\"o\">:=</span> <span class=\"n\">variety_info</span>\n    <span class=\"n\">Set1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n    <span class=\"n\">Set2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 375405980,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1689376095
    },
    {
        "content": "<p>But now I'm having trouble implementing macro rules for it. What I did manage to get working is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"variety_info \"</span> <span class=\"o\">(</span><span class=\"n\">manyIndent</span><span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">variety_info</span>\n        <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">VarietyInfo.mk</span> <span class=\"o\">(</span><span class=\"n\">sorts</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>The above code allows me to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">variety_info</span>\n  <span class=\"bp\">`</span><span class=\"n\">ThisThing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">`</span><span class=\"n\">ThatThing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>and it comes out as <code>{ sorts := [`ThisThing, `ThatThing] } : VarietyInfo</code>. That's _very close_ to what I actually want. What I actually want is to be able to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">variety_info</span>\n  <span class=\"n\">ThisThing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">ThatThing</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>My best attempt at getting this working was to write this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"variety_info \"</span> <span class=\"o\">(</span><span class=\"n\">manyIndent</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">variety_info</span>\n        <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">VarietyInfo.mk</span> <span class=\"o\">(</span><span class=\"n\">sorts</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">`$</span><span class=\"n\">name</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">]))</span>\n</code></pre></div>\n<p>But I get an error at <code>name</code> on the last line there:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Array.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Syntax.node2</span> <span class=\"n\">info</span><span class=\"bp\">✝</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.precheckedQuot</span> <span class=\"o\">(</span><span class=\"n\">Lean.Syntax.atom</span> <span class=\"n\">info</span><span class=\"bp\">✝</span> <span class=\"s2\">\"`\"</span><span class=\"o\">)</span> <span class=\"n\">name.raw</span><span class=\"o\">)</span>\n    <span class=\"n\">name</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">name</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">Lean.TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Term.quot</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>Presumably, writing <code>`$name</code> is not the right way to say \"take the identifier bound to <code>$name</code> and make a name literal out of it,\" but what is?</p>",
        "id": 375409392,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1689377796
    },
    {
        "content": "<p>You are looking for <code>$(quote name)</code> instead of <code> `$name</code>.</p>",
        "id": 375424890,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689384296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20notations.20involving.20indentation.3F/near/375424890\">said</a>:</p>\n<blockquote>\n<p>You are looking for <code>$(quote name)</code> instead of <code> `$name</code>.</p>\n</blockquote>\n<p>Many thanks! It looks like that's one half of what I needed—the <code>quote</code> function will convert a <code>Name</code> to a <code>TSyntax `term</code>,  and the other half is converting a <code>TSyntax `ident</code> to a <code>Name</code>. So here's the final working code I ended up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"n\">quote</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"variety_info \"</span> <span class=\"o\">(</span><span class=\"n\">manyIndent</span><span class=\"o\">(</span><span class=\"n\">ident</span> <span class=\"s2\">\":\"</span> <span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ident_to_quoted_term</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">name.raw</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ident</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">val</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">quote</span> <span class=\"n\">val</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">default</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">variety_info</span>\n        <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">VarietyInfo.mk</span> <span class=\"o\">(</span><span class=\"n\">sorts</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Array.map</span> <span class=\"n\">ident_to_quoted_term</span> <span class=\"n\">name</span><span class=\"o\">)],</span><span class=\"bp\">*</span><span class=\"o\">]))</span>\n</code></pre></div>",
        "id": 378798652,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1690377570
    },
    {
        "content": "<p>the other half is <code>name.getId</code></p>",
        "id": 378901798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690395367
    }
]