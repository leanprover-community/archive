[
    {
        "content": "<p>This theorem is nonsense, but I still don't understand why lean accepts it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c₁</span> <span class=\"bp\">=</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>when I look in the goal view, the target is <code>h ▸ c₁ = h ▸ Eq.symm h ▸ c₂</code> not <code>h ▸ c₁ = h ▸ c₂</code>.</p>\n<p>Where did the <code>Eq.symm h ▸</code> come from?</p>",
        "id": 397285809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697626646
    },
    {
        "content": "<p>Hovering over the black triangle of computer science, starts to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">`</span><span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">e</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">macro</span> <span class=\"n\">built</span> <span class=\"n\">on</span> <span class=\"n\">top</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">Eq.rec</span><span class=\"bp\">`</span> <span class=\"n\">and</span> <span class=\"bp\">`</span><span class=\"n\">Eq.symm</span><span class=\"bp\">`</span> <span class=\"n\">definitions</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Maybe the \"macro\" realises that you want to apply it to rewrite <code>a₂</code> and so needs the use <code>Eq.symm</code>.  Kind of like a very obscure <code>←</code>?</p>",
        "id": 397296344,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697630228
    },
    {
        "content": "<p>Also, how many <code>Eq.symm</code> do you expect to see in the goal below?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.proofs</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a₁</span> <span class=\"bp\">=</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c₁</span> <span class=\"bp\">=</span> <span class=\"n\">Eq.symm</span> <span class=\"n\">h</span> <span class=\"bp\">▸</span> <span class=\"n\">c₂</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 397303407,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697632668
    },
    {
        "content": "<p>Fewer than that!</p>",
        "id": 397308618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697634290
    },
    {
        "content": "<p>For the original question, this is what I think happens.  Lean interprets that you have given it <code>C a2</code> as the LHS.  Now it tries hard to get the same on the right.  But, you've told it that you want the RHS to be <code>C a1</code>... so it invokes the power of the black magic triangle, which allows it to recursively use rewrites and symms, inserting them where it pleases: I suspect that the rule is that there should be at least one.</p>\n<p>So, first, it realises that you told it garbage: you cannot rewrite <code>C a2</code> with <code>h</code>, it had better be <code>Eq.symm h</code> and you get to <code>C a1</code>.  But the LHS was <code>C a2</code>, so let's rewrite with <code>h</code> one more time... et voilà!</p>\n<p>Nothing could be clearer.</p>",
        "id": 397310611,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697634882
    },
    {
        "content": "<p>The second question is left as an exercise.</p>",
        "id": 397310800,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697634947
    }
]