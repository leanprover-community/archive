[
    {
        "content": "<p>I encountered a piece of code where I believe Lean should be able to infer the types, but it isn't able to. Here's a minimised version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n      <span class=\"n\">return</span> <span class=\"n\">a</span>\n      <span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"c1\">-- invalid match-expression, type of pattern variable 'b' contains metavariables</span>\n  <span class=\"c1\">-- ?m.494</span>\n  <span class=\"n\">return</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>It can be fixed by removing the brackets around <code>b</code>, because with the brackets it is interpreted as a pattern, but this fix doesn't work if you're working with a non-trivial pattern like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">)</span>\n      <span class=\"o\">)</span> <span class=\"o\">()</span>\n  <span class=\"n\">return</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 408609096,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1702905421
    },
    {
        "content": "<p>This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"n\">pure</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 408619743,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702908724
    },
    {
        "content": "<p>I went a bit far with minimizing the example, what about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">A.foldr</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">return</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 408622416,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1702909587
    },
    {
        "content": "<p>By the way, the problem can be solved by writing an extra type annotation somewhere, but it is quite frustrating to get an error message and to need to \"fix\" a piece of code when it is perfectly valid.</p>",
        "id": 408622717,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1702909699
    },
    {
        "content": "<p>Weird, adding a <code>variable</code> line gets rid of the error, and adding <code>{α : Type _}</code> as an extra argument doesn't suffice.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">A.foldr</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">none</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"n\">true</span> <span class=\"k\">then</span> <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"k\">else</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"n\">return</span> <span class=\"n\">a</span>\n    <span class=\"o\">)</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">x</span>\n  <span class=\"n\">return</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 408634308,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702913257
    },
    {
        "content": "<p>(not that it's really <code>{α : Type}</code> here, since the <code>Unit</code> forces everything to live in <code>Type 0</code>)</p>",
        "id": 408637973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702914448
    }
]