[
    {
        "content": "<p>What is the Lean 4 equivalent of <code>induction l with head tail ih,</code> please?<br>\nI can write <code>induction l with</code> and then do a pattern matching. Unfortunately, it doesn't support syntactic sugar for lists (or I don't know how to write it there) so it isn't very comfortable.<br>\nI noticed there is <code>induction' l with head tail ih</code> but <code>induction'</code> seems to require mathlib.<br>\nCan I still use <code>induction</code> the old way?</p>",
        "id": 328284376,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676565783
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">l.reverse.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n    <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">h</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 328288600,
        "sender_full_name": "Arien Malec",
        "timestamp": 1676566972
    },
    {
        "content": "<p>This is the option I know about. Can you write it using the <code>h::t</code> syntax?</p>",
        "id": 328289162,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676567138
    },
    {
        "content": "<p>I suppose the tactic <code>induction'</code> in mathlib4 is the closest thing?</p>",
        "id": 328315817,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676574594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60induction.60.20in.20Lean.204/near/328289162\">said</a>:</p>\n<blockquote>\n<p>This is the option I know about. Can you write it using the <code>h::t</code> syntax?</p>\n</blockquote>\n<p>Btw, there is also a <code>match</code> tactic with the same syntax as term mode <code>match</code>. So you can write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">l.reverse.length</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">l.reverse</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n    <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">ih</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">foo</span> <span class=\"n\">_</span> <span class=\"n\">t</span>\n      <span class=\"n\">_</span>\n</code></pre></div>\n<p>But as opposed to <code>induction</code> it doesn't add the induction hypothesis for you, hence the explicit recursive call to <code>foo</code>. (I've never really used tactic <code>match</code>, so I don't know if there are any caveats)</p>",
        "id": 328321995,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1676576625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 328325542,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676577742
    }
]