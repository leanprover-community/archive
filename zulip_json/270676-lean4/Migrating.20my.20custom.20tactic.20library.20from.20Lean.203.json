[
    {
        "content": "<p>Lean 3 allows users to define some custom tactic monad and use it instead.  Especially, <code>begin[xxx] ... end</code> blocks use tactics not from <code>tactic.interactive</code> but from <code>xxx.interactive</code>, making it easy to switch between different sets of tactics.<br>\nI learned this in <a href=\"https://leanprover-community.github.io/archive/stream/113488-general/topic/no.20lean.20messages.20output.20in.20hacked.20mode.html\">https://leanprover-community.github.io/archive/stream/113488-general/topic/no.20lean.20messages.20output.20in.20hacked.20mode.html</a> and (if necessary) my own code is <br>\n<a href=\"https://github.com/ge9/ntac/blob/c34eceeeaee6957f716874a5482ae23be94bbab1/src/ntac/ntac.lean#LL56C2-L56C3\">https://github.com/ge9/ntac/blob/c34eceeeaee6957f716874a5482ae23be94bbab1/src/ntac/ntac.lean#LL56C2-L56C3</a> .<br>\nNow I'm wondering how to implement this in Lean4.  Any help would be appreciated!</p>",
        "id": 368458967,
        "sender_full_name": "Tsuru",
        "timestamp": 1687421016
    },
    {
        "content": "<p>Metaprogramming in Lean 4 is a good place to start to learn: <a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">https://github.com/arthurpaulino/lean4-metaprogramming-book</a></p>",
        "id": 368490515,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1687427263
    },
    {
        "content": "<p>Now I have suceeded in this.<br>\nFirst, define the custom tactic monad, and provide conversion functions and a required instance definition for it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">NTacticM</span> <span class=\"o\">:=</span> <span class=\"n\">StateT</span> <span class=\"n\">My_State</span> <span class=\"n\">TacticM</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">NTactic</span>  <span class=\"o\">:=</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">NTacticM</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mylift</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NTacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">m</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">res</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">mylift_inv</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">NTacticM</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">m</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"n\">res.fst</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadRecDepth</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">MonadRecDepth</span> <span class=\"o\">(</span><span class=\"n\">StateT</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">withRecDepth</span> <span class=\"n\">d</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">MonadRecDepth.withRecDepth</span> <span class=\"n\">d</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">ctx</span><span class=\"o\">)</span>\n  <span class=\"n\">getRecDepth</span>      <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span>  <span class=\"n\">MonadRecDepth.getRecDepth</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"n\">getMaxRecDepth</span>   <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"bp\">←</span>  <span class=\"n\">MonadRecDepth.getMaxRecDepth</span><span class=\"bp\">;</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then I copied two definitions from the standard library and modified like this, to use the attribute <code>attr_ntac_tactic</code> instead of the existing <code>tactic</code>. (this is highly undocumented and I don't know its validity, but it's working)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">mkNTacticAttribute</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">KeyedDeclsAttribute</span> <span class=\"n\">NTactic</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">mkElabAttribute</span> <span class=\"n\">NTactic</span> <span class=\"bp\">`</span><span class=\"n\">builtin_attr_ntac_tactic</span> <span class=\"bp\">`</span><span class=\"n\">attr_ntac_tactic</span> <span class=\"bp\">`</span><span class=\"n\">Ntac.Parser.Tactic</span> <span class=\"bp\">`</span><span class=\"n\">Ntac.Elab.Tactic.NTactic</span> <span class=\"s2\">\"ntac_tactic\"</span> <span class=\"bp\">`</span><span class=\"n\">Ntac.Elab.Tactic.tacticElabAttribute</span>\n\n<span class=\"kd\">@[init mkNTacticAttribute]</span> <span class=\"n\">opaque</span> <span class=\"n\">tacticElabAttribute</span> <span class=\"o\">:</span> <span class=\"n\">KeyedDeclsAttribute</span> <span class=\"n\">NTactic</span>\n</code></pre></div>\n<p>Then I redefined many existing parser and elab/eval functions, including <code>byTactic</code>, <code>elabByTactic</code>, <code>tacticSeq</code>, <code>evalTacticSeq</code>,  <code>tacticParser</code>, <code>evalTactic</code>.<br>\nI modified <code>tacticParser</code> to accept both existing <code>tactic</code>s and my custom <code>ntac_tactic</code>s. (<code>ntac_tactic</code> is prioritized)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">ntac_tacticParser</span> <span class=\"o\">(</span><span class=\"n\">rbp</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">categoryParser</span> <span class=\"bp\">`</span><span class=\"n\">ntac_tactic</span> <span class=\"n\">rbp</span><span class=\"o\">)</span>  <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"n\">categoryParser</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span> <span class=\"n\">rbp</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I can add custom tactic. This is custom <code>exact</code> tactic that imitates the default <code>exact</code> tactic, with a custom message.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">ntac_exact</span><span class=\"o\">)</span> <span class=\"s2\">\"exact \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">ntac_tactic</span>\n<span class=\"kd\">@[attr_ntac_tactic ntac_exact]</span> <span class=\"kd\">def</span> <span class=\"n\">evalMyExact</span> <span class=\"o\">:</span> <span class=\"n\">Ntac.Elab.Tactic.NTactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.logInfo</span> <span class=\"s2\">\"this is my exact\"</span>\n  <span class=\"n\">Ntac.Elab.Tactic.mylift</span> <span class=\"bp\">$</span> <span class=\"n\">Lean.Elab.Tactic.evalTactic</span> <span class=\"o\">(</span><span class=\"n\">stx.setKind</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.exact</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'll share the whole code at GitHub in the future, or soon if requested.</p>",
        "id": 389554347,
        "sender_full_name": "Tsuru",
        "timestamp": 1694055496
    }
]