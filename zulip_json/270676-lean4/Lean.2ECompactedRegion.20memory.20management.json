[
    {
        "content": "<p>Is the following understanding of <code>pickle</code> correct?<br>\nThe <code>Lean.CompactedRegion</code> returned from <a href=\"https://leanprover-community.github.io/mathlib4_docs/Std/Util/Pickle.html#unpickle\"><code>unpickle</code></a> <em>can</em> be used to free the region, using <code>Lean.CompactedRegion.free</code>.<br>\nAs long as this is not called explicitly, the compact region stays around.<br>\nDropping the last reference to the <code>Lean.CompactedRegion</code> object does not free the region. In particular, if I don’t plan to free the region, I don’t need to keep the <code>Lean.CompactedRegion</code> value around.<br>\nFreeing the region (explicitly) is dangerous if there still is some reference to values in it, as they will now point to unmapped or even unrelated memory.</p>",
        "id": 393525183,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695830581
    },
    {
        "content": "<p>Yes!</p>",
        "id": 393525561,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695830674
    },
    {
        "content": "<p>Thanks! So <a href=\"https://github.com/leanprover-community/mathlib4/pull/7305\">mathlib4#7305</a> isn’t bogus :-)</p>\n<p>I’m reading through the module loading code, and unless I am mistake, it only uses <code>mmap</code> if it can manage to import the <code>.olean</code> at the same position it was when it was serialized? Ah, it uses a random base base address when creating the <code>.olean</code>. That’s kinda amusing :-)</p>",
        "id": 393527715,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695831396
    },
    {
        "content": "<p>Did you consider to only have relative pointers in data structures, so that compacted regions would be relocatable? But guess if this scheme works, then why bother.</p>",
        "id": 393529978,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695832176
    },
    {
        "content": "<p>Yes, collisions are not a concern in 64 bit address space. Doing additional pointer calculations just for that doesn't sound pretty.</p>",
        "id": 393530476,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695832357
    }
]