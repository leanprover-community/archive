[
    {
        "content": "<p>I wanted to try out quote4 library but I'm having hard time using its antiquotations. I really do not understand why am I getting the error here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span> <span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FinExpr</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- works fine</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FinExpr'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier '«$n»'</span>\n</code></pre></div>",
        "id": 340200500,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678218896
    },
    {
        "content": "<p>Maybe <code>let</code> bindings are handled differently depending on whether there's an expected type or not (both for the whole <code>let</code> and for the thing being defined)?</p>\n<p>These work for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FinExpr'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">FinExpr''</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340203026,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1678219619
    },
    {
        "content": "<p>Odd, this also does not work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">FinExpr'''</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 340203485,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678219776
    },
    {
        "content": "<p>that's expected, the quote macro only lifts things in the local context into the inner state</p>",
        "id": 340203752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678219878
    },
    {
        "content": "<p>Ok that makes sense.</p>\n<p>Another odd thing:</p>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>This does not:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVarQ</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"c1\">-- incompatible metavariable _uniq.146616</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>What is the difference?</p>",
        "id": 340204668,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678220218
    },
    {
        "content": "<p>One thing to watch out for is that there is a difference between <code>QQ e</code> and <code>QQ (QQ.qq e)</code> but these are pretty printed the same way. <code>QQ.qq</code> is an identity wrapper which is used for pretty printing(?) and is generated by <code>q(e)</code> expressions. When you use <code>Q(e)</code> it just creates <code>QQ e</code>, but if you have a function <code>def foo (A : Q(Type)) : QQ A</code> then <code>foo q(e)</code> will have type <code>QQ (QQ.qq e)</code></p>",
        "id": 340204670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678220221
    },
    {
        "content": "<p>In your first example the type of <code>FinExpr</code> is <code>QQ (QQ.qq e)</code> and in the second one it is <code>QQ e</code></p>",
        "id": 340204785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678220269
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/confusing.20error.20with.20quote4/near/340204785\">said</a>:</p>\n<blockquote>\n<p>In your first example the type of <code>FinExpr</code> is <code>QQ (QQ.qq e)</code> and in the second one it is <code>QQ e</code></p>\n</blockquote>\n<p>How can I see that? I set <code>set_option pp.all false</code> and I still see <code>Q(Type)</code> as the type of <code>FinExpr</code></p>",
        "id": 340205086,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678220366
    },
    {
        "content": "<p>you want pp.all true</p>",
        "id": 340205122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678220387
    },
    {
        "content": "<p>That doesn't seem to explain the difference though, you get the same result with a type ascription of <code>QQ q(Type)</code> instead of <code>Q(Type)</code></p>",
        "id": 340205326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678220464
    },
    {
        "content": "<p>BTW, when looking at <code> Qq.QQ (@Qq.QQ.qq ...)</code> I am reminded of <a href=\"https://esolangs.org/wiki/OOo_CODE\">https://esolangs.org/wiki/OOo_CODE</a>...</p>",
        "id": 340206637,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678220906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">FinExpr'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n  <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier '«$n»'</span>\n</code></pre></div>\n<p>This is an unfortunate issue with elaboration order.  Apparently we don't yet know the type of <code>n</code> when elaborating the <code>q(Fin $n)</code>, so quote4 doesn't know that it can unquote that hypothesis.  We should probably postpone until the types of all assumptions are known.</p>",
        "id": 340207014,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678221032
    },
    {
        "content": "<p>The reason it works in the first example is presumably because we postpone to wait for the expected type.</p>",
        "id": 340207111,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678221065
    },
    {
        "content": "<p>How do I get this working? Even with explicit types it does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier '«$f»'</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← Meta.ppExpr lhs}\"</span>\n</code></pre></div>",
        "id": 340207374,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678221155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/confusing.20error.20with.20quote4/near/340203485\">said</a>:</p>\n<blockquote>\n<p>Odd, this also does not work</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">FinExpr'''</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This is a bug, at the moment we assume that <code>$n</code> refers to a free variable.  You can write <code>$((n))</code> as a workaround.</p>",
        "id": 340207493,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678221194
    },
    {
        "content": "<blockquote>\n<p>QQ.qq is an identity wrapper which is used for pretty printing(?)</p>\n</blockquote>\n<p>The wrapper is used to tag an expression with a type; if you have a bare <code>Expr</code> you don't know if it's supposed to denote a <code>Nat</code> or something else.  At some point in the past <code>QQ</code> used to be a structure, and <code>qq</code> was its constructor.  Maybe we should get back to that.</p>",
        "id": 340207726,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678221277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/confusing.20error.20with.20quote4/near/340207374\">said</a>:</p>\n<blockquote>\n<p>How do I get this working? Even with explicit types it does not work:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">((</span><span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier '«$f»'</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← Meta.ppExpr lhs}\"</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>You've got a typo here.  It needs to be <code>$f?</code> and not <code>$f</code>.  Also <code>lhs</code> doesn't type-check (<code>$f?</code> takes one argument, not two).</p>",
        "id": 340208084,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678221420
    },
    {
        "content": "<p>I think if <code>Q(e)</code> generated a term of the form <code>QQ (QQ.qq e)</code> then there would be fewer discrepancies here</p>",
        "id": 340208400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678221538
    },
    {
        "content": "<blockquote>\n<p>there is a difference between QQ e and QQ (QQ.qq e)</p>\n</blockquote>\n<p>Does this cause any issues?  If anything, it should always be <code>QQ e</code> since <code>e</code> is an argument of type <code>Expr</code>.</p>",
        "id": 340208838,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678221690
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/confusing.20error.20with.20quote4/near/340208084\">said</a>:</p>\n<blockquote>\n<p>You've got a typo here.  It needs to be <code>$f?</code> and not <code>$f</code>.  Also <code>lhs</code> doesn't type-check (<code>$f?</code> takes one argument, not two).</p>\n</blockquote>\n<p>Good, totally my mistake. It works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"bp\">→</span><span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">lhs</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"k\">let</span> <span class=\"n\">rhs</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">10</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← isDefEq lhs rhs}: {← Meta.ppExpr lhs} =?= {← Meta.ppExpr rhs}\"</span>\n</code></pre></div>\n<p>I'm trying to use it to test out some unification problems.</p>",
        "id": 340208895,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1678221707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/confusing.20error.20with.20quote4/near/340208838\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>there is a difference between QQ e and QQ (QQ.qq e)</p>\n</blockquote>\n<p>Does this cause any issues?  If anything, it should always be <code>QQ e</code> since <code>e</code> is an argument of type <code>Expr</code>.</p>\n</blockquote>\n<p>It does; a lot of the time when I call <code>synthInstanceQ</code> or other similar functions I have to write something like <code>let inst : Q(e) &lt;- synthInstanceQ q(e)</code> and I have to repeat the <code>e</code>, because if I leave off the <code>: Q(e)</code> then the binding gets the doubled QQ type and it won't be picked up by later <code>q(_)</code> invocations</p>",
        "id": 340209321,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678221840
    },
    {
        "content": "<blockquote>\n<p>let inst : Q(e) &lt;- synthInstanceQ q(e)</p>\n</blockquote>\n<p>That pattern occurs only three times in mathlib, and in all three instances it's a workaround for the \"incompatible metavariable\" issue.  Do you have another example?</p>",
        "id": 340219081,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678225120
    },
    {
        "content": "<p>Yes, I noticed that as well upon searching. On the other hand, I notice that <code>synthInstanceQ</code> <em>always</em> needs a type ascription as in <code>synthInstanceQ (q(OrderedRing $α) : Q(Type u))</code>, do you know whether this is related?</p>",
        "id": 340219934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678225458
    },
    {
        "content": "<p>Yes that's the incompatible metavariable issue.  Quote4 expects all metavariables to have the same local context, but abstracting local variables can change the local context of an maar (at least that's what I think is happening here)</p>",
        "id": 340222783,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678226587
    }
]