[
    {
        "content": "<p>A pretty common workflow for me is:</p>\n<ul>\n<li><code>dsimp</code></li>\n<li>Copy the goal</li>\n<li><code>change $clipboard</code></li>\n</ul>\n<p>Copying from the goal view is rather frustrating though; the clipboard symbol that was present in the Lean3  info view appears to have disappeared. Is there an existing feature to copy a subexpresion from the info view that I'm just missing?</p>",
        "id": 383204877,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691573217
    },
    {
        "content": "<p>Often what happens is instead <code>dsimp</code> ends up in my clipboard</p>",
        "id": 383205073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691573263
    },
    {
        "content": "<p>Would a <code>Try this</code> tactic that suggests the pp goal be good enough?</p>",
        "id": 383213007,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691574877
    },
    {
        "content": "<p>Also, I do get the clipboard icon sometimes, specifically on the output of <code>logInfo</code>.</p>",
        "id": 383214960,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691575234
    },
    {
        "content": "<p>For instance, with this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"cg\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"change {← getMainTarget}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cg</span>  <span class=\"c1\">-- change True</span>\n</code></pre></div>\n<p>if I leave the cursor on <code>cg</code>, then I can copy from the infoview clipboard <code>change True</code> and paste it.</p>",
        "id": 383215891,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691575387
    },
    {
        "content": "<p>It would probably be easy to make <code>cg</code> take a term (with metavariables) as input, scan the target and print out a match of that, rather than the whole goal.</p>",
        "id": 383216400,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691575475
    },
    {
        "content": "<p>Here is an example possibly closer to what you said:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">cg</span>  <span class=\"c1\">-- change 0 = 1</span>\n</code></pre></div>",
        "id": 383217023,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691575585
    },
    {
        "content": "<p>Ah, I guess this is an obvious candidate for a <code>change? _</code></p>",
        "id": 383220869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576298
    },
    {
        "content": "<p>Ok, I can try to get the <code>Try this</code> working, but I won't have time for a little bit.  After that, I imagine that also a <code>change? at ...</code> will be next, right?</p>",
        "id": 383223399,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691576740
    },
    {
        "content": "<p>Btw, the <code>_</code> in <code>change? _</code> is superfluous, right?</p>",
        "id": 383223597,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691576767
    },
    {
        "content": "<p>No, because I want it to work for <code>change? foo _</code>and tell me the resulting <code>_</code>, even if <code>foo</code> was not in the goal</p>",
        "id": 383223725,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576783
    },
    {
        "content": "<p>let's say it's optional</p>",
        "id": 383223849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691576808
    },
    {
        "content": "<p>Should <code>change?</code> run dsimp, or is that better as <code>change!?</code></p>",
        "id": 383223982,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576834
    },
    {
        "content": "<p>Ah, ok.  I like the optional bit, but I had not understood the other one.  <code>_</code> was a place-holder for any term, not just a metavariable!</p>",
        "id": 383224020,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691576842
    },
    {
        "content": "<p>no, that should be spelled <code>dsimp; change?</code></p>",
        "id": 383224053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691576848
    },
    {
        "content": "<p>and then delete the <code>dsimp</code></p>",
        "id": 383224100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691576858
    },
    {
        "content": "<p>That has the annoying outcome that the <code>try this</code> doesn't delete the dsimp automatically</p>",
        "id": 383224127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576863
    },
    {
        "content": "<p>or <code>dchange?</code>?</p>",
        "id": 383224130,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691576863
    },
    {
        "content": "<p>Could <code>dsimp?</code> suggest two try-this actions?</p>",
        "id": 383224313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576888
    },
    {
        "content": "<p>there are lots of things you might want to run, seems better not to get too fancy</p>",
        "id": 383224333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691576892
    },
    {
        "content": "<p>One that's <code>dsimp only [...]</code>, and one that's <code>change ...</code>?</p>",
        "id": 383224362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691576899
    },
    {
        "content": "<p>I would probably suggest it as a code action but not a try this specifically</p>",
        "id": 383224648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691576930
    },
    {
        "content": "<p>Anyway, I see that there is <code>Lean.Expr.find?</code>, but it takes a <code>Expr -&gt; Bool</code> argument.  Is there an <code>Expr.findM?</code> for monadic search?</p>",
        "id": 383224863,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691576965
    },
    {
        "content": "<p>what are you looking for?</p>",
        "id": 383225074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691576992
    },
    {
        "content": "<p>(I would run this on <code>isDefEq (the given term) (the actual target)</code>.</p>",
        "id": 383225273,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691577007
    },
    {
        "content": "<p>why <code>find?</code> then?</p>",
        "id": 383225351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691577019
    },
    {
        "content": "<p>this should just be one <code>isDefEq</code> call</p>",
        "id": 383225487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691577039
    },
    {
        "content": "<p>To replace the <code>_</code> with what it finds on the target expression.  Maybe I minsunderstood the meaning of <code>change? foo _</code>.</p>",
        "id": 383225596,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691577050
    },
    {
        "content": "<p>Ah, but would that not then replace, possibly, the given <code>foo</code>?</p>",
        "id": 383225799,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691577077
    },
    {
        "content": "<ul>\n<li>elaborate <code>foo _</code> to get a term <code>t</code></li>\n<li>unify <code>t</code> with the goal</li>\n<li><code>instantiateMVars</code> in <code>t</code></li>\n<li>pretty print it</li>\n</ul>",
        "id": 383225894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691577093
    },
    {
        "content": "<p>Ok, does this guarantee that <code>foo</code> will show up in the pp output?</p>",
        "id": 383226146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691577124
    },
    {
        "content": "<p>it will, unless <code>foo</code> is a parser-only syntax</p>",
        "id": 383226275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691577145
    },
    {
        "content": "<p>Ok, then yes, I understand.</p>",
        "id": 383226385,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691577164
    },
    {
        "content": "<p>Oh, I was envisaging the dumber approach of \"run <code>change $arg</code>, replace it with <code>change $(currentGoal)</code>\"</p>",
        "id": 383228033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691577449
    },
    {
        "content": "<p>Here is a possible tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"change?\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span><span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ex</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">ex</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">defeq</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n      <span class=\"k\">if</span> <span class=\"bp\">!</span> <span class=\"n\">defeq</span><span class=\"bp\">?</span> <span class=\"k\">then</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"The given term is not DefEq to the goal\"</span>\n      <span class=\"n\">instantiateMVars</span> <span class=\"n\">ex</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"change {expr}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">dsimp</span>\n  <span class=\"n\">change</span><span class=\"bp\">?</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\">-- change 0 = 1</span>\n  <span class=\"n\">change</span><span class=\"bp\">?</span>        <span class=\"c1\">-- change 0 = 1</span>\n  <span class=\"n\">change</span><span class=\"bp\">?</span> <span class=\"n\">_</span>      <span class=\"c1\">-- change 0 = 1</span>\n  <span class=\"n\">change</span><span class=\"bp\">?</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>  <span class=\"c1\">-- The given term is not DefEq to the goal</span>\n</code></pre></div>",
        "id": 383228448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691577521
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6471\">#6471</a></p>",
        "id": 383272512,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691585887
    },
    {
        "content": "<p>I am trying to implement the <code>Try this</code> feature.  I got it <em>almost</em> working.  What I am missing is that I would like to replace the whole tactic with the suggestion and I am unable to give a name to the right syntax.  Here is what I have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"change?\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Std.Tactic.TryThis</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span><span class=\"bp\">?%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>   <span class=\"c1\">-- &lt;-- I'd like `tk` to encompass everything, from `change?` until the end of the tactic</span>\n  <span class=\"o\">[</span><span class=\"n\">stuff</span><span class=\"o\">]</span>\n  <span class=\"n\">addSuggestion</span> <span class=\"n\">tk</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">change</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I would be happy also with replacing only the input starting from the question mark forwards (and then not printing <code>change</code> in the output).</p>",
        "id": 383313603,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1691592585
    },
    {
        "content": "<blockquote>\n<p>Is there an existing feature to copy a subexpresion from the info view that I'm just missing?</p>\n</blockquote>\n<p>Would it help if the right-click context menu actually worked, i.e. you could right-click a subexpression that gets highlighted and copy it from there?</p>",
        "id": 383370921,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691602650
    },
    {
        "content": "<p>Quick demo: <a href=\"/user_uploads/3121/fU0UaHElDhqrT8Xy5ay2YDlG/out.mp4\">out.mp4</a></p>",
        "id": 383389200,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691606838
    },
    {
        "content": "<p>That would be a great improvement!</p>",
        "id": 383407161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1691611801
    },
    {
        "content": "<p>Yes, that's the feature that I think I actually wanted!</p>",
        "id": 383423483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691617677
    },
    {
        "content": "<p>Well, it's already in vscode-lean4 (new release) :)</p>",
        "id": 383425323,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691618588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> Another neat nice-to-have would be for go-to-def etc to be in the context menu as well (so one does not have to remember the keyboard shortcut).</p>",
        "id": 383436406,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691625494
    },
    {
        "content": "<p>That's annoying difficult to do afaict. At least in VSCode, the context menu is controlled by VSCode itself and you get very limited options for what actions it can take. We may have to reimplement all context menu functionality in JS to do that. (Don't want to discourage anyone from trying though, there may be a way!)</p>",
        "id": 383439583,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1691627118
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/Copying.20from.20the.20widget.20view/near/383425323\">said</a>:</p>\n<blockquote>\n<p>Well, it's already in vscode-lean4 (new release) <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> I have the latest version of <code>vscode-lean4</code> but this features still does not work for me (Win11). Is it normal?</p>",
        "id": 400596823,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699298660
    },
    {
        "content": "<p>I still find copying from the infoview unreliable, even if I use that context menu</p>",
        "id": 400600542,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699300263
    },
    {
        "content": "<p>I constantly end up with the current tactic in my clipboard instea</p>",
        "id": 400600566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699300278
    },
    {
        "content": "<p>Same here, but it really seems VSCode is broken, it has nothing to do with the infoview.</p>",
        "id": 400603002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699301296
    },
    {
        "content": "<p>I was able to implement a copy operation that works reliably using the vscode api. I am sure the clipboard api works. The place to look for might be  the selection api.</p>",
        "id": 400605642,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699302531
    },
    {
        "content": "<p>Hm, unfortunately I don't have a Windows machine to test on. It works for me on macOS.</p>",
        "id": 400605652,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699302536
    },
    {
        "content": "<p>On macOS, I very often fail to copy and paste sub-expressions from the info view successfully. I can select, but then either cmd-c does nothing, or right clicking to get the context menu results in the selection changing.</p>",
        "id": 400625930,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699311980
    },
    {
        "content": "<p>Same here...</p>",
        "id": 400625993,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1699312026
    },
    {
        "content": "<blockquote>\n<p>right clicking to get the context menu results in the selection changing</p>\n</blockquote>\n<p>Ah, that is intentional: the implementation is a very cheap one which, when you right-click a highlightable subterm, selects that subterm. So if you had something else selected, it will disappear.</p>",
        "id": 400627362,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1699312981
    },
    {
        "content": "<p>I have seen people moaning about this for years, so just let me comment that on ubuntu if I click in the infoview then cut and paste it has always worked absolutely fine for me.</p>",
        "id": 400629064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699314155
    },
    {
        "content": "<p>Kevin, the question is how do you select what you want to copy?</p>",
        "id": 400631662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699315692
    },
    {
        "content": "<p>click and drag?</p>",
        "id": 400632071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699315929
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/r1Y-YTRG4GIIeVx-5mXXV1aw/Peek-2023-11-07-00-13.gif\">Peek-2023-11-07-00-13.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/r1Y-YTRG4GIIeVx-5mXXV1aw/Peek-2023-11-07-00-13.gif\" title=\"Peek-2023-11-07-00-13.gif\"><img src=\"/user_uploads/3121/r1Y-YTRG4GIIeVx-5mXXV1aw/Peek-2023-11-07-00-13.gif\"></a></div><p>What is the thing which people can't do? Is it just that I never do it, or that I have the knack and nobody else does?</p>",
        "id": 400632274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699316065
    },
    {
        "content": "<p>Click and drag works, but is very painful compared to click and Ctrl-c</p>",
        "id": 400633754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699316937
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/znZz573yaPvRa1rZoYnJPDV8/bug.gif\">bug.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/znZz573yaPvRa1rZoYnJPDV8/bug.gif\" title=\"bug.gif\"><img src=\"/user_uploads/3121/znZz573yaPvRa1rZoYnJPDV8/bug.gif\"></a></div>",
        "id": 400634244,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699317164
    },
    {
        "content": "<p>and when I wrote this has nothing to do with Widgets I mean you can also get the bug with <br>\n<a href=\"/user_uploads/3121/k36TC5hGPzbXPBh-ntkpB-jZ/bug2.gif\">bug2.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/k36TC5hGPzbXPBh-ntkpB-jZ/bug2.gif\" title=\"bug2.gif\"><img src=\"/user_uploads/3121/k36TC5hGPzbXPBh-ntkpB-jZ/bug2.gif\"></a></div>",
        "id": 400634506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699317289
    },
    {
        "content": "<p>Or even better: <br>\n<a href=\"/user_uploads/3121/0n92jwGcP9Tso3eq-lseW7VX/bug3.gif\">bug3.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/0n92jwGcP9Tso3eq-lseW7VX/bug3.gif\" title=\"bug3.gif\"><img src=\"/user_uploads/3121/0n92jwGcP9Tso3eq-lseW7VX/bug3.gif\"></a></div>",
        "id": 400634638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699317353
    },
    {
        "content": "<p>So it looks like any webview will trigger the bug.</p>",
        "id": 400634718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699317382
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/microsoft/vscode/issues/141080\">https://github.com/microsoft/vscode/issues/141080</a>?</p>",
        "id": 400686273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699344811
    }
]