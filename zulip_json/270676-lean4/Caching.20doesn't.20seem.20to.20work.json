[
    {
        "content": "<p>I have trouble getting mathlib4 to build with the cached files on Windows. I have all instances of VSCode closed, and am trying to run </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">clean</span>\n<span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">lake</span> <span class=\"n\">build</span>\n</code></pre></div>\n<p>but it seems like it tries to build mathlib from scratch each time. I'm trying to build after porting a mathlib3 file using the script - I think it worked once when I tried to build \"pure\" mathlib4.</p>\n<p>Is there anything that I'm overlooking or that could help to diagnose the issue?</p>",
        "id": 357997053,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683930612
    },
    {
        "content": "<p>Are you sure it is checking the files and not just compiling the executable code (what is the output of the build command?)</p>",
        "id": 358002866,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683933119
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2369</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2369</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Data.Option.Init.Lemmas</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2369</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.HaveI</span>\n<span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2369</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Std.Tactic.Unreachable</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 358008908,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683935673
    },
    {
        "content": "<p>what does <code>lake exe cache get</code> do? (What you posted is indeed mathlib building, and we want to avoid that)</p>",
        "id": 358009023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683935750
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">4</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">2350</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It seems like it's exiting fine. If I do <code>lake clean</code> beforehand it runs through a bunch of steps before downloading.</p>",
        "id": 358009156,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683935828
    },
    {
        "content": "<p>Try <code>lake exe cache get!</code> maybe?</p>",
        "id": 358009605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683936073
    },
    {
        "content": "<p>Same issue. I might try to reinstall in WSL and see whether that works better.</p>",
        "id": 358054617,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683965106
    },
    {
        "content": "<p>Have you tried <code>lake update</code>?</p>",
        "id": 358062316,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1683967761
    },
    {
        "content": "<p>Just tried it. Now <code>lake clean</code> followed by <code>lake exe cache get</code> or <code>lake exe cache get!</code> give </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">2354</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>And build still starts at the beginning.</p>",
        "id": 358067507,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683969609
    },
    {
        "content": "<p>Also, for reference: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">kuhnn</span><span class=\"bp\">\\</span><span class=\"n\">lean4</span><span class=\"bp\">\\</span><span class=\"n\">mathlib4</span><span class=\"bp\">&gt;</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">06</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"mi\">445</span><span class=\"n\">fd417be4d</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">kuhnn</span><span class=\"bp\">\\</span><span class=\"n\">lean4</span><span class=\"bp\">\\</span><span class=\"n\">mathlib4</span><span class=\"bp\">&gt;</span> <span class=\"n\">lake</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lake</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">pre</span> <span class=\"o\">(</span><span class=\"n\">Lean</span> <span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">06</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 358067677,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683969668
    },
    {
        "content": "<p>Do you have vscode open at the same time? <code>lake cache get</code> writes the same files as vscode does, so having both open makes a mess</p>",
        "id": 358074165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683971880
    },
    {
        "content": "<p>No, and as far as I can tell no lean processes running (although I don't know how to properly check this in windows).</p>",
        "id": 358081915,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683974695
    },
    {
        "content": "<p>Relatedly, what is the preferred way to run <a href=\"http://start_port.sh\">start_port.sh</a> in windows? It didn't work in Powershell (i.e. <code>bash _</code> reported errors), so I ran it in the VSCode terminal. Maybe that has broken something?</p>",
        "id": 358082913,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683975098
    },
    {
        "content": "<p>WSL might work</p>",
        "id": 358083036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683975132
    },
    {
        "content": "<p>I think it needs at least <code>sed</code>, so I doubt a plain cmd.exe will work</p>",
        "id": 358083061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683975147
    },
    {
        "content": "<p>hm, actually it is quite a bit sophisticated, you will probably need an actual conforming bash implementation</p>",
        "id": 358083336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683975249
    },
    {
        "content": "<p>what errors do you get?</p>",
        "id": 358083424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683975286
    },
    {
        "content": "<p>Did you run lake update before running lake exe cache get?</p>",
        "id": 358090392,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1683977787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> yes, I did<br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  This is what I get.  </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PS</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">kuhnn</span><span class=\"bp\">\\</span><span class=\"n\">lean4</span><span class=\"bp\">\\</span><span class=\"n\">mathlib4</span><span class=\"bp\">&gt;</span> <span class=\"n\">bash</span> <span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">start_port.sh</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">CategoryTheory</span><span class=\"bp\">/</span><span class=\"n\">Sites</span><span class=\"bp\">/</span><span class=\"n\">Pushforward.lean</span>\n<span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">start_port.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">2</span><span class=\"o\">:</span> <span class=\"bp\">$'\\</span><span class=\"n\">r'</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">optionport.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"bp\">-</span>\n<span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"n\">usage</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">abefhkmnptuvxBCHP</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">o</span> <span class=\"n\">option</span><span class=\"bp\">-</span><span class=\"n\">name</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"c1\">--] [arg ...]</span>\n<span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">option</span> <span class=\"n\">namesh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"o\">:</span> <span class=\"n\">pipefail</span>\n<span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">start_port.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">5</span><span class=\"o\">:</span> <span class=\"bp\">$'\\</span><span class=\"n\">r'</span><span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"n\">not</span> <span class=\"n\">found</span>\n<span class=\"bp\">./</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">start_port.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"n\">syntax</span> <span class=\"n\">error</span> <span class=\"n\">near</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"bp\">`$'</span><span class=\"k\">in</span><span class=\"bp\">\\</span><span class=\"n\">r''</span>\n<span class=\"bp\">'/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">start_port.sh</span><span class=\"o\">:</span> <span class=\"n\">line</span> <span class=\"mi\">20</span><span class=\"o\">:</span> <span class=\"bp\">`</span><span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"n\">mathlib4_path</span> <span class=\"k\">in</span>\n</code></pre></div>",
        "id": 358105979,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1683983514
    },
    {
        "content": "<p>it looks like a lot of the problem is that the shell script has windows style newlines in it which are confusing bash</p>",
        "id": 358106398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683983678
    },
    {
        "content": "<p>try opening it and saving it with just <code>\\n</code> newlines</p>",
        "id": 358106447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683983698
    },
    {
        "content": "<p>Thanks! I've got the script to work (changing the newlines, also had to add setting github credentials to within the script). I set up a new copy of mathlib4 and re-did everything -- it's still trying to build mathlib from scratch after calling <code>lake exe cache get</code> (or <code>get!</code>).</p>",
        "id": 358251239,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684067680
    },
    {
        "content": "<p>I'm giving up on trying to make it work in windows directly now, and will try again with WSL.</p>",
        "id": 358251549,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684067812
    },
    {
        "content": "<p>Got it to work in WSL. Under Windows, I could narrow down the issue: <br>\n1) If I run lake update, it modifies <code>lake-manifest.json</code> (I think it changes the line endings). This leads to <code>lake exe cache get</code> not working (with or without ! ): </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">2404</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>\n<p>2) If I then revert <code>lake-manifest.json</code> to its original form, it seems like <code>lake exe cache get</code> goes through (it actually  says it's decompressing), but then mathlib starts building anew anyway.</p>",
        "id": 358549671,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684177499
    },
    {
        "content": "<p>Could you please confirm whether the line endings were the only change? This should have been fixed by <a href=\"https://github.com/leanprover-community/mathlib4/pull/3096\">!4#3096</a></p>",
        "id": 358551060,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684177930
    },
    {
        "content": "<p>In any case, do not run <code>lake update</code> in mathlib4 if you want to use the cache! I don't know where this suggestion is coming from, it's the opposite of what you want to do usually.</p>",
        "id": 358551232,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684177980
    },
    {
        "content": "<p>Thanks for the clarification! People have been asking whether I ran it at least twice in this thread, which I assumed means they suggest to do so..</p>",
        "id": 358552240,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684178288
    },
    {
        "content": "<p>This is what git diff shows (it changes not only the line endings):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">LF</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">replaced</span> <span class=\"kd\">by</span> <span class=\"n\">CRLF</span> <span class=\"k\">in</span> <span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json.</span>\n<span class=\"n\">The</span> <span class=\"n\">file</span> <span class=\"n\">will</span> <span class=\"k\">have</span> <span class=\"n\">its</span> <span class=\"n\">original</span> <span class=\"n\">line</span> <span class=\"n\">endings</span> <span class=\"k\">in</span> <span class=\"n\">your</span> <span class=\"n\">working</span> <span class=\"n\">directory</span>\n<span class=\"n\">diff</span> <span class=\"c1\">--git a/lake-manifest.json b/lake-manifest.json</span>\n<span class=\"n\">index</span> <span class=\"mi\">9</span><span class=\"n\">a29eda5..7e4395ee</span> <span class=\"mi\">100644</span>\n<span class=\"c1\">--- a/lake-manifest.json</span>\n<span class=\"bp\">+++</span> <span class=\"n\">b</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">manifest.json</span>\n<span class=\"bp\">@@</span> <span class=\"bp\">-</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">12</span> <span class=\"bp\">+</span><span class=\"mi\">10</span><span class=\"o\">,</span><span class=\"mi\">12</span> <span class=\"bp\">@@</span>\n   <span class=\"o\">{</span><span class=\"s2\">\"git\"</span><span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"s2\">\"url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"https://github.com/JLimperg/aesop\"</span><span class=\"o\">,</span>\n     <span class=\"s2\">\"subDir?\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n<span class=\"bp\">-</span>    <span class=\"s2\">\"rev\"</span><span class=\"o\">:</span> <span class=\"s2\">\"cdc00b640d0179910ebaa9c931e3b733a04b881c\"</span><span class=\"o\">,</span>\n<span class=\"bp\">+</span>    <span class=\"s2\">\"rev\"</span><span class=\"o\">:</span> <span class=\"s2\">\"5cf2eb0722e8d0cb58149c744f9888de1b9f0855\"</span><span class=\"o\">,</span>\n     <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"aesop\"</span><span class=\"o\">,</span>\n     <span class=\"s2\">\"inputRev?\"</span><span class=\"o\">:</span> <span class=\"s2\">\"master\"</span><span class=\"o\">}},</span>\n   <span class=\"o\">{</span><span class=\"s2\">\"git\"</span><span class=\"o\">:</span>\n    <span class=\"o\">{</span><span class=\"s2\">\"url\"</span><span class=\"o\">:</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span><span class=\"o\">,</span>\n     <span class=\"s2\">\"subDir?\"</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n<span class=\"bp\">-</span>    <span class=\"s2\">\"rev\"</span><span class=\"o\">:</span> <span class=\"s2\">\"6006307d2ceb8743fea7e00ba0036af8654d0347\"</span><span class=\"o\">,</span>\n<span class=\"bp\">+</span>    <span class=\"s2\">\"rev\"</span><span class=\"o\">:</span> <span class=\"s2\">\"fe45c329180f4d051f9f19d1a360d9e195532afb\"</span><span class=\"o\">,</span>\n     <span class=\"s2\">\"name\"</span><span class=\"o\">:</span> <span class=\"s2\">\"std\"</span><span class=\"o\">,</span>\n     <span class=\"s2\">\"inputRev?\"</span><span class=\"o\">:</span> <span class=\"s2\">\"main\"</span><span class=\"o\">}}]}</span>\n</code></pre></div>",
        "id": 358552649,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684178408
    },
    {
        "content": "<p>You'll want to revert those changes in any case</p>",
        "id": 358552743,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684178448
    },
    {
        "content": "<p>Yup! I re-reverted in order to check.</p>",
        "id": 358553927,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684178821
    },
    {
        "content": "<p>Starting with a fresh copy of mathlib and running <code>lake exe cache get</code> and <code>lake build</code> still starts a fresh build. (but cache get now has files to decompress again)</p>",
        "id": 358554718,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684179054
    },
    {
        "content": "<p><code>lake exe cache get</code> output:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">std4</span> <span class=\"n\">to</span> <span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">std</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">gebner</span><span class=\"bp\">/</span><span class=\"n\">quote4</span> <span class=\"n\">to</span> <span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">Qq</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">cloning</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">JLimperg</span><span class=\"bp\">/</span><span class=\"n\">aesop</span> <span class=\"n\">to</span> <span class=\"bp\">.\\</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">\\</span><span class=\"n\">aesop</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">2402</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">2402</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 358554853,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684179107
    },
    {
        "content": "<p>It's just building the <code>cache</code> binary, right?</p>",
        "id": 358555449,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684179274
    },
    {
        "content": "<p>How long does it all take? And what happens if you open <code>mathlib4</code> on some random <code>lean</code> file that contains theorems and stuff?</p>",
        "id": 358555571,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684179330
    },
    {
        "content": "<p>You mean <code>lake build</code>? It looks like its building everything.</p>",
        "id": 358555619,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684179350
    },
    {
        "content": "<p>If that's where it finished, try <code>lake build</code> - this should have barely if any output, which means it worked</p>",
        "id": 358555652,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684179361
    },
    {
        "content": "<p>:(</p>",
        "id": 358555764,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1684179389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"496319\">Nikolas Kuhn</span> <a href=\"#narrow/stream/270676-lean4/topic/Caching.20doesn't.20seem.20to.20work/near/358555619\">said</a>:</p>\n<blockquote>\n<p>You mean <code>lake build</code>? It looks like its building everything.</p>\n</blockquote>\n<p>But how long does it take? More than a minute?</p>",
        "id": 358555901,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684179440
    },
    {
        "content": "<p>To be clear, if the lines start <code>Building  ....</code>, that's rebuilding from scratch, right? I had it correctly build from the cached version in WSL before and that was quick and didn't have this.</p>",
        "id": 358555964,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684179462
    },
    {
        "content": "<p>Yes, more than a minute, more like a day.</p>",
        "id": 358556203,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684179529
    },
    {
        "content": "<p>Okay, if <code>lake build</code> is taking forever even after <code>cache</code> successfully downloaded and decompressed all the <code>olean</code> files you needed, then it's likely something wrong with Lake</p>",
        "id": 358556445,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684179609
    },
    {
        "content": "<p>Maybe some combination of Lake + your dev environment</p>",
        "id": 358556546,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684179645
    },
    {
        "content": "<p>Here's an idea: pick an <code>olean</code> file that's built from scratch with a raw clone of <code>mathlib4</code> without <code>lake exe cache get</code>... just go straight to <code>lake build</code>. You don't need to wait for it to finish. One <code>olean</code> file is enough. Once you have it, do a <code>md5</code> on it and save the hash on a text file.</p>\n<p>Then compare with the <code>md5</code> hash of the same file that's downloaded by <code>lake exe cache get</code>. Maybe it's different? They should be the same</p>",
        "id": 358558534,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1684180323
    },
    {
        "content": "<p>Works on my machine, this is in a fresh clone of mathlib4 <br>\n<a href=\"/user_uploads/3121/2J_1iRALthpd7QPLrdhbrWWh/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/2J_1iRALthpd7QPLrdhbrWWh/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/2J_1iRALthpd7QPLrdhbrWWh/image.png\"></a></div>",
        "id": 358561218,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684181189
    },
    {
        "content": "<p>It doesn't work here, and I have some potentially useful information: when I run lake build, the .olean and .ilean files don't change but the .trace files do</p>",
        "id": 358561617,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684181337
    },
    {
        "content": "<p>Is there a way to see what goes into the trace hash computation?</p>",
        "id": 358561678,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684181357
    },
    {
        "content": "<p>I don't think so, though I've wished for that before</p>",
        "id": 358561838,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684181409
    },
    {
        "content": "<p>Wait, I see a few \"mixTrace (&lt;- getMTime olean) ...\" calls in lake</p>",
        "id": 358562240,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684181558
    },
    {
        "content": "<p>Does it really require accurate modification timestamps?</p>",
        "id": 358562282,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684181580
    },
    {
        "content": "<p>Ah, that's \"old mode\"</p>",
        "id": 358562532,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684181646
    },
    {
        "content": "<p>Here are the associated to <code>Mathlib/Tactic/Set.lean</code>with a fresh build and <code>cache get</code>respectively:<br>\n7C39C1177B1D85A22CB0DF933FC5E51E<br>\n7C39C1177B1D85A22CB0DF933FC5E51E<br>\nShould be indeed the same. (I got these from <code>./build/Lib/Mathlib/Tactic/Set.olean</code>.)</p>",
        "id": 358563368,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684181919
    },
    {
        "content": "<p>Weirdly, lake build does seem to pick up from where it stopped when I cancel it. So caching seems to work for me in principle?</p>",
        "id": 358563696,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684182037
    },
    {
        "content": "<p>Nikolas, does it work if you run <code>git config --global core.autocrlf false</code> and reclone mathlib4? (also <span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span>)</p>",
        "id": 358563785,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684182072
    },
    {
        "content": "<p>I think Git for Windows might have some weird defaults</p>",
        "id": 358563837,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684182089
    },
    {
        "content": "<p>Thanks! That sounds like a useful thing to set either way. I'm giving it a try.</p>",
        "id": 358564478,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684182307
    },
    {
        "content": "<p>Yes, it turns out I must have selected autocrlf = false when installing Git for Windows</p>",
        "id": 358564735,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684182370
    },
    {
        "content": "<p>Yes, now it works! :D</p>",
        "id": 358564971,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684182453
    },
    {
        "content": "<p>This also fixes the issue with the porting script.</p>",
        "id": 358565902,
        "sender_full_name": "Nikolas Kuhn",
        "timestamp": 1684182759
    },
    {
        "content": "<p>Should lake traces normalize newlines (at least on .lean files)?</p>",
        "id": 358570819,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1684184649
    },
    {
        "content": "<p>Yes, we need the same thing as <a href=\"https://github.com/leanprover-community/mathlib4/pull/3096\">!4#3096</a> in Lake</p>",
        "id": 358570930,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684184696
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/pull/170\">https://github.com/leanprover/lake/pull/170</a></p>",
        "id": 360122619,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684703854
    }
]