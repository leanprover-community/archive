[
    {
        "content": "<p>In the example below, <code>library_search</code> finds some weird spurious proofs:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">library_search</span>\n</code></pre></div>\n<p>In the next example, which is the same except for the imports, <code>library_search</code> fails to find the obvious proof that follows its call:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Ring</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span>\n    <span class=\"n\">library_search</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_div_cancel</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 321642037,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1673876102
    },
    {
        "content": "<p>I'm using the <code>mathlib4</code> from this morning.</p>",
        "id": 321642094,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1673876119
    },
    {
        "content": "<p>Also reported in <a href=\"#narrow/stream/270676-lean4/topic/Proof.20automation/near/319928129\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Proof.20automation/near/319928129</a></p>",
        "id": 321644657,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1673876858
    }
]