[
    {
        "content": "<p>I'm trying to use Lean's tools (abusing the <code>ident</code> and <code>num</code> categoris) to parse a language which uses <code>&lt;</code> and <code>&gt;</code> as brackets, and everything works fine until <code>&gt;&gt;</code> or <code>&lt;-</code> appear next to each other without a separating whitespace. My guess is because Lean itself uses <code>&gt;&gt;</code> and <code>&lt;-</code>. How can I avoid this problem?</p>",
        "id": 365898023,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1686668201
    },
    {
        "content": "<p>you probably need to edit the token table to remove those tokens (or all tokens and install your own). Is this a DSL which is meant to coexist with lean code, or a full file parser where lean doesn't matter?</p>",
        "id": 365914022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686671115
    },
    {
        "content": "<p>The latter, thanks for the pointer to the token table, will edit that one</p>",
        "id": 366075379,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1686727476
    },
    {
        "content": "<p>Hum, there's no <code>Trie.remove</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 366093925,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1686731572
    },
    {
        "content": "<p>If this is the <code>Trie</code> from <code>DiscrTree</code>, std should have removal functions.</p>",
        "id": 366175772,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1686747713
    },
    {
        "content": "<p>It's not, its defined in <code>Lean.Data.Trie</code>. Maybe these should be merged? ^^</p>",
        "id": 366238751,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1686759494
    },
    {
        "content": "<p>Ah no, that's an entirely different data structure. (The <code>DiscrTree</code> one is a trie over expressions, not over strings.)</p>",
        "id": 366239787,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1686759730
    },
    {
        "content": "<p>As long as these tokens are not used to index the parsing tables (i.e. are not at the beginning of a parser registered in a category), you can also use <code>rawCh '&gt;' (trailingWs := true)</code>. This is a <code>Parser</code> though, not a <code>ParserDescr</code> like in <code>syntax</code>.</p>",
        "id": 366403422,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686817503
    },
    {
        "content": "<p>There's no easy way to mix <code>ParserDescr</code>s and custom <code>Parser</code>s, or is there? Say I want to use a custom Parser inside a <code>syntax</code> command or embed the generated <code>Parser</code> from a <code>ParserDescr</code> in a <code>Parser</code> definition?</p>",
        "id": 396066618,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1697023681
    },
    {
        "content": "<p>Ah nvm, the first one does seem to be possible</p>",
        "id": 396067445,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1697023978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/parsing.20.3C.20and.20.3E.20as.20brackets/near/396066618\">said</a>:</p>\n<blockquote>\n<p>or embed the generated <code>Parser</code> from a <code>ParserDescr</code> in a <code>Parser</code> definition?</p>\n</blockquote>\n<p><code>evalParserConst</code> (from <code>Lean.Parser</code>) can be used to do this.</p>",
        "id": 396219749,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697090353
    },
    {
        "content": "<p>And how do I turn a <code>ParserFn</code> into a <code>Parser</code> with some sort of obvious/trivial formatter? If I want to make a parser out of <code>whitespace</code>, for example, and do that by</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">whitespaceParser</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">whitespace</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>then I'll get a message</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">formatter</span> <span class=\"n\">for</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"kd\">definition</span> <span class=\"bp\">'</span><span class=\"o\">{</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">collectTokens</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">collectKinds</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">firstTokens</span> <span class=\"o\">:=</span> <span class=\"n\">FirstTokens.unknown</span> <span class=\"o\">},</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">whitespace</span> <span class=\"o\">}</span><span class=\"bp\">'</span>\n</code></pre></div>\n<p>whenever I try to use it anywhere else</p>",
        "id": 396228485,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1697094763
    },
    {
        "content": "<p>If the parser in question is produces an <code>Syntax.atom</code>, the following is a useful parser combinator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">raw</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">ParserFn</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">trailingWs</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">rawFn</span> <span class=\"n\">fn</span> <span class=\"n\">trailingWs</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">combinator_formatter</span> <span class=\"n\">raw</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">raw.formatter</span> <span class=\"o\">:=</span> <span class=\"n\">visitAtom</span> <span class=\"n\">Name.anonymous</span>\n<span class=\"kd\">@[</span><span class=\"n\">combinator_parenthesizer</span> <span class=\"n\">raw</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">raw.parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">visitToken</span>\n</code></pre></div>\n<p>For <code>whitespace</code> (which should generally be named <code>whitespaceFn</code> if it is a <code>ParserFn</code> not a <code>Parser</code>) this would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">whitespace</span> <span class=\"o\">:=</span> <span class=\"n\">raw</span> <span class=\"n\">whitespaceFn</span>\n</code></pre></div>\n<p>For non-<code>Syntax.atom</code> parsers, a proper parser with non-trivial formatters and parenthesizers is likely necessary.</p>",
        "id": 396342799,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697135092
    },
    {
        "content": "<p>The <code>raw</code> parser is also only good if used sparingly / not at the start of a syntax. If the parser in question is meant to be a general token, you want to provide with some metadata like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">whitespace</span>  <span class=\"o\">:</span> <span class=\"n\">Parser</span> <span class=\"n\">where</span>\n  <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">rawFn</span> <span class=\"n\">whitespaceFn</span>\n  <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">mkAtomicInfo</span> <span class=\"s2\">\"whitespace\"</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">combinator_formatter</span> <span class=\"n\">raw</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">raw.formatter</span> <span class=\"o\">:=</span> <span class=\"n\">visitAtom</span> <span class=\"n\">Name.anonymous</span>\n<span class=\"kd\">@[</span><span class=\"n\">combinator_parenthesizer</span> <span class=\"n\">raw</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">raw.parenthesizer</span> <span class=\"o\">:=</span> <span class=\"n\">visitToken</span>\n</code></pre></div>",
        "id": 396343064,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697135218
    },
    {
        "content": "<p>Also,  if you actually are trying to wrap <code>whitespace</code>, that may be a problem. Whitespace is best checked via either <code>checkWsBefore</code> or <code>checkNoWsBefore</code> (which are <code>ws</code> and <code>noWs</code> respectively in a <code>syntax</code> declaration).</p>",
        "id": 396343347,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697135351
    },
    {
        "content": "<p>Ah, thanks for all the pointers.</p>",
        "id": 396456323,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1697185974
    },
    {
        "content": "<p>The thing I'm trying to parse compasses <code>cmd1;cmd2</code>, <code>cmd1; /- comment -/ cmd2;' etc., no neither </code>ws<code> nor </code>noWs<code> does it for me, but the parsed stuff gets discarded anyway, so I guess </code>raw` is the right thing to use</p>",
        "id": 396457067,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1697186223
    }
]