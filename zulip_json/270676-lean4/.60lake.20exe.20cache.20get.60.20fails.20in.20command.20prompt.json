[
    {
        "content": "<p>After posting this, I realized that this stream is lean4, not mathlib4, sorry.</p>\n<p>Hello. When creating new project using mathlib, previously succeeded command <code>lake exe cache get</code> now yields error, but strangely there is no problem when using git bash. I'm using Windows 11.</p>\n<p>The command I entered in Windows command prompt is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">new</span> <span class=\"n\">myProject</span> <span class=\"n\">math</span>\n<span class=\"n\">cd</span> <span class=\"n\">myProject</span>\n<span class=\"n\">lake</span> <span class=\"n\">update</span>\n</code></pre></div>\n<p>and then <code>lake exe cache get</code> yields:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">daken</span><span class=\"bp\">\\</span><span class=\"n\">Documents</span><span class=\"bp\">\\</span><span class=\"n\">github</span><span class=\"bp\">\\</span><span class=\"n\">myProject</span><span class=\"bp\">&gt;</span><span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Downloading</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.11</span><span class=\"bp\">/</span><span class=\"n\">windows</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">Unpacking</span> <span class=\"n\">proofwidgets</span><span class=\"bp\">/</span><span class=\"n\">v0.0.11</span><span class=\"bp\">/</span><span class=\"n\">windows</span><span class=\"bp\">-</span><span class=\"mi\">64</span><span class=\"bp\">.</span><span class=\"n\">tar.gz</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">6</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">9</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache.exe</span>\n<span class=\"n\">leantar</span> <span class=\"n\">is</span> <span class=\"n\">too</span> <span class=\"n\">old</span><span class=\"bp\">;</span> <span class=\"n\">downloading</span> <span class=\"n\">more</span> <span class=\"n\">recent</span> <span class=\"n\">version</span>\n<span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But when I entered <code>lake exe cache get</code> in git bash,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">gnilati</span><span class=\"bp\">@</span><span class=\"n\">DESKTOP</span><span class=\"bp\">-</span><span class=\"n\">DTESKT7</span> <span class=\"n\">MINGW64</span> <span class=\"bp\">~/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">github</span><span class=\"bp\">/</span><span class=\"n\">myProject</span> <span class=\"o\">(</span><span class=\"n\">master</span><span class=\"o\">)</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3589</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">14269</span> <span class=\"n\">ms</span>\n</code></pre></div>\n<p>So succeeded. I have no problems using git bash, but I'm wondering why this fails for command prompt.</p>",
        "id": 377192081,
        "sender_full_name": "Haruhisa Enomoto",
        "timestamp": 1689922505
    },
    {
        "content": "<p>can you show what's in you <code>lakefile.lean</code>?</p>",
        "id": 377277568,
        "sender_full_name": "David Renshaw",
        "timestamp": 1689941667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is this <code>HOME</code> again? We shouldn't expect that to exist on Windows</p>",
        "id": 377278273,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689941813
    },
    {
        "content": "<p>I'm having the same issue for <code>mathilb</code> on Windows. Here is my <code>lakefile.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"s2\">\"-Dpp.unicode.fun=true\"</span><span class=\"o\">,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n  <span class=\"s2\">\"-DrelaxedAutoImplicit=false\"</span>\n<span class=\"o\">]</span>\n\n<span class=\"c1\">-- These settings only apply during `lake build`, but not in VSCode editor.</span>\n<span class=\"kd\">def</span> <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"n\">moreServerArgs</span>\n\n<span class=\"c1\">-- These are additional settings which do not affect the lake hash,</span>\n<span class=\"c1\">-- so they can be enabled in CI and disabled locally or vice versa.</span>\n<span class=\"c1\">-- Warning: Do not put any options here that actually change the olean files,</span>\n<span class=\"c1\">-- or inconsistent behavior may result</span>\n<span class=\"kd\">def</span> <span class=\"n\">weakLeanArgs</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">CI</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">isSome</span> <span class=\"k\">then</span>\n    <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DwarningAsError=true\"</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span>\n    <span class=\"bp\">#</span><span class=\"o\">[]</span>\n\n<span class=\"n\">package</span> <span class=\"n\">mathlib</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"n\">moreServerArgs</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">Mathlib</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"n\">moreLeanArgs</span>\n  <span class=\"n\">weakLeanArgs</span> <span class=\"o\">:=</span> <span class=\"n\">weakLeanArgs</span>\n\n<span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_exe</span> <span class=\"n\">runLinter</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">scripts.runLinter</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">meta</span> <span class=\"k\">if</span> <span class=\"n\">get_config</span><span class=\"bp\">?</span> <span class=\"n\">doc</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"s2\">\"on\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- do not download and build doc-gen4 by default</span>\n<span class=\"n\">require</span> <span class=\"bp\">«</span><span class=\"n\">doc</span><span class=\"bp\">-</span><span class=\"n\">gen4</span><span class=\"bp\">»</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/doc-gen4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n\n<span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Qq</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/gebner/quote4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n<span class=\"n\">require</span> <span class=\"n\">aesop</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/JLimperg/aesop\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"master\"</span>\n<span class=\"n\">require</span> <span class=\"n\">Cli</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/mhuisi/lean4-cli.git\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"nightly\"</span>\n<span class=\"n\">require</span> <span class=\"n\">proofwidgets</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/EdAyers/ProofWidgets4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"v0.0.11\"</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">Cache</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"n\">moreLeanArgs</span>\n  <span class=\"n\">weakLeanArgs</span> <span class=\"o\">:=</span> <span class=\"n\">weakLeanArgs</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Cache</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_exe</span> <span class=\"n\">cache</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Cache.Main</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">MathlibExtras</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">MathlibExtras</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">Archive</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Archive</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">Counterexamples</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">Counterexamples</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"n\">ImportGraph</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">ImportGraph</span><span class=\"o\">]</span>\n\n<span class=\"n\">lean_exe</span> <span class=\"n\">graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">ImportGraph.Main</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n\n<span class=\"sd\">/-- Additional documentation in the form of modules that only contain module docstrings. -/</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">docs</span> <span class=\"n\">where</span>\n  <span class=\"n\">roots</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">docs</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 377352145,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1689955556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lake.20exe.20cache.20get.60.20fails.20in.20command.20prompt/near/377278273\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> Is this <code>HOME</code> again? We shouldn't expect that to exist on Windows</p>\n</blockquote>\n<p>Can you explain why? There is supposed to be an env var by that name, you can see it with the <code>set</code> command</p>",
        "id": 377382509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689961822
    },
    {
        "content": "<p>Is someone who runs lean on windows willing to help debug this issue? The current symptoms seem to be:</p>\n<ul>\n<li>Assuming you don't already have <code>leantar-0.1.4.exe</code> in your cache directory (which will either be at <code>.cache</code> in the current directory or <code>$HOME$/.cache/mathlib</code>, you can safely delete it to revert to \"first run\" status), you get the <code>leantar is too old</code> message and then <code>uncaught exception: no such file or directory (error code: 2)</code></li>\n<li>This occurs due to the line <code>mv CACHE_DIR/leantar.exe CACHE_DIR/leantar-0.1.4.exe</code> in the script, so after running it and it fails you will most likely have <code>leantar.exe</code> in your cache directory</li>\n<li>The source of the \"file not found\" error is not clear to me, but possibly it is complaining about <code>mv</code> itself being missing. It would be good to have a cross platform way to do this</li>\n</ul>",
        "id": 377412376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689968832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lake.20exe.20cache.20get.60.20fails.20in.20command.20prompt/near/377382509\">said</a>:</p>\n<blockquote>\n<p>Can you explain why? There is supposed to be an env var by that name, you can see it with the <code>set</code> command</p>\n</blockquote>\n<p>By default, Windows <code>cmd</code> does not set/use the <code>HOME</code> environment variable. Instead, there is <code>HOMEDRIVE</code>, <code>HOMEPATH</code>, and <code>USERPROFILE</code>. See <a href=\"https://superuser.com/questions/1319038/how-to-set-home-variable-so-that-cmd-find-the-path\">this</a> Stack Overflow post for various workarounds.</p>",
        "id": 377455000,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689985419
    },
    {
        "content": "<p>As <a href=\"https://ss64.com/nt/syntax-variables.html\">this</a> resource mentions, <code>USERPROFILE</code> is the equivalent to <code>HOME</code> on Windows.</p>",
        "id": 377455412,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689985495
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <br>\nI think one work around is to always use git bash which does define the HOME variable</p>",
        "id": 377463194,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988359
    },
    {
        "content": "<p>I think the <code>HOME</code> variable issue is independent of the <code>mv</code> issue though</p>",
        "id": 377463570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689988555
    },
    {
        "content": "<p>Yeah about that one:<br>\nboth git bash and powershell define <code>mv</code>, but cmd does not</p>",
        "id": 377463687,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988602
    },
    {
        "content": "<p>I am guessing however Cache accesses system commands leads it to execute as if it is in cmd</p>",
        "id": 377463774,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988650
    },
    {
        "content": "<p>where there is no mv command</p>",
        "id": 377463781,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988656
    },
    {
        "content": "<p>Does Lean have OS-independent <code>mv</code>/<code>cp</code>/...?</p>",
        "id": 377463811,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1689988680
    },
    {
        "content": "<p>If you are up for it we can debug it with a small program <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 377463881,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lake.20exe.20cache.20get.60.20fails.20in.20command.20prompt/near/377463811\">said</a>:</p>\n<blockquote>\n<p>Does Lean have OS-independent <code>mv</code>/<code>cp</code>/...?</p>\n</blockquote>\n<p>Probably not, since the generically named <code>runCmd</code> is the one doing all the work</p>",
        "id": 377463913,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988732
    },
    {
        "content": "<p>I am guessing it passes the strings to some other function that should call the system interpreter</p>",
        "id": 377463994,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988782
    },
    {
        "content": "<p>well it would be better if we could just call <code>moveFile from to</code> instead of <code>runCmd \"mv\" #[from, to]</code></p>",
        "id": 377464001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689988786
    },
    {
        "content": "<p>i.e. cmd on windows</p>",
        "id": 377464007,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689988790
    },
    {
        "content": "<p>where <code>moveFile</code> is some IO function which is suitably cross platform</p>",
        "id": 377464093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689988819
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Runs a terminal command and retrieves its output -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">runCmd</span> <span class=\"o\">(</span><span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">throwFailure</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.output</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"n\">out.exitCode</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">throwFailure</span> <span class=\"k\">then</span> <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">out.stderr</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">out.stdout</span>\n</code></pre></div>\n<p>Can we change this to call powershell?</p>",
        "id": 377464726,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689989155
    },
    {
        "content": "<p>It's not even supposed to be calling any shell</p>",
        "id": 377464816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689989181
    },
    {
        "content": "<p>Does it act like the C function <a href=\"https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem?view=msvc-170\"><code>system</code></a> ? If yes then it is probbaly invoking cmd somehow</p>",
        "id": 377465028,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689989297
    },
    {
        "content": "<p>or equivalent</p>",
        "id": 377465047,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689989304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lake.20exe.20cache.20get.60.20fails.20in.20command.20prompt/near/377412376\">said</a>:</p>\n<blockquote>\n<p>Is someone who runs lean on windows willing to help debug this issue? The current symptoms seem to be:</p>\n<ul>\n<li>Assuming you don't already have <code>leantar-0.1.4.exe</code> in your cache directory (which will either be at <code>.cache</code> in the current directory or <code>$HOME$/.cache/mathlib</code>, you can safely delete it to revert to \"first run\" status), you get the <code>leantar is too old</code> message and then <code>uncaught exception: no such file or directory (error code: 2)</code></li>\n<li>This occurs due to the line <code>mv CACHE_DIR/leantar.exe CACHE_DIR/leantar-0.1.4.exe</code> in the script, so after running it and it fails you will most likely have <code>leantar.exe</code> in your cache directory</li>\n<li>The source of the \"file not found\" error is not clear to me, but possibly it is complaining about <code>mv</code> itself being missing. It would be good to have a cross platform way to do this</li>\n</ul>\n</blockquote>\n<p>If you need me to run something, I can give it a try</p>",
        "id": 377467347,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689990563
    },
    {
        "content": "<p>My observations so far:</p>\n<ul>\n<li>From Git Bash shell (which acts like a linux shell) <code>lake exe cache get</code> works fine and uses the HOME/.cache directory</li>\n<li>From powershell it does not work.</li>\n</ul>",
        "id": 377467685,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689990774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lake.20exe.20cache.20get.60.20fails.20in.20command.20prompt/near/377464726\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Runs a terminal command and retrieves its output -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">runCmd</span> <span class=\"o\">(</span><span class=\"n\">cmd</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">throwFailure</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.output</span> <span class=\"o\">{</span> <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">cmd</span><span class=\"o\">,</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">args</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"n\">out.exitCode</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">throwFailure</span> <span class=\"k\">then</span> <span class=\"n\">throw</span> <span class=\"bp\">$</span> <span class=\"n\">IO.userError</span> <span class=\"n\">out.stderr</span>\n  <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"n\">out.stdout</span>\n</code></pre></div>\n<p>Can we change this to call powershell?</p>\n</blockquote>\n<p>Sorry I meant git bash here</p>",
        "id": 377467700,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1689990784
    },
    {
        "content": "<p>No need to run in a shell, that just makes things more complicated! The function <code>rename</code> is in C's <code>stdio.h</code> and therefore could be wrapped and included in <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/System/IO.lean\">Init.System.IO</a>. I don't know why it's not.</p>",
        "id": 377468186,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689991084
    },
    {
        "content": "<p>PS: I know there are platforms where <code>stdio.h</code> is nonexistent or otherwise deficient. I can conceive of running a Lean program on such a platform but I'd be gobsmacked if anyone wanted to run <em>lake</em> on any such platform! So Lean could just fake it if the platform doesn't have a reasonable file system and nobody would get hurt.</p>",
        "id": 377472093,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1689993557
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2345\">lean4#2345</a></p>",
        "id": 377472386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689993741
    },
    {
        "content": "<p>Is there a straightforward way to test this on my local machine just to give you feedback on whether it works or not?</p>",
        "id": 377676237,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690057193
    },
    {
        "content": "<p>not super straightforward; if you check out <a href=\"https://github.com/leanprover/lean4/pull/2345\">lean4#2345</a> and build lean yourself (with <code>elan toolchain link lean4 /your/dev/lean/stage1</code>) then you can use <code>lake +lean4 exe cache get</code> if you change the line which calls <code>mv</code> to one that uses <code>IO.FS.rename</code>. This will get easier if it is merged since then you can use the nightly instead</p>",
        "id": 377677145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690057695
    },
    {
        "content": "<p>Does the following look like a reasonable explanation?</p>\n<ol>\n<li>\n<p>The failure above was due to the 'mv' command. When running from Git bash or similar shells this is actually an executable file located somewhere like <code>/usr/bin/mv</code>.</p>\n</li>\n<li>\n<p>However when running from Powershell or Windows cmd shell <code>mv</code> are actually shell built-ins and not executables. <code>runCmd</code> callls <code>IO.Process.spawn</code> which executes <a href=\"https://github.com/leanprover/lean4/blob/dd313c6894a5f4b984e9e669e22d163ac372a457/src/runtime/process.cpp#L411\"><code>lean_io_process_spawn</code></a>, which uses the POSIX C function <a href=\"https://github.com/leanprover/lean4/blob/dd313c6894a5f4b984e9e669e22d163ac372a457/src/runtime/process.cpp#L421\"><code>spawn</code></a>. But <a href=\"https://learn.microsoft.com/en-us/cpp/c-runtime-library/spawn-wspawn-functions?view=msvc-170\"><code>spawn</code></a> unfortunately cannot call system built-ins it can only run executables, hence it fails with the message 'no such file or directory...'</p>\n</li>\n</ol>",
        "id": 377683486,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690061579
    },
    {
        "content": "<p>I just encountered this problem today on Windows when trying to create a new project. I was only able to fix it by using Git Bash to run <code>lake exe cache get</code>. I might have some tooling slightly out of date but I don't know how to check that.</p>",
        "id": 380571787,
        "sender_full_name": "Niels Voss",
        "timestamp": 1690871555
    },
    {
        "content": "<p>Mario's pr above fixes the underlying cause in lean4<br>\nI don't know if mathlib has bumped to the right version yet</p>",
        "id": 380603855,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690878986
    },
    {
        "content": "<p>Once that happens another pr is needed against mathlib Cache program to fix the problem</p>",
        "id": 380604358,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690879099
    },
    {
        "content": "<p>Yup it shows up now on docs<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=IO.FS.rename#doc\">docs#IO.FS.rename</a></p>",
        "id": 380611297,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690880341
    },
    {
        "content": "<p>PR <a href=\"https://github.com/leanprover-community/mathlib4/pull/6284\">#6284</a> should fix the <code>leantar is too old; downloading more recent version uncaught exception: no such file or directory (error code: 2)</code> problem</p>",
        "id": 380637770,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690885214
    }
]