[
    {
        "content": "<p><strong>Quiz</strong>: read the following excerpt from <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/axioms_and_computation.html#quotients\">Section Quotients</a> of <a href=\"https://leanprover.github.io/theorem_proving_in_lean4/\">#tpil4</a> and prove the theorems below.</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">Quot.sound</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n  <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This is the axiom that asserts that any two elements of <code>α</code> that are related by <code>r</code> become identified in the quotient. If a theorem or definition makes use of <code>Quot.sound</code>, it will show up in the <code>#print axioms</code> command.</p>\n<p>Of course, the quotient construction is most commonly used in situations when <code>r</code> is an equivalence relation. Given <code>r</code> as above, if we define <code>r'</code> according to the rule <code>r' a b</code> iff <code>Quot.mk r a = Quot.mk r b</code>, then it's clear that <code>r'</code> is an equivalence relation. Indeed, <code>r'</code> is the <em>kernel</em> of the function <code>a ↦ Quot.mk r a</code>.  The axiom <code>Quot.sound</code> says that <code>r a b</code> implies <code>r' a b</code>. Using <code>Quot.lift</code> and <code>Quot.ind</code>, we can show that <code>r'</code> is the smallest equivalence relation containing <code>r</code>, in the sense that if <code>r''</code> is any equivalence relation containing <code>r</code>, then <code>r' a b</code> implies <code>r'' a b</code>. In particular, if <code>r</code> was an equivalence relation to start with, then for all <code>a</code> and <code>b</code> we have <code>r a b</code> iff <code>r' a b</code>.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Quot</span>\n\n<span class=\"c1\">-- `Ker r` is the *kernel* of the function `a ↦ Quot.mk r a`</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ker</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- `Ker r` is an equivalence relation</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Ker_is_equivalence</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"n\">Ker</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">refl</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">symm</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- `Ker r` is the smallest equivalence relation containing `r`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Ker_is_smallest</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eqv_r'</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sub_r_r'</span> <span class=\"o\">:</span> <span class=\"n\">Subrelation</span> <span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subrelation</span> <span class=\"o\">(</span><span class=\"n\">Ker</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- if `r` is an equivalence relation, then `r = Ker r`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv_eq_Ker</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eqv_r</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Ker</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Quot</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Solutions</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Logic.Basic</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Quot</span>\n\n<span class=\"c1\">-- `Ker r` is the *kernel* of the function `a ↦ Quot.mk r a`</span>\n<span class=\"kd\">def</span> <span class=\"n\">Ker</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- `Ker r` is an equivalence relation</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Ker_is_equivalence</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"n\">Ker</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">refl</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">rfl</span>\n  <span class=\"n\">symm</span>  <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">krab</span> <span class=\"o\">:</span> <span class=\"n\">Ker</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">krab.symm</span>\n  <span class=\"n\">trans</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">krab</span> <span class=\"o\">:</span> <span class=\"n\">Ker</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">krbc</span> <span class=\"o\">:</span> <span class=\"n\">Ker</span> <span class=\"n\">r</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">↦</span> <span class=\"n\">krab.trans</span> <span class=\"n\">krbc</span>\n\n<span class=\"c1\">-- `Ker r` is the smallest equivalence relation containing `r`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Ker_is_smallest</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eqv_r'</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r'</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">sub_r_r'</span> <span class=\"o\">:</span> <span class=\"n\">Subrelation</span> <span class=\"n\">r</span> <span class=\"n\">r'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Subrelation</span> <span class=\"o\">(</span><span class=\"n\">Ker</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">r'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">krab</span>\n  <span class=\"k\">have</span> <span class=\"n\">respect_r</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ra₁a₂</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">a₁</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">r'</span> <span class=\"n\">a₂</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n    <span class=\"n\">propext</span> <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">r'a₁b</span> <span class=\"bp\">↦</span> <span class=\"n\">eqv_r'.trans</span> <span class=\"o\">(</span><span class=\"n\">eqv_r'.symm</span> <span class=\"o\">(</span><span class=\"n\">sub_r_r'</span> <span class=\"n\">ra₁a₂</span><span class=\"o\">))</span> <span class=\"n\">r'a₁b</span><span class=\"o\">,</span>\n      <span class=\"k\">fun</span> <span class=\"n\">r'a₂b</span> <span class=\"bp\">↦</span> <span class=\"n\">eqv_r'.trans</span> <span class=\"o\">(</span><span class=\"n\">sub_r_r'</span> <span class=\"n\">ra₁a₂</span><span class=\"o\">)</span> <span class=\"n\">r'a₂b</span><span class=\"o\">⟩</span>\n  <span class=\"k\">show</span> <span class=\"n\">Quot.lift</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">r'</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">respect_r</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">krab</span><span class=\"o\">]</span>\n  <span class=\"k\">show</span> <span class=\"n\">r'</span> <span class=\"n\">b</span> <span class=\"n\">b</span>\n  <span class=\"n\">exact</span> <span class=\"n\">eqv_r'.refl</span> <span class=\"n\">b</span>\n\n<span class=\"c1\">-- if `r` is an equivalence relation, then `r = Ker r`</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">eqv_eq_Ker</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">eqv_r</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">Ker</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub_eqv_Ker</span> <span class=\"o\">:</span> <span class=\"n\">Subrelation</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Ker</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sound</span>\n  <span class=\"k\">have</span> <span class=\"n\">sub_Ker_eqv</span> <span class=\"o\">:</span> <span class=\"n\">Subrelation</span> <span class=\"o\">(</span><span class=\"n\">Ker</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">Ker_is_smallest</span> <span class=\"n\">eqv_r</span> <span class=\"n\">id</span>\n  <span class=\"n\">funext₂</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">↦</span> <span class=\"n\">propext</span> <span class=\"o\">⟨</span><span class=\"n\">sub_eqv_Ker</span><span class=\"o\">,</span> <span class=\"n\">sub_Ker_eqv</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Quot</span>\n</code></pre></div>\n</div></div>",
        "id": 327912308,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1676428727
    },
    {
        "content": "<p>The theorem <code>Ker_is_smallest</code> was much harder to prove than I thought.</p>",
        "id": 327912317,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1676428737
    }
]