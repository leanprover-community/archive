[
    {
        "content": "<p>Let's say I'm writing a monadic function, and want it to be generic across monads. If the monad happens to have all the instances required for tracing (and appropriate <code>ToMessageData</code>s for a couple of the types involved in the function declaration, let's say), we'd like to use e.g. <code>withTraceNode</code>. If not, ignore these tracing functions. Is there a best-practices way to achieve this? E.g. to optionally synthesize a bunch of instances, and perform different behavior in the function (tracing or not tracing) depending on what you got?</p>\n<p>I can think of a couple really hacky ways, but they seem, well, really hacky.</p>\n<p>This isn't blocking anything per se, it just would be nice. Or would it? Is there a reason to want to <em>not</em> have this?</p>\n<p>I'll also note that I think I need to include...7 instances to use <code>withTraceNode</code> with a general monad <code>m</code>, if I've counted right, which is a lot. A general solution to the above would hopefully also help declutter that.</p>",
        "id": 356185137,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1683332270
    },
    {
        "content": "<p>Can you not define a class <code>has_trace</code> which contains either a trace function or <code>none</code>, and instantiate both the monads you care about with a meaningful <code>has_trace</code> and all monads with a low priority dummy <code>has_trace</code>?</p>",
        "id": 356224694,
        "sender_full_name": "YaÃ«l Dillies",
        "timestamp": 1683356699
    },
    {
        "content": "<p>It might be interesting to have type class combinators like <code>OptionTC A</code> or <code>OrTC A B</code>. The first one fetches instance of <code>A</code> if available and the second one fetches <code>A</code> or <code>B</code>.</p>\n<p>However, I think this is currently not implementable as you can not have a typeclass instance polymorphic in a parameter that is a class.</p>\n<p>There should be no problem for concrete <code>A</code> and <code>B</code> though.</p>",
        "id": 356331662,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683387881
    },
    {
        "content": "<blockquote>\n<p>Let's say I'm writing a monadic function, and want it to be generic across monads.</p>\n</blockquote>\n<p>Being generic across monads is only a requirement for combinators (like <code>withTraceNode</code> or <code>withLCtx</code>, etc.).  Your average function is typically happier to live in a reasonably concrete monad like <code>CoreM</code> or <code>MetaM</code> (which then automatically lifts to many other monads).</p>",
        "id": 356357768,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683399428
    },
    {
        "content": "<p>As for <code>ToMessageData</code>.  I think it's a worthwhile investment to add <code>ToMessageData</code> instances to all types you encounter.  (And in the worst case, you can still use a local dummy instance.)</p>",
        "id": 356357879,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1683399502
    }
]