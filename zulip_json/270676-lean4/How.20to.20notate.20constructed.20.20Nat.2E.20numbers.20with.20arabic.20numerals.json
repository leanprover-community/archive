[
    {
        "content": "<p>Hi!  I'm trying to go through Terry Tao's <em>Analysis I</em> book and implement the chapter introducing natural numbers in lean 4 (while also following the <em>Theorem Proving in Lean 4</em> online book), and what I'm wanting to do is notate my instance of the natural numbers with the arabic numerals, just like the natural number library in mathlib4 (lean file provided below, apologies for it being a bit messy in places!).</p>\n<p>e.g. my <code>zero</code> =&gt; 0, (0)++ =&gt; 1, ((0)++)++ =&gt; 2, ... (Tao denotes the sucessor function with '++')</p>\n<p>This is only my guess, but would it involve some inductive 'magic' where I find out how '0123456789' etc are represented (in unicode, ascii?) and line that up with my repeated application of my successor function?</p>\n<p><a href=\"/user_uploads/3121/hv4zMBWeicXDd_A7g-puDely/TaoNat.lean\">TaoNat.lean</a></p>",
        "id": 326960234,
        "sender_full_name": "Jeremy D",
        "timestamp": 1675998801
    },
    {
        "content": "<p>The typeclass you are looking for is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=OfNat#doc\">docs4#OfNat</a>. You will need to map Lean's <code>Nat</code> to your encoding.</p>",
        "id": 326981770,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676014740
    },
    {
        "content": "<p>Thanks for the response! (and apologies for taking a while to post back)  </p>\n<p>So after digging some more through the aforementioned online book, I also saw that Alex Codes' video here seemed to be following your same advice (<a href=\"https://youtu.be/u_0jWOlDoPw\">https://youtu.be/u_0jWOlDoPw</a>), so I went ahead and followed through with it.  It seems everything seems almost good, except the numeral literals themselves seem to remain the same type as the built-in Nat rather than the one I defined <em>unless</em> a function has been applied to them (e.g. #check 0 will give 0 : Nat, but using my successor function (e.g. 0++) will say its type is my custom natural number â„•).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"u_0jWOlDoPw\" href=\"https://youtu.be/u_0jWOlDoPw\"><img src=\"https://uploads.zulipusercontent.net/1e83108f72445361f6520c5d5ad6c3781a296485/68747470733a2f2f692e7974696d672e636f6d2f76692f755f306a574f6c446f50772f64656661756c742e6a7067\"></a></div><p><del>On another note, my initial worries was that using Lean's built-in natural numbers would somehow also bring with it already proven results and theorems that I'd instead like to implement and prove myself.  Would I be correct in saying that in fact, that's not the case, and using Lean's <code>Nat</code> simply means using this particular code here?  <a href=\"https://github.com/leanprover/lean4/blob/75252d2b85df8cb9231020a556a70f6d736e7ee5/src/Init/Prelude.lean#L1015-L1021\">https://github.com/leanprover/lean4/blob/75252d2b85df8cb9231020a556a70f6d736e7ee5/src/Init/Prelude.lean#L1015-L1021</a> </del></p>\n<p>Also apologies in advance if some of the ways I phrase my question may be slightly off or unclear.  Still new to Lean, and happy to clarify or rephrase anything!  <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>EDIT: Realize after this time that my understanding of this wasn't entirely accurate, and for the reader, I returned back to this question very recently again but as a second discussion in the comment thread of Alex Codes' vid I linked!</p>\n<p>(Here's my updated version of that lean file I attached in my first post): <a href=\"/user_uploads/3121/sYWO-mz4k4BURtTYhRJzCwCG/TaoNat.lean\">TaoNat.lean</a></p>",
        "id": 327510915,
        "sender_full_name": "Jeremy D",
        "timestamp": 1676283540
    }
]