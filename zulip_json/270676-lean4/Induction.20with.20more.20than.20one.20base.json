[
    {
        "content": "<p>I've been trying to make an induction with two definitions that have two bases, so I would like to know if I can work with that on lean4. To give a more detailed version of events, I want to prove <code>odd n = !even n</code>, and I decided to make it so they are separate and this is a theorem, their definitions are as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">even</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">even</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">odd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>I know there must be better ways to do this, but that is not my point (I also don't want to define one as the opposite of the other, I really want that as a theorem). So, as I've started to write a proof I got here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">odd_eq_not_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">odd</span><span class=\"o\">,</span> <span class=\"n\">even</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_true</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[]</span>\n  <span class=\"c1\">--| n+2 =&gt;</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">case succ</span>\n<span class=\"cm\">  l: ListNat</span>\n<span class=\"cm\">  zero: Nat</span>\n<span class=\"cm\">  h: odd zero = !even zero</span>\n<span class=\"cm\">  ⊢ odd (succ zero) = !even (succ zero)-/</span>\n</code></pre></div>\n<p>I wanted to continue, but there's nothing else I can do, and that is (in my point of view) because there is another case I need to do for the induction to work. I don't know how to \"hack\" the induction tactic, but I read on the documentation that there is a way, I just couldn't translate it well to what I wanted. And roughly it's this: <code>{p : Nat → Bool} (k n : Nat) (p zero ∧ p (succ zero) ∧ (∀k, p k ∧ p (succ k) → p (succ (succ k))) → ∀n, p n)</code>.... I think. Is there a better way to do it? Or am I way over my head or going through the wrong path?</p>",
        "id": 396192884,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697075655
    },
    {
        "content": "<p>(Sorry if my english is bad, it's not my first language, if I babbled too much you can just ask me to rephrase something and I'll try to make my thoughts clearer).</p>",
        "id": 396193149,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697075843
    },
    {
        "content": "<p>You can do this with strong induction :) the <code>induction</code> tactic can take alternative induction schemes than the normal one. The syntax in this case is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>Then you can case on <code>n</code>, handle the first two cases directly, and then use the <code>ih</code> for the recursive case.</p>",
        "id": 396202988,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1697080126
    },
    {
        "content": "<p>you can also write the theorem as a definition by pattern matching in the same manner as the original definitions</p>",
        "id": 396204054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697080556
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">odd_eq_not_even</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">odd_eq_not_even</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 396204230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697080627
    },
    {
        "content": "<p>Am I doing this right? This seems odd.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">odd_eq_not_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">not</span> <span class=\"o\">(</span><span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"n\">using</span> <span class=\"n\">Nat.strongInductionOn</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ind</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">n</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">odd</span><span class=\"o\">,</span> <span class=\"n\">even</span><span class=\"o\">,</span> <span class=\"n\">Bool.not_true</span><span class=\"o\">]</span>\n\n  <span class=\"c\">/-</span><span class=\"cm\">case ind.succ</span>\n<span class=\"cm\">  l: ListNat</span>\n<span class=\"cm\">  n✝: Nat</span>\n<span class=\"cm\">  ih: ∀ (m : Nat), m &lt; succ n✝ → odd m = !even m</span>\n<span class=\"cm\">  ⊢ odd (succ n✝) = !even (succ n✝)-/</span>\n</code></pre></div>",
        "id": 396390058,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697157998
    },
    {
        "content": "<p>i think you need to do <code>cases</code> twice</p>",
        "id": 396396124,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697160675
    },
    {
        "content": "<p>because the induction is on <code>succ succ n</code>, not just <code>succ n</code></p>",
        "id": 396396191,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697160709
    },
    {
        "content": "<p>See also: <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Nat.twoStepInduction#doc\">docs#Nat.twoStepInduction</a></p>",
        "id": 396396646,
        "sender_full_name": "Chris Wong",
        "timestamp": 1697160956
    },
    {
        "content": "<p>You can also use <code>match</code> in tactic mode, so you can have a match with the three cases.</p>",
        "id": 396422508,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1697172035
    },
    {
        "content": "<p>It worked with <code>match</code>. :)</p>",
        "id": 396559273,
        "sender_full_name": "Hannah Santos",
        "timestamp": 1697224413
    }
]