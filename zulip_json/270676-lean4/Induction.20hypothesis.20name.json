[
    {
        "content": "<p>Is there a way to fix the name of the induction hypothesis in advance for all cases so  I can use it in the form<br>\n<code>induction I  &lt;introduce IH name&gt;  &lt;;&gt; try {something_with_IH first}</code>. </p>\n<p>Also with the induction tactic what is the correct syntax for something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"o\">{</span><span class=\"n\">some</span> <span class=\"n\">tactics</span> <span class=\"n\">for</span> <span class=\"n\">covering</span> <span class=\"n\">many</span> <span class=\"n\">cases</span><span class=\"o\">}</span>\n <span class=\"bp\">|</span> <span class=\"n\">remaining</span> <span class=\"n\">case</span> <span class=\"mi\">1</span> <span class=\"n\">var1</span> <span class=\"n\">var2</span><span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n <span class=\"bp\">|</span> <span class=\"n\">remaining</span> <span class=\"n\">case</span> <span class=\"mi\">2</span> <span class=\"n\">var1</span> <span class=\"n\">var2</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">..</span>\n</code></pre></div>\n<p>For this second question, I am using <code>case &lt;remaining case 1 name&gt; &lt;var_1&gt; &lt;var_2&gt; =&gt; ....</code> etc, but I recall that this is the style of the  <code>induction'</code> tactic.</p>",
        "id": 400045721,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698975388
    },
    {
        "content": "<p>I am aware of the <code>induction'</code> way of doing things, but I want to understand the <code>induction</code> tactic style of lean 4</p>",
        "id": 400045762,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1698975426
    },
    {
        "content": "<p>you can use <code>induction x with (some tactics) | foo var1 var2 =&gt; ... | bar var1 var2 =&gt; ...</code></p>",
        "id": 400055982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698981248
    },
    {
        "content": "<p>And naming the IH?</p>",
        "id": 400091143,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002410
    },
    {
        "content": "<p>Basically I have one of those semantics proofs where a standard set of steps will close the inductive parts, if I have the name of the IH.</p>",
        "id": 400091234,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002449
    },
    {
        "content": "<p>yes you can name the IH, it just goes after the variables</p>",
        "id": 400091499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699002557
    },
    {
        "content": "<p>if you mean in <code>(some tactics)</code>, no you will have to pick it up implicitly because there may be zero or more IHs in general. But most tactics have some way of doing this like <code>simp [*]</code> or <code>assumption</code></p>",
        "id": 400091688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699002625
    },
    {
        "content": "<p>I do mean in the (some tactics) part.</p>",
        "id": 400091790,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002673
    },
    {
        "content": "<p>There is a specific point where I would like to rw[IH]</p>",
        "id": 400091846,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002701
    },
    {
        "content": "<p><code>simp only [*]</code>?</p>",
        "id": 400091990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699002745
    },
    {
        "content": "<p>or <code>rename_i IH; rw [IH]</code> but there is no guarantee that you pick up the right variable this way</p>",
        "id": 400092076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699002785
    },
    {
        "content": "<p>Okay... In most of my proofs there is one inductive type, so there is either no IH or one IH</p>",
        "id": 400092103,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002802
    },
    {
        "content": "<p>the number of IHs depends on how many recursive arguments there are in the constructor</p>",
        "id": 400092239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699002849
    },
    {
        "content": "<p>Yeah that makes sense</p>",
        "id": 400092277,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002870
    },
    {
        "content": "<p>Rename_I doesn't do the trick because each branch has a different number of variables that need to be renamed before the IH comes up</p>",
        "id": 400092382,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699002922
    },
    {
        "content": "<p><code>rename_i</code> names variables right to left, so it should work unless you have multiple IHs</p>",
        "id": 400092880,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699003125
    },
    {
        "content": "<p>the problem is it complains that there are too many variables in the base case</p>",
        "id": 400125257,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1699014943
    }
]