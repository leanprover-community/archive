[
    {
        "content": "<p>I'm trying to call Lean from C, and started with <a href=\"https://github.com/leanprover/lean4/tree/master/src/lake/examples/reverse-ffi\">https://github.com/leanprover/lean4/tree/master/src/lake/examples/reverse-ffi</a> linked from <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html\">https://lean-lang.org/lean4/doc/dev/ffi.html</a><br>\nI had a few issues getting the example code to run (I'm using linux). so, first I</p>\n<ul>\n<li>call <code>make run-local</code> instead of <code>make</code> (I couldn't ultimately get the linking done by the other target to work)</li>\n<li>modify the makefile line 57 to remove the <code>.lake</code> part of the path</li>\n<li>install llvm15-libs</li>\n</ul>\n<p>and the demo works. at that point I moved over to my project, and things also work, unless I import anything (if I've imported <code>Foo</code>, I get e.g. <code>/usr/bin/ld: out/libEtch.Compile.Ext.so: undefined reference to initialize_Foo</code>). I'm not sure how to get Lake to build everything necessary.</p>\n<p>I tried experimenting with a single file (no imports) and ran into another issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">foo</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">UInt64</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">arr</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">22</span><span class=\"o\">,</span><span class=\"mi\">700</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">export</span> <span class=\"n\">size</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">size</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Î±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a.size</span>\n</code></pre></div>\n<p>the output when I try to print on the C side is</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>out/main-local\noutput: 6\nsize: 5229\nfoo: 0\n</code></pre></div>\n<p>suggesting these constants are not initialized. is there an extra initialization step missing from the example code?</p>",
        "id": 407821007,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1702506222
    },
    {
        "content": "<p>or, if anyone can recommend a project using these features, I'm happy to do more investigation <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 407821147,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1702506295
    },
    {
        "content": "<p>You may take a look at <a href=\"https://github.com/lecopivo/HouLean\">https://github.com/lecopivo/HouLean</a> which also did RFFI.</p>",
        "id": 407833179,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702512493
    },
    {
        "content": "<p>Particularly, <a href=\"https://github.com/lecopivo/HouLean/blob/f2fd297da8ebcc51432baf592c5f74c9e4541d94/cpp/HouLeanModule.h#L160\">here</a> is the entry.</p>",
        "id": 407833462,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702512644
    },
    {
        "content": "<p>If you have your code publicly on Github, I can also try reproducing the issues and investigate later.</p>",
        "id": 407834208,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702513040
    },
    {
        "content": "<p>Also note the initialization section in the FFI doc you linked to.</p>\n<blockquote>\n<p>you should execute code like the following exactly once before accessing any Lean declarations [...]</p>\n</blockquote>",
        "id": 407903342,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1702540490
    },
    {
        "content": "<p>I was following the FFI doc, but the basic example still isn't working.<br>\nhere's the code I'm working with: <a href=\"https://github.com/kovach/ffi-issue/tree/main\">https://github.com/kovach/ffi-issue/tree/main</a></p>\n<p>first commit is just the code copied from <code>lean4</code> with a <code>lean-toolchain</code> file added (I realized the <code>.lake</code> issue is a new feature of v4.4.0). I've stared at the Lean manual code a few more times and I believe it matches the example there (calling <code>lean_initialize</code> doesn't make a difference)</p>\n<p>second commit adds a constant UInt64 which is not initialized on the C side. try calling <code>make run-local</code>; for me it prints out 0 instead of 22</p>\n<p>the Houdini code is doing something more complicated than I need, I think (using <code>dlopen</code> to work with dynamic libraries)</p>",
        "id": 408051107,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1702589901
    }
]