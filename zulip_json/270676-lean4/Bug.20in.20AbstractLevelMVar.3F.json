[
    {
        "content": "<p>I found that Lean didn't abstract universe metavariables correctly when I was working on a project. I looked into the source code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-03/src/lean/Lean/Meta/AbstractMVars.lean</span>\n</code></pre></div>\n<p>and found that <code>abstractLevelMVars</code> didn't try to instantiate a level metavariable before adding it to <code>lmap</code>, which seems wrong. This causes problem when a constant has levels which contain level mvars that has been assigned. Following <code>abstractExprMVars</code>, maybe we should change</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">match</span> <span class=\"n\">s.lmap.find</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">u</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">let</span> <span class=\"n\">paramId</span> <span class=\"o\">:=</span> <span class=\"n\">Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_abstMVar</span> <span class=\"n\">s.nextParamIdx</span>\n          <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">mkLevelParam</span> <span class=\"n\">paramId</span>\n          <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">nextParamIdx</span> <span class=\"o\">:=</span> <span class=\"n\">s.nextParamIdx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lmap</span> <span class=\"o\">:=</span> <span class=\"n\">s.lmap.insert</span> <span class=\"n\">mvarId</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">paramNames</span> <span class=\"o\">:=</span> <span class=\"n\">s.paramNames.push</span> <span class=\"n\">paramId</span> <span class=\"o\">}</span>\n          <span class=\"n\">return</span> <span class=\"n\">u</span>\n</code></pre></div>\n<p>(in <code>abstractLevelMVars</code>) into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">let</span> <span class=\"n\">uNew</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">instantiateLevelMVars</span> <span class=\"n\">u</span>\n        <span class=\"k\">if</span> <span class=\"n\">u</span> <span class=\"bp\">!=</span> <span class=\"n\">uNew</span> <span class=\"k\">then</span>\n          <span class=\"n\">abstractLevelMVars</span> <span class=\"n\">uNew</span>\n        <span class=\"k\">else</span>\n          <span class=\"k\">match</span> <span class=\"n\">s.lmap.find</span><span class=\"bp\">?</span> <span class=\"n\">mvarId</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">u</span>\n          <span class=\"bp\">|</span> <span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span>\n            <span class=\"k\">let</span> <span class=\"n\">paramId</span> <span class=\"o\">:=</span> <span class=\"n\">Name.mkNum</span> <span class=\"bp\">`</span><span class=\"n\">_abstMVar</span> <span class=\"n\">s.nextParamIdx</span>\n            <span class=\"k\">let</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"n\">mkLevelParam</span> <span class=\"n\">paramId</span>\n            <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">nextParamIdx</span> <span class=\"o\">:=</span> <span class=\"n\">s.nextParamIdx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">lmap</span> <span class=\"o\">:=</span> <span class=\"n\">s.lmap.insert</span> <span class=\"n\">mvarId</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">paramNames</span> <span class=\"o\">:=</span> <span class=\"n\">s.paramNames.push</span> <span class=\"n\">paramId</span> <span class=\"o\">}</span>\n            <span class=\"n\">return</span> <span class=\"n\">u</span>\n</code></pre></div>",
        "id": 339655139,
        "sender_full_name": "Yicheng Qian",
        "timestamp": 1678002097
    }
]