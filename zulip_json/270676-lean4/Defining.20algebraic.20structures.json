[
    {
        "content": "<p>Hello. I am trying to define Linear algebra. I have several problems and questions about it. Currently I got this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Inv</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span>\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"⁻¹\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Inv.inv</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Zero.toOfNat0</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">Zero</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">F</span>\n<span class=\"kd\">instance</span> <span class=\"n\">One.toOfNat1</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">‹</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">›</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"c1\">--I would like to use a custom notation here so instead \"op ide a = a\"</span>\n  <span class=\"c1\">--I would like to use 1 * a = a but only inside here</span>\n  <span class=\"c1\">--so that it would not interfere with the Field definition</span>\n  <span class=\"c1\">--which instanciates two Group structures each with a different operator (+ and *)</span>\n  <span class=\"n\">id_op</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">c</span>\n\n<span class=\"c1\">--why can I not put class here?</span>\n<span class=\"c1\">--what is the difference between class and structure?</span>\n<span class=\"kd\">structure</span> <span class=\"n\">CommutMonoid</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">op</span> <span class=\"n\">b</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_id</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">ide</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">m.comm</span><span class=\"o\">,</span><span class=\"n\">m.id_op</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_op_inv_a</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ide</span>\n\n<span class=\"c1\">--I can use the proof from the CommutMonoid in here</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">op_id2</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">inv</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"n\">ide</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">op_id</span> <span class=\"n\">g.toCommutMonoid</span>\n\n<span class=\"c1\">--I use this for saying that multiplication is \"ConditionalGroup f (.*.) 1 (.⁻¹) (. ≠ 0)\"</span>\n<span class=\"kd\">class</span> <span class=\"n\">ConditionalGroup</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv_cond</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_op_inv_a</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">inv_cond</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ide</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Field</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Mul</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">Inv</span> <span class=\"n\">F</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span><span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">.+.</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">-.</span><span class=\"o\">)</span>  <span class=\"c1\">--the Group structure of +</span>\n  <span class=\"n\">mult</span><span class=\"o\">:</span> <span class=\"n\">ConditionalGroup</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">.*.</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">.⁻¹</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"c1\">--the Group structure of *</span>\n  <span class=\"n\">ldistr</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span>  <span class=\"c1\">--left distrubutivity</span>\n\n<span class=\"c1\">--I can use the more general proof for CommutMonoid here for both + and * to define these \"shortcuts\"</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">plus_zero</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">op_id</span> <span class=\"n\">f.plus.toCommutMonoid</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mult_one</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">op_id</span> <span class=\"n\">f.mult.toCommutMonoid</span>\n\n<span class=\"c1\">--proof of right distributivity</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">rdistr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"bp\">*</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.mult.comm</span><span class=\"o\">,</span><span class=\"n\">f.ldistr</span><span class=\"o\">,</span><span class=\"n\">f.mult.comm</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">f.mult.comm</span> <span class=\"n\">a</span> <span class=\"n\">c</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">--I can use multiple Fields here and prove things about them, not sure if I ever need this</span>\n<span class=\"c1\">--(this example is quite stupid)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f1</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f2</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F1</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F2</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">exact</span> <span class=\"n\">And.intro</span> <span class=\"o\">(</span><span class=\"n\">op_id</span> <span class=\"n\">f1.plus.toCommutMonoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op_id</span> <span class=\"n\">f2.plus.toCommutMonoid</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">--why can I not use class here?</span>\n<span class=\"kd\">structure</span> <span class=\"n\">LinearSpace</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Zero</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">Add</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">Neg</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">HMul</span> <span class=\"n\">F</span> <span class=\"n\">L</span> <span class=\"n\">L</span> <span class=\"n\">where</span>\n  <span class=\"n\">plus</span><span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"bp\">.+.</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"bp\">-.</span><span class=\"o\">)</span>\n  <span class=\"c1\">--scalar multiplication axioms -&gt; maybe I could replace these by something like a Monoid?</span>\n  <span class=\"c1\">--mult: Monoid ???</span>\n  <span class=\"n\">one_mult</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mult_assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span>\n  <span class=\"c1\">--distrubutivity axioms</span>\n  <span class=\"n\">ldistr</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span>\n  <span class=\"n\">rdistr</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span>\n\n<span class=\"c1\">--this does not work if LinearSpace is not class -&gt; + and 0 are unknown</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">unique_zero_vector</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">LinearSpace</span> <span class=\"n\">f</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">zero</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">zero2</span>\n  <span class=\"n\">intro</span> <span class=\"n\">is_zero</span>\n  <span class=\"k\">have</span> <span class=\"n\">zero2_plus_zero</span> <span class=\"o\">:=</span> <span class=\"n\">is_zero</span> <span class=\"mi\">0</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l.plus.comm</span> <span class=\"n\">zero2</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">zero2_plus_zero</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l.plus.id_op</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">zero2_plus_zero</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero2_plus_zero</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 398895128,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698411872
    },
    {
        "content": "<p>Here's an answer to the local <code>*</code> notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">op</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ide</span>\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"n\">where</span>\n  <span class=\"n\">id_op</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 398901395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698414132
    },
    {
        "content": "<p>But wouldnt that mean that Monoid would be private in the section? Like then I would have to open that section if I wanted to use that Monoid somewhere else, or am I wrong?</p>",
        "id": 398904964,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698415359
    },
    {
        "content": "<p>But I am gonna try it</p>",
        "id": 398905054,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698415386
    },
    {
        "content": "<p>The only thing that is \"private\" in the section are the <code>local</code> commands</p>",
        "id": 398907299,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416087
    },
    {
        "content": "<p>The <code>Monoid</code> type is not private</p>",
        "id": 398907320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416093
    },
    {
        "content": "<p>Ok so I made it work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">MonoidsDefs</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">op</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"n\">where</span>\n  <span class=\"n\">id_op</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"mi\">𝟙</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">assoc</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">CommutMonoid</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">id</span> <span class=\"n\">where</span>\n  <span class=\"n\">comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">a</span>\n<span class=\"kd\">end</span> <span class=\"n\">MonoidsDefs</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">MonoidsProofs</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">op</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"s2\">\"𝟙\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">op_id</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">m.comm</span><span class=\"o\">,</span><span class=\"n\">m.id_op</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n<span class=\"kd\">end</span> <span class=\"n\">MonoidsProofs</span>\n</code></pre></div>",
        "id": 398907919,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698416293
    },
    {
        "content": "<p><code>structure CommutMonoid extends Monoid</code> should be <code>class CommutMonoid extends Monoid</code></p>",
        "id": 398908112,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416373
    },
    {
        "content": "<p>I used curly braces {} in the section MonoidsProofs for the variables to make sure that I do not have to supply the F, op and id whenever I use the theorems</p>",
        "id": 398908128,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698416380
    },
    {
        "content": "<p>That choice will come to bite you when you have an expression like <code>a*1 + 0</code>, and need to pick between the two different <code>op_id</code>s with <code>+0</code> vs <code>*1</code></p>",
        "id": 398908302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20algebraic.20structures/near/398908112\">said</a>:</p>\n<blockquote>\n<p><code>structure CommutMonoid extends Monoid</code> should be <code>class CommutMonoid extends Monoid</code></p>\n</blockquote>\n<p>But then my code for Group breaks because:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cannot</span> <span class=\"n\">find</span> <span class=\"n\">synthesization</span> <span class=\"n\">order</span> <span class=\"n\">for</span> <span class=\"kd\">instance</span> <span class=\"bp\">@</span><span class=\"n\">Group.toCommutMonoid</span> <span class=\"k\">with</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">inv</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span>\n<span class=\"n\">all</span> <span class=\"n\">remaining</span> <span class=\"n\">arguments</span> <span class=\"k\">have</span> <span class=\"n\">metavariables</span><span class=\"o\">:</span>\n  <span class=\"n\">Group</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"bp\">?</span><span class=\"n\">invLean</span> <span class=\"mi\">4</span>\n<span class=\"n\">T5.Group.a_op_inv_a.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">Group</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">inv</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ide</span>\n</code></pre></div>",
        "id": 398908340,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698416461
    },
    {
        "content": "<p>You should use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_op_inv_a</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ide</span>\n</code></pre></div>",
        "id": 398908536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416533
    },
    {
        "content": "<p>Which tells Lean \"if you know <code>op</code> and <code>ide</code> already, then there is only one possible <code>inv</code>\"</p>",
        "id": 398908591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20algebraic.20structures/near/398908302\">said</a>:</p>\n<blockquote>\n<p>That choice will come to bite you when you have an expression like <code>a*1 + 0</code>, and need to pick between the two different <code>op_id</code>s with <code>+0</code> vs <code>*1</code></p>\n</blockquote>\n<p>hey it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">identities</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">intro</span> <span class=\"n\">a</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">f.plus.comm</span><span class=\"o\">,</span><span class=\"n\">f.plus.id_op</span><span class=\"o\">,</span><span class=\"n\">f.mult.comm</span><span class=\"o\">,</span><span class=\"n\">f.mult.id_op</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 398909008,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698416694
    },
    {
        "content": "<p>Please use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a></p>",
        "id": 398909066,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698416720
    },
    {
        "content": "<p>yea, sorry, I fixed it</p>",
        "id": 398909265,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698416790
    },
    {
        "content": "<p>Just to check, I assume you're aware that mathlib already has <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Field#doc\">docs#Field</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Module#doc\">docs#Module</a> etc, and you're doing this as an exercise?</p>",
        "id": 398909417,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698416840
    },
    {
        "content": "<p>Yes. I am trying to write it from scratch</p>",
        "id": 398909501,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698416881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Defining.20algebraic.20structures/near/398908536\">said</a>:</p>\n<blockquote>\n<p>You should use</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Group</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ide</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">F</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">CommutMonoid</span> <span class=\"n\">F</span> <span class=\"n\">op</span> <span class=\"n\">ide</span> <span class=\"n\">where</span>\n  <span class=\"n\">a_op_inv_a</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ide</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>why should it mean that \"once you know op and ide, you know inv\"?</p>",
        "id": 398909881,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698417016
    },
    {
        "content": "<p>can you explain why it makes it work?</p>",
        "id": 398910437,
        "sender_full_name": "Tomáš Pecl",
        "timestamp": 1698417195
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=outParam#doc\">docs#outParam</a> has some explanation, but perhaps not enough</p>",
        "id": 398915910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698419031
    }
]