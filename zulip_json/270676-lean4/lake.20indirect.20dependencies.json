[
    {
        "content": "<p>I have a chain of depenencies of lake packages <code>A</code>, <code>B</code>, <code>C</code> and <code>D</code> where <code>A</code> directly  only depends on <code>B</code>, while <code>B</code> lists both <code>C</code> and <code>D</code> in its dependencies, eventhough <code>D</code> is a dependency of <code>C</code> (in order to get the correct revisions). Now <code>B</code> builds perfectly with with this solution but as soon as I want to lake-build <code>A</code>, it fails with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">write</span> <span class=\"bp\">'./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">YatimaStdLib</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">YatimaStdLib</span><span class=\"bp\">/</span><span class=\"n\">List.olean'</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"n\">No</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span>\n</code></pre></div>\n<p>The strange thing is: If I copy all the dependencies from <code>B</code>'s lakefile to <code>A</code>'s, it works again, but that a bit of a silly workaround...</p>\n<p>(where <code>YatimaStdLib</code> is <code>C</code> fwiw) Any guesses what's going wrong? /cc <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 362538524,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1685557370
    },
    {
        "content": "<p>not sure how to help here, but<br>\n<span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20indirect.20dependencies/near/362538524\">said</a>:</p>\n<blockquote>\n<p>eventhough <code>D</code> is a dependency of <code>C</code> (in order to get the correct revisions). </p>\n</blockquote>\n<p>could you explain this more? (is it a workaround for a different issue?)</p>",
        "id": 362554934,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685561879
    },
    {
        "content": "<p>There's that workaround that if you import two packages <code>A</code> and <code>B</code> that both depend on different versions of <code>C</code>, you import <code>C</code> directly and list it <em>before</em> <code>A</code> and <code>B</code>  in the lakefile, then you can control what version of <code>C</code> they're using.</p>",
        "id": 362570264,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1685566543
    },
    {
        "content": "<p>So yea, maybe that workaround somehow doesn't carry over to the new package.</p>",
        "id": 362570416,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1685566584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20indirect.20dependencies/near/362570416\">said</a>:</p>\n<blockquote>\n<p>So yea, maybe that workaround somehow doesn't carry over to the new package.</p>\n</blockquote>\n<p>Yeah, this is what I suspect is happening, though more investigation is necessary to be sure.</p>",
        "id": 362573079,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685567364
    },
    {
        "content": "<p>What could be useful here is comparing the <code>lake-manifest</code> of <code>A</code> and <code>B</code> and seeing if there is a discrepancy in the version of <code>D</code>.</p>",
        "id": 362573451,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685567485
    },
    {
        "content": "<p>The hashes match up, but <code>B</code> shows up right in the middle of the dependency list in the <code>lake-manifest</code> for some reason, while I would have expected it to be listed at the end <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 362580524,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1685569978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> If you have the time, constructing a MWE and posting an issue on the Lake GitHub would be helpful. This seems like something that may take some time and effort to debug.</p>",
        "id": 362881694,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685653754
    },
    {
        "content": "<p>Will try, not so easy to reproduce the situation with dummy repos either..</p>",
        "id": 362977955,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1685697152
    }
]