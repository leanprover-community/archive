[
    {
        "content": "<p>I would like to run Lean tactics such as <code>intro</code> or <code>apply</code> through meta-level code. For instance, I want to modify something such as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mytac</span><span class=\"o\">)</span> <span class=\"s2\">\"mytac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic mytac]</span> <span class=\"kd\">def</span> <span class=\"n\">mytacT</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">getGoals</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The goals are {goals}\"</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">mytac</span>\n  <span class=\"n\">intro</span>\n  <span class=\"n\">exact</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>to automatically introduce the hypotheses (via the <code>intro</code> tactic). It appears that the <code>liftMetaTactic</code> does something of this sort, but I have not been able to find a concrete example demonstrating how to integrate pre-existing tactics in the Lean4 source code. I would be grateful if someone could help me understand how to modify the above code to run such tactics at the meta-level.</p>",
        "id": 277652847,
        "sender_full_name": "Anand Rao",
        "timestamp": 1649009248
    },
    {
        "content": "<p>Most of these tactics are lifts of stuff at the meta level, for example <code>apply</code> is a lift of <code>Lean.Meta.apply</code>. It is likely that for your usage you can use the meta level stuff directly (I do this a lot).</p>",
        "id": 277677309,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649042167
    },
    {
        "content": "<p>For introducing a variable, I believe you should use either <code>assert</code> or <code>define</code>, depending on whether you want to create a lambda or a let. These are in the file <code>src/lean/Meta/Tactic/Assert.lean</code> in the source. </p>\n<p>I haven't used them but I believe <span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> used one of them in his ported tactic.</p>",
        "id": 277679762,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1649045431
    },
    {
        "content": "<p>Thank you very much. By looking at a few examples related to <code>Lean.Meta.apply</code>, I was able to produce working code for what I wanted:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">introunittac</span><span class=\"o\">)</span> <span class=\"s2\">\"introunittac\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">@[tactic introunittac]</span> <span class=\"kd\">def</span> <span class=\"n\">introunittacT</span> <span class=\"o\">:</span> <span class=\"n\">Tactic</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The goal is {mvar}\"</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">fvar</span><span class=\"o\">,</span> <span class=\"n\">mvar'</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.intro</span> <span class=\"n\">mvar</span> <span class=\"bp\">`</span><span class=\"n\">x</span>\n  <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">getLCtx</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"The new goal is {mvar'}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.apply</span> <span class=\"n\">mvar'</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Unit.unit</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">introunittac</span>\n</code></pre></div>",
        "id": 277681410,
        "sender_full_name": "Anand Rao",
        "timestamp": 1649047535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao</span> has marked this topic as resolved.</p>",
        "id": 277681458,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649047568
    }
]