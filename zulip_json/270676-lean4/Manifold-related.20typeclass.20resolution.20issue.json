[
    {
        "content": "<p>Does anyone know the source of this typeclass resolution issue?  MWE generated from some ComplexManifold code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Typeclass resolution issue</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">uncurry</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">φ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a.1</span> <span class=\"n\">a.2</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Model.prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Manifold</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Manifold.prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Manifold</span> <span class=\"o\">(</span><span class=\"n\">I.prod</span> <span class=\"n\">J</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NiceAt</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NiceAt.comp</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">K</span> <span class=\"n\">O</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">O</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">J</span> <span class=\"n\">K</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">True.intro</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NiceAt.prod</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n    <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Manifold</span> <span class=\"n\">K</span> <span class=\"n\">O</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">O</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">J</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">K</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">J.prod</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">True.intro</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Good</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cm</span> <span class=\"o\">:</span> <span class=\"n\">Manifold</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"o\">(</span><span class=\"n\">I.prod</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">NiceAt.comp</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">×</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"n\">I</span> <span class=\"n\">cm</span> <span class=\"o\">(</span><span class=\"n\">I.prod</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">I</span> <span class=\"n\">cm</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ha</span> <span class=\"o\">(</span><span class=\"n\">fa.prod</span> <span class=\"n\">ga</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Bad</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Model</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">cm</span> <span class=\"o\">:</span> <span class=\"n\">Manifold</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n    <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"o\">(</span><span class=\"n\">I.prod</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">fa</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ga</span> <span class=\"o\">:</span> <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">NiceAt</span> <span class=\"n\">I</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"n\">ha.comp</span> <span class=\"o\">(</span><span class=\"n\">fa.prod</span> <span class=\"n\">ga</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 392516883,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695388917
    },
    {
        "content": "<p>The <code>Bad</code> theorem produces</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">Manifold</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.1279</span> <span class=\"n\">ha</span> <span class=\"n\">fa</span> <span class=\"n\">ga</span><span class=\"o\">)</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p><code>Good</code> works, and is <code>Bad</code> with lots of implicit arguments filled in.</p>",
        "id": 392517074,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695388966
    },
    {
        "content": "<p>A shorter version of <code>Good</code> that works is <code>ha.comp (I := I) (fa.prod ga)</code></p>",
        "id": 392520074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695389893
    },
    {
        "content": "<p><code>I</code> should be fixed by either <code>ha</code> or <code>fa.prod ga</code>, though, right?  Probably I have a poor mental model for how inference works.</p>",
        "id": 392520915,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695390162
    },
    {
        "content": "<p><code>ha.comp (g := fun _ =&gt; (_, _)) (fa.prod ga)</code> also works</p>",
        "id": 392522919,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695390738
    },
    {
        "content": "<p>I think Lean can't do the higher-order unification needed to work out <code>g</code></p>",
        "id": 392522953,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695390750
    },
    {
        "content": "<p>Well, Lean 4 can't.  Lean 3 could. :)</p>\n<p>(I think.  This was minimized from a porting issue.)</p>",
        "id": 392523087,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1695390783
    },
    {
        "content": "<p>There's a tactic which means \"create side goals for typeclass issues rather than failing\", but I forget its name</p>",
        "id": 392523636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1695390914
    },
    {
        "content": "<p>Lean 3 definitely also had similar issues with these kinds of issues - composing maps where the intermediate type is a product (though perhaps not this exact issue):<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement\">https://leanprover-community.github.io/mathlib_docs/notes.html#continuity%20lemma%20statement</a></p>",
        "id": 392716962,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1695485936
    }
]