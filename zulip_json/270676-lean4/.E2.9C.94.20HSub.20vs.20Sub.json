[
    {
        "content": "<p>In the following code, it tells me that it can't synthesize an HSub instance.  I just want Sub though. How do I get this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.Variables</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.LibrarySearch</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finite.Basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">subtractionofpolynomials</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span> <span class=\"c1\">-- failed to synthesize instance HSub (MvPolynomial (Fin m) F) (MvPolynomial (Fin m) F) ?m.329</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 363396805,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1685835746
    },
    {
        "content": "<p>Is this fixed by giving the type of <code>foo</code>? That's pretty grim that you can't subtract polynomials over a field.</p>",
        "id": 363397053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685835961
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=MvPolynomial#doc\">docs4#MvPolynomial</a></p>",
        "id": 363397130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685835994
    },
    {
        "content": "<p>Even if I tell it the type, it doesn't work</p>",
        "id": 363399741,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1685838007
    },
    {
        "content": "<p>There are no problems with adding though, strangely.</p>",
        "id": 363399766,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1685838029
    },
    {
        "content": "<p>You need this import: Mathlib.Data.MvPolynomial.CommRing</p>",
        "id": 363406616,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1685843086
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> has marked this topic as resolved.</p>",
        "id": 363408322,
        "sender_full_name": "Notification Bot",
        "timestamp": 1685844154
    },
    {
        "content": "<p>This missing import has tripped people up before.</p>",
        "id": 363445703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685867814
    },
    {
        "content": "<p>Yeah, is there any reason it's separate?</p>",
        "id": 363467126,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685874964
    },
    {
        "content": "<p>I'm fine with splitting so long as you don't make expected instances hard to find.</p>",
        "id": 363467369,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685875041
    },
    {
        "content": "<p>I think it's just been that way for a very long time</p>",
        "id": 363470650,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685876127
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/4070\">#4070</a> did the split</p>",
        "id": 363470898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685876212
    },
    {
        "content": "<p>I think that given we've seen this more than once, there might be an argument for putting the <code>ring</code> stuff into <code>basic</code> and perhaps moving other stuff out of <code>basic</code>, e.g. support and/or coeff and/or eval/eval_2.</p>",
        "id": 363472054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685876608
    },
    {
        "content": "<p>Probably once the port is over</p>",
        "id": 363483028,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685880064
    }
]