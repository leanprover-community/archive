[
    {
        "content": "<p>I am fiddling with <code>QQ</code>. This works (somewhat unexpectedly):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cow</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ordering</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">compare</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Somehow it figured out that quoted <code>Fin n</code> has an <code>Ord</code> instance.</p>\n<p>But now suppose I wanted to do the same for a general type <code>α</code>, under the assumption that <code>α</code> is equipped with an <code>Ord</code> instance.  How can I do that? Here is a non-working example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rabbit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ordering</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">compare</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Perhaps I need to explicitly provide an instance, in which case the next question is: given a type, say <code>Fin 42</code>, how do I find out what <code>Ord</code> instance Lean generated, and how do I refer to it?</p>",
        "id": 357338048,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683733783
    },
    {
        "content": "<p><code>#synth Ord (Fin 37)</code> tells you the ordering which the type class inference system knows about.</p>",
        "id": 357341120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683734460
    },
    {
        "content": "<p>For the other question, my Lean appears to be borked right now but does adding <code>[Ord \\alpha]</code> fix it?</p>",
        "id": 357341704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683734585
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 357344520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683735128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rabbit</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ord</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Ordering</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">compare</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Then there's <code>synthInstanceQ</code> to get instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"k\">do</span> <span class=\"n\">return</span> <span class=\"n\">rabbit</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">synthInstanceQ</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357354290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683737599
    },
    {
        "content": "<p>Thanks. It was the <code>synthInstanceQ</code> that I didn't know about.</p>",
        "id": 357502045,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683792638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 357764658,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683872057
    }
]