[
    {
        "content": "<p>I'm a beginner in the world of proof assistants, and have been taking a look at Lean4 lately.</p>\n<p>I want to write a function like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.index</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ok</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">ok</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">List.Mem.head</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">List.Mem.tail</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">List.index</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>But when I do it, I receive the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">cases'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">induction'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"bp\">'</span><span class=\"n\">List.Mem.casesOn'</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.87469</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"n\">ok</span><span class=\"bp\">✝¹</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n<span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">head</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.87826</span>\n<span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n<span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">x_1</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n<span class=\"n\">ok</span><span class=\"bp\">✝</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"bp\">✝</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">HEq</span> <span class=\"n\">ok</span><span class=\"bp\">✝¹</span> <span class=\"n\">ok</span><span class=\"bp\">✝</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"n\">head</span><span class=\"bp\">✝</span> <span class=\"n\">ok</span><span class=\"bp\">✝¹</span> <span class=\"n\">after</span> <span class=\"n\">processing</span>\n  <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span>\n<span class=\"n\">the</span> <span class=\"n\">dependent</span> <span class=\"n\">pattern</span> <span class=\"n\">matcher</span> <span class=\"n\">can</span> <span class=\"n\">solve</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">kinds</span> <span class=\"n\">of</span> <span class=\"n\">equations</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">and</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">terms</span> <span class=\"n\">are</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">examples</span><span class=\"o\">:</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span>\n</code></pre></div>\n<p>If I write my own instance of Mem, with it being a Type, it works perfectly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">MyMem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">head</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MyMem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">tail</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">MyMem</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"bp\">→</span> <span class=\"n\">MyMem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">::</span><span class=\"n\">as</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.index'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">MyMem</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ok</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">ok</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">MyMem.head</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n      <span class=\"bp\">|</span> <span class=\"n\">MyMem.tail</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">List.index'</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>But, as soon as I set it as a Prop, the same error comes up. Am I doing something wrong? Lean's pattern matching can't return a member of a higher universe?</p>\n<p>When I have something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">T</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">T</span> <span class=\"bp\">→</span> <span class=\"n\">T</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">t</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">u</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">u</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>It compiles fine, I'm a bit confused about this.<br>\nThanks for the attention in advance and sorry if that's not the place to ask this kind of questions.</p>",
        "id": 355842481,
        "sender_full_name": "Celso",
        "timestamp": 1683221303
    },
    {
        "content": "<p>the issue is that (most) inductive types in <code>Prop</code> cannot be used to produce \"data\" because they don't carry any data of their own. A value of type <code>Mem a l</code> doesn't \"remember\" whether it was constructed via the <code>.head</code> constructor or the <code>.tail</code> constructor, so if you try to write an if statement to branch on this lean won't know what code to generate, as the information has been erased.</p>\n<p>In fact, the <code>List.index'</code> function is not implementable without additional assumptions. If you know that <code>x</code> is a member of <code>l</code> that doesn't help you to locate which element it actually is, unless you assume e.g. that <code>α</code> has decidable equality so that the linear search method \"is it the first one? is it the second one?\" can be used to locate the element.</p>",
        "id": 355843720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683221640
    },
    {
        "content": "<p>Here's an illustration of what goes wrong if you could define <code>List.index'</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">List.index'</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ok</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">List.index'_head</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">List.index'</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mem.head</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">List.index'_tail</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">List.index'</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Mem.tail</span> <span class=\"n\">_</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"bp\">@</span><span class=\"n\">List.index'</span> <span class=\"n\">α</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">uh_oh</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">List.index'</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">List.index'_head</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">List.index'</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">List.index'_tail</span><span class=\"o\">,</span> <span class=\"n\">List.index'_head</span><span class=\"o\">]</span>\n  <span class=\"k\">have</span> <span class=\"n\">hmm</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">List.Mem</span> <span class=\"mi\">1</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">tail</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">h1.symm.trans</span> <span class=\"n\">h2</span>\n  <span class=\"n\">nomatch</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 355845612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683222085
    },
    {
        "content": "<p>the key point here is the fact <code>hmm : (.head _ : List.Mem 1 [1, 1]) = (.tail _ (.head _)) := rfl</code>, which says that different proofs of <code>x \\in l</code> are equal to each other, even if they went via different constructors. This can be used to prove that a function like <code>List.index'</code> can't exist</p>",
        "id": 355845998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683222187
    },
    {
        "content": "<p>Here's how you can define <code>List.index</code> with an assumption of decidable equality. The important part here is that the actual branching is not on the proof of <code>Mem</code> but instead on whether <code>x = a</code> is true or false, but in the false case we can prove that <code>Mem x xs</code> by pattern matching on <code>ok</code> because <code>Mem x xs</code> is itself a Prop.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.index</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">ok</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"k\">then</span>\n      <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Mem</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span>\n        <span class=\"k\">match</span> <span class=\"n\">ok</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">List.Mem.head</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span>\n        <span class=\"bp\">|</span> <span class=\"n\">List.Mem.tail</span> <span class=\"n\">_</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t</span>\n      <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">List.index</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 355847065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683222489
    },
    {
        "content": "<p>I see. Thanks you very much for the explanation and the code example <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>\n<p>I'll keep looking into Lean and trying to learn more about it!</p>",
        "id": 355847362,
        "sender_full_name": "Celso",
        "timestamp": 1683222591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"614849\">Celso</span> has marked this topic as resolved.</p>",
        "id": 355848190,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683222821
    }
]