[
    {
        "content": "<p>If I have a <code>goal : Expr</code>, <code>t : Term</code> and <code>p : SubExpr.Pos</code>, is there some way to perform a rewrite on <code>goal</code> at position <code>p</code> using <code>t</code>? So in pseudo-code <code>rw (pos := p) [t]</code>.</p>",
        "id": 406041784,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701777893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372804\">@Marcus Rossel</span> I have been working on something along these lines over here: <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405360088\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405360088</a>. The selected <code>SubExpr.Pos</code> is converted to a pattern and occurrence which is then pasted into the editor. Functions for going from the <code>SubExpr.Pos</code> to the occurrence in the expression are in the source code linked to in the message.</p>",
        "id": 406044300,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701778810
    },
    {
        "content": "<p>Oh, great! So I guess I could use <a href=\"https://github.com/Human-Oriented-ATP/lean-tactics/blob/173bf1c3cb3fc3d309e091092f24333cc1ab79b4/MotivatedMoves/ForMathlib/Rewrite.lean#L54\"><code>findRewriteOccurrence</code></a> and then use the result to do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Is that right?</p>",
        "id": 406045126,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701779098
    },
    {
        "content": "<p>Yes, that's right. You may need to specialize <code>t</code> because of the way Lean's <code>kabstract</code> (which is used for <code>rw</code>) works.</p>\n<p>The function that generates the final tactic call as a string is <a href=\"https://github.com/Human-Oriented-ATP/lean-tactics/blob/173bf1c3cb3fc3d309e091092f24333cc1ab79b4/MotivatedMoves/ForMathlib/Rewrite.lean#L66\">rewriteTacticCall</a>.</p>\n<p>Here is a modified version that suits your situation (this assumes that the rewrite is happening in the goal):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rewriteTacticCall'</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">SubExpr.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">occurrence</span><span class=\"o\">,</span> <span class=\"n\">pattern</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">findRewriteOccurrence</span> <span class=\"n\">thm</span> <span class=\"n\">symm</span> <span class=\"n\">p</span> <span class=\"n\">goal</span>\n  <span class=\"k\">let</span> <span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Rewrite.Config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"n\">occurrence</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Format.pretty</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">pattern</span> <span class=\"c1\">-- the `pattern` is the `thm` specialized to the selected position</span>\n  <span class=\"n\">return</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"rw (config := {cfg}) [{if symm then \"</span><span class=\"bp\">←</span> <span class=\"s2\">\" else \"\" ++ arg}]\"</span>\n</code></pre></div>",
        "id": 406046814,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701779777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303675\">Anand Rao Tadipatri</span> <a href=\"#narrow/stream/270676-lean4/topic/rewrite.20at.20SubExpr.2EPos/near/406046814\">said</a>:</p>\n<blockquote>\n<p>You may need to specialize <code>t</code> because of the way Lean's <code>kabstract</code> (which is used for <code>rw</code>) works.</p>\n</blockquote>\n<p>Why is this actually necessary? I would have thought that <a href=\"https://github.com/Human-Oriented-ATP/lean-tactics/blob/173bf1c3cb3fc3d309e091092f24333cc1ab79b4/MotivatedMoves/ForMathlib/Utils.lean#L74\">this call</a> to <code>isDefEq</code> would match the metavariables in <code>pattern</code> to the corresponding subexpressions in <code>← SubExpr.patternAt position root</code>. Or is this not the case?</p>",
        "id": 406080292,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701789330
    },
    {
        "content": "<p>Yes, that call to <code>isDefEq</code> would ensure that the meta-variables are instantiated with the correct values. I was earlier referring to the term that ends up in the final tactic call -- if <code>t</code> is <code>Nat.add_comm</code>, then it may need to be specialized down to something like <code>Nat.add_comm 3 4</code> for it to work as intended (the example below shows a case where just <code>Nat.add_comm</code> fails).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">]</span> <span class=\"o\">})</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"c1\">-- error</span>\n  <span class=\"c1\">-- tactic 'rewrite' failed, did not find instance of the pattern in the target expression</span>\n  <span class=\"c1\">--   1 + 2</span>\n  <span class=\"c1\">-- 1 + 2 = 3 + 4</span>\n</code></pre></div>\n<p>But this is a behaviour that may soon be fixed: <a href=\"#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405517524\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Point-and-click.20tactics/near/405517524</a>.</p>",
        "id": 406111453,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701797601
    },
    {
        "content": "<p>Oh perfect, that's exactly an error I've been running into which I didn't understand <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span><br>\nThanks so much for you detailed explanations!</p>",
        "id": 406113571,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701798374
    },
    {
        "content": "<p>I'm glad to help!</p>",
        "id": 406113744,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701798443
    },
    {
        "content": "<p>PSA: I tried using the <a href=\"https://github.com/leanprover/lean4/pull/2539\">#2539</a> toolchain, and it didn't fix the aforementioned problem. For example, I still get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">rewrite'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">Nat.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 406288140,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701863128
    },
    {
        "content": "<p>Interestingly, removing the <code>← reduce (skipTypes := false) (skipProofs := false)</code> in <code>findRewriteOccurrence</code> solved the problem for me.</p>",
        "id": 406291379,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1701864378
    },
    {
        "content": "<p>Thanks, I will look into this. I suppose that with the new <code>kabstract</code>, it would be possible to avoid the <code>pattern</code> from <code>findRewriteOccurrences</code> entirely in the <code>rewriteTacticCall'</code> function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rewriteTacticCall'</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">SubExpr.Pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">thm</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">occurrence</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">findRewriteOccurrence</span> <span class=\"n\">thm</span> <span class=\"n\">symm</span> <span class=\"n\">p</span> <span class=\"n\">goal</span>\n  <span class=\"k\">let</span> <span class=\"n\">cfg</span> <span class=\"o\">:</span> <span class=\"n\">Rewrite.Config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">occs</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">pos</span> <span class=\"o\">[</span><span class=\"n\">occurrence</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">Format.pretty</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">thm</span>\n  <span class=\"n\">return</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"rw (config := {cfg}) [{if symm then \"</span><span class=\"bp\">←</span> <span class=\"s2\">\" else \"\" ++ arg}]\"</span>\n</code></pre></div>",
        "id": 406297710,
        "sender_full_name": "Anand Rao Tadipatri",
        "timestamp": 1701866896
    }
]