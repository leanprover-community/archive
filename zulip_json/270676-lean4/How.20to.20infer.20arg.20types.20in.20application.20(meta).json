[
    {
        "content": "<p>I was trying to infer the types of arguments in an application during elaboration but <code>inferType</code> returns the expected types. I was wondering if there is a way to obtain the real types of arguments and not the expected ones. For instance, in the following application: <code>(fun x : Bool =&gt; x) 1</code>, I would expect <code>1</code> to have type <code>Nat</code>, but <code>inferType</code> returns <code>Bool</code>.</p>\n<p>I had the following elaboration procedure (silly example):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"≪\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"≫\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">elabT</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">elabTerm</span> <span class=\"n\">t</span> <span class=\"n\">none</span>\n  <span class=\"k\">if</span> <span class=\"n\">isApp</span> <span class=\"n\">elabT</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">fn</span> <span class=\"o\">:=</span> <span class=\"n\">getAppFn</span> <span class=\"n\">elabT</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">getAppArgs</span> <span class=\"n\">elabT</span>\n    <span class=\"k\">let</span> <span class=\"n\">argTypes</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">args.mapM</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">inferType</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"c1\">-- extra things  where types/terms are fixed</span>\n\n<span class=\"k\">#reduce</span> <span class=\"bp\">≪</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"bp\">≫</span>\n<span class=\"c1\">-- 1</span>\n<span class=\"c1\">-- failed to synthesize instance</span>\n<span class=\"c1\">--  OfNat Bool 1</span>\n</code></pre></div>\n<p>and <code>argTypes</code> indeed returns the types that <code>fn</code> expects. <br>\nIs there a way to obtain the real types? Am I missing something obvious, or some other more idiomatic way to do it, etc?</p>",
        "id": 396001446,
        "sender_full_name": "Tomás Díaz",
        "timestamp": 1696995494
    },
    {
        "content": "<p>There is no \" the real types\" here, before you are finished with elaboration it is completely unclear what type which piece of syntax has, that is...well literally the job of the elaborator to determine and turn the syntax into core expressions here.</p>\n<p>Also 1 doesn't have to have type Nat. As your elaborator correctly demonstrates numeric literals in Lean are polymorphic through the OfNat type class so you could very much declare instances that allow you to turn 0 into false and 1 into true and thus make this thing type check</p>",
        "id": 396018977,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697005869
    },
    {
        "content": "<p>Ty. <br>\nMaybe my wording of \"the real types\" wasn't the best, but I'm still wondering if there is a way to a base type for a given term, regardless of context? As in, if you do <code>#check 1</code> you do get type <code>1 : Nat</code> and not <code>1 : Bool</code>. In an application, you can look at an argument by its own and say that it has a certain type regardless of where it's being used, no?</p>",
        "id": 396082981,
        "sender_full_name": "Tomás Díaz",
        "timestamp": 1697028882
    },
    {
        "content": "<p>What you want is likely possible in a roundabout way but this sounds like XY problem. What are you actually trying to achieve and do you have a more complicated example that does not involve numerical constants?</p>",
        "id": 396084519,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697029387
    },
    {
        "content": "<p>I'm trying to insert a cast operator, from a source type to a target type, ie. (fun x : Bool =&gt; x) (&lt;Bool &lt;= Nat &gt; 1)</p>",
        "id": 396084804,
        "sender_full_name": "Tomás Díaz",
        "timestamp": 1697029489
    },
    {
        "content": "<p>And do you have a more complicated example not involving numerical constants?</p>",
        "id": 396085180,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697029616
    },
    {
        "content": "<p>Sorry, I’m no longer in my pc to write something more elaborate. I guess you could simply use any other inductive type, list A and option. Do you think numerical constants might introduce other things that other types don’t or have a different treatment as literals ? (As in some implicit coercions, etc)</p>",
        "id": 396090184,
        "sender_full_name": "Tomás Díaz",
        "timestamp": 1697031188
    },
    {
        "content": "<p>Yes,  if you elaborate plain <code>1</code> you get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.3</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">m.4</span>\n</code></pre></div>\n<p>where <code>?m.2</code> is a hole/meta variable for the type of <code>1</code> and <code>?m.4</code> is a hole/meta variable for the instance <code>OfNat ?m.2 1</code> which provides the actual value. So the type of <code>1</code> is in fact an undetermined type  <code>?m.2</code>.</p>\n<p>The type <code>?m.2</code> is usually determined from the context, e.g. if you apply <code>1</code> to <code>fun x : bool =&gt; x</code> than Lean determines that <code>?m.2</code> has to be <code>Bool</code>. You can force Lean to fill <code>?m.2</code> without a context and you get <code>Nat</code> because there is an instance <code>OfNat Nat ..</code> with <code>default_instance</code> attribute.</p>\n<hr>\n<p>You can play around with this using this meta code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">TermElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">one</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">none</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">one</span><span class=\"o\">)</span>\n  <span class=\"n\">synthesizeSyntheticMVarsNoPostponing</span>\n  <span class=\"n\">IO.println</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">one</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which prints</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">u.3</span><span class=\"o\">}</span> <span class=\"bp\">?</span><span class=\"n\">m.2</span> <span class=\"mi\">1</span> <span class=\"bp\">?</span><span class=\"n\">m.4</span>\n<span class=\"bp\">@</span><span class=\"n\">OfNat.ofNat.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">Nat</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">instOfNatNat</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<hr>\n<p>For other types, the elaborator usually adds the expected cast</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>prints</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Bool</span>\n</code></pre></div>",
        "id": 396104816,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1697035352
    },
    {
        "content": "<p>Mmmhhhhhh interesting, thank you very much!</p>",
        "id": 396121523,
        "sender_full_name": "Tomás Díaz",
        "timestamp": 1697040194
    }
]