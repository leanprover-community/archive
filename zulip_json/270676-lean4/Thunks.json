[
    {
        "content": "<p>I just found out that Lean 4 supports Thunks which are described on the documentation page <a href=\"https://leanprover.github.io/lean4/doc/thunk.html\">Lean 4 Docs: Thunks</a>. This made me curious and I tried out the code given there which should supposedly calculate the Fibonacci numbers. Code from the documentation page linked above: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span>   <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">fib</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Thunk</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span>\n    <span class=\"n\">x.get</span>\n  <span class=\"k\">else</span>\n    <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">f</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">Thunk.mk</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">fib</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">g</span> <span class=\"n\">false</span> <span class=\"mi\">1000</span>\n</code></pre></div>\n<p>However, I only get the value zero as a result, which makes sense from how g is defined. But I see very little benefit in such behavior. </p>\n<p>What I wished for the example to do was to calculate the value of the 1000th Fibonacci number but with caching of all previous Fibonacci numbers. Using a cache the computation then is no longer exponential and should therefore be much faster although the original <code>fib</code> definition is very computationally inefficient. </p>\n<p>Is it possible that there is a mistake in the example? If not, could you give me an explanation where I'm wrong?</p>",
        "id": 364474418,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1686211412
    },
    {
        "content": "<p>I'm afraid I don't understand your code at all or how it should lead to caching. There recently was a thread on memoization of functions like fib: <a href=\"#narrow/stream/270676-lean4/topic/memoziation.20of.20strong.20recursion.20on.20nat\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/memoziation.20of.20strong.20recursion.20on.20nat</a></p>",
        "id": 364475842,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686211746
    },
    {
        "content": "<p>It is not actually my code, I just copied it from the documentation page linked above. (I also just changed the original post to make that clearer).</p>",
        "id": 364476762,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1686212006
    },
    {
        "content": "<p>Oops, I see! It's merely supposed to illustrate that the thunk is not run when its value is not actually needed. It does not attempt to speed up fib itself.</p>",
        "id": 364477507,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686212191
    },
    {
        "content": "<p>The example seems to be demonstrating that <code>x</code> is not evaluated because <code>c</code> is false (<code>fib 1000</code> being used as a stand-in for something that takes long enough to be noticeable), but that would also be true if you replaced <code>Thunk Nat</code> with <code>Unit -&gt; Nat</code></p>",
        "id": 364477534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686212199
    },
    {
        "content": "<p>This is also what I found out when playing around with it. But what is the added value of a Thunk then? Edit: I just saw that this is described in the second example</p>",
        "id": 364478211,
        "sender_full_name": "Jonas Bayer",
        "timestamp": 1686212368
    }
]