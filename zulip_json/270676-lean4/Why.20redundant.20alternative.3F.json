[
    {
        "content": "<p>The following is an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">SampleType</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">SampleType</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">SampleType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">SampleType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"A\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"B\"</span> <span class=\"c1\">-- Error message : redundant alternative</span>\n\n\n<span class=\"kn\">open</span> <span class=\"n\">SampleType</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f2</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">SampleType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"A\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"B\"</span> <span class=\"c1\">-- No Errors</span>\n</code></pre></div>\n<p>In the definition of <code>f1</code> the namespace(correct term??) corresponding to <code>SampleType</code> is not yet open, so <code>A</code> and <code>B</code> should not be visible and accessible. This is fixed before the definition of <code>f2</code>. However, the error thrown by lean4 in <code>f1</code> is not that it doesn't know about constructors <code>A</code> and <code>B</code>, but <code>redundant alternative</code>. Why?</p>",
        "id": 381528270,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1691076799
    },
    {
        "content": "<p>If you don't open <code>SampleType</code>, then <code>A</code> and <code>B</code> are understood as variables, not the constructors of <code>SampleType</code></p>\n<p>It's like saying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">SampleType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"A\"</span>\n  <span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"B\"</span>\n</code></pre></div>",
        "id": 381528762,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1691076902
    },
    {
        "content": "<p>Even inside a match arm's LHS?</p>",
        "id": 381528939,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1691076935
    },
    {
        "content": "<p>My Lean writing skills are a bit rusty, but the following might work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f1</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">SampleType</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"A\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">B</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"B\"</span>\n</code></pre></div>",
        "id": 381529427,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1691077025
    }
]