[
    {
        "content": "<p>I'm trying to learn Lean 4 mostly to use as a proof assistant and I'm doing so following Velleman's <a href=\"https://djvelleman.github.io/HTPIwL\">How to Prove it With Lean</a>. I'm currently stuck with Exercise 4.3.20 as I'm not sure how to avoid choosing an element from a set, while I'm also not sure how to choose the element if I really need to. The exercise is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">Exercise_4_3_20</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">BinRel</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">BinRel</span> <span class=\"o\">(</span><span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">S</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">↔</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"bp\">∧</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"bp\">∧</span>\n    <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">transitive</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">transitive</span> <span class=\"n\">S</span>\n</code></pre></div>\n<p>I have hypotheses</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"bp\">∧</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"bp\">∧</span> <span class=\"n\">Z</span> <span class=\"bp\">≠</span> <span class=\"bp\">∅</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>Of course, if I had an element <code>y ∈ Y</code> I could prove that <code>S</code> is transitive by showing <code>x ∈ X → z ∈ Z → R x z</code> using the rightmost part of <code>h2</code> and <code>h3</code> together with the transitivity of <code>R</code>. But this raises the question I started the post with. So can I avoid choosing an element of <code>Y</code>? And if I have no way of avoiding using choice, what is the proper way of doing so?</p>\n<p>Thanks!</p>",
        "id": 399272677,
        "sender_full_name": "David Méndez",
        "timestamp": 1698661875
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.nonempty_iff_ne_empty#doc\">docs#Set.nonempty_iff_ne_empty</a> should help</p>",
        "id": 399279709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698664282
    },
    {
        "content": "<p>That helped, thanks!</p>",
        "id": 399281774,
        "sender_full_name": "David Méndez",
        "timestamp": 1698665152
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"663127\">David Méndez</span> has marked this topic as resolved.</p>",
        "id": 399901980,
        "sender_full_name": "Notification Bot",
        "timestamp": 1698921113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"663127\">@David Méndez</span> : If you don't want to use a theorem from Lean's library, you could do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Now you have to fill in a proof of <code>∃ (y : A), y ∈ Y </code>.  I would suggest trying proof by contradiction.</p>",
        "id": 405545337,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1701532502
    }
]