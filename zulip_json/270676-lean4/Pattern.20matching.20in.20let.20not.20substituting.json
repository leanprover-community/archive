[
    {
        "content": "<p>Is this intended behavior?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">i</span> <span class=\"c1\">-- fails, pattern match did not substitute in hypothesis</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">return</span> <span class=\"n\">i</span> <span class=\"c1\">-- fails, pattern match did not substitute in goal</span>\n</code></pre></div>\n<p>I thought <code>let</code> was suitable as a substitute for all single-arm matches, which work fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">i</span> <span class=\"c1\">-- ok</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">i</span> <span class=\"c1\">-- ok</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">failure</span>\n</code></pre></div>",
        "id": 407080090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702223383
    },
    {
        "content": "<p>Does <code>if let</code> work there?</p>",
        "id": 407081166,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702223885
    },
    {
        "content": "<p>Yes!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">i</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">failure</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"n\">i</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">failure</span>\n</code></pre></div>\n<p>(but this doesn't help with fixing <a href=\"https://github.com/leanprover-community/quote4/pull/29\">quote4#29</a>, since <code>Qq</code> uses only the <code>let $path := $rhs</code> version internally)</p>",
        "id": 407082272,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702224284
    },
    {
        "content": "<p>Too bad that it isn't helpful for your intended application.</p>\n<p>I do find <code>if let</code> convenient sometimes, though.</p>",
        "id": 407082804,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1702224551
    },
    {
        "content": "<p>Where exactly is pattern matching let implemented in core? If it's implemented in terms of <code>match</code>, can this be fixed simply by turning on the generalization flag? Or is there some reason related to <code>do</code> notation magic that this can't really work?</p>",
        "id": 407341809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702339838
    },
    {
        "content": "<p>For do notation, there are two kinds of pattern-matching <code>let</code>. The first is the one that always succeeds (look for <code>doLet</code> in the source) and it seems to expand to the term <code>let</code>, and term <code>let</code> with a pattern expands to use a <code>match</code>. The second is the one with a failure case (<code>doLetElse</code>), and it expands your <code>let 3 := n | failure</code> to <code>let __discr := n; match __discr with | 3 =&gt; ...continuation... | _ =&gt; failure</code></p>",
        "id": 407343403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702340722
    },
    {
        "content": "<p>Maybe the <code>match</code> isn't generalizing through the <code>__discr</code>? I'm not sure why there's that <code>let</code> there and it's not <code>match n with ...</code></p>",
        "id": 407343455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702340756
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode#doc\">docs#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode</a></p>",
        "id": 407343806,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702340908
    },
    {
        "content": "<p>My guesses are that either it's to be consistent with arrow assign for mutable variables, or it's copy-paste from code for arrow assign and disabling generalization with this extra <code>let</code> isn't intentional.</p>",
        "id": 407344011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702341016
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 407344355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702341173
    },
    {
        "content": "<p>I guess I'll try a patch later this week to see what happens, based on assuming the second option, unless you beat me to it!</p>",
        "id": 407345151,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702341576
    },
    {
        "content": "<p>(testing in <a href=\"https://github.com/leanprover/lean4/pull/3060\">lean4#3060</a>, will clean up with a proper PR description if it succeeds)</p>",
        "id": 407725016,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702473607
    },
    {
        "content": "<p>Just to confirm, everything seems to work with this patch; though it seems no mathlib CI is attempted.</p>",
        "id": 408186607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702646811
    },
    {
        "content": "<p>We had some hickups with the PR testig workflow recently, mostly my fault. If you merge <code>origin/nightly-with-mathlib</code> into your branch and push, it <em>should</em> run the mathlib CI <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 408194358,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1702649741
    },
    {
        "content": "<p>Thanks, it's running now and exposed a latent quote4 bug (but otherwise passes!)</p>",
        "id": 408268288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1702680578
    }
]