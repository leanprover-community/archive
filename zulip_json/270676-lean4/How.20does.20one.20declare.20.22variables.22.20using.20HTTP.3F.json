[
    {
        "content": "<p>So I have this Diagram Chase Database that I'm working on, it's a Django site:<br>\n<a href=\"https://www.youtube.com/watch?v=V1orXCXHJS4\">https://www.youtube.com/watch?v=V1orXCXHJS4</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"V1orXCXHJS4\" href=\"https://www.youtube.com/watch?v=V1orXCXHJS4\"><img src=\"https://uploads.zulipusercontent.net/8d3f72de469b7180a8eb7ac20047866fc9e3c55a/68747470733a2f2f692e7974696d672e636f6d2f76692f56316f72584358484a53342f64656661756c742e6a7067\"></a></div><p>You should know that there is a research team <a href=\"https://coreact.wiki/\">https://coreact.wiki/</a>  working on heavily commutative diagram aware application that supports Coq on the back end.  For various reasons, I've decided upon Lean4.    So the users will be able to draw diagrams and create proofs in the database, but I would like these proofs to usually be backed by Lean4 code.</p>\n<p>So <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  said we can simply connect to our Django site and grab from a diagram service the diagram data, using Lean4 HTTP / socket code itself.  That is instead of trying to communicate with Lean4 in some other way, the Lean4 code itself will do the connecting.</p>\n<p>So my next question is, how do we declare some Lean4 variables using data from the web?  In particular the data is naturally already in an easy enough to understand JSON format  (objects / morphisms / connectivity / label data / styling info).</p>",
        "id": 360118003,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684700672
    },
    {
        "content": "<p>I don't think I made a claim as strong as that. I certainly didn't say anything about HTTP.</p>",
        "id": 360118271,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684700852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Oh, I just filled in the gaps myself :)</p>",
        "id": 360118297,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684700874
    },
    {
        "content": "<p>But you can run lean with the json file as a command line argument</p>",
        "id": 360118368,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684700899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I have to do some format decoding first to turn it into anything</p>",
        "id": 360118392,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684700924
    },
    {
        "content": "<p>I don't see why you wouldn't be able to write your json to a file</p>",
        "id": 360118782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684701129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>   It goes User drawing =&gt; (Quiver) JSON format =&gt; DB =&gt; (Quiver) JSON format =&gt; HTTP connection =&gt; Lean4 HTTP Client =&gt; Lean4 Declarations (hopefully).  Or that is the mental model currently</p>",
        "id": 360118859,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684701221
    },
    {
        "content": "<p>So I get JSON (just keeping the same format) from the server, and then decode it with Lean?  Or should the Django service produce Lean4 code and somehow we inject it on the client's code file?</p>",
        "id": 360119030,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684701334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  Are you saying the server could create a .lean file from the Json?  And then we import it?  And the user shouldn't edit the imported, generated file?</p>",
        "id": 360119146,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684701425
    },
    {
        "content": "<p>I don't understand your data model here, or which parts of your system are running on your server and which are running on a users local machine</p>",
        "id": 360119198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684701472
    },
    {
        "content": "<p>Are your users running lean, or are you running it within your server?</p>",
        "id": 360119454,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684701631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> It might be both, but at least the first version will have ability for users to download the proof for example.   But I would also like live editing, so that creating an arrow creates an arrow in Lean4.  I don't know how to do the live editing part.   So in answer to you, they will be running Lean4 (the clients), and so we want to remotely grab the definition of the arrows.  Is it possible?</p>",
        "id": 360119752,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684701849
    },
    {
        "content": "<p>In other words the source the data is the database, but we interact with the database using Django code, and so the data can come in whatever form we need from a Django view (essentially an HTTP api point).</p>",
        "id": 360119835,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684701932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Any ideas ?</p>",
        "id": 360120065,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684702109
    },
    {
        "content": "<p>Is your intent that people use your tool from within an existing lean project?</p>",
        "id": 360120286,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684702284
    },
    {
        "content": "<p>Well, all proofs are going to be hosted on our site, but it's kind of part of Lean4 too, because of course we'll have proofs in there that are even already in mathlib.  My hope is to promote Lean4, and also for lean4 community to use my tool as a visual diagram chaser, where possible - it won't do everything for you - it's still high code i.e.</p>",
        "id": 360120618,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684702499
    },
    {
        "content": "<p>The point is to have a browseable database of proofs in a format that can teach you how the proof works, but these proofs are for diagram / arrow theoretic questions mainly</p>",
        "id": 360120737,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684702573
    },
    {
        "content": "<p>The users will be able to for example functor a diagram completely in the database, but that operation also has an associated Lean4 proof.</p>",
        "id": 360120837,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684702641
    },
    {
        "content": "<p>So they only usually go into Lean4 when there is something that the drawing tools / database can't handle.   But you could go into the Lean4 any time really.</p>",
        "id": 360120991,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684702748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> How do i import a sibling .lean file?</p>",
        "id": 360124283,
        "sender_full_name": "Daniel Donnelly",
        "timestamp": 1684705035
    }
]