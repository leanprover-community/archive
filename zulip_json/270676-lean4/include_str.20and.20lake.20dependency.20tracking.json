[
    {
        "content": "<p>I see that mathlib defines an <code>include_str</code> macro. Upon first glance it seems that lake will be unaware of that dependency, and may not recompile build products when (only) the included file change changes – is that right? Or is there some magic behind the scenes where <code>lake</code> will know about this dependency?</p>\n<p>Is that something that we should improve at some point?</p>\n<p>I like that usually, the dependency graph of lean is rather straight forward to determine, just by parsing the initial bits of the files. This is a good kind of simplicity.</p>\n<p>If we want to stick to that, it would require that <code>include_str</code> isn’t just arbitrary IO happening at elab time, but that all imported files (lean or text) are included in the header where the build tool can find them. This might suggest a top-level <code>import $ident : ByteArray := $filepath</code> command that must be part of the imports, to allow you to import not just <code>.lean</code> files. Maybe even extensible to other formats – importing a <code>.json</code> file as data can be very useful as well (TypeScript allows that, for example.)</p>",
        "id": 387426122,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056083
    },
    {
        "content": "<p>lake has no idea about this dependency</p>",
        "id": 387426195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056134
    },
    {
        "content": "<p>I've seen that used only to include javascript code for widgets.</p>",
        "id": 387426257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693056191
    },
    {
        "content": "<p>Another case where lake should really be made aware of the dependency is <code>Std.Util.Pickle</code> and its use for the library_search discrimination tree</p>",
        "id": 387426269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056202
    },
    {
        "content": "<p>One way to handle this kind of thing would be additional directives in the header, like <code>export</code> or <code>import \"file.foo\"</code></p>",
        "id": 387426362,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056259
    },
    {
        "content": "<p>they have to be in the header and not just randomly in lean code because lake parses the header to determine the dependency structure before elaboration has started</p>",
        "id": 387426385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056295
    },
    {
        "content": "<p>Right, that’s my suggestion as well</p>",
        "id": 387426400,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056305
    },
    {
        "content": "<p>I could imagine something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Some.Lean.Module</span>\n<span class=\"kn\">import</span> <span class=\"n\">widgetCode</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"./widget.js\"</span>\n<span class=\"kn\">import</span> <span class=\"n\">favIcon</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span> <span class=\"o\">:=</span> <span class=\"s2\">\"./icon.png\"</span>\n</code></pre></div>\n<p><code>lake</code> woudn’t care about the name for the imported thing, nor its type.</p>",
        "id": 387426511,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056405
    },
    {
        "content": "<p>I don't think it should be specifically <code>import foo : ByteArray := \"bla.png\"</code> because that's not very extensible, that's just <code>include_str</code> literally</p>",
        "id": 387426542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056440
    },
    {
        "content": "<p>I would prefer an option that decouples the design of this feature (to be consumed by lake) from the actual processing (which could be whatever user code)</p>",
        "id": 387426566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056472
    },
    {
        "content": "<p>So you’d say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Some.Lean.Module</span>\n<span class=\"n\">imports</span> <span class=\"s2\">\"./widget.js\"</span>\n</code></pre></div>\n<p>to just declare the dependency, and then later, in the body, use <code>import_str \"./widget.js\"</code>?</p>",
        "id": 387426638,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056515
    },
    {
        "content": "<p>yes</p>",
        "id": 387426643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056521
    },
    {
        "content": "<p>Would <code>import_str</code> fail if it wasn’t declared? and won’t people be annoyed by having to write the file name twice?<br>\nAh, but I see what you mean with “not extensible”, maybe you want to do elab-type processing of the file content before turning it into a lean value.</p>",
        "id": 387426715,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056602
    },
    {
        "content": "<p>because it might not be <code>import_str</code>, it could also be <code>initialize foo &lt;- IO.readFile \"./widget.js\"</code> or <code>initialize foo &lt;- unpickle \"./widget.js\"</code></p>",
        "id": 387426766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056613
    },
    {
        "content": "<p>No it wouldn't fail, it would just not get dependency tracked as today if you didn't declare it</p>",
        "id": 387426800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056654
    },
    {
        "content": "<p>we could have a linter to try to detect this but it's pretty hard to reliably determine</p>",
        "id": 387426843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056692
    },
    {
        "content": "<p>I’d be inclined to forbid it; it can be really bad to have unreliable recompilation.</p>",
        "id": 387426887,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056723
    },
    {
        "content": "<p>That's really not an option with the design of lean</p>",
        "id": 387426926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056739
    },
    {
        "content": "<p>elaboration is not sandboxed</p>",
        "id": 387426933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056749
    },
    {
        "content": "<p>For sure, it's not recommended, but it sounds pretty sci-fi to actually prevent it</p>",
        "id": 387426973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056782
    },
    {
        "content": "<p>besides, users might not even be using lake or the dependency management might not be relevant</p>",
        "id": 387427012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056821
    },
    {
        "content": "<p>Fair enough. Maybe I should say “not support” then, i.e. if you do and it breaks, you get to keep the pieces.</p>",
        "id": 387427020,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693056829
    },
    {
        "content": "<p>like if they are just playing around with <code>#eval</code></p>",
        "id": 387427021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693056830
    },
    {
        "content": "<p>We could still improve <code>include_str</code> so that it checks the file has been declared.</p>",
        "id": 387431444,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693060493
    },
    {
        "content": "<p>If you are okay declaring the dependency manually, you can still achieve this in current Lake by adding the included file as an <code>inputFile</code> target to the library 's <code>extraDepTargets</code>.</p>",
        "id": 387535636,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693147145
    },
    {
        "content": "<p>It's good to know this is already possible, but this is happening even further away from the use site, so I think we should still aim for the above mechanism.</p>",
        "id": 387537320,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693148559
    },
    {
        "content": "<p>If the library’s <code>extraDepTargets</code>, will it add it as a dependency to all files of that library?</p>",
        "id": 387537428,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693148662
    },
    {
        "content": "<p>Yes. :(</p>",
        "id": 387545299,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693155479
    },
    {
        "content": "<p>yeah, that's not really a solution, what we want is a way to declare that individual files in a lib have specific additional dependencies (or outputs)</p>",
        "id": 387561274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693171619
    },
    {
        "content": "<p>lake's architecture seems sufficiently flexible that this should be possible via some kind of declaration in the lakefile, but like Patrick says it would be much preferable for the declaration to go in the file itself</p>",
        "id": 387561365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693171727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/include_str.20and.20lake.20dependency.20tracking/near/387426715\">said</a>:</p>\n<blockquote>\n<p>Would <code>import_str</code> fail if it wasn’t declared? and won’t people be annoyed by having to write the file name twice?<br>\nAh, but I see what you mean with “not extensible”, maybe you want to do elab-type processing of the file content before turning it into a lean value.</p>\n</blockquote>\n<p>We could have the <code>imports</code> statement introduce a <code>FileToken</code> into scope, and change <code>include_str</code> to accept that token instead of a plain filename</p>",
        "id": 393152831,
        "sender_full_name": "Chris Wong",
        "timestamp": 1695698248
    }
]