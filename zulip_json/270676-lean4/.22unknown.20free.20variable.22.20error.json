[
    {
        "content": "<p>Lean fails on the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Test</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mk_arrow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">x.fst</span> <span class=\"bp\">→</span> <span class=\"n\">x.snd</span>\n\n<span class=\"c1\">-- Error: \"unknown free variable [anonymous]\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk_arrows</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.map</span> <span class=\"n\">mk_arrow</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Test</span>\n</code></pre></div>\n<p>Could someone explain me what this error (\"unknown free variable [anonymous]\") means?</p>",
        "id": 368903032,
        "sender_full_name": "Son Ho",
        "timestamp": 1687528015
    },
    {
        "content": "<p>On Ubuntu that code gives me a panic!</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Lean (version 4.0.0-nightly-2023-06-07, commit d5348dfac847, Release)\nPANIC at _private.Lean.Compiler.LCNF.CompilerM.0.Lean.Compiler.LCNF.normFVarImp Lean.Compiler.LCNF.CompilerM:236:6: invalid LCNF substitution of free variable with expression fun (x : Prod.{1, 1} Type Type) =&gt; lcErased -&gt; lcErased\nbacktrace:\n/home/buzzard/.elan/toolchains/leanprover--lean4---nightly-2023-06-07/bin/../lib/lean/libleanshared.so(lean_panic_fn+0x9e)[0x7f00e60b993e]\n...\n</code></pre></div>",
        "id": 368908025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687528970
    },
    {
        "content": "<p>Already this panics for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk_arrows</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.fst</span> <span class=\"bp\">→</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 368909682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687529272
    },
    {
        "content": "<p>I'm also on Ubuntu, with this version of Lean: Lean (version 4.0.0-nightly-2023-05-31, commit 9ec9ea61a4eb, Release)</p>",
        "id": 368909854,
        "sender_full_name": "Son Ho",
        "timestamp": 1687529310
    },
    {
        "content": "<p>I don't think <code>(Type × Type)</code> makes sense, there is an unknown universe there. Unless it's automatically <code>Type 1</code>?</p>",
        "id": 368912641,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1687529836
    },
    {
        "content": "<p>Yes,  I think<code>Type</code> is <code>Type 1</code>. Just to make sure, I changed the definitions to use <code>Type 1</code> (the error is still there):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk_arrow</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">x.fst</span> <span class=\"bp\">→</span> <span class=\"n\">x.snd</span>\n\n<span class=\"c1\">-- Error: \"unknown free variable [anonymous]\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk_arrows</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"mi\">1</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">x.map</span> <span class=\"n\">mk_arrow</span>\n</code></pre></div>",
        "id": 368915330,
        "sender_full_name": "Son Ho",
        "timestamp": 1687530363
    },
    {
        "content": "<p>No, I meant that you can't have a <code>Prod</code> of Type. <code>Type</code> is <code>Type 0</code></p>",
        "id": 368915597,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1687530418
    },
    {
        "content": "<p>Oh yes indeed, <code>Type</code> is <code>Type 0</code>. But when I print <code>Prod</code> I see this type, so I don't think there is an issue here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Prod.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 368916810,
        "sender_full_name": "Son Ho",
        "timestamp": 1687530633
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">mk_arrows</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">×</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">xs.map</span> <span class=\"n\">mk_arrow</span>\n</code></pre></div>",
        "id": 368919130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687531076
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 368919432,
        "sender_full_name": "Son Ho",
        "timestamp": 1687531117
    },
    {
        "content": "<p>Just to clarify though: panics should never happen and someone should open an issue, right? Sorry for not knowing the basics.</p>",
        "id": 368920270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687531252
    },
    {
        "content": "<p>This is also my understanding of panics: let me open an issue</p>",
        "id": 368920593,
        "sender_full_name": "Son Ho",
        "timestamp": 1687531313
    },
    {
        "content": "<p>Can you post the issue here? I'll fix it in an hour or so</p>",
        "id": 368933016,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1687533426
    },
    {
        "content": "<p>Sure: <a href=\"https://github.com/leanprover/lean4/issues/2285\">https://github.com/leanprover/lean4/issues/2285</a></p>",
        "id": 368933107,
        "sender_full_name": "Son Ho",
        "timestamp": 1687533443
    },
    {
        "content": "<p>Well, attempt to fix it :D</p>",
        "id": 368933169,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1687533453
    }
]