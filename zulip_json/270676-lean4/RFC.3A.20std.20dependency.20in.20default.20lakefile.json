[
    {
        "content": "<blockquote>\n<p>EDIT: this thread is a discussion related to <a href=\"https://github.com/leanprover/lean4/issues/2988\">(RFC) issue 2988</a>. The original topic was documenting the syntax for lakefile-dependencies in the default lakefile (from <code>lake new</code>/<code>lake init</code>), until <span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> brought up that the default lakefile should probably depend on std, as that's what most people want.</p>\n</blockquote>\n<p>I think it'd be nice if the default lakefile gave basic information about adding dependencies, especially for newcomers. Something <a href=\"https://github.com/leanprover/lean4/compare/master...AdrienChampion:lean4:lake_lakefile_dep_doc\">like this</a> maybe, which adds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- add dependencies here, for instance</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- ```lean</span>\n<span class=\"c1\">-- require mathlib from git</span>\n<span class=\"c1\">--   \"https://github.com/leanprover-community/mathlib4.git\" @ \"main\"</span>\n<span class=\"c1\">-- ```</span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- for more see &lt;https://github.com/leanprover/lean4/tree/master/src/lake#adding-dependencies&gt;.</span>\n</code></pre></div>\n<p>Probably a bit overkill, the link might be enough.<br>\nWould the team welcome a PR on this?</p>",
        "id": 404581703,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701164167
    },
    {
        "content": "<p>Also, the link I added points directly to lake's readme on the lean4 repo, if there is a more polished version somewhere that would be more appropriate do let me know</p>",
        "id": 404581718,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701164173
    },
    {
        "content": "<p>I'd be in favour. I like configuration files containing nothing but comments. :-)</p>",
        "id": 404625880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701174949
    },
    {
        "content": "<p>(Be careful of your example though; <code>mathlib4</code> uses <code>master</code> not <code>main</code>.)</p>",
        "id": 404625969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701174968
    },
    {
        "content": "<p>Can you also include an example illustrating a local dependency?</p>",
        "id": 404626084,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1701175011
    },
    {
        "content": "<p>I can and kinda wanted to honestly, but I was trying to keep the size under control</p>",
        "id": 404626186,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701175044
    },
    {
        "content": "<p>Though, if we put this doc at the very end of the file (I'm assuming we can put deps there, can we?) then it's probably fine if it's a bit long for the sake of clarity</p>",
        "id": 404626256,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701175076
    },
    {
        "content": "<p>I'd suggest <code>/-</code> comments so that it's a bit easier for the user to copy working code</p>",
        "id": 404649092,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701182276
    },
    {
        "content": "<p>I also don't think we usually wrap the command in that style, which might be relevant for anyone doing dumb string parsing of the lakefile</p>",
        "id": 404649254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701182319
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404649092\">said</a>:</p>\n<blockquote>\n<p>I'd suggest <code>/-</code> comments so that it's a bit easier for the user to copy working code</p>\n</blockquote>\n<p>Well the current doc uses <code>--</code> even for multiline (see below), and also <code>--</code> comments are how <code>Cmd</code>+<code>/</code> (de)comments bits of code, so I'm not sure one would really copy/paste the commented code, just select both lines and <code>Cmd</code>+<code>/</code> (and then copy/paste if they want)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">bf</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"c1\">-- Enables the use of the Lean interpreter by the executable (e.g.,</span>\n  <span class=\"c1\">-- `runFrontend`) at the expense of increased binary size on Linux.</span>\n  <span class=\"c1\">-- Remove this line if you do not need such functionality.</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 404651131,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701182874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404649254\">said</a>:</p>\n<blockquote>\n<p>I also don't think we usually wrap the command in that style, which might be relevant for anyone doing dumb string parsing of the lakefile</p>\n</blockquote>\n<p>I'm not sure what the usual way is, but core sure features triple-backtick blocks (though not always with the <code>lean</code> language specifier). Quite a bit of them</p>\n<p>Markdown does allow to 4-space-indent blocks of code to avoid triple-backtick I think, is that what the \"usual way\" is?</p>",
        "id": 404651853,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701183066
    },
    {
        "content": "<p>I'm fine with changing either of the things you pointed by the way, I was just explaining the rationale behind my version</p>",
        "id": 404652553,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701183277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404626084\">said</a>:</p>\n<blockquote>\n<p>Can you also include an example illustrating a local dependency?</p>\n</blockquote>\n<p>I added one, fixed <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>'s note on <code>master</code>/<code>main</code>, and move the whole thing to the end of the file. Seems to me like it flows better that way</p>\n<ul>\n<li><a href=\"https://github.com/AdrienChampion/lean4/blob/f1593596f7569c37e520bf1ed412f75f0c8e4fa5/src/lake/Lake/CLI/Init.lean#L64-L75\">link</a></li>\n</ul>",
        "id": 404655630,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701184083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404651131\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404649092\">said</a>:</p>\n<blockquote>\n<p>I'd suggest <code>/-</code> comments so that it's a bit easier for the user to copy working code</p>\n</blockquote>\n<p>Well the current doc uses <code>--</code> even for multiline (see below), and also <code>--</code> comments are how <code>Cmd</code>+<code>/</code> (de)comments bits of code, so I'm not sure one would really copy/paste the commented code, just select both lines and <code>Cmd</code>+<code>/</code> (and then copy/paste if they want)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">bf</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"c1\">-- Enables the use of the Lean interpreter by the executable (e.g.,</span>\n  <span class=\"c1\">-- `runFrontend`) at the expense of increased binary size on Linux.</span>\n  <span class=\"c1\">-- Remove this line if you do not need such functionality.</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>For my two cents, I agree with Eric. When it comes to <code>--</code> and <code>/- ... -/</code>, there is threshold were it feels appropriate to switch from one to the other (for me, generally ~3 lines). This comment happens to just be under it, so it uses <code>--</code>. Inversely, the suggested comment is much longer, so it should use <code>/- ... -/</code>.</p>",
        "id": 404668602,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701187801
    },
    {
        "content": "<p>Makes sense, thanks <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Do you have thoughts on examples being in triple-backtick blocks?</p>",
        "id": 404668901,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701187903
    },
    {
        "content": "<p>Another comment that has popped up is that it is likely we likely want to add a <code>std</code> dependency to the default template, which may solve this issue. That is, the addition could be this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">Specify package dependencies here.</span>\n<span class=\"cm\">For more information, see [Adding Dependencies][1] in the Lake README.</span>\n\n<span class=\"cm\">[1]:  https://github.com/leanprover/lean4/tree/master/src/lake#adding-dependencies</span>\n<span class=\"cm\">-/</span>\n<span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover/std4.git\"</span> <span class=\"bp\">@</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"v{Lean.versionString}\"</span>\n</code></pre></div>",
        "id": 404669474,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701188097
    },
    {
        "content": "<p>I would like that myself, though for beginner it means the default lake project does not <code>lake build</code> as you have to <code>lake update</code> first, right?</p>\n<p>Do you think there is a good enough consensus on this for us to go straight to this version?</p>",
        "id": 404669780,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701188200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404668901\">said</a>:</p>\n<blockquote>\n<p>Do you have thoughts on examples being in triple-backtick blocks?</p>\n</blockquote>\n<p>The style looks good to me. One caveat is that docstrings should not generally have the <code>lean</code> specifier), as the highlighting only occurs in hovers if it does not have one (at least currently). However, that does not really relevant here,  since this documentation will not appear in a hover.</p>",
        "id": 404669802,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701188208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404669780\">said</a>:</p>\n<blockquote>\n<p>I would like that myself, though for beginner it means the default lake project does not <code>lake build</code> as you have to <code>lake update</code> first, right?</p>\n</blockquote>\n<p>Not anymore, Lake will not perform an update if the manifest is missing (e.g.., for a new project).</p>",
        "id": 404670124,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701188321
    },
    {
        "content": "<p>Oh right, forgot I actually noticed this!</p>",
        "id": 404670214,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701188354
    },
    {
        "content": "<p>So we should probably just go for the version you propose then</p>",
        "id": 404670252,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701188368
    },
    {
        "content": "<p>(Though std is on <code>leanprover</code> not <code>leanprover-community</code></p>",
        "id": 404670930,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701188577
    },
    {
        "content": "<p>I still get an error that the manifest's missing, am I doing something wrong?</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>problem</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>❯ elan which lake\n[...]/.elan/toolchains/stable/bin/lake\n\n❯ lake --version\nLake version 5.0.0-0d70514 (Lean version 4.2.0)\n\n❯ lake build\nerror: missing manifest; use `lake update` to generate one\n\n❯ bat lean-toolchain\n───────┬─────────────────────────\n       │ File: lean-toolchain\n───────┼─────────────────────────\n   1   │ stable\n───────┴─────────────────────────\n\n❯ bat lakefile.lean\n───────┬─────────────────────────\n       │ File: lakefile.lean\n───────┼─────────────────────────\n   1   │ import Lake\n   2   │ open Lake DSL\n   3   │\n   4   │ package «testDefaultLakefile» where\n   5   │   -- add package configuration options here\n   6   │\n   7   │ lean_lib «TestDefaultLakefile» where\n   8   │   -- add library configuration options here\n   9   │\n  10   │ @[default_target]\n  11   │ lean_exe «testdefaultlakefile» where\n  12   │   root := `Main\n  13   │   -- Enables the use of the Lean interpreter by the executable (e.g.,\n  14   │   -- `runFrontend`) at the expense of increased binary size on Linux.\n  15   │   -- Remove this line if you do not need such functionality.\n  16   │   supportInterpreter := true\n  17   │\n  18   │ /-\n  19   │ Specify package dependencies here.\n  20   │ For more information, see [Adding Dependencies][1] in the Lake README.\n  21   │\n  22   │ [1]:  https://github.com/leanprover/lean4/tree/master/src/lake#adding-dependencies\n  23   │ -/\n  24   │ require std from git\n  25   │   &quot;https://github.com/leanprover/std4.git&quot; @ s!&quot;v{Lean.versionString}&quot;\n───────┴─────────────────────────\n</code></pre></div>\n</div></div>",
        "id": 404672779,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701189130
    },
    {
        "content": "<p>There is another reason to prefer <code>--</code> comments in an annotated lakefile or other config file, which is that you want the ability to selectively uncomment sections. If the whole thing is block commented this is more work</p>",
        "id": 404736502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701213540
    },
    {
        "content": "<p>(also the flipside of what was mentioned about vscode's Ctrl-/ shortcut is that it doesn't work to remove block comments, it only works with the singleline style)</p>",
        "id": 404736621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701213608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404651131\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404649092\">said</a>:</p>\n<blockquote>\n<p>I'd suggest <code>/-</code> comments so that it's a bit easier for the user to copy working code</p>\n</blockquote>\n<p>Well the current doc uses <code>--</code> even for multiline (see below), and also <code>--</code> comments are how <code>Cmd</code>+<code>/</code> (de)comments bits of code, so I'm not sure one would really copy/paste the commented code, just select both lines and <code>Cmd</code>+<code>/</code> (and then copy/paste if they want)</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">bf</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"c1\">-- Enables the use of the Lean interpreter by the executable (e.g.,</span>\n  <span class=\"c1\">-- `runFrontend`) at the expense of increased binary size on Linux.</span>\n  <span class=\"c1\">-- Remove this line if you do not need such functionality.</span>\n  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> sounds familiar!</p>",
        "id": 404736888,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701213765
    },
    {
        "content": "<p>Though I do understand one may prefer multi-line visually. I come from Rust so I go for single-line by default, it’s just more convenient and makes writing markdown in docs make more sense as indentation has semantics</p>",
        "id": 404737318,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701213993
    },
    {
        "content": "<p>I think it's great that the default template lakefile will include Std.</p>\n<p>We really want to push that all Lean users will not need to think about including Std, and it will only be people doing particularly esoteric or exciting things that need to remove the Std dependency.</p>",
        "id": 404738745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701214734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.3A.20dependency.20pointers.20in.20default.20lakefile/near/404672779\">said</a>:</p>\n<blockquote>\n<p>I still get an error that the manifest's missing, am I doing something wrong?</p>\n</blockquote>\n<p>The automatic update change landed in <a href=\"https://github.com/leanprover/lean4/releases/tag/v4.3.0-rc1\"><code>v4.3.0-rc1</code></a>, so your <code>v4.2.0</code> is too old. The <code>v4.3.0</code> stable should be out in a few days, so there should not be a long wait!</p>",
        "id": 404740265,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701215618
    },
    {
        "content": "<p>Alright I’ll wait until then then</p>",
        "id": 404740354,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701215658
    },
    {
        "content": "<p>The only significant wrinkle with turning the current suggestion into a PR is that the tests in the Lean core are not suppose to download packages and thus this change will break all the <code>init</code> tests. Therefore, it may be necessary to some option (like an <code>LAKE_INIT_NO_DEPS</code> environment variable) for <code>new/init</code> uses in core.</p>",
        "id": 404740794,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701215908
    },
    {
        "content": "<p>I think that's fine, secret environment variables like that are a reasonable way to handle nonstandard setups in tests and such</p>",
        "id": 404742187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701216531
    },
    {
        "content": "<p>(I think you have a similar need for that for the <code>lake init foo math</code> tests, which currently use <code>sed</code> to delete the mathlib import IIRC)</p>",
        "id": 404742219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701216552
    },
    {
        "content": "<p>And here I was thinking this would be the easiest PR ever</p>",
        "id": 404742535,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701216725
    },
    {
        "content": "<p>one does not simply PR to lean4</p>",
        "id": 404742777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701216885
    },
    {
        "content": "<p>Which is why I tried to PR lake instead but it ended up backfiring</p>",
        "id": 404742972,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701216987
    },
    {
        "content": "<p>Anyway, <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> it seems like you like the env-var approach. It goes beyond the (very modest, <strong>on purpose</strong>) scope of my original PR embryo. Would this warrant a proper discussion through a RFC or something?</p>",
        "id": 404743673,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701217363
    },
    {
        "content": "<p>Let Mac implement the env var stuff</p>",
        "id": 404743709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701217384
    },
    {
        "content": "<p>I strongly second this plan, was not looking forward to it</p>",
        "id": 404743760,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701217421
    },
    {
        "content": "<p>The sad part is that I will likely not be working much on maintaining Lake these next few weeks (as my focus is currently back on Reservoir), so leaving it up to me will mean this may get delayed a while.</p>",
        "id": 404744012,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701217559
    },
    {
        "content": "<p>Also, in that case, making an issue would be a good way to keep track of when this is eventually implemented.</p>",
        "id": 404744131,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701217605
    },
    {
        "content": "<p>Renamed the thread and opened an RFC issue:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4/issues/2988\">https://github.com/leanprover/lean4/issues/2988</a></li>\n</ul>\n<p>It's my first time doing this, do let me know if I messed up</p>",
        "id": 404842746,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701256906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think there should probably be an issue specific to the env-var business. I could create one I guess, but I'm not familiar with the topic so writing an accurate, technical description is going to be difficult. <br>\nAny chance one of you guys could (tell someone qualifed to) do it?</p>",
        "id": 404843526,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701257228
    },
    {
        "content": "<p>This is an issue internal to the lake project maintenance, so it's not really RFC material. It's up to Mac to handle this in the way he sees fit</p>",
        "id": 404843855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701257355
    },
    {
        "content": "<p>You mean the issue I opened should not be a RFC? It was that or a bug, I thought RFC was more appropriate</p>",
        "id": 404885631,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701269975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> I think Mario meant the env-bar business should not be an (RFC) issue.</p>",
        "id": 404946712,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701290702
    },
    {
        "content": "<p>Oh, my bad, I thought it was clear I was asking for a regular issue, though I don’t know if “bug” is appropriate and since it’s that or RFC I understand the confusion</p>",
        "id": 404949266,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701291697
    },
    {
        "content": "<p>What I really meant was “somebody who knows about the env-var thingy should write something somewhere to track this aspect in particular”</p>",
        "id": 404949497,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1701291767
    },
    {
        "content": "<p>Since it is an implementation detail, I think the link to this Zulip thread from the RFC issue is sufficient tracking.</p>",
        "id": 404951677,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701292706
    }
]