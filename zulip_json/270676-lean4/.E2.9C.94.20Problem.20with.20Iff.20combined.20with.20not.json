[
    {
        "content": "<p>In the code below I have problems using one of the directions of an <code>Iff</code> term if that direction  is the negation of some term. The code below has no errors, but if you uncomment  the commented-out lines below and comment out the line above them then the <code>apply</code> tactic fails. Concretely, how can I use <code>apply foobar.mpr </code> without needing the detour of defining <code>foobar_mpr</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foobar.mp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foobar.mp</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar_mpr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foobar.mpr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">foobar_mpr</span>\n  <span class=\"c1\">-- apply foobar.mpr -- ERROR in apply : failed to unify</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barfoo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">barfoo.mpr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">barfoo.mpr</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barfoo_mp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">exact</span> <span class=\"n\">barfoo.mp</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">barfoo_mp</span>\n  <span class=\"c1\">-- apply barfoo.mp -- ERROR in apply : failed to unify</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 395451959,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1696709905
    },
    {
        "content": "<p>Not really answer to your question, but note that specifying the implicit parameters like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">foobar</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">barfoo</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>\n</code></pre></div>\n<p>makes it work.</p>",
        "id": 395452628,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696710512
    },
    {
        "content": "<p>This is probably easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barfoo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">barfoo</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 395452679,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696710594
    },
    {
        "content": "<p>Also if you apply the theorem and the hypothesis together, the implicit parameter gets resolved correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">foobar.mpr</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barfoo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">barfoo.mp</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 395452909,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696710820
    },
    {
        "content": "<p>Thank you, that is very helpful.  I'm still a bit confused, though. Why was I able to use <code>apply foobar.mp</code> just fine, but the analogous use of <code>apply foobar.mpr</code> causes a unification failure?</p>",
        "id": 395452977,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1696710866
    },
    {
        "content": "<p>Also it works well outside of tactic mode:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">foobar.mpr</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">foobar.mpr</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">barfoo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">barfoo.mp</span>\n</code></pre></div>",
        "id": 395453039,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696710959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/Problem.20with.20Iff.20combined.20with.20not/near/395453039\">said</a>:</p>\n<blockquote>\n<p>Also it works well outside of tactic mode:</p>\n</blockquote>\n<p>Right! In fact, that is how I ran into this. I was converting a term-style proof into one with tactics and ran into this surprise (for me).</p>",
        "id": 395453164,
        "sender_full_name": "Luis O'Shea",
        "timestamp": 1696711084
    },
    {
        "content": "<p>Note that there is an ambiguity here, other instantiations are possible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">foobar</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">mpr</span>\n</code></pre></div>\n<p>the interesting question is why <code>foobar.mpr</code> sees this and refuses to instantiate while <code>foobar_mpr</code> goes ahead with the <code>p := p</code> instantiation</p>",
        "id": 395453334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696711213
    },
    {
        "content": "<p>as usual, using <code>refine</code> instead of <code>apply</code> fixes the issue</p>",
        "id": 395453400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696711310
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">refine</span> <span class=\"n\">foobar.mpr</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n</code></pre></div>",
        "id": 395453405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696711318
    },
    {
        "content": "<p>[misleading comment]</p>",
        "id": 395453482,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696711387
    },
    {
        "content": "<p>(it is expected that <code>apply Iff.mp</code> works because there is no higher order unification problem there i.e. unifying <code>?p ?x =?= stuff</code>)</p>",
        "id": 395453565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1696711484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242206\">Luis O'Shea</span> has marked this topic as resolved.</p>",
        "id": 395454529,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696712563
    }
]