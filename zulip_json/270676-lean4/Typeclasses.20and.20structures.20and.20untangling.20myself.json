[
    {
        "content": "<p>In something I am doing, I somewhat want to make the following definition.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">ControlBitsLayer</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CBType</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"mi\">0</span> <span class=\"bp\">≃</span> <span class=\"n\">ControlBitsLayer</span> <span class=\"mi\">0</span>\n  <span class=\"n\">weave</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">ControlBitsLayer</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ControlBitsLayer</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cbTypeEquiv</span> <span class=\"o\">[</span><span class=\"n\">CBType</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">CBType</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">m.recOn</span> <span class=\"o\">(</span><span class=\"n\">CBType.zero.trans</span> <span class=\"n\">CBType.zero.symm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">IE</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">CBType.weave</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n    <span class=\"o\">(((</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">prodCongr</span>  <span class=\"o\">((</span><span class=\"n\">Equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">arrowCongr</span> <span class=\"n\">IE</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span>\n      <span class=\"o\">(</span><span class=\"n\">CBType.weave</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Conceptually the idea is that I want to define something for types of a \"class\" CBType, or more properly I suppose I have types parameterised by a natural number, which obey some nice inductive property as illustrated here. I want to do something that only uses this property of them - if I can show such a type has a \"zero\" and a \"weave\", that's enough and I can work with that. And conceptually this means that the types are (parametrically?) equivalent.</p>\n<p>The trouble is, as you can probably tell by this confused explanation, is that I am falling over myself with the meta level of all this. I'm not even certain defining this as a class is the right choice - perhaps defining it as a structure is? Has anyone got any thoughts on how I migh tuntangle my thinking?</p>",
        "id": 402060517,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1699992389
    }
]