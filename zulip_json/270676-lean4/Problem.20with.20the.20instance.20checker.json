[
    {
        "content": "<p>I have a growing project with a few files that defines a few classes and instances. Now I'm starting to get \"failed to synthesize\" errors for obvious instances. For example:</p>\n<blockquote>\n<p>failed to synthesize<br>\n  Pure (EStateM IO.Error IO.RealWorld)<br>\n(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</p>\n</blockquote>\n<p>That is, Lean cannot find an instance of <code>Pure</code> for <code>IO</code> which obviously does exist.</p>\n<p>Do you have any advise of how to solve this, apart from increasing the number of heartbeats. Are there any kind of instances that slows down the instance checker alot? Should I try to make as few instances as possible to not overload the instance checker? Or is there anything else I can do?</p>\n<p>Thanks,<br>\nTage</p>",
        "id": 356032588,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683287866
    },
    {
        "content": "<p>What is the output with <code>set_option trace.Meta.synthInstance true</code> set? Or a MWE?</p>",
        "id": 356034530,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683288306
    },
    {
        "content": "<p>For the code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>I get the output:</p>\n<blockquote>\n<p><span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> 5:22-5:35: error:<br>\nfailed to synthesize<br>\n  Pure IO<br>\n(deterministic) timeout at 'typeclass', maximum number of heartbeats (20000) has been reached (use 'set_option synthInstance.maxHeartbeats &lt;num&gt;' to set the limit)</p>\n<p><span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> 5:22-5:35: information:<br>\n[Meta.synthInstance] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> Pure IO <span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span></p>\n</blockquote>",
        "id": 356036724,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683288846
    },
    {
        "content": "<p>It works fine in the web editor:<br>\n<a href=\"https://lean.math.hhu.de/#code=set_option%20trace.Meta.synthInstance%20true%0Aexample%20%3A%20Pure%20IO%20%3A%3D%20inferInstance%0A\">https://lean.math.hhu.de/#code=set_option%20trace.Meta.synthInstance%20true%0Aexample%20%3A%20Pure%20IO%20%3A%3D%20inferInstance%0A</a><br>\nDo you have some things imported?</p>",
        "id": 356037828,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683289150
    },
    {
        "content": "<p>And which nightly are you using?</p>",
        "id": 356037994,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683289195
    },
    {
        "content": "<p>Yes, I have things imported. And it works in a plain file for me as well. The problem (I think) is that I am working in a larger project and that other instances are considered first so the instance zynthesizer doesn't find the right instance in time. I will try to make a MWE (strip as many files as possible for the error to still exist and then make a link to the repo).</p>",
        "id": 356039315,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683289499
    },
    {
        "content": "<p>You can expand the traces a bit too to drill down into what the synthesiser is doing</p>",
        "id": 356040212,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683289700
    },
    {
        "content": "<p>Thanks, that was helpful! I think I see now what instance is causing the problem. Seems as the instance checker is trying to apply the same instance over and over again:</p>\n<blockquote>\n<p><span aria-label=\"play\" class=\"emoji emoji-25b6\" role=\"img\" title=\"play\">:play:</span> 4:22-4:35: information:<br>\n[Meta.synthInstance] <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> Pure IO ▼<br>\n  [] new goal Pure IO ▶<br>\n  [] ✅ apply @Applicative.toPure to Pure IO ▶<br>\n  [] ✅ apply @Alternative.toApplicative to Applicative IO ▶<br>\n  [] ✅ apply @RunnerExt.instMClass to Alternative IO ▶<br>\n  [] ✅ apply @RunnerExt.lift to RunnerExt Alternative IO ?m.63 ▶<br>\n  [] ✅ apply @RunnerExt.instMClass to RunnerExt Alternative IO ?m.44 ▶<br>\n  [] ✅ apply @RunnerExt.lift to RunnerExt (RunnerExt Alternative IO) ?m.108 ?m.110 ▶<br>\n  [] ✅ apply @RunnerExt.instMClass to RunnerExt (RunnerExt Alternative IO) ?m.44 ?m.86 ▶<br>\n  [] ✅ apply @RunnerExt.lift to RunnerExt (RunnerExt (RunnerExt Alternative IO) ?m.44) ?m.155 ?m.157 ▶<br>\n  [] ✅ apply @RunnerExt.instMClass to RunnerExt (RunnerExt (RunnerExt Alternative IO) ?m.44) ?m.86 ?m.133 ▶<br>\n  [] ✅ apply @RunnerExt.lift to RunnerExt (RunnerExt (RunnerExt (RunnerExt Alternative IO) ?m.44) ?m.86) ?m.202 ?m.204 ▶<br>\n  [] ✅ apply @RunnerExt.instMClass to RunnerExt (RunnerExt (RunnerExt (RunnerExt Alternative IO) ?m.44) ?m.86) ?m.133 ?m.180 ▶<br>\n  [] ✅ apply @RunnerExt.lift to RunnerExt (RunnerExt (RunnerExt (RunnerExt (RunnerExt Alternative IO) ?m.44) ?m.86) ?m.133)<br>\n        ?m.249 ?m.251 ▶</p>\n</blockquote>\n<p>And it continues like that in around 14k lines.</p>",
        "id": 356044539,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683290643
    },
    {
        "content": "<p>There is an art to writing type class instances and you learn it by writing bad instances :)</p>\n<p>You can see that the TC synthesis gets stuck in a loop of applying RunnerExt.instMClass and RunnerExt lift. Can you show us those instances? </p>\n<p>Also do you have relatively new version of lean? There has been a recent change that fixed a common problem that had similar behaviour.</p>",
        "id": 356046664,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683291076
    },
    {
        "content": "<p>Here's my MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">RunnerExt</span> <span class=\"o\">(</span><span class=\"n\">mClass</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n                <span class=\"n\">where</span>\n  <span class=\"n\">instMClass</span> <span class=\"o\">:</span> <span class=\"n\">mClass</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">RunnerExt.instMClass</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Pure</span> <span class=\"n\">IO</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>\n<p>Without the <code>attribute [instance]</code> line, it works, so I guess I will need to remove that.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 356046845,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683291111
    },
    {
        "content": "<p>I'm surprised that it allows you to even mark it as an instance as <code>mClass</code> is not guaranteed to be a class</p>",
        "id": 356047567,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683291224
    },
    {
        "content": "<p>I had nightly 2023-04-07. After updating to 2023-04-20 I am not allowed to mark it as an instance as you said.</p>",
        "id": 356048381,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683291337
    },
    {
        "content": "<p>I am not really sure I need it, but is there any way to mark <code>mClass</code> to be a class? That is, I want <code>mClass</code> to be a class of monads.<br>\nWhat is special about classes as aposed to normal structures?</p>",
        "id": 356049230,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683291500
    },
    {
        "content": "<p>It is not about class vs structure. You can't even mark a function argument to be a structure. I can pass arbitrary lambda function as <code>mClass</code></p>",
        "id": 356050041,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683291647
    },
    {
        "content": "<p>Couple of time I wanted to write a similar code, I always ended up redesigning it. Maybe <code>class RunnerExt (m : Type -&gt; Type) [mClass m] where ...</code> ? But yeah this is not polymorphic over <code>mClass</code> but <code>mClass</code> has to be a concrete class.</p>",
        "id": 356050932,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683291841
    },
    {
        "content": "<p>Thanks!<br>\nAn interesting thing when upgrading Lean was that some other instances I've made doesn't work anymore. This is not the first time I have such instance problems, and perhaps those problems will go away when I've fixed these eronious instances!</p>",
        "id": 356054300,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683292462
    },
    {
        "content": "<p>Try linting your code -- we have linters which try and prevent the user from creating \"bad\" instances. If you do something like <code>import Mathlib.Tactic</code> then <code>#lint</code> at the end of a file will work (maybe the linters are in Std, I don't know exactly where they are)</p>",
        "id": 356054678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683292535
    },
    {
        "content": "<p>This code works though, but it seems to me that <code>mClass</code> doesn't have to be a class/structure in this case either:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">RunnerExt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mClass</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"mi\">1</span>\n  <span class=\"n\">instMClass</span> <span class=\"o\">:</span> <span class=\"n\">mClass</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">RunnerExt.instMClass</span>\n</code></pre></div>\n<p>Is this a bug?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 356055107,
        "sender_full_name": "Tage Johansson",
        "timestamp": 1683292596
    },
    {
        "content": "<p>This all looks like an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem to me, likely related to <a href=\"#narrow/stream/270676-lean4/topic/Associated.20types.20in.20classes/near/350473867\">a previous thread of yours</a></p>",
        "id": 356057020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683292972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"544752\">Tage Johansson</span> <a href=\"#narrow/stream/270676-lean4/topic/Problem.20with.20the.20instance.20checker/near/356049230\">said</a>:</p>\n<blockquote>\n<p>What is special about classes as aposed to normal structures?</p>\n</blockquote>\n<p>One place classes are special is that every argument whose type is a class gets added to the local instance cache. Otherwise such arguments won't be picked up when doing typeclass inference. (The algorithm is basically: look at the argument's type, if it's a pi type peel off all arguments, then see if it's of the form <code>C x y z ...</code>, and then look up to see if the constant <code>C</code> is marked as being a class.)</p>",
        "id": 356066664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683294885
    }
]