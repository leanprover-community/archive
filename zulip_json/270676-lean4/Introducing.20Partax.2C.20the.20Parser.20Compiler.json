[
    {
        "content": "<p>Hello everyone! I have been working on a little library I would like to showcase: <a href=\"https://github.com/tydeu/lean4-partax\">Partax</a>. It is inspired by an old <a href=\"https://gist.github.com/tydeu/718aa65f8a36b9d9e1ab210a66c81b29\">PoC</a> I discussed with with <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>  and <span class=\"user-mention\" data-user-id=\"315434\">@Andr√©s Goens</span> in 2022 that I have since turned into a full library.</p>\n<p>Partax compiles Lean syntax and parser definitions into something else. The \"something else\" is configurable, but the motivating example is a monadic parser (<code>LParse</code>) that does not require a Lean <code>Environment</code>. Thus, with Partax, grammars written in Lean can be compiled down into more elementary parsers for use in projects that do not wish to depend on Lean symbols or metaprogramming code. Currently, Partax can compile all Lean parsers and syntax declarations, but compiling large categories (e.g., <code>term</code>, <code>tactic</code>, or <code>command</code>) can take some time (e.g., a few minutes). Partax's parser can parse everything except for antiquotations and a few unsupported special parsers (e.g., <code>parserOfStack</code>). It is also missing some optimizations (e.g., syntax caching). In practice, this means that it can parse any Lean file that does not use antiquotations or add and then use new syntax.</p>\n<p>Here is an example use of Partax from the README:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Partax</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">compile_parser</span> <span class=\"n\">Lean.Parser.Term.attributes</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">attrs</span>\n<span class=\"k\">#eval</span> <span class=\"n\">attrs.run'</span> <span class=\"s2\">\"@[instance high, inline]\"</span> <span class=\"c1\">-- TSyntax `Lean.Parser.Term.attributes</span>\n\n<span class=\"n\">compile_parser_category</span> <span class=\"n\">prio</span>\n<span class=\"k\">#eval</span> <span class=\"n\">prio.run'</span> <span class=\"s2\">\"default + default\"</span> <span class=\"c1\">-- TSyntax `prio</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span> <span class=\"c1\">-- 2000</span>\n<span class=\"k\">#eval</span> <span class=\"n\">liftMacroM</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">CommandElabM</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"n\">prio.run'</span> <span class=\"s2\">\"default + default\"</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">evalPrio</span> <span class=\"n\">stx</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"n\">e</span>\n</code></pre></div>\n<p>If this looks interesting, give it a try! I happily welcome any bug reports, feature requests, or contributions. Also, the documentation is somewhat sparse, so please feel free to ask for explanations or clarifications.</p>",
        "id": 379967441,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690707213
    }
]