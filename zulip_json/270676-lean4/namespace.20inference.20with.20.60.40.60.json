[
    {
        "content": "<p>Is there way to use namespace inference when referring to a function with <code>@</code>? A syntax like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">.@</span><span class=\"n\">cons</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>that would mean </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">List.cons</span> <span class=\"n\">Nat</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I imagine there isn't as I've tried all the combination of <code>@</code> and <code>.</code> I could think of, but I figured I would also ask.</p>",
        "id": 328291205,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1676567671
    },
    {
        "content": "<p>Would </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>work for your purposes?</p>",
        "id": 328300853,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1676570220
    },
    {
        "content": "<p>Thanks, I hadn't thought of doing that. My purpose was referring to implicit arguments of constructors in pattern matching. This syntax is even nicer than what I imagined because it saves you from all the underscores for the arguments you don't care about.</p>",
        "id": 328320424,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1676576070
    }
]