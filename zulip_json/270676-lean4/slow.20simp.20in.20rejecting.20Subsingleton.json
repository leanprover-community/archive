[
    {
        "content": "<p>Minimized to be std- and mathlib-free. Consider trying to prove that the empty (fin)set is in the univ of a powerset. The simp lemma <code>Fintype.univ_ofSubsingleton</code> tries to fire, and spends a huge amount of time (6 seconds on my machine) struggling to show that, unfortunately, <code>range 2</code> is not a subsingleton. In mathlib, it's even worse, because it then tries to do the same with <code>IsEmpty</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"sd\">/-- There is only one list of an empty type -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">Perm</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">y</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">l₂</span> <span class=\"n\">l₃</span> <span class=\"bp\">→</span> <span class=\"n\">Perm</span> <span class=\"n\">l₁</span> <span class=\"n\">l₃</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" ~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Perm</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Perm.refl</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Perm.nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">Perm.refl</span> <span class=\"n\">xs</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">theorem</span> <span class=\"n\">Perm.symm</span> <span class=\"o\">{</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l₂</span> <span class=\"bp\">~</span> <span class=\"n\">l₁</span> <span class=\"o\">:=</span>\n  <span class=\"n\">p.rec</span>\n    <span class=\"bp\">.</span><span class=\"n\">nil</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r₁</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">r₁</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">r₁</span> <span class=\"n\">r₂</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">r₂</span> <span class=\"n\">r₁</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Perm.eqv</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Equivalence</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Perm.refl</span><span class=\"o\">,</span> <span class=\"n\">Perm.symm</span><span class=\"o\">,</span> <span class=\"n\">Perm.trans</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">isSetoid</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Setoid</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Setoid.mk</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Perm.eqv</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Pairwise</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">Pairwise</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a'</span><span class=\"o\">,</span> <span class=\"n\">Mem</span> <span class=\"n\">a'</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nodup</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">Pairwise</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≠</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sublists</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">arr.size</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n    <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r.push</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l.foldr</span> <span class=\"n\">f</span> <span class=\"bp\">#</span><span class=\"o\">[[]])</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">pmap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"gr\">sorry</span> <span class=\"o\">::</span> <span class=\"n\">pmap</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Sublist</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"bp\">|</span> <span class=\"n\">slnil</span> <span class=\"o\">:</span> <span class=\"n\">Sublist</span> <span class=\"o\">[]</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sublist</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Sublist</span> <span class=\"n\">l₁</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons₂</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Sublist</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">Sublist</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l₂</span><span class=\"o\">)</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &lt;+ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Sublist</span>\n<span class=\"kd\">def</span> <span class=\"n\">Subperm</span> <span class=\"o\">(</span><span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">~</span> <span class=\"n\">l₁</span><span class=\"o\">),</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;+</span> <span class=\"n\">l₂</span>\n\n<span class=\"kd\">infixl</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"s2\">\" &lt;+~ \"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Subperm</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Quot</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[elab_as_elim]</span>\n<span class=\"kn\">protected</span> <span class=\"n\">abbrev</span> <span class=\"n\">Quot.recOn'</span>\n    <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Quot</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">motive</span> <span class=\"o\">(</span><span class=\"n\">Quot.mk</span> <span class=\"n\">r</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Eq.ndrec</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Quot.sound</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n <span class=\"n\">q.rec</span> <span class=\"n\">f</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Quot</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Multiset.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quotient</span> <span class=\"o\">(</span><span class=\"n\">List.isSetoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Multiset</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ofList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.mk</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">ofList</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Nodup</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.liftOn</span> <span class=\"n\">s</span> <span class=\"n\">List.Nodup</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">propext</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.range</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">powersetAux</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">List.sublists</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">ofList</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.liftOn</span> <span class=\"n\">s</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">powersetAux</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)))</span>\n    <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Quot.sound</span> <span class=\"gr\">sorry</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Mem</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.liftOn</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">propext</span> <span class=\"bp\">&lt;|</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Mem</span><span class=\"o\">⟩</span>\n\n<span class=\"n\">nonrec</span> <span class=\"kd\">def</span> <span class=\"n\">pmap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Multiset</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Quot.recOn'</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">l</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofList</span> <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"n\">H</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"o\">(</span><span class=\"n\">pp</span> <span class=\"o\">:</span> <span class=\"n\">l₁</span> <span class=\"bp\">~</span> <span class=\"n\">l₂</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">funext</span> <span class=\"k\">fun</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">List.Mem</span> <span class=\"n\">a</span> <span class=\"n\">l₂</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">List.Mem</span> <span class=\"n\">a</span> <span class=\"n\">l₁</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">H₂</span> <span class=\"n\">a</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s₂</span> <span class=\"n\">e</span> <span class=\"n\">H</span><span class=\"o\">},</span> <span class=\"bp\">@</span><span class=\"n\">Eq.ndrec</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">l₁</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Multiset</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ofList</span> <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"n\">H₁</span><span class=\"o\">))</span> <span class=\"n\">s₂</span> <span class=\"n\">e</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"n\">ofList</span> <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">f</span> <span class=\"n\">l₁</span> <span class=\"n\">H₁</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">intro</span> <span class=\"n\">s₂</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"bp\">;</span> <span class=\"n\">subst</span> <span class=\"n\">e</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n      <span class=\"n\">this.trans</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Quot.sound</span> <span class=\"bp\">&lt;|</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">Le</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">Quotient.liftOn₂</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">&lt;+~</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">p₁</span> <span class=\"n\">p₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">propext</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">Multiset.Le</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">attach</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pmap</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">s</span> <span class=\"k\">fun</span> <span class=\"n\">_a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Multiset</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">α</span>\n  <span class=\"n\">nodup</span> <span class=\"o\">:</span> <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">val</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s.1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">LE</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">a</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Multiset.range</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">powerset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨(</span><span class=\"n\">s.1.powerset.pmap</span> <span class=\"n\">Finset.mk</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">_t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">attach</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">Multiset.attach</span> <span class=\"n\">s.1</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n\n\n<span class=\"kn\">section</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Function</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">elems</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Fintype.elems</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fintype</span>\n\n<span class=\"sd\">/-- Any subsingleton type with a witness is a fintype (with one term). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofSubsingleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"c1\">-- ⟨{a}, fun _ =&gt; Finset.mem_singleton.2 (Subsingleton.elim _ _)⟩</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">Quotient.mk'</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">univ_ofSubsingleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Finset.univ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ofSubsingleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">Quotient.mk'</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span>\n  <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fintype</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Finset.fintypeCoeSort</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">s.attach</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Finset</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">Quotient.mk'</span> <span class=\"o\">[],</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">⟨⟨</span><span class=\"n\">Quotient.mk'</span> <span class=\"o\">[],</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span>\n    <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"o\">((</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">powerset</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">maxSteps</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">maxDischargeDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">memoize</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">etaStruct</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"n\">iota</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">autoUnfold</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"o\">})</span> <span class=\"c1\">-- if this line, Fintype.univ_ofSubsingleton fires, and is slow (6 s on my computer)</span>\n  <span class=\"c1\">-- }) [-Fintype.univ_ofSubsingleton]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 355906276,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1683245026
    },
    {
        "content": "<p>This is the unification step that is slow:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">7</span><span class=\"bp\">.</span><span class=\"mi\">749492</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"bp\">❌</span> <span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">List.pmap</span> <span class=\"n\">Subtype.mk</span>\n                                          <span class=\"o\">(</span><span class=\"n\">List.pmap</span> <span class=\"n\">Finset.mk</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powersetAux</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n                                            <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                              <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_t</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span> <span class=\"n\">Nat</span><span class=\"o\">),</span>\n                                                <span class=\"n\">Multiset.Mem</span> <span class=\"n\">_t</span> <span class=\"o\">(</span><span class=\"n\">Multiset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n                                                  <span class=\"n\">Multiset.Nodup</span> <span class=\"n\">_t</span><span class=\"o\">))</span>\n                                          <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                                            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">),</span>\n                                              <span class=\"n\">Multiset.Mem</span> <span class=\"n\">_a</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">→</span>\n                                                <span class=\"n\">Multiset.Mem</span> <span class=\"n\">_a</span> <span class=\"o\">(</span><span class=\"n\">Finset.powerset</span> <span class=\"o\">(</span><span class=\"n\">Finset.range</span> <span class=\"mi\">2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 355918821,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1683252053
    },
    {
        "content": "<p>Congratulations on finally minimising this monster!</p>",
        "id": 355961168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683270001
    },
    {
        "content": "<p>Even smaller, with no references to any quotients, only lists. Still 1.5 s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">elems</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n  <span class=\"n\">complete</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">elems</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">sublists</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.foldl</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">arr.size</span> <span class=\"bp\">*</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n    <span class=\"k\">fun</span> <span class=\"n\">r</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">r.push</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">l.foldr</span> <span class=\"n\">f</span> <span class=\"bp\">#</span><span class=\"o\">[[]])</span><span class=\"bp\">.</span><span class=\"n\">toList</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">pmap</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Mem</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"gr\">sorry</span> <span class=\"o\">::</span> <span class=\"n\">pmap</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">attach</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pmap</span> <span class=\"n\">Subtype.mk</span> <span class=\"n\">s</span> <span class=\"k\">fun</span> <span class=\"n\">_a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mem_attach</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l.attach</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CoeSort</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">Fintype.elems</span> <span class=\"n\">α</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">List</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Fintype</span>\n\n<span class=\"sd\">/-- Any subsingleton type with a witness is a fintype (with one term). -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">ofSubsingleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨[</span><span class=\"n\">a</span><span class=\"o\">],</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton.elim</span> <span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">List.Mem.head</span> <span class=\"o\">[]⟩</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">univ_ofSubsingleton</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Subsingleton</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">List.univ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ofSubsingleton</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Fintype</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">List.fintypeCoeSort</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">s.attach</span><span class=\"o\">,</span> <span class=\"n\">mem_attach</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n<span class=\"k\">#check</span> <span class=\"o\">(⟨[],</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sublists</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"o\">⟨[],</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩</span> <span class=\"bp\">∈</span>\n    <span class=\"o\">(</span><span class=\"n\">List.univ</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">((</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sublists</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">(</span><span class=\"n\">config</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">maxSteps</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span>\n    <span class=\"n\">maxDischargeDepth</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">memoize</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">singlePass</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">zeta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">beta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">eta</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">etaStruct</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n    <span class=\"n\">iota</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">proj</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">decide</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">arith</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">autoUnfold</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n  <span class=\"o\">})</span> <span class=\"c1\">-- if this line, Fintype.univ_ofSubsingleton fires, and is slow (1.5 s on my computer)</span>\n  <span class=\"c1\">-- }) [-Fintype.univ_ofSubsingleton]</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 356058488,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1683293299
    },
    {
        "content": "<p>Is it that just that <code>univ_ofSubsingleton</code> is a bad simp lemma?</p>",
        "id": 356058669,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1683293340
    },
    {
        "content": "<p>With <code>set_option trace.Meta.isDefEq true  in</code> we get a bit more useful information.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"bp\">?</span><span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"n\">List.pmap</span> <span class=\"n\">Subtype.mk</span> <span class=\"o\">(</span><span class=\"n\">List.sublists</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">))</span>\n              <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span>\n                <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">_a</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">),</span>\n                  <span class=\"n\">List.Mem</span> <span class=\"n\">_a</span> <span class=\"o\">(</span><span class=\"n\">List.sublists</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">List.Mem</span> <span class=\"n\">_a</span> <span class=\"o\">(</span><span class=\"n\">List.sublists</span> <span class=\"o\">(</span><span class=\"n\">List.range</span> <span class=\"mi\">2</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>is taking all the time, but mysteriously its children (where it successfully unifies <code>?a</code> with the head of the RHS, and then fails to unify <code>[]</code> with the tail of the RHS) are fast. I'm not sure where the time is being sucked up.</p>",
        "id": 356424053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683443783
    }
]