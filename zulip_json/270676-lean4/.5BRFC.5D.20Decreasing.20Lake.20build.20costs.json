[
    {
        "content": "<p>I've started out <a href=\"https://github.com/leanprover/lake/issues/153\">https://github.com/leanprover/lake/issues/153</a> with a proposed solution to reduce Lake build costs. Please feel free to provide input <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 326199052,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675704874
    },
    {
        "content": "<p>This is essentially the same as the Nix store. Haskell's Cabal also implements a similar system. I think this is generally the right thing to do for package managers which are not based on a Stackage-style distribution.</p>\n<p>I would then ask, perhaps heretically, whether instead of re-implementing half of Nix we should just use Nix.</p>",
        "id": 326202887,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675705983
    },
    {
        "content": "<p>I am still ignorant about Nix, but my first experience with it was pretty traumatic: it started building Lean 4 from scratch <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>.<br>\nBut I probably did something wrong, IDK. My main concern with Nix is that it would add up another system as a pre-requisite to use Lean 4.</p>",
        "id": 326203770,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675706248
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326202887\">said</a>:</p>\n<blockquote>\n<p>I would then ask, perhaps heretically, whether instead of re-implementing half of Nix we should just use Nix.</p>\n</blockquote>\n<p>Unfortunately we're no closer to that being an option on Windows than when I pitched Nix at LT two years ago <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 326204022,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675706323
    },
    {
        "content": "<p>I haven't used Nix on Windows, but I see they have an installer targeting WSL2. Is that not good enough?</p>",
        "id": 326204642,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1675706513
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326203770\">said</a>:</p>\n<blockquote>\n<p>I am still ignorant about Nix, but my first experience with it was pretty traumatic: it started building Lean 4 from scratch <span aria-label=\"fear\" class=\"emoji emoji-1f628\" role=\"img\" title=\"fear\">:fear:</span>.<br>\nBut I probably did something wrong, IDK. My main concern with Nix is that it would add up another system as a pre-requisite to use Lean 4.</p>\n</blockquote>\n<p>As a slightly less opinionated person on Nix I can assure you it is usually quite fine :P The only thing that can get pretty annoying is proprietary software that is packaged in...interesting ways but luckily we dont have that.</p>",
        "id": 326204967,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1675706611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326204642\">said</a>:</p>\n<blockquote>\n<p>I haven't used Nix on Windows, but I see they have an installer targeting WSL2. Is that not good enough?</p>\n</blockquote>\n<p>Not ideal if you're not already using WSL I'd say, and probably not an option on university machines. Assuming a future where students aren't using GH Workspaces anyway.</p>",
        "id": 326205461,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675706755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256311\">Jannis Limperg</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326202887\">said</a>:</p>\n<blockquote>\n<p>re-implementing half of Nix</p>\n</blockquote>\n<p>TBF, I don't think it's that bad. Lake already does the heavy lifting of computing traces, organizing compilation/linking parameters, reusing olean files etc. It's just a matter of writing and reading such data to/from the FS with a different logic for paths. There would probably be the need for having trace computation decoupled from the building routine for the <code>lake cache</code> command but, as far as I can see, that would be the most radical change in Lake</p>",
        "id": 326225648,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675713013
    },
    {
        "content": "<p>Isn't this also what rust does with <code>~/.cargo/registry</code>? If the general pattern is that most package managers independently implement this I don't see why lake shouldn't as well.</p>",
        "id": 326226458,
        "sender_full_name": "Hanting Zhang",
        "timestamp": 1675713289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326225648\">said</a>:</p>\n<blockquote>\n<p>There would probably be the need for having trace computation decoupled from the building routine for the <code>lake cache</code> command</p>\n</blockquote>\n<p>To be more precise, if the unified Lake store is implemented without the implementation of <code>lake cache</code> nor with a self-contained solution to compute Lake traces without triggering the building routine, it would break <code>mathlib4</code>'s caching system without giving it an alternative solution. So I would see two paths:</p>\n<ol>\n<li>Implement the Lake store but provide a way to compute traces (maybe with a <code>lake trace</code>). This would allow us to adapt the <code>mathlib4</code>'s caching system</li>\n<li>Implement the Lake store as well as <code>lake cache</code> in one go so we would be able to ditch the current implementation of <code>mathlib4</code>'s caching altoghether</li>\n</ol>",
        "id": 326227915,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675713793
    },
    {
        "content": "<blockquote>\n<p>I would then ask, perhaps heretically, whether instead of re-implementing half of Nix we should just use Nix.</p>\n</blockquote>\n<p>Given our requirements, the part of nix that we could reuse is tiny.  For example, we want to use local development builds of Lean, which rules out sandboxing.  We want to share oleans between architectures and operating systems, which means we need to throw out the hashing mechanism.  Probably the only parts we could reuse are the store and the download code, and those are not optimized for the lots of small files use case we have as <a href=\"https://github.com/NixOS/nix/issues/5118\">Sebastian has found out</a>.</p>",
        "id": 326229528,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675714310
    },
    {
        "content": "<p>Another issue with Nix is that it likes fixed absolute paths.  That is, you can't decide where to put the store yourself.  It needs to be on the same location as in the build server.  If we, say, put it in <code>/lake/...</code>, then you need root access (or containers) to install Lean.  You can't relocate it to <code>/home/leaner/.lake-cache</code>.  If we reuse the default Nix store at <code>/nix/</code>, then distributing caches becomes a security nightmare (\"if I used mathlib4 at one point, then they can silently hijack the passwd binary?!?\").</p>",
        "id": 326230292,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675714581
    },
    {
        "content": "<p>Just after I read this, <code>lake</code> suddenly decided to recompile a random collection of files in my project, including many mathlib, std, aseop file, despite the fact that the mathlib version didn't change in the last couple of weeks and everything was working this morning <span aria-label=\"man shrugging\" class=\"emoji emoji-1f937-200d-2642\" role=\"img\" title=\"man shrugging\">:man_shrugging:</span> .</p>",
        "id": 326231286,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1675714976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326230292\">said</a>:</p>\n<blockquote>\n<p>Another issue with Nix is that it likes fixed absolute paths.</p>\n</blockquote>\n<p>User mount namespaces work well enough for that. Which is another feature that likely will never make it to macOS or Windows.</p>",
        "id": 326231908,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675715220
    },
    {
        "content": "<p>I believe the general impression about the idea is positive, but I'd want to hear <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>'s input before I start dedicating a few hours per day on this</p>",
        "id": 326233326,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675715722
    },
    {
        "content": "<p>The real fun starts when you upgrade it to a content-addressed store where equal outputs from inequal builds are downloaded and stored only once, which means you need to manage a mapping from build traces to output hashes. An input-addressed store like described so far is not sufficient for short-circuiting builds when a change in a file is not observable from other files, which is what the module system is supposed to enable.</p>",
        "id": 326240619,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675718418
    },
    {
        "content": "<p>The GC strategy for the store is also not clear to me yet</p>",
        "id": 326240670,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675718433
    },
    {
        "content": "<blockquote>\n<p>We want to share oleans between architectures and operating systems, which means we need to throw out the hashing mechanism.</p>\n</blockquote>\n<p>I'm curious, does Nix not support customizing what becomes part of the hash?</p>",
        "id": 326243335,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675719568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326227915\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326225648\">said</a>:</p>\n<blockquote>\n<p>There would probably be the need for having trace computation decoupled from the building routine for the <code>lake cache</code> command</p>\n</blockquote>\n<p>To be more precise, if the unified Lake store is implemented without the implementation of <code>lake cache</code> nor with a self-contained solution to compute Lake traces without triggering the building routine, it would break <code>mathlib4</code>'s caching system without giving it an alternative solution. So I would see two paths:</p>\n<ol>\n<li>Implement the Lake store but provide a way to compute traces (maybe with a <code>lake trace</code>). This would allow us to adapt the <code>mathlib4</code>'s caching system</li>\n<li>Implement the Lake store as well as <code>lake cache</code> in one go so we would be able to ditch the current implementation of <code>mathlib4</code>'s caching altoghether</li>\n</ol>\n</blockquote>\n<p>It sounds like option 2 would be vastly better for the whole ecosystem in the long run. I am assuming it would integrate with or replace the current cloud releases feature.</p>",
        "id": 326243552,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1675719649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"128280\">Wojciech Nawrocki</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326243335\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>We want to share oleans between architectures and operating systems, which means we need to throw out the hashing mechanism.</p>\n</blockquote>\n<p>I'm curious, does Nix not support customizing what becomes part of the hash?</p>\n</blockquote>\n<p>No, Nix doesn't like to give you tools to break its soundness. I did though, in some prior thread, by manipulating the content addressing table. Which results in exactly the same state as if you did build the derivation on different platform if the result is in fact platform independent, it's just a... shortcut</p>",
        "id": 326244454,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675720004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Decreasing.20Lake.20build.20costs/near/326240619\">said</a>:</p>\n<blockquote>\n<p>The real fun starts when you upgrade it to a content-addressed store where equal outputs from inequal builds are downloaded and stored only once, which means you need to manage a mapping from build traces to output hashes. An input-addressed store like described so far is not sufficient for short-circuiting builds when a change in a file is not observable from other files, which is what the module system is supposed to enable.</p>\n</blockquote>\n<p>I didn't understand what you meant. Are you pointing at a challenge?</p>",
        "id": 326266052,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1675731152
    },
    {
        "content": "<p>A big one, yeah, on both Lean's and the build system's side. Maybe this article can help in clarifying the terms: <a href=\"https://www.tweag.io/blog/2020-09-10-nix-cas/\">https://www.tweag.io/blog/2020-09-10-nix-cas/</a></p>",
        "id": 326303869,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675758043
    }
]