[
    {
        "content": "<p>I would like to write a command which checks whether two declarations in the current environment have defeq types. It seems, however, that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.isDefEq#doc\">docs#Lean.Meta.isDefEq</a> is in the <code>MetaM</code> monad. Is there some function that does this which can be run in <code>CommandElabM</code>?</p>",
        "id": 389766164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694124520
    },
    {
        "content": "<p>It doesn't get automatically lifted? If not, maybe try <code>liftTermElabM</code></p>",
        "id": 389766447,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694124678
    },
    {
        "content": "<p>can you lift from MetaM to CommandElabM?</p>",
        "id": 389766486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694124695
    },
    {
        "content": "<p>You could just go all the way to <code>IO</code> with something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">fileName</span><span class=\"o\">,</span> <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"n\">default</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">state</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">}</span>\n    <span class=\"c1\">-- From `IO` to `CoreM`:</span>\n    <span class=\"n\">Prod.fst</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">CoreM.toIO</span> <span class=\"bp\">·</span> <span class=\"n\">ctx</span> <span class=\"n\">state</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"c1\">-- From `CoreM` to `MetaM`:</span>\n        <span class=\"n\">MetaM.run'</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span> <span class=\"k\">do</span>\n</code></pre></div>",
        "id": 389766634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694124772
    },
    {
        "content": "<p>Ok, yes, I was hoping to avoid constructing some empty MetaM context from scratch, but maybe that's the only way?</p>",
        "id": 389766681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694124811
    },
    {
        "content": "<p>given the implementation of <code>liftTermElabM</code> <a href=\"https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/Lean/Elab/Command.lean#L391-L414\">https://github.com/leanprover/lean4/blob/a7efe5b60e86b26fefd4795b46d66af369b97329/src/Lean/Elab/Command.lean#L391-L414</a> and all the additional care taken for macro scopes I don't think that's a good idea</p>",
        "id": 389766698,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694124824
    },
    {
        "content": "<p>(I had that ready to copy and paste, but presumable you can get there from CommandElabM even more easily.)</p>",
        "id": 389766704,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694124827
    },
    {
        "content": "<p>why not go joachim's path?</p>",
        "id": 389766707,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694124830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Checking.20defeq.20in.20Command/near/389766698\">said</a>:</p>\n<blockquote>\n<p>I don't think that's a good idea</p>\n</blockquote>\n<p>Sorry, what are you referring to here?</p>",
        "id": 389766804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694124871
    },
    {
        "content": "<p><code>liftTermElabM</code> is what you want.</p>",
        "id": 389766820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694124883
    },
    {
        "content": "<p>Your <code>MetaM</code> tactic lifts for free to <code>TermElabM</code>, which is even higher up the monad stack, and then <code>liftTermElabM</code> lets you run that from <code>CommandElabM</code>.</p>",
        "id": 389766876,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694124921
    },
    {
        "content": "<p>Gotcha. I'll try it out. Thanks!</p>",
        "id": 389766901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694124939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Checking.20defeq.20in.20Command/near/389766804\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Checking.20defeq.20in.20Command/near/389766698\">said</a>:</p>\n<blockquote>\n<p>I don't think that's a good idea</p>\n</blockquote>\n<p>Sorry, what are you referring to here?</p>\n</blockquote>\n<p>well <code>liftTermElabM</code> goes through a lot of effort to do macro scopes related stuff here while the straight to IO approach just doesn't care about that at all so I would assume you can provoke scenarios where stuff breaks.</p>",
        "id": 389767000,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694124983
    },
    {
        "content": "<p>I would <em>guess</em> that checking <code>isDefEq</code> on two already elaborated types is fairly safe to do brutally, but why do the guesswork?</p>",
        "id": 389767103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694125048
    },
    {
        "content": "<p>Thanks all, <code>liftTermElabM</code> works perfectly fine for my application. Pasting this here in case it helps anyone else in the future:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Meta</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"bp\">`</span><span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"n\">unreachable</span><span class=\"bp\">!</span>\n  <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">A.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"n\">B.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">C.type</span>\n  <span class=\"k\">let</span> <span class=\"n\">b1</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">b2</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"o\">(</span><span class=\"n\">isDefEq</span> <span class=\"n\">A</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">b1</span> <span class=\"k\">then</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"A and B have the same type\"</span>\n  <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">b2</span> <span class=\"k\">then</span> <span class=\"n\">IO.println</span> <span class=\"s2\">\"A and C have different types\"</span>\n</code></pre></div>",
        "id": 389767219,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694125109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> There's a small issue with your code, where if you have universe variables then it will require that they have the exact same names.</p>",
        "id": 389770725,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694127447
    },
    {
        "content": "<p>I think I'm okay with that.</p>",
        "id": 389770889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694127548
    },
    {
        "content": "<p>Just to mention it, if you're ok with constants being defeq after some specialization of their universe level parameters, then you could do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">b1</span> <span class=\"bp\">←</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">Aty</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">`</span><span class=\"n\">A</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">Bty</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkConstWithFreshMVarLevels</span> <span class=\"bp\">`</span><span class=\"n\">B</span><span class=\"o\">)</span>\n  <span class=\"n\">isDefEq</span> <span class=\"n\">Aty</span> <span class=\"n\">Bty</span>\n</code></pre></div>\n<p>It might be over-specialized though.</p>",
        "id": 389771514,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694127905
    },
    {
        "content": "<p>Is there any particular reason why we don't have an instance of <code>MonadLiftT MetaM CommandElabM</code>?</p>",
        "id": 389773938,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1694129358
    },
    {
        "content": "<p>I'm not sure you generally want to run MetaM functions with an empty context and no metavariable assignments every time. <code>liftTermElabM</code> (and <code>runTermElabM</code>, which initializes the context with <code>variable</code>s) at least delimits where this new context is created.</p>",
        "id": 389774651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694129804
    }
]