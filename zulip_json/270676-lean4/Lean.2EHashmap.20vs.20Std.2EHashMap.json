[
    {
        "content": "<p>I was looking for Hashmaps and found a Lean.Hashmap and Std.Hashmap that seem similar on a cursory glance. How should I choose between them?</p>",
        "id": 351599122,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682077938
    },
    {
        "content": "<p>My understanding is that the lean one exists primarily for the compiler itself to use, while the std one is more general purpose (also easier to update if needed)</p>",
        "id": 351602907,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1682078740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.2EHashmap.20vs.20Std.2EHashMap/near/351599122\">said</a>:</p>\n<blockquote>\n<p>How should I choose between them?</p>\n</blockquote>\n<p>Use the <code>Std</code> one, if possible. Reasons you might not use it:</p>\n<ul>\n<li>You don't depend on the <code>std</code> package, possibly because you are developing a very foundational package or are working inside lean core</li>\n<li>You are working directly with a lean API which uses <code>Lean.HashMap</code></li>\n<li>You profiled both and <code>Lean.HashMap</code> performs better in your application. (This is very unlikely as the implementations are almost carbon copies, except for some elided bounds checks in the Std version, but if you run into issues please open an issue about it.)</li>\n</ul>\n<p>The main advantages the <code>Std.HashMap</code> provides are:</p>\n<ul>\n<li>Proved correct operations (you don't have to import the file containing the proofs if you don't need them)</li>\n<li>A stable(r) interface (nothing in the lean ecosystem is really stable at this point, but <code>Std</code> will be thinking about stability more than most packages, including <code>Lean</code>)</li>\n<li>Good performance is a target, although right now we're just copying the <code>Lean.HashMap</code> implementation so as to get the same compiler optimizations. But optimization PRs are welcome.</li>\n</ul>",
        "id": 351616110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682081681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.2EHashmap.20vs.20Std.2EHashMap/near/351616110\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.2EHashmap.20vs.20Std.2EHashMap/near/351599122\">said</a>:</p>\n<blockquote>\n<p>How should I choose between them?</p>\n</blockquote>\n<p>Use the <code>Std</code> one, if possible. Reasons you might not use it:</p>\n<ul>\n<li>You don't depend on the <code>std</code> package, possibly because you are developing a very foundational package or are working inside lean core</li>\n<li>You are working directly with a lean API which uses <code>Lean.HashMap</code></li>\n<li>You profiled both and <code>Lean.HashMap</code> performs better in your application. (This is very unlikely as the implementations are almost carbon copies, except for some elided bounds checks in the Std version, but if you run into issues please open an issue about it.)</li>\n</ul>\n<p>The main advantages the <code>Std.HashMap</code> provides are:</p>\n<ul>\n<li>Proved correct operations (you don't have to import the file containing the proofs if you don't need them)</li>\n<li>A stable(r) interface (nothing in the lean ecosystem is really stable at this point, but <code>Std</code> will be thinking about stability more than most packages, including <code>Lean</code>)</li>\n<li>Good performance is a target, although right now we're just copying the <code>Lean.HashMap</code> implementation so as to get the same compiler optimizations. But optimization PRs are welcome.</li>\n</ul>\n</blockquote>\n<p>Thanks. Right now performance is not a priority for me. I am trying to use it as a small symbol table. Having theorems about correctness might be handy though.</p>",
        "id": 351623448,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682083116
    },
    {
        "content": "<p>I doubt they are very distinguishable for most purposes, but if you want a quick decision procedure, it is \"use <code>Std</code>\"</p>",
        "id": 351626647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682083781
    },
    {
        "content": "<p>On a slight tangent, do we have nice notation for HashMaps, like Python dictionaries?</p>",
        "id": 351628355,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1682084114
    },
    {
        "content": "<p>no</p>",
        "id": 351635355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682085458
    },
    {
        "content": "<p>but it's fairly easy to make one if you so desire</p>",
        "id": 351635436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682085473
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Std.HashMap.ofList'</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"n\">l</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">syntax</span> <span class=\"n\">kvPair</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"s2\">\": \"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"!{\"</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"s2\">\": \"</span> <span class=\"n\">term</span><span class=\"o\">),</span><span class=\"bp\">*</span> <span class=\"s2\">\"}\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">!</span><span class=\"o\">{</span><span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">})</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Std.HashMap.ofList'</span> <span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"o\">[(</span><span class=\"bp\">$</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">v</span><span class=\"o\">)],</span><span class=\"bp\">*</span><span class=\"o\">])</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">!</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"mi\">1</span>\n</code></pre></div>\n<p>(The first line is to work around a bug in the declaration of <code>HashMap.ofList</code>)</p>",
        "id": 351661930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682090450
    }
]