[
    {
        "content": "<p>I have been dealing with curious TC performance issue. In a moderately sized computation I had to synthesize <code>Add (K × K × K × K × K × K × K × K × K × K × K)</code>. Interestingly, synthesizing this class for 10 <code>K</code>s takes ~4ms but for 11<code>K</code>s it takes ~450ms. The issue is that for 11<code>K</code>s the type class synthesis hits the maximum size, kills the good inference path, goes crazy and after half a second it finds an instance in some mysterious way. The issue is easily solvable just by increasing <code>synthInstance.maxSize</code></p>\n<p>My issue is that there is no warning or error letting you know that this is happening. Actually, what is the purpose of the <code>synthInstance.maxSize</code>. Why there is no error like when hitting <code>synthInstance.maxHeartbeats</code> ? Would it make sense to throw an error or a warning?</p>\n<hr>\n<p>mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.IsROrC.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n\n\n<span class=\"c1\">-- fast</span>\n<span class=\"c1\">-- 10 K</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- slow</span>\n<span class=\"c1\">-- 11 K</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"c1\">-- fast</span>\n<span class=\"c1\">-- 11 K</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxSize</span> <span class=\"mi\">200</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 399559262,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698769536
    },
    {
        "content": "<p>What's the instance in each case? (You can check with <code>#synth</code>)</p>",
        "id": 399819624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698882009
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.IsROrC.Basic</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">IsROrC</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">profiler.threshold</span> <span class=\"mi\">1</span>\n\n\n<span class=\"c1\">-- fast</span>\n<span class=\"c1\">-- 10 K</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Prod.instAdd</span>\n\n<span class=\"c1\">-- slow</span>\n<span class=\"c1\">-- 11 K</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Distrib.toAdd</span>\n\n<span class=\"c1\">-- fast</span>\n<span class=\"c1\">-- 11 K</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxSize</span> <span class=\"mi\">200</span> <span class=\"k\">in</span>\n<span class=\"bp\">#</span><span class=\"n\">synth</span> <span class=\"n\">Add</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span> <span class=\"bp\">×</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Prod.instAdd</span>\n</code></pre></div>",
        "id": 399819868,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698882230
    },
    {
        "content": "<p>I just wanted to experiment to see if there was an alternative to raising <code>synthInstance.maxSize</code>, and adding these instances does work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">Prod</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instMul_2</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">×</span> <span class=\"n\">M₂</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">to_additive</span><span class=\"kd\">]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instMul_4</span> <span class=\"o\">{</span><span class=\"n\">M₁</span> <span class=\"n\">M₂</span> <span class=\"n\">M₃</span> <span class=\"n\">M₄</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₁</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₃</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">M₄</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"n\">Mul</span> <span class=\"o\">(</span><span class=\"n\">M₁</span> <span class=\"bp\">×</span> <span class=\"n\">M₂</span> <span class=\"bp\">×</span> <span class=\"n\">M₃</span> <span class=\"bp\">×</span> <span class=\"n\">M₄</span> <span class=\"bp\">×</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inferInstance</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Prod</span>\n</code></pre></div>\n<p>You don't need both, but the second does have a measurable impact on synthesis time.</p>",
        "id": 399820332,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698882562
    },
    {
        "content": "<p>For 12 <code>K</code>s it is slow again</p>",
        "id": 399937751,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698932227
    },
    {
        "content": "<p>I have built a custom version of lean which throws an error when maximum size is reached i.e. throwing on this <a href=\"https://github.com/leanprover/lean4/blob/4934f5c56d5796a19d8669cbe90fd5f238d9810c/src/Lean/Meta/SynthInstance.lean#L389\">line</a>. The whole mathlib recompiles without a problem only in two files <code>Mathlib/Lean/CoreM.lean</code> and <code>Std/CodeAction/Attr.lean</code> the option <code>maxSize</code> has to be increased. Each time it is trying to synthesize instance of  type<code>Nonempty (A → ... → Y → Z)</code>.</p>\n<p>I'm thinking about adding boolean option <code>synthInstance.strictMaxSize</code>. When set to true TC synthesis will throw when it reaches the maximum size. Would it make sense to make a PR?</p>",
        "id": 399939408,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698932723
    }
]