[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> keeps crashing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Util.TermUnsafe</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Entry</span> <span class=\"o\">:=</span> <span class=\"n\">String</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">EntryList</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Entry</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">myExt</span> <span class=\"o\">:</span> <span class=\"n\">SimplePersistentEnvExtension</span> <span class=\"n\">Entry</span> <span class=\"n\">EntryList</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerSimplePersistentEnvExtension</span> <span class=\"o\">{</span>\n    <span class=\"n\">addEntryFn</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">concat</span><span class=\"o\">)</span>\n    <span class=\"n\">addImportedFn</span> <span class=\"o\">:=</span> <span class=\"n\">mkStateFromImportedEntries</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">concat</span><span class=\"o\">)</span> <span class=\"o\">{}</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">elab</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Proof</span><span class=\"o\">)</span> <span class=\"s2\">\"Proof\"</span> <span class=\"n\">_desc</span><span class=\"o\">:</span><span class=\"n\">interpolatedStr</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">*</span> <span class=\"s2\">\":\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">unsafe</span> <span class=\"n\">enableInitializersExecution</span>\n\n  <span class=\"n\">modifyEnv</span> <span class=\"k\">fun</span> <span class=\"n\">env</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">myExt.addEntry</span> <span class=\"n\">env</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">Proof</span> <span class=\"s2\">\"trivial\"</span><span class=\"o\">:</span>\n    <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">cannot</span> <span class=\"n\">evaluate</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">init</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">myExt'</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">module</span>\n</code></pre></div>\n<p>Adding <code>unsafe enableInitializersExecution</code> following suggestions starting <a href=\"#narrow/stream/270676-lean4/topic/Reintroducing.20default.2Elean/near/391603355\">here</a> didn't fix the issue.</p>",
        "id": 396525633,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697210308
    },
    {
        "content": "<p>Try splitting into multiple files. You can't use the extension in the same file you initialize it.</p>",
        "id": 396608024,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697256232
    },
    {
        "content": "<p>Thanks, the comment on where this exception is thrown from suggests that in order to avoid possible bugs, this should be forbidden. I wonder if throwing an uncaught exception (when user is experimenting something wild) is common practice and should not be considered a bug.</p>",
        "id": 396612607,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697258504
    },
    {
        "content": "<p>Sorry, I didn't understand your reply. If you're saying that a better error message is needed here, then yes, absolutely! :-)</p>",
        "id": 396618040,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697262491
    },
    {
        "content": "<p>Not exactly, although that's also implied. My question is: is it expected to let <code>libc++abi</code> to terminate Lean, or should this be a Lean level panic handling? If I'm told for the short term the former is expected then I'm comfortable with it for the time being, but I assume the latter is more expected in the long run, for a general purpose programming languages?</p>",
        "id": 396619946,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697263831
    },
    {
        "content": "<p>This is not in the general purpose programming but metaprogramming fragment of Lean. Perhaps it would be nicer to use a common fatal panic handler but the difference in practice seems negligible.</p>",
        "id": 396631387,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1697273827
    },
    {
        "content": "<p>Yes, thanks for the clarification.</p>",
        "id": 396638670,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697279717
    }
]