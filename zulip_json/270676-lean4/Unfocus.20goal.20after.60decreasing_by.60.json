[
    {
        "content": "<p>There is Ackermann function in Mathlib:<br>\n<a href=\"https://github.com/leanprover-community/mathlib4/blob/fd3a089b1eae469ba1e1d14ec4f1c3e568f187de/Mathlib/Computability/Ackermann.lean#L62\">https://github.com/leanprover-community/mathlib4/blob/fd3a089b1eae469ba1e1d14ec4f1c3e568f187de/Mathlib/Computability/Ackermann.lean#L62</a><br>\nSpecifying <code>termination_by</code> was sufficient in the declaration; it was automatically inferred that the recursion was decreasing on the lexicographical ordering of the pair of <code>Nat</code> arguments.<br>\nNevertheless, I wanted to see how to prove <code>decreasing_by</code> manually.</p>\n<p>So I copied the definition and added the  <code>decreasing_by</code> part at the end:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ackermann</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>  <span class=\"o\">,</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">ackermann</span> <span class=\"n\">m</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ackermann</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ackermann</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">ackermann</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">left</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>My problem is that all three goals are focused.<br>\nIt is OK when I perform <code>simp_wf</code> on all goals simultaneously.<br>\nHowever, the subsequent <code>left</code> must not be performed on the last goal.<br>\nHow can I unfocus the last goal (or focus only the first one) please?<br>\nUnsurprisingly, I am required to prove <code>False</code> after the <code>simp</code> on the last line.</p>",
        "id": 395448566,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696707515
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">first</span>\n<span class=\"bp\">|</span> <span class=\"n\">left</span>\n  <span class=\"n\">simp</span>\n<span class=\"bp\">|</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 395449066,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1696707760
    },
    {
        "content": "<p>I am not sure what <code>first</code> is supposed to so, but it doesn't work here.</p>",
        "id": 395449546,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696708054
    },
    {
        "content": "<p>If you want to give case-specific proofs, use <code>have</code></p>",
        "id": 395454322,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696712375
    },
    {
        "content": "<p>I'd first need to specify which goal is focused. Otherwise my <code>have</code> part gets opened in all three goals (in some of them, it might not even have all necessary terms in the context).</p>",
        "id": 395454660,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696712717
    },
    {
        "content": "<p>I mean a term <code>have</code> in the respective branch, like the error message suggests when the default decreasing_by fails</p>",
        "id": 395455308,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1696713376
    },
    {
        "content": "<p>I don't understand.</p>",
        "id": 395455465,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696713574
    },
    {
        "content": "<p>It is enough to have a hypothesis in scope of the recursive call and you can provide it with <code>have</code> just before the call.</p>",
        "id": 395456007,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1696714199
    },
    {
        "content": "<p>I am sorry I don't understand the last two comments.<br>\nCould you please show me what you mean in code?</p>",
        "id": 395456167,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696714350
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">then</span> <span class=\"mi\">0</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 395456547,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1696714776
    },
    {
        "content": "<p>Oh I see!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ackermann</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>  <span class=\"o\">,</span> <span class=\"n\">n</span>   <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">0</span>   <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">wfm</span> <span class=\"o\">:</span> <span class=\"n\">Prod.Lex</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">left</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">m</span>\n    <span class=\"n\">ackermann</span> <span class=\"n\">m</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">wfn</span> <span class=\"o\">:</span> <span class=\"n\">Prod.Lex</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a₁</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">right</span>\n      <span class=\"n\">exact</span> <span class=\"n\">lt_add_one</span> <span class=\"n\">n</span>\n    <span class=\"n\">ackermann</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">ackermann</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">ackermann</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"n\">simp_all</span>\n</code></pre></div>\n<p>Now my <code>wfm</code> and <code>wfn</code> are used by the <code>simp_all</code> and only one goal remains open!</p>",
        "id": 395458774,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696717236
    },
    {
        "content": "<p>Nevertheless, cannot I simply focus one goal at a time?</p>",
        "id": 395458905,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1696717388
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 395459314,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1696717852
    },
    {
        "content": "<p>I think the decreasing_by tactic is just run blindly on each of the goals. So no? This is definitely a restriction, in particular it is impossible to do forward reasoning without manually copying the goals into <code>have</code>s</p>",
        "id": 395958699,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696970993
    },
    {
        "content": "<p>I think we've seen cases in the past where the <code>have</code>s have been rejected by the linter, forcing the use of <code>decreasing_by</code> instead; maybe <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> remembers...</p>",
        "id": 395973349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696979992
    },
    {
        "content": "<p>Eric, I think we now understand what's causing this: The <code>have</code> really are necessary within the definition, but then they mistakenly make their way onto the equational lemmas, meaning that whenever you unfold the definition somewhere else, they become unused <code>have</code>s.</p>",
        "id": 396025166,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1697008518
    }
]