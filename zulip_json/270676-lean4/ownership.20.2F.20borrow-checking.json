[
    {
        "content": "<p>The end of the <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">Counting Immutable Beans paper</a> mentions the idea of supporting some form of borrow-checking</p>\n<blockquote>\n<p>In order to statically approximate this extended system, we would need to extend our type system with support for some kind of lifetime annotations on return types as featured in Cyclone [Jim et al. 2002] and Rust [Matsakis and Klock 2014].</p>\n</blockquote>\n<p>I think I remember a dev log where this was briefly discussed. Is this idea (still) on the table, and if it is is there additional info on this somewhere, like a paper/blog post/zulip thread?</p>",
        "id": 324856165,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1675155420
    },
    {
        "content": "<p>You might be interested in <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>'s master's thesis to be finished and published in about a month that will discuss ownership and borrowing, though lifetime annotations are not part of it</p>",
        "id": 324859952,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675156673
    },
    {
        "content": "<p>How to make some type that cannot be copied? Is that possible in lean?</p>",
        "id": 328154793,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676523661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"380302\">Adrien Champion</span> <a href=\"#narrow/stream/270676-lean4/topic/ownership.20.2F.20borrow-checking/near/324856165\">said</a>:</p>\n<blockquote>\n<p>The end of the <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">Counting Immutable Beans paper</a> mentions the idea of supporting some form of borrow-checking</p>\n<blockquote>\n<p>In order to statically approximate this extended system, we would need to extend our type system with support for some kind of lifetime annotations on return types as featured in Cyclone [Jim et al. 2002] and Rust [Matsakis and Klock 2014].</p>\n</blockquote>\n<p>I think I remember a dev log where this was briefly discussed. Is this idea (still) on the table, and if it is is there additional info on this somewhere, like a paper/blog post/zulip thread?</p>\n</blockquote>\n<p>Check out Clean, ATS or Idris 2.</p>",
        "id": 328154801,
        "sender_full_name": "Locria Cyber",
        "timestamp": 1676523678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span> maybe it would be useful for me to leak the email you sent me so that people like me have a few papers to read until your work is published? Is that okay?</p>",
        "id": 336474492,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1677243363
    },
    {
        "content": "<p>I would certainly be interested in reading those papers!</p>",
        "id": 336474663,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677243418
    },
    {
        "content": "<p>Well the short version is that \"uniqueness types\" are investigated. That's a concept related to, but different from, linear types</p>\n<blockquote>\n<p>If you'd like to know more about uniqueness types and how it relates to linearity, the recently published <a href=\"https://granule-project.github.io/papers/esop22-paper.pdf\">\"Linearity and Uniqueness: An Entente Cordiale\"</a>, as well as de Vries' PhD thesis <a href=\"http://edsko.net/pubs/thesis.pdf\">\"Making Uniqueness Typing Less Unique\"</a> are good places to start.</p>\n</blockquote>\n<p>I found the former in particular to be extremely useful</p>",
        "id": 336475256,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1677243576
    },
    {
        "content": "<p>Ended up <a href=\"#narrow/stream/270676-lean4/topic/Linear.20types.20in.20Lean/near/336469743\">paraphrasing Sebastian</a></p>",
        "id": 336475691,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1677243686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/ownership.20.2F.20borrow-checking/near/324859952\">said</a>:</p>\n<blockquote>\n<p>You might be interested in <span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span>'s master's thesis to be finished and published in about a month that will discuss ownership and borrowing, though lifetime annotations are not part of it</p>\n</blockquote>\n<p>was this ever published? I can't find anything online but I don't really know where I should be looking!</p>",
        "id": 356347025,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683393783
    },
    {
        "content": "<p>It now is at <a href=\"https://github.com/mhuisi/Uniq/releases/tag/submission\">https://github.com/mhuisi/Uniq/releases/tag/submission</a>!</p>",
        "id": 356969277,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683635874
    },
    {
        "content": "<p>The official thesis \"publication\" can also be found here: <a href=\"https://pp.ipd.kit.edu/publication.php?id=huisinga23masterarbeit\">https://pp.ipd.kit.edu/publication.php?id=huisinga23masterarbeit</a></p>",
        "id": 357036323,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1683649060
    },
    {
        "content": "<p>Are there plans on your side to get this integrated into the actual compiler at some point? Or is that something the compiler team will have to deal with? <span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span></p>",
        "id": 357036808,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1683649152
    },
    {
        "content": "<p>Difficult to say at this point - I work full-time now and definitely need a break from Lean related things for a bit. I wouldn't mind if someone other than me who has some prior experience with substructural type theory takes a stab at it.</p>\n<p>There's also some additional theory work left to be done for the type theory to be user-friendly.</p>",
        "id": 357039004,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1683649531
    },
    {
        "content": "<p>I'm definitely interested in helping push the implementation forward. I might also be able to help on the theory side after this Fall semester (hopefully taking a special topics course on substructural TTs...)</p>",
        "id": 357041033,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683649976
    }
]