[
    {
        "content": "<p>I just realised that the revert/intro pattern promotes any <code>implementationDetail</code> hypothesis to <code>default</code> status. For example, consider the context</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>where <code>_x</code> is an <code>implementationDetail</code>, so it's invisible and supposed to be ignored by everything. Running <code>subst h</code> will revert anything after <code>a</code>, including <code>_x</code>, and then reintroduce <code>_x : P b</code>. But at that point, we've forgotten that <code>_x</code> was an <code>implementationDetail</code>, so it becomes a regular hypothesis. This severely limits the utility of <code>implementationDetail</code> hypotheses: you can only use them reliably for closed terms.</p>\n<p>What to do (if anything)? One option would be to have <code>revert</code> put an <code>mdata</code> wrapper around the type of <code>_x</code>, indicating that <code>_x</code> was previously an <code>implementationDetail</code>. <code>intro</code> would then consume this wrapper. As a bonus, this would probably reveal a number of latent <code>mdata</code>-related bugs since revert/intro is so common. <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 388191374,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693427733
    },
    {
        "content": "<p>Actually, it might be better to encode the <code>implementationDetail</code>-ness in the name of the <code>forall</code> or <code>let</code>, rather than its type.</p>",
        "id": 388195835,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693429768
    },
    {
        "content": "<p>I investigated this a bit more. Currently, <code>revertAfter</code> clears <code>auxDecl</code> hypotheses (but not <code>implDetail</code> hypotheses) by default if it would have to revert them. Plain <code>revert</code> (both the <code>MetaM</code> version and the tactic) fails by default under the same circumstances. This treatment of <code>auxDecl</code>s should probably be extended to all <code>implementationDetail</code> hypotheses.</p>\n<p>Going beyond that, it would be easy to add a new mode to <code>revert</code> which allows <code>implementationDetail</code> hypotheses to be reverted, marking them for special treatment by <code>intro</code> as described above. This would be suitable for tactics which internally use the revert/intro pattern.</p>\n<p>However, for the <code>revert</code> tactic, there's no good choice:</p>\n<ul>\n<li>It can make <code>implementationDetail</code> hypotheses visible, breaking the abstraction.</li>\n<li>It can fail when encountering <code>implementationDetail</code> hypotheses, again breaking the abstraction.</li>\n<li>It can silently clear <code>implementationDetail</code> hypotheses, but that would make <code>implementationDetail</code> hypotheses unsuitable for attaching persistent metadata to goals.</li>\n</ul>",
        "id": 388293104,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693477546
    },
    {
        "content": "<p>Last time we discussed this, I believe we decided to go for the third option, clearing implDetail hypotheses, because we don't want metadata from these hypotheses to leak into the proof term</p>",
        "id": 388295053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693478358
    },
    {
        "content": "<p>and actually reverting them is a big problem for things like auxDecl hypotheses because they aren't real hypotheses</p>",
        "id": 388295182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693478404
    },
    {
        "content": "<p>if you want persistent metadata on goals you should be using mdata in the type of the mvar</p>",
        "id": 388295283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693478454
    },
    {
        "content": "<p>that's what I'm doing for iris-lean</p>",
        "id": 388295299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693478463
    },
    {
        "content": "<p>Okay, I'll try that.</p>\n<blockquote>\n<p>This treatment of auxDecls should probably be extended to all implementationDetail hypotheses.</p>\n</blockquote>\n<p>Should I make a patch for this part?</p>",
        "id": 388295937,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1693478692
    },
    {
        "content": "<p>it seems reasonable, no promises you won't get massive breakage though <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 388300072,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693480448
    }
]