[
    {
        "content": "<h2>This is Lean 3</h2>\n<ul>\n<li><code> `() </code> creates an <code>expr</code>, the more backticks - the more permissive.</li>\n<li><code> ` </code> creates a <code>name</code>, the more backticks - the less permissive.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 1. Expressions `()</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]),</span>\n  <span class=\"k\">let</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e1</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]),</span>\n  <span class=\"k\">let</span> <span class=\"n\">e2</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">list.map</span> <span class=\"n\">_</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]),</span>\n  <span class=\"k\">let</span> <span class=\"n\">e3</span> <span class=\"o\">:</span> <span class=\"n\">pexpr</span> <span class=\"o\">:=</span> <span class=\"bp\">```</span><span class=\"o\">(</span><span class=\"n\">seattle.washington</span><span class=\"o\">),</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"c1\">-- 2. Names `</span>\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">and.intro</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">n2</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">seattle.washington</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"true\"</span>\n\n<span class=\"kd\">run_cmd</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">n1</span> <span class=\"o\">:</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">and.intro</span><span class=\"o\">,</span>\n  <span class=\"n\">tactic.trace</span> <span class=\"s2\">\"true\"</span>\n</code></pre></div>\n<h2>This is Lean 4</h2>\n<ul>\n<li><code> `() </code> creates a <code>TSyntax</code>, the more backticks - the less permissive.</li>\n<li><code> ` </code> creates a <code>Name</code>, the more backticks - the less permissive.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- 1. Expressions `()</span>\n<span class=\"c1\">-- \"Basically the `() syntax is smart enough to figure out the most general syntax category the syntax we are matching might be coming from (in this case term).\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">exprSingle</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">seattle.washington</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">exprDouble</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span> <span class=\"bp\">←</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"mi\">5</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"o\">()</span>\n\n<span class=\"c1\">-- 2. Names `</span>\n<span class=\"kd\">def</span> <span class=\"n\">nameSingle</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">And.intro</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">seattle.washington</span>\n  <span class=\"n\">true</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nameDouble</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">``</span><span class=\"n\">And.intro</span>\n  <span class=\"n\">true</span>\n</code></pre></div>\n<h2>Questions</h2>\n<ol>\n<li>In Lean 3 - why wasn't the syntax consistent, would it not be more intuitive to have more backticks =&gt; always less permissive? Was it intentional/some legacy code accident?</li>\n<li>In Lean 4 - do I understand it right that <code> `() </code> creates expressions in Lean 3, and creates  syntax in Lean 4? Is there a backticks-based way to create an expression? Or what's usually used?</li>\n</ol>",
        "id": 318222854,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672221132
    },
    {
        "content": "<p>It was accidental in Lean 3. You can use <a href=\"https://github.com/gebner/quote4\">https://github.com/gebner/quote4</a> in Lean 4.</p>",
        "id": 318228927,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1672223651
    },
    {
        "content": "<p>Nice, thank you!</p>",
        "id": 318249995,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672231852
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480079\">Evgenia Karunus</span> has marked this topic as resolved.</p>",
        "id": 318250716,
        "sender_full_name": "Notification Bot",
        "timestamp": 1672232154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>, I wonder why was the decision [to turn <code> `() </code> from forming <code>Expr</code> in Lean 3 to forming <code>Syntax</code> in Lean 4] made?</p>",
        "id": 318355030,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672285103
    },
    {
        "content": "<p>you mean from Expr to Syntax?</p>",
        "id": 318355183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1672285252
    },
    {
        "content": "<p>Right, fixed!</p>",
        "id": 318356762,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672286961
    },
    {
        "content": "<p>The backtick operator originated in the LISP family of languages, notably Scheme, and it means more or less \"turn this piece of code I just wrote down into a structured representation of its syntax\". Because the type of Lean 4 syntax is <code>Syntax</code>, it makes more sense to have that as output. This is called a <em>quotation</em> and is written like <code> `(2 + 2)</code>; and there are also <a href=\"https://en.wikipedia.org/wiki/Lisp_(programming_language)#Self-evaluating_forms_and_quoting\">antiquotations</a> which are a bit more powerful because if you already have a value representing some syntax, you can splice it into a quasiquotation using an <em>antiquotation</em> <code>$</code>. Suppose <code>someStx := `(2 + 2)</code>. Then <code> `(fun x =&gt; $someStx)</code> is the same as <code>`(fun x =&gt; 2 + 2)</code>. Lean has full quasiquotation support.</p>",
        "id": 318360928,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1672291751
    },
    {
        "content": "<p>Makes sense, thanks!</p>",
        "id": 318361248,
        "sender_full_name": "Evgenia Karunus",
        "timestamp": 1672292073
    }
]