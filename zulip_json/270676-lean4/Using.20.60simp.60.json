[
    {
        "content": "<p>I'm trying to do the following proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">mem</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">xs.attach.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">mem</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">List.mem_cons</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mem</span> <span class=\"n\">f</span>\n      <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Why is it when I try to simplify <code>{ x_1 // x_1 ∈ x :: xs }</code> to <code>{ x_1 // x_1 = x ∨ x_1 ∈ xs }</code>, the old terms are kept in the tactic state and only new ones are made? How can I do the simplification so that it updates the terms correclt.?</p>",
        "id": 361535910,
        "sender_full_name": "yokatta",
        "timestamp": 1685183954
    },
    {
        "content": "<p>A way to think about how <code>simp at</code> works is that it adds the simplified term as a new hypothesis and deletes the old one if possible (unless <code>simp</code> is using only <code>rfl</code> lemmas, in which case it changes the type of the hypothesis directly). This means that if the goal depends on the original hypothesis, there is a chance it won't be able to delete it.</p>",
        "id": 361540750,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685185181
    },
    {
        "content": "<p>These are some tricky dependent types to work with, but the statement needs a bit more work since it's currently false as stated:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Basic</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">thm</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">mem</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">xs.attach.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ohno</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m.1</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">thm</span> <span class=\"n\">mem</span> <span class=\"n\">f</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span>\n</code></pre></div>",
        "id": 361541972,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685185452
    },
    {
        "content": "<p>Thank you, it should be <code>≤</code>, not <code>&lt;</code>.</p>",
        "id": 361545163,
        "sender_full_name": "yokatta",
        "timestamp": 1685186339
    },
    {
        "content": "<p>Do you have a suggestion for how to deal with this kind of problem where I need to simplify a hypothesis that appears in the goal?</p>",
        "id": 361545591,
        "sender_full_name": "yokatta",
        "timestamp": 1685186450
    },
    {
        "content": "<p>in this particular case you are lucky because the statement is still true without the <code>attach</code></p>",
        "id": 361547923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685187082
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.BigOperators.Basic</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">xs.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n  <span class=\"n\">List.single_le_sum</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.mem_map_of_mem</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">mem</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">xs.attach.map</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">:=</span>\n  <span class=\"n\">thm'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">List.mem_attach</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 361548405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685187203
    },
    {
        "content": "<p>You beat me to it. Yeah, ideally you prove something that's as non-dependent as possible and use that to prove the dependent one</p>",
        "id": 361549918,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685187577
    },
    {
        "content": "<p>Thanks! I wasn't expecting a full proof, though seems like yours would have been much simpler than mine anyways. Out of curiosity, how did you find the right theorem to finish the proof? Just tried using library_search for the first time, is the expectation to go through each of the suggested refinements and find one that seems like it's easier to prove?</p>",
        "id": 361551685,
        "sender_full_name": "yokatta",
        "timestamp": 1685188053
    },
    {
        "content": "<p>I use old school methods to find theorems. I searched for <code>List.sum</code>, found the file that proves stuff like <code>sum_le_sum</code> and looked around because I knew that there would be something relevant in there</p>",
        "id": 361552113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685188150
    }
]