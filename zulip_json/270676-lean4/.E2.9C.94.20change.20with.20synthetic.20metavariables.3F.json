[
    {
        "content": "<p>is there any tactic in lean4 (or lean3) that functions like a combination of <code>set</code> and <code>change</code>? I would like to let the unifier help me avoid writing down a complex expression in <code>set</code>.</p>\n<p>I minimized this from the middle of the proof I was working on (the sequence of tactics used is identical, but in reality the final goal type is not equality):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- (cannot directly apply the constructor here)</span>\n  <span class=\"n\">set</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"c1\">-- complicated expression</span>\n  <span class=\"c1\">-- ^ I would like to instead write something like `change ?l = _`</span>\n  <span class=\"c1\">-- the binding is needed in order to state and use an equality:</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>\n<p>(in my use case, <code>l</code> depends on the particular structure of a program being verified and <code>this</code> is proved with simp, so it's not natural to state it as a general lemma)</p>",
        "id": 324143704,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1674849790
    },
    {
        "content": "<p>would something like <code>generalize</code> help?</p>",
        "id": 324202873,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674868006
    },
    {
        "content": "<p>Is this enough?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- (cannot directly apply the constructor here)</span>\n  <span class=\"n\">set</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n  <span class=\"n\">change</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  n : ℕ</span>\n<span class=\"cm\">  l : ℕ := 0 + n</span>\n<span class=\"cm\">  ⊢ l = n + 0</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 324204060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674868460
    },
    {
        "content": "<p>i see, Kevin's solution does work in lean3 but not in lean4. I think some other threads have noted this change (the placeholder needs to be resolved immediately)</p>",
        "id": 324207332,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1674869532
    },
    {
        "content": "<p>I think <code>generalize</code> is no good for my case because the particular value of <code>l</code> is needed.</p>",
        "id": 324207773,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1674869643
    },
    {
        "content": "<p>generalize I think has a form that introduces an equality for the particular value of l</p>",
        "id": 324207951,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869682
    },
    {
        "content": "<p><code>generalize h : pattern = l</code> or something?</p>",
        "id": 324208036,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1674869700
    },
    {
        "content": "<p>oh, I didn't realize. this incantation works in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">l</span>\n  <span class=\"n\">convert_to</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">_</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_add</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">h</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Eq.refl</span>\n</code></pre></div>\n<p>it seems that <code>generalize</code> is exempt from the metavariable restriction on <code>set</code>.</p>",
        "id": 324209572,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1674870041
    },
    {
        "content": "<p>thanks for the help</p>",
        "id": 324210563,
        "sender_full_name": "Scott Kovach",
        "timestamp": 1674870289
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374083\">Scott Kovach</span> has marked this topic as resolved.</p>",
        "id": 324210841,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674870405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374083\">@Scott Kovach</span> the code I posted was working lean 4 code</p>",
        "id": 324243659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674895372
    }
]