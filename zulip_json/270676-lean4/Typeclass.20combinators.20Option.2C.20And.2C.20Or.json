[
    {
        "content": "<p>Is is possible to somehow implement <code>Option</code>, <code>Or</code>, <code>And</code> for typeclasses? </p>\n<p>For example, <code>Option</code> typeclass would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">OptionTC</span> <span class=\"o\">(</span><span class=\"n\">Class</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Class</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">priority</span><span class=\"o\">:=</span><span class=\"n\">low</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OptionTC</span> <span class=\"n\">Class</span> <span class=\"n\">where</span>\n  <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">Class</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Class</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OptionTC</span> <span class=\"n\">Class</span> <span class=\"n\">where</span>\n  <span class=\"n\">inst</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">c</span>\n</code></pre></div>\n<p>The issue is that you can't write <code>[c : Class]</code> as <code>Class</code> is not a concrete typeclass. </p>\n<p>My application would be to write an array that stores elements in byte array if possible or use normal array if not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- type that has fixed byte size</span>\n<span class=\"kd\">class</span> <span class=\"n\">ByteStorable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">toBytes</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">a.size</span> <span class=\"bp\">-</span> <span class=\"n\">size</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">ByteArray</span>\n  <span class=\"n\">fromBytes</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">a.size</span> <span class=\"bp\">-</span> <span class=\"n\">size</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DataArray</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ByteStorable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">data</span> <span class=\"o\">:</span> <span class=\"n\">ByteArray</span>\n  <span class=\"c1\">-- ...</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">MyArray</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">OptionTC</span> <span class=\"o\">(</span><span class=\"n\">ByteStorable</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">b.inst</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">DataArray</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Array</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>For <code>OptionTC</code> I can imagine generating specialized instance for every concrete class <code>Class</code> but this would not be possible for <code>AddTC</code> or <code>OrTC</code> as it would require an instance for every pair of classes.</p>",
        "id": 402001710,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1699973219
    },
    {
        "content": "<p>Yes, there is a <a href=\"https://github.com/leanprover-community/iris-lean/blob/f63fd7711157e423b74be5c6ac1ba8e13abacfe2/src/Iris/Std/TC.lean#L21-L28\"><code>TCOr</code></a> in iris-lean and it works exactly as you would expect</p>",
        "id": 402023977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699979502
    },
    {
        "content": "<p>Ahh a magical <code>set_option checkBinderAnnotations false</code> and it works as expected :)</p>",
        "id": 402024760,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1699979746
    },
    {
        "content": "<p>hm, maybe the error message should suggest that...</p>",
        "id": 402026208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699980185
    }
]