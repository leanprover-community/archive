[
    {
        "content": "<p>Basic question that I can't quickly find the answer to, but:</p>\n<p>let's say I'm matching some syntax which includes</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span> <span class=\"bp\">...</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"k\">with</span> <span class=\"bp\">$</span><span class=\"n\">as</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"bp\">...</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>I'd like to give a name to the piece of syntax <code> with $as,*</code> so that I can (e.g.) check if it <code>.isSome</code>. I know if it's a simple literal like <code>!</code>, I can say <code>$[!%$h]?</code>. Is there an analogue for more complex syntax, or a way I can group the complex syntax before <code>%</code>, without modifying the existing syntax definition I'm matching?</p>",
        "id": 328351423,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676587778
    },
    {
        "content": "<p>You should be able to do with%$tk</p>",
        "id": 328351919,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676587995
    },
    {
        "content": "<p>What type does as have? I thought it was an option.</p>",
        "id": 328351959,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1676588018
    },
    {
        "content": "<p>Oh, that should be enough in this case, thanks.</p>\n<p>I was wondering, though, if in general (for other cases, since I've run into this more than once) there's a way to name the whole thing (here \"<code>with $as,*</code>\"), or if this is intentionally something we can't do.</p>",
        "id": 328352350,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676588192
    },
    {
        "content": "<p>If it's something that makes sense to talk about as a whole, it should be its own <code>syntax foo := ...</code> declaration so that you can use an antiquotation <code>$f:foo</code> for it</p>",
        "id": 328402068,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1676619722
    }
]