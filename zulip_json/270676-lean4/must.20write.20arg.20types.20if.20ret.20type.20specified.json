[
    {
        "content": "<p>What is the reason for def type holes being filled in before processing the body, when a return type is specified?</p>\n<p>I find myself doing stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myFun</span> <span class=\"o\">(</span><span class=\"n\">something</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">Id</span> <span class=\"n\">MyType</span> <span class=\"k\">from</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>to get around it, which is honestly quite clean for a workaround. But wondering why the restriction is in place / if there are examples where this workaround doesn't actually work.</p>",
        "id": 338067195,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677364304
    },
    {
        "content": "<p>it is to prevent large scale instability when you change the body of a proof. It's the same reason Rust requires full function signatures even though it is quite capable of performing whole program type inference, it is a hard won lesson from languages like ML and Haskell that allow it but have to have conventions saying you really shouldn't</p>",
        "id": 338067494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677364533
    },
    {
        "content": "<p>Okay... but that's the sort of thing linters are for, no? And with the <code>do</code> notation requiring an expected type, I frequently want to write <code>def myThing (x) : IO _ := do ...</code> and let type inference fill in the otherwise easily inferrable signature.</p>",
        "id": 338067932,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677364826
    },
    {
        "content": "<p>It's definitely fine, since the workaround is pretty easy, but sometimes it feels like the compiler getting in the way unnecessarily</p>",
        "id": 338068004,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677364894
    },
    {
        "content": "<p>(Is there a thread discussing the choice? I couldn't find any from zulip searching)</p>",
        "id": 338068022,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677364916
    },
    {
        "content": "<p>Okay but then in the next file over it's rather confusing to see a function called <code>myThing</code> with type <code>IO _</code></p>",
        "id": 338068113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677364960
    },
    {
        "content": "<p>like, I wouldn't recommend the workaround either</p>",
        "id": 338068152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677364987
    },
    {
        "content": "<p>I do that for <code>#eval</code> blocks but never for <code>def</code></p>",
        "id": 338068181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677365012
    },
    {
        "content": "<p>The hole is standing for a concrete type that I just don't want to write out, not a polymorphic type</p>",
        "id": 338068241,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677365054
    },
    {
        "content": "<p>right, so what type is it? the next file wants to know</p>",
        "id": 338068269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677365073
    },
    {
        "content": "<p>that kind of thing is why I hate reading ML code</p>",
        "id": 338068278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677365088
    },
    {
        "content": "<p>hm, I guess I am biased by always reading lean code in editor, where i can just hover to see the type <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 338068333,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677365154
    },
    {
        "content": "<p>ML code without types does become unreadable</p>",
        "id": 338068387,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677365167
    },
    {
        "content": "<p>I would argue that even in-editor it's valuable to write the type. Then you can just see it at a glance, rather than having to hover. Especially if there's many such holes</p>",
        "id": 338282143,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677492080
    }
]