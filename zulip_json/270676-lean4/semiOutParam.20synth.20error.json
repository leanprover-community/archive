[
    {
        "content": "<p>If a <code>semiOutParam</code> class feeds into an <code>outParam</code> class, synthesis will fail if a single instance (e.g., the first tested) of the <code>semiOutParam</code> class is not def-eq to the target type. I encountered this while adding a new feature to Lake. I am not sure if this is a bug or a feature of type class synthesis. So, I am posting the issue here first to verify. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n<span class=\"kd\">def</span> <span class=\"n\">R.mk</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadReaderOf</span> <span class=\"n\">Nat</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.mk</span> <span class=\"n\">default</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">MonadReaderOf</span> <span class=\"n\">Int</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">R.mk</span> <span class=\"n\">default</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">MonadReaderOf.read</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span>\n  <span class=\"n\">read</span> <span class=\"c1\">-- errors</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">result type</span>\n<span class=\"cm\">  MonadReader Int R</span>\n<span class=\"cm\">is not definitionally equal to</span>\n<span class=\"cm\">  MonadReader Nat R</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>One can workaround the error with priorities (to get it to try the instance you want it to first), but I am not sure if that is appropriate or if there is a proper, more principled solution.</p>",
        "id": 371605198,
        "sender_full_name": "Mac Malone",
        "timestamp": 1688261865
    }
]