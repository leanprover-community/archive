[
    {
        "content": "<p>I have a program that outputs all the names from a <code>Lean.Environment</code> object's <code>constants</code> map. However it gives this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">UInt64.ofNatCore'</span>\n</code></pre></div>\n<p>I found an old <a href=\"https://leanprover-community.github.io/archive/stream/270676-lean4/topic/unknown.20package.20'Init'.html\">thread here</a> that says I need to feed in</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>leanpkg<span class=\"w\"> </span>build<span class=\"w\"> </span>bin<span class=\"w\"> </span><span class=\"nv\">LINK_OPTS</span><span class=\"o\">=</span>-rdynamic\n</code></pre></div>\n<p>however this doesn't seem to work for two reasons. one is that we don't have <code>leanpkg</code> now, and if I run</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">LINK_OPTS</span><span class=\"o\">=</span>-rdynamic\nlake<span class=\"w\"> </span>build\nlake<span class=\"w\"> </span>env<span class=\"w\"> </span>build/bin/lean-examples<span class=\"w\"> </span><span class=\"s2\">\"Lake.Environment\"</span>\n</code></pre></div>\n<p>It gives the same error. The code is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Environment</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">strTransform</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Lean.Import</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">li</span> <span class=\"o\">:=</span> <span class=\"n\">s.split</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">c</span> <span class=\"bp\">==</span> <span class=\"sc\">'.'</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">li.foldl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">pre</span> <span class=\"n\">segment</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Name.str</span> <span class=\"n\">pre</span> <span class=\"n\">segment</span><span class=\"o\">)</span> <span class=\"n\">Lean.Name.anonymous</span>\n    <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">(</span><span class=\"n\">args</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.initSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"n\">args.map</span> <span class=\"n\">strTransform</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">env.constants.size</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Size: {n}\"</span>\n</code></pre></div>\n<p>This also thwarts any effort to iterating through the contents of <code>env.constants</code>.</p>\n<p>The lean version I'm using is <code>leanprover/lean4:nightly-2023-05-06</code></p>",
        "id": 357793726,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683880530
    },
    {
        "content": "<p>ok I found the solution. Although I compiled this I found that if I add the following to the deafult target it somehow works...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">supportInterpreter</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 357799547,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683881749
    },
    {
        "content": "<p>I think that's the only lakefile configuration you need to make sure you can import files in a compiled binary. I believe what it does is cause Lean to be linked into the binary, giving you access to the interpreter, which you need to be able to evaluate uncompiled definitions.</p>",
        "id": 357801747,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882288
    },
    {
        "content": "<p>I spent a while recently looking for all the secret options to be able to reliably import files, so in case it's helpful I'll post an importing function here. This one also sets it up to collect InfoTrees, and it has the odd feature that you can inject a list of additional modules to import.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Frontend</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">System</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span>\n\n<span class=\"sd\">/-- Runs the Lean frontend on the given file, adding the given extra modules to the import</span>\n<span class=\"sd\">list of that file. Returns the environment after the import lines, the input context and the frontend state. -/</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">processFileWithModules</span> <span class=\"o\">(</span><span class=\"n\">inputFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extraModules</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Environment</span> <span class=\"bp\">×</span> <span class=\"n\">InputContext</span> <span class=\"bp\">×</span> <span class=\"n\">Frontend.State</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.enableInitializersExecution</span>\n  <span class=\"k\">let</span> <span class=\"n\">leanPath</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span>\n  <span class=\"n\">Lean.initSearchPath</span> <span class=\"n\">leanPath</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputFileContents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">inputFile</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">inputFileContents</span> <span class=\"n\">inputFile.toString</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">context</span>\n  <span class=\"k\">let</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">Options.empty</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setBool</span> <span class=\"bp\">`</span><span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span>\n  <span class=\"k\">let</span> <span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"n\">headerToImports</span> <span class=\"n\">header</span> <span class=\"bp\">++</span> <span class=\"n\">extraModules.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"n\">environment</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"n\">imports</span> <span class=\"n\">options</span>\n  <span class=\"k\">let</span> <span class=\"n\">commandState</span> <span class=\"o\">:</span> <span class=\"n\">Command.State</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">environment</span> <span class=\"n\">messages</span> <span class=\"k\">with</span> <span class=\"n\">infoState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">context</span> <span class=\"n\">state</span> <span class=\"n\">commandState</span>\n  <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"n\">s.commandState.messages.toList</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.print</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">msg.toString</span> <span class=\"o\">(</span><span class=\"n\">includeEndPos</span> <span class=\"o\">:=</span> <span class=\"n\">getPrintMessageEndPos</span> <span class=\"n\">options</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">environment</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357802034,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882350
    },
    {
        "content": "<p><code>Lean.enableInitializersExecution</code> here is important, and without it you'd eventually run into problems importing modules that, for example, use custom attributes.</p>",
        "id": 357802869,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/could.20not.20find.20native.20implementation/near/357802034\">said</a>:</p>\n<blockquote>\n<p>I spent a while recently looking for all the secret options to be able to reliably import files, so in case it's helpful I'll post an importing function here. This one also sets it up to collect InfoTrees, and it has the odd feature that you can inject a list of additional modules to import.</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Frontend</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">System</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Parser</span>\n\n<span class=\"sd\">/-- Runs the Lean frontend on the given file, adding the given extra modules to the import</span>\n<span class=\"sd\">list of that file. Returns the environment after the import lines, the input context and the frontend state. -/</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">processFileWithModules</span> <span class=\"o\">(</span><span class=\"n\">inputFile</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extraModules</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">):</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Environment</span> <span class=\"bp\">×</span> <span class=\"n\">InputContext</span> <span class=\"bp\">×</span> <span class=\"n\">Frontend.State</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">Lean.enableInitializersExecution</span>\n  <span class=\"k\">let</span> <span class=\"n\">leanPath</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.findSysroot</span>\n  <span class=\"n\">Lean.initSearchPath</span> <span class=\"n\">leanPath</span>\n  <span class=\"k\">let</span> <span class=\"n\">inputFileContents</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">inputFile</span>\n  <span class=\"k\">let</span> <span class=\"n\">context</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.mkInputContext</span> <span class=\"n\">inputFileContents</span> <span class=\"n\">inputFile.toString</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">state</span><span class=\"o\">,</span> <span class=\"n\">messages</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">Parser.parseHeader</span> <span class=\"n\">context</span>\n  <span class=\"k\">let</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">Options.empty</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">setBool</span> <span class=\"bp\">`</span><span class=\"n\">trace.Elab.info</span> <span class=\"n\">true</span>\n  <span class=\"k\">let</span> <span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"n\">headerToImports</span> <span class=\"n\">header</span> <span class=\"bp\">++</span> <span class=\"n\">extraModules.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">↦</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"o\">})</span>\n  <span class=\"k\">let</span> <span class=\"n\">environment</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span> <span class=\"n\">imports</span> <span class=\"n\">options</span>\n  <span class=\"k\">let</span> <span class=\"n\">commandState</span> <span class=\"o\">:</span> <span class=\"n\">Command.State</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">Command.mkState</span> <span class=\"n\">environment</span> <span class=\"n\">messages</span> <span class=\"k\">with</span> <span class=\"n\">infoState</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">enabled</span> <span class=\"o\">:=</span> <span class=\"n\">true</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.processCommands</span> <span class=\"n\">context</span> <span class=\"n\">state</span> <span class=\"n\">commandState</span>\n  <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"n\">s.commandState.messages.toList</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.print</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">msg.toString</span> <span class=\"o\">(</span><span class=\"n\">includeEndPos</span> <span class=\"o\">:=</span> <span class=\"n\">getPrintMessageEndPos</span> <span class=\"n\">options</span><span class=\"o\">))</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">environment</span><span class=\"o\">,</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>so this imports a standalone lean file that doesn't belong to any package?</p>",
        "id": 357803321,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683882650
    },
    {
        "content": "<p>Note that this function is not safe to use with <code>#eval</code> since it's supposed to only run on the main thread. With <code>#eval</code> in the editor, it can run multiple times simultaneously, which leads to transient errors where things fail to import. (Sometimes \"refresh file dependencies\" a couple times gets it to work... I don't recommend this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 357803485,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882690
    },
    {
        "content": "<p>Yes, it imports a standalone Lean file. It's up to you to resolve a module name to a filename.</p>",
        "id": 357803574,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882710
    },
    {
        "content": "<p>I'm not saying that you should use it, but I figured I'd paste it here in case you or anyone else is looking for how to load a file. I'd gone through the C++ part of the Lean frontend to see which functions I was missing to get it. I must have also expanded out <code>Lean.importModules</code> since I wanted to be able to inject additional imports.</p>",
        "id": 357804079,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882836
    },
    {
        "content": "<p>For yours, I'd just be sure to add <code>Lean.enableInitializersExecution</code>. This seems to be the main difference</p>",
        "id": 357804213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683882860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/could.20not.20find.20native.20implementation/near/357804213\">said</a>:</p>\n<blockquote>\n<p>For yours, I'd just be sure to add <code>Lean.enableInitializersExecution</code>. This seems to be the main difference</p>\n</blockquote>\n<p>If I add this line in but leave out the <code>supportInterpreter :=</code> I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">uncaught</span> <span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">IO.getRandomBytes'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_IO_getRandomBytes___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_IO_getRandomBytes'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 357807209,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683883541
    },
    {
        "content": "<p>Don't leave out <code>supportInterpreter := true</code>, that's important too</p>",
        "id": 357808566,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683883888
    },
    {
        "content": "<p>\"Embedding Lean\" probably deserves its own chapter in the metaprogramming book</p>",
        "id": 357829093,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683889035
    },
    {
        "content": "<p>I would write it if I understood it beyond \"enable magic options to make work\"</p>",
        "id": 357838300,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683891164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 358170912,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684015251
    },
    {
        "content": "<p>Ah, thanks for this. With <code>Lean.initSearchPath</code>, the <a href=\"https://github.com/leanprover-community/repl\">repl</a> now works when compiled.</p>",
        "id": 358648419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684223496
    }
]