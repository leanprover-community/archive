[
    {
        "content": "<p>I'm having trouble understanding why would <code>rw</code> not work in the mwe below</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.List.Count</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">List</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">MIU</span>\n<span class=\"bp\">|</span> <span class=\"n\">M</span> <span class=\"bp\">|</span> <span class=\"n\">I</span> <span class=\"bp\">|</span> <span class=\"n\">U</span>\n<span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">MIU</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Rules</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">MIU</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">List</span> <span class=\"n\">MIU</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span>\n<span class=\"c1\">-- Add a `U` to the end of any string ending in `I`</span>\n<span class=\"bp\">|</span> <span class=\"n\">rule‚ÇÅ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Rules</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">])</span>\n<span class=\"c1\">-- Double the string after the `M`</span>\n<span class=\"bp\">|</span> <span class=\"n\">rule‚ÇÇ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Rules</span> <span class=\"o\">([</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">([</span><span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Replace any `III` with a `U`</span>\n<span class=\"bp\">|</span> <span class=\"n\">rule‚ÇÉ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Rules</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">I</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Remove any `UU`</span>\n<span class=\"bp\">|</span> <span class=\"n\">rule‚ÇÑ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Rules</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Rules</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.count</span> <span class=\"n\">I</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t.count</span> <span class=\"n\">I</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">g</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n  <span class=\"bp\">¬∑</span> <span class=\"k\">have</span> <span class=\"n\">zz</span> <span class=\"o\">:=</span> <span class=\"n\">count_append</span> <span class=\"n\">I</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zz</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">g</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"bp\">¬∑</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">¬∑</span> <span class=\"gr\">sorry</span>\n  <span class=\"bp\">¬∑</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Can anyone tell me what am I doing wrong here?</p>",
        "id": 345062200,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1679992642
    },
    {
        "content": "<p>An easy way to fix this is to remove the <code>BEq</code> instance deriving from your type <code>MIU</code>. Lean's getting confused wrt. InstBEqMIU and InstBEq.</p>\n<p>Note further you can simply go ahead and <code>rw [count_append] at g</code> (without stating <code>zz</code> explicitly) but maybe you've minimised your use case :).</p>",
        "id": 345065797,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1679993626
    },
    {
        "content": "<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/miu.miu_atom\">docs#miu.miu_atom</a> by the way?</p>",
        "id": 345066631,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1679993831
    },
    {
        "content": "<p>Usually I would not expect <code>deriving</code> to cause problems. Why is this happening in this case?</p>",
        "id": 345066636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679993834
    },
    {
        "content": "<p>I don't know WHY this is happening exactly,<br>\nbut I do know that <code>g</code> requires <code>BEq</code> which it picks up from <code>instBEqMIU</code> which is the one that's generated by <code>deriving BEq</code>, thus we get:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">MIU</span> <span class=\"n\">instBEqMIU</span>\n</code></pre></div>\n<p>and <code>count_append</code>  requires <code>DecidableEq</code>. I am guessing that Lean then picks up the instance as found via <code>[DecidableEq Œ±]  -&gt;  BEq Œ±</code> for the rewrite with <code>count_append</code>, which is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">MIU</span> <span class=\"n\">instBEq</span>\n</code></pre></div>\n<p>which fails the <code>rw</code>.</p>\n<p>Removing the explicit <code>BEq</code> instance lets Lean generate one from <code>DecidableEq</code> for <code>g</code>.<br>\nI guess.</p>",
        "id": 345070675,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1679994905
    },
    {
        "content": "<p>Yeah, that's an interesting gotcha. Is the derived one not defeq to the one obtained from the decidable instance?</p>",
        "id": 345072163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679995343
    },
    {
        "content": "<p>I think the instance in this case represents an algorithm to check for equality and thus the notion of them being defeq by default is out of reach. But I could be wrong! :)</p>\n<p>I have made these two instances explicit and tried to use them both, only the former works (unsurprisingly, it's the one that <code>count_append</code> grabs).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inst‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">MIU</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">instBEq</span> <span class=\"n\">MIU</span> <span class=\"n\">instDecidableEqMIU</span>\n<span class=\"kd\">def</span> <span class=\"n\">inst‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">BEq</span> <span class=\"n\">MIU</span> <span class=\"o\">:=</span> <span class=\"n\">instBEqMIU</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">key</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Rules</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s.count</span> <span class=\"n\">I</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">count</span> <span class=\"n\">_</span> <span class=\"n\">inst‚ÇÅ</span> <span class=\"n\">I</span> <span class=\"n\">t</span> <span class=\"bp\">%</span> <span class=\"mi\">3</span> <span class=\"bp\">‚â†</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n<span class=\"c1\">-- Here, rw [...] is ok</span>\n<span class=\"c1\">-- Not so with @count _ inst‚ÇÇ I t % 3 ‚â† 0</span>\n</code></pre></div>\n<p>Doesn't look defeq-y to me.</p>\n<p>(One can keep the explicit <code>deriving BEq</code> using this method of an explicit override of the instance in what's later known as <code>g</code>.)</p>",
        "id": 345074969,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1679996130
    },
    {
        "content": "<p>You can check to see if they're defeq with <code>example : inst‚ÇÅ = inst‚ÇÇ := rfl</code></p>",
        "id": 345077531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1679996803
    },
    {
        "content": "<p>Oh absolutely. I am not sure why I didn't include it in there; it fails, of course.</p>",
        "id": 345077730,
        "sender_full_name": "Franti≈°ek Silv√°≈°i ü¶â",
        "timestamp": 1679996876
    },
    {
        "content": "<p>Is this <a href=\"https://github.com/leanprover/lean4/pull/2038\">https://github.com/leanprover/lean4/pull/2038</a> ?</p>",
        "id": 345123341,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1680008051
    },
    {
        "content": "<p>Thank you for the help. Hopefully <a href=\"https://github.com/leanprover/lean4/pull/2038\">https://github.com/leanprover/lean4/pull/2038</a> will land soon and resolve this gotcha.</p>",
        "id": 345138817,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1680011298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110293\">Slavomir Kaslev</span> has marked this topic as resolved.</p>",
        "id": 345138831,
        "sender_full_name": "Notification Bot",
        "timestamp": 1680011301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20rw.20tactic.20failing/near/345066631\">said</a>:</p>\n<blockquote>\n<p>Do you know about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/miu.miu_atom\">docs#miu.miu_atom</a> by the way?</p>\n</blockquote>\n<p>I do but I wanted to take it in another direction and started from scratch. The plan was to define a category with objects MIU strings and morphisms given by derivations using the four rules and then define Grothendieck topology and the classifiying topos of the (toy MIU) theory following Olivila Caramello's approach from \"Theories, Sites, Toposes: Relating and Studying Mathematical Theories Through Topos-theoretic 'bridges'\".</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Quiver</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MIU</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">Rules</span><span class=\"o\">‚ü©</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">Paths</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MIU</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Category</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 345140204,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1680011606
    },
    {
        "content": "<p>Out of interest, what's the definition of the Grothendieck topology? The classifying topos is just the sheaves of sets for this topology? What can people say about this topos? We can take this offline if you want.</p>",
        "id": 345141569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680011901
    },
    {
        "content": "<p>I'm hoping to adapt the definition of  syntactic topology from slide 48 here <a href=\"https://aroundtoposes.com/wp-content/uploads/2021/07/LafforgueSlidesToposesOnline.pdf\">https://aroundtoposes.com/wp-content/uploads/2021/07/LafforgueSlidesToposesOnline.pdf</a> as <code>C</code> above is the syntactic category of the MIU theory.</p>",
        "id": 345142505,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1680012091
    },
    {
        "content": "<p>I'm not sure what can be proved about or using this topos as I'm doing it mostly to get better understanding of the ideas myself.</p>",
        "id": 345143634,
        "sender_full_name": "Slavomir Kaslev",
        "timestamp": 1680012289
    }
]