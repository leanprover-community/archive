[
    {
        "content": "<p>Trying to update MIL, I get the message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">mil</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">option</span> <span class=\"bp\">`</span><span class=\"n\">moreServerArgs</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">deprecated</span> <span class=\"k\">in</span> <span class=\"n\">favor</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">moreServerOptions</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>without a link to a webpage explaining how to migrate to <code>moreServerOptions</code>. I didn't find anything in <a href=\"https://github.com/leanprover/lean4/blob/master/RELEASES.md\">https://github.com/leanprover/lean4/blob/master/RELEASES.md</a>. Searching and replacing <code>moreServerArgs</code> with <code>moreServerOptions</code> does not work. This isn't the greatest UX...</p>",
        "id": 405850002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701703962
    },
    {
        "content": "<p>It's also most likely not the option you want to use, you want <code>leanOptions</code></p>",
        "id": 405850719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704168
    },
    {
        "content": "<p>what does the lakefile look like?</p>",
        "id": 405850839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704204
    },
    {
        "content": "<p><a href=\"https://github.com/avigad/mathematics_in_lean_source/blob/master/lakefile.lean\">https://github.com/avigad/mathematics_in_lean_source/blob/master/lakefile.lean</a></p>",
        "id": 405850998,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701704247
    },
    {
        "content": "<p>Probably copy-pasted from the mathlib lakefile</p>",
        "id": 405851040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701704259
    },
    {
        "content": "<p>Funnily enough, the hover for <code>moreServerArgs</code> says instead</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">mil</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">option</span> <span class=\"bp\">`</span><span class=\"n\">moreServerArgs</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">deprecated</span> <span class=\"k\">in</span> <span class=\"n\">favor</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">moreGlobalServerArgs</span><span class=\"bp\">`</span>\n</code></pre></div>",
        "id": 405851396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701704350
    },
    {
        "content": "<p>I replaced <code>moreServerArgs</code> by <code>moreGlobalServerArgs</code> and it all went well.</p>",
        "id": 405851512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1701704380
    },
    {
        "content": "<p>For some reason I'm not in a mood to find this funny.</p>",
        "id": 405851521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701704382
    },
    {
        "content": "<p>this is what you want now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">mil</span> <span class=\"n\">where</span>\n  <span class=\"n\">leanOptions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">pp.unicode.fun</span><span class=\"o\">,</span> <span class=\"n\">true</span><span class=\"o\">⟩,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">autoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">⟨</span><span class=\"bp\">`</span><span class=\"n\">relaxedAutoImplicit</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">⟩]</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MIL</span> <span class=\"n\">where</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"bp\">@</span><span class=\"s2\">\"master\"</span>\n</code></pre></div>",
        "id": 405851524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704383
    },
    {
        "content": "<p>Thanks Mario. Where did you get this information?</p>",
        "id": 405851971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701704487
    },
    {
        "content": "<p>I was involved in the change</p>",
        "id": 405852036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704506
    },
    {
        "content": "<p>Breaking changes like this without a smooth transition pathway are very annoying UX-wise. I agree with Patrick. Last week alone there has been a few tactic changes, and now lake changes I have spent hours to fix these issues (and I still have some lean projects to update. Dreading this).</p>",
        "id": 405852221,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701704540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/405851512\">said</a>:</p>\n<blockquote>\n<p>I replaced <code>moreServerArgs</code> by <code>moreGlobalServerArgs</code> and it all went well.</p>\n</blockquote>\n<p>Don't do this. While this is the literal replacement for the old option, it causes the same issue that these new options are trying to solve (in particular the thing where opening Std from mathlib is broken)</p>",
        "id": 405852275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704553
    },
    {
        "content": "<p>Particularly when it <a href=\"#narrow/stream/270676-lean4/topic/Invalid.20lake.20configuration/near/405628534\">affects projects not using any variants of these options directly</a> .</p>",
        "id": 405852468,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701704596
    },
    {
        "content": "<p>yes, I'm very annoyed at this whole process, migration support in lake is really bad right now</p>",
        "id": 405852656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/405852221\">said</a>:</p>\n<blockquote>\n<p>Breaking changes like this without a smooth transition pathway are very annoying UX-wise. I agree with Patrick.</p>\n</blockquote>\n<p>A changelog entry would already be a huge improvement. A link to a webpage explaining what to change would be even better. An automatic upgrade would be paradise, but probably tricky to implement.</p>",
        "id": 405852672,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701704638
    },
    {
        "content": "<p>My bad. I agree that this is confusing; it's from <a href=\"https://github.com/leanprover/lean4/pull/2858\">lean4#2858</a> and I should've adjusted the release notes in time before release with additional information instead of there just being a link to the PR.</p>",
        "id": 405852754,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1701704648
    },
    {
        "content": "<p>maybe someday we can just have json/toml/yaml lakefiles and then stuff won't break all the time <span aria-label=\"star struck\" class=\"emoji emoji-1f929\" role=\"img\" title=\"star struck\">:star_struck:</span></p>",
        "id": 405853123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704732
    },
    {
        "content": "<p>I managed to update MIL and I may even manage to be on time for my lecture if there is no traffic jam.</p>",
        "id": 405853180,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701704747
    },
    {
        "content": "<blockquote>\n<p>maybe someday we can just have json/toml/yaml lakefiles and then stuff won't break all the time</p>\n</blockquote>\n<p>Not that I am disagreeing, but <code>lake</code> changing the name of a field could happen just the same? That particular problem doesn't seem to be fixed by going to a declarative configuration.</p>",
        "id": 405853510,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701704815
    },
    {
        "content": "<p>yes, because it's really easy to implement automatic migrations with those formats</p>",
        "id": 405853605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704838
    },
    {
        "content": "<p>indeed lake already has migration of the lake-manifest across 7 versions</p>",
        "id": 405853768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704875
    },
    {
        "content": "<p>with lean, if the parser changes you are screwed</p>",
        "id": 405854053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701704935
    },
    {
        "content": "<p>Why is lake packaged with the toolchain? What breaks if lake is separately versioned and updated?</p>",
        "id": 405854553,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701705040
    },
    {
        "content": "<p>Is it mathlib cache?</p>",
        "id": 405854579,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701705047
    },
    {
        "content": "<p>mathlib cache is separately versioned and updated</p>",
        "id": 405854667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705068
    },
    {
        "content": "<p>It’d be possible to keep supporting <code>moreServerArgs</code> in addition to <code>moreGlobalServerArgs</code>, instead of writing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">warning</span><span class=\"o\">:</span> <span class=\"n\">mil</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">option</span> <span class=\"bp\">`</span><span class=\"n\">moreServerArgs</span><span class=\"bp\">`</span> <span class=\"n\">is</span> <span class=\"n\">deprecated</span> <span class=\"k\">in</span> <span class=\"n\">favor</span> <span class=\"n\">of</span> <span class=\"bp\">`</span><span class=\"n\">moreGlobalServerArgs</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>wouldn’t it?</p>\n<p>Ok, maybe the point is that it’s more annoying to have old cruft in the signature, while some code to support old fields names in a .Xml file doesn’t bother anyone.</p>",
        "id": 405854693,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701705074
    },
    {
        "content": "<p>All of the options are supported</p>",
        "id": 405854758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705091
    },
    {
        "content": "<p>not sure if there is a way to turn the warning off though</p>",
        "id": 405854815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705104
    },
    {
        "content": "<p>The reason I ask is, if lake were separately versioned and updatable, then elan could manage lake updates, and lake update could check the lake version of the next package update (say mathlib) and warn users that they should run something like <code>elan update lake</code> first. This works ofc with one additional assumption: New lake versions can read older lake files upto some point and rewrite them into the new version.</p>",
        "id": 405855037,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701705157
    },
    {
        "content": "<p>elan manages programs that are bundled with lean</p>",
        "id": 405855590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705274
    },
    {
        "content": "<p>currently it has no support for separately versioned things or external tools, although I would really like it to</p>",
        "id": 405855744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705310
    },
    {
        "content": "<p>To explicitly clear up some of the confusion:</p>\n<ul>\n<li><code>moreGlobalServerArgs</code> is just <code>moreServerArgs</code> renamed, but it has the issue that it applies the options declared there to all packages, so you should typically not use it</li>\n<li><code>moreServerOptions</code> is the direct replacement for <code>moreServerArgs</code> that does not have this issue</li>\n<li><code>leanOptions</code> feeds into both <code>moreServerOptions</code> and <code>moreLeanArgs</code>, thereby eliminating the need to declare both even when they're typically the same set of options</li>\n</ul>",
        "id": 405855789,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1701705321
    },
    {
        "content": "<p>Lake has been progressing rapidly lately, it's doing it in a non-backward-compatible way. It has <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3\">broken ABI to cause deleting the whole project</a>, and many times it has broken existing lakefile by removing or renaming (or even adding) options (e.g. <code>weakLeanArgs</code>, <code>occs</code>, <code>buildO</code> signature,  <code>:=</code>, <code>leanOption</code>) without a deprecation period. It also adds new features that turn out to have ramifications, e.g. <a href=\"#narrow/stream/270676-lean4/topic/Listing.20Lake.20facets.3F/near/402051553\">lakefile.olean saving state</a>, <a href=\"#narrow/stream/304774-FLT/topic/Mathlib.20PRs/near/403148195\"><code>.lake</code></a>,  <a href=\"#narrow/stream/270676-lean4/topic/Updating.20using.20lake.20again/near/402522283\"><code>lake exe cache get</code></a> and <a href=\"#narrow/stream/270676-lean4/topic/Invalid.20lake.20configuration/near/405628534\">copying toolchain</a> after <code>lake update</code>.</p>\n<p>With all due respect, Lake indeed has become one of the most bleeding edges of Lean for end users. (Other changes will mostly cause complicated bumping PRs of Std and Mathlib, but seldom affects end users it seems)</p>",
        "id": 405855821,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701705329
    },
    {
        "content": "<p>There are many programs that could benefit from that, like <code>doc-gen</code> and <code>lean4export</code></p>",
        "id": 405855825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705330
    },
    {
        "content": "<p>Shouldn't elan eventually  work with reservoir?</p>",
        "id": 405856059,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701705379
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221921\">Marc Huisinga</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/405855789\">said</a>:</p>\n<blockquote>\n<ul>\n<li><code>leanOptions</code> feeds into both <code>moreServerOptions</code> and <code>moreLeanArgs</code>, thereby eliminating the need to have both at the same time</li>\n</ul>\n</blockquote>\n<p>and in particular, all existing uses of the <code>moreServerArgs</code> option were for people setting project level options like <code>autoImplicit=true</code> and these should be <code>leanOptions</code> on the <code>package</code></p>",
        "id": 405856183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701705410
    },
    {
        "content": "<p>On the topic of removed features without migration assistance, <code>lake print-paths</code> no longer exists on the latest version, and there is no line in the release notes about this. I'm looking at a shell script for mathport which contains this command, and am not sure what it did or what the best replacement is</p>",
        "id": 406002555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 406002568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765168
    },
    {
        "content": "<p>Mario, didn't you review the PR that changed it? <a href=\"https://github.com/leanprover-community/mathlib4/pull/2858\">#2858</a><br>\nThe reason it's not listed in the changelog is that it's a purely internal command, it's not even listed in <code>lake --help</code></p>",
        "id": 406003108,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701765379
    },
    {
        "content": "<p>It was \"replaced\" by <code>setup-file</code> with a change in functionality</p>",
        "id": 406003143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765402
    },
    {
        "content": "<p>An extension of functionality</p>",
        "id": 406003168,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701765416
    },
    {
        "content": "<p>The puzzle remains though</p>",
        "id": 406003205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765431
    },
    {
        "content": "<p>this script calls <code>lake print-paths</code> without arguments</p>",
        "id": 406003229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765443
    },
    {
        "content": "<p>Do you have a link to the script in question?</p>",
        "id": 406003235,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1701765444
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib3port/blob/master/update.sh#L31\">https://github.com/leanprover-community/mathlib3port/blob/master/update.sh#L31</a></p>",
        "id": 406003296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765470
    },
    {
        "content": "<p>Wow... that <em>is</em> a puzzling line</p>",
        "id": 406003413,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701765504
    },
    {
        "content": "<p>I suspect that this is doing something like preparing lake's auxiliary files</p>",
        "id": 406003473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765531
    },
    {
        "content": "<p>is there a <code>lake nop</code>?</p>",
        "id": 406003499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765542
    },
    {
        "content": "<p>This doesn't build the project, right?</p>",
        "id": 406003593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765586
    },
    {
        "content": "<p><code>lake env</code> would be one non-internal way I think</p>",
        "id": 406003599,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701765590
    },
    {
        "content": "<p>It shouldn't without further arguments, no</p>",
        "id": 406003633,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701765602
    },
    {
        "content": "<p>Oh I think I see what this is for, it prints the paths in the CI log</p>",
        "id": 406004451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701765912
    },
    {
        "content": "<p>actually nvm it fetches oleans</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">target</span> <span class=\"n\">fetchOleans</span> <span class=\"o\">(</span><span class=\"n\">_pkg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">libDir</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">__dir__</span> <span class=\"bp\">/</span> <span class=\"s2\">\"build\"</span> <span class=\"bp\">/</span> <span class=\"s2\">\"lib\"</span>\n  <span class=\"n\">IO.FS.createDirAll</span> <span class=\"n\">libDir</span>\n  <span class=\"k\">let</span> <span class=\"n\">oldTrace</span> <span class=\"o\">:=</span> <span class=\"n\">Hash.ofString</span> <span class=\"n\">tag</span>\n  <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">buildFileUnlessUpToDate</span> <span class=\"o\">(</span><span class=\"n\">libDir</span> <span class=\"bp\">/</span> <span class=\"n\">oleanTarName</span><span class=\"o\">)</span> <span class=\"n\">oldTrace</span> <span class=\"k\">do</span>\n    <span class=\"n\">logInfo</span> <span class=\"s2\">\"Fetching oleans for Mathbin\"</span>\n    <span class=\"n\">untarReleaseArtifact</span> <span class=\"n\">releaseRepo</span> <span class=\"n\">tag</span> <span class=\"n\">oleanTarName</span> <span class=\"n\">libDir</span>\n  <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n</code></pre></div>",
        "id": 406004725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766029
    },
    {
        "content": "<p>I guess this is listed as an <code>extraDepTarget</code> of the package so it gets run in <code>lake print-paths</code></p>",
        "id": 406004858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766083
    },
    {
        "content": "<p>I don't think <code>lake env</code> will run this</p>",
        "id": 406004898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766092
    },
    {
        "content": "<p>An interesting puzzle indeed. Does <code>lake build fetchOleans</code> not work?</p>",
        "id": 406005101,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701766179
    },
    {
        "content": "<p>But to give the most direct equivalent, <code>lake setup-file Mathbin</code> should <em>not</em> build any Lean files</p>",
        "id": 406005328,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1701766260
    },
    {
        "content": "<p>note that I have to wait an hour to test any change to the script so I'm making a test case instead</p>",
        "id": 406005627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766361
    },
    {
        "content": "<p>I see that <code>extraDep</code> is a \"facet\", I assume that means I can do something like <code>lake build mathlib3port:extraDep</code>?</p>",
        "id": 406005757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766410
    },
    {
        "content": "<p>huh, lake's readme does not say what the syntax of <code>lake build &lt;....&gt;</code> is</p>",
        "id": 406006325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766588
    },
    {
        "content": "<p><code>lake build fetchOleans</code> does seem to work, as does <code>lake build :extraDep</code></p>",
        "id": 406007603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766969
    },
    {
        "content": "<p>I'm going to do the former since it's a bit clearer for future mario</p>",
        "id": 406007659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701766992
    },
    {
        "content": "<p>(and it has less of a look of something that will break tomorrow)</p>",
        "id": 406007752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701767031
    },
    {
        "content": "<p>The release notes now contain a short migration guide for the Lakefile change. Sorry for the confusion.</p>",
        "id": 406016691,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1701770036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/405853768\">said</a>:</p>\n<blockquote>\n<p>indeed lake already has migration of the lake-manifest across 7 versions</p>\n</blockquote>\n<p>No it doesn't? It only migrates from v5+. Second, it is just as easy to migrate declarative options across lakefiles as it is to migrate flexible declarative formats like YAML/TOML which have customizable formats/comments (it would just be a matter of reprinting the file). The manifest is easier to auto-update only because it is not meant to be edited by humans and thus does not need to preserve formatting.</p>",
        "id": 406105595,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701795649
    },
    {
        "content": "<p>That said,  I do agree that Lake should strive to be backwards-compatible at least for some deprecation period. That is why it issues deprecation warnings. If there are problems with the current deprecation approach, please report them and feel free to suggest  possible solutions. I would like to make Lake upgrades more seamless.</p>",
        "id": 406107268,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701796097
    },
    {
        "content": "<p>One thing I have noticed is that a lot of breakage comes from upgrading between release candidates or between a release candidate and a stable release. Thus, it worth noting that release candidates are not stable and it is expected  for there to possibly be significant breakages between them and other releases.</p>",
        "id": 406107686,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701796228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406107686\">said</a>:</p>\n<blockquote>\n<p>One thing I have noticed is that a lot of breakage comes from upgrading between release candidates or between a release candidate and a stable release. Thus, it worth noting that release candidates are not stable and there is expected to possibly be significant breakages between them and other releases.</p>\n</blockquote>\n<p>Even if this is the case, as you explained in the community meeting, there is no current option to jump only to stable releases, so the problem remains unavoidable unless one precisely times their updates.</p>",
        "id": 406108109,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701796369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406108109\">said</a>:</p>\n<blockquote>\n<p>As you explained in the community meeting, there is no current option to jump only to stable releases, so the problem remains.</p>\n</blockquote>\n<p>What do you mean by this? I am sorry, but I do not recall the context for this explanation. One can certainly update Lean/Std/Mathlib to only stable releases.</p>",
        "id": 406108425,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701796482
    },
    {
        "content": "<p>(e.g., use only Lean stable toolchains, and require the dependencies at <code>@ \"stable\"</code>.)</p>",
        "id": 406108625,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701796553
    },
    {
        "content": "<p>Back in the meeting I asked if it is possible to <code>lake update</code> only to stable toolchains (include deps like mathlib)</p>",
        "id": 406109272,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701796771
    },
    {
        "content": "<p>currently <code>lake update</code> takes us to whatever rc happens to be latest on mathlib</p>",
        "id": 406109340,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701796795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span> Oh, sorry. I guess I was confused about the goal. I was explaining that <code>lake update</code> itself has no such specific option. However, if the goal is just to remain on stable toolchains, you can depend on e.g., Mathlib's <code>stable</code> branch instead of <code>master</code>.</p>",
        "id": 406109612,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701796902
    },
    {
        "content": "<p>Thanks. This is new to me. Could this be the default setting when <code>lake new &lt;ProjectName&gt; math</code> generates a new project?</p>",
        "id": 406110288,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701797148
    },
    {
        "content": "<p>or at least optionally so? On the vscode mathlib setup process, this would save one round of update + cache</p>",
        "id": 406110407,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701797182
    },
    {
        "content": "<p>Good idea! Could you create an issue for that? I working on Reservoir until holiday vacation, so I will likely not get around to it soon (sorry!), so the issue will help keep it in mind. Alternatively, if you want to PR the change, I would be happy to review it! One design thought I had is might be wise to depend on <code>stable</code> only  if we are on a stable toolchain (i.e., <code>Lean.specialDescr</code> is empty) and otherwise use <code>master</code>?</p>",
        "id": 406110991,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701797418
    },
    {
        "content": "<p>My idea was to change the math template to have <code>@ \"stable\"</code> after the github link when new is called. Maybe add an extra command </p>\n<ol>\n<li><code>lake new &lt;proj&gt; math stable</code> : Generate lake file with <code>@ \"stable\"</code> for the mathlib require line.</li>\n<li><code>lake new &lt;proj&gt; math latest</code> : Generate current lakefile.</li>\n<li><code>lake new &lt;proj&gt; math</code> : Defaults to <code>lake new &lt;proj&gt; math stable</code> (or <code>latest</code> if there is significant opposition to defaulting to stable).</li>\n</ol>",
        "id": 406112321,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701797944
    },
    {
        "content": "<p>From what I understand, <code>lake</code> fixes the toolchain according to mathlib anyway.</p>",
        "id": 406112541,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701798028
    },
    {
        "content": "<p>so the initial toolchain i.e. before project creation doesn't matter.</p>",
        "id": 406112562,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701798035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406112562\">said</a>:</p>\n<blockquote>\n<p>so the initial toolchain i.e. before project creation doesn't matter.</p>\n</blockquote>\n<p>True, the question is just whether a user already on a non-stable toolchain wans to be migrated to stable or just continue using whatever <code>master</code> mathlib is using. However, I think defaulting to the safest option is probably smartest. More explorative users can modify the lakefile themselves should they so desire. Thus, a universal default to <code>stable</code> seems fine.</p>",
        "id": 406114301,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701798621
    },
    {
        "content": "<p>Adding additional arguments to the template generation would be a more significant change, and one I think would be more complicated to review (i.e., it is something I would likely need to  do myself).</p>",
        "id": 406114606,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701798726
    },
    {
        "content": "<p>I'll get on with the Issue and then PR.</p>",
        "id": 406114608,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701798727
    },
    {
        "content": "<p>Oh okay. For now I will just change the math template to point mathlib4 dep to the stable branch by default</p>",
        "id": 406114664,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701798752
    },
    {
        "content": "<p>I don't think this is a good idea.</p>",
        "id": 406114987,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701798889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> would you like to elaborate?</p>",
        "id": 406115285,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701799003
    },
    {
        "content": "<p>Mathlib users typically want the latest version, not an ancient Mathlib (where ancient means more than one week old).</p>",
        "id": 406115377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701799040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Is that as true for mathlib users (i.e., people who writing a package depending on it) and as mathlib developers/contributors (i.e., those working inside the repository)?</p>",
        "id": 406115616,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701799121
    },
    {
        "content": "<p>I think the issue here is that the set of people that depend on mathlib is almost a subset of the people that contribute to it.</p>",
        "id": 406115743,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1701799162
    },
    {
        "content": "<p>Yes, I meant users. Of course Mathlib developers need the master branch.</p>",
        "id": 406115803,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701799181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406114664\">said</a>:</p>\n<blockquote>\n<p>Oh okay. For now I will just change the math template to point mathlib4 dep to the stable branch by default</p>\n</blockquote>\n<p>IMHO the conversation above is just like other conversations that drove lake to suddenly change its default behavior, creating new paper cuts.</p>\n<p>If lake can add new features without immediately dropping the old behavior (the default one or the one with the same configurations), there will be less paper cuts.</p>",
        "id": 406116762,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701799433
    },
    {
        "content": "<p>whence this suggestion. We could modify 3 to make <code>latest</code> the default. Of course the extension should then offer an option for creating a stable project with mathlib.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406112321\">said</a>:</p>\n<blockquote>\n<p>My idea was to change the math template to have <code>@ \"stable\"</code> after the github link when new is called. Maybe add an extra command </p>\n<ol>\n<li><code>lake new &lt;proj&gt; math stable</code> : Generate lake file with <code>@ \"stable\"</code> for the mathlib require line.</li>\n<li><code>lake new &lt;proj&gt; math latest</code> : Generate current lakefile.</li>\n<li><code>lake new &lt;proj&gt; math</code> : Defaults to <code>lake new &lt;proj&gt; math stable</code> (or <code>latest</code> if there is significant opposition to defaulting to stable).</li>\n</ol>\n</blockquote>",
        "id": 406116931,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701799488
    },
    {
        "content": "<p>This way the change is _slightly_ more complicated from dev end, but transparent to current users who don't care for the stable option.</p>",
        "id": 406117211,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701799576
    },
    {
        "content": "<blockquote>\n<p>Of course the extension should then offer an option for creating a stable project with mathlib.</p>\n</blockquote>\n<p>I would prefer to keep the UI for project initialization simple and not offer options that are likely to confuse new users.</p>",
        "id": 406117380,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1701799636
    },
    {
        "content": "<p>Someone who is new to Lean won't be able to answer the question of whether they should depend on a stable or the latest version of Mathlib.</p>",
        "id": 406117593,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1701799708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"221921\">@Marc Huisinga</span>  : Normally I agree but there is a good reason to offer this complexity. A new mathlib user should probably stick to stable so as to not be hit by RC whirlwinds. The exception is when they are being taught by one of the experts here who keep up with the latest changes. In this case the instruction will be simple: \"choose latest\". Even if a student accidentally chooses stable, The expert teacher can delete the <code>@ \"stable\"</code> bit and run <code>lake update</code> and everything is hunky dory.</p>\n<p>Since there is debate for now, I'll create the issue when the dust is settled and I have some spare time again.</p>",
        "id": 406117756,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701799766
    },
    {
        "content": "<p>If the new users are not well-versed in lean to understand the latest changes in the RC and also not being guided by say <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> or <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>,  then they could be playing with fire (specifically lake update here, but also something like the 4.1.0 rc1 - 4.1.0-rc2 issue, which was far more severe)</p>",
        "id": 406118664,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701800096
    },
    {
        "content": "<p>Maybe only teaching projects will depend on stable Mathlib, formalization projects is more likely to need the latest Mathlib with many PRs merged every day. I also can't think of any other projecrs that use Mathlib would have chosen stable.</p>\n<p>Waiting for a stable release to avoid paper cuts, is not an approach that scales.</p>",
        "id": 406118802,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701800154
    },
    {
        "content": "<p>teaching is where you want to have the least setup trouble.</p>",
        "id": 406118939,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701800196
    },
    {
        "content": "<blockquote>\n<p>also can't think of any other projecrs that use Mathlib would have chosen stable.</p>\n</blockquote>\n<p>I can. My projects will sail along perfectly well without Mathlib's latest updates, except maybe once in a while when some nice tactic like the inequality rewrite one or omega lands or there are some nice new inequalities or norm_num extensions.</p>",
        "id": 406119057,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701800249
    },
    {
        "content": "<p>My experience with teaching using Lean 4 so far is that nothing can save students. It's amazing how they are able to screw up things. Many times I was only able to tell them to restart from scratch creating a project. I have no idea what they are doing.</p>",
        "id": 406119241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701800309
    },
    {
        "content": "<p>Dont worry patrick, this behavior is not limited to students :P</p>",
        "id": 406122566,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1701801504
    },
    {
        "content": "<p>If nightly Lean has frequent paper cuts, that's understandable for rapid progressing. If this is frequently happening to release candidates which Mathlib is using it as a semi-stable base, this is far from ideal, and a practice far from normal software release model. When this is happening to a theorem prover that is expected to be used to prove math and build reliable software, the frustration of users is understandable. And when these issues affecting many active users are not mentioned (not the issue, and not how it's fixed or replaced with something else unexpected) in release notes, but only scattered in Zulip chats, it's probably not the best way to handle this.</p>",
        "id": 406122604,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701801517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406122604\">said</a>:</p>\n<blockquote>\n<p>If nightly Lean has frequent paper cuts, that's understandable for rapid progressing. If this is frequently happening to release candidates which Mathlib is using it as a semi-stable base, this is far from ideal, and a practice far from normal software release model. When this is happening to a theorem prover that is expected to be used to prove math and build reliable software, the frustration of users is understandable. And when these issues affecting many active users are not mentioned (not the issue, and not how it's fixed or replaced with something else unexpected) in release notes, but only scattered in Zulip chats, it's probably not the best way to handle this.</p>\n</blockquote>\n<p>I get the frustration. I have it too. Last week it was simp and norm_num. This week it is lake update. But your reasons are also precisely why it makes sense for unguided new users to jump only from stable to stable.</p>",
        "id": 406126630,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701802991
    },
    {
        "content": "<p>I just read <a href=\"https://github.com/leanprover/lean4/commit/7ff7cf9b5a7246d584a4b31fad35feb72ce1adf8\">https://github.com/leanprover/lean4/commit/7ff7cf9b5a7246d584a4b31fad35feb72ce1adf8</a> and realized it has a perfectly well written commit log, explaining every change in detail, and a proper deprecation period seems to exist. May the issue is even if lake is only adding new features, toolchain inconsistency could still cause issues, and end users don't really have a reliable way to avoid it or figure out how to get back to normal. The safety tip and warning regarding what's potentially  dangerous is quickly changing in the last few weeks. I miss an experience writing rust, if I have done something wrong or I triggered an edge case that's still being discussed and fixed, in the error message, it's explained to me succinctly, with a simple tip to fix, and a link to the issue tracking the patch.</p>",
        "id": 406127037,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701803120
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406126630\">said</a>:</p>\n<blockquote>\n<p>I get the frustration. I have it too. Last week it was simp and norm_num. This week it is lake update. But your reasons are also precisely why it makes sense for unguided new users to jump only from stable to stable.</p>\n</blockquote>\n<p>It's possibly safer for status quo, but it's far from ideal for the long run, especially with many active user that needs Mathlib master are also the ones that probably never would be guided enough to avoid undefined behavior when API/API changes without a smooth migration process. A jump between stable releases could involve even more little details to migrate, facing a combination of various issues that need more rounds of exchange on Zulip as long as the current practice doesn't change.</p>",
        "id": 406143800,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701803974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406127037\">said</a>:</p>\n<blockquote>\n<p>I just read <a href=\"https://github.com/leanprover/lean4/commit/7ff7cf9b5a7246d584a4b31fad35feb72ce1adf8\">https://github.com/leanprover/lean4/commit/7ff7cf9b5a7246d584a4b31fad35feb72ce1adf8</a> and realized it has a perfectly well written commit log, explaining every change in detail, and a proper deprecation period seems to exist.</p>\n</blockquote>\n<p>Yes, I believe, at least in this case, the problem is not a lack of information existing or being noted in the release notes, but rather an issue of discovery and highlighting.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406127037\">said</a>:</p>\n<blockquote>\n<p>May the issue is even if lake is only adding new features, toolchain inconsistency could still cause issues, and end users don't really have a reliable way to avoid it or figure out how to get back to normal. </p>\n</blockquote>\n<p>Another issue is that we don't know exactly what behaviors users are relying on, so it is easy to make a change which we believe should be non-breaking (like the change in the internal <code>lake print-paths</code> command) and still break some unknown edge case that is depending on it.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406127037\">said</a>:</p>\n<blockquote>\n<p>I miss an experience writing rust, if I have done something wrong or I triggered an edge case that's still being discussed and fixed, in the error message, it's explained to me succinctly, with a simple tip to fix, and a link to the issue tracking the patch.</p>\n</blockquote>\n<p>Currently Lean/Lake error messages/warnings are often very succinct, which in my experience is rather standard for developer software. Now that is not to say it is necessarily best practice. For example, I know debugging error messages is often a pain point for students and other new users.  Thus, if more verbosity and hyperlinks to reference documentation would help, that might be a good style change to apply to future deprecation notices and new or revamped error messages.</p>",
        "id": 406146509,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701805103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406122604\">said</a>:</p>\n<blockquote>\n<p>If nightly Lean has frequent paper cuts, that's understandable for rapid progressing. If this is frequently happening to release candidates which Mathlib is using it as a semi-stable base, this is far from ideal.</p>\n</blockquote>\n<p>Yes, it appears to me that the underlying problem here is that Mathlib users are relying on release candidates and this creates the expectation that they will be semi-stable, which is not the intent. Neither is it really possible since the release candidates are the vector by which we aim to quality test a beta version of Lean to ensure the final version is widely stable.</p>",
        "id": 406147530,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701805523
    },
    {
        "content": "<p>The conundrum is that we need some representative sample of the community to be using nightlies and/or release candidates to beta test them to ensure that the resulting stable is, in fact, stable for the rest of the community. The problem is that if too many people are on the release candidate, then there is no split. On the other hand, if there are too few, more unanticipated breakages will arise.</p>",
        "id": 406148285,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701805860
    },
    {
        "content": "<p>The hope behind the mathlib <code>master</code> / <code>stable</code> split was  that <code>master</code> being on a release candidate would give us feedback on how to properly ensure the stable is stable via the Mathlib developers while allowing new Mathlib users to stay on the then well-tested versions via <code>stable</code>.</p>",
        "id": 406148638,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701806025
    },
    {
        "content": "<p>An issue appears to be that Mathlib wants to follow an essentially nightly release model with frequent breakage while not expecting to rely on a Lean doing the same. Or, at least, that is my takeaway from this:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406115377\">said</a>:</p>\n<blockquote>\n<p>Mathlib users typically want the latest version, not an ancient Mathlib (where ancient means more than one week old).</p>\n</blockquote>",
        "id": 406149094,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701806223
    },
    {
        "content": "<p>I think using <code>stable</code> for mathlib is fine if it is actually somewhat more stable than <code>master</code>.  Is it more stable though? My understanding of the current workflow is that the <em>lean</em> version is a bit more stable, but <em>mathlib</em> is still just on an arbitrary commit that is (on average) equally buggy as <code>master</code>.</p>\n<p>If we had a stable branch that has no new \"features\" but only \"bug fixes\" for a period of time (whatever \"feature\"/\"bug fix\" means exactly in the context of mathlib), I think that would be the preferred default. However, creating/maintaining such a branch sounds nontrivial (I'm not volunteering).</p>\n<p>I'm saying that I would prefer stable instead of master, because when I updated my Lean course repo to use <code>v4.2.0</code> the exists-delaborator suddenly broke (fixed in <a href=\"https://github.com/leanprover-community/mathlib4/pull/8070\">#8070</a>), which is also annoying.</p>",
        "id": 406151775,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1701807256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406146509\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406127037\">said</a>:</p>\n<blockquote>\n<p>I miss an experience writing rust, if I have done something wrong or I triggered an edge case that's still being discussed and fixed, in the error message, it's explained to me succinctly, with a simple tip to fix, and a link to the issue tracking the patch.</p>\n</blockquote>\n<p>Currently Lean/Lake error messages/warnings are often very succinct, which in my experience is rather standard for developer software. Now that is not to say it is necessarily best practice.</p>\n</blockquote>\n<p>Yes, that's a nice way to say that error reporting in most software is terrible. The key difference with rust error messages is that they are written from the user's perspective, not the developer's. The idea is that you think about how the user could possibly have arrived at this error condition and explain the steps needed to get back out, because this is the information that is valuable to them, rather than (or in addition to) explaining what the error is, which is most direct but very high-context and will likely be impenetrable to the user. (Famous lean examples of bad error messages include <code>motive is not type correct</code> and <code>failed to synthesize instance</code>.)</p>",
        "id": 406153749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701808112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406153749\">said</a>:</p>\n<blockquote>\n<p>The key difference with rust error messages is that they are written from the user's perspective, not the developer's.</p>\n</blockquote>\n<p>Yep, the aim is different.</p>",
        "id": 406163542,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701812180
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406114664\">said</a>:</p>\n<blockquote>\n<p>Oh okay. For now I will just change the math template to point mathlib4 dep to the stable branch by default</p>\n</blockquote>\n<p>What is the consensus on this? I see two <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> s and two <span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span> s</p>",
        "id": 406173954,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701817312
    },
    {
        "content": "<p>Alternatively, what is the consensus on the more transparent version of the change I proposed that leaves current users unaffected, which will however take up more time dev and review-wise</p>",
        "id": 406174304,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701817423
    },
    {
        "content": "<p>Adding the feature of having a way to generate stable dependency on Mathlib and Lean is probably not <span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span> are disagreeing. The issue is the development/release model of changing existing behavior that unknown number of people might be depending on or expecting.</p>\n<p>Of course, developers can't predict all ramifications of a change, but it's reasonable to assume all changes might break something then proceed with a more stable release model (even for rc or nightlies), let's call it flag-verify-link: new potential breaking change (renaming options, directory, even the ones considered internal details) provides a flag or that can be enabled per project; if it's enabled, it'll verify the environment and assumptions it make and errors if something unexpected happens; the error comes with the link to the PR where people can read the change description, possibly a migration guide. This is an analogy to what Rust nightly did with feature gates/<code>rustc explain</code>, I was never really cut or left puzzled by its nightly. <a href=\"https://doc.rust-lang.org/rustdoc/unstable-features.html\">This document</a> (UPDATE: see the better link below) explains the mechanisms it uses to help keeping nightly reasonably stable because it's trying to live up to be a \"safe\" programming language, which is also somewhat expected from a theorem prover/general purpose programming language.</p>",
        "id": 406190789,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701825344
    },
    {
        "content": "<p>\"Safe\" for tooling means downstream projects have control over keeping existing tooling behavior while enjoying latest application level features (e.g. Mathlib features).</p>\n<p>So, as a user, I would insist to expect I can have both a \"safe\" tooling and a latest Mathlib, not that I should give up the latter so I can stay safe with the tooling.</p>\n<p>Personally, I expect this for better use of my Lean time, and for the experience of people that I would recommend Lean to.</p>",
        "id": 406190796,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701825348
    },
    {
        "content": "<p>Being \"safe\" doesn't mean the rc/nightly tooling never break, but it breaks in a way that can be mitigated by a small group of predictable simple steps that everyone can learn after reading something no more than half-screen-length, and use the same trick for like a few months. Or just resolve it with the guide came with the error message.</p>",
        "id": 406191737,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701825767
    },
    {
        "content": "<p>It also means users don't need to immediately pay for the potential breakage of a new change, e.g. it's OK to see lake warns about it's going to change <code>build</code> to <code>.lake</code> as its default behavior while keep using <code>build</code> so users can adapt their CI to that when they have time for that. This is the opt-in model.</p>\n<p>Or even if lake has changed <code>build</code> to <code>.lake</code>directly, but warns about this change and tells the user about how to keep using <code>build</code> (opt-out) or migrate the CI, it's still an almost smooth (i.e. not frustrating) experience.</p>",
        "id": 406193712,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701826775
    },
    {
        "content": "<p>note, your link is about unstable features in rustdoc, not unstable features in rustc (although the basic ideas are similar)</p>",
        "id": 406195206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701827676
    },
    {
        "content": "<p>Thanks, the better link seems to be <a href=\"https://rustc-dev-guide.rust-lang.org/bug-fix-procedure.html#issuing-future-compatibility-warnings\">16. Procedures for Breaking Changes</a> and also 11-14 for new features, which covers feature gates, <code>deprecated</code> attribute, issuing future compatibility warnings etc.</p>",
        "id": 406196212,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701828149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406190789\">said</a>:</p>\n<blockquote>\n<p>This document explains the mechanisms it uses to help keeping nightly reasonably stable because it's trying to live up to be a \"safe\" programming language, which is also somewhat expected from a theorem prover/general purpose programming language.</p>\n</blockquote>\n<p>I think one key detail that may be missing here is that Lean is not yet in its v1.x phase like Rust is. The current state of Lean is much closer to v0.x Rust. The language is still missing a number of key features before it is at that level. The point of our \"stable\" releases is to provide some level of quality assurance above and beyond  the previous nightly releases, which were only verified by the Lean 4 CI and could arbitrarily break literally anything without notice. Now we are the point were we are tracking breaking changes and notifying about them, but still not in the realm of providing any strong guarantees about compatibility going forward.</p>",
        "id": 406213361,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701833443
    },
    {
        "content": "<p>In other words, the stability guarantee of Lean stable releases is about quality assurance of <em>the release itself</em> (i.e., any major damage like deleting important files has hopefully been caught during the release candidate process). However, it is not providing any strong guarantee of stability <em>across releases</em>.</p>",
        "id": 406214061,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701833681
    },
    {
        "content": "<p>Thanks for the explanation. I'll save these hopes for the long run. With reservoir, tracking the impacts to downstream projects would be easier, I guess, provided that there's a CI for nightly besides rc.</p>",
        "id": 406223378,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701837143
    },
    {
        "content": "<p>I'm not sure all parties are on board with that definition of \"stable\"</p>",
        "id": 406223520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701837254
    },
    {
        "content": "<ol>\n<li>Lean isn't where rust was even in 2016, though lean will hopefully get there sooner than later. I agree with you that changes shouldn't break anything if they don't have to. Updates should be more careful.</li>\n<li>There is always a trade off between having the latest features and not risking breaking anything (stable). You can't have both. It is really one or the other with some reasonable trade off. </li>\n<li>There is a way to make this particular change such that current users don't notice a thing other than maybe one new option on the vscode menu </li>\n<li>The notion of stability is a relative one. Stable doesn't mean nothing will break. It just means there has been more beta testing with RC releases to find catastrophic issues.</li>\n<li>As Floris says, Mathlib doesn't have a notion of stability yet. So features and breakages could also come from there (in the form of tactic changes or API changes). I am not aware of any public announcements about any plans to have a more stable release schedule for Mathlib either  (although scalability issues and frustrations will eventually make this unavoidable).</li>\n</ol>\n<p>So why is this request coming up? Not all of us work on the latest bleeding edge of mathlib, and we don't want to be caught every week in a new debugging situation, because some breaking change was pushed through. The RCs do imply a comparatively higher chance of breaking things. If you are a new user or someone who isn't working on mathlib's bleeding edge features, and isn't working with one of the experts here, there is a fairly good chance that getting bitten by these rapid and breaking updates will discourage you from using lean. This includes all the people who may not feel comfortable posting on zulip for help</p>",
        "id": 406270941,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701856720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> : I think I should hold off for now on making a PR until the community agrees on something. I wonder if posting an RFC issue would be a better option for now, as a reference point for discussions. This conversation is bound to happen again sooner or later, and multiple times.</p>",
        "id": 406273896,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701857732
    },
    {
        "content": "<p>Presumably people run <code>lake update</code> when they want some new feature that landed in mathlib. Is there any other use case for it? For this use case, tracking <code>stable</code> seems bad: you see a new commit you like, and then you have to wait up to four weeks to have it.</p>\n<p>If you're updating for no reason other than to stay on top of the new changes, then it also seems bad because you're getting four weeks of breakage at once, whereas upgrading weekly would probably be less painful since things are rarely reverted. (By the way, upgrading unnecessarily seems like a waste of time, but I sympathize with it because I'm also very prone to doing it.)</p>\n<p>I guess my (perhaps unpopular) point is: Staying up-to-date is a virtue only when security updates are involved. Otherwise, the best allocation of time is to upgrade only whenever there is a compelling reason to.</p>",
        "id": 406276339,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1701858705
    },
    {
        "content": "<p>The goal of updating to stable is to avoid the experimental changes in RCs that get reverted or fixed by the next release</p>",
        "id": 406280315,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701860250
    },
    {
        "content": "<p>It also makes sense to update from time to time so that one doesn't land up in a situation of having to go through six months of updates when a critical change arrives, or when you want to have a reasonable chance of eventually using new features with the least possible update friction</p>",
        "id": 406280719,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701860382
    },
    {
        "content": "<p>Note that rather few of the breaking changes being made in Lean ever get reverted during the release candidate process. I think at this point, better than encouraging users to delay updating (i.e. by staying on <code>stable</code>), which then makes for more difficult bigger bumps, we should be thinking about ways to make it easier for users to update often (i.e. every new RC). I hope this is something Reservoir will help with, by giving us the information about projects which would be able to moving to a subsequent RC without breakage.</p>",
        "id": 406459828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701924629
    },
    {
        "content": "<p>I think we should be focusing more on <em>migration</em> as a mechanism for keeping things working rather than <em>stability</em> in the settling-down sense</p>",
        "id": 406460739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701925100
    },
    {
        "content": "<p>If we could just press a button and automatically upgrade the project I don't think this would be an issue</p>",
        "id": 406460814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701925149
    },
    {
        "content": "<p>plus, migrations stack much better, since you can just apply them in order and support as long a time horizon as you want</p>",
        "id": 406460976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701925228
    },
    {
        "content": "<p>I +1ed for both ideas because I think they are orthogonal, and both valid.</p>\n<p>One can observe that rc versions are becoming more frequent lately, which is a great thing (Many thanks! Particularly Scott's work on Std/Mathlib side to bump and fix issues) for getting back to normal if a user hit an issue. This is definitely better than persuading people to stay on an ancient stable version of Lean. This is usually an non-option for the people who just see what they need landed into Mathlib or Std after days or weeks, and the feature is relying on the latest Lean, but then they are told, for their safety, they need to wait for a few more weeks until it's made sure there is no paper cuts.</p>\n<p>One fruit from this thread that I hope is the migration mechanism Mario mentioned. This thread will be all for nothing, if this thread only ends in more and more explanations about why thing is how it is now (that Lean is nowhere near Rust back in 2016), or a tip for people to stay away from the latest Lean because there are no (more) railguards planned in this stage yet.</p>",
        "id": 406539133,
        "sender_full_name": "Utensil Song",
        "timestamp": 1701954551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406539133\">said</a>:</p>\n<blockquote>\n<p>This is definitely better than persuading people to stay on an ancient stable version of Lean. </p>\n</blockquote>\n<p>Calling a month \"ancient\" would be quite a surprise in essentially every other language release schedule. Furthermore, it is entirely unclear to me how one could ensure a level of release stability (non-breakage) without some preview time (a month max is already rather short for that). We have already had some critical failures in release candidates in the past, and it seems very desirable to steer new users away from such possible bad impressions.</p>",
        "id": 406601874,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701974934
    },
    {
        "content": "<p>Hopefully, Reservoir will allow us to detect package breakages across the ecosystem from an RC (or nightly), which will help with writing release notes and smoothing the transition into a new version. But even that process will take some time post-release to hammer out, so there still needs to be a test window.</p>",
        "id": 406602384,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701975116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406602384\">said</a>:</p>\n<blockquote>\n<p>Hopefully, Reservoir will allow us to detect package breakages across the ecosystem from an RC (or nightly), which will help with writing release notes and smoothing the transition into a new version. But even that process will take some time post-release to hammer out, so there still needs to be a test window.</p>\n</blockquote>\n<p>Preferably nightly, then a better chance of finding out before RC. But if Reservoir fixes its CI according to the change, then it would still be missing the opportunity to know how wide the impact to downstream projects.</p>",
        "id": 406672323,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702007675
    },
    {
        "content": "<p>I'm particularly confused by why additive changes to lake (e.g. adding <code>leanOption</code>) with a normal migration step (e.g. <code>lake update</code>) will still causing breaking on the user side e.g. <a href=\"#narrow/stream/270676-lean4/topic/automatically.20updating.20project\">this thread about breaking the auto-update of <code>lean4web</code> instances on possibly live.lean-lang.org</a>. (Not technically, but the release model as a whole)</p>\n<p>Is there a safer migration step to avoid additive changes (which should not be breaking traditionally) become breaking changes ?</p>",
        "id": 406672917,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702007890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406539133\">said</a>:</p>\n<blockquote>\n<p>I +1ed for both ideas because I think they are orthogonal, and both valid.</p>\n<p>One can observe that rc versions are becoming more frequent lately, which is a great thing (Many thanks! Particularly Scott's work on Std/Mathlib side to bump and fix issues) for getting back to normal if a user hit an issue. This is definitely better than persuading people to stay on an ancient stable version of Lean. This is usually an non-option for the people who just see what they need landed into Mathlib or Std after days or weeks, and the feature is relying on the latest Lean, but then they are told, for their safety, they need to wait for a few more weeks until it's made sure there is no paper cuts.</p>\n<p>One fruit from this thread that I hope is the migration mechanism Mario mentioned. This thread will be all for nothing, if this thread only ends in more and more explanations about why thing is how it is now (that Lean is nowhere near Rust back in 2016), or a tip for people to stay away from the latest Lean because there are no (more) railguards planned in this stage yet.</p>\n</blockquote>\n<p>This message is meant to explain why staying on stable is a non-option for many (that are not the intended fewer people for RC test window), particularly for users who need the latest features. Using \"ancient\" and triggering a reply only on this word is not the intention, the word is only measuring the PR count (just see how many commit messages in <a href=\"#narrow/stream/116290-rss/topic/Recent.20Commits.20to.20mathlib4.3Amaster\">the rss channel</a> per day ) that one will lose if staying on Lean stable. These PRs are not only providing new features, it also fixes issues, and changes the idiomatic way to do things, they will render many downstream code (e.g. working around the issue, write proofs in the old way) based on the older version obsolete quickly. Even if we distribute that number by math areas, the more active a math area is, the PRs change things more frequently.</p>\n<p>In all these PRs, there will be a few PRs are not about any specific math area, but about Lean changes, the consequences of these changes. Mathlib can't afford to maintain a branch that cherry-pick these changes out, leaving only the changes users actually need. This will bind the new features to the latest Lean version. One can't stay to a stable Lean weeks ago without losing some features they care about landed into Mathlib days ago. The tension between them builds up.</p>\n<p>At any rate, my point is not against telling the ones who are willing to stay on stable Lean to stay on stable Lean, but this is not a solution to others who can't afford to stay on stable Lean, but hopes to spend less Lean time on debugging technical details like file paths, option names etc. that they don't care about or have knowledge about.</p>\n<p>Whether Mathlib has a stable release model is irrelevant here. Breaking in Mathlib, like a tactic failing on edge cases, annoying as it might be, but at least it's something that interests the audience (even a new math user will expect to be able to understand how tactics work, and these failing cases can provide case studies into the the understanding of how they work, so do the workarounds). They are in stark contrast to the breaking changes in lake.</p>",
        "id": 406677763,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702009751
    },
    {
        "content": "<p>I get that you want a stable lake and a constantly up to date mathlib. But I also believe this an unrealistic expectation in the short run.<br>\n: It is a \"you can't have your cake and eat it too\" kind of situation. Lake development happens in parallel with the rest of the ecosystem and also in response to mathlib's needs. What Mario and Mac suggest, migrations and stable releases, are the best long term option. You can't get 0-breakages without some real world testing. 1 week is too short a time window for that. I suspect we will know more once reservoir is out. But fwiw, my suggestions don't preclude working with mathlib's latest version in any sense.</p>",
        "id": 406698594,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1702019409
    },
    {
        "content": "<p>Not a stable lake, an easily migrate-able lake</p>",
        "id": 406702259,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702020703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406601874\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406539133\">said</a>:</p>\n<blockquote>\n<p>This is definitely better than persuading people to stay on an ancient stable version of Lean. </p>\n</blockquote>\n<p>Calling a month \"ancient\" would be quite a surprise in essentially every other language release schedule.</p>\n</blockquote>\n<p>I'm sure this was a joke but it's also kinda true. Keeping up with changes in lean is a full time job.</p>",
        "id": 406718142,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702026918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/Deprecation.20without.20explanations/near/406672917\">said</a>:</p>\n<blockquote>\n<p>I'm particularly confused by why additive changes to lake (e.g. adding <code>leanOption</code>) with a normal migration step (e.g. <code>lake update</code>) will still causing breaking on the user side e.g. <a href=\"#narrow/stream/270676-lean4/topic/automatically.20updating.20project\">this thread about breaking the auto-update of <code>lean4web</code> instances on possibly live.lean-lang.org</a>. (Not technically, but the release model as a whole)</p>\n<p>Is there a safer migration step to avoid additive changes (which should not be breaking traditionally) become breaking changes ?</p>\n</blockquote>\n<p>I talked to <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> about this and we agree that this should not have been a breaking change and we want the facility to add new options in the future without causing similar breakage. We floated two (non-exclusive) solutions to this: (1) Make the <code>package</code> macro ignore unknown options instead of erroring. This would make adding an option non-breaking. (2) Use the proposed <code>trackToolchain</code> option to allow users to opt in to the toolchain copying behavior, so that we don't use old lake to process a new lakefile. This should avoid all instances of this issue, although only for toolchain-tracked dependencies (for most projects that would be <code>std</code> or <code>mathlib</code>).</p>",
        "id": 406719538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1702027453
    },
    {
        "content": "<p>That's great news, both sound very reasonable, thanks! Will there be 2 issues to track them?</p>",
        "id": 406719995,
        "sender_full_name": "Utensil Song",
        "timestamp": 1702027680
    },
    {
        "content": "<p>What's <code>proofs.withType</code> in this new paradigm?</p>",
        "id": 406783121,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702049766
    }
]