[
    {
        "content": "<p>Is there tactic <code>split</code> in Lean 4? I know I can use <code>constructor</code> to turn conjunction into two goals. However, I'd like to have something more idiomatic. Is there something like <code>split</code> in mathlib4?</p>",
        "id": 328402125,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676619735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as unresolved.</p>",
        "id": 328402180,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676619764
    },
    {
        "content": "<p>If it’s specifically <code>and</code>s you want to split, there’s <code>split_ands</code> (from std4); there’s also <code>split</code> for nested match/ifs and <code>split_ifs</code> for just if’s</p>",
        "id": 328407219,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676621819
    },
    {
        "content": "<p><code>constructor</code> is the idiomatic translation for everything I've used <code>split</code> for in lean3</p>",
        "id": 328409910,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676622774
    },
    {
        "content": "<p>Yeah, good point! I haven't developed the sense for what is idiomatic in Lean 4.</p>",
        "id": 328413844,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676624067
    },
    {
        "content": "<p>Is it a good place to start writing the table for Lean 3 to Lean 4 translation?<br>\nWe already mentioned it would be useful to have a reference sheet saying stuff like replace <code>split</code> by <code>constructor</code> and what import is required.</p>",
        "id": 328424945,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676627318
    },
    {
        "content": "<p>Almost all the information we have about lean 3 -&gt; lean 4 translation is encoded in mathport, so you can pretty much just read the mapping from the code</p>",
        "id": 328425326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676627424
    },
    {
        "content": "<p>here is <a href=\"https://github.com/leanprover-community/mathport/blob/e898d4a1467fae2a9941c37081d8fff5041d617c/Mathport/Syntax/Translate/Tactic/Lean3.lean#L296\"><code>split -&gt; constructor</code></a></p>",
        "id": 328425470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676627473
    },
    {
        "content": "<p>I should probably make a document readable for humans.<br>\nI can't be the only one who wishes it existed.</p>",
        "id": 328425993,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676627637
    },
    {
        "content": "<p>I am a bit concerned about the maintenance overhead of yet another place to keep this information and stay in sync</p>",
        "id": 328426348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676627734
    },
    {
        "content": "<p>plus it can get tricky to describe some of the mappings except by code, for example <a href=\"https://github.com/leanprover-community/mathport/blob/e898d4a1467fae2a9941c37081d8fff5041d617c/Mathport/Syntax/Translate/Tactic/Lean3.lean#L63-L66\"><code>intros</code></a> is translated to <code>intros</code> with no arguments and <code>intro</code> otherwise</p>",
        "id": 328426712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676627838
    },
    {
        "content": "<p>Afaik <code>intros</code> works for both.</p>",
        "id": 328426979,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676627911
    },
    {
        "content": "<p>nope, <code>intros</code> and <code>intro</code> are not the same thing</p>",
        "id": 328427099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676627953
    },
    {
        "content": "<p><code>intros x y</code> works but it does something different from lean 3 <code>intros x y</code></p>",
        "id": 328427175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676627976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328426348\">said</a>:</p>\n<blockquote>\n<p>I am a bit concerned about the maintenance overhead of yet another place to keep this information and stay in sync</p>\n</blockquote>\n<p>That is a valid concern. Can we write a script that exports some basic information from the mathport code?</p>",
        "id": 328427334,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328427175\">said</a>:</p>\n<blockquote>\n<p><code>intros x y</code> works but it does something different from lean 3 <code>intros x y</code></p>\n</blockquote>\n<p>Oic!<br>\n\"<code>intros x...</code> behaves like <code>intro x...</code>, but then keeps introducing (anonymous) hypotheses until goal is not of a function type\"</p>",
        "id": 328427558,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628092
    },
    {
        "content": "<p>As someone who has spent some time with mathport, I think a human-readable document would be a much better source for almost everyone</p>",
        "id": 328427913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676628200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328426348\">said</a>:</p>\n<blockquote>\n<p>I am a bit concerned about the maintenance overhead of yet another place to keep this information and stay in sync</p>\n</blockquote>\n<p>Maybe I am wrong, but I believe that the overhead for users like me is bigger.</p>",
        "id": 328427958,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628207
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328427913\">said</a>:</p>\n<blockquote>\n<p>As someone who has spent some time with mathport, I think a human-readable document would be a much better source for almost everyone</p>\n</blockquote>\n<p>Yeah! I started a discussion in<br>\n<a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Lean.203.20equivalents.20in.20Lean.204</a><br>\nbut it turned into a flamewar about mathlib4.</p>",
        "id": 328428443,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628348
    },
    {
        "content": "<p>It should be a not-too-hard project to just manually collect the mappings using some well chosen regexes on the source code. I don't have the time to work on this though</p>",
        "id": 328428834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676628455
    },
    {
        "content": "<p>I am terrible at scripting, so I can rather imagine I would maintain a hand-written document.</p>",
        "id": 328429558,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628659
    },
    {
        "content": "<p>I think you could start by just searching for <code>tr_tactic</code>, and then manually writing down what the code does</p>",
        "id": 328430655,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676628882
    },
    {
        "content": "<p>What about I sketch something and you will help me maintain it?</p>",
        "id": 328430849,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676628926
    },
    {
        "content": "<p>Ideally there would be a Lean/mathlib 3 → Lean/mathlib 4 transition handbook, including a well-organized reference/cheat sheet, which this would be a part of…if it can be maintained this could grow into something I’d e imagine many Lean 3 users would find very helpful</p>",
        "id": 328436012,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676630480
    },
    {
        "content": "<p>Hmm, ideaaally there would also be some <code>set_option</code> which highlighted tactics whose behavior had changed, and maybe turned on something that told you via hover how to recover the old behavior. E.g., you write <code>split</code>, it highlights it, and a section is added to the hover which says something like “to recreate the mathlib3 behavior of <code>split</code>: use <code>constructor</code>”. I imagine that would be quite a project, though.</p>",
        "id": 328436019,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676630485
    },
    {
        "content": "<p>I cannot write a handbook, but I can write a shitty document that you can then help improve.</p>",
        "id": 328436657,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676630692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328436019\">said</a>:</p>\n<blockquote>\n<p>Hmm, ideaaally there would also be some <code>set_option</code> which highlighted tactics whose behavior had changed, and maybe turned on something that told you via hover how to recover the old behavior. E.g., you write <code>split</code>, it highlights it, and a section is added to the hover which says something like “to recreate the mathlib3 behavior of <code>split</code>: use <code>constructor</code>”. I imagine that would be quite a project, though.</p>\n</blockquote>\n<p>This sounds like you are just describing mathport, except instead of just doing it automatically it instructs the user to perform the modifications. That sounds infuriating to use</p>",
        "id": 328466828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676639605
    },
    {
        "content": "<p>For me personally, porting is not the activity I do.<br>\nI just want to have something for manual lookup when I code (something new) in Lean 4 but know only Lean 3.</p>",
        "id": 328470782,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676640760
    },
    {
        "content": "<p>Do we have documentation for people who know lean 3 and now want to start writing new code in lean 4?</p>",
        "id": 328471031,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676640836
    },
    {
        "content": "<p>And I'm typing too slow for Martin :)</p>",
        "id": 328471165,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1676640866
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328471031\">said</a>:</p>\n<blockquote>\n<p>Do we have documentation for people who know lean 3 and now want to start writing new code in lean 4?</p>\n</blockquote>\n<p>I only know about this:<br>\n<a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a></p>",
        "id": 328471563,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676640983
    },
    {
        "content": "<p>Apart from this \"conceptual description\", it would be useful to have a \"dictionary\" for what replaces what.</p>",
        "id": 328471734,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641033
    },
    {
        "content": "<p>Martin, what mathport does is try to capture, as best as possible, what replaces what. And since lean3 and lean4 is code, and not languages with a reference spec, it made sense here to build the dictionary in code -- because the primary use of this dictionary is code-to-code translation.</p>",
        "id": 328472701,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641309
    },
    {
        "content": "<p>lean3 (community fork) is still changing to help make it easier to do that code-to-code translation, so we have three moving targets, lean3, lean4, mathport (and leanport implied)</p>",
        "id": 328472874,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641357
    },
    {
        "content": "<p>Yes, a human readable document would be great to have -- but it would often become obsolete</p>",
        "id": 328472924,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641372
    },
    {
        "content": "<p>I'd be happy to maintain it if there is a way for me to easily learn about new changes.</p>",
        "id": 328473084,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641412
    },
    {
        "content": "<p>So, either one is OK with that, or one slows down mathport/migration to make sure to write code first, then document it before moving on, or first document in a spec, and the write porting code</p>",
        "id": 328473090,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641414
    },
    {
        "content": "<p>Which new changes would you like to know about?</p>",
        "id": 328473137,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641426
    },
    {
        "content": "<p>For example, when a tactic moves from mathlib4 to std4, I want to know I should change the import in my table.</p>",
        "id": 328473304,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641469
    },
    {
        "content": "<p>How comfortable are you with git commit histories and diffs?</p>",
        "id": 328473473,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328473090\">said</a>:</p>\n<blockquote>\n<p>So, either one is OK with that, or one slows down mathport/migration to make sure to write code first, then document it before moving on, or first document in a spec, and the write porting code</p>\n</blockquote>\n<p>I don't want to be burden to people who do porting; their work is difficult enough already.<br>\nHowever, if possible, I would like to make a document on the side that would help people like me.</p>",
        "id": 328473538,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328473473\">said</a>:</p>\n<blockquote>\n<p>How comfortable are you with git commit histories and diffs?</p>\n</blockquote>\n<p>I can read them, yes.</p>",
        "id": 328473698,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641595
    },
    {
        "content": "<p>So I think there are two things I am hearing from you, let me know if I understood correctly</p>\n<ul>\n<li>you'd like to understand how to phrase lean3 tactic usage in lean4: what they're called, how the syntax of arguments has changed, and you'd like that list to be easily queryable</li>\n<li>you'd like to know what tactics have been made available in lean4 outside of mathlib4 -- this is not just lean3 core tactics, but also mathlib3 tactics</li>\n</ul>",
        "id": 328474102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641713
    },
    {
        "content": "<p>Tbh, in Lean 3, I didn't distinguish between <code>lean3</code> and <code>mathlib3</code> tactics.</p>",
        "id": 328474440,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641804
    },
    {
        "content": "<p>I inferred that, that's why I wrote it out explicitly</p>",
        "id": 328474534,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641830
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328474102\">said</a>:</p>\n<blockquote>\n<p>you'd like to understand how to phrase lean3 tactic usage in lean4: what they're called, how the syntax of arguments has changed, and you'd like that list to be easily queryable</p>\n</blockquote>\n<p>This is my main wish.</p>",
        "id": 328474664,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676641868
    },
    {
        "content": "<p>As Mario linked, I think the <code>Mathport/Syntax/Translate/Tactic/*</code> directory in mathport is the best source for that right now</p>",
        "id": 328474710,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641879
    },
    {
        "content": "<p>And is kept up-to-date as best as possible</p>",
        "id": 328474737,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676641889
    },
    {
        "content": "<p>And also the entire contents of <code>Mathport/Syntax/Translate/Tactic/Mathlib/</code>...</p>",
        "id": 328475027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676641982
    },
    {
        "content": "<p>For example, for lean3 <code>split</code>: I opened the file in my web browser on Github. I Ctrl-Fed for `tr_tactic split, because I've learned that's the syntax that specified the lean3 translation key. I found:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[tr_tactic split]</span> <span class=\"kd\">def</span> <span class=\"n\">trSplit</span> <span class=\"o\">:</span> <span class=\"n\">TacM</span> <span class=\"n\">Syntax.Tactic</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">constructor</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I skip the boilerplate in the middle to the syntex definition on the RHS of the walrus. It specifies a syntax that produces a tactic syntax, and is basically the string <code>constructor</code>.</p>",
        "id": 328475331,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676642071
    },
    {
        "content": "<p>If I made a human-readable document out of that, possible very inaccurate, who would be interested in using it?</p>",
        "id": 328475470,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676642107
    },
    {
        "content": "<p>So, I see three options -- manual searching (using Github web search, or local grep) in that directory for <code>tr_tactic footactic</code>, writing a file-munging script that uses regex or whatever in your language of choice to parse those files, or to use lean4 itself to introspect and make the output you'd like</p>",
        "id": 328475774,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676642171
    },
    {
        "content": "<p>In my work, there's often many directions to make user-facing documents, and I've found most success by skipping the \"if I make it, will anyone be interested\" question to going to a direct prototype</p>",
        "id": 328476021,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676642235
    },
    {
        "content": "<p>also manual preprocessing to produce a document blog-post style that slowly goes out of date but is mostly correct (it doesn't change that much)</p>",
        "id": 328476107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676642254
    },
    {
        "content": "<p>So just make a human-readable document on a tiny portion of what _you're_ interested in! It'll be easier for others to get excited when they see some <strong>thing</strong>, rather than not being able to speak up about something that is still intangible</p>",
        "id": 328476340,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1676642297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 328505007,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676649608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Tactic.20.60split.60.20in.20Lean.204/near/328466828\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Tactic.20.60split.60.20in.20Lean.204/near/328436019\">said</a>:</p>\n<blockquote>\n<p>Hmm, ideaaally there would also be some <code>set_option</code> which highlighted tactics whose behavior had changed, and maybe turned on something that told you via hover how to recover the old behavior. E.g., you write <code>split</code>, it highlights it, and a section is added to the hover which says something like “to recreate the mathlib3 behavior of <code>split</code>: use <code>constructor</code>”. I imagine that would be quite a project, though.</p>\n</blockquote>\n<p>This sounds like you are just describing mathport, except instead of just doing it automatically it instructs the user to perform the modifications. That sounds infuriating to use</p>\n</blockquote>\n<p>I’m imagining this as a tool to help people transition from lean 3 to lean 4 mentally as they write new code, not as a way to port existing files. People will want to transition instead of just writing their code in lean 3 and running mathport on it (I think).</p>",
        "id": 328582771,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1676677122
    },
    {
        "content": "<p>right. I'm saying that to implement that we would have to first implement lean 3 syntax in lean 4, and then a linter that pretends to be mathport but suggests that the user does the replacement instead of automatically fixing it</p>",
        "id": 328592751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676683531
    },
    {
        "content": "<p>Sounds too complicated. I'll rather add more rows to my table.</p>",
        "id": 328629647,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1676711069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Tactic.20.60split.60.20in.20Lean.204/near/328474102\">said</a>:</p>\n<blockquote>\n<p>So I think there are two things I am hearing from you, let me know if I understood correctly</p>\n<ul>\n<li>you'd like to understand how to phrase lean3 tactic usage in lean4: what they're called, how the syntax of arguments has changed, and you'd like that list to be easily queryable</li>\n</ul>\n</blockquote>\n<p>Actually, adding info on the syntax of arguments is a bit overkill. I just need to know the import and the name. Then I can read the syntax of arguments in VS Code.</p>",
        "id": 329807743,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677182360
    }
]