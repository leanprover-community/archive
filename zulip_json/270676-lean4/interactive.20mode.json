[
    {
        "content": "<p>Python has of course interactive mode. Would Lean ever find a use of such a mode? And what would that best entail.</p>",
        "id": 357136173,
        "sender_full_name": "Dean Young",
        "timestamp": 1683683573
    },
    {
        "content": "<p>What exactly do you mean by interactive mode, maybe repl or Jupiter style notebooks or something else? Lean is an interactive theorem prover, in my opinion it is interactive plenty already.</p>",
        "id": 357142479,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683686706
    },
    {
        "content": "<p>there is also <a href=\"https://github.com/leanprover-community/repl\">https://github.com/leanprover-community/repl</a>, although admittedly it's not really designed for humans</p>",
        "id": 357142665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683686810
    },
    {
        "content": "<p>Wasn‚Äôt there some talk about a lean4 Jupiter kernel?</p>",
        "id": 357142800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683686872
    },
    {
        "content": "<p>I recall <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> had an Observable notebook mode hooked up to lean (3?)</p>",
        "id": 357143179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683686999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span>  has more human usable <a href=\"https://github.com/arthurpaulino/LeanREPL\">repl</a>, but it has been untouched for a long time.</p>",
        "id": 357144307,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683687539
    },
    {
        "content": "<p>The thing is, in Lean the editor <em>is</em> the REPL, so there isn't much need for a standalone program IMO.</p>",
        "id": 357144806,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1683687741
    },
    {
        "content": "<p>Python's interactive mode comes in the box with Idle. I'm referring to the mode where you press return after each command.</p>",
        "id": 357144914,
        "sender_full_name": "Dean Young",
        "timestamp": 1683687825
    },
    {
        "content": "<p>Tomas makes a good point in that Lean is already interactive.</p>",
        "id": 357144992,
        "sender_full_name": "Dean Young",
        "timestamp": 1683687863
    },
    {
        "content": "<p>Yes, what you are describing is often called repl(read-eval-print-loop)</p>\n<p>Lean is plenty interactive on the proof level but not too much interactive on the evaluation level, you can write bunch of <code>#eval</code> commands but it feels clunky compared to proper repl.</p>\n<p>If lean takes off as programming language then there might be desire for a traditional repl as many people seem to enjoy using it.</p>\n<p>I personally don't find it useful, I use it in Python only because I found it to be the only way how to get familiar with new APIs. This is not the case for Lean as it is statically typed language. You don't have to actually run the code to make sense of it.</p>",
        "id": 357146662,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683688870
    },
    {
        "content": "<p>I for one hate REPLs. It's okay for one line commands but for anything more complicated you have to deal with the atrocious text editing capabilities of your chosen terminal</p>",
        "id": 357147266,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683689222
    },
    {
        "content": "<p>and TBF it's not nearly as \"interactive\" as a good IDE</p>",
        "id": 357147335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683689269
    },
    {
        "content": "<p>having dealt with copying and pasting stuff to the REPL in HOL light and HOL4 I can tell you that even with the best editing key commands it's still horrible to use for large developments. It's like the Coq \"waterfall\" model, only worse because your state can get mixed up when you re-evaluate old lines</p>",
        "id": 357147715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683689483
    },
    {
        "content": "<p>Coq's \"waterfall\" is the only thing I'm missing in Lean. The eager re-evaluation is a bit annoying when doing heavy computations.</p>",
        "id": 357148121,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683689755
    },
    {
        "content": "<p>I thought the interactive mode could be to do with Lean's tactic mode somehow. Each command would update the tactic state. Is that how it works with the HOLs?</p>",
        "id": 357263698,
        "sender_full_name": "Dean Young",
        "timestamp": 1683719973
    },
    {
        "content": "<p>But why would you want to type tactics into a REPL rather than into a <code>.lean</code> file?</p>",
        "id": 357265685,
        "sender_full_name": "Reid Barton",
        "timestamp": 1683720371
    },
    {
        "content": "<p>vscode is basically a REPL</p>",
        "id": 357266474,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683720526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/interactive.20mode/near/357265685\">said</a>:</p>\n<blockquote>\n<p>But why would you want to type tactics into a REPL rather than into a <code>.lean</code> file?</p>\n</blockquote>\n<p>Maybe we need a TacticTacticM monad for hypertactics you can use to interactively write tactic scripts (which themselves are for interactively writing proof terms). <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 357267669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683720818
    },
    {
        "content": "<p>Are we talking about a REPL (in terminal) or about Notebooks (Like Jupyter does it, though VSCode has its own Notebook renderer)? A notebook mode for Lean would be awesome. <del>Maybe it can some day replace python jupyter notebooks for machine learning courses.</del></p>",
        "id": 357288939,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1683724935
    },
    {
        "content": "<p>all the core functionality is already there</p>",
        "id": 357297558,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683726492
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"559197\">Kind Bubble</span> <a href=\"#narrow/stream/270676-lean4/topic/interactive.20mode/near/357263698\">said</a>:</p>\n<blockquote>\n<p>I thought the interactive mode could be to do with Lean's tactic mode somehow. Each command would update the tactic state. Is that how it works with the HOLs?</p>\n</blockquote>\n<p>Isn't that the case for now for emacs and vscode lean mode? Why do you need an extra interactive mode?</p>",
        "id": 357413489,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1683757057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/interactive.20mode/near/357147266\">said</a>:</p>\n<blockquote>\n<p>I for one hate REPLs. It's okay for one line commands but for anything more complicated you have to deal with the atrocious text editing capabilities of your chosen terminal</p>\n</blockquote>\n<p>What would be nice is if there was a single command REPL for a Lean file (perhaps in the infoview) that would allow you to run commands at a given point without editing the file. This would prevent re-elaboration of the file, Git popups, and the risk of forgetting to remove debug code before committing (which has certainly happened to me).</p>",
        "id": 357443350,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683773217
    },
    {
        "content": "<p>seems like it would not be long before such a view starts getting half-baked versions of the features of the main view: syntax highlighting, hovers, abbreviation input...</p>",
        "id": 357443923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683773408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sounds great! Maybe call it a scatchpad widget or something.</p>",
        "id": 357445050,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683773870
    },
    {
        "content": "<p>sounds like reinventing vscode</p>",
        "id": 357445134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683773892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> My thought process was that the view code be part of the VS Code extension and thus reuse VS Code components.</p>",
        "id": 357445211,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683773933
    },
    {
        "content": "<p>I don't think it is that easy to embed the literal vscode editor view in a webview</p>",
        "id": 357445364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683773967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Ah, I guess my wording was wrong when I said \"perhaps in the infoview\" -- I meant as part of the infoview UI pane, not necessarily as part of the infoview webview.</p>",
        "id": 357445643,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683774048
    },
    {
        "content": "<p>even then it sounds hard. Probably it would be best to just use an actual editor view, similar to the <code>*scratch*</code> buffer used in emacs</p>",
        "id": 357445838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683774122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Make sense. I confess I still have not internalized a proper model of VS Code Len extension (or VS Code overall), so what you are saying is probably a better way to actually implement what I was suggesting. However, I do still think the idea, regardless of how it is implemented, would be quite useful (and remove some significant pain points).</p>",
        "id": 357446573,
        "sender_full_name": "Mac Malone",
        "timestamp": 1683774430
    },
    {
        "content": "<p>A funny simple implementation for a \"scratchpad with the context at the current cursor position\" would be to have a command to immediately open up a scratch file with the contents of the current file up to that cursor position.</p>",
        "id": 357536936,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683800818
    },
    {
        "content": "<p>You already can pass a line and column number to VSCode to open a file at a specified location.  At least, you can on Linux.</p>",
        "id": 357540867,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683801832
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">code</span> <span class=\"c1\">--help</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n  <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"c1\">--goto &lt;file:line[:character]&gt;          Open a file at the path on the specified line and character position.</span>\n<span class=\"o\">[</span><span class=\"bp\">...</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 357541173,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683801907
    },
    {
        "content": "<p>In fact, combining this with the output of <code>grep -n</code> is something that I isolated in a function.</p>",
        "id": 357541547,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683802005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> The idea is to open up a <em>new</em> file so that you can do the things that <a href=\"#narrow/stream/270676-lean4/topic/interactive.20mode/near/357443350\">Mac mentioned</a> -- sometimes you'd rather explore doing things at a particular point in a file without editing the file itself.</p>",
        "id": 357543694,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683802572
    },
    {
        "content": "<p>Or maybe I'm not understanding what you're suggesting. I guess you're saying you can use the command line to implement \"open a new file with the first N lines of such-and-such file\"?</p>",
        "id": 357543882,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683802623
    },
    {
        "content": "<p>No, I think that I am not understanding what is being suggested.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/interactive.20mode/near/357543882\">said</a>:</p>\n<blockquote>\n<p>Or maybe I'm not understanding what you're suggesting. I guess you're saying you can use the command line to implement \"open a new file with the first N lines of such-and-such file\"?</p>\n</blockquote>\n<p>This is certainly very easy to do with a shell function: <code>grep, sed, awk</code> allow you to select ranges/modify a file, then you can save them to a temp file and open it with <code>code</code> at whatever location you want.  This is really very easy to achieve.  Is this what is wanted?</p>",
        "id": 357544435,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683802784
    },
    {
        "content": "<p>No, it's not <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I was thinking more of a VS Code command that would do that from within the editor. It should be easy to do without shell commands.</p>",
        "id": 357545140,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683802960
    },
    {
        "content": "<p>I see.  I usually implement these things with the shell, since I already know the commands and I find them very simple to use.  Also, they do not tie me to VSCode.</p>",
        "id": 357545415,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683803015
    },
    {
        "content": "<p>I'm not sure if anyone wants this feature at the moment, but it's interesting to consider as a very simple alternative to a more high-brow design. Plus it's not Lean-specific.</p>",
        "id": 357545454,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683803026
    },
    {
        "content": "<p>(This would also be very easy to implement in emacs lisp.)</p>",
        "id": 357545661,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683803060
    },
    {
        "content": "<p>Indeed.  Also, due to the clumsiness with opening folder vs files in code, I have a shell script that opens the file in the git-root folder of the actual file...</p>",
        "id": 357546009,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683803126
    },
    {
        "content": "<p>Basically, in VSCode, the infoview is great, I like the file editor as well.  But for everything else, I find that there is no comparison to the shell.</p>",
        "id": 357546663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683803253
    },
    {
        "content": "<p>If there were a way to tell the Lean server that this new file is a prefix of the original file so that it can reuse the cached state, that would be a valuable feature that would greatly improve this simple command.</p>",
        "id": 357546913,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683803319
    },
    {
        "content": "<p>Something like saving the oleans for the current file and reuse them for the temp file?</p>",
        "id": 357547126,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683803372
    },
    {
        "content": "<p>You know how you can edit a file and it only checks from that point forward rather than re-elaborating the entire file from scratch? There's a cache of command state for every command underlying this. It's not in the oleans.</p>",
        "id": 357547366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683803428
    },
    {
        "content": "<p>ah, something like... <code>stop</code>  or <code>save</code>?</p>",
        "id": 357547473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683803457
    },
    {
        "content": "<p>I remember a discussion about this and some implementation of it a while back.</p>",
        "id": 357547573,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683803482
    },
    {
        "content": "<p>I cannot find the thread, but <code>save</code> seem to exist:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">save</span>\n  <span class=\"n\">trivial</span>\n</code></pre></div>\n<p>if you hover over <code>save</code> it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">save</span> <span class=\"n\">is</span> <span class=\"n\">defined</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">as</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">but</span> <span class=\"n\">the</span> <span class=\"n\">elaborator</span> <span class=\"n\">has</span> <span class=\"n\">special</span>\n<span class=\"n\">handling</span> <span class=\"n\">for</span> <span class=\"n\">occurrences</span> <span class=\"n\">of</span> <span class=\"n\">save</span> <span class=\"k\">in</span> <span class=\"n\">tactic</span> <span class=\"n\">scripts</span> <span class=\"n\">and</span> <span class=\"n\">will</span> <span class=\"n\">transform</span> <span class=\"kd\">by</span> <span class=\"n\">tac1</span><span class=\"bp\">;</span>\n<span class=\"n\">save</span><span class=\"bp\">;</span> <span class=\"n\">tac2</span> <span class=\"n\">to</span> <span class=\"kd\">by</span> <span class=\"o\">(</span><span class=\"n\">checkpoint</span> <span class=\"n\">tac1</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">tac2</span><span class=\"o\">,</span> <span class=\"n\">meaning</span> <span class=\"n\">that</span> <span class=\"n\">the</span> <span class=\"n\">effect</span> <span class=\"n\">of</span>\n<span class=\"n\">tac1</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">cached</span> <span class=\"n\">and</span> <span class=\"n\">replayed.</span> <span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">useful</span> <span class=\"n\">for</span> <span class=\"n\">improving</span> <span class=\"n\">responsiveness</span>\n<span class=\"n\">when</span> <span class=\"n\">working</span> <span class=\"n\">on</span> <span class=\"n\">a</span> <span class=\"n\">long</span> <span class=\"n\">tactic</span> <span class=\"n\">proof</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">using</span> <span class=\"n\">save</span> <span class=\"n\">after</span> <span class=\"n\">expensive</span> <span class=\"n\">tactics.</span>\n\n<span class=\"o\">(</span><span class=\"n\">TODO</span><span class=\"o\">:</span> <span class=\"k\">do</span> <span class=\"n\">this</span> <span class=\"n\">automatically</span> <span class=\"n\">and</span> <span class=\"n\">transparently</span> <span class=\"n\">so</span> <span class=\"n\">that</span> <span class=\"n\">users</span> <span class=\"n\">don't</span> <span class=\"k\">have</span> <span class=\"n\">to</span> <span class=\"n\">use</span>\n<span class=\"n\">this</span> <span class=\"n\">combinator</span> <span class=\"n\">explicitly.</span><span class=\"o\">)</span>\n<span class=\"bp\">``</span>\n</code></pre></div>",
        "id": 357553674,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683804801
    },
    {
        "content": "<p>I am not finding where <code>save</code> is defined, though.</p>",
        "id": 357553796,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1683804834
    },
    {
        "content": "<p>To be fair isn't the Python repl <em>less</em> interactive than the Lean VSCode extension? If someone wants to instantly evaluate something, it isn't too hard to add a little button at the end of a lean file, which materializes the <code>#eval</code> for you. It can even be arranged (without any code) that everytime you hit enter a new <code>#eval</code> appears at the beginning of the line.</p>",
        "id": 357750321,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1683865089
    },
    {
        "content": "<p>For Lean 3, I made a little feature in the Emacs mode that would show command responses inline in the buffer. That made me not miss a REPL. Perhaps something like that would satisfy the concerns here? REPLs have lots of strange semantics, especially in languages with extensible syntax and hygienic macros, as their scoping is a bit... complicated. But hovering to see the result of an evaluation can make it hard to have a mental overview over a session, or to compare different results.</p>",
        "id": 358215200,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1684050928
    },
    {
        "content": "<p>For reference, this sounds like <a href=\"https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\">https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens</a> (I think lean.nvim does this, maybe with some plugins, too)</p>",
        "id": 358330405,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1684107749
    }
]