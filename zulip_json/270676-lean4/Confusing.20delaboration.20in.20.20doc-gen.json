[
    {
        "content": "<p>Hi, as you might have noticed doc-gen has been misprinting a few type names recently, for example <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Name#doc\">docs#Lean.Name</a> is mysteriously printed as <code>Lake.Name</code>.  I injected some tracing code into doc-gen that checks whether it is currently documenting the <code>Lean.Name</code> declaration and if it prints will print the delaborated expressions (coming from this function <a href=\"https://github.com/leanprover/doc-gen4/blob/dc9549e2e6bd553cfbb55a10de38be24753ac3c8/DocGen4/Process/Base.lean#L179\">https://github.com/leanprover/doc-gen4/blob/dc9549e2e6bd553cfbb55a10de38be24753ac3c8/DocGen4/Process/Base.lean#L179</a>) to check whether I am messing up myself or just getting weird info. Printing the CodeWithInfos from the type of the <code>anonymous</code> constructor already gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Widget.TaggedText.tag</span> <span class=\"bp\">...</span> <span class=\"o\">(</span><span class=\"n\">Lean.Widget.TaggedText.text</span> <span class=\"s2\">\"Lake.Name\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>so it appears it is already Lean who is giving me a wrong namespace here??? Does anyone have a clue how this could happen? The part of doc-gen that sets up the <code>Environment</code> which gets analyzed here is: <a href=\"https://github.com/leanprover/doc-gen4/blob/dc9549e2e6bd553cfbb55a10de38be24753ac3c8/DocGen4/Load.lean#L40-L59\">https://github.com/leanprover/doc-gen4/blob/dc9549e2e6bd553cfbb55a10de38be24753ac3c8/DocGen4/Load.lean#L40-L59</a></p>\n<p>CC: <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 388158478,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693414843
    },
    {
        "content": "<p>what environment is this? Can you replicate in lean normally?</p>",
        "id": 388163890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693416887
    },
    {
        "content": "<p>can you make a doc-gen free MWE?</p>",
        "id": 388164176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693416995
    },
    {
        "content": "<p>I'll try but that will probably take a bit, was just hoping someone here might have an idea instantly.</p>",
        "id": 388164249,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693417028
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">Lean.MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">fmt</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.PrettyPrinter.ppExprWithInfos</span> <span class=\"o\">(</span><span class=\"n\">Lean.mkConst</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Name</span><span class=\"o\">)</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">fmt</span>\n</code></pre></div>",
        "id": 388164404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693417089
    },
    {
        "content": "<p>Oh, didn't expect it to be that easy :D</p>",
        "id": 388164458,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693417113
    },
    {
        "content": "<p>off topic: is <code>println!</code> new?</p>",
        "id": 388164543,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1693417149
    },
    {
        "content": "<p>nope</p>",
        "id": 388164840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693417262
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">unresolveNameGlobal</span> <span class=\"bp\">``</span><span class=\"n\">Name</span>\n</code></pre></div>",
        "id": 388164851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693417263
    },
    {
        "content": "<p>(By the way, the reason <code>Lake.Name</code> is even showing up is most likely because <code>Lake</code> re-exports <code>Name</code>)</p>",
        "id": 388165262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693417420
    },
    {
        "content": "<p>It seems the issue is that re-exports are preferred over the original name in <code>unresolveNameGlobal</code>, even if you are not in the scope of the re-export</p>",
        "id": 388165777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693417628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> are you planning on tackling this or should I open an issue about it and investigate myself?</p>",
        "id": 389856943,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694169884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Have at it. I'm not sure yet what the desired algorithm is</p>",
        "id": 389939653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694202118
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/2524\">https://github.com/leanprover/lean4/issues/2524</a></p>",
        "id": 389940355,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694202447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Note that if you pass <code>fullNames := true</code> you get the right answer:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span> <span class=\"c1\">-- # `Lean.Name</span>\n  <span class=\"n\">unresolveNameGlobal</span> <span class=\"bp\">``</span><span class=\"n\">Name</span> <span class=\"n\">true</span>\n</code></pre></div>",
        "id": 389957211,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694211410
    },
    {
        "content": "<p>I think the problem may be that the non-<code>fullNames</code> algorithm of <code>unresolveGlobalName</code> tries candidates in reverse?</p>",
        "id": 389957853,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694211879
    }
]