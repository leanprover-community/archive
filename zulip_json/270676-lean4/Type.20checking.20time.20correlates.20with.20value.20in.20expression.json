[
    {
        "content": "<p>Type checking this code takes 4.6s and ~1GB mem on my pc:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">480</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toUInt8</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span>\n    <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"n\">h</span>\n      <span class=\"n\">true</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">false</span>\n</code></pre></div>\n<p>How can I make it faster and less memory consuming? I don't understand why the value (<code>480</code>) affects type checking time (bigger ~ slower). On <code>900</code> it takes 23.3s and 4GB.</p>",
        "id": 403056541,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700431824
    },
    {
        "content": "<p>The issue appears to be the <code>have hh</code> line if you comment that the tc is way faster.<br>\nLikely this ends up asking the kernel to do too much unfolding, or compute something in an inefficient way by saying that the type of <code>h</code> is defeq to that of <code>hh</code>.<br>\nIf you replace things with a proof that makes use of tactics rather than defeq, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">by</span>  <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>it works way faster for me</p>",
        "id": 403057399,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700432591
    },
    {
        "content": "<p>If I replace <code>h</code> with <code>by simpa [x] using h</code> it outputs error<br>\n\"invalid 'simp', proposition expected<br>\nUInt8\"..</p>",
        "id": 403058186,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700433254
    },
    {
        "content": "<p>Oh right the <code>simpa</code> tactic is in Std I guess.<br>\nYou can use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">by</span>\n        <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"bp\">⊢</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>for a pure lean equivalent</p>",
        "id": 403058264,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700433345
    },
    {
        "content": "<p>I did <code>import Std</code> though</p>",
        "id": 403058330,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700433384
    },
    {
        "content": "<p>You're probably using an older version of Lean 4. It was the last couple months where you could do <code>simp [x]</code> with <code>x</code> a local definition.</p>",
        "id": 403058366,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700433418
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">900000</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toUInt8</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span>\n    <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">h</span>\n      <span class=\"n\">true</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">false</span>\n</code></pre></div>\n<p>works in the web editor, so I think Kyle must be right</p>",
        "id": 403058396,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700433455
    },
    {
        "content": "<p>I'm on v4.2.0, I'll try with 4.3.0-rc2 now</p>",
        "id": 403058412,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700433467
    },
    {
        "content": "<p>If you are on an older version then maybe you can just get rid of the <code>[x]</code> even</p>",
        "id": 403058478,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700433504
    },
    {
        "content": "<p>I don't understand why <code>by simp [x]; exact h</code> makes this fast. With no imports, all it's doing is unfolding <code>x</code>.</p>",
        "id": 403058509,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700433537
    },
    {
        "content": "<p>Yes, works in an instant, thanks!</p>",
        "id": 403058852,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700433832
    },
    {
        "content": "<p>yeah indeed <code>id h</code> also works instantly <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span></p>",
        "id": 403058907,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700433857
    },
    {
        "content": "<p>Maybe it's somehow tricking it to unfold definitions rather than evaluating them on this particular <code>x</code>...</p>\n<p>If you unfold all the definitions, you have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">Fin.ofNat</span> <span class=\"mi\">480</span><span class=\"bp\">.</span><span class=\"n\">val.val</span> <span class=\"o\">}</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span>\n<span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">Fin.ofNat</span> <span class=\"mi\">480</span><span class=\"bp\">.</span><span class=\"n\">val.val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span>\n</code></pre></div>\n<p>where the first is a <code>UInt8</code> less-than.</p>",
        "id": 403058962,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700433912
    },
    {
        "content": "<p>It seems like neither <code>id</code> nor <code>simpa</code> work in the original context, here is another example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">):</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">h0.val</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toUInt8</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span>\n    <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"n\">h</span> <span class=\"c1\">-- by simpa [x] using h</span>\n      <span class=\"o\">()</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">()</span>\n</code></pre></div>\n<p>Replacing <code>h0.val - '0'.val</code> with a constant or with <code>h0.val</code> makes it instant, making <code>h0</code> constant is the same...</p>",
        "id": 403061083,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700435879
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Char</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">h0.val</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">h1.val</span> <span class=\"bp\">-</span> <span class=\"sc\">'0'</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toUInt8</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span>\n    <span class=\"k\">then</span>\n      <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:</span> <span class=\"n\">x.toNat</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">24</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">UInt8.toNat</span><span class=\"o\">]</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span>\n      <span class=\"o\">()</span>\n    <span class=\"k\">else</span>\n      <span class=\"o\">()</span>\n</code></pre></div>\n<p>works for me</p>",
        "id": 403061580,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700436328
    },
    {
        "content": "<p>Works in the context, thanks again! But why does it loop in the first place, or when I replace rewrite with unfold?</p>",
        "id": 403061983,
        "sender_full_name": "Daniil Kisel",
        "timestamp": 1700436692
    },
    {
        "content": "<p>Profiler says that most of the time is spent in the kernel typechecker; I'm running it through lean4lean to get some more logging but it seems like <code>Nat.mod</code> is unfolded at some point and thereafter <code>whnf</code> tries to run the underlying WF definition</p>",
        "id": 403068076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700440698
    },
    {
        "content": "<p>Looks like the issue is that the kernel typechecking goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">UInt32.toUInt8</span> <span class=\"mi\">400</span>\n  <span class=\"n\">UInt8.toNat</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.mod</span> <span class=\"o\">(</span><span class=\"n\">UInt32.toNat</span> <span class=\"mi\">400</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">255</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and the heuristic for determining whether to use the <code>Nat.mod</code> kernel accelerated definition is that both sides of the equality have no fvars, including fvars with definitions. So <code>Nat.mod</code> is unfolded instead, and thereafter comes 400 steps and a massive expression at each step</p>",
        "id": 403074046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700443438
    }
]