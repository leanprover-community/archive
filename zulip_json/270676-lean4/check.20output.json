[
    {
        "content": "<p>Is there any reason why</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>gives the expected output <code>Nat → Nat</code> but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">addOne</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">addOne</span>\n</code></pre></div>\n<p>prints a weird <code>addOne (a✝ : Nat) : Nat</code>?</p>",
        "id": 360540866,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684850386
    },
    {
        "content": "<p>There's a special case in <code>#check</code> where if the expression is a constant then it uses a different pretty printer that tries to format it like a function definition.</p>",
        "id": 360541457,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684850488
    },
    {
        "content": "<p><code>#check (addOne)</code> gives the behavior you expect</p>",
        "id": 360541470,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684850492
    },
    {
        "content": "<p>If you do <code>#check @addOne</code> you can trick it into not doing that</p>",
        "id": 360541496,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684850496
    },
    {
        "content": "<p>Parentheses instantiate implicit arguments with metavariables, which might not be what you want.</p>",
        "id": 360541785,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684850561
    },
    {
        "content": "<p>But why does <code>#check</code> do that to me?</p>",
        "id": 360541900,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684850581
    },
    {
        "content": "<p>Because of this thread:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60.23check.20.3Cident.3E.60/near/315783442\">said</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/leanprover/lean4/pull/1943\">lean4#1943</a>, I made a suggestion not directly related to the PR:</p>\n<blockquote>\n<p>In fact I would probably go further and just make <code>#check $n:ident</code> a semantically separate command that shows the signature of <code>n</code> without elaboration - I can't be the only one that usually starts with <code>#check toString</code> and then only remembers to add the <code>@</code> on the second try.</p>\n</blockquote>\n<p>How do people use <code>#check</code> around here? Would it be a welcome change if <code>#check toString</code> printed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ToString.toString.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">ToString</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>(using the fancy new signature pretty printer) instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">toString</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m.1632</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n</code></pre></div>\n<p>even if it is not perfectly consistent with the more general meaning \"show type of this <em>term</em>\" of <code>#check</code>?</p>\n</blockquote>",
        "id": 360542567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684850713
    },
    {
        "content": "<p>Well, I guess I understand how it is useful in real situations. It's simply inconvenient in early teaching.</p>",
        "id": 360542903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1684850769
    },
    {
        "content": "<p>Here's an override using the standard type signature rather than the fancy one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Meta</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"k\">#check</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Term.withDeclName</span> <span class=\"bp\">`</span><span class=\"n\">_check</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">term</span> <span class=\"k\">then</span>\n      <span class=\"n\">try</span>\n        <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstWithInfos</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">c</span>\n          <span class=\"n\">addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">term</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n          <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{c} : {decl.type}\"</span>\n          <span class=\"n\">return</span>\n      <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>  <span class=\"c1\">-- identifier might not be a constant but constant + projection</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">term</span> <span class=\"n\">none</span>\n    <span class=\"n\">Term.synthesizeSyntheticMVarsNoPostponing</span>\n    <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.levelMVarToParam</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n    <span class=\"k\">if</span> <span class=\"n\">e.isSyntheticSorry</span> <span class=\"k\">then</span>\n      <span class=\"n\">return</span>\n    <span class=\"n\">logInfoAt</span> <span class=\"n\">tk</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{e} : {type}\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">addOne</span>\n<span class=\"c1\">-- addOne : Nat → Nat</span>\n</code></pre></div>",
        "id": 360544787,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684851151
    },
    {
        "content": "<p>Maybe the real <code>#check</code> could have an option for how fancy it should be?</p>",
        "id": 360544817,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684851160
    },
    {
        "content": "<p>You can override the command much more easily. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 360596063,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684862722
    },
    {
        "content": "<p>That gives different output -- it instantiates the implicit arguments</p>",
        "id": 360596298,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684862782
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">@$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Lean.Macro.throwUnsupported</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">$</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">#check</span> <span class=\"bp\">@$</span><span class=\"n\">term</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This would be closer, but it prepends <code>@</code> to the name in the output</p>",
        "id": 360596455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684862839
    },
    {
        "content": "<p>arguably it is more correct/consistent to put the <code>@</code> on the name</p>",
        "id": 360599343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684863649
    },
    {
        "content": "<p>Lean3 doesn't do so when you hover over a name in the editor</p>",
        "id": 360600006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684863836
    },
    {
        "content": "<p>yes but that's the signature pretty printer, which as we have established has its own rules</p>",
        "id": 360600852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684864029
    },
    {
        "content": "<p>the desired behavior here seems to be <code>expr : type</code> and for that you want to print <code>expr</code> in such a way that it is at least plausibly re-parseable</p>",
        "id": 360600946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684864066
    },
    {
        "content": "<p>which means putting <code>@</code> if there is an unapplied implicit arg</p>",
        "id": 360601161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684864110
    }
]