[
    {
        "content": "<p>I am having a lot of trouble proving this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">leq</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">xs.length</span><span class=\"o\">):</span>\n  <span class=\"o\">(</span><span class=\"n\">xs.take</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"o\">(</span><span class=\"n\">xs.reverse.take</span> <span class=\"o\">(</span><span class=\"n\">xs.length</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I have tried induction on both i and xs, but I have never been able to prove<br>\n<code> List.reverse (List.take (List.length xs) (List.reverse xs)) = xs </code><br>\nHow should I proceed?</p>",
        "id": 323636005,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1674708061
    },
    {
        "content": "<p>If you have proved that reverse is an involution, then taking reverse on both sides you only need to prove <code>take xs.length xs.reverse = xs.reverse</code></p>",
        "id": 323636276,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674708326
    },
    {
        "content": "<p>Then with <code>take xs.length xs = xs</code> and <code>xs.reverse.length = xs.length</code> you should be able to conclude the proof</p>",
        "id": 323636347,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1674708366
    },
    {
        "content": "<p>I have tried that approach, but I have not been able to make the proof come together. I am very new at this, so I am probably making some simple error in approach, but I did not make that work.</p>",
        "id": 323636758,
        "sender_full_name": "Jesse Slater",
        "timestamp": 1674708783
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"575564\">@Jesse Slater</span> , here is one way you could do it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">List.take_length</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l.take</span> <span class=\"n\">l.length</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"n\">ih</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">take</span><span class=\"o\">,</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">reverse_lemma</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">l.reverse.take</span> <span class=\"n\">l.length</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">reverse</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">conv</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rhs</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.reverse_reverse</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">congrArg</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">List.length_reverse</span> <span class=\"n\">l</span><span class=\"o\">]</span>\n  <span class=\"n\">apply</span> <span class=\"n\">List.take_length</span>\n</code></pre></div>",
        "id": 323638283,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1674710159
    }
]