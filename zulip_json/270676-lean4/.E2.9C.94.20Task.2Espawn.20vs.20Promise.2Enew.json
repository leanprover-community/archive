[
    {
        "content": "<p>I am trying, for the firs time, to use Task and the new Promise API and was surprised that (1) Task.spawn is a pure function and that (2) <a href=\"http://Promise.new\">Promise.new</a> is in the BaseIO monad.</p>\n<p>Should they both, instead, be in either in BaseIO or pure functions since Promise is implemented in terms of a Task (with no closure associated)?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Creates a new `Promise`. -/</span>\n<span class=\"kd\">@[extern \"lean_io_promise_new\"]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Promise.new</span> <span class=\"o\">[</span><span class=\"n\">Nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">BaseIO</span> <span class=\"o\">(</span><span class=\"n\">Promise</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[noinline, extern \"lean_task_spawn\"]</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">spawn</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fn</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prio</span> <span class=\"o\">:=</span> <span class=\"n\">Priority.default</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Task</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨</span><span class=\"n\">fn</span> <span class=\"o\">()⟩</span>\n</code></pre></div>\n<p>I was happy to see I could use Task.spawn in my pure functions, but sad that that did not carry forward to <a href=\"http://Promise.new\">Promise.new</a>.</p>",
        "id": 324424748,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1674994188
    },
    {
        "content": "<p><code>Promise</code> is an observably mutable data structure, <code>Task</code> is not. It would be pretty bad if the compiler deduplicated two separate <code>Promise.new</code> calls.</p>",
        "id": 324433385,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674998209
    },
    {
        "content": "<p>Thanks! Now that you pointed out the \"observable\" part, it is kind of obvious.</p>\n<p>My initial surprise was to see Task as a pure interface when, for instance, in Haskell, green threads are AFAIK in IO.</p>\n<p>But thinking in terms of an \"observable\" mutation, a Task is never mutated, but may just take some time to provide a value, and only a single value is provided to its clients. A Promise, on the other hand, although it will only have a single value visible to clients, is mutated explicitly separate from when the Promise is created. Is this a correct understanding?</p>",
        "id": 324498996,
        "sender_full_name": "Yuri de Wit",
        "timestamp": 1675034206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"463095\">Yuri de Wit</span> has marked this topic as resolved.</p>",
        "id": 324499379,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675034484
    },
    {
        "content": "<p>Yes. It's not necessarily completely clear-cut; you might imagine a function <code>Task.isFinished : Task A -&gt; IO Bool</code> (I actually thought we had it) that arguably lets you observe mutable state, but it's hard to imagine someone complaining that it will return <code>true</code> too soon because of purity optimizations.</p>",
        "id": 324552009,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675068139
    },
    {
        "content": "<p>The function is just in the wrong namespace. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> It's called <code>IO.hasFinished</code></p>",
        "id": 324752556,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675104469
    },
    {
        "content": "<p>Ah, I had hoped it had <code>Task</code> somewhere in its name...</p>",
        "id": 324766944,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1675109220
    }
]