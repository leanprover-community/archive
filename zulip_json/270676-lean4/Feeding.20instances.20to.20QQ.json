[
    {
        "content": "<p>How do you make <code>QQ</code> aware of an instance you just synthesized? The MWE below depends on mathlib but I hope it's enough to make the question clear:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.NormNum.Core</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Mathlib</span> <span class=\"n\">Meta</span> <span class=\"n\">NormNum</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n   <span class=\"k\">let</span> <span class=\"n\">sα</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"k\">have</span> <span class=\"n\">al</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkOfNat</span> <span class=\"n\">α</span> <span class=\"n\">sα</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkRawNatLit</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n   <span class=\"k\">have</span> <span class=\"n\">ar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkOfNat</span> <span class=\"n\">α</span> <span class=\"n\">sα</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkRawNatLit</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n   <span class=\"k\">let</span> <span class=\"n\">al_pos</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">al</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">ar</span><span class=\"o\">)</span>\n   <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>This fails at <code>q($al &lt; $ar) </code> with message <code>failed to synthesize instance LT «$α»</code>, <code>q</code> isn't seeing the linear ordered field instance.</p>",
        "id": 355600504,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683145263
    },
    {
        "content": "<p>Note it may be that I'm completely misunderstanding how <code>QQ</code> should be used.</p>",
        "id": 355601323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683145572
    },
    {
        "content": "<p>What about adding <code>have inst := $sa</code> to the term where you want the instance to be available?</p>",
        "id": 355601483,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683145644
    },
    {
        "content": "<p>Yeah, you could do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n   <span class=\"k\">let</span> <span class=\"n\">sα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"k\">have</span> <span class=\"n\">al</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkOfNat</span> <span class=\"n\">α</span> <span class=\"n\">sα</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkRawNatLit</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n   <span class=\"k\">have</span> <span class=\"n\">ar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkOfNat</span> <span class=\"n\">α</span> <span class=\"n\">sα</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkRawNatLit</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n   <span class=\"k\">let</span> <span class=\"n\">al_pos</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">sα</span> <span class=\"bp\">;</span> <span class=\"bp\">$</span><span class=\"n\">al</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">ar</span><span class=\"o\">)</span>\n   <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>\n<p>But I hope there's a better way without a <code>let</code></p>",
        "id": 355601783,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683145761
    },
    {
        "content": "<p>Oh actually it just works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n   <span class=\"k\">let</span> <span class=\"n\">sα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"k\">have</span> <span class=\"n\">al</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkOfNat</span> <span class=\"n\">α</span> <span class=\"n\">sα</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkRawNatLit</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n   <span class=\"k\">have</span> <span class=\"n\">ar</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkOfNat</span> <span class=\"n\">α</span> <span class=\"n\">sα</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkRawNatLit</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n   <span class=\"k\">let</span> <span class=\"n\">al_pos</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">al</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">ar</span><span class=\"o\">)</span>\n   <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 355601841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683145789
    },
    {
        "content": "<p>And I guess you could clean it up even more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n<span class=\"k\">do</span> <span class=\"k\">let</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span>\n   <span class=\"k\">let</span> <span class=\"n\">sα</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">synthInstance</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">LinearOrderedField</span> <span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span>\n   <span class=\"k\">have</span> <span class=\"n\">al</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n   <span class=\"k\">have</span> <span class=\"n\">ar</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n   <span class=\"k\">let</span> <span class=\"n\">al_pos</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">al</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">$</span><span class=\"n\">ar</span><span class=\"o\">)</span>\n   <span class=\"n\">pure</span> <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 355602035,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683145854
    },
    {
        "content": "<p>Oh I see, I simply needed to tell Lean that <code>sα</code> is also in the <code>QQ</code> world with a type ascription.</p>",
        "id": 355602122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683145902
    },
    {
        "content": "<p>Thanks Tomas and Adam!</p>",
        "id": 355602402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683146004
    },
    {
        "content": "<p>I think if you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Qq.synthInstanceQ#doc\">docs4#Qq.synthInstanceQ</a> then you can skip adding some of the ascriptions here</p>",
        "id": 355615374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683151382
    },
    {
        "content": "<p>Oh, I guess <code>Qq</code> doesn't get shown in doc-gen</p>",
        "id": 355615465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683151428
    },
    {
        "content": "<p>Indeed, although that could be done</p>",
        "id": 355615552,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683151458
    },
    {
        "content": "<p>I'm not so sure that synthInstanceQ removes the need for type ascription. In my experience, Qq refuses to reflect let-bindings without type ascription, even if the type is completely unambiguous</p>",
        "id": 355616430,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1683151913
    },
    {
        "content": "<p>I just tested, replacing <code>synthInstance</code> in the original mwe with <code>synthInstanceQ</code> solves the problem</p>",
        "id": 355617457,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683152420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Feeding.20instances.20to.20QQ/near/355615552\">said</a>:</p>\n<blockquote>\n<p>Indeed, although that could be done</p>\n</blockquote>\n<p>I would be happy if this was the case.</p>",
        "id": 361156532,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1685045196
    }
]