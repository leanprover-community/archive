[
    {
        "content": "<p>Dear All,</p>\n<p>I often find myself wanting how a term of some inductive type is build out of its constructors.  Is there a command that prints this information?</p>\n<p>I would especially like this to work on <code>Expr</code>s, since my main motivation is as a help to debug meta-code.</p>\n<p>My current approach is a simple-minded recursion into <code>Expr</code>s.  Here is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">inspect</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">inspect: '3 ≠ 0'</span>\n\n<span class=\"cm\">'Ne' -- app</span>\n<span class=\"cm\">|-'Nat' -- const</span>\n<span class=\"cm\">|-'OfNat.ofNat' -- app</span>\n<span class=\"cm\">| |-'Nat' -- const</span>\n<span class=\"cm\">| |-'3' -- natLit</span>\n<span class=\"cm\">| |-'instOfNatNat' -- app</span>\n<span class=\"cm\">| | |-'3' -- natLit</span>\n<span class=\"cm\">|-'OfNat.ofNat' -- app</span>\n<span class=\"cm\">| |-'Nat' -- const</span>\n<span class=\"cm\">| |-'0' -- natLit</span>\n<span class=\"cm\">| |-'instOfNatNat' -- app</span>\n<span class=\"cm\">| | |-'0' -- natLit</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 380646300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690886791
    },
    {
        "content": "<p>Before I try anything deeper, is this already available, in some form or other?</p>\n<p>Thanks!</p>",
        "id": 380646443,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690886822
    },
    {
        "content": "<p>In case you are wondering, this is the simple-minded code that I used for the example above:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>inspect</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Lean.Expr.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">treeM</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">MessageData</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n<span class=\"k\">match</span> <span class=\"n\">ex</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">n</span>                 <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"bvar\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}'\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fv</span>                <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"fvar\"</span><span class=\"o\">,</span> <span class=\"n\">fv.name</span><span class=\"o\">,</span>  <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mv</span>                <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"mvar\"</span><span class=\"o\">,</span> <span class=\"n\">mv.name</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">u</span>                 <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"sort\"</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">na</span> <span class=\"bp\">..</span>            <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"const\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{na}'\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"bp\">..</span>                 <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"app\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{ex.getAppFn.constName}'\"</span><span class=\"o\">,</span> <span class=\"n\">ex.getAppArgs</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">na</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">i</span>           <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"lam\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{i.brackets.1}'{na}'{i.brackets.2}\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">na</span> <span class=\"n\">t</span> <span class=\"n\">b</span> <span class=\"n\">i</span>       <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"forallE\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{i.brackets.1}'{na}'{i.brackets.2}\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">na</span> <span class=\"n\">t</span> <span class=\"n\">v</span> <span class=\"n\">b</span> <span class=\"n\">i</span>        <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"letE\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{na}' {t} {v} {b} {i}\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"n\">Literal.natVal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"natLit\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}'\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"n\">Literal.strVal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"strLit\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{n}'\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">e</span>              <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"mdata\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{e}'\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">])</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">na</span> <span class=\"n\">id</span> <span class=\"n\">e</span>           <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"s2\">\"proj\"</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"'{na}' {id} {e}\"</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">])</span>\n\n<span class=\"n\">partial</span>\n<span class=\"kd\">def</span> <span class=\"n\">treeR</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">withCtorName</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">indent</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span> <span class=\"s2\">\"  \"</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">MessageData</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">ctorN</span><span class=\"o\">,</span> <span class=\"n\">msg</span><span class=\"o\">,</span> <span class=\"n\">es</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">treeM</span> <span class=\"n\">e</span>\n<span class=\"k\">let</span> <span class=\"n\">ctorN</span> <span class=\"o\">:</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">withCtorName</span> <span class=\"k\">then</span> <span class=\"o\">(</span><span class=\"s2\">\" -- \"</span> <span class=\"bp\">++</span> <span class=\"n\">ctorN</span> <span class=\"bp\">++</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"k\">let</span> <span class=\"n\">mes</span> <span class=\"o\">:=</span> <span class=\"n\">es.map</span> <span class=\"o\">(</span><span class=\"n\">treeR</span> <span class=\"o\">(</span><span class=\"n\">withCtorName</span> <span class=\"o\">:=</span> <span class=\"n\">withCtorName</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">indent</span> <span class=\"o\">:=</span> <span class=\"n\">indent</span> <span class=\"bp\">++</span> <span class=\"n\">sep</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:=</span> <span class=\"n\">sep</span><span class=\"o\">))</span>\n<span class=\"n\">mes.foldl</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">x.compose</span> <span class=\"n\">indent</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">((</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"|-\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">msg.compose</span> <span class=\"n\">ctorN</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">inspect</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">MonadLog</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">AddMessageContext</span> <span class=\"n\">m</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">MonadOptions</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">withCtorName</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">logInfo</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"inspect: '{e}'</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">compose</span> <span class=\"o\">(</span><span class=\"n\">treeR</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">withCtorName</span> <span class=\"o\">:=</span> <span class=\"n\">withCtorName</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sep</span> <span class=\"o\">:=</span> <span class=\"s2\">\"| \"</span><span class=\"o\">)))</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"inspect\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">inspect</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">bang</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">focus</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"k\">match</span> <span class=\"n\">bang</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getMainTarget</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">id</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">loc</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">id</span> <span class=\"n\">none</span>\n      <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getFVar</span><span class=\"bp\">!</span> <span class=\"n\">loc</span>\n      <span class=\"n\">return</span> <span class=\"n\">decl.type</span>\n  <span class=\"n\">inspect</span> <span class=\"n\">expr</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">inspect</span>\n  <span class=\"n\">inspect</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">Nat.succ_ne_zero</span> <span class=\"mi\">2</span>\n</code></pre></div>\n</div></div>",
        "id": 380649410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690887330
    },
    {
        "content": "<p><code>Mathlib.Tactic.Explode</code> has a command that's meant for showing the structure of proofs. By default it filters out anything that's not a proof though, and it flattens out the hierarchical structure of an expression, which is probably not what you want.</p>",
        "id": 380651269,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690887651
    },
    {
        "content": "<p>Here's something that simple that also gives you the <code>Expr</code> structure of an expression:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.ToExpr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"inspect\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n    <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"{toExpr ty}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">inspect</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">Expr.app</span>\n<span class=\"cm\">  (Expr.app (Expr.app (Expr.const `Ne [Level.succ Level.zero]) (Expr.const `Nat []))</span>\n<span class=\"cm\">    (Expr.app</span>\n<span class=\"cm\">      (Expr.app (Expr.app (Expr.const `OfNat.ofNat [Level.zero]) (Expr.const `Nat [])) (Expr.lit (Literal.natVal 3)))</span>\n<span class=\"cm\">      (Expr.app (Expr.const `instOfNatNat []) (Expr.lit (Literal.natVal 3)))))</span>\n<span class=\"cm\">  (Expr.app</span>\n<span class=\"cm\">    (Expr.app (Expr.app (Expr.const `OfNat.ofNat [Level.zero]) (Expr.const `Nat [])) (Expr.lit (Literal.natVal 0)))</span>\n<span class=\"cm\">    (Expr.app (Expr.const `instOfNatNat []) (Expr.lit (Literal.natVal 0))))</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 380652469,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690887872
    },
    {
        "content": "<p>Kyle, thank you!  This is close, and, had I known about it, I would have probably stuck with <del><code>Explode</code></del><code>ToExpr</code>.</p>",
        "id": 380653051,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690887972
    },
    {
        "content": "<p>I think that I prefer <code>inspect</code>, but <del><code>Explode</code></del><code>ToExpr</code> is good to know!</p>",
        "id": 380653235,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690888006
    },
    {
        "content": "<p>(It might be nice to tweak the <code>ToExpr</code> instance to use <code>mkApp*</code> functions. It's a derived instance though, so I'm not sure the best way to do this...)</p>",
        "id": 380653342,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1690888028
    },
    {
        "content": "<p>(Mostly, my preference is out of aesthetics, the information about proofs is likely rarely relevant for my intended application anyway.)</p>",
        "id": 380653439,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690888048
    },
    {
        "content": "<p>As far as I can tell, <code>ToExpr</code> works for several of the other inductives that I would like.  For the moment, I will debug with a combination of <code>inspect</code> and <code>ToExpr</code>.</p>\n<p>To be fair, it is rare that I need to <code>inspect</code> much more than just the head-symbol, but I still find that displaying the information line-by-line is better suited for my application.</p>",
        "id": 380655770,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1690888448
    }
]