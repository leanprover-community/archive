[
    {
        "content": "<p>Does anyone know the Lean 4 translation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/expr.contains_constant\">docs#expr.contains_constant</a>?</p>",
        "id": 355887461,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683235298
    },
    {
        "content": "<p>I'm not sure if there's a direct translation, but there are at least <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.find?#doc\">docs4#Lean.Expr.find?</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Expr.isConstOf#doc\">docs4#Lean.Expr.isConstOf</a> that you can wire together</p>",
        "id": 355888181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683235588
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Lean.Expr.containsConst</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">Option.isSome</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">e.find</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">n</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 355889086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683236006
    },
    {
        "content": "<p>Thanks to both of you!</p>",
        "id": 355889234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1683236082
    },
    {
        "content": "<p>Sorry, missed this earlier and re-implemented it myself, potentially more efficiently:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">containsConst</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n<span class=\"n\">e.foldConsts</span> <span class=\"n\">false</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">||</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The doc-string on <code>Expr.foldConsts</code> is <code>/-- Apply </code>f<code> to every constant occurring in </code>e<code> once. -/</code>, and it is using a unsafely implemented cache, presumably for performance reasons!</p>",
        "id": 355915106,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683249548
    },
    {
        "content": "<p>one thing that <code>find?</code> will do that <code>foldConsts</code> won't is to exit early once the answer turns out to be <code>true</code></p>",
        "id": 355917763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683251322
    },
    {
        "content": "<p>I think they are both using caching to avoid visiting the same subterm multiple times in a dag-like Expr</p>",
        "id": 355917803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683251361
    }
]