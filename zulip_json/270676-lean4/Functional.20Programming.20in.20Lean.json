[
    {
        "content": "<p>What are the plans for <a href=\"https://github.com/leanprover/functional_programming_in_lean\">https://github.com/leanprover/functional_programming_in_lean</a>, can the community reasonably help?</p>",
        "id": 284682305,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1654125811
    },
    {
        "content": "<p>It is a public repo that we are going to use to deploy the book that <span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> is writing.<br>\nWe plan to release the chapters incrementally. We hope to release the first chapter soon, and comments and feedback will be very welcome.</p>",
        "id": 284684545,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1654127928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  BTW, I am very grateful for all the work you, Arthur, and others are putting in the Metaprogramming book.</p>",
        "id": 284684751,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1654128082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/284684545\">said</a>:</p>\n<blockquote>\n<p>[C]omments and feedback will be very welcome.</p>\n</blockquote>\n<p>What's the preferred method of doing this?<br>\nI had a dig around and couldn't find the source repo anywhere, should I just type up notes as an issue in the gh_pages repo?</p>",
        "id": 285841228,
        "sender_full_name": "Rosie Baish",
        "timestamp": 1655038794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504244\">@Rosie Baish</span> Great questions. The book repo is currently private, but we will make it public in the future.<br>\nRegarding feedback, you can post it here or contact David directly. He has already shared his email: <a href=\"mailto:david@davidchristiansen.dk\">david@davidchristiansen.dk</a>.</p>",
        "id": 285855577,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1655058917
    },
    {
        "content": "<p>Hi! Email is great, as is contacting me here. If you PM or mention me, I get a notification.</p>\n<p>The source of the book is not presently public because I have fairly limited time to work on it, and public repositories require maintenance, moderation, and curation that would take more time away from writing.</p>",
        "id": 286254176,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1655317781
    },
    {
        "content": "<p>There is an interesting discussion about <a href=\"#narrow/stream/270676-lean4/topic/OO.20polymorphism.3F\">OO polymorphism</a> that involve structures. I noticed that none of the 3 books on Lean explains the generation of \"to&lt;Parent&gt;\" structural slicing methods and that these methods do not correspond to OO-style upcasts.</p>",
        "id": 317048203,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1671573924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> Thanks for the great book! I think I spotted an error in the Monad introduction.  You are calling \"pre-order numbering\" what looks to me to be a post-order numbering, at least according to the terminology on wikipedia: <a href=\"https://en.wikipedia.org/wiki/Tree_traversal\">https://en.wikipedia.org/wiki/Tree_traversal</a>  (i.e. visiting left child, right child, and then the node, in that order).  <a href=\"https://leanprover.github.io/functional_programming_in_lean/monads.html#numbering-tree-nodes\">https://leanprover.github.io/functional_programming_in_lean/monads.html#numbering-tree-nodes</a></p>",
        "id": 327345132,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1676185602
    },
    {
        "content": "<p>Actually it looks like an inorder traversal (left child, then the root, then the right child)</p>",
        "id": 327347075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676187160
    },
    {
        "content": "<p>Yep, it's inorder. Those names...</p>\n<p>I'll fix it. Thanks!</p>",
        "id": 327351332,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1676190600
    },
    {
        "content": "<p>\"This is because the nodes in the right subtree should be numbered starting from the highest number assigned in the left subtree\" I think this should be \"one after the highest\" or something, since the next number will be the root, <em>then</em> the right subtree.</p>",
        "id": 327413414,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1676222084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571451\">Jeremy Salwen</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/327413414\">said</a>:</p>\n<blockquote>\n<p>\"This is because the nodes in the right subtree should be numbered starting from the highest number assigned in the left subtree\" I think this should be \"one after the highest\" or something, since the next number will be the root, <em>then</em> the right subtree.</p>\n</blockquote>\n<p>Thanks! Fixed in the latest development version.</p>",
        "id": 341334930,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1678654562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> I began to read the new chapter and I'm not sure I'm convinced by the running example in <a href=\"https://leanprover.github.io/functional_programming_in_lean/dependent-types/universe-pattern.html\">https://leanprover.github.io/functional_programming_in_lean/dependent-types/universe-pattern.html</a>. The \"Type Classes vs Universes\" section explains when universes à la Tarski can be better than type classes but then it seems to me that your example would be perfectly handled by the decidable type class. For instance, using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.decidablePiFintype#doc\">docs4#Fintype.decidablePiFintype</a> from mathlib4, we can write:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Fintype.Basic</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">==</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">decide</span> <span class=\"o\">((</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">not</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 341691498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1678793700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> One slight clarification I noticed while skimming the book. In 2.3, you mention that <code>open Lake DSL</code> opens the namespaces <code>Lake</code> and <code>DSL</code>. More specifically, it opens <code>Lake</code> and <code>Lake.DSL</code>.</p>",
        "id": 341855672,
        "sender_full_name": "Mac Malone",
        "timestamp": 1678813321
    },
    {
        "content": "<p>That's a little surprising, given that's not what it means in mathlib3. Does mathport translate <code>open foo bar</code> to <code>open foo</code> <code>open bar</code>?</p>",
        "id": 341874768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678818409
    },
    {
        "content": "<p>How does it work in mathlib3?</p>",
        "id": 341875536,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678818613
    },
    {
        "content": "<p><code>open foo bar</code> means <code>open foo</code> <code>open bar</code> in lean 3</p>",
        "id": 341877074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1678819125
    },
    {
        "content": "<p>This is also what Lean 4 does. But for example with <code>Lake.DSL</code> if you <code>open Lake</code> the <code>Lake</code> namespace is already open so naturally <code>DSL</code> is now a top level namespace and if you open <code>DSL</code> you open that top level namespace which ends up opening <code>Lake.DSL</code></p>",
        "id": 341877235,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678819190
    },
    {
        "content": "<p>So the (fairly common in category theory) mathlib3 idiom <code>open category_theory category_theory.limits</code> can now be <code>open CategoryTheory Limits</code> in lean 4 by the sounds of things.</p>",
        "id": 341885731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1678821931
    },
    {
        "content": "<p>yes</p>",
        "id": 341887822,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1678822561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>  in Datatypes and Patterns section you have \"a similar definition of definition of <code>Bool</code>\"</p>",
        "id": 343811327,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679533343
    },
    {
        "content": "<p>Also \"if the numerator is less that the divisor\" (that --&gt; than)</p>",
        "id": 343818896,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1679539787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> In Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/datatypes-and-patterns.html\">Datatypes and Patterns</a>, I think <code>n &lt; k</code> in the following code should be <code>k = 0 ∨ n &lt; k</code>. Otherwise, it'd be hard to prove termination for <code>div</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 350275990,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1681635445
    },
    {
        "content": "<p>Here's the proof of termination for <code>div</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Nat.Lemmas</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">div_rec_lemma</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">not_or</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">constructor</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.zero_lt_of_ne_zero</span> <span class=\"n\">h₁.left</span>\n    <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Nat.le_of_not_lt</span> <span class=\"n\">h₁.right</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Nat.div_rec_lemma</span>\n  <span class=\"n\">assumption</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">k</span> <span class=\"k\">then</span>\n    <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"n\">decreasing_by</span> <span class=\"k\">show</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">div_rec_lemma</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">assumption</span>\n</code></pre></div>",
        "id": 350317282,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1681652301
    },
    {
        "content": "<p>Your suggestion provides an incorrect answer for <code>k = 0</code>, for which division is undefined, not <code>0</code> :-)</p>\n<p>In the imminently-released final chapter, there's also a proof of termination, and the section in question links to it. I'll be interested to hear what you think!</p>",
        "id": 350342686,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681664484
    },
    {
        "content": "<p>(and thank you for the careful attention)</p>",
        "id": 350342710,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681664499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"443984\">Newell Jensen</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/343811327\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span>  in Datatypes and Patterns section you have \"a similar definition of definition of <code>Bool</code>\"</p>\n</blockquote>\n<p>Thanks! Fixed in the imminent release :-)</p>",
        "id": 350342919,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681664593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/341855672\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> One slight clarification I noticed while skimming the book. In 2.3, you mention that <code>open Lake DSL</code> opens the namespaces <code>Lake</code> and <code>DSL</code>. More specifically, it opens <code>Lake</code> and <code>Lake.DSL</code>.</p>\n</blockquote>\n<p>Thank you! This is a good clarification.</p>",
        "id": 350343215,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681664745
    },
    {
        "content": "<p>In Lean, division by 0 is defined and equal to 0.</p>",
        "id": 350344070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681665232
    },
    {
        "content": "<p>This is a reasonable pragmatic thing to do as part of a standard library, but I don't think it's a good way to make the point that I want to make about recursive functions</p>",
        "id": 350347416,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681667095
    },
    {
        "content": "<p>Though that is also probably worth a little note here :-)</p>",
        "id": 350347752,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681667299
    },
    {
        "content": "<p>I'm happy if you don't want your division by 0 to be a junk value. But I think the point Bulhwi is making is that your claim \"This program terminates for all inputs\" just after the definition of <code>div</code> is not correct, because your code really doesn't terminate if <code>k=0</code>.</p>",
        "id": 350348065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681667510
    },
    {
        "content": "<p>Oh, absolutely! That's definitely the case (and fixed now)</p>",
        "id": 350348132,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681667545
    },
    {
        "content": "<blockquote>\n<p>According to the constructors, a <code>List α</code> can be built with either <code>nil</code> or <code>cons</code>. The constructor <code>nil</code> represents empty lists, and the constructor <code>cons</code> represents a single element in the linked list.</p>\n</blockquote>\n<p>In Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/polymorphism.html\">Polymorphism</a>, I'm not sure how I should understand the clause \"the constructor <code>cons</code> represents a single element in the linked list.\" Looking at <a href=\"https://en.wikipedia.org/wiki/List_(abstract_data_type)\">the Wikipedia page on lists</a>, it seems the following explanation makes more sense:</p>\n<blockquote>\n<p>the constructor <code>cons</code> represents an operation that adds an element at the beginning of another list.</p>\n</blockquote>",
        "id": 350430555,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1681717354
    },
    {
        "content": "<p>Thanks, I can see how that's confusing! It's important to the writing style in use here that constructors are not verbs - they're inert and don't compute. But I'll adjust it!</p>",
        "id": 350593755,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681757360
    },
    {
        "content": "<p>Well, the final prerelease of the book prior to my deadline at the end of the month is up. Thank you all for your feedback so far, and I'll be spending the rest of the time polishing and fixing mistakes: <a href=\"https://leanprover.github.io/functional_programming_in_lean/\">https://leanprover.github.io/functional_programming_in_lean/</a></p>",
        "id": 350610247,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681763579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/350593755\">said</a>:</p>\n<blockquote>\n<p>Thanks, I can see how that's confusing! It's important to the writing style in use here that constructors are not verbs - they're inert and don't compute. But I'll adjust it!</p>\n</blockquote>\n<p>Phrasing the distinction grammatically like this might be a problem if people notice that the default constructor for a <code>structure</code> is called <code>mk</code> which is an abbreviation of \"make\" which is a verb</p>",
        "id": 350628958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681771804
    },
    {
        "content": "<p>It's more that in the earlier chapters, I think it's very important to distinguish what the word \"constructor\" means in something like Lean vs what it means in something like Java or Python. This is far from the only way the information is conveyed, but redundancy and consistency are part of making texts that confuse people less.</p>",
        "id": 350750766,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1681817870
    },
    {
        "content": "<p>Current documentation in Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/conveniences.html\">Additional Conveniences</a>:</p>\n<blockquote>\n<p>The first step is to move the arguments' types to the right of the definition's type, in the form of a function type.</p>\n</blockquote>\n<p>Suggestion:</p>\n<blockquote>\n<p>The first step is to move the arguments' types to the right of the colon, in the form of a function type.</p>\n</blockquote>",
        "id": 350766995,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1681821503
    },
    {
        "content": "<p>It might be worth mentioning in Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/conveniences.html\">Additional Conveniences</a> that we can also use the Unicode symbol <code>↦</code> to create an anonymous function.</p>",
        "id": 351018434,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1681904323
    },
    {
        "content": "<blockquote>\n<p>Functional Programming in Lean may be interesting to readers who enjoy jokes about recursion.</p>\n</blockquote>\n<p>This made me laugh, thanks for a great book!</p>",
        "id": 351174789,
        "sender_full_name": "Evante Garza",
        "timestamp": 1681951433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/350766995\">said</a>:</p>\n<blockquote>\n<p>Current documentation in Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/conveniences.html\">Additional Conveniences</a>:</p>\n<blockquote>\n<p>The first step is to move the arguments' types to the right of the definition's type, in the form of a function type.</p>\n</blockquote>\n<p>Suggestion:</p>\n<blockquote>\n<p>The first step is to move the arguments' types to the right of the colon, in the form of a function type.</p>\n</blockquote>\n</blockquote>\n<p>This is a nice improvement - thanks!</p>",
        "id": 351409924,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682018044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351018434\">said</a>:</p>\n<blockquote>\n<p>It might be worth mentioning in Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/getting-to-know/conveniences.html\">Additional Conveniences</a> that we can also use the Unicode symbol <code>↦</code> to create an anonymous function.</p>\n</blockquote>\n<p>I haven't seen that notation in enough Lean code to think that it's essential knowledge at this early stage, and I feel like this section already has enough syntactic variations! It doesn't provide any practical differences from the <code>fun</code> notation, does it?</p>",
        "id": 351411034,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682018432
    },
    {
        "content": "<p>No it was mostly introduced because the mathematicians kept asking us for it</p>",
        "id": 351411502,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682018627
    },
    {
        "content": "<p>The more good notation the better. I've been tempted to use things like <code>α →+* β</code> in my courses otherwise unrelated to Lean. Out of curiosity, does anyone else do this?</p>",
        "id": 351429028,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682025149
    },
    {
        "content": "<p>I'm pretty sure I've used <code>α → β</code>. And I discuss math with Anatole on the blackboard we both use Lean notations.</p>",
        "id": 351431033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682026135
    },
    {
        "content": "<p>um, are you saying that you used functions?</p>",
        "id": 351431241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682026213
    },
    {
        "content": "<p>I mean that's not really a lean patented invention</p>",
        "id": 351431313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682026245
    },
    {
        "content": "<p>I think he might be saying that he used \\rightarrow instead of \\mapsto to denote that something is a function?</p>",
        "id": 351431595,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682026391
    },
    {
        "content": "<p>you wouldn't use mapsto in that position</p>",
        "id": 351431859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682026528
    },
    {
        "content": "<p>mapsto in maths means <code>fun</code> not <code>→</code></p>",
        "id": 351431901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682026551
    },
    {
        "content": "<p>I assume Patrick means writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha \\to \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> instead of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mi>u</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo separator=\"true\">,</mo><mi>β</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Fun(\\alpha,\\beta)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">)</span></span></span></span> for the collection of all functions.</p>",
        "id": 351436346,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682028649
    },
    {
        "content": "<p>In math we would (unfortunately!) never write something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>α</mi><mo>→</mo><mi>β</mi><mo>→</mo><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">f : \\alpha \\to \\beta \\to \\gamma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span>, for example.</p>",
        "id": 351436545,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1682028749
    },
    {
        "content": "<p>Yes, we certainly write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>α</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">f : α → β</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>, but never <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">α → β</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> alone.</p>",
        "id": 351437514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682029158
    },
    {
        "content": "<p>And of course we never write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo>→</mo><mi>β</mi><mo>→</mo><mi>γ</mi></mrow><annotation encoding=\"application/x-tex\">α → β → γ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span></span> with its Lean meaning.</p>",
        "id": 351437648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682029211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351429028\">said</a>:</p>\n<blockquote>\n<p>The more good notation the better. I've been tempted to use things like <code>α →+* β</code> in my courses otherwise unrelated to Lean. Out of curiosity, does anyone else do this?</p>\n</blockquote>\n<p>not in courses or anything, but I use <code>α →ₗ β</code> for linear functions on the blackboard</p>",
        "id": 351511856,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1682055363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351429028\">said</a>:</p>\n<blockquote>\n<p>The more good notation the better. </p>\n</blockquote>\n<p>I think that this is not true for the first chapter of introductory material. The goal of that chapter is to help readers get up to speed with the basic patterns of thought and the most common syntax, building a platform for the more challenging ideas that come later. In fact, I think that Chapter 1 should have as little notation as possible, while still enabling the rest of the book to be written, because unfamiliar syntax is a common stumbling block.</p>",
        "id": 351528849,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682061515
    },
    {
        "content": "<p>I personally started writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi><mo><munder><mo><mo>⟶</mo></mo><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi></mrow></munder></mo><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha \\underset{\\mathit{properties}}\\longrightarrow \\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3829em;vertical-align:-0.8719em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.511em;\"><span style=\"top:-2.3642em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">properties</span></span></span></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8719em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> in my notes, because it's much easier to decypher six months later than the obnoxious collection of symbols mathematicians came up with.</p>",
        "id": 351531956,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682062508
    },
    {
        "content": "<p>Category theorists have been writing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(X, Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> for the set (space) of morphisms from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> in the category <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>. Maybe mostly useful if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a rather short name.</p>",
        "id": 351532279,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1682062625
    },
    {
        "content": "<p>I even write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo>→</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(X → Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 351534396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682063275
    },
    {
        "content": "<p>EDIT: Sorry David, I accidentally read the wrong book.</p>\n<p>I think it's worth mentioning in <code>Induction and Recursion</code> that definitional equalities in recursive/multiple arguments pattern matches are only guaranteed once all pattern-matched variables have been destructed. This is a common gotcha for beginners.</p>",
        "id": 351608222,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682080009
    },
    {
        "content": "<p>I don't have an example at hand, but the reason is that Lean adds pattern-matches within the definition and the cases can be split quite unexpectedly.</p>",
        "id": 351610020,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682080419
    },
    {
        "content": "<p>I also see a typo in this same section: <code>defaulty</code> should be <code>default</code>.</p>",
        "id": 351610594,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682080543
    },
    {
        "content": "<p>I think that is a bit of a technical point and likely would not come up on examples in the context of the book. I'm not even sure the over-matching bug is an issue to the same extent as it was in lean 3, and I don't think it represents an intrinsic truth in any case (i.e. it could potentially be true or not depending on details of the compiler that might change in future versions), which would make it a poor choice to put in a book which is intended to last.</p>",
        "id": 351613855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682081247
    },
    {
        "content": "<p>A few other things:</p>\n<ul>\n<li><code>propostion</code> → <code>proposition</code></li>\n<li>The section <code>Local Recursive Declarations</code> is duplicated</li>\n</ul>",
        "id": 351623769,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682083189
    },
    {
        "content": "<p>For <code>Type Classes</code></p>\n<ul>\n<li>\"Instances which are declared last are tried first\". I thought that wasn't true anymore?</li>\n<li>\"Moreover, if instances are declared in other modules, the order in which they are tried depends on the order in which namespaces are opened.\". Is this about modules, or about namespaces? Why would there be a relation between both?</li>\n</ul>",
        "id": 351634264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682085265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span>: agreed, not introducing a ton of notation up front is important for readability and comprehension. I was just responding to this:<br>\n<span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351411502\">said</a>:</p>\n<blockquote>\n<p>No <code>↦</code> was mostly introduced because the mathematicians kept asking us for it</p>\n</blockquote>",
        "id": 351647769,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1682087880
    },
    {
        "content": "<p>In <code>Axioms and Computation</code>:</p>\n<ul>\n<li>You seem to have a broken reference: <code>:numref:choice</code></li>\n<li><code>extenionality</code> → <code>extensionality</code></li>\n<li>I don't know whether that is on purpose but I would expect <code>theorem inhabited_of_nonempty :Nonempty α → Inhabited α</code>  to instead be a <code>noncomputable def</code>, since <code>Inhabited</code> is data.</li>\n<li>\"In contrast to <code>p ∨ ¬ p</code>, which can only eliminate to <code>Prop</code>, the type <code>decidable p</code> is equivalent to the sum type <code>Sum p (¬ p)</code>\". It should be <code>Decidable p</code>, and <code>PSum p (¬ p)</code> (<code>Sum</code> only accepts <code>Type</code>, not <code>Prop</code>)</li>\n</ul>",
        "id": 351649443,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682088142
    },
    {
        "content": "<p>Wait, sorry, I accidentally went on to read TPIL instead of your book <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 351651959,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1682088533
    },
    {
        "content": "<p>Yaël, I think you should edit your messages to avoid confusing David when he'll read that discussion.</p>",
        "id": 351656633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1682089442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351634264\">said</a>:</p>\n<blockquote>\n<p>For <code>Type Classes</code></p>\n<ul>\n<li>\"Instances which are declared last are tried first\". I thought that wasn't true anymore?</li>\n</ul>\n</blockquote>\n<p>It is still true, but being tried first means less than it used to because there is a filter in front that does the majority of the selection work, meaning that it is rare to have multiple options to choose from in the first place</p>",
        "id": 351669771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682092250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351634264\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"Moreover, if instances are declared in other modules, the order in which they are tried depends on the order in which namespaces are opened.\". Is this about modules, or about namespaces? Why would there be a relation between both?</li>\n</ul>\n</blockquote>\n<p>This sounds like a typo, it should say \"the order in which modules are imported\". Opening namespaces does nothing to instance search (except for making scoped instances available)</p>",
        "id": 351670103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682092339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/351647769\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span>: agreed, not introducing a ton of notation up front is important for readability and comprehension ...</p>\n</blockquote>\n<p>Sometimes, the lack of threading in Zulip is confusing :-)</p>",
        "id": 351923622,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682185901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I must admit I spent a bit of time confusedly grepping for what you found here! Thanks for the edit and update.</p>",
        "id": 351923772,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1682185934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> Thanks for your great book! Currently reading it and learned a lot!<br>\nI think I find a typo in the last release of this book. At 2.1 Running a program, subsection Anatomy of a Greeting, last sentence of first paragraph, it says: \"Instead of a being a function that has side effects, <code>main</code> consists of a description of effects to be carried out.\" The first 'a' seems redundant, maybe it should be \"Instead of being a function that ...\"</p>",
        "id": 354468373,
        "sender_full_name": "Zhiyuan Bao",
        "timestamp": 1682787325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"613263\">Zhiyuan Bao</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/354468373\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> Thanks for your great book! Currently reading it and learned a lot!<br>\nI think I find a typo in the last release of this book. At 2.1 Running a program, subsection Anatomy of a Greeting, last sentence of first paragraph, it says: \"Instead of a being a function that has side effects, <code>main</code> consists of a description of effects to be carried out.\" The first 'a' seems redundant, maybe it should be \"Instead of being a function that ...\"</p>\n</blockquote>\n<p>Thanks! I just fixed it in the repo, and it will be in the imminent final release.</p>",
        "id": 357571289,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1683808681
    },
    {
        "content": "<p>Current documentation in Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/hello-world/running-a-program.html#real-world-functional-programming\">Real-World Functional Programming</a>:</p>\n<blockquote>\n<p>After all, the entire universe cannot be turned in to a Lean value and placed into memory.</p>\n</blockquote>\n<p>Suggestion: \"turned in to\" → \"turned into\"</p>",
        "id": 358466279,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684158788
    },
    {
        "content": "<p>Thanks! Fixed.</p>",
        "id": 358664221,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1684227913
    },
    {
        "content": "<p>Current documentation in Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/hello-world/running-a-program.html#combining-io-actions\">Combining <code>IO</code> Actions</a>:</p>\n<blockquote>\n<p><code>IO.getStdin</code> and <code>IO.getStdout</code> are <code>IO</code> actions in order to allow <code>stdin</code> and <code>stdout</code> to be locally overridden in a program, which can be convenient.</p>\n</blockquote>\n<p>Suggestion: \"in order to allow\" → \"that allow\"</p>",
        "id": 358991993,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684332066
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417769\">Bulhwi Cha</span> <a href=\"#narrow/stream/270676-lean4/topic/Functional.20Programming.20in.20Lean/near/358991993\">said</a>:</p>\n<blockquote>\n<p>Suggestion: \"in order to allow\" → \"that allow\"</p>\n</blockquote>\n<p>This would change the meaning. Because they are IO actions, rather than global bindings, they can be overridden. But the IO actions themselves do not allow this override to take place.</p>\n<p>Thanks for the careful reading!</p>",
        "id": 359000205,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1684333986
    },
    {
        "content": "<p>The last sentence of Section <a href=\"https://leanprover.github.io/functional_programming_in_lean/hello-world/cat.html#handling-input\">Handling Input</a>:</p>\n<blockquote>\n<p>Thus, <code>process</code> does not introduce any non-termination itself.</p>\n</blockquote>\n<p>Suggestion: \"non-termination itself\" → \"non-termination of itself\"</p>\n<p>I'm not sure whether it's necessary to put \"of\" between \"non-termination\" and \"itself.\"</p>",
        "id": 360297863,
        "sender_full_name": "Bulhwi Cha",
        "timestamp": 1684767484
    },
    {
        "content": "<p>I don't think that is grammatical</p>",
        "id": 360368531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684787270
    },
    {
        "content": "<p>It might be clearer as \"Thus, <code>process</code> does not itself introduce any non-termination.\" You could perhaps insert \"in\", but inserting an \"of\" would be wrong.</p>",
        "id": 360369625,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684787638
    },
    {
        "content": "<p>I got rid of \"itself\", which I think is more clear and fits the meaning that was intended. Thanks!</p>",
        "id": 361816291,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1685305242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354934\">@David Thrane Christiansen</span> Thanks for the great book! I have a question for the exercise of <a href=\"https://leanprover.github.io/functional_programming_in_lean/functor-applicative-monad/alternative.html\">6.4 Alternatives</a>:</p>\n<p>I worked through the section and also proved that the definition of <code>Validate ε</code> using nonempty lists satisfies the laws of an applicative functor. I am not so sure whether this still holds for the version of the exercise with <code>TreeError</code>. In particular, <code>append</code> is not associative for <code>TreeError</code>, so <code>seq</code> shouldn't be associative for the case of composing 3 errors.</p>\n<p>Could you include the path information by still using nonempty lists in the definition of <code>Validate</code>, and  using <code>Validate (List String × Field × String)</code>instead of <code>Validate (Field × String)</code>, where the first factor includes the path information of an error?</p>",
        "id": 378524750,
        "sender_full_name": "Bernhard Reinke",
        "timestamp": 1690299935
    },
    {
        "content": "<p>You're right - this is a bad exercise for this reason. I've created an issue so I remember to fix it: <a href=\"https://github.com/leanprover/fp-lean/issues/124\">https://github.com/leanprover/fp-lean/issues/124</a></p>\n<p>I'm really busy right now but I hope to have time in the not-too-distant future to take care of this kind of thing. Thank you for letting me know!</p>",
        "id": 382429000,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1691349759
    }
]