[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>doesn't trigger the unused variable linter. </p>\n<p>Is this intentional?</p>",
        "id": 384908272,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692046553
    },
    {
        "content": "<p>Syntactically this is very different to an unused variable, so I imagine it is intentional inasmuch as this just isnt what that linter was designed to do.</p>",
        "id": 384921946,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692052309
    },
    {
        "content": "<p>Fair point. The question arose because of what the syntax gets transformed into. Here is a modification of the example to not be so degenerate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a'</span> <span class=\"k\">with</span><span class=\"o\">}</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">b</span>\n<span class=\"c1\">-- def b : B :=</span>\n<span class=\"c1\">-- let src := a;</span>\n<span class=\"c1\">-- let src_1 := a';</span>\n<span class=\"c1\">-- { toA := { x := src.x } }</span>\n</code></pre></div>",
        "id": 384922318,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1692052465
    },
    {
        "content": "<p>I agree that it is a weird term. In the lean 3 days I wrote an \"unused term mode let\" linter. But iirc it had too many  (false?) positives, due to TC putting lots of lets in the terms that weren't used later.</p>",
        "id": 385546926,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692221977
    }
]