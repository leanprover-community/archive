[
    {
        "content": "<p>I've got this error and I'm not sure what to do. Basically, the problem happens when I rewrite a <code>structure</code>-type using a type-level equality and try to access a field</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Flags</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toType</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">consume</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">toType</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Person</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">email</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Person.FlagsEq</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Flags</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">flag</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n  <span class=\"n\">flag_spec</span> <span class=\"o\">:</span> <span class=\"n\">I.toType</span> <span class=\"n\">flag</span> <span class=\"bp\">=</span> <span class=\"n\">Person</span>\n\n<span class=\"c1\">--  vvvvv~~~~~ (kernel) invalid projection `p.1`</span>\n<span class=\"kd\">def</span> <span class=\"n\">test‚ÇÇ</span>\n  <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Flags</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IEq</span> <span class=\"o\">:</span> <span class=\"n\">Person.FlagsEq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">I.consume</span> <span class=\"n\">IEq.flag</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span> <span class=\"n\">IEq.flag_spec</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">p.name</span>\n    <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 360758116,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1684926789
    },
    {
        "content": "<p>Removing the <code>p.name</code> line yields no error (just the unused var warning)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Flags</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">toType</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">consume</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">toType</span> <span class=\"n\">a</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Unit</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Person</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">email</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Person.FlagsEq</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Flags</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"n\">where</span>\n  <span class=\"n\">flag</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n  <span class=\"n\">flag_spec</span> <span class=\"o\">:</span> <span class=\"n\">I.toType</span> <span class=\"n\">flag</span> <span class=\"bp\">=</span> <span class=\"n\">Person</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test‚ÇÇ</span>\n  <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Flags</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IEq</span> <span class=\"o\">:</span> <span class=\"n\">Person.FlagsEq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">I.consume</span> <span class=\"n\">IEq.flag</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span> <span class=\"n\">IEq.flag_spec</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">p</span>\n    <span class=\"c1\">-- let name := p.name</span>\n    <span class=\"o\">()</span>\n</code></pre></div>\n</div></div>",
        "id": 360758536,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1684926906
    },
    {
        "content": "<p><del>Removing <code>p.name</code> probably yields no error since <code>p</code> is unused and gets removed entirely (is my guess, don't quote me on that, I had similar things happen).</del></p>",
        "id": 360760569,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1684927476
    },
    {
        "content": "<p>I checked that it's got nothing to do with name shadowing. This causes the same error too:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test‚ÇÇ</span>\n  <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Flags</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IEq</span> <span class=\"o\">:</span> <span class=\"n\">Person.FlagsEq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">I.consume</span> <span class=\"n\">IEq.flag</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span> <span class=\"n\">IEq.flag_spec</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">q.name</span>\n    <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 360771077,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684930278
    },
    {
        "content": "<p>It seems possible that there is a kernel bug with how projections are reduced? This sidesteps the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Person_name</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Person</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">p.name</span>\n\n<span class=\"c1\">--  vvvvv~~~~~ (kernel) invalid projection `p.1`</span>\n<span class=\"kd\">def</span> <span class=\"n\">test‚ÇÇ</span>\n  <span class=\"o\">[</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">Flags</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">IEq</span> <span class=\"o\">:</span> <span class=\"n\">Person.FlagsEq</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n<span class=\"o\">:=</span>\n  <span class=\"n\">I.consume</span> <span class=\"n\">IEq.flag</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Person</span> <span class=\"o\">:=</span> <span class=\"n\">IEq.flag_spec</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">p</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Person_name</span> <span class=\"n\">q</span>\n    <span class=\"o\">()</span>\n</code></pre></div>",
        "id": 360771171,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684930322
    },
    {
        "content": "<p>Even with renaming <code>p</code> -&gt; <code>q</code>, you get <code>(kernel) invalid projection p.1</code> (with <code>p</code>, not <code>q</code>). If you mouse over <code>p</code>, you see it thinks it has type <code>Flags.toType Person.FlagsEq.flag</code>, which explains why it thinks its an invalid projection at this point.</p>",
        "id": 360771508,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684930425
    },
    {
        "content": "<p>I did notice that as well, it seems the rewrite makes type-checking go through but after that the kernel somehow still works with the pre-rewrite datatype</p>",
        "id": 360771948,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1684930534
    },
    {
        "content": "<p>If I were to guess, it looks like the kernel is reducing <code>IEq.flag_spec ‚ñ∏ p</code> to <code>p</code> (or in that last example, <code>IEq.flag_spec ‚ñ∏ q</code> to <code>p</code>) before trying to take the projection</p>",
        "id": 360774131,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684931082
    }
]