[
    {
        "content": "<p>Can someone explain why the second one of these doesn't work, and how to fix it?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this is an example in the `Qq` library</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n\n<span class=\"c1\">-- this doesn't work. Note the switch of `∃` and `∀`.</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">~</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"c1\">-- cannot quote level mvar ?u.14326</span>\n  <span class=\"bp\">|</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">e</span>\n</code></pre></div>",
        "id": 395100790,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696531633
    },
    {
        "content": "<p>Does adding explicit binder types help?</p>",
        "id": 395114867,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1696538057
    },
    {
        "content": "<p>Partial answer: I think it has to do with <code>~q</code> knowing how to handle level mvars when they appear as parameters to a constant, as in <code>Exists.{?u}</code> (possible by not using mvars at all in that case behind the scenes; I'm not sure), but not knowing how to deal with level mvars when they appear in the type of the binder of a <code>forallE</code>, as they do for the types of <code>x</code> and <code>y</code> in <code>∀ x y, $p x y</code>.</p>\n<p>Note also that <code>∃</code> elaborates in a special way such that we always wind up with a function <code>$p</code> to match on, no matter the actual form of the body. This isn't the case for <code>∀</code>, so a different approach should be taken in order to be able to match on any body!</p>",
        "id": 395115344,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696538283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/trouble.20matching.20.60.E2.88.80.60.20in.20Qq/near/395114867\">said</a>:</p>\n<blockquote>\n<p>Does adding explicit binder types help?</p>\n</blockquote>\n<p>^It does! :) For the generic case of <code>x y : Sort u</code>, though, I suspect we'd need to resort to bare expr matching.</p>",
        "id": 395115767,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696538487
    },
    {
        "content": "<p>There is one advantage to bare expr matching in general here: you can preserve binder names. Note that in the working example, the <code>x</code>, <code>y</code> in <code>return q(∀ x y, $p x y)</code> are unrelated to the <code>x</code>, <code>y</code> in <code>~q(∃ x y, $p x y)</code>, and you'll wind up with <code>x</code>, <code>y</code> as binder names no matter the names of the binders that you match on. Maybe there's a way to do that with Qq as well? I'm not sure. Naively adding <code>$</code> to the binders doesn't work.</p>",
        "id": 395116119,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1696538659
    },
    {
        "content": "<p>ah yes, I had been doing some bare expr matching before this, but I was attempting to use Qq to save some hassle. I guess is sort of surprises me there isn't a Qq way to match an arbitrary <code>∀</code> though. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 395119243,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1696540122
    }
]