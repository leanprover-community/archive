[
    {
        "content": "<p><code>LeanInk</code> terminates on  <code>v4.3.0-rc1</code> for </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"k\">#help</span> <span class=\"n\">tactic</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">leanInk</span> <span class=\"n\">analyze</span> <span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Help.lean</span>\n<span class=\"n\">Starting</span> <span class=\"n\">Analysis</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"s2\">\"examples/Help.lean\"</span>\n<span class=\"n\">libc</span><span class=\"bp\">++</span><span class=\"n\">abi</span><span class=\"o\">:</span> <span class=\"n\">terminating</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">uncaught</span> <span class=\"n\">exception</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"n\">lean</span><span class=\"o\">::</span><span class=\"n\">exception</span><span class=\"o\">:</span> <span class=\"n\">incomplete</span> <span class=\"n\">case</span>\n</code></pre></div>\n<p>It was OK on <code>v4.2.0-rc3</code>.</p>\n<p>Any idea how to debug this?</p>",
        "id": 399848388,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698896897
    },
    {
        "content": "<p>I also want to test it with <code>v4.2.0-rc4</code> but I don't know how to align all deps of Mathlib back to when it was using <code>v4.2.0-rc4</code> except manually copy the manifest from the commit when Mathlib was using them.</p>\n<p>UPDATE: It's also OK on <code>v4.2.0-rc4</code>.</p>",
        "id": 399849653,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698897559
    },
    {
        "content": "<p>By manually bisecting the imports, the new <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> is only</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Logic</span>\n</code></pre></div>\n<p>then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">leanInk</span> <span class=\"n\">analyze</span> <span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Help.lean</span>\n</code></pre></div>\n<p>crashes silently (return code 139) while the imports of <code>Mathlib.Init.Logic</code> don't cause the crash.</p>",
        "id": 399857102,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698901956
    },
    {
        "content": "<p>I'm a bit confused by what you are doing. Are you certain that you're using LeanInk and Mathlib at the same toolchain?</p>",
        "id": 399857185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698902038
    },
    {
        "content": "<p>Further minimized to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Relation.Symm</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"n\">Eq.symm</span>\n</code></pre></div>\n<p>now it reports</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--version</span>\n<span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">rc1</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">baa4b68a7192</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">leanInk</span> <span class=\"n\">analyze</span> <span class=\"n\">examples</span><span class=\"bp\">/</span><span class=\"n\">Help.lean</span>\n<span class=\"n\">Starting</span> <span class=\"n\">Analysis</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"s2\">\"examples/Help.lean\"</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Meta.whnfEasyCases</span> <span class=\"n\">Lean.Meta.WHNF</span><span class=\"o\">:</span><span class=\"mi\">317</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">loose</span> <span class=\"n\">bvar</span> <span class=\"k\">in</span> <span class=\"n\">expression</span>\n</code></pre></div>\n<p>caused by only the last line (not the import).</p>",
        "id": 399858009,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698902636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanInk.20regression.20on.20v4.2E3.2E0-rc1/near/399857185\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused by what you are doing. Are you certain that you're using LeanInk and Mathlib at the same toolchain?</p>\n</blockquote>\n<p>Does <code>lake env leanInk</code> guarantee this? Besides local test, I'm also running this on CI which has only one toolchain.</p>",
        "id": 399858329,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698902863
    },
    {
        "content": "<p>The (personal) consequence is that most of my non-trivial Lean files (the ones commented out below) can't be analyzed by LeanInk on v4.3.0-rc1.</p>\n<p><a href=\"/user_uploads/3121/XjX68cZxp5kuV7fsd-s2XTgt/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/XjX68cZxp5kuV7fsd-s2XTgt/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/XjX68cZxp5kuV7fsd-s2XTgt/image.png\"></a></div>",
        "id": 399859068,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698903428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanInk.20regression.20on.20v4.2E3.2E0-rc1/near/399858329\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/LeanInk.20regression.20on.20v4.2E3.2E0-rc1/near/399857185\">said</a>:</p>\n<blockquote>\n<p>I'm a bit confused by what you are doing. Are you certain that you're using LeanInk and Mathlib at the same toolchain?</p>\n</blockquote>\n<p>Does <code>lake env leanInk</code> guarantee this? Besides local test, I'm also running this on CI which has only one toolchain.</p>\n</blockquote>\n<p>No, if you compiled <code>leanInk</code> previously on an old toolchain then you can get ABI mismatches</p>",
        "id": 399859397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698903694
    },
    {
        "content": "<p>On CI, I can see the only toolchain is compiling LeanInk, and the analysis panics and gives the trace: <a href=\"https://github.com/utensil/lean-playground/actions/runs/6728771542/job/18288590308#step:5:219\">https://github.com/utensil/lean-playground/actions/runs/6728771542/job/18288590308#step:5:219</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.Meta.whnfEasyCases</span> <span class=\"n\">Lean.Meta.WHNF</span><span class=\"o\">:</span><span class=\"mi\">317</span><span class=\"o\">:</span><span class=\"mi\">22</span><span class=\"o\">:</span> <span class=\"n\">loose</span> <span class=\"n\">bvar</span> <span class=\"k\">in</span> <span class=\"n\">expression</span>\n<span class=\"n\">Starting</span> <span class=\"n\">Analysis</span> <span class=\"n\">for</span><span class=\"o\">:</span> <span class=\"s2\">\"examples/Help.lean\"</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">lean_panic_fn</span><span class=\"bp\">+</span><span class=\"mi\">0x9e</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d567da8e</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_whnfEasyCases___at_Lean_Meta_whnfCore_go___spec__3</span><span class=\"bp\">+</span><span class=\"mi\">0x103a</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d376d5ea</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">l___private_Lean_Meta_DiscrTree_0__Lean_Meta_DiscrTree_reduceUntilBadKey_step</span><span class=\"bp\">+</span><span class=\"mi\">0xc4</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d36c6754</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">l___private_Lean_Meta_DiscrTree_0__Lean_Meta_DiscrTree_reduceUntilBadKey</span><span class=\"bp\">+</span><span class=\"mi\">0xbd</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d36c74cd</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">l___private_Lean_Meta_DiscrTree_0__Lean_Meta_DiscrTree_pushArgs</span><span class=\"bp\">+</span><span class=\"mi\">0x1d9</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d36c8d09</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_DiscrTree_mkPathAux</span><span class=\"bp\">+</span><span class=\"mi\">0x201</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d36cafc1</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">l_Lean_Meta_DiscrTree_mkPath</span><span class=\"bp\">+</span><span class=\"mi\">0x2d5</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d36cb705</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x352d84f</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d568784f</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb40724</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c9a724</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb3e9a0</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c989a0</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb40a62</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c9aa62</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb3e9a0</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c989a0</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb42573</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c9c573</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb3b3b1</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c953b1</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb421f7</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c9c1f7</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0xb41ecd</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d2c9becd</span><span class=\"o\">]</span>\n<span class=\"n\">leanInk</span><span class=\"o\">(</span><span class=\"n\">lean_apply_6</span><span class=\"bp\">+</span><span class=\"mi\">0x6be</span><span class=\"o\">)[</span><span class=\"mi\">0x5612d568c4fe</span><span class=\"o\">]</span>\n\n<span class=\"bp\">...</span><span class=\"n\">more...</span>\n</code></pre></div>",
        "id": 399859643,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698903858
    },
    {
        "content": "<p>If the leanInk repo contains an old lean-toolchain, it would use that toolchain even in CI, assuming your CI script downloads the git repo and calls <code>lake build</code></p>",
        "id": 399859970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698904092
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/LeanInk/blob/main/lean-toolchain\">https://github.com/leanprover/LeanInk/blob/main/lean-toolchain</a></p>",
        "id": 399860006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698904128
    },
    {
        "content": "<p>Yes, the toolchain in LeanInk is pretty old, but this is not the issue, because it works fine on <code>v4.2.0-rc4</code>.</p>",
        "id": 399860087,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698904190
    },
    {
        "content": "<p>I'm not sure how that follows</p>",
        "id": 399860126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698904204
    },
    {
        "content": "<p>any lean version can introduce ABI breaks, and the effects of this on compiled programs is <a href=\"#narrow/stream/113488-general/topic/Potential.20data.20loss.20from.20.60lake.20clean.60.20with.204.2E2.2E0-rc2.2F3/near/397875701\">unpredictable</a></p>",
        "id": 399860190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698904247
    },
    {
        "content": "<p>Assuming the issue is caused by that the LeanInk is compiled by <code>leanprover/lean4:nightly-2023-08-19</code> and Mathlib is compiled by <code>v4.3.0-rc1</code>, because when it works fine when Mathlib is compiled by <code>v4.2.0-rc4</code>, then the conclusion is either:</p>\n<ol>\n<li><code>v4.3.0-rc1</code> introduces some ABI change, now LeanInk with <code>lean4:nightly-2023-08-19</code> starts crashing</li>\n<li><code>v4.3.0-rc1</code> itself has some issues to cause crash, only happen to be triggered by LeanInk, no matter which version it was compiled</li>\n</ol>\n<p>If it's case 1, then LeanInk would have to update its toolchain, and maybe it's all OK again.</p>\n<p>I'm more concerned if it's case 2.</p>",
        "id": 399860728,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698904632
    },
    {
        "content": "<p>you would have to fix 1 before you can determine whether 2 is the case</p>",
        "id": 399860906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698904741
    },
    {
        "content": "<p>Indeed, I bumped LeanInk to v4.3.0-rc1, and now it works. Case 1 it is. Thanks!</p>",
        "id": 399861805,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698905166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> The same ABI break might bite doc-gen4 too when it's bumped to v4.3.0-rc1 if LeanInk repo is still <code>leanprover/lean4:nightly-2023-08-19</code>. The bump is better to happen along with doc-gen4 bump?</p>",
        "id": 399865575,
        "sender_full_name": "Utensil Song",
        "timestamp": 1698907266
    },
    {
        "content": "<p>I think doc-gen links with LeanInk, so it has to recompile it anyway (with the current toolchain, not leanInk's)</p>",
        "id": 399865740,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698907317
    },
    {
        "content": "<p>Correct, shouldn't affect me.</p>",
        "id": 399869334,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1698909125
    }
]