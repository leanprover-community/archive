[
    {
        "content": "<p>How can I extract a <code>String</code> of the form <code>add_zero (n : Nat) : n + 0 = n</code> or just <code>(n : Nat) : n + 0 = n</code> from a defined theorem <code>add_zero</code>? I tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- copied from `#check`</span>\n<span class=\"kd\">def</span> <span class=\"n\">magic</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">MessageData</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">term.getId</span>\n  <span class=\"n\">addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">term</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofPPFormat</span> <span class=\"o\">{</span> <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ctx.runMetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">PrettyPrinter.ppSignature</span> <span class=\"n\">c</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}\"</span>  <span class=\"c1\">-- should never happen</span>\n  <span class=\"o\">})</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Test\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">magic</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">magic</span> <span class=\"n\">name</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n\n<span class=\"n\">Test</span> <span class=\"n\">add_zero</span>\n\n<span class=\"c1\">-- MWE.lean:25:5</span>\n<span class=\"c1\">--   add_zero (n : Nat) : n + 0 = n  -- `MessageData` looks good in VSCode</span>\n\n\n<span class=\"c1\">-- MWE.lean:25:5</span>\n<span class=\"c1\">--   add_zero   -- But `.toString` does not do what I want.</span>\n</code></pre></div>\n<p>The <code>MessageData</code> looks correct, but I can't turn that into a <code>String</code> without loosing the type.</p>\n<p>(I want to pack this into a JSON, that's why I think I need <code>String</code> rather than <code>MessageData</code>)</p>",
        "id": 358829886,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684265333
    },
    {
        "content": "<p>The main function here is <code>getTypeString</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">add_zero</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c1\">-- Copied somewhat from PrettyPrinter.ppSignature</span>\n<span class=\"kd\">def</span> <span class=\"n\">getTypeString</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">name</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.const</span> <span class=\"n\">name</span> <span class=\"o\">(</span><span class=\"n\">decl.levelParams.map</span> <span class=\"n\">mkLevelParam</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stx</span><span class=\"o\">,</span> <span class=\"n\">_stx</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.delabCore</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">delab</span> <span class=\"o\">:=</span> <span class=\"n\">PrettyPrinter.Delaborator.delabConstWithSignature</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.ppTerm</span> <span class=\"o\">⟨</span><span class=\"n\">stx</span><span class=\"o\">⟩</span> <span class=\"c1\">-- HACK: not a term</span>\n  <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"n\">f</span>\n\n<span class=\"c1\">-- copied from `#check`</span>\n<span class=\"kd\">def</span> <span class=\"n\">magic</span> <span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">try</span>\n    <span class=\"n\">for</span> <span class=\"n\">c</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">resolveGlobalConstWithInfos</span> <span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">addCompletionInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">term</span> <span class=\"n\">c</span> <span class=\"o\">(</span><span class=\"n\">danglingDot</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">{}</span> <span class=\"n\">none</span>\n      <span class=\"n\">logInfoAt</span> <span class=\"n\">term</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">ofPPFormat</span> <span class=\"o\">{</span> <span class=\"n\">pp</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span>\n        <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ctx.runMetaM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">getTypeString</span> <span class=\"n\">c</span>\n        <span class=\"bp\">|</span> <span class=\"n\">none</span>     <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">f</span><span class=\"bp\">!</span><span class=\"s2\">\"{c}\"</span>  <span class=\"c1\">-- should never happen</span>\n      <span class=\"o\">}</span>\n  <span class=\"n\">catch</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failure in magic\"</span>\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Test\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"n\">magic</span> <span class=\"n\">name</span>\n\n<span class=\"n\">Test</span> <span class=\"n\">add_zero</span>\n<span class=\"c1\">-- add_zero (n : Nat) : n + 0 = n</span>\n</code></pre></div>",
        "id": 358835883,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684267222
    },
    {
        "content": "<p>Here's a simpler function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getTypeString</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"bp\">←</span> <span class=\"n\">getConstInfo</span> <span class=\"n\">name</span>\n  <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">ppExpr</span> <span class=\"n\">decl.type</span>\n  <span class=\"n\">return</span> <span class=\"n\">toString</span> <span class=\"n\">name</span> <span class=\"bp\">++</span> <span class=\"s2\">\" : \"</span> <span class=\"bp\">++</span> <span class=\"n\">toString</span> <span class=\"n\">ty</span>\n</code></pre></div>\n<p>Rather than the fancy one that puts arguments before the colon, this one gives types like <code>add_zero : ∀ (n : Nat), n + 0 = n</code></p>",
        "id": 358836692,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684267348
    },
    {
        "content": "<p>Thanks Kyle!</p>",
        "id": 358838427,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684267933
    },
    {
        "content": "<p>The problem with your original code is that <code>ctx</code> is indeed <code>none</code>, which you can fix by wrapping the message in <code>addMessageContextPartial </code></p>",
        "id": 358838992,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1684268160
    },
    {
        "content": "<p>I have to go back on the computer to understand that... where did Kyle's first solution get its <code>ctx</code> back?</p>",
        "id": 358840084,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684268556
    },
    {
        "content": "<p>The <code>ctx</code> comes from when the <code>MessageData</code> is finally formatted for the infoview; this <code>.ofPPFormat</code> constructor is for deferring pretty printing until you have such a context. (At least this is my understanding -- I've never really looked at it until now!)</p>",
        "id": 358840442,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684268684
    },
    {
        "content": "<p>The problem with the original <code>magic</code> function is that it tries to format the data immediately, so it's not yet in a context with a <code>ctx</code>.</p>",
        "id": 358840559,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684268727
    },
    {
        "content": "<p>I understand now what happened, thanks!</p>",
        "id": 358852195,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684273062
    }
]