[
    {
        "content": "<p>I got sidetracked benchmarking Lean against <a href=\"https://github.com/jabbalaci/SpeedTests\">jabbalaci/SpeedTests</a>. The best result I can get is </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./build/bin/Main<span class=\"w\">  </span><span class=\"m\">8</span>.33s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.02s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">95</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">8</span>.745<span class=\"w\"> </span>total\n</code></pre></div>\n<p>vs the example C code for comparison</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./main<span class=\"w\">  </span><span class=\"m\">1</span>.80s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">99</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.808<span class=\"w\"> </span>total\n</code></pre></div>\n<p>Can anyone improve on this?</p>",
        "id": 366620349,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686861194
    },
    {
        "content": "<p>What is the base speed of  a no-op Lean program on your machine? For example, <code>def main : IO UInt32 := return 0</code>. That would provide an idea of how much time there is to save. For tests like these, Lean has a  semi-expensive start-up cost that may hurt the metric.</p>",
        "id": 366628757,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686863742
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">λ</span> <span class=\"n\">time</span> <span class=\"bp\">./</span><span class=\"n\">main</span>\n<span class=\"mi\">0</span>\n<span class=\"mi\">1</span>\n<span class=\"mi\">3435</span>\n<span class=\"mi\">438579088</span>\n<span class=\"bp\">./</span><span class=\"n\">main</span>  <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">41</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">00</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">99</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">423</span> <span class=\"n\">total</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">0</span>\n<span class=\"mi\">1</span>\n<span class=\"mi\">3435</span>\n<span class=\"mi\">438579088</span>\n<span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">jabbalaci</span>  <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">36</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">99</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">395</span> <span class=\"n\">total</span>\n</code></pre></div>\n<p>although its already not so pretty anymore^^</p>",
        "id": 366629862,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686864131
    },
    {
        "content": "<p>let see how far I can push it</p>",
        "id": 366629879,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686864139
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">jabbalaci</span>  <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">21</span><span class=\"n\">s</span> <span class=\"n\">user</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">01</span><span class=\"n\">s</span> <span class=\"n\">system</span> <span class=\"mi\">99</span><span class=\"bp\">%</span> <span class=\"n\">cpu</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">227</span> <span class=\"n\">total</span>\n</code></pre></div>",
        "id": 366630844,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686864479
    },
    {
        "content": "<p>If i compile with gcc instead of clang that is almost C level speed: <code>./main  3.90s user 0.00s system 99% cpu 3.919 total</code><br>\n`</p>",
        "id": 366631117,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686864582
    },
    {
        "content": "<p><code>./build/bin/jabbalaci  3.65s user 0.01s system 99% cpu 3.668 total</code> beating gcc now</p>",
        "id": 366633795,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686865539
    },
    {
        "content": "<p>Okay I can't get it better anymore :( Seems like clang is out of reach for now, here is my result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">cacheAux</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n    <span class=\"n\">arr</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">cacheAux</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">UInt32.ofNat</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[noinline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cache</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"mi\">10</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"mi\">0</span>\n  <span class=\"n\">cacheAux</span> <span class=\"n\">arr</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"mi\">440000000</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">isMunchhausenAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">total</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">total</span> <span class=\"bp\">==</span> <span class=\"n\">number</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">digit</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span>\n    <span class=\"k\">let</span> <span class=\"n\">total</span> <span class=\"o\">:=</span> <span class=\"n\">total</span> <span class=\"bp\">+</span> <span class=\"n\">cache.uget</span> <span class=\"n\">digit.toUSize</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"bp\">&gt;</span> <span class=\"n\">number</span> <span class=\"k\">then</span>\n      <span class=\"n\">false</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span>\n      <span class=\"n\">isMunchhausenAux</span> <span class=\"n\">n</span> <span class=\"n\">total</span> <span class=\"n\">number</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">isMunchhausen</span> <span class=\"o\">(</span><span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isMunchhausenAux</span> <span class=\"n\">number</span> <span class=\"mi\">0</span> <span class=\"n\">number</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mainAux</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">curr</span> <span class=\"bp\">==</span> <span class=\"n\">final</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">isMunchhausen</span> <span class=\"n\">curr</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">curr</span>\n      <span class=\"n\">mainAux</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">mainAux</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">mainAux</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 366638944,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686867459
    },
    {
        "content": "<p>But looking at the cart from the README (given the fact that my run times of the C are pretty close to theirs I conjecture my Lean would be similar on their setup) it seems to me like we are in a pretty good spot, it is faster than quite a lot of the languages and very close to the true systems languages like C/C++/Rust so it appears our code generator is quite acceptable :D</p>",
        "id": 366640985,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1686868329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/speed.20tests/near/366628757\">said</a>:</p>\n<blockquote>\n<p>What is the base speed of  a no-op Lean program on your machine? For example, <code>def main : IO UInt32 := return 0</code>. That would provide an idea of how much time there is to save. For tests like these, Lean has a  semi-expensive start-up cost that may hurt the metric.</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./build/bin/Main<span class=\"w\">  </span><span class=\"m\">0</span>.02s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.02s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">9</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">0</span>.455<span class=\"w\"> </span>total\n</code></pre></div>",
        "id": 366646510,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686870823
    },
    {
        "content": "<p>Excellent!</p>",
        "id": 366646529,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686870835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/speed.20tests/near/366638944\">said</a>:</p>\n<blockquote>\n<p>Okay I can't get it better anymore :( Seems like clang is out of reach for now, here is my result:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">cacheAux</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">==</span> <span class=\"mi\">10</span> <span class=\"k\">then</span>\n    <span class=\"n\">arr</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">cacheAux</span> <span class=\"o\">(</span><span class=\"n\">arr.push</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">UInt32.ofNat</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">i</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[noinline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cache</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">Array.mkEmpty</span> <span class=\"mi\">10</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">arr.push</span> <span class=\"mi\">0</span>\n  <span class=\"n\">cacheAux</span> <span class=\"n\">arr</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">final</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"o\">:=</span> <span class=\"mi\">440000000</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">isMunchhausenAux</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">total</span> <span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">total</span> <span class=\"bp\">==</span> <span class=\"n\">number</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">let</span> <span class=\"n\">digit</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">10</span>\n    <span class=\"k\">let</span> <span class=\"n\">total</span> <span class=\"o\">:=</span> <span class=\"n\">total</span> <span class=\"bp\">+</span> <span class=\"n\">cache.uget</span> <span class=\"n\">digit.toUSize</span> <span class=\"gr\">sorry</span>\n    <span class=\"k\">if</span> <span class=\"n\">total</span> <span class=\"bp\">&gt;</span> <span class=\"n\">number</span> <span class=\"k\">then</span>\n      <span class=\"n\">false</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span>\n      <span class=\"n\">isMunchhausenAux</span> <span class=\"n\">n</span> <span class=\"n\">total</span> <span class=\"n\">number</span>\n\n<span class=\"kd\">@[inline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">isMunchhausen</span> <span class=\"o\">(</span><span class=\"n\">number</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">isMunchhausenAux</span> <span class=\"n\">number</span> <span class=\"mi\">0</span> <span class=\"n\">number</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mainAux</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"n\">curr</span> <span class=\"bp\">==</span> <span class=\"n\">final</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">()</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">if</span> <span class=\"n\">isMunchhausen</span> <span class=\"n\">curr</span> <span class=\"k\">then</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">curr</span>\n      <span class=\"n\">mainAux</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">mainAux</span> <span class=\"o\">(</span><span class=\"n\">curr</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">mainAux</span> <span class=\"mi\">0</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This gives </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./build/bin/Main<span class=\"w\">  </span><span class=\"m\">2</span>.89s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">92</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">3</span>.141<span class=\"w\"> </span>total\n</code></pre></div>\n<p>on my machine.</p>",
        "id": 366648421,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686871894
    },
    {
        "content": "<p>Though <code>gcc</code> does (slightly) better than <code>clang</code> there</p>",
        "id": 366648571,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686871983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> One key thing Lean is missing is a primitive array. Currently the cache is built of boxed <code>UInt32</code> and unboxed on access, which hurts performance (the allocation of the boxed cache objects is probably itself a significant chunk of time wasted).</p>",
        "id": 366652005,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686873899
    },
    {
        "content": "<p>I was running with <code>Nat</code> instead of <code>UInt32</code> which is the main performance gain left on the table.</p>",
        "id": 366652661,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686874306
    },
    {
        "content": "<p>It cut the time in half.</p>",
        "id": 366652789,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686874355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Yes, but unfortunately the elements of <code>cache : Array UInt32</code> are still boxed.</p>",
        "id": 366653264,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686874597
    },
    {
        "content": "<p>What values are unboxed by default?</p>",
        "id": 366654260,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686875095
    },
    {
        "content": "<p>UInt8/16/32/64, USize, Float</p>",
        "id": 366654334,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686875126
    },
    {
        "content": "<p>Inductive types which are essentially enums (e.g., <code>Bool</code>) are also represented by unboxed numerical tag of smallest size that fits (e.g. <code>UInt8</code> for <code>Bool</code>)</p>",
        "id": 366654440,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686875163
    },
    {
        "content": "<p>Another bit of overhead is that Lean has to check for IO errors on each print, but since this function only prints 4 times, that is likely not much.</p>",
        "id": 366654620,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686875263
    },
    {
        "content": "<p>More comparisons on my machine: rust</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./target/release/rust<span class=\"w\">  </span><span class=\"m\">1</span>.73s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">86</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">2</span>.019<span class=\"w\"> </span>total\n</code></pre></div>\n<p>and go </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>./main<span class=\"w\">  </span><span class=\"m\">3</span>.21s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.02s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">94</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">3</span>.413<span class=\"w\"> </span>total\n</code></pre></div>",
        "id": 366656527,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686876141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306577\">@Matthew Ballard</span> Neat! So Lean is faster than Go on your machine.</p>",
        "id": 366656674,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686876215
    },
    {
        "content": "<p>I was going to do java but I have to get a working runtime <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 366657162,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686876421
    },
    {
        "content": "<p>One more comment: following this discussion, it is interesting to see the difference between <a href=\"https://github.com/jabbalaci/SpeedTests/blob/f30404bf50e25ef9419e24dd23e4f4b0a18b1c2e/haskell/main_v1.hs\">v1</a> at 93.8s and <a href=\"https://github.com/jabbalaci/SpeedTests/blob/f30404bf50e25ef9419e24dd23e4f4b0a18b1c2e/haskell/main_v2.hs\">v2</a> at 3.5s for the Haskell code.</p>",
        "id": 366905941,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1686937108
    },
    {
        "content": "<p>This is really interesting! I wonder about more benchmarks comparing Lean to C/C++/Rust.</p>",
        "id": 367100998,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1686992597
    }
]