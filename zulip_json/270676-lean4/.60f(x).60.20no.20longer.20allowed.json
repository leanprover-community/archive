[
    {
        "content": "<p>I just noticed that that writing <code>f(x)</code> as a synonym for <code>f x</code> is not allowed in Lean 4.</p>\n<p>Maybe we should add it to the overview of significant changes from Lean 3:<br>\n<a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a></p>",
        "id": 339517968,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677922973
    },
    {
        "content": "<p>Is this an intentional change?</p>",
        "id": 339519271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677923418
    },
    {
        "content": "<p>Lean seems to be treating the <code>(</code> as the start of a new command (which it isn't of course) but I can't think why it would do that.</p>",
        "id": 339520064,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677923687
    },
    {
        "content": "<p>I've noticed this affect <code>f()</code> for <code>f : Unit -&gt; ...</code>. I've been curious about it, but I haven't looked into why it doesn't work yet.</p>",
        "id": 339520780,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677923966
    },
    {
        "content": "<p>yes this is deliberate. Applications require a space after the function. The syntactic space <code>f(x)</code> has been opened up for macros</p>",
        "id": 339521557,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677924267
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 339521923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677924402
    },
    {
        "content": "<p>I believe another motivation was to keep people from accidentally writing python style function applications, since this doesn't really work (it has the wrong precedence, multi-arg functions are handled differently, etc)</p>",
        "id": 339522240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677924528
    },
    {
        "content": "<p>Yes, I can't see any downsides from this. Well, as usual the error message could be improved</p>",
        "id": 339522374,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677924586
    },
    {
        "content": "<p>Mostly it opened up <code>x[i]</code> afair</p>",
        "id": 339522598,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677924670
    },
    {
        "content": "<p>OK, that makes sense.</p>",
        "id": 339523861,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677925146
    },
    {
        "content": "<p>It might be interesting if <code>f()</code> were a high-precedence way to evaluate a <code>Unit -&gt; ...</code> function, since it'd help you avoid needing to write <code>(f ())</code>, but I don't think this is very important.</p>",
        "id": 339524656,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677925472
    },
    {
        "content": "<p>application is already very high precedence, when would you need that?</p>",
        "id": 339525834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677925926
    },
    {
        "content": "<p><code>g f() x</code>?</p>",
        "id": 339526518,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677926213
    },
    {
        "content": "<p>I didn't want to propose any change. I just wanted to document what we have.</p>",
        "id": 339550091,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677934391
    },
    {
        "content": "<p>Let's make a conclusion about whether I should include this information in <a href=\"https://leanprover.github.io/lean4/doc/lean3changes.html\">https://leanprover.github.io/lean4/doc/lean3changes.html</a> and I will close this topic.</p>",
        "id": 339659553,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678005294
    },
    {
        "content": "<p>It doesn't get much more insignificant than that change for me</p>",
        "id": 339674318,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678013640
    },
    {
        "content": "<p>I think it would be worth documenting somewhere given how unhelpful the error message is</p>",
        "id": 339676102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1678014553
    },
    {
        "content": "<p>Why not just tuck a sentence or two under the Function Applications section?</p>",
        "id": 339689815,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1678020275
    },
    {
        "content": "<p>I will add the following sentence:<br>\n\"In Lean 4, writing <code>f(x)</code> in place of <code>f x</code> is no longer allowed.\"<br>\nDo you want to add something about the macros that became possible?</p>",
        "id": 339799196,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678090174
    },
    {
        "content": "<p>At least the Qq library uses <code>Q(e)</code> and <code>q(e)</code> as macros</p>",
        "id": 339801101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678090620
    },
    {
        "content": "<p>Should we add something about them to the \"Function application\" section?</p>",
        "id": 339801695,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678090875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.60f.28x.29.60.20no.20longer.20allowed/near/339799196\">said</a>:</p>\n<blockquote>\n<p>I will add the following sentence:<br>\n\"In Lean 4, writing <code>f(x)</code> in place of <code>f x</code> is no longer allowed.\"</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/pull/2135\">https://github.com/leanprover/lean4/pull/2135</a></p>",
        "id": 339868772,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1678109572
    }
]