[
    {
        "content": "<p>How can we select the target of unfold when there are two or more invocations? For example, I'd like to unfold only the left hand side of the equation below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fact</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">â†’</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">fact_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">fact</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">fact</span> <span class=\"c1\">-- Expand only fact (n + 1) at LHS</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(This can be proved by rfl, but my use case is more complicated)</p>",
        "id": 403797814,
        "sender_full_name": "pandaman",
        "timestamp": 1700749116
    },
    {
        "content": "<p>I think <code>rw [fact]</code> only unfolds one occurrence. But if you need more precision, check out the <a href=\"https://lean-lang.org/theorem_proving_in_lean4/conv.html\"><code>conv</code></a> tactic.</p>",
        "id": 403797974,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1700749170
    },
    {
        "content": "<p><code>rw</code> worked like a charm. Thanks!</p>",
        "id": 403870866,
        "sender_full_name": "pandaman",
        "timestamp": 1700786489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395416\">pandaman</span> has marked this topic as resolved.</p>",
        "id": 403870875,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700786492
    }
]