[
    {
        "content": "<p>I have the following. The definition <code>Expression.specialize</code> is throwing <code>fail to show termination ... using structural recursion</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Placeholder</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Placeholder</span>\n<span class=\"bp\">|</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Placeholder</span>\n<span class=\"bp\">|</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Placeholder</span>\n<span class=\"n\">deriving</span> <span class=\"n\">BEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expression</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expression</span>\n  <span class=\"bp\">|</span> <span class=\"n\">function</span> <span class=\"o\">(</span><span class=\"n\">param</span><span class=\"o\">:</span> <span class=\"n\">Placeholder</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span><span class=\"o\">:</span> <span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expression</span>\n  <span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">:</span> <span class=\"n\">Placeholder</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expression</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Expression.specialize</span> <span class=\"o\">(</span><span class=\"n\">on</span><span class=\"o\">:</span> <span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">Placeholder</span> <span class=\"bp\">Ã—</span> <span class=\"n\">Expression</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expression</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">on</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">unit</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">==</span> <span class=\"n\">arg.fst</span> <span class=\"k\">then</span> <span class=\"n\">arg.snd</span> <span class=\"k\">else</span> <span class=\"n\">unit</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">function</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">function</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">b.specialize</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">call</span> <span class=\"n\">on</span> <span class=\"n\">arg2</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">ons</span> <span class=\"o\">:=</span> <span class=\"n\">on.specialize</span> <span class=\"n\">arg</span>\n  <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">arg2.specialize</span> <span class=\"n\">arg</span>\n  <span class=\"k\">match</span> <span class=\"n\">ons</span> <span class=\"k\">with</span>\n  <span class=\"c1\">-- Offending statement</span>\n  <span class=\"bp\">|</span> <span class=\"n\">function</span> <span class=\"n\">p</span> <span class=\"n\">sb</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sb.specialize</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">args</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">on</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Expression.call</span> <span class=\"n\">on</span> <span class=\"n\">args</span>\n</code></pre></div>\n<p>Is there a example application where this infinitely recurses? Maybe just a fail of the automatic termination thing, if so is there a simple way to show it does terminate?</p>",
        "id": 391484473,
        "sender_full_name": "Ben",
        "timestamp": 1694947932
    },
    {
        "content": "<p>It's the <code>sb.specialize</code> call that is not obvious, and I think you should expect that to require a non-automatic proof.</p>",
        "id": 391493497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694952195
    }
]