[
    {
        "content": "<p>Hello all; I have some questions regarding performance-aware coding in Lean.</p>\n<p>1) I heard (or misunderstood) in the Lean discord that recursive calls to<br>\nfunctions push data to the heap for various reasons.  Are there ways (e.g.<br>\ntags/attributes) to instruct the compiler to treat a specific tail-recursive<br>\nfunction defined on concrete types (not polymorphically) specially by pushing to<br>\nstack for performance?  Alternatively, am I misunderstanding the whole thing?</p>\n<p>2) Sometimes I want to load static data (e.g. a large table of precomputed<br>\nfloats, but still one that fits in a decent cache) at compile time whose size<br>\nwill never change.  Is an <code>Array Float</code> still the best data structure, or can we<br>\ndo better in terms of performance by telling the compiler that this data is<br>\ntotally unchangeable?</p>\n<p>3) Are there any internal methods in Lean to measure and report the time of an<br>\nexpression evaluation or a program?  Additionally, is there a way to do timeouts<br>\ndependent on clock duration?</p>\n<p>4) Is there any way to write inline assembly (after perhaps declaring an<br>\narchitecture and platform) or other way to call specialized CPU instructions?<br>\nWhat about GPU coding?</p>\n<p>Context: this is all for curiosity's sake.  I have not read how Lean transpiles<br>\nto C code and how that is subsequently compiled.  I am using Lean 4 v4.0 Release<br>\non Linux 6.3.9 over an Intel i7 machine.</p>",
        "id": 371728531,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1688304739
    },
    {
        "content": "<ol>\n<li>You misunderstood, while the Lean compiler itself does not guarantee tail call elimination (right  now, it will hopefully in the  future) it does output things to C code in  the end and  modern C compilers are fully capable of TCO so you will get TCO  almost all  the time if your code is written properly. Where have you heard about this type of heap stuff?</li>\n<li>The Lean compiler does understand that if you have a <code>def x : Array Float := ...</code> <code>x</code> is a constant and will attempt to treat it as such. I don't  think we put it into the .data section right now though. Instead it will at program initialization time create the Array object for you and from then on you can just use it. Generally speaking it does try  to do this with all closed terms that it can find.</li>\n<li>What kind of expression evaluation do you  mean here? You can benchmark the compiled programs like any other ones wiht <code>perf</code> + a <code>perf</code> data viewer like <code>hotspot</code>. I don't think we have instrumented the bytecode  VM that is behind <code>#eval</code>, it is also not particularly optimized so if you want to have actually  fast  stuff you basically always want to  use the compiled version.  Lastly there is <code>#reduce</code>, using that  for anything performance related will usually not end up well either.</li>\n<li>No, but the LLVM backend might enable that in the future</li>\n</ol>\n<p>Further remarks: Using a Lean nightly is what almost everyone here does,  it's what gets you the actual latest stuff and gives you  access to the current eco system which is almost exclusively developed against nightlies. Furthermore for performance aware coding in Lean the most important thing that  you can probably do is treating our efficient datastructures like <code>Array</code> and <code>HashMap</code> in a linear way.</p>",
        "id": 371730791,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1688305281
    },
    {
        "content": "<p>Thank you for the reply!</p>\n<p>Regarding 1), it was an offhand remark in a functional programming discord server.  The commenter said something about data in polymorphic functions not being able to be represented in the stack, or something like that.  I had no doubt about TCO, it was more about the control of where data is placed in recursive functions.</p>\n<p>On 2), when I <code>def x</code> that way, I can still grow the <code>Array</code>, right?  So the allocation still needs to happen on the heap?</p>\n<p>On 3), for instance I'd like to run a (compiled) program and it outputs the time lapsed for one of its actions or effects.</p>\n<p>Regarding optimized data structures, I know <code>Array</code> and <code>HashMap</code> are the fundamental ones.  Are there any other that I should be aware of?</p>",
        "id": 371735608,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1688306513
    },
    {
        "content": "<p>Regarding nightly, I am not doing anything so advanced that I need the latest features!  I am still learning to swim in the shallows <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 371735833,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1688306564
    },
    {
        "content": "<p>One catch with <code>Array Float</code> is that it stores boxed floats, so it is very cache unfriendly. Use <code>FloarArray</code> which stores all floats in one block of memory.</p>\n<p>Both <code>Array</code> and <code>FloatArray</code> support setting capacity i.e. specify the expected size of the array so you minimize reallocation.</p>",
        "id": 371742759,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1688308393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Performance.20aware.20coding.20in.20Lean/near/371735833\">said</a>:</p>\n<blockquote>\n<p>Regarding nightly, I am not doing anything so advanced that I need the latest features!</p>\n</blockquote>\n<p>You probably still want to be on the lastest version, since there are improvements and bug fixes too! 4.0.0 has had a few releases, but even the newest is about a year old, and Lean 4 has only been public for 2.5 years</p>",
        "id": 371743167,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688308506
    },
    {
        "content": "<p>In addition to what <span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> said, regarding 2 what happens is that the array will be copied the very first time you push anything onto the array, even if you set the capacity. This is due to it being a global definition, which needs to retain the original array. After that though, if you keep growing that (copied) array it can do so in-place</p>",
        "id": 371743798,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688308668
    },
    {
        "content": "<p>Oh, I see, thank you for the information about nightly!</p>",
        "id": 371759917,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1688312781
    },
    {
        "content": "<p>RE: timing, if you are within the <code>IO</code> monad you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/System/IO.html#IO.monoMsNow\">IO.monoMsNow</a> to get a monotonically increasing clock value that should correspond to the system clock.</p>",
        "id": 371770754,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1688315953
    }
]