[
    {
        "content": "<p>What is the difference between <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.RBMap#doc\">docs#Lean.RBMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.RBMap#doc\">docs#Std.RBMap</a> ? Why are there two copies? Which one should I use?</p>",
        "id": 378802163,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690378181
    },
    {
        "content": "<p>The Lean one is only/primarily for use within the compiler; unless you're interfacing with that, the std one is probably better</p>",
        "id": 378808021,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1690379127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378802163\">said</a>:</p>\n<blockquote>\n<p>What is the difference between <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.RBMap#doc\">docs#Lean.RBMap</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.RBMap#doc\">docs#Std.RBMap</a> ? Why are there two copies? Which one should I use?</p>\n</blockquote>\n<p>The why is: Lean's compiler does not (possibly yet) want to depend on std4 to build but std4 wants to do additional experimentation on top of the existing RbMap in Lean, the compiler datastructures do however only contain what the compiler needs so instead there are now two of the m that might or might not be merged one day</p>",
        "id": 378809120,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1690379314
    },
    {
        "content": "<p>Thanks!</p>\n<p>(I ended up using the Lean one, since I my main application was <code>NameMap</code>/<code>NameSet</code>)</p>",
        "id": 378842394,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690384465
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I remember we discussed this once, but I forgot the details. Why is <code>Std.RBMap</code> defined in terms of <code>RBSet</code> instead of the other way around (e.g., like essentially in core or where <code>RBSet a := RBMap a Unit</code>)? It seems this would reduce a level of pointer indirection (the <code>RBMap</code> tuple could be \"unboxed\" in the Node) without significant overhead (a pointless <code>Unit</code> field in the node for an <code>RBSet</code>).</p>",
        "id": 378884968,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690391810
    },
    {
        "content": "<p>Because it would require duplicating all the proofs with a useless field. Maybe I will do it at some point but I'd rather hold out for lean making this zero-cost</p>",
        "id": 378902885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690395550
    },
    {
        "content": "<p>While this issue exists, it puts adverse incentives on almost everything to make the code worse in exchange for optimization. I recently debugged an issue along the same lines with <span class=\"user-mention\" data-user-id=\"524339\">@Yicheng Qian</span> : they had code like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">d</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"n\">while</span> <span class=\"n\">true</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- hot loop which does some basic arithmetic and modifies a,b,c,d,e</span>\n  <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span>\n  <span class=\"k\">if</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">break</span>\n  <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">b</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n  <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and it turned out that the performance was dominated by the fact that the <code>do</code> notation tuples all the mutable variables after every iteration like <code>(a, (b, (c, (d, e)))</code> (i.e. 4 allocations) and untuples them at the beginning of the loop. This was run once per character as part of a parser, and this single allocation contributed to over 50% of the runtime</p>",
        "id": 378905710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690396045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378902885\">said</a>:</p>\n<blockquote>\n<p>Because it would require duplicating all the proofs with a useless field. Maybe I will do it at some point but I'd rather hold out for lean making this zero-cost</p>\n</blockquote>\n<p>Why would it require duplication? If <code>RBNode</code> was changed to have <code>k/v</code>, the proofs would be in terms of that, which would carry on through through the definitions of <code>RBMap</code> and <code>RBSet</code> (just as inversely the RBSet structure/proofs are carried on through for <code>RBMap</code> now). Right?</p>",
        "id": 378958226,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690410291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378905710\">said</a>:</p>\n<blockquote>\n<p>the fact that the <code>do</code> notation tuples all the mutable variables after every iteration like <code>(a, (b, (c, (d, e)))</code> (i.e. 4 allocations) and untuples them at the beginning of the loop. This was run once per character as part of a parser, and this single allocation contributed to over 50% of the runtime</p>\n</blockquote>\n<p>Yeah, using loops in do notation is a bad idea if you are looking for primitive loop behavior. If you want that, you generally need to use a tail-recursive function. Even in Sebastian's upgraded <code>do</code> unchained notation, this seems like it would still be a problem, so I think holding out hope for this to be optimized in the future is unlikely in any near-term situation. Part of this could be alleviated by wrapping up all the mutable variables in a single autogenerated on-demand structure type, though some packing and unpacking would still likely occur (especially with more nested do use). On the flip side, statements by Leo has given me the impression that improving/rewriting do notation is not high on the priority list.</p>",
        "id": 378959725,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690410926
    },
    {
        "content": "<p>the common through line here is not improvements to the <code>do</code> notation, but rather inlined structure layouts</p>",
        "id": 378959895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690410983
    },
    {
        "content": "<p>if <code>RBMap</code> inlined its pair in the <code>RBSet</code> data structure we wouldn't need to talk about this</p>",
        "id": 378959952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411013
    },
    {
        "content": "<p>and <code>AssocList</code> wouldn't even need to exist</p>",
        "id": 378960028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411054
    },
    {
        "content": "<p>I don't think <code>RBSet</code> should be changed, it has a good API for what it does and you are talking about things that would change the API (of the lemmas)</p>",
        "id": 378960204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411121
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> My understanding is that inlined structure layouts are also not on the todo list, especially automatically. The only thing in this realm that I have heard being considered is to be ability to manually mark certain structure types as unboxed and they then they will be passed by-value rather than by-aggregate. This would only occur in cases where the fixed type is known at codegen time, so this would not apply for polymorphic.</p>",
        "id": 378960425,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690411221
    },
    {
        "content": "<p>It doesn't have to be automatic, as soon as it is opt in <code>RBMap</code> will definitely opt in</p>",
        "id": 378960458,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> My point is that, in that feature I have heard discussed in meetings, <code>RBMap</code> is not the kind of type that <em>can</em> opt-in.</p>",
        "id": 378960563,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690411306
    },
    {
        "content": "<p>the <em>only</em> reason to consider the <code>RBMap</code> refactor you are describing is to change the data layout. This needs to be solved at the data layout level, not at a level that complicates all the proofs</p>",
        "id": 378960638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411333
    },
    {
        "content": "<p>The situation is basically the same for <code>AssocList</code>, it is dumb to have to copy the whole <code>List</code> API just because you want to store two things instead of one</p>",
        "id": 378960720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411394
    },
    {
        "content": "<p>it basically means that structures don't work as a concept</p>",
        "id": 378960739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690411409
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378960638\">said</a>:</p>\n<blockquote>\n<p>the <em>only</em> reason to consider the <code>RBMap</code> refactor you are describing is to change the data layout. This needs to be solved at the data layout level, not at a level that complicates all the proofs</p>\n</blockquote>\n<p>My argument is to this is simply one of expediency. It is unlikely that this will be solved in the compiler anytime soon, and it is not clear to me how this could be solved at all without a major refactor (the only way I can see to implement this would require specializing all upstream functions -- both existing and future -- to <code>RBMap</code> which would require some significant compiler overhaul and powerful type inference to make sure the right version is being used).  </p>\n<p>Nonetheless, removing a level of data indirection is a major performance gain for a core type like<code>RBMap</code>, so I think a bit of complication for some significant performance boost is worth it, especially knowing it is unlikely they this will be solvable by the compiler for likely a good few years.</p>",
        "id": 378963245,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690412608
    },
    {
        "content": "<p>Furthermore, this is likely to be a major sticking point with any future merge of Std with core, given that the core version is objectively better alternative for its primary core use cases due to its superior performance.</p>",
        "id": 378963482,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690412741
    },
    {
        "content": "<p>Like I said, if this becomes a big enough issue we can make a copy of RBSet and transfer all the theorems. So far it hasn't been reported as an issue except in the theoretical sense</p>",
        "id": 378964143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690413075
    },
    {
        "content": "<p>So far, it is not a major issue in part because the core version is still available if you care</p>",
        "id": 378964268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690413141
    },
    {
        "content": "<p>keep in mind that <code>RBMap</code> is already indirection heavy since it is a binary tree. In fact you can probably levy similar complaints against the use of <code>RBColor</code>, that could just be baked into the discriminant at the cost of complicating the proofs</p>",
        "id": 378964419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690413223
    },
    {
        "content": "<p>that would save 8 bytes per node</p>",
        "id": 378964493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690413248
    },
    {
        "content": "<p>TBH this is why I don't like high performance programming in lean, there are just so many suboptimal things you can see from a mile away and optimizing for them is unsatisfying because all abstractions come with a cost, including whatever you are in the process of building</p>",
        "id": 378964672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690413326
    },
    {
        "content": "<p>Writing <a href=\"#narrow/stream/270676-lean4/topic/leangz.3A.20olean.20file.20compressor\">leangz</a> was great, I could look at the data format and say \"80% of this is unnecessary\" and end up with 7x space reduction, <em>before</em> compression. There is just so much overhead in the object format, it is not at all space-optimized. Lean just isn't tuned for this kind of thing, and it lacks the facilities for adequate control over data layout</p>",
        "id": 378965343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690413680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378964672\">said</a>:</p>\n<blockquote>\n<p>TBH this is why I don't like high performance programming in lean, there are just so many suboptimal things you can see from a mile away and optimizing for them is unsatisfying because all abstractions come with a cost, including whatever you are in the process of building</p>\n</blockquote>\n<p>I think this is our major point of contention. I would like to use Lean for all my computing (high performance or otherwise) in the future.  I am also happy to sacrifice ease of provability when necessary to achieve this. However, I think Lean generally provides  enough meta-programming tools (and will provide even more in the future with the Lean-level compiler) to mitigate most sacrifices.</p>",
        "id": 378966167,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414102
    },
    {
        "content": "<p>In lean, the proofs and the defeqs are part of the API of the type. You need to be able to exert separate control over them in a good library</p>",
        "id": 378966397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414227
    },
    {
        "content": "<p><code>implemented_by</code> is great for that</p>",
        "id": 378966411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378964143\">said</a>:</p>\n<blockquote>\n<p>Like I said, if this becomes a big enough issue we can make a copy of RBSet and transfer all the theorems. So far it hasn't been reported as an issue except in the theoretical sense</p>\n</blockquote>\n<p>I am still not clear though on why this change would require so much duplication. Why can't most theorems just be written for RBMap and lifted to RBSet when <code>RBSet a := RBMap a Unit</code> (just as the inverse is currently done for RBMap in terms of RBSet)?</p>",
        "id": 378966456,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414266
    },
    {
        "content": "<p>but when it comes to data layout the <code>inductive</code> and the layout are inextricably linked</p>",
        "id": 378966474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414276
    },
    {
        "content": "<p>It would mean having an additional useless argument in all of the <code>RBNode</code> theorems, i.e. an API change</p>",
        "id": 378966536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414322
    },
    {
        "content": "<p>and besides, the same problem comes up again if you want to store two things instead of one</p>",
        "id": 378966656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378966397\">said</a>:</p>\n<blockquote>\n<p>In lean, the proofs and the defeqs are part of the API of the type. You need to be able to exert separate control over them in a good library</p>\n</blockquote>\n<p>This depends on whether the library is meant for proving or for computation. If the later, they may not be part of API (i.e., they may be considered a non-breaking implementation detail).</p>",
        "id": 378966667,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414378
    },
    {
        "content": "<blockquote>\n<p>This depends on whether the library is meant for proving or for computation</p>\n</blockquote>\n<p>It's both!</p>",
        "id": 378966688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414390
    },
    {
        "content": "<p>There are a <em>lot</em> of theorems about RBNode</p>",
        "id": 378966725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414412
    },
    {
        "content": "<p><code>RBNode</code> is a public type too</p>",
        "id": 378966834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> My point is that a library can make that decision, and cases like these may be evidence there may need to be a split between proof-centric standard library and a computation-centric library for complex datatypes.</p>",
        "id": 378966853,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414466
    },
    {
        "content": "<p>Obviously I want both</p>",
        "id": 378966876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414480
    },
    {
        "content": "<p>Or some nice metaprogramming tools to solve code duplication problems.</p>",
        "id": 378966887,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414496
    },
    {
        "content": "<p>and not in separate packages either, I want one type that is good in both ways</p>",
        "id": 378966888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I want a lot of things too; the question is whether that is feasible or likely to be supported in the near-term.</p>",
        "id": 378966941,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414528
    },
    {
        "content": "<p>in the near term I have explained what could happen with RBMap. I don't think changing the API of RBNode is on the table, but you can transfer things from an equivalent type without <em>too</em> much pain, just a lot of copy paste</p>",
        "id": 378967061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414591
    },
    {
        "content": "<p>For instance, I would like the core monad functions and instances to only require their exact prerequisites. However that requires refactors and code review that was not in the cards when I proposed it.</p>",
        "id": 378967142,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414635
    },
    {
        "content": "<p>that is also a performance regression IIUC</p>",
        "id": 378967182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/two.20RBMaps/near/378967182\">said</a>:</p>\n<blockquote>\n<p>that is also a performance regression IIUC</p>\n</blockquote>\n<p>What?</p>",
        "id": 378967210,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414679
    },
    {
        "content": "<p>at least, <code>mapM</code> -&gt; <code>mapA</code> is a performance regression</p>",
        "id": 378967375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you mean on an <code>List</code>/<code>Array</code>? I meant things like <code>pure</code> and <code>bind</code> for transformers like<code> ReaderT</code>.</p>",
        "id": 378967473,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414806
    },
    {
        "content": "<p>(i.e., so the transformers also work on types weaker than a monad).</p>",
        "id": 378967495,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414832
    },
    {
        "content": "<p>I recall making exactly this change and hitting issues, although the details escape me now</p>",
        "id": 378967503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414836
    },
    {
        "content": "<p>I don't think they were performance issues, something broke</p>",
        "id": 378967532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690414856
    },
    {
        "content": "<p>I actually made this exact change and previous Lean 4 PR (<a href=\"https://github.com/leanprover/lean4/pull/581\">lean4#581</a>) and got it work without issues. The main thing is that is also required fixing the <code>LawfulMonad</code> proofs.</p>",
        "id": 378967674,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690414928
    },
    {
        "content": "<p>Here's the previous PR where I hit issues with the generalization: <a href=\"https://github.com/leanprover/lean4/pull/1447\">lean4#1447</a></p>",
        "id": 378969376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690416005
    },
    {
        "content": "<p>the specific commit with the error is <a href=\"https://github.com/leanprover/lean4/commit/8ca6fe43820a3476f716caabd80adc1a9d8bfdca\">https://github.com/leanprover/lean4/commit/8ca6fe43820a3476f716caabd80adc1a9d8bfdca</a> although the log has since been deleted. I think it ran out of stack space in the linux debug run</p>",
        "id": 378969827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690416268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Interesting, I didn't have a similar problem with my PR, but mine was much older so the bug (which it does seem like it was bug elsewhere that was just exposed by this change) may have been introduced since then. It is also worth noting that your change did not generalize the instances as well (e.g., <code>[Pure m] : Pure (ReaderT p m)</code>) so that may have also been a factor (but you did mention trying that in your report and still getting the error).</p>",
        "id": 378970985,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690417016
    },
    {
        "content": "<p>It could also be interplay between other transformers which I generalized by you do not.</p>",
        "id": 378971170,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690417157
    },
    {
        "content": "<p>I did try to generalize the instances, see <a href=\"https://github.com/leanprover/lean4/commit/8ca6fe43820a3476f716caabd80adc1a9d8bfdca#diff-52ef0c67eea613acf6c0b6284063fd7112cdd40750de38365c214abaef246db4R2077\">https://github.com/leanprover/lean4/commit/8ca6fe43820a3476f716caabd80adc1a9d8bfdca#diff-52ef0c67eea613acf6c0b6284063fd7112cdd40750de38365c214abaef246db4R2077</a> . The change that landed basically excludes all of the generalizations that didn't work, so if you take 8ca6fe and compare it to the final PR commit you will have all of the buggy generalizations</p>",
        "id": 378973998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690418965
    }
]