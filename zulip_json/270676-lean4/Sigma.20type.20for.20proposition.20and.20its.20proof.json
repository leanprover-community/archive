[
    {
        "content": "<p>Is there a way to express the type <code>(Prop, proof of .0)</code>? For example I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Sigma.mk</span> <span class=\"n\">Nat</span> <span class=\"mi\">4</span>\n</code></pre></div>\n<p>but I cannot do this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">Sigma.mk</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Nat.add_comm</span>\n</code></pre></div>\n<p>The closest thing I can think of is the <code>Std.HashMap</code> type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.Std.HashMap</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Imp</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">//</span> <span class=\"n\">m.WF</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>which couples an object along with a proposition about the object. Why is this use case ok while the one I contrived doesn't typecheck?</p>",
        "id": 389758072,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694120694
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PSigma#doc\">docs#PSigma</a> what you want?</p>",
        "id": 389758505,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1694120891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/Sigma.20type.20for.20proposition.20and.20its.20proof/near/389758505\">said</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=PSigma#doc\">docs#PSigma</a> what you want?</p>\n</blockquote>\n<p>This still doesn't typecheck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">PSigma.mk</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">Nat.add_comm</span>\n</code></pre></div>",
        "id": 389759196,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121261
    },
    {
        "content": "<p>The reason your original code doesn't typecheck is that <code>Prop</code> isn't <code>Type u</code> for any <code>u</code>, <code>Prop</code> is something like \"Type -1\" but  that doesn't actually make sense. The type of <code>Sigma.mk</code> is <code>Sigma.mk.{u, v} {α : Type u} {β : α → Type v} (fst : α) (snd : β fst) : Sigma β</code> so it's demanding <code>Type u</code>. The point of <code>PSigma</code> is that it avoids this.</p>",
        "id": 389759222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694121283
    },
    {
        "content": "<p>but I've replaced <code>Sigma</code> with <code>PSigma</code> and it still doesn't typecheck</p>",
        "id": 389759261,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121308
    },
    {
        "content": "<p>The type of <code>PSigma.mk</code> is <code>PSigma.mk.{u, v} {α : Sort u} {β : α → Sort v} (fst : α) (snd : β fst) : PSigma β</code>. What do you want beta to be here? It's supposed to be a function.</p>",
        "id": 389759458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694121431
    },
    {
        "content": "<p>Can it just be the identity function?</p>",
        "id": 389759502,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121471
    },
    {
        "content": "<p>I want <code>snd</code> to typecheck to <code>fst</code></p>",
        "id": 389759558,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121487
    },
    {
        "content": "<p>I am not the best at this sort of foundational stuff but Lean needs to be able to guess alpha and beta and right now I'm not sure what you have in mind for these.</p>",
        "id": 389759623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694121534
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>as  does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Nat.add_comm</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">Σ'</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 389759668,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694121578
    },
    {
        "content": "<p>The simple approach to this would be to just ship it yourself without thinking^^</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Simple</span> <span class=\"n\">where</span>\n  <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span>\n</code></pre></div>\n<p>since there isn't really much interesting API for PSigma anyways.</p>",
        "id": 389759754,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694121619
    },
    {
        "content": "<p>I think the takeaway here is that <code>Sigma.mk</code> and <code>PSigma.mk</code> don't really work unless you also write out the type you expect, as Lean can't infer the family. You wrote the type in your question here though, you just forgot to tell it to Lean!</p>",
        "id": 389759850,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694121678
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 389759889,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121709
    },
    {
        "content": "<p>Does the <code>{ .. // .. }</code> thing from <code>Std.HashMap</code> work the same way?</p>",
        "id": 389759970,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121728
    },
    {
        "content": "<p><code>Std.HashMap</code> uses this expression <code>{m : Imp α β // m.WF}</code> which couples a propositon about an object with the object itself and I couldn't find out about how the <code>//</code> operator works</p>",
        "id": 389760074,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121787
    },
    {
        "content": "<p>That's notation for <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Subtype#doc\">docs#Subtype</a></p>",
        "id": 389760083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1694121791
    },
    {
        "content": "<p>That's a subtype, it works a bit different as the left hand side is data and the right hand side is proof about the data</p>",
        "id": 389760090,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694121796
    },
    {
        "content": "<p>Is <code>Subtype</code> just a special case for <code>PSigma</code>?</p>",
        "id": 389760297,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1694121904
    },
    {
        "content": "<p>One could say that yes.</p>",
        "id": 389760426,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694121982
    }
]