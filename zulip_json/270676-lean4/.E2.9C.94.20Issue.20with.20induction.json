[
    {
        "content": "<p>I am encountering some strange behavior with induction.  Specifically, I have a variable j that depends explicitly on the induction variable i.  In order to simplify things, I introduce a variable j' to represent the old j.  However, when specializing the induction hypothesis, it does not replace the j with j'.  This contradicts the goal, but I know that the goal is true, so it appears to violate logical consistency.  I understand that it may only be an apparent contradiciton, but it is befuddling to me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Init.Order.Defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Order.Basic</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">div_ij</span> <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ijk</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"bp\">=</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">div</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">div</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">div</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">div</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i'</span> <span class=\"n\">hi'</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">ijk'</span> <span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">+</span><span class=\"n\">j'</span><span class=\"bp\">=</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ijk</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hi'</span> <span class=\"n\">ijk'</span>\n</code></pre></div>",
        "id": 391075076,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694752320
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 391075386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694752475
    },
    {
        "content": "<p>you need <code>import Mathlib.Tactic</code> on top</p>",
        "id": 391075568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694752583
    },
    {
        "content": "<p>I don't understand the issue, what's the contradiction exactly?</p>",
        "id": 391075596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694752605
    },
    {
        "content": "<p>it seems like you want to do an induction where <code>i</code> steps down and <code>j</code> steps up. In that case you need <code>generalizing j</code> on the induction, or else the inductive hypothesis will not be applicable</p>",
        "id": 391075699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694752678
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_ij</span> <span class=\"o\">(</span><span class=\"n\">div</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ijk</span><span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"bp\">+</span><span class=\"n\">j</span><span class=\"bp\">=</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">div</span> <span class=\"mi\">0</span> <span class=\"bp\">*</span> <span class=\"n\">div</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">div</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">div</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">induction'</span> <span class=\"n\">i</span> <span class=\"k\">with</span> <span class=\"n\">i'</span> <span class=\"n\">hi'</span> <span class=\"n\">generalizing</span> <span class=\"n\">j</span>\n  <span class=\"n\">simp</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h0</span>\n  <span class=\"k\">let</span> <span class=\"n\">j'</span> <span class=\"o\">:=</span> <span class=\"n\">j</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"k\">have</span> <span class=\"n\">ijk'</span> <span class=\"o\">:</span> <span class=\"n\">i'</span><span class=\"bp\">+</span><span class=\"n\">j'</span><span class=\"bp\">=</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">ijk</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">hi'</span> <span class=\"n\">_</span> <span class=\"n\">ijk'</span>\n</code></pre></div>",
        "id": 391075793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694752728
    },
    {
        "content": "<p>Can you explain how to use generalizing j in this example?  That would be helpful for me.  But that also does not explain the behavior, which seems to lead to a contradiction (I happen to know this property is true in this case with extra assumptions omitted from the mwe).  There is a contradiction between the goal and hi' at the end, because these are supposed to be an increasing list of divisors so div i * div j =n contradicts div (i+1)*div j = n )</p>",
        "id": 391076434,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694753068
    },
    {
        "content": "<p>it's not a contradiction, <code>hi'</code> has an assumption that can't be satisfied, making it useless (<code>False -&gt; A</code> is trivially true)</p>",
        "id": 391076516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694753132
    },
    {
        "content": "<p>see the code above for usage of <code>generalizing j</code></p>",
        "id": 391076556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694753163
    },
    {
        "content": "<p>But when I write specialize hi' ijk' (in my example) it changes hi' to not have the condition, so in principle it is stating that the property div i * div j = n (with the new definition of j) is true, which is the apparent contradiction.</p>",
        "id": 391076763,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694753259
    },
    {
        "content": "<p>note the type error, the application of <code>specialize</code> didn't actually work</p>",
        "id": 391076881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694753290
    },
    {
        "content": "<p>lean tries to continue in the face of errors which is why <code>specialize</code> appears to produce a well formed state afterwards anyway but you can't finish the proof with the error in it</p>",
        "id": 391077003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694753355
    },
    {
        "content": "<p>I see the type error now.  I actually didn't see it in the other document, it could've gotten lost in all the other messages, although I thought I looked carefully.  This does resolve the issue though!</p>",
        "id": 391077592,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694753606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648334\">Teddy Baker</span> has marked this topic as resolved.</p>",
        "id": 391077606,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694753615
    },
    {
        "content": "<p>Weirdly it didn't actually show me the type error on the original example, just the mwe, I just double checked.  That is a bit confusing, but I'm going to stop thinking about it for now</p>",
        "id": 391078320,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1694753963
    }
]