[
    {
        "content": "<p>in \"S03 Using Theorems and Lemmas\" there is an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>The solution given is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- SOLUTION.</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sub_le_sub_left</span>\n  <span class=\"n\">exact</span> <span class=\"n\">exp_le_exp.mpr</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>which uses \"sub_le_sub_left\", which wasn't introduced above (which is fine, the author wants users to explore mathlib4). However, I wanted to prove it with my own lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">neg_flip_sign</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span>\n  <span class=\"k\">calc</span>\n    <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n    <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n      <span class=\"n\">apply</span> <span class=\"n\">add_le_add_right</span> <span class=\"n\">h</span>\n    <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ring</span>\n</code></pre></div>\n<p>Is that doable? To use the lemma (along with exp_le_exp).mpr to prove that: -exp b ≤ -exp a ? and then apply that with add_le_add_left to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>?</p>",
        "id": 397389913,
        "sender_full_name": "Mike",
        "timestamp": 1697667162
    },
    {
        "content": "<p>yeah that should work I think? By the way, take a look at the <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> link, you can edit your original post to make it easier to read.</p>",
        "id": 397390073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697667260
    },
    {
        "content": "<p>Thanks Kevin! It does work.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span> <span class=\"n\">exp</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">apply</span> <span class=\"n\">neg_flip_sign</span>\n    <span class=\"n\">apply</span> <span class=\"n\">exp_le_exp.mpr</span> <span class=\"n\">h</span>\n  <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span> <span class=\"n\">h₁</span>\n</code></pre></div>",
        "id": 397393727,
        "sender_full_name": "Mike",
        "timestamp": 1697669919
    },
    {
        "content": "<p>See if <code>exact?</code> proves <code>neg_flip_sign</code>. If it does you'll find out what the official lean name for it is.</p>",
        "id": 397400275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697675238
    }
]