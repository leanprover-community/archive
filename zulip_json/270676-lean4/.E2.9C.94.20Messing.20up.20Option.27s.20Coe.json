[
    {
        "content": "<p>I have a case where the coercion <code>X</code> to <code>Option X</code> stops working after adding another <code>Coe</code> instance.<br>\nThis works just as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yes</span>\n  <span class=\"bp\">|</span> <span class=\"n\">no</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A.yes</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yes</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span> <span class=\"c1\">-- Coerces to `Option Unit`</span>\n  <span class=\"bp\">|</span> <span class=\"n\">no</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n</code></pre></div>\n<p>But adding this <code>Numbered</code> type with a coercion from <code>Numbered X</code> to <code>X</code> messes up the <code>Option</code>-coercion in <code>A.yes?</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Numbered</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">num</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Numbered</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">Numbered.obj</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yes</span>\n  <span class=\"bp\">|</span> <span class=\"n\">no</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">A.yes</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Unit</span>\n  <span class=\"bp\">|</span> <span class=\"n\">yes</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Unit.unit</span> <span class=\"c1\">-- Error message below</span>\n  <span class=\"bp\">|</span> <span class=\"n\">no</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  ()</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Unit : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Option Unit : Type</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>Is there a way to fix this?</p>",
        "id": 279679860,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650547642
    },
    {
        "content": "<p>Your Coe instance can be combined with itself an unbounded number of times, synthesizing larger and larger types. You need to use the right Coe class for instances with an arbitrary source/target type: <a href=\"https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96\">https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96</a></p>",
        "id": 279680481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650547945
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Messing.20up.20Option's.20Coe/near/279680481\">said</a>:</p>\n<blockquote>\n<p>Your Coe instance can be combined with itself an unbounded number of times, synthesizing larger and larger types. You need to use the right Coe class for instances with an arbitrary source/target type: <a href=\"https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96\">https://github.com/leanprover/lean4/blob/d8ad343885d87f6ab6715ee443f0db826d1286d1/src/Init/Coe.lean#L92-L96</a></p>\n</blockquote>\n<p>So assuming I would tend to want a <code>Numbered X</code> to be coerced to an <code>X</code> first, and then have other coercions applied, I would have to use <code>CoeHead</code>?</p>",
        "id": 279681413,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1650548449
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 279681714,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1650548601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 279681744,
        "sender_full_name": "Notification Bot",
        "timestamp": 1650548614
    }
]