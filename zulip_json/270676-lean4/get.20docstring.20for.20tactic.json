[
    {
        "content": "<p>Using <code>Lean.findDocString? env name</code> I can get the docstring of a declaration, but that does not seem to work for tactics. How would I retrieve the docstring of a tactic, say <code>simp</code>?</p>",
        "id": 360365888,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684786228
    },
    {
        "content": "<p>the docstring on a tactic is the docstring on the <code>syntax</code> declaration for that tactic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.HelpCmd</span>\n\n<span class=\"k\">#help</span> <span class=\"n\">tactic</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- syntax \"simp\"... [Lean.Parser.Tactic.simp]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">MetaM</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Tactic.simp</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">println</span><span class=\"bp\">!</span> <span class=\"n\">s</span>\n<span class=\"c1\">-- The `simp` tactic uses lemmas and hypotheses to simplify the main goal target or</span>\n<span class=\"c1\">-- non-dependent hypotheses. It has many variants: ...</span>\n</code></pre></div>",
        "id": 360372131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684788604
    },
    {
        "content": "<p>Thanks!<br>\nNow I just have to figure out how to get <code> ``Lean.Parser.Tactic.simp</code> starting from a <code>Name</code>/<code>Ident</code> saying just <code>simp</code>, but that is a problem for another day. Maybe just something along the lines of <code> ``(tactic| ${name})</code> (not on the computer anymore)</p>",
        "id": 360375731,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684789822
    },
    {
        "content": "<p>that's what the first line was for</p>",
        "id": 360379222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684790911
    },
    {
        "content": "<p>the <code>#help</code> command implements exactly this lookup</p>",
        "id": 360379370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684790976
    },
    {
        "content": "<p>although depending on the context you might want to just parse a syntax instead. What are you actually trying to do?</p>",
        "id": 360379481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684791012
    },
    {
        "content": "<p>Looking quickly at <code>#help</code> it isnt completely obvious to me how that lookup works, but maybe Ill figure it out when I look at it for another 20min</p>\n<p>As for why, it's for the games (NNG, etc). The author can provide documentation for introduced tactics with a command like</p>\n<p><code>TacticDoc simp \"some text\"</code></p>\n<p>and I would like to use the tactic's docstring in case they don't provide a documentation that way.</p>",
        "id": 360532685,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684848635
    },
    {
        "content": "<p>why not just require the author to do the lookup and refer to the appropriately namespaced constant?</p>",
        "id": 360595306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684862521
    },
    {
        "content": "<p>We simply would like to make it as easy as possible for authors. Game authors are not necessarily good metaprogrammers.</p>",
        "id": 360706607,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1684912114
    },
    {
        "content": "<p>they can just use <code>#help</code> to look up the names, as indicated</p>",
        "id": 360707159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684912298
    },
    {
        "content": "<p>Note that looking up a tactic by its initial token is a lossy process, which is why <code>#help</code> acts more like a search engine. If you actually want to identify a particular tactic you need something more precise</p>",
        "id": 360707553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684912418
    },
    {
        "content": "<p>An alternative would be to have your syntax accept a full (syntactically correct) tactic expression and look up the name that way</p>",
        "id": 360707716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684912468
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span>\n<span class=\"n\">elab</span> <span class=\"n\">doc</span><span class=\"o\">:</span><span class=\"n\">docComment</span> <span class=\"s2\">\"tactic_doc\"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">doc</span> <span class=\"o\">:=</span> <span class=\"n\">doc.getDocString.trim</span>\n  <span class=\"k\">let</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">t.raw.getKind</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"adding doc {repr doc} to {kind}\"</span>\n\n<span class=\"sd\">/-- some text -/</span> <span class=\"n\">tactic_doc</span> <span class=\"n\">simp</span>\n<span class=\"c1\">-- adding doc \"some text\" to Lean.Parser.Tactic.simp</span>\n<span class=\"sd\">/-- some text -/</span> <span class=\"n\">tactic_doc</span> <span class=\"n\">cases</span> <span class=\"bp\">·</span>\n<span class=\"c1\">-- adding doc \"some text\" to Lean.Parser.Tactic.cases</span>\n<span class=\"sd\">/-- some text -/</span> <span class=\"n\">tactic_doc</span> <span class=\"bp\">·</span> <span class=\"n\">skip</span>\n<span class=\"c1\">-- adding doc \"some text\" to cdot</span>\n<span class=\"sd\">/-- some text -/</span> <span class=\"n\">tactic_doc</span> <span class=\"n\">skip</span>\n<span class=\"c1\">-- adding doc \"some text\" to Lean.Parser.Tactic.skip</span>\n<span class=\"sd\">/-- some text -/</span> <span class=\"n\">tactic_doc</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">·</span><span class=\"o\">]</span>\n<span class=\"c1\">-- adding doc \"some text\" to Lean.Parser.Tactic.rwSeq</span>\n</code></pre></div>",
        "id": 360708143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684912622
    },
    {
        "content": "<p>Thanks Mario for the help! I wasn't quite aware that this tactic lookup is not a bijective process form the first token itself. I just had an hour on the train to compress <code>#help</code> into something that should hopefully work well enough:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">getTacticDocstring</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">name.toString</span> <span class=\"o\">(</span><span class=\"n\">escape</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">decls</span> <span class=\"o\">:</span> <span class=\"n\">Lean.RBMap</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">SyntaxNodeKind</span><span class=\"o\">)</span> <span class=\"n\">compare</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">catName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span>\n  <span class=\"k\">let</span> <span class=\"n\">catStx</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"n\">catName</span> <span class=\"c1\">-- TODO</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">cat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Parser.parserExtension.getState</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">categories.find</span><span class=\"bp\">?</span> <span class=\"n\">catName</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">catStx</span> <span class=\"s2\">\"{catStx} is not a syntax category\"</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Term.addCategoryInfo</span> <span class=\"n\">catStx</span> <span class=\"n\">catName</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">cat.kinds</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">used</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">tk</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">getHeadTk</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">tk</span> <span class=\"o\">:=</span> <span class=\"n\">tk.trim</span>\n      <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">≠</span> <span class=\"n\">tk</span> <span class=\"k\">then</span> <span class=\"c1\">-- was `!name.isPrefixOf tk`</span>\n        <span class=\"n\">continue</span>\n      <span class=\"n\">used</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n      <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">decls.insert</span> <span class=\"n\">tk</span> <span class=\"o\">((</span><span class=\"n\">decls.findD</span> <span class=\"n\">tk</span> <span class=\"bp\">#</span><span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">_name</span><span class=\"o\">,</span> <span class=\"n\">ks</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">decls</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">ks</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">k</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">doc</span>\n\n  <span class=\"n\">logWarning</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Could not find a docstring for this tactic, consider adding one \"</span> <span class=\"bp\">++</span>\n    <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"using `TacticDoc {name} </span><span class=\"se\">\\\"</span><span class=\"s2\">some doc</span><span class=\"se\">\\\"</span><span class=\"s2\">`\"</span>\n  <span class=\"n\">return</span> <span class=\"s2\">\"\"</span>\n</code></pre></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Full MWE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Modified from Mathlib.Tactic.HelpCmd -/</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Lean.Expr</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">constName</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"n\">e.constName</span><span class=\"bp\">?.</span><span class=\"n\">getD</span> <span class=\"n\">Name.anonymous</span>\n\n<span class=\"sd\">/-- Return the function (name) and arguments of an application. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getAppFnArgs</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">withApp</span> <span class=\"n\">e</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">e.constName</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Lean.Expr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"n\">Command</span>\n\n<span class=\"sd\">/-- Gets the initial string token in a parser description. For example, for a declaration like</span>\n<span class=\"sd\">`syntax \"bla\" \"baz\" term : tactic`, it returns `some \"bla\"`. Returns `none` for syntax declarations</span>\n<span class=\"sd\">that don't start with a string constant. -/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">getHeadTk</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">e.getAppFnArgs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ParserDescr.node</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ParserDescr.unary</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"s2\">\"withPosition\"</span><span class=\"o\">)),</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ParserDescr.unary</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"s2\">\"atomic\"</span><span class=\"o\">)),</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ParserDescr.binary</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"s2\">\"andthen\"</span><span class=\"o\">)),</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ParserDescr.nonReservedSymbol</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"n\">tk</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">tk</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">ParserDescr.symbol</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"n\">tk</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">tk</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Parser.withAntiquot</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Parser.leadingNode</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">HAndThen.hAndThen</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">getHeadTk</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Parser.nonReservedSymbol</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"n\">tk</span><span class=\"o\">),</span> <span class=\"n\">_</span><span class=\"o\">])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">tk</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">``</span><span class=\"n\">Parser.symbol</span><span class=\"o\">,</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"n\">tk</span><span class=\"o\">)])</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">some</span> <span class=\"n\">tk</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTacticDocstring</span> <span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">name.toString</span> <span class=\"o\">(</span><span class=\"n\">escape</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">decls</span> <span class=\"o\">:</span> <span class=\"n\">Lean.RBMap</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">SyntaxNodeKind</span><span class=\"o\">)</span> <span class=\"n\">compare</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">catName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span>\n  <span class=\"k\">let</span> <span class=\"n\">catStx</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"n\">catName</span> <span class=\"c1\">-- TODO</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">cat</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">Parser.parserExtension.getState</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">categories.find</span><span class=\"bp\">?</span> <span class=\"n\">catName</span>\n    <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">catStx</span> <span class=\"s2\">\"{catStx} is not a syntax category\"</span>\n  <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Term.addCategoryInfo</span> <span class=\"n\">catStx</span> <span class=\"n\">catName</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">cat.kinds</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">used</span> <span class=\"o\">:=</span> <span class=\"n\">false</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">tk</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"n\">getHeadTk</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">value</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">tk</span> <span class=\"o\">:=</span> <span class=\"n\">tk.trim</span>\n      <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"bp\">≠</span> <span class=\"n\">tk</span> <span class=\"k\">then</span> <span class=\"c1\">-- was `!name.isPrefixOf tk`</span>\n        <span class=\"n\">continue</span>\n      <span class=\"n\">used</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n      <span class=\"n\">decls</span> <span class=\"o\">:=</span> <span class=\"n\">decls.insert</span> <span class=\"n\">tk</span> <span class=\"o\">((</span><span class=\"n\">decls.findD</span> <span class=\"n\">tk</span> <span class=\"bp\">#</span><span class=\"o\">[])</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"n\">for</span> <span class=\"o\">(</span><span class=\"n\">_name</span><span class=\"o\">,</span> <span class=\"n\">ks</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">decls</span> <span class=\"k\">do</span>\n    <span class=\"n\">for</span> <span class=\"n\">k</span> <span class=\"k\">in</span> <span class=\"n\">ks</span> <span class=\"k\">do</span>\n      <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">doc</span> <span class=\"bp\">←</span> <span class=\"n\">findDocString</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">k</span> <span class=\"k\">then</span>\n        <span class=\"n\">return</span> <span class=\"n\">doc</span>\n\n  <span class=\"n\">logWarning</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Could not find a docstring for this tactic, consider adding one \"</span> <span class=\"bp\">++</span>\n    <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"using `TacticDoc {name} </span><span class=\"se\">\\\"</span><span class=\"s2\">some doc</span><span class=\"se\">\\\"</span><span class=\"s2\">`\"</span>\n  <span class=\"n\">return</span> <span class=\"s2\">\"\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">getTacticDocstring</span> <span class=\"bp\">`</span><span class=\"n\">simp</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>\n<p>I'm not sure if this might fail in some exotic cases, but hopefully it works for most common tactics.</p>",
        "id": 360767796,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1684929429
    }
]