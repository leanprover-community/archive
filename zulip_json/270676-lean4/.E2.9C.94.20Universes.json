[
    {
        "content": "<p>Can I  use a type with two different universes in the same declaration?<br>\ne.g. if I have <code>def foo {m : Type u -&gt; Type v}</code> can I use <code>m</code> with two different universes in the same formula?</p>",
        "id": 224370058,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611858138
    },
    {
        "content": "<p>If they're different <code>m</code>'s, then yes. You  can even be explicit with universes if needed.  Here's setting <code>u=0</code> and <code>v=1</code>: <code>foo.{0, 1}</code>.  This notation works with universe variables, too.</p>",
        "id": 224371502,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611858748
    },
    {
        "content": "<p><em>In the definition of <code>foo</code></em> you cannot use <code>m</code> with a different universe level: you only have one <code>m</code> that has type <code>Type u -&gt; Type v</code>, and <code>u</code> and <code>v</code> are fixed in the definition of <code>foo</code>. <br>\n<em>After you have declared <code>foo</code></em> you can use it with <code>u</code> and <code>v</code> instantiated however you want.</p>",
        "id": 224372213,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611859040
    },
    {
        "content": "<p>Is there any way to make a tuple of items in two different universes? e.g. could I have <code>def foo {m : Type u -&gt; Type v} {a : Type u} ... : Option (m a, a)</code> because I'm trying to do something like this and getting some type errors</p>",
        "id": 224372930,
        "sender_full_name": "Calvin Lee",
        "timestamp": 1611859349
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 224373309,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1611859548
    },
    {
        "content": "<p>I think you want <code>Option (m a × a)</code></p>",
        "id": 224373324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611859556
    },
    {
        "content": "<p>and this should work even if <code>m a</code> and <code>a</code> are in different universes</p>",
        "id": 224373405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611859574
    },
    {
        "content": "<p>If you have a pair, you can just take a product.<br>\nIf you need a sequence with <code>n</code> elements, this gets inconvenient, but it is possible with <code>Ulift</code>.</p>",
        "id": 224373499,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1611859615
    },
    {
        "content": "<p>Why does </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Monad</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>fail with the error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">CoeSort</span> <span class=\"o\">((</span><span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.3</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.3</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.2</span><span class=\"o\">))</span> <span class=\"bp\">?</span><span class=\"n\">m.7</span>\n</code></pre></div>\n<p>while:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>succeeds? I don't have a mental model of why declaring a universe helps the Lean kernel solve the universe constraint. I suspect the above isn't doing what I think it's doing :)</p>",
        "id": 256041755,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633346377
    },
    {
        "content": "<p>The above makes no sense. What I really wanted (and does work) is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ParametrizedOverMonad</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Monad</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">ParametrizedOverMonad</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 256043513,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1633347369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> has marked this topic as resolved.</p>",
        "id": 256043517,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633347371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130575\">Siddharth Bhat</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Universes/near/256041755\">said</a>:</p>\n<blockquote>\n<p>I suspect the above isn't doing what I think it's doing :)</p>\n</blockquote>\n<p>Very true!</p>\n<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>actually is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ParametrizeOverMonad</span>  <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">:</span> <span class=\"n\">Monad</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span><span class=\"o\">:</span> <span class=\"n\">ParametrizeOverMonad</span> <span class=\"n\">M</span>\n</code></pre></div>\n<p>the <code>u</code> in <code>Monad u</code> is actually be auto-bound as a type not as the universe you declared.</p>",
        "id": 256096322,
        "sender_full_name": "Mac",
        "timestamp": 1633367783
    }
]