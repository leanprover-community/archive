[
    {
        "content": "<p>I'm glad to tell you this news.<br>\nI've ported <code>cc</code> tactic in Mathlib and awaiting review. (<a href=\"https://github.com/leanprover-community/mathlib4/pull/5938\">#5938</a>)<br>\nI post this thread in not mathlib but lean4 stream because this is the core function of Lean3.<br>\nI hope this tactic helps your formal proof.</p>",
        "id": 380145996,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1690757691
    },
    {
        "content": "<p>Wow, impressive. :-) I wasn't expecting that.</p>\n<p>Can I ask about the test suite: does this have everything that was in the Lean 3 tests (if any such even existed??)</p>",
        "id": 380147347,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690758414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Yes, I ported all tests of <code>cc</code>, it's the large tests.</p>",
        "id": 380150304,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1690760158
    },
    {
        "content": "<p>By the way, who can review this PR?</p>",
        "id": 380521007,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1690848435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> are some of the maintainers that can review meta PRs.</p>",
        "id": 380551098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690861785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span><br>\nI requested you review. This is a large and complicated tactic so you can take all the time you want.<br>\nThank you for review.</p>",
        "id": 381651645,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1691115425
    },
    {
        "content": "<p>Okay! I will hopefully be able to let you know next week if/when I can actually review it! :-)</p>",
        "id": 381651795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691115492
    },
    {
        "content": "<p>This is an impressive amount of work! To make reviewing easier, could I ask for some \"big picture\" documentation? A sketch of the algorithm, what features it supports/doesn't support, what the key functions are?</p>",
        "id": 383768592,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1691705081
    },
    {
        "content": "<p><del>This algorithm is too complex to describe in the header. I've added the reference to the paper about the algorithm in header.</del></p>",
        "id": 384594045,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1691965839
    },
    {
        "content": "<p>Oh, I found the good summary of this tactic from tactic documents in Lean3! I've replaced the header with this.</p>",
        "id": 384599563,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1691968507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Any news?</p>",
        "id": 387532741,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1693144765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Any news?</p>",
        "id": 388436712,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1693532695
    },
    {
        "content": "<p>I'm sorry, I don't think I'm going to be reviewing cc for mathlib soon.</p>",
        "id": 388438389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693533712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara Kō</span>, Scott is very busy with important infrastructure work. In particular he tries to ensure that Lean core, the Std lib and Mathlib can grow together harmoniously.</p>",
        "id": 388439703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693534518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> OK! I'm sorry to rush you!</p>",
        "id": 388439836,
        "sender_full_name": "Pol'tta / Miyahara Kō",
        "timestamp": 1693534604
    },
    {
        "content": "<p>You don't have to be sorry, I'm only explaining why Scott is not available. I know the review process can be very frustrating, especially when you have very technical metaprogramming PRs.</p>",
        "id": 388439903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693534658
    },
    {
        "content": "<p>Scott is also facing this from the other side with his rewrite search PR.</p>",
        "id": 388439939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1693534682
    },
    {
        "content": "<p>I might take a stab at it, but I'm starting to realize that I am rather oversubscribed, so no promises</p>",
        "id": 388440024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693534724
    },
    {
        "content": "<p>this is maybe a chaos-gremlin suggestion, but thoughts on just merging it and battle-testing it in mathlib? <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> I think everyone prefers a useful but maybe buggy tactic to no tactic at all</p>",
        "id": 388457182,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693546735
    },
    {
        "content": "<p>if we just want a code style review, I'd be happy to do that</p>",
        "id": 388457226,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1693546790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span>, if you could take a start that would be great.</p>",
        "id": 388457519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1693547038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/cc.20tactic.20comes.20to.20Lean4/near/388457182\">said</a>:</p>\n<blockquote>\n<p>I think everyone prefers a useful but maybe buggy tactic to no tactic at all</p>\n</blockquote>\n<p>Yes an no. The nightmare scenario is: user A submits a proof using <code>buggy_tactic</code> and everything is fine, because we're in a happy spot where the bug isn't triggered. Then user B refactors a file somewhere in the hierarchy, and now the proof using <code>buggy_tactic</code> is broken, because a bug got triggered, despite the fact that it still <em>should</em> work.<br>\nNow user B suddenly has to fix this proof even when the maths in that file is not their expertise, and fixing the tactic isn't their expertise either.</p>",
        "id": 388458358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693547642
    },
    {
        "content": "<p>So I only want buggy tactics that are buggy in a reliable way.</p>",
        "id": 388458409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1693547659
    },
    {
        "content": "<p>Does this situation indicate a problem with the system? With maths PRs there are usually one or two people who can review something, but here we have a potentially useful tactic but the obvious candidate reviewers are clearly tied up with other things right now. </p>\n<p>By the way <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / Miyahara Kō</span> thank you very much for porting this tactic! It's one of those tactics which I only use rarely but when I do use it I'm always very grateful that it's there :-)</p>",
        "id": 388461485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1693549539
    },
    {
        "content": "<p>This is a very complex tactic, one of the most complex tactics to be written in mathlib4 to date. It definitely needs a review, if only so that someone other than the author can be in a position to fix problems in it later</p>",
        "id": 388512355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693571083
    },
    {
        "content": "<p>Otherwise it will suffer the fate of many other tactics in mathlib like <code>omega</code>, <code>finish</code>, and <code>eblast</code> that are effectively dead because no one can maintain them</p>",
        "id": 388512555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693571155
    },
    {
        "content": "<p>I think e.g. <code>omega</code> might become obsolete with a good <code>aesop</code> configuration</p>",
        "id": 395709646,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1696861111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/cc.20tactic.20comes.20to.20Lean4/near/388512555\">said</a>:</p>\n<blockquote>\n<p>Otherwise it will suffer the fate of many other tactics in mathlib like <code>omega</code>, <code>finish</code>, and <code>eblast</code> that are effectively dead because no one can maintain them</p>\n</blockquote>\n<p>I... I can't help but giggle at the relationship between the names of those tactics and their status <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 395711327,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1696861642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/270676-lean4/topic/cc.20tactic.20comes.20to.20Lean4/near/395709646\">said</a>:</p>\n<blockquote>\n<p>I think e.g. <code>omega</code> might become obsolete with a good <code>aesop</code> configuration</p>\n</blockquote>\n<p>You might be thinking of a different <code>omega</code>? <code>omega</code> is not going to be replaced by <code>aesop</code>. A Lean 4 implementation is in the works. (Noting that the mathlib3 implementation was actually far from complete!)</p>",
        "id": 395719449,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1696864066
    }
]