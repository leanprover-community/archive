[
    {
        "content": "<p>Hi, all!<br>\nSo I've been working towards my Master's thesis, which involves preforming power-based side-channel analysis on the C-code that is generated from Lean4. I've been able to play around with the C-code and get it to work in other files fine using the leanc compiler just fine; however, the platform I will be using for the side-channel analysis (the <a href=\"https://chipwhisperer.readthedocs.io/en/latest/\">ChipWhisperer</a>) utilizes the arm-none-eabi-gcc compiler.<br>\nI've noticed that the object files generated from leanc and the object files that are generated using arm-none-eabi-gcc are incompatible, and I was wondering if anyone has any experience with trying to use other compilers for the generated C-code from Lean4? Or perhaps, has anyone else done any side-channel analysis of Lean4? If there is any additional information that I need to provide to help, let me know, Thanks!</p>",
        "id": 381615318,
        "sender_full_name": "Stone Olguin",
        "timestamp": 1691099071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306964\">@Stone Olguin</span> Lean uses a custom built clang compiler to build Lean on supported platforms. Thus, getting Lean to work on other platforms / compilers can take significant effort. Namely, I suspect you would need a custom build of Lean for <code>arm-none-eabi-gcc</code> and that such a build would be non-trivial to get functioning. <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  or <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> could likely provide great detail on whether this is feasible and how to accomplish it given their greater familiarity with Lean's compiler configuration.</p>",
        "id": 381622697,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691101712
    },
    {
        "content": "<p>First things first <code>leanc</code> is a <code>clang</code> wrapper so that is already a significant difference to your setup. Furthermore the Lean run time does very much rely on being in a UNIX or Windows like environment right now, for example if you print the linker flags of <code>leanc</code> with  <code>leanc --print-ldflags</code> you'll see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">-</span><span class=\"n\">I</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly/include -fstack-clash-protection -fPIC -fvisibility=hidden -L /home/nix/.elan/toolchains/leanprover--lean4---nightly/lib/lean -Wl,--start-group -lleancpp -lLean -Wl,--end-group -Wl,--start-group -lInit -lleanrt -Wl,--end-group -Wl,-Bstatic -lc++ -lc++abi -Wl,-Bdynamic -Wl,--as-needed -lgmp -Wl,--no-as-needed -lm -ldl -pthread</span>\n</code></pre></div>\n<p>It relies on   things like  pthread which are definitely not  part of a bare metal environment that you usually get when you use arm-non-eabi so I am rather certain there is a lot of linker hell ahead of you.</p>\n<p>If you actually want to go through with this you probably want to start by getting builds of our runtime  compiling (and more interestingly linking) with arm-non-eabi-gcc before you even think about writing a proper lean program that does anything. Once you venture into trying to do things like  IO etc. you will  also  very likely be bitten by the fact that Lean very much  expects  an OS  present  for things like printing text etc. and this dependency is also not trivial to remove.</p>\n<p>And as a more  general comment: I do think the idea is very  cool but  as a time boxed and graded project I would be <em>very</em>  scared of going through with this as it is rather uncertain how much work you have to put in to even get  any basic Lean program going on your target.</p>",
        "id": 381623679,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691102210
    },
    {
        "content": "<p>I'm actually doing a project that runs a programming language on a platform that is not  used  to  it as well for my BsC (namely a rust driver on  L4.Fiaso) and I've already had at least 4 roadblocks where if I didn't have access to the people at my workplace that know L4 by heart I would've been screwed completely with my project so  eh...for your own good you better want to try this only if you have people that know this type of stuff or you know it yourself.  (maybe I am just  too traumatized tho who knows :D)</p>",
        "id": 381624326,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691102607
    },
    {
        "content": "<p>Alright, seems like it will be quite a task, maybe I'll find a different avenue! Thank you both for responding! <br>\nI'd still like to pursue this in some way, so I might work on it a bit more, since I still have a bit of time to work on this project. Would cross-compiling to arm from clang be viable with lean4's C-code? I know that <a href=\"https://clang.llvm.org/docs/CrossCompilation.html#general-cross-compilation-options-in-clang\">clang can do cross-compilation</a>. I utilize object files in the ChipWhisperer, so possibly cross-compiling to arm when calling leanc to generate the intermediate representation .o files could be used. <br>\nI also have a smaller project I made previously that allows me to run the Chipwhisperer using Embedded Rust, so that's another option I guess, but I'll update if that's the path I go!</p>",
        "id": 381628415,
        "sender_full_name": "Stone Olguin",
        "timestamp": 1691104795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Do you think <span class=\"user-mention\" data-user-id=\"306964\">@Stone Olguin</span> could build yours and <span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span>'s LLVM backend and use that to cross-compile the Lean program for the platform? Conceivably, as long as core Lean runtime can be be built for the platform and the program being written does not use any OS dependent primitives, then that could work?</p>",
        "id": 381637571,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691109489
    },
    {
        "content": "<p>Ysa that could work but the lean runtime will definitely need modifications. For example lean does always start up the task scheduler when it comes up which in turn expects a pthread (or windows equiv) to be around. But I think if you can get past the runtime hurdle it js doable.</p>",
        "id": 381687195,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1691129606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306964\">Stone Olguin</span> <a href=\"#narrow/stream/270676-lean4/topic/Side-Channel.20Analysis.20of.20Lean4/near/381628415\">said</a>:</p>\n<blockquote>\n<p>Would cross-compiling to arm from clang be viable with lean4's C-code?</p>\n</blockquote>\n<p>Not only viable, all our ARM releases are already produced that way.</p>",
        "id": 381718014,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691135660
    }
]