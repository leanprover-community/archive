[
    {
        "content": "<p>have we discussed adding a way to monad-bind as a postfix operation? something like <code>(x : m a).←</code> would work for me. can this be implemented as a macro on expressions, or would it require modifying core do notation?</p>",
        "id": 369914362,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687844674
    },
    {
        "content": "<p>macros are expanded before <code>expandLiftMethod</code>, so it should be possible to implement outside core</p>",
        "id": 369914838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687844799
    },
    {
        "content": "<p>oh huge, let me see if the braindead macro implementation works</p>",
        "id": 369915152,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687844898
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">term</span> <span class=\"s2\">\".←\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">t.</span><span class=\"bp\">←</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.getStdin.</span><span class=\"bp\">←.</span><span class=\"n\">flush</span> <span class=\"c1\">-- invalid use of `(&lt;- ...)`, must be nested inside a 'do' expression</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 369916163,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687845180
    },
    {
        "content": "<p>from <code>trace.Elab.do</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">with_annotate_term</span><span class=\"o\">(</span><span class=\"n\">Term.paren</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">(</span><span class=\"n\">Term.proj</span> <span class=\"o\">(</span><span class=\"n\">Term.paren</span> <span class=\"s2\">\"(\"</span> <span class=\"o\">(</span><span class=\"bp\">«</span><span class=\"n\">term_.</span><span class=\"bp\">←»</span> <span class=\"bp\">`</span><span class=\"n\">IO.getStdin</span> <span class=\"s2\">\".←\"</span><span class=\"o\">)</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span> <span class=\"s2\">\".\"</span> <span class=\"bp\">`</span><span class=\"n\">flush</span><span class=\"o\">)</span> <span class=\"s2\">\")\"</span><span class=\"o\">)</span>\n      <span class=\"n\">Bind.bind</span><span class=\"bp\">✝</span> <span class=\"o\">(((</span><span class=\"n\">IO.getStdin.</span><span class=\"bp\">←</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">flush</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m</span><span class=\"bp\">✝</span> <span class=\"n\">PUnit</span><span class=\"bp\">✝</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">PUnit</span><span class=\"bp\">✝</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">with_annotate_term</span><span class=\"o\">(</span><span class=\"n\">Term.doReturn</span> <span class=\"s2\">\"return\"</span> <span class=\"o\">[(</span><span class=\"n\">num</span> <span class=\"s2\">\"0\"</span><span class=\"o\">)])</span> <span class=\"n\">Pure.pure</span><span class=\"bp\">✝</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm not entirely sure how to parse this trace</p>",
        "id": 369916951,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687845389
    },
    {
        "content": "<p>you can ignore the <code>with_annotate_term(...)</code> parts, that is just for error messages</p>",
        "id": 369917081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845429
    },
    {
        "content": "<p>it appears to have macro expanded the <code>do</code> block without expanding the <code>IO.getStdin.←</code> part first</p>",
        "id": 369917201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845469
    },
    {
        "content": "<p>the <code>invalid use of `(&lt;- ...)`, must be nested inside a 'do' expression</code> error is what happens when you try to directly elaborate the expression <code>&lt;- e</code></p>",
        "id": 369917348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845498
    },
    {
        "content": "<p>it is supposed to be eliminated as part of the macro expansion for the <code>do</code>, which finds and replaces them</p>",
        "id": 369917468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845537
    },
    {
        "content": "<p>Right. so it seems like the do elaborator doesn't fully elaborate the inner expressions before eliminating arrows.</p>",
        "id": 369917607,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687845580
    },
    {
        "content": "<p>I see this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandMacro</span><span class=\"bp\">?</span> <span class=\"n\">doElem</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">doSeqToCode</span> <span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"o\">::</span><span class=\"n\">doElems</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandDoIf</span><span class=\"bp\">?</span> <span class=\"n\">doElem</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">doSeqToCode</span> <span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"o\">::</span><span class=\"n\">doElems</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">liftedDoElems</span><span class=\"o\">,</span> <span class=\"n\">doElem</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">expandLiftMethod</span> <span class=\"n\">doElem</span>\n        <span class=\"bp\">...</span>\n</code></pre></div>\n<p>but now I'm thinking that the first <code>expandMacro?</code> line is only expanding <code>doElem</code>s that are directly macro terms</p>",
        "id": 369917764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845621
    },
    {
        "content": "<p>I assume in the above example the (macroful) term is wrapped in a <code>seq</code> doElem or whatever?</p>",
        "id": 369918005,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687845688
    },
    {
        "content": "<p>a <code>doExpr</code> (which embeds <code>term</code> in <code>doElem</code>)</p>",
        "id": 369918144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845721
    },
    {
        "content": "<p>the case that would be handled here is something like <code>repeat</code> or <code>assert</code>, which are actually <code>doElem</code>s that expand to other <code>doElem</code>s</p>",
        "id": 369918336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845757
    },
    {
        "content": "<p>expansion of <code>&lt;-</code> terms is done by <code>expandLiftMethod</code> which is not at all user-extensible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">liftMethodDelimiter</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">SyntaxNodeKind</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.do</span> <span class=\"bp\">||</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.doSeqIndent</span> <span class=\"bp\">||</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.doSeqBracketed</span> <span class=\"bp\">||</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.termReturn</span> <span class=\"bp\">||</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.termUnless</span> <span class=\"bp\">||</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.termTry</span> <span class=\"bp\">||</span>\n  <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.termFor</span>\n\n<span class=\"kn\">private</span> <span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">hasLiftMethod</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">args</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">liftMethodDelimiter</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">false</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.liftMethod</span> <span class=\"k\">then</span> <span class=\"n\">true</span>\n    <span class=\"k\">else</span> <span class=\"n\">args.any</span> <span class=\"n\">hasLiftMethod</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 369918631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845835
    },
    {
        "content": "<p>can we elaborate the term while it's still contained in a <code>doExpr</code>and before <code>expandLiftMethod</code>?</p>",
        "id": 369919173,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687845955
    },
    {
        "content": "<p>oh, but we'd have to explicitly elaborate in every term place in the do notation</p>",
        "id": 369919379,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687845988
    },
    {
        "content": "<p>no, macro expansion happens from the outside in</p>",
        "id": 369919403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687845994
    },
    {
        "content": "<p>you could do it if you replaced <code>do</code> (which you can do in this case without actually rewriting that whole file)</p>",
        "id": 369919475,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687846015
    },
    {
        "content": "<p>(implementation aside, I think <code>e.←</code> looks really silly so I hope you keep it to your personal projects <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> .)</p>",
        "id": 369919548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687846034
    },
    {
        "content": "<p>hey, the syntax is up for debate, I just frequently want a way to do it in a pipe chain, and I'd be surprised if you don't feel the same urge to not have to make intermediary let binds just to monad bind :)</p>",
        "id": 369919915,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687846128
    },
    {
        "content": "<p>and directly calling <code>bind</code> isn't ergonomic there either</p>",
        "id": 369920081,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687846173
    },
    {
        "content": "<p><code>x |&gt; bind (.|&gt;.foo)</code> looks so much worse than <code>x.←.foo</code></p>",
        "id": 369920257,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687846211
    },
    {
        "content": "<p>This is a much spicier proposal: <code>.!</code>. Then we can have e.g. <code>(e : Except String Int).! + 5</code> in monadic contexts (a treat for the rustaceans)</p>",
        "id": 369921128,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687846428
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">postfixLift</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"n\">noWs</span> <span class=\"s2\">\".\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"←\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">pipeLift</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">min</span> <span class=\"s2\">\"|&gt;.\"</span> <span class=\"n\">noWs</span> <span class=\"s2\">\"←\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">syntax</span><span class=\"o\">:</span><span class=\"n\">arg</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"k\">do</span><span class=\"bp\">'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">priority</span> <span class=\"o\">:=</span> <span class=\"n\">high</span><span class=\"o\">)</span> <span class=\"n\">ppAllowUngrouped</span> <span class=\"s2\">\"do \"</span> <span class=\"n\">doSeq</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"kd\">@[macro do']</span> <span class=\"kd\">def</span> <span class=\"n\">expandDo'</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">stx.setKind</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Term.do</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">replaceM</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">if</span> <span class=\"n\">stx.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">postfixLift</span> <span class=\"bp\">||</span> <span class=\"n\">stx.getKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">pipeLift</span> <span class=\"k\">then</span>\n      <span class=\"n\">Macro.expandMacro</span><span class=\"bp\">?</span> <span class=\"n\">stx</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">pure</span> <span class=\"n\">none</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">_</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"n\">IO.getStdin.</span><span class=\"bp\">←.</span><span class=\"n\">flush</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 369922164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687846663
    },
    {
        "content": "<p>super cool. i'm assuming you still don't want it in Std?</p>",
        "id": 369926397,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687847701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/postfix.20monad.20arrow/near/369920257\">said</a>:</p>\n<blockquote>\n<p><code>x |&gt; bind (.|&gt;.foo)</code> looks so much worse than <code>x.←.foo</code></p>\n</blockquote>\n<p>There's also <code>(←x) foo</code>, right? A bit more parenthesis than the postfix version, but still better than explicit <code>bind</code> or <code>let</code>-bindings.</p>",
        "id": 369963859,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1687855261
    },
    {
        "content": "<p>Yeah, the parentheses are what I don't like</p>",
        "id": 370121848,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687881886
    },
    {
        "content": "<p>let me find the snippets from my code</p>",
        "id": 370121881,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687881890
    },
    {
        "content": "<p>I just grepped and found this in Aesop, it's this sort of thing where I'd rather have postfix ←:<br>\n<code>(← (← getRootGoal).get).traceTree .tree</code></p>",
        "id": 370123793,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882176
    },
    {
        "content": "<p><code>let _ ← (← bdRef.get).1.markAllSols</code> is also a fun one <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 370124247,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882263
    },
    {
        "content": "<p>(from LeanSAT)</p>",
        "id": 370124272,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882267
    },
    {
        "content": "<p>the arrows just get in the way for me when I'm reading this kind of code, since i have to jump back and forth from left to right instead of reading left to right continuously</p>",
        "id": 370124467,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882305
    },
    {
        "content": "<p>it's obviously different when you're using normal (i.e. backwards to any good category theorist) function application and are reading right to left anyways</p>",
        "id": 370125061,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687882428
    }
]