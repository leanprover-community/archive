[
    {
        "content": "<p>It was suggested to me that I should ask here about advice on improving performance of processing data structures. I wrote up <a href=\"https://proofassistants.stackexchange.com/questions/2101/speeding-up-large-data-structures-in-lean\">this ProofAssistants SE</a> question with benchmarks in Lean 4, Agda, Coq and OCaml. My use case is formalization of thousands of graph invariants, and I'd like to bring down the processing time. Suggestions on what to do are appreciated, as it is not unlikely I am just misusing Lean 4 in some way. You guys can't have Coq and Agda beat you in terms of speed, can you?  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 350274388,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681634749
    },
    {
        "content": "<p>One thing to watch out for is overuse of <code>.ident</code> syntax in deeply nested structures. This causes a backtracking exception to be thrown when there are many layers it can be quite expensive. The simple fix is to <code>open</code> the namespace of the inductive type</p>",
        "id": 350276420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681635628
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/oz7qORlu1oAwdFeboHgDU7gK/image.png\">image.png</a> This does seem to be the case, but not the reason for the majority of the work that is being done here, sadly our tracers don't seem to capture the rest of the effort yet :(</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oz7qORlu1oAwdFeboHgDU7gK/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/oz7qORlu1oAwdFeboHgDU7gK/image.png\"></a></div>",
        "id": 350277402,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636055
    },
    {
        "content": "<p>I tried both <code>.ident</code> and <code>open Foo</code>, as well as <code>Foo.ident</code>, and that's not the main culprit. It would be interesting to know where the time is spent.</p>",
        "id": 350277771,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636203
    },
    {
        "content": "<p>If I open the namespaces the dependent example goes from 15 seconds down to 9</p>",
        "id": 350277856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636245
    },
    {
        "content": "<p>One thing that surprises me a bit is that tactics are a bit faster than direct proof terms. (Note that almost no normalization is involved in these examples, so I don't think we can blame it on the kernel conversion engine.)</p>",
        "id": 350277895,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636267
    },
    {
        "content": "<p>I would imagine you can do a lot better with a dedicated tactic</p>",
        "id": 350277913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636273
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">652</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"n\">took</span> <span class=\"mi\">614</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">test2</span> <span class=\"n\">took</span> <span class=\"mi\">757</span><span class=\"n\">ms</span>\n<span class=\"n\">linting</span> <span class=\"n\">took</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">33</span><span class=\"n\">s</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">887</span><span class=\"n\">ms</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0843</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">774</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">645</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">917</span><span class=\"n\">ms</span>\n        <span class=\"kn\">import</span> <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n        <span class=\"n\">initialization</span> <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">185</span><span class=\"n\">ms</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">33</span><span class=\"n\">s</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">653</span><span class=\"n\">ms</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">579</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">258</span><span class=\"n\">ms</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">578</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>we spend a <em>lot</em> of time on linting (takes 10 secs over all for me)</p>",
        "id": 350277915,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636274
    },
    {
        "content": "<p>lolwut</p>",
        "id": 350277946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636288
    },
    {
        "content": "<p>There surely was an option to disable linting right?</p>",
        "id": 350277956,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636291
    },
    {
        "content": "<p>I think so, lemme go look</p>",
        "id": 350277991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636306
    },
    {
        "content": "<p>It might be a good idea to make Lean a little less friendly.</p>",
        "id": 350278080,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636328
    },
    {
        "content": "<p>using tactics that deserialize more directly is <em>the</em> way to import big data like this. Using the human-friendly terms incurs a lot of unnecessary elaboration overhead and additional syntax to churn through</p>",
        "id": 350278229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636402
    },
    {
        "content": "<p>And besides the linting there is again the issue that we consume another second and a half just compiling right now which is probably something coq and agda don't do unasked either so that + linting would already shave off ~7s from the 10</p>",
        "id": 350278243,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636411
    },
    {
        "content": "<p>that you can definitely turn off though</p>",
        "id": 350278269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636427
    },
    {
        "content": "<p>No you cannot currently turn the new compiler off, there has been a PR by myself for this for a couple of weeks though :P</p>",
        "id": 350278366,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636455
    },
    {
        "content": "<p>The old one probably can be turned off</p>",
        "id": 350278382,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636465
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2075\">https://github.com/leanprover/lean4/pull/2075</a></p>",
        "id": 350278419,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636482
    },
    {
        "content": "<p>On the PA SE site it was suggested that I could use a custom format and <code>@[init foo]</code> magic, but I can't find any documentation about that. So, opening namespaces, turning off linting, and using a custom format would probably have quite an effect.</p>",
        "id": 350278439,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636493
    },
    {
        "content": "<p>yes you can do that</p>",
        "id": 350278467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636511
    },
    {
        "content": "<p>But how? All documentation seems to be introduction on monads etc. Is there a secret site (other than this Zulip) where I can get technical info?</p>",
        "id": 350278527,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636548
    },
    {
        "content": "<p>For instance, suppose I wanted to know how to turn of linting. Where do I look?</p>",
        "id": 350278639,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636589
    },
    {
        "content": "<p>you can do this to create a definition from an IO action:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"s2\">\"Test.lean\"</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 350278670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636608
    },
    {
        "content": "<p>You enter <code>set_option linter</code> and look at the auto completion, I figured out the lists of enabled linters like that, you can add this to the top of the file, gets me from 10.something to 4.something seconds on my machine. I did not bother figuring out which of these is the most time consuming one for now though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">linter.deprecated</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.suspiciousUnexpanderPatterns</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables.funArgs</span> <span class=\"n\">false</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.unusedVariables.patternVars</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 350278760,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636656
    },
    {
        "content": "<p>It looks like you can't turn off the linters, although you might be able to just set the <code>lintersRef</code></p>",
        "id": 350278761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636656
    },
    {
        "content": "<p>each linter also has its own controlling option so you can turn them all off individually like Henrik shows</p>",
        "id": 350278889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636688
    },
    {
        "content": "<p>This is all super helpful. I'll ask again, is there <em>any</em> web page that would let me know that there are things such as <code>initialize</code> and <code>set_option</code>? I always feel guilty for wasting the experts' time by asking here on Zulip and obtaining information by trickle-down method.</p>",
        "id": 350278986,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636724
    },
    {
        "content": "<p>I think you could've randomly picked up on the existence of set_option in one of the publicly available books? But there is no documentation that talks precisely about this, even less so for initialize.</p>",
        "id": 350279146,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636790
    },
    {
        "content": "<p>There seems to be no documentation for non-beginners, if you ask me.</p>",
        "id": 350279229,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636813
    },
    {
        "content": "<p>Yes /o\\</p>",
        "id": 350279248,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636824
    },
    {
        "content": "<p>There is the metaprogramming book, that is the closest thing to this domain</p>",
        "id": 350279410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636909
    },
    {
        "content": "<p><a href=\"https://github.com/arthurpaulino/lean4-metaprogramming-book\">https://github.com/arthurpaulino/lean4-metaprogramming-book</a></p>",
        "id": 350279460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636919
    },
    {
        "content": "<p>Which will be faster, <code>open Tree</code> and <code>node</code>, or direct <code>Tree.node</code>?</p>",
        "id": 350279508,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350278986\">said</a>:</p>\n<blockquote>\n<p>This is all super helpful. I'll ask again, is there <em>any</em> web page that would let me know that there are things such as <code>initialize</code> and <code>set_option</code>? I always feel guilty for wasting the experts' time by asking here on Zulip and obtaining information by trickle-down method.</p>\n</blockquote>\n<p>To add to this. If you want a fair benchmark you should probably add <code>noncomputable</code> to the Lean options because otherwise Lean will already generated code to construct your expressions for you which takes another 1.4s on my machine. While you probably want to do computation Coq does for sure not do this and I would guess Agda does not either so just for comparing \"how long does it take to load this\" that would be a fair addition too.</p>",
        "id": 350279522,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636929
    },
    {
        "content": "<p>I doubt it will make much of a difference</p>",
        "id": 350279595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681636961
    },
    {
        "content": "<p>(Note that <code>noncomputable</code> will make it so that you cannot use it in..well compiled code anymore so you dont <em>actually</em> want noncomputable when you write your software, but you want it for the comparision)</p>",
        "id": 350279608,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350279595\">said</a>:</p>\n<blockquote>\n<p>I doubt it will make much of a difference</p>\n</blockquote>\n<p>Time goes from 4.a bit to 3.a bit so yes does very much make a difference</p>",
        "id": 350279629,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681636981
    },
    {
        "content": "<p>In the future I'll be doing lots of folds on these trees, will <code>noncomputable</code> prevent that?</p>",
        "id": 350279653,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681636992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350277915\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">parsing</span> <span class=\"n\">took</span> <span class=\"mi\">652</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"n\">took</span> <span class=\"mi\">614</span><span class=\"n\">ms</span>\n<span class=\"n\">compilation</span> <span class=\"n\">of</span> <span class=\"n\">test2</span> <span class=\"n\">took</span> <span class=\"mi\">757</span><span class=\"n\">ms</span>\n<span class=\"n\">linting</span> <span class=\"n\">took</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">33</span><span class=\"n\">s</span>\n<span class=\"n\">elaboration</span> <span class=\"n\">took</span> <span class=\"mi\">887</span><span class=\"n\">ms</span>\n<span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0843</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">774</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">645</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">917</span><span class=\"n\">ms</span>\n        <span class=\"kn\">import</span> <span class=\"mi\">21</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"n\">ms</span>\n        <span class=\"n\">initialization</span> <span class=\"mi\">29</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">185</span><span class=\"n\">ms</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">33</span><span class=\"n\">s</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">653</span><span class=\"n\">ms</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">579</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">258</span><span class=\"n\">ms</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">578</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>we spend a <em>lot</em> of time on linting (takes 10 secs over all for me)</p>\n</blockquote>\n<p>As suggested by this profile</p>",
        "id": 350279672,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681637004
    },
    {
        "content": "<p>BTW I think this is a slightly better way to implement \"construct an expression from a file\" rather than using <code>initialize</code>, which is more intended for things to be used by the programming language rather than subject to proof</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"tree_from_file\"</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">file.getString</span>\n  <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkStrLit</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">tree_from_file</span> <span class=\"s2\">\"Test.lean\"</span>\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 350279678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350279629\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350279595\">said</a>:</p>\n<blockquote>\n<p>I doubt it will make much of a difference</p>\n</blockquote>\n<p>Time goes from 4.a bit to 3.a bit so yes does very much make a difference</p>\n</blockquote>\n<p>Sorry, that was directed at <span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span> 's Q about <code>Tree.node</code> vs <code>open Tree</code> and <code>node</code></p>",
        "id": 350279792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350279653\">said</a>:</p>\n<blockquote>\n<p>In the future I'll be doing lots of folds on these trees, will <code>noncomputable</code> prevent that?</p>\n</blockquote>\n<p>It will prevent you from producing compiled code that involves this definition. So you don't <em>actually</em> want it in your production code. But neither Coq nor Agda produce the compiled code unless you ask them to so it's not really a fair benchmark if you implicitly ask Lean to do it I guess :P But I'm just being a little anal about fairness at this point.</p>",
        "id": 350279820,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681637085
    },
    {
        "content": "<p>I don't really care about the comparison. Or to put it differently, the only comparison I care is to OCaml, as that's a lower bound on what to expect.</p>",
        "id": 350279914,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637136
    },
    {
        "content": "<p>There is almost no diffrence between <code>open X</code> and <code>ident</code> vs. <code>X.ident</code>.</p>",
        "id": 350280136,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637216
    },
    {
        "content": "<p>I'm still a little foggy on what exactly you intend to \"get\" as a result of importing this thing into lean. Do you want an expression that can be pushed around by tactics? Is it something you want to call code on as a data structure? What are the dependent types for?</p>",
        "id": 350280145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637222
    },
    {
        "content": "<p>the approach to take differs somewhat depending on whether you want a value of type <code>Tree</code> or an <code>Expr</code> representing a <code>Tree</code></p>",
        "id": 350280197,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637254
    },
    {
        "content": "<p>Suppose you have a graph on, say, 150 vertices with a 1000 edges. How would you check in Lean that it is connected? (And not by hand.)</p>",
        "id": 350280220,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637274
    },
    {
        "content": "<p>check meaning construct a proof?</p>",
        "id": 350280293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637286
    },
    {
        "content": "<p>or just run some code</p>",
        "id": 350280331,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637303
    },
    {
        "content": "<p>Write a program that prints \"connected\" or \"not connected\" or write a theorem that proves this about this specific graph?</p>",
        "id": 350280344,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681637306
    },
    {
        "content": "<p>The concrete task is to import a database of structures, such as <a href=\"https://houseofgraphs.org\">https://houseofgraphs.org</a> into Lean in way that Lean actually believes all those graph invariants in the database are correct.</p>",
        "id": 350280376,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637326
    },
    {
        "content": "<p>A theorem that the graph is connected, of course, otherwise I'd be having this discussion on the javascript Zulip.</p>",
        "id": 350280452,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637362
    },
    {
        "content": "<p>Okay so then you do want the expr, so something like <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350279678\">my earlier post</a> is appropriate</p>",
        "id": 350280559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637407
    },
    {
        "content": "<p>you would just insert a JSON deserialization step in the tactic and print the result as an expr</p>",
        "id": 350280638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637453
    },
    {
        "content": "<p>ideally the bottleneck should be the kernel itself</p>",
        "id": 350280657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637464
    },
    {
        "content": "<p>not all this linting and elaboration crap</p>",
        "id": 350280673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637475
    },
    {
        "content": "<p>tactics get to skip the whole process and call <code>addDecl</code> directly</p>",
        "id": 350280719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637500
    },
    {
        "content": "<p>If tactics and all that is skipped, what should be in the actual file? I suppose I should look at <code>mkStrLit</code>?</p>",
        "id": 350281010,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637627
    },
    {
        "content": "<p><code>mkStrLit</code> constructs a primitive <code>Expr</code> denoting a string literal, it's basically O(1)</p>",
        "id": 350281093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637652
    },
    {
        "content": "<p>So what should be in the file? Some sort of tactic-less Lean?</p>",
        "id": 350281212,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637706
    },
    {
        "content": "<p>The file would contain the definition of the tactic and possibly a call to it (although there are reasons you might want to put the call in a separate file)</p>",
        "id": 350281247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637719
    },
    {
        "content": "<p>Oh wait, you're just showing me how to get a string from a while.</p>",
        "id": 350281296,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637742
    },
    {
        "content": "<p>I am definitely not in the mood to implement a JSON parser. Is there one already?</p>",
        "id": 350281431,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637780
    },
    {
        "content": "<p>it's a bit more than that: <code>tree_from_file</code> is a macro that elaborates to an expression denoting the string</p>",
        "id": 350281441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637784
    },
    {
        "content": "<p>yes</p>",
        "id": 350281473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637795
    },
    {
        "content": "<p>what is the input format you got this tree in?</p>",
        "id": 350281523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637818
    },
    {
        "content": "<p>Anything I want.</p>",
        "id": 350281548,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637826
    },
    {
        "content": "<p>I assume you didn't write that tree by hand</p>",
        "id": 350281578,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637836
    },
    {
        "content": "<p>well let's say json then</p>",
        "id": 350281619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637847
    },
    {
        "content": "<p>(The original format is so horrible you don't want to know, so we have a Python layer to make it sane.)</p>",
        "id": 350281628,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637849
    },
    {
        "content": "<p>I can adapt the format to make Lean as happy as possible. I suppose there's some advantage to using JSON, it'll make for a more useful data format.</p>",
        "id": 350281847,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637919
    },
    {
        "content": "<p>I mean if you are okay with writing a parser it can be whatever you want, but JSON is available off the shelf which is an advantage</p>",
        "id": 350281967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681637960
    },
    {
        "content": "<p>(BTW, turning off linting and not using <code>.ident</code> yields a 60% performance improvement.)</p>",
        "id": 350282028,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681637996
    },
    {
        "content": "<p>And the off-the-shelf JSON is hiding where?</p>",
        "id": 350282138,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681638029
    },
    {
        "content": "<p>Actually, there is still going to be some question on how to use tactics etc., as converting a JSON to a dependent data structure will require some effort (generating proofs that <code>5 : Fin 7</code> and such).</p>",
        "id": 350282395,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681638128
    },
    {
        "content": "<p>here's a basic demo, still futzing with the format</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">JTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">JTree</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">JTree</span> <span class=\"bp\">→</span> <span class=\"n\">JTree</span> <span class=\"bp\">→</span> <span class=\"n\">JTree</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">FromJson</span><span class=\"o\">,</span> <span class=\"n\">ToJson</span><span class=\"o\">,</span> <span class=\"n\">Repr</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">toJson</span> <span class=\"o\">(</span><span class=\"n\">JTree.leaf</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"k\">#eval</span> <span class=\"n\">repr</span> <span class=\"o\">(</span><span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"s2\">\"empty\"</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">_</span> <span class=\"n\">JTree</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 350282505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638181
    },
    {
        "content": "<p>DuckDuckGo sucks, but Google seems to be better on these searches. It tells me about <code>Lean.Data.Json</code> whereas DucDuckGo wants me to read how to use Json in web pages.</p>",
        "id": 350282579,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681638210
    },
    {
        "content": "<p>google searching is really terrible for lean</p>",
        "id": 350282608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638229
    },
    {
        "content": "<p>I don't even try</p>",
        "id": 350282614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638234
    },
    {
        "content": "<p>There's a <code>deriving FromJson</code>?</p>",
        "id": 350283191,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681638480
    },
    {
        "content": "<p>For constructing exprs, I'll make a demo but I will mention up front that you probably want to use the <a href=\"https://github.com/gebner/quote4\"><code>Qq</code></a> library (a dependency of mathlib so you probably already have it)</p>",
        "id": 350283290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638499
    },
    {
        "content": "<p>that file checks for me, does it not for you?</p>",
        "id": 350283427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638559
    },
    {
        "content": "<p>or are you just incredulous that the basic install of lean has a json library</p>",
        "id": 350283468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350282138\">said</a>:</p>\n<blockquote>\n<p>And the off-the-shelf JSON is hiding where?</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lean4/tree/master/src/Lean/Data/Json\">Lean.Data.Json</a>. In particular, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Json.parse#doc\">docs4#Lean.Json.parse</a>.</p>",
        "id": 350284023,
        "sender_full_name": "Mac Malone",
        "timestamp": 1681638790
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350278986\">said</a>:</p>\n<blockquote>\n<p>This is all super helpful. I'll ask again, is there <em>any</em> web page that would let me know that there are things such as <code>initialize</code> and <code>set_option</code>? I always feel guilty for wasting the experts' time by asking here on Zulip and obtaining information by trickle-down method.</p>\n</blockquote>\n<p>Just to remark that people are under no obligation to answer other people's questions -- we're not getting paid here -- so I don't think you need to feel guilty, people are choosing to help. You're asking good questions! The documentation will come. Systems like Coq have been around for 30 years, they will likely have better documentation.</p>",
        "id": 350284244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1681638883
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350283468\">said</a>:</p>\n<blockquote>\n<p>or are you just incredulous that the basic install of lean has a json library</p>\n</blockquote>\n<p>I am incredulous that there is <code>deriving FromJson</code> that works on arbitrary dependent types :-)</p>",
        "id": 350284388,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681638958
    },
    {
        "content": "<p>Ah, in case it wasn't clear the type that is being deserialized isn't the type we will be working with in proofs</p>",
        "id": 350284498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681638993
    },
    {
        "content": "<p>the <code>JTree</code> type there is really the in-memory representation, before getting \"printed\" as an <code>Expr</code> (including all the dependent types and kernel proof obligations)</p>",
        "id": 350284631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681639050
    },
    {
        "content": "<p>you can also just use the <code>Json</code> type directly for this purpose</p>",
        "id": 350284665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681639067
    },
    {
        "content": "<p><code>Qq</code> is some sort of syntax reflection library?</p>",
        "id": 350284888,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681639154
    },
    {
        "content": "<p>yes, it is useful for writing tactics that construct complicated exprs</p>",
        "id": 350284931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681639174
    },
    {
        "content": "<p>especially if you want to skip the elaboration step</p>",
        "id": 350284951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681639190
    },
    {
        "content": "<p>My family wants me to vacuum the flat, I'll check back here later. Thanks a bunch y'all for all this help. Hopefully our group will be able to deliver something useful in return.</p>",
        "id": 350285141,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681639264
    },
    {
        "content": "<p>Okay here's an end to end example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Edge</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n  <span class=\"n\">edge</span> <span class=\"o\">::</span>\n  <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span>\n  <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">fst</span>\n<span class=\"kn\">open</span> <span class=\"n\">Edge</span>\n\n<span class=\"c1\">-- smart constructor for edges</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"E[\"</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\",\"</span> <span class=\"n\">j</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\"]\"</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span>\n <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"bp\">$</span><span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">Fin.mk</span> <span class=\"bp\">$</span><span class=\"n\">j</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">trivial</span><span class=\"o\">)))</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">leaf</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">node</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Tree</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Edge.mk'</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Nat.blt</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">Nat.blt</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"o\">⟨⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp_all</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp_all</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)⟩⟩</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mkEdge</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">j.getArr</span><span class=\"bp\">?</span>\n  <span class=\"k\">have</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">arr</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat.blt</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">Nat.blt</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Eq.refl</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Edge.mk'</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">$</span><span class=\"n\">b</span> <span class=\"bp\">$</span><span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">mkTree</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">j.getArr</span><span class=\"bp\">?</span>\n  <span class=\"k\">match</span> <span class=\"n\">arr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Tree.node</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEdge</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkTree</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkTree</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Tree.empty</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Tree.leaf</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkEdge</span> <span class=\"n\">n</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"tree_from_file\"</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- let file ← IO.FS.readFile file.getString</span>\n  <span class=\"k\">let</span> <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"n\">file.getString</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">tree</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">Json.parse</span> <span class=\"n\">file</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"s2\">\"bad format\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">n.getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"n\">mkTree</span> <span class=\"n\">n</span> <span class=\"n\">tree</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">result</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failed to parse\"</span>\n  <span class=\"n\">pure</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Tree</span>\n<span class=\"kd\">def</span> <span class=\"n\">test1</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">node</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"mi\">5</span><span class=\"o\">,</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">empty</span> <span class=\"o\">(</span><span class=\"n\">leaf</span> <span class=\"n\">E</span><span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">])</span>\n<span class=\"k\">#print</span> <span class=\"n\">test1</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test2</span> <span class=\"o\">:</span> <span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"mi\">100</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">tree_from_file</span> <span class=\"s2\">\"[100, [[5, 0], [], [3, 1]]]\"</span>\n<span class=\"k\">#print</span> <span class=\"n\">test2</span>\n</code></pre></div>",
        "id": 350288258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681640520
    },
    {
        "content": "<p>For testing purposes it is reading the string directly from the input, put back the commented out line to read from a file instead</p>",
        "id": 350288394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681640562
    },
    {
        "content": "<p>Hm, it's still not as fast as I would like on the full example with this approach, because it's still going through the elaborator. If we call <code>addDecl</code> directly it is finally fast: <code>lake env time lean Test.lean</code> says it takes 0.37 seconds, although it is 0.32 seconds if you skip the <code>tree_from_file</code> line so the actual import is only about 0.05 seconds.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"tree_from_file\"</span> <span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" from \"</span> <span class=\"n\">file</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">file</span> <span class=\"bp\">←</span> <span class=\"n\">IO.FS.readFile</span> <span class=\"n\">file.getString</span>\n  <span class=\"k\">let</span> <span class=\"n\">result</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"o\">(</span><span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">arr</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">tree</span><span class=\"o\">]</span> <span class=\"bp\">←</span> <span class=\"n\">Json.parse</span> <span class=\"n\">file</span> <span class=\"bp\">|</span> <span class=\"n\">throw</span> <span class=\"s2\">\"bad format\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">n.getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">mkTree</span> <span class=\"n\">n</span> <span class=\"n\">tree</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">result</span> <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"failed to parse\"</span>\n  <span class=\"n\">Elab.Command.liftCoreM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addDecl</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">defnDecl</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">name.getId</span>\n    <span class=\"n\">levelParams</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n    <span class=\"n\">type</span> <span class=\"o\">:=</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">Tree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"n\">value</span>\n    <span class=\"n\">hints</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">regular</span> <span class=\"mi\">0</span>\n    <span class=\"n\">safety</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">safe</span>\n  <span class=\"o\">}</span>\n\n<span class=\"n\">tree_from_file</span> <span class=\"n\">test2</span> <span class=\"k\">from</span> <span class=\"s2\">\"test.json\"</span>\n<span class=\"k\">#check</span> <span class=\"n\">test2</span> <span class=\"c1\">-- test2 : Tree (Edge 666)</span>\n</code></pre></div>\n<p>Here is the <a href=\"/user_uploads/3121/6u_b1ggOuD85aVH90xnVQs-7/test.json\">test.json</a> file used in the test, a translated version of <span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span> 's example.</p>",
        "id": 350291147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681641721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> thank you so much!</p>",
        "id": 350295264,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681643648
    },
    {
        "content": "<p>Also FYI the linter at fault for the overhead here is the unused variables linter. Would there be interest in a PR that also adds time profiling on a per linter basis?</p>",
        "id": 350295371,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681643708
    },
    {
        "content": "<p>IIRC it was written on the back of an LSP analysis pass that wasn't originally designed for the purpose, so it calls into some quite big module and I wouldn't be surprised if it could be improved by a more direct implementation</p>",
        "id": 350295589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681643804
    },
    {
        "content": "<p>Based on hotspot there are a lot of calls to getExprAssignmentDomains happening which consume large chunks of the time in unusedVariables. So either improving that one or refactoring the thing in general to avoid doing that all the time should probably help</p>",
        "id": 350296109,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681644062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350295371\">said</a>:</p>\n<blockquote>\n<p>Also FYI the linter at fault for the overhead here is the unused variables linter. Would there be interest in a PR that also adds time profiling on a per linter basis?</p>\n</blockquote>\n<p>Re this, right now it is not possible from the Linter framework POV to figure out the name of the linter it is about to run since lintersRef is just a list of function pointers. Would it be reasonable to change that to a thing like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Linter</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span>\n  <span class=\"n\">lint</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>?</p>",
        "id": 350299303,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681645628
    },
    {
        "content": "<p>I had to do a similar thing to the list of parsers, because they are not stored in a way which makes data retrieval easy</p>",
        "id": 350299747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645845
    },
    {
        "content": "<p>if you use <code>decl_name%</code> in appropriate places you can make it fairly easy to populate the name field without changing the usage code</p>",
        "id": 350299811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681645893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> if you post your code as an answer to <a href=\"https://proofassistants.stackexchange.com/questions/2101/speeding-up-large-data-structures-in-lean\">https://proofassistants.stackexchange.com/questions/2101/speeding-up-large-data-structures-in-lean</a> I will accept it, and it will serve as a document  that can actually be found by Google.</p>",
        "id": 350309250,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681648871
    },
    {
        "content": "<p>Oops, you already did that.</p>",
        "id": 350309328,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1681648917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Improving.20performance.20when.20loading.20a.20large-ish.20data.20structur/near/350299811\">said</a>:</p>\n<blockquote>\n<p>if you use <code>decl_name%</code> in appropriate places you can make it fairly easy to populate the name field without changing the usage code</p>\n</blockquote>\n<p>So I ended up wtih</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Linter</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">decl_name</span><span class=\"bp\">%</span>\n  <span class=\"n\">run</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"bp\">→</span> <span class=\"n\">CommandElabM</span> <span class=\"n\">Unit</span>\n</code></pre></div>\n<p>but that is of course still not enough to just have a <code>Syntax -&gt; CommandElabM Unit</code> magically turn into a <code>Linter</code> structure, did you have something else in mind?</p>",
        "id": 350352806,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681670386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> has marked this topic as resolved.</p>",
        "id": 350365471,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681679497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> quack :P</p>",
        "id": 350580733,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681753277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> You can make <code>addLinter</code> have an extra optional arg proved <code>:= by exact decl_name%</code> and construct the structure inside <code>addLinter</code></p>",
        "id": 350628514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681771661
    },
    {
        "content": "<p>Right but that gives me ugly stuff like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Linter.MissingDocs.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Lean.Linter.MissingDocs._hyg.1163</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean.Linter.initFn._</span><span class=\"bp\">@.</span><span class=\"n\">Lean.Linter.UnusedVariables._hyg.5176</span>\n</code></pre></div>\n<p>because they are initialized with builtin initializer.</p>",
        "id": 350632781,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681773273
    },
    {
        "content": "<p>I'm not really following the context here, but I know that if you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Name.eraseMacroScopes#doc\">docs4#Lean.Name.eraseMacroScopes</a> on these names you'd get <code>Lean.Linter.MissingDocs.initFn</code> and <code>Lean.Linter.initFn</code>. Are there declarations in Lean that actually have these names? or is this some consequence of whenever <code>decl_name%</code> is being elaborated?</p>",
        "id": 350633601,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1681773677
    },
    {
        "content": "<p>The declaration actually exists</p>",
        "id": 350634403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681774121
    },
    {
        "content": "<p>it's marked as <code>@[init]</code></p>",
        "id": 350634426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681774137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Well the intention was just to get unique names (which can also be used to locate the operative definition, e.g. for go-to-definition). If you actually want sensible and descriptive names I don't think you can get around supplying them manually.</p>",
        "id": 350634720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681774295
    },
    {
        "content": "<p>Maybe a better pattern would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myLinter</span> <span class=\"o\">:</span> <span class=\"n\">Linter</span> <span class=\"n\">where</span>\n  <span class=\"c1\">-- name inferred to `myLinter`</span>\n  <span class=\"n\">run</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"bp\">...</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">addLinter</span> <span class=\"n\">myLinter</span> <span class=\"c1\">-- takes a `Linter` directly, so no name inference</span>\n</code></pre></div>",
        "id": 350635136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681774548
    },
    {
        "content": "<p>or just make a <code>@[linter]</code> attribute which does the <code>addLinter</code> part</p>",
        "id": 350635202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681774579
    },
    {
        "content": "<p>Regarding the attribute the doc string explicitly says it does not want it to be an attribute:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Linters should be loadable as plugins, so store in a global IO ref instead of an attribute managed by the</span>\n<span class=\"cm\">    environment (which only contains `import`ed objects). -/</span>\n</code></pre></div>\n<p>So I'll go with the first variant.</p>",
        "id": 350703941,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681805989
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2196\">https://github.com/leanprover/lean4/pull/2196</a></p>",
        "id": 350710236,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681807620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Improving.20performance.20when.20loading.20a.20large-ish.20data.20str.2E.2E.2E/near/350703941\">said</a>:</p>\n<blockquote>\n<p>Regarding the attribute the doc string explicitly says it does not want it to be an attribute:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Linters should be loadable as plugins, so store in a global IO ref instead of an attribute managed by the</span>\n<span class=\"cm\">    environment (which only contains `import`ed objects). -/</span>\n</code></pre></div>\n<p>So I'll go with the first variant.</p>\n</blockquote>\n<p>I don't think those are related things. An attribute can be used to do the equivalent of <code>initialize addLinter myLinter</code>, meaning that the data storage is still in an IO ref. The attribute itself is only used as a piece of syntax to invoke it</p>",
        "id": 350712682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681808265
    },
    {
        "content": "<p>like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Lean.Command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">initialize</span> <span class=\"n\">registerBuiltinAttribute</span> <span class=\"o\">{</span>\n  <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">linter</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"adds a linter\"</span>\n  <span class=\"n\">applicationTime</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">afterCompilation</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">_</span> <span class=\"n\">kind</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">unless</span> <span class=\"n\">kind</span> <span class=\"bp\">==</span> <span class=\"bp\">.</span><span class=\"n\">global</span> <span class=\"k\">do</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"cannot add local or scoped linter\"</span>\n    <span class=\"n\">liftCommandElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Command.elabCommand</span> <span class=\"bp\">&lt;|</span>\n      <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">initialize</span> <span class=\"n\">addLinter</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkCIdent</span> <span class=\"n\">declName</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 350714825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681808732
    },
    {
        "content": "<p>well, inside lean itself you would need <code>builtin_</code> on the <code>initialize</code>s (and the attribute name)</p>",
        "id": 350715412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1681808859
    },
    {
        "content": "<p>Hi, sorry to bother you again, but how do I load <code>\"test.json\"</code> from a folder relative to the file which defined the <code>tree_from_file</code>? Or alternatively, if I have some data files that Lean should have access to, what's the standard way of finding them?</p>",
        "id": 352525035,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682426286
    },
    {
        "content": "<p>The default path used is relative to the \"current directory\", meaning wherever you ran the executable, or in the case of a lake build, the project root</p>",
        "id": 352525729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426461
    },
    {
        "content": "<p>It can be tricky to locate your own files robustly under all the possible configurations. One thing you can do is to use lean's search path mechanism to locate a <code>.lean</code> file (for stuff in the source directory) or an <code>.olean</code> file (for stuff in the build directory) and then create a path relative to that</p>",
        "id": 352526402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426605
    },
    {
        "content": "<p>You know my scenario: I need to put a bunch of JSON files somewhere so that when later on someone runs <code>tree_from_file \"blah\"</code> the relevant file will load. What would be a reasonable solution?</p>",
        "id": 352526728,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682426668
    },
    {
        "content": "<p>Here's what Mathlib uses to locate the <code>Mathlib/</code> directory:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Returns the root directory which contains the package root file, e.g. `Mathlib.lean`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getPackageDir</span> <span class=\"o\">(</span><span class=\"n\">pkg</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">System.FilePath</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">sp</span> <span class=\"bp\">←</span> <span class=\"n\">initSrcSearchPath</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">findSysroot</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">root</span><span class=\"bp\">?</span> <span class=\"bp\">←</span> <span class=\"n\">sp.findM</span><span class=\"bp\">?</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"n\">pkg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">isDir</span> <span class=\"bp\">&lt;||&gt;</span> <span class=\"o\">((</span><span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"n\">pkg</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">withExtension</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">pathExists</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"n\">root</span><span class=\"bp\">?</span> <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"n\">root</span>\n  <span class=\"n\">throw</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">IO.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Could not find {pkg} directory. {</span>\n<span class=\"s2\">    \"\"}Make sure the LEAN_SRC_PATH environment variable is set correctly.\"</span>\n\n<span class=\"sd\">/-- Returns the mathlib root directory. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">getMathlibDir</span> <span class=\"o\">:=</span> <span class=\"n\">getPackageDir</span> <span class=\"s2\">\"Mathlib\"</span>\n</code></pre></div>",
        "id": 352526861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426690
    },
    {
        "content": "<p>(<code>\"blah\"</code> will <em>not</em> be the full path.)</p>",
        "id": 352526870,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682426692
    },
    {
        "content": "<p>So assuming that I also define a \"package\", that should do, correct? (And would be a reasonable solution.)</p>",
        "id": 352527193,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682426759
    },
    {
        "content": "<p>So for example you could put a <code>trees/</code> directory next to <code>MyPkg.lean</code> and then use this code to locate <code>MyPkg</code> and then append <code>trees/blah</code></p>",
        "id": 352527262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426766
    },
    {
        "content": "<p>The \"package\" in this case would be your lake project</p>",
        "id": 352527367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426796
    },
    {
        "content": "<p>What this solves in particular is being able to locate your package's files regardless of whether you are inside your own project or in a downstream project that depends on your project</p>",
        "id": 352527569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426851
    },
    {
        "content": "<p>(if you depend on mathlib you can also just use that function directly, it is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.getPackageDir#doc\">docs4#Mathlib.getPackageDir</a>)</p>",
        "id": 352527799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682426898
    },
    {
        "content": "<p>How would I write an <code>elab</code> that returns an object parsed from json, rather than uses <code>Lean.addDecl</code>? Do I just construct the object using <code>Qq</code> and then unquote it somehow?</p>",
        "id": 352535550,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682428699
    },
    {
        "content": "<p>It might not even be an <code>elab</code> but rather a tactic. Hmm.</p>",
        "id": 352537928,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682429265
    },
    {
        "content": "<p>A tactic is a special case of <code>elab</code>. What does \"returns an object\" mean here, an actual runtime value? Can you give a suggestive example for how/where you want to use this?</p>",
        "id": 352539253,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682429616
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- assume we know how to convert a JSON file to Q(Graph)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myDefinition</span> <span class=\"o\">:</span> <span class=\"n\">myType</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"bp\">...</span>\n  <span class=\"k\">let</span> <span class=\"n\">myObject</span> <span class=\"o\">:=</span> <span class=\"n\">loadObject</span> <span class=\"s2\">\"graph666\"</span> <span class=\"c1\">-- this should fetch JSON file \"some-place/graph666.json\" and return a Graph</span>\n <span class=\"bp\">...</span>\n</code></pre></div>\n<p>That is, at some point in the development the user might say \"hey, I want to load my favorite graph from the library\" and run a convenient tactic that will let the user \"have\" their graph.</p>",
        "id": 352539823,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682429774
    },
    {
        "content": "<p>I just realized that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> already produced the relevant example in <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Improving.20performance.20when.20loading.20a.20large-ish.20data.20str.2E.2E.2E/near/350288258\">in this answer</a></p>",
        "id": 352541393,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430190
    },
    {
        "content": "<p>Ah yes, in this case you want a term elaborator instead of a command elaborator</p>",
        "id": 352541607,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1682430253
    },
    {
        "content": "<p>For performance reasons I think you would probably still want to use <code>addDecl</code> in that case; the <code>elab</code> would return a constant pointing to the newly created decl</p>",
        "id": 352541696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430276
    },
    {
        "content": "<p>What are these performance reasons?</p>",
        "id": 352542115,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430369
    },
    {
        "content": "<p>the same reasons we had to go through several iterations for the original Q</p>",
        "id": 352542200,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430389
    },
    {
        "content": "<p>I am all ears :-)</p>",
        "id": 352542362,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430423
    },
    {
        "content": "<p>As long as you produce a huge expr and hand it off to the elaborator, lots of other passes will see that big object, like linters and later type inference</p>",
        "id": 352542421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430440
    },
    {
        "content": "<p>and <code>addDecl</code> is the only way to circumvent that? Can't I pass something directly to kernel and have it \"return\" the verified thing?</p>",
        "id": 352542692,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430494
    },
    {
        "content": "<p>That's exactly what I'm suggesting :)</p>",
        "id": 352542729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430507
    },
    {
        "content": "<p>Wouldn't that mean that anything that's been loaded will never get garbage-collected?</p>",
        "id": 352542859,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430532
    },
    {
        "content": "<p>in DTT terms are never garbage collected</p>",
        "id": 352542947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430553
    },
    {
        "content": "<p>this isn't LCF</p>",
        "id": 352542955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430555
    },
    {
        "content": "<p>if you want it to go through the kernel then it will be sticking around</p>",
        "id": 352543060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430586
    },
    {
        "content": "<p>so the best you can do is try to ensure that it only does so once / in one place, which <code>addDecl</code> does</p>",
        "id": 352543196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430605
    },
    {
        "content": "<p>That seems a bit surprising, but ok.</p>",
        "id": 352543258,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430622
    },
    {
        "content": "<p>Conceivably you could get some kind of transitory thing using heavy defeq problems, but it doesn't sound advisable to me</p>",
        "id": 352543456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430667
    },
    {
        "content": "<p>I'm curious which system is informing your intuitions here</p>",
        "id": 352543628,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430716
    },
    {
        "content": "<p>Wait, but if <code>Q(...)</code> already does this, can't I just use whatever it does somehow? I am generating a <code>Q(...)</code> already.</p>",
        "id": 352543651,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430722
    },
    {
        "content": "<p><code>Q(...)</code> isn't verified, it's just a helper for avoiding issues when writing tactics that put exprs together</p>",
        "id": 352543924,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430778
    },
    {
        "content": "<p>I would expect that this gets garbage collected:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>def myDef: myType := do\n   ...\n   let _ := loadObject \"bigObject666\" -- never used and we're in the monad\n   ...\n</code></pre></div>",
        "id": 352543951,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430783
    },
    {
        "content": "<p>hm, this depends on what level you are talking about</p>",
        "id": 352544047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430814
    },
    {
        "content": "<p>as a program, yes if you run that then the object will be garbage collected</p>",
        "id": 352544144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430839
    },
    {
        "content": "<p>What level? Imagine it's exactly the example I showed.</p>",
        "id": 352544272,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682430862
    },
    {
        "content": "<p>as an expression, the definition will actually contain a subexpression with the resulting big object (unless the <code>let</code> elaborator is smart enough to remove the expr entirely from the term), such that if you subsequently <code>#print myDef</code> you will see the big object and hence clearly it is being stored in the environment</p>",
        "id": 352544663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682430933
    },
    {
        "content": "<p>another copy of the big object will also exist in the compiled code, after having been translated to IR or C code or what have you</p>",
        "id": 352545116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431020
    },
    {
        "content": "<p>unless it is optimized away (which in this case would be likely)</p>",
        "id": 352545203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431038
    },
    {
        "content": "<p>If <code>loadObject</code> is not a macro/elab but rather a function which reads the file at runtime, then the compiled code and the expression for <code>myDef</code> will both be small, since they only need to contain instructions about what file to open. But then the file needs to be available at runtime of course, and it will not be optimized away (it won't be possible to use <code>let _ := ...</code> for this because reading files is an IO action). But the object loaded can be garbage collected immediately thereafter.</p>",
        "id": 352545825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431175
    },
    {
        "content": "<p>Ok, I understand now. Thanks. BTW, is there a way to convert a string to an <code>ident</code>? (And I'd like to put the <code>ident</code> into a particular <code>namespace</code> when I use <code>addDecl</code>).</p>",
        "id": 352546578,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682431334
    },
    {
        "content": "<p><code>mkIdent</code></p>",
        "id": 352546702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431364
    },
    {
        "content": "<p>the input is actually a <code>Name</code>, not a string</p>",
        "id": 352546758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431377
    },
    {
        "content": "<p>because of namespaces and other things</p>",
        "id": 352546853,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431395
    },
    {
        "content": "<p>actually <code>mkCIdent</code> is a bit better than <code>mkIdent</code> if you want to ensure it resolves to a defined constant</p>",
        "id": 352547062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431439
    },
    {
        "content": "<p>What's the <code>p</code> in Name.str p s`?</p>",
        "id": 352547299,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682431482
    },
    {
        "content": "<p>the parent namespace</p>",
        "id": 352547405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431504
    },
    {
        "content": "<p>Ah, there is documentation...</p>",
        "id": 352547479,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682431514
    },
    {
        "content": "<p>e.g. <code>Foo.Bar.baz</code> is <code>.str (.str (.str .anonymous \"Foo\") \"Bar\") \"baz\"</code></p>",
        "id": 352547591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431540
    },
    {
        "content": "<p>you can usually do something like <code> `MyNamespace ++ `foo</code> to make a name <code>MyNamespace.foo</code></p>",
        "id": 352548062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682431622
    },
    {
        "content": "<p>What's the most likely problem if <code>let graph := q(Graph.mk $n $edges)</code> is giving me <code>reduceEval: failed to evaluate argument  __do_lift✝¹</code>? I think I am in <code>Except String Q(Graph)</code>.</p>",
        "id": 352553696,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682432895
    },
    {
        "content": "<p><code>Qq</code> has some issues around trying to reduce arguments that don't fit into its restricted sublanguage, the easiest fix is to use <code>have</code> instead of <code>let</code> when this happens</p>",
        "id": 352554156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682432994
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">import</span> <span class=\"n\">Graph</span>\n<span class=\"kn\">import</span> <span class=\"n\">TreeSet</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HoG</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"c1\">-- this works</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">treeOfJson</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"bp\">←</span> <span class=\"n\">j.getArr</span><span class=\"bp\">?</span>\n  <span class=\"k\">match</span> <span class=\"n\">arr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">STree.node</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">edgeOfJson</span> <span class=\"n\">n</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">treeOfJson</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">treeOfJson</span> <span class=\"n\">n</span> <span class=\"n\">r</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">STree.empty</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">STree.leaf</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">edgeOfJson</span> <span class=\"n\">n</span> <span class=\"n\">v</span><span class=\"o\">))</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"s2\">\"invalid tree format\"</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">HoG.Graph.mk</span>\n<span class=\"c1\">-- HoG.Graph.mk (vertexSize : ℕ) (edgeTree : STree (Edge vertexSize)) : Graph</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">graphOfJson</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">njson</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"vertexSize\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">njson.getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">treeOfJson</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">j.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"edges\"</span><span class=\"o\">))</span>\n    <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">HoG.Graph.mk</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">edges</span><span class=\"o\">)</span> <span class=\"c1\">-- here it dies with: reduceEval: failed to evaluate argument __do_lift✝¹</span>\n</code></pre></div>",
        "id": 352554843,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682433113
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (include imports)</p>",
        "id": 352555095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682433163
    },
    {
        "content": "<p>any chance you can stub the imports for project-specific things?</p>",
        "id": 352555554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682433253
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">HoG</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span>\n\n<span class=\"n\">opaque</span> <span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Edge</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n<span class=\"n\">opaque</span> <span class=\"n\">Graph</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">Graph.mk</span> <span class=\"o\">(</span><span class=\"n\">vertexSize</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">edgeTree</span> <span class=\"o\">:</span> <span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"n\">vertexSize</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span>\n\n<span class=\"c1\">-- this works</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">treeOfJson</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">HoG.Graph.mk</span>\n<span class=\"c1\">-- HoG.Graph.mk (vertexSize : ℕ) (edgeTree : STree (Edge vertexSize)) : Graph</span>\n\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">graphOfJson</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">njson</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"vertexSize\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">njson.getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">treeOfJson</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">j.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"edges\"</span><span class=\"o\">))</span>\n    <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">HoG.Graph.mk</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">edges</span><span class=\"o\">)</span> <span class=\"c1\">-- here it dies with: reduceEval: failed to evaluate argument __do_lift✝¹</span>\n</code></pre></div>",
        "id": 352556424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682433444
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">graphOfJson</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Json</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">njson</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"vertexSize\"</span>\n    <span class=\"k\">have</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.mkRawNatLit</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">njson.getNat</span><span class=\"bp\">?</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">(</span><span class=\"n\">STree</span> <span class=\"o\">(</span><span class=\"n\">Edge</span> <span class=\"bp\">$</span><span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">treeOfJson</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">j.getObjVal</span><span class=\"bp\">?</span> <span class=\"s2\">\"edges\"</span><span class=\"o\">))</span>\n    <span class=\"n\">pure</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">HoG.Graph.mk</span> <span class=\"bp\">$</span><span class=\"n\">n</span> <span class=\"bp\">$</span><span class=\"n\">edges</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 352557027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682433585
    },
    {
        "content": "<p>Sorry I had to step away. So it's the <code>have</code> in <code>have n</code> that's the culprit? How could one guess?</p>",
        "id": 352567660,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682435849
    },
    {
        "content": "<p>because if you try changing each of the <code>let</code>s to <code>have</code>s that one works :)</p>",
        "id": 352576794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682437683
    },
    {
        "content": "<p>in practice I see this happen a lot for <code>let x := mkRawNatLit ...</code></p>",
        "id": 352576901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682437709
    },
    {
        "content": "<p>the other two let statements are actually monadic binds so they don't have a <code>have</code> version in the first place</p>",
        "id": 352577045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682437748
    },
    {
        "content": "<p>the difference is that when you use <code>have</code> the value of the binding is opaque in the body</p>",
        "id": 352577152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682437773
    },
    {
        "content": "<p>this is always the case for monadic bind because it's just syntax for a <code>bind ma (fun a =&gt; ...)</code> term, and so <code>a</code> is just a variable in the context without any \"definition\" available to confuse Qq</p>",
        "id": 352577442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682437837
    },
    {
        "content": "<p>Sorry to bother you again. I'd like to have on-demand loading, so I think I am looking for functionality that allows me to check whether a given <code>name</code> has been registered with <code>addDecl</code> previously, and if so, fetch it. Rummaging through sources in the vicinity of <code>addDecl</code> has so far not born any results. A hint would be much appreciated.</p>",
        "id": 352739742,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682501473
    },
    {
        "content": "<p>I did not read up on the entire discussion again so I cannot tell you whether that is the functionality you want. But if you want to know whether a name is already defined you can use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment.contains#doc\">docs4#Lean.Environment.contains</a> which requires you to be in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.CoreM#doc\">docs4#Lean.CoreM</a> or a monad compatible with it such as MetaM, TacticM etc. you can then use <code>getEnv</code> to obtain the environment</p>",
        "id": 352741662,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682501960
    },
    {
        "content": "<p>That's helpful. I also figured out how to use <code>mkConst</code> to generate the desired identifier.</p>",
        "id": 352741896,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682502020
    },
    {
        "content": "<p>BTW, can I tell <code>addDecl</code> that the thing I am adding is supposed to be computable?</p>",
        "id": 352742013,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682502052
    },
    {
        "content": "<p><code>addAndCompile</code> instead of <code>addDecl</code>, or <code>addDecl</code> and then <code>compileDecl</code> (which does the same as the first option)</p>",
        "id": 352742559,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1682502165
    },
    {
        "content": "<p>How do I lift from <code>CoreM</code> to <code>IO</code>? (Found it, I think, <code>CoreM.toIO</code>).</p>",
        "id": 352756397,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1682505549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span> You should be careful with <code>CoreM.toIO</code> because that involves making up all the context that the CoreM needs to run, in particular the environment. You should try to pass it the right environment instead of using an empty one or else things could break when all the lookups fail</p>",
        "id": 353037887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1682563283
    }
]