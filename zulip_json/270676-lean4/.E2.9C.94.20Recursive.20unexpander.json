[
    {
        "content": "<p>I have a custom notation unexpander that is <em>almost</em> working, but the recursive case doesn't seem to be firing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finsupp.Defs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean.Parser.Term</span>\n\n<span class=\"kd\">@[term_parser]</span>\n<span class=\"kd\">def</span> <span class=\"bp\">«</span><span class=\"n\">fun₀</span><span class=\"bp\">»</span> <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span><span class=\"o\">:</span><span class=\"n\">maxPrec</span>\n  <span class=\"n\">ppAllowUngrouped</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">unicodeSymbol</span> <span class=\"s2\">\"λ₀\"</span> <span class=\"s2\">\"fun₀\"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">matchAlts</span>\n\n<span class=\"n\">macro_rules</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span> <span class=\"n\">fun₀</span> <span class=\"bp\">$</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n    <span class=\"n\">for</span> <span class=\"n\">xi</span> <span class=\"k\">in</span> <span class=\"n\">x</span> <span class=\"k\">do</span>\n      <span class=\"n\">for</span> <span class=\"n\">xii</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Elab.Term.expandMatchAlt</span> <span class=\"n\">xi</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">match</span> <span class=\"n\">xii</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">matchAltExpr</span><span class=\"bp\">|</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">Finsupp.update</span> <span class=\"bp\">$</span><span class=\"n\">stx</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span>\n    <span class=\"n\">pure</span> <span class=\"n\">stx</span>\n\n<span class=\"sd\">/-- Unexpander for the `fun₀ | i =&gt; x` notation. -/</span>\n<span class=\"kd\">@[app_unexpander Finsupp.update]</span>\n<span class=\"kd\">def</span> <span class=\"n\">updateUnexpander</span> <span class=\"o\">:</span> <span class=\"n\">Lean.PrettyPrinter.Unexpander</span>\n  <span class=\"c1\">-- this case doesn't seem to fire</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fun₀</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fun₀</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">val</span> <span class=\"bp\">$</span><span class=\"n\">xs</span><span class=\"o\">:</span><span class=\"n\">matchAlt</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">fun₀</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">pat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"o\">()</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"n\">fun₀</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span> <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>which gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Finsupp.update</span>\n  <span class=\"o\">(</span><span class=\"n\">Finsupp.update</span>\n    <span class=\"o\">(</span><span class=\"n\">fun₀</span>\n      <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"mi\">2</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"mi\">3</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→₀</span> <span class=\"n\">ℕ</span>\n</code></pre></div>\n<p>How can I work out why <code>| `($_ (fun₀ $xs:matchAlt*) $pat $val) =&gt; `(fun₀ | $pat =&gt; $val $xs:matchAlt*)</code> is not matching?</p>",
        "id": 381868926,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691158895
    },
    {
        "content": "<p>It's not very nice to debug but the issue likely is that the parenthesizer runs after the delaborator, so those parens will never match. You can do two nested matches instead.</p>",
        "id": 381875158,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691159939
    },
    {
        "content": "<p>Nice, that does the trick!</p>",
        "id": 381875825,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691160051
    },
    {
        "content": "<p>All working at <a href=\"https://github.com/leanprover-community/mathlib4/pull/6367\">#6367</a></p>",
        "id": 381884628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691161570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> has marked this topic as resolved.</p>",
        "id": 381884648,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691161572
    }
]