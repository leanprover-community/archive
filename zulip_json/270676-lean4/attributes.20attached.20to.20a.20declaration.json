[
    {
        "content": "<p>How can I see the attributes attached to a declaration? In Lean 3 I could see them with <code>#print</code>.</p>",
        "id": 313748620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670114027
    },
    {
        "content": "<p>I hadn't realised that this would be so complicated. What's happening in practice is that I'm trying to understand the behaviour of <code>to_additive</code> and tags, and the only tags I'm interested in inspecting on a declaration are <code>simp</code>, <code>norm_cast</code> and <code>coe</code>. I'm having to construct examples to check whether tags are there because I can't just look to see what's going on.</p>",
        "id": 313825296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1670168761
    },
    {
        "content": "<p>I know how to go the other way around in a particular case.</p>\n<p>Here is a command checking if an instance declaration is marked as <code>default_instance</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mycommand1</span><span class=\"o\">)</span> <span class=\"s2\">\"#is_default_instance\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kd\">@[command_elab mycommand1]</span>\n<span class=\"kd\">def</span> <span class=\"n\">isDefaultInstanceCommand</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"bp\">$</span><span class=\"n\">declId</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">declId.getId</span>\n\n  <span class=\"c1\">-- We can get list of all default instances with:</span>\n  <span class=\"k\">let</span> <span class=\"n\">di</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">defaultInstanceExtension.getState</span> <span class=\"n\">env</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">defaultInstances</span>\n\n  <span class=\"c1\">-- to check if `decl` is a default instance we simply do:</span>\n  <span class=\"k\">let</span> <span class=\"n\">is_default_instance</span> <span class=\"o\">:=</span> <span class=\"n\">di.any</span> <span class=\"bp\">λ</span> <span class=\"n\">className</span> <span class=\"n\">listOfInstancesAndPrio</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">listOfInstancesAndPrio.any</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">instName</span><span class=\"o\">,</span> <span class=\"n\">prio</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">instName</span> <span class=\"bp\">=</span> <span class=\"n\">decl</span>\n\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Declaration {decl} is default instance: {is_default_instance}\"</span>\n\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwUnsupportedSyntax</span>\n\n<span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"n\">instHAdd</span>  <span class=\"c1\">-- true</span>\n<span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"n\">HAdd</span>      <span class=\"c1\">-- false</span>\n<span class=\"bp\">#</span><span class=\"n\">is_default_instance</span> <span class=\"n\">instAddFloat</span> <span class=\"c1\">-- false</span>\n</code></pre></div>\n<p>However the approach is quite specialized for <code>default_instance</code> attribute, for another attribute it would look a bit different. It is not even clear that the corresponding <code>PersistentEnvExtension</code> has to hold the necessary information.</p>\n<p>The chapter on attributes in the meta programming book seems to be empty :( It would be great to have an explanation of <code>TagAttribute</code>, <code>ParametricAttribute</code>, <code>EnumAttributes</code> and what are environment extensions and how are attributes connected.</p>",
        "id": 313840764,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1670177185
    },
    {
        "content": "<p>I think this functionality (list all attributes for a given constant) is still missing. In Lean 3, the attribute architecture makes this easy to do; in Lean 4, it needs specific support which has not been written yet.</p>\n<p>If you're interested in a closed collection of attributes, you can write, for each of them, a function which checks whether the attribute was applied to the constant. The details vary depending on how the attribute stores its data, but it'll be broadly similar to Tomas' example. I would expect such functions to already exist for certain attributes.</p>",
        "id": 313935664,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670237533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/313840764\">said</a>:</p>\n<blockquote>\n<p>The chapter on attributes in the meta programming book seems to be empty :( It would be great to have an explanation of <code>TagAttribute</code>, <code>ParametricAttribute</code>, <code>EnumAttributes</code> and what are environment extensions and how are attributes connected.</p>\n</blockquote>\n<p>I'll put this on the todo list, but I'm quite busy right now. Maybe over Christmas.</p>",
        "id": 313935845,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670237594
    },
    {
        "content": "<p>Oh, I see there was already a long discussion about this in <a class=\"stream-topic\" data-stream-id=\"287929\" href=\"/#narrow/stream/287929-mathlib4/topic/to_additive.20and.20coe\">#mathlib4 &gt; to_additive and coe</a></p>",
        "id": 313937652,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670238147
    },
    {
        "content": "<p>I believe that even if you have a specific attribute, it is hard to check whether it is attached to a declaration. Some attributes don't record to which declarations they are attached. For example, this information is hard to get for <code>@[ext]</code>, unless you want to navigate the whole <code>DiscTree</code>.</p>",
        "id": 315236456,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1670780183
    },
    {
        "content": "<p>I have a std4 PR for folding <code>DiscrTree</code>s but yeah, O(n) membership query is not great. <code>SimpTheorems</code> uses a <code>DiscrTree</code> plus one or two <code>HashMap</code>s to support erasing and efficient membership queries and I use the same approach for Aesop. Maybe it would be worth packaging this up into a data structure.</p>",
        "id": 315326911,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670839181
    },
    {
        "content": "<p>I think a better approach for membership queries is to use the tag attribute's data structure, since that adds no startup cost</p>",
        "id": 315327919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1670839522
    },
    {
        "content": "<p>Oh interesting, I didn't know about this optimisation.</p>",
        "id": 315351966,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1670847103
    },
    {
        "content": "<p>Consider the following parametric attribute definition (adapted from <a href=\"https://github.com/leanprover/lean4/blob/master/tests/pkg/user_attr/UserAttr/BlaAttr.lean\">https://github.com/leanprover/lean4/blob/master/tests/pkg/user_attr/UserAttr/BlaAttr.lean</a>). </p>\n<p>Is there any way to get the fully qualified module name from the <code>declName</code> variable in the second to last line? Right now it prints only the name of the entity that has been tagged.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">tag</span><span class=\"o\">)</span> <span class=\"s2\">\"tag\"</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">tagAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"n\">String</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">tag</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"parametric attribute containing the tag\"</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tag.getString</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected tag attribute\"</span>\n    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">tag</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName}:tag:{tag}\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390065805,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694294819
    },
    {
        "content": "<p>In fact, I'm having great difficulty registering an attribute that accepts a (String \\cross String) parameter; when I try to <code>initialize</code> the corresponding <code>Attr</code> it says it's not found. Specifically this kind of code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">kvtag</span><span class=\"o\">)</span> <span class=\"s2\">\"kvtag\"</span> <span class=\"n\">str</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">kvtagAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">⨯</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">kvtag</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"kvtag\"</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">tag</span> <span class=\"bp\">$</span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tag.getString</span><span class=\"o\">,</span> <span class=\"n\">val.getString</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected tag attribute\"</span>\n    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">tag</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName}:{tag}:{val}\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390073148,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694302648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117969\">Tudor achim</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/390073148\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>  | `(attr| tag $tag:str $val:str) =&gt;\n</code></pre></div>\n\n</blockquote>\n<p>This line should be using <code>kvtag</code>, not <code>tag</code>.</p>",
        "id": 390086691,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694311622
    },
    {
        "content": "<p>Thanks. That was a small typo, but fixing it led to the main error I've been seeing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">kvtag</span><span class=\"o\">)</span> <span class=\"s2\">\"kvtag\"</span> <span class=\"n\">str</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">kvtagAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">⨯</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">kvtag</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"kvtag\"</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">kvtag</span> <span class=\"bp\">$</span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tag.getString</span><span class=\"o\">,</span> <span class=\"n\">val.getString</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected tag attribute\"</span>\n    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">tag</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName}:{tag}:{val}\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p><a href=\"/user_uploads/3121/OVhKvSDPo0o-7xGckFbp28mp/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/OVhKvSDPo0o-7xGckFbp28mp/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/OVhKvSDPo0o-7xGckFbp28mp/image.png\"></a></div><p>Seems quite strange. If I change it to be a <code>ParametricAttribute</code> that just takes one parameter then it starts to work again.</p>",
        "id": 390181048,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694377364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117969\">@Tudor achim</span> The problem is that you are using the wrong cross character for <code>(String x String)</code> (you are using <code>⨯</code>(<code>\\X</code>) instead of the correct <code>×</code> (<code>\\x</code>) character). This causes the parse of the <code>initialize</code> command to fail which then produces strange errors.</p>",
        "id": 390221837,
        "sender_full_name": "Mac Malone",
        "timestamp": 1694399650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> : that solved it. I'm confident I wouldn't have gotten it without that feedback <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 390361148,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694454696
    },
    {
        "content": "<p>Very interesting -- I think I was actually using <code>\\times</code> not <code>\\X</code> because I'm so used to latex</p>",
        "id": 390367387,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694457288
    },
    {
        "content": "<p>Also wondering if you have thoughts on the original question:</p>\n<blockquote>\n<p>Is there any way to get the fully qualified module name from the declName variable in the second to last line? Right now it prints only the name of the entity that has been tagged.</p>\n</blockquote>\n<p>The idea is to pull the module name, sort of how you can pull that in python with the <a href=\"https://docs.python.org/3/library/inspect.html\">inspect module</a> in the context of a decorator.</p>\n<p>Looking at <a href=\"https://github.com/leanprover/lean4/blob/3aa1cfcceabf7d091a3b2e5d4330df76767336ac/src/Init/Prelude.lean#L3406\">https://github.com/leanprover/lean4/blob/3aa1cfcceabf7d091a3b2e5d4330df76767336ac/src/Init/Prelude.lean#L3406</a> it's not clear you can do this the way I have things set up</p>",
        "id": 390378701,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694462283
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117969\">Tudor achim</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/390367387\">said</a>:</p>\n<blockquote>\n<p>Very interesting -- I think I was actually using <code>\\times</code> not <code>\\X</code> because I'm so used to latex</p>\n</blockquote>\n<p><code>\\times</code>will give you the same thing as <code>\\x</code>. The different one is <code>\\X</code> which is used for cross-products.</p>",
        "id": 390380755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694463092
    },
    {
        "content": "<p>You can get the namespace for the declName using <code>declName.getPrefix</code> -- or do you mean the module, like the file the declaration is defined in?</p>",
        "id": 390380940,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694463165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/390380755\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117969\">Tudor achim</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/390367387\">said</a>:</p>\n<blockquote>\n<p>Very interesting -- I think I was actually using <code>\\times</code> not <code>\\X</code> because I'm so used to latex</p>\n</blockquote>\n<p><code>\\times</code>will give you the same thing as <code>\\x</code>. The different one is <code>\\X</code> which is used for cross-products.</p>\n</blockquote>\n<p>Hmm I just tested that and confirmed you're right. No idea how the <code>\\X</code> came in the picture, then, since I never used that in Latex.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/390380940\">said</a>:</p>\n<blockquote>\n<p>You can get the namespace for the declName using <code>declName.getPrefix</code> -- or do you mean the module, like the file the declaration is defined in?</p>\n</blockquote>\n<p>That's correct, I mean the module, similar to what python's <code>inspect</code> module lets you do from within the decorator function definition.</p>",
        "id": 390381069,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694463227
    },
    {
        "content": "<p>Comparing with python is a bit confusing, because python fuses the notions of a module and a namespace, but it's definitely possible to get the module for a declaration in Lean.</p>",
        "id": 390381204,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694463281
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/attributes.20attached.20to.20a.20declaration/near/390381204\">said</a>:</p>\n<blockquote>\n<p>Comparing with python is a bit confusing, because python fuses the notions of a module and a namespace, but it's definitely possible to get the module for a declaration in Lean.</p>\n</blockquote>\n<p>Thanks! I didn't understand this distinction. I think what I actually wanted was to use namespaces, which I've just switched to, and confirm they have the behavior I was looking for (w.r.t. attributes and the <code>Name</code> lookup).</p>",
        "id": 390381515,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694463396
    },
    {
        "content": "<p>A useful trick to get even more help is to post <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> (that's a link). Currently I cannot copy your code into a fresh Lean file and experience the problem you are facing.</p>",
        "id": 390381679,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694463460
    },
    {
        "content": "<p>For what it's worth, you can get the filename of the declaration in <code>afterSet</code> from the third argument (that you called <code>val</code>) as <code>val.fileName</code>.</p>",
        "id": 390381891,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694463530
    },
    {
        "content": "<p>For sure, I thought I was doing that but I see I didn't include the headers. In this case it just uses core Lean </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n</code></pre></div>\n<p>Either way, you've all been super helpful and my issues are resolved. Thanks!</p>",
        "id": 390381901,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694463534
    },
    {
        "content": "<p>The <code>import</code> and <code>open</code> are indeed very important for this.</p>",
        "id": 390381970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694463567
    },
    {
        "content": "<p>I can't tell if I'm running into arcane Lean issues or just missing something simple. When I write the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">kvtag</span><span class=\"o\">)</span> <span class=\"s2\">\"kvtag\"</span> <span class=\"n\">str</span> <span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">attr</span>\n\n<span class=\"n\">initialize</span> <span class=\"n\">kvtagAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">kvtag</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"kvtag\"</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">kvtag</span> <span class=\"bp\">$</span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tag.getString</span><span class=\"o\">,</span> <span class=\"n\">val.getString</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected tag attribute\"</span>\n    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName}:{val} {ctx.fileName}\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>\n<p>I get this error:<br>\n<a href=\"/user_uploads/3121/53ATFqPZ-obxzxNSx_oex4cT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/53ATFqPZ-obxzxNSx_oex4cT/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/53ATFqPZ-obxzxNSx_oex4cT/image.png\"></a></div><p>From what I can tell, the third argument is a <code>Core.Context</code> as <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> suggested:</p>\n<p><a href=\"/user_uploads/3121/Wh0xC-VcIQo5x4Azq4Pkrm_a/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Wh0xC-VcIQo5x4Azq4Pkrm_a/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Wh0xC-VcIQo5x4Azq4Pkrm_a/image.png\"></a></div><p>Looking at the code for <code>Core.Context</code>, it seems like <code>fileName</code> is indeed a <code>String</code>:<br>\n<a href=\"/user_uploads/3121/I78_WU0Kqm7R-he2v-xgJySG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/I78_WU0Kqm7R-he2v-xgJySG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/I78_WU0Kqm7R-he2v-xgJySG/image.png\"></a></div><p>So I'm really unsure about why the compiler is not accepting this.</p>",
        "id": 390383134,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694464080
    },
    {
        "content": "<p>It's something to do with <code>IO.println</code> being incompatible with whatever monad we're in -- when I was testing I switched that to <code>dbg_trace</code></p>",
        "id": 390383378,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694464172
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">tag</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName.getPrefix}:{tag}:{val.fileName}\"</span>\n</code></pre></div>",
        "id": 390383403,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694464186
    },
    {
        "content": "<p>Great, that also worked for me. It's unclear to me why adding another <code>String</code> triggers an issue with <code>println</code>, though</p>",
        "id": 390383612,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694464260
    },
    {
        "content": "<p>I never got <code>IO.println</code> to work at all myself, no matter what string I gave it</p>",
        "id": 390383705,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694464307
    },
    {
        "content": "<p>Does <code>IO.println \"\"</code> work for you?</p>",
        "id": 390383829,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694464353
    },
    {
        "content": "<p>I think something gets screwed when we add the third argument, it seems to change the expected type.</p>\n<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>open Lean\n\nsyntax (name := kvtag) \"kvtag\" str str : attr\n\ninitialize kvtagAttr : ParametricAttribute (String × String) ←\n  registerParametricAttribute {\n    name := `kvtag\n    descr := \"kvtag\"\n    getParam := fun _ stx =&gt;\n      match stx with\n      | `(attr| kvtag $tag:str $val:str) =&gt;\n        return (tag.getString, val.getString)\n      | _  =&gt; throwError \"unexpected tag attribute\"\n    afterSet := fun declName val =&gt; do\n      IO.println s!\"&lt;&lt;ATTR&gt;&gt; {declName}:{val}\"\n      -- dbg_trace s!\"&lt;&lt;ATTR&gt;&gt; [{ctx.fileName}] {declName}:{val}\"\n  }\n</code></pre></div>\n<p>This does NOT:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">kvtagAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">kvtag</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"kvtag\"</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">kvtag</span> <span class=\"bp\">$</span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tag.getString</span><span class=\"o\">,</span> <span class=\"n\">val.getString</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected tag attribute\"</span>\n    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">val</span> <span class=\"n\">ctx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName}:{val}\"</span>\n      <span class=\"c1\">-- dbg_trace s!\"&lt;&lt;ATTR&gt;&gt; [{ctx.fileName}] {declName}:{val}\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390383955,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694464422
    },
    {
        "content": "<p>There is something a bit subtle going on here. In your <code>afterSet</code> definition, you consume too many arguments</p>",
        "id": 390383969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694464430
    },
    {
        "content": "<p>You could use</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">kvtagAttr</span> <span class=\"o\">:</span> <span class=\"n\">ParametricAttribute</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">×</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">←</span>\n  <span class=\"n\">registerParametricAttribute</span> <span class=\"o\">{</span>\n    <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">kvtag</span>\n    <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">\"kvtag\"</span>\n    <span class=\"n\">getParam</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">attr</span><span class=\"bp\">|</span> <span class=\"n\">kvtag</span> <span class=\"bp\">$</span><span class=\"n\">tag</span><span class=\"o\">:</span><span class=\"n\">str</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">tag.getString</span><span class=\"o\">,</span> <span class=\"n\">val.getString</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected tag attribute\"</span>\n    <span class=\"n\">afterSet</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">declName</span> <span class=\"n\">val</span>  <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">ctx</span> <span class=\"bp\">←</span> <span class=\"n\">read</span>\n      <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"&lt;&lt;ATTR&gt;&gt; {declName}:{val} {ctx.fileName}\"</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 390384039,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694464448
    },
    {
        "content": "<p>There your <code>do</code> computation is in the <code>Attr</code> monad which can lift <code>IO</code> instructions.</p>",
        "id": 390384111,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694464492
    },
    {
        "content": "<p>Yeah, taking a third argument is breaking the API of the reader monad.</p>",
        "id": 390384132,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1694464498
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 390384147,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694464506
    },
    {
        "content": "<p>You are operating in AttrM right now. AttrM = CoreM and CoreM can run IO so you can run IO computation there. The issue as patrick says is that you  consume too many arguments, that makes your function not be in CoreM anymore but instead in the monad of the remaining CoreM stack so Lean doesn't understand it can  lift IO computation there anymore.</p>",
        "id": 390384199,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694464529
    },
    {
        "content": "<p>OK, thanks all, this works now. </p>\n<p>In the interest of understanding how to not have to ask these questions in the future, what's the main way to tell that that's what's happening from the source code of <code>ParametericAttribute</code>? Is it this line that makes it clear <code>afterSet</code> is only called with two arguments?</p>\n<p><a href=\"/user_uploads/3121/P7lo93znAh1UUcVIWSgEL3yL/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/P7lo93znAh1UUcVIWSgEL3yL/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/P7lo93znAh1UUcVIWSgEL3yL/image.png\"></a></div>",
        "id": 390384857,
        "sender_full_name": "Tudor achim",
        "timestamp": 1694464825
    },
    {
        "content": "<p>With this issue in particular I would say it is to understand how monad stacks work in Lean and that Reader and State monads are just functions. There isn't a need to read the code of the framework itself.</p>",
        "id": 390384997,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694464907
    },
    {
        "content": "<p>Look at the expected type in your original attempt: it says <code>StateRefT' IO.RealWorld Core.State (EIO Exception) Unit</code>. This looks really bad. You should never see such a naked monad. All the interfaces you are meant to use are nicely packaged into named monads defined using the <code>abbrev</code> command so that it's nice to read for you but Lean can see the underlying complexity. So the rule of thumb is: if you see such a thing then you took a wrong turn.</p>",
        "id": 390385284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694465043
    },
    {
        "content": "<p>That being said, you clearly jumped into the deep end of Lean. What you do isn't expected from non-expert users. So really you shouldn't be afraid to ask questions.</p>",
        "id": 390385402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694465094
    }
]