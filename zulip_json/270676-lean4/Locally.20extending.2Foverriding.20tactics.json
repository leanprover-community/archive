[
    {
        "content": "<p>TIL that you can locally extend a tactic, e.g.  (here changing the tactic used by wf-recursion)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">decreasing_tactic</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span><span class=\"n\">fail</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Is there a way to _override_ a tactic? I tried</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"decreasing_tactic\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"foo\"</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">mutual</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"kd\">end</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">n</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>but that doesn't seem to work.</p>",
        "id": 403792796,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700747443
    },
    {
        "content": "<p>I think that the general structure is that if one fails, it tries the previously defined one, stopping as soon as it finds a working tactic, throwing the very first error otherwise.  So, while what you observe is what I expect, I do not know how to do what you want!</p>",
        "id": 403793079,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700747559
    },
    {
        "content": "<p>Right, thatâ€™s expected for extending with <code>macro_rules</code>, but sometimes you may want more control and prevent the backtracking.</p>",
        "id": 403793313,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1700747649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> Part of the problem is that <code>macro</code> doesn't work because it creates a new syntax and adds an expander for that.  Another part of the problem is that tactics are evaluated differently from other syntax. In normal syntax, you can prevent other macros from being tried by throw a proper error via <code>Macro.throwError</code> rather than <code>Macro.throwUnsupported</code>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">decreasingTerm</span><span class=\"o\">)</span> <span class=\"s2\">\"decreasing_term\"</span> <span class=\"o\">(</span><span class=\"bp\">&amp;</span><span class=\"s2\">\"foo\"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"bp\">&amp;</span><span class=\"s2\">\"bar\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">term</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"n\">decreasing_term</span> <span class=\"n\">foo</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"kd\">by</span> <span class=\"gr\">admit</span><span class=\"o\">)</span>\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"n\">decreasing_term</span> <span class=\"n\">bar</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"kd\">by</span> <span class=\"n\">fail</span> <span class=\"s2\">\"bar\"</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">decreasing_term</span> <span class=\"n\">foo</span> <span class=\"c1\">-- declaration uses sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">decreasing_term</span> <span class=\"n\">bar</span> <span class=\"c1\">-- bar</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">macro</span> <span class=\"n\">decreasingTerm</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">skippedDecreasingTerm</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwUnsupported</span> <span class=\"c1\">-- signals Lean should try earlier expanders</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar4</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">decreasing_term</span> <span class=\"n\">foo</span> <span class=\"c1\">-- declaration uses sorry</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">macro</span> <span class=\"n\">decreasingTerm</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">newDecreasingTerm</span> <span class=\"o\">:</span> <span class=\"n\">Macro</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Macro.throwError</span> <span class=\"s2\">\"hard error\"</span> <span class=\"c1\">-- will prevent trying earlier expanders</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar5</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">decreasing_term</span> <span class=\"n\">foo</span> <span class=\"c1\">-- hard error</span>\n</code></pre></div>\n<p>Tactics; however, will keep looking for a successful run no matter what error is produced.</p>",
        "id": 405312163,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701420090
    }
]