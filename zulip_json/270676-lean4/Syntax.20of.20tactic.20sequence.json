[
    {
        "content": "<p>I'm trying to understand lean's <code>Syntax</code> better, in particular <code>tacticSeq1Indented</code>. </p>\n<p>In particular this is a <code>Syntax.node info `tacticSeq1Indented args</code> where <code>args</code> is an <code>Array Syntax</code> containing a single null-node <code>Syntax.node info `null args2</code>. Now <code>args2</code> is another <code>Array Syntax</code> containing the tactics of the sequence, but also another null-node <code>Syntax.node info `null #[]</code> between any two tactics.</p>\n<p>Can anybody explain what the function of these null-nodes is? I don't understand either use case and naively have the impression that everything would work just as well if they didn't exist.</p>\n<p>below is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that matches the syntax of <code>args</code> for demonstration</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>MWE</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">partial</span>\n<span class=\"kd\">def</span> <span class=\"n\">modifySyntax</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tacs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">⟨</span><span class=\"n\">args</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">kind</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq1Indented</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"args for tacticSeq1Indented:</span><span class=\"se\">\\n</span><span class=\"s2\">{args}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n      <span class=\"k\">match</span> <span class=\"n\">args</span> <span class=\"k\">with</span>\n      <span class=\"c1\">-- The `args` of `tacticSeq1Indented`. What's the purpose of the two different null-nodes?</span>\n      <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"o\">⟨</span><span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">null</span> <span class=\"bp\">#</span><span class=\"o\">[])</span> <span class=\"o\">::</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"yes\"</span>\n        <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">⟨</span><span class=\"n\">args.map</span> <span class=\"n\">modifySyntax</span><span class=\"o\">⟩</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"nope\"</span>\n        <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">⟨</span><span class=\"n\">args.map</span> <span class=\"n\">modifySyntax</span><span class=\"o\">⟩</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">⟨</span><span class=\"n\">args.map</span> <span class=\"n\">modifySyntax</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">tacs</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"MyTactic\"</span> <span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">out</span> <span class=\"o\">:=</span> <span class=\"n\">modifySyntax</span> <span class=\"n\">tacs.raw</span>\n  <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.ppCategory</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq</span> <span class=\"n\">out</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">100</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">99</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">MyTactic</span>\n    <span class=\"n\">simp</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"n\">decide</span>\n</code></pre></div>\n</div></div>",
        "id": 387276151,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692970110
    },
    {
        "content": "<p>the null nodes are the separators between tactics, they are actually <code>optional \";\"</code></p>",
        "id": 387276830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970349
    },
    {
        "content": "<p>check out what happens if you use <code>simp;</code> instead of <code>simp</code></p>",
        "id": 387276899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970373
    },
    {
        "content": "<p>Then you get a <code>Syntax.atom info \";\"</code> in between the two tactics instead, yes.</p>",
        "id": 387277123,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692970448
    },
    {
        "content": "<p>And the first null-node wrapping the list?</p>",
        "id": 387277224,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692970496
    },
    {
        "content": "<p>that's the list itself</p>",
        "id": 387277699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970656
    },
    {
        "content": "<p>it gets packed up as one argument because <code>tacticSeq1Indented</code> itself has one argument, which is a <code>tactic;*</code> (more or less)</p>",
        "id": 387277908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692970720
    },
    {
        "content": "<p>ah and it would be impossible in lean to define <code>tacticSeq1Indented</code> with arbitrary number of arguments, I guess? </p>\n<p>and likewise I assume it would be more effort to find out if the next entry was a \";\" or a new tactic, so it just inserts a null-node and then assumes that every other node is just a separator?</p>\n<p>Thanks for the explanation!</p>",
        "id": 387279257,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692971253
    },
    {
        "content": "<p>not impossible, just irregular</p>",
        "id": 387279482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971325
    },
    {
        "content": "<p>it helps to have some standardized structure in syntax so that stuff like syntax-match works properly</p>",
        "id": 387279550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971352
    },
    {
        "content": "<p>basically the only variadic syntaxes are <code>many</code>,<code>many1</code>, <code>sepBy</code>, <code>sepBy1</code> and they all produce null nodes</p>",
        "id": 387279715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971405
    },
    {
        "content": "<p>and \"regular\" syntax node constructors all have a statically known number of arguments</p>",
        "id": 387279772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971436
    },
    {
        "content": "<p>(this was not always the case, but exceptions usually ended up as bug reports because something wouldn't handle them correctly)</p>",
        "id": 387279905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692971483
    },
    {
        "content": "<p>I see, that makes sense!</p>\n<p>I was a bit confused because I tried to parse a tactic sequence removing all occurences of a tactic <code>Hint</code> and I thought it looked a bit cumbersome:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"k\">match</span> <span class=\"n\">args</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"c1\">-- delete all `Hint` occurences in the middle of the sequence.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Hint</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">r</span>\n      <span class=\"n\">filterArgs</span> <span class=\"n\">r</span>\n    <span class=\"c1\">-- delete `Hint` occurence at the end of the sequence</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Hint</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"o\">[]</span>\n        <span class=\"o\">[]</span>\n    <span class=\"c1\">-- just recurse over any other type of syntax</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">replaceHoles</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">filterArgs</span> <span class=\"n\">rest</span>\n</code></pre></div>\n<p>(where <code>replaceHoles</code> and <code>filterArgs</code> are the recursive functions containing this snippet)</p>",
        "id": 387281549,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692971926
    },
    {
        "content": "<p>Was there some part that did not work out with syntax quotation patterns?</p>",
        "id": 387293486,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692975556
    },
    {
        "content": "<p>probably only that I don't know how to use them...</p>",
        "id": 387296994,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692976745
    },
    {
        "content": "<p>I want to take a sequence of tactics and execute it, but also store it as a string (\"template\") where I delete my custom tactics that appear within that tactic block:<br>\nroughly this non-mwe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">replaceHoles</span> <span class=\"o\">(</span><span class=\"n\">tacs</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tacs</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">⟨</span><span class=\"n\">args</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"n\">kind</span> <span class=\"o\">⟨</span><span class=\"n\">filterArgs</span> <span class=\"n\">args</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"n\">other</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">other</span>\n<span class=\"n\">where</span> <span class=\"n\">filterArgs</span> <span class=\"o\">(</span><span class=\"n\">args</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">args</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n    <span class=\"c1\">-- replace `Hole` with `sorry`.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Hole</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Syntax.node</span> <span class=\"n\">info</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSorry</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">Syntax.atom</span> <span class=\"n\">info</span> <span class=\"s2\">\"sorry\"</span><span class=\"o\">]</span> <span class=\"o\">::</span> <span class=\"n\">filterArgs</span> <span class=\"n\">r</span>\n    <span class=\"c1\">-- delete all `Hint` and `Branch` occurences in the middle.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Hint</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">r</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Branch</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">filterArgs</span> <span class=\"n\">r</span>\n    <span class=\"c1\">-- delete `Hint` and `Branch` occurence at the end of the tactic sequence.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Hint</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Syntax.node</span> <span class=\"n\">_</span> <span class=\"bp\">`</span><span class=\"n\">GameServer.Tactic.Branch</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"o\">[]</span>\n    <span class=\"c1\">-- Recurse on all other Syntax.</span>\n    <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">rest</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">replaceHoles</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">filterArgs</span> <span class=\"n\">rest</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"Template\"</span> <span class=\"n\">tacs</span><span class=\"o\">:</span><span class=\"n\">tacticSeq</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"c1\">-- evaluate the tactic sequence</span>\n  <span class=\"n\">Tactic.evalTactic</span> <span class=\"n\">tacs</span>\n  <span class=\"c1\">-- now save a string version of this tactic block</span>\n  <span class=\"k\">let</span> <span class=\"n\">newTacs</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">replaceHoles</span> <span class=\"n\">tacs.raw</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">template</span> <span class=\"bp\">←</span> <span class=\"n\">PrettyPrinter.ppCategory</span> <span class=\"bp\">`</span><span class=\"n\">Lean.Parser.Tactic.tacticSeq</span> <span class=\"n\">newTacs</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span> <span class=\"c1\">-- more stuff</span>\n</code></pre></div>\n<p>is this the wrong approach? (i.e. is there a higher level way of doing this?)</p>",
        "id": 387297361,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1692976869
    }
]