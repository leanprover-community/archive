[
    {
        "content": "<p>How do people feel about this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std</span>\n<span class=\"kn\">open</span> <span class=\"n\">Std</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">deriving</span> <span class=\"n\">BEq</span><span class=\"o\">,</span> <span class=\"n\">Hashable</span>\n\n<span class=\"c1\">-- This is fine, `mixHash` is opaque:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">mixHash</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"c1\">-- 16582581243253999004</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">mixHash</span> <span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">16582581243253999004</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"c1\">-- And this is the consequence of the `Hashable` deriver using `mixHash`:</span>\n<span class=\"k\">#eval</span> <span class=\"n\">hash</span> <span class=\"o\">({</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"c1\">-- 18217991133577325693</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">hash</span> <span class=\"o\">({</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">18217991133577325693</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch</span>\n\n<span class=\"c1\">-- But this seems bad?</span>\n<span class=\"k\">#eval</span> <span class=\"o\">((</span><span class=\"n\">HashMap.empty</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"c1\">-- none</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">HashMap.empty</span> <span class=\"o\">:</span> <span class=\"n\">HashMap</span> <span class=\"n\">Foo</span> <span class=\"n\">Nat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"n\">none</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- type mismatch</span>\n</code></pre></div>\n<p>I understand that <code>mixHash</code> is not something one should be doing kernel computation on. </p>\n<p>But perhaps the default <code>deriving</code> handler using <code>mixHash</code> then counts as a footgun? Or should I have known better?</p>",
        "id": 403897807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700801644
    },
    {
        "content": "<p>(Same issue affects <code>Lean.HashMap</code>, of course.)</p>",
        "id": 403897866,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700801709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/deriving.20Hashable.20gives.20opaque.20definition/near/403897807\">said</a>:</p>\n<blockquote>\n<p>I understand that <code>mixHash</code> is not something one should be doing kernel computation on. </p>\n</blockquote>\n<p>While not desirable, it would perhaps be better to have an internal computation of it for such occasions. Looking at the c++ <a href=\"https://github.com/leanprover/lean4/blob/5a68ad9ef47b1f1487b71052ce764dac34c48acb/src/runtime/hash.h#L15\">code</a> for the function, it should be possible to write the equivalent code in Lean as well.</p>",
        "id": 403913043,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1700810501
    },
    {
        "content": "<p>I'm not sure it would be a good idea to have hash computations be simulated in the kernel as part of the proof of such a simple fact. Just use simp lemmas please</p>",
        "id": 404004840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700848962
    },
    {
        "content": "<p>Mario, saying \"just use simp lemmas\" doesn't really cut it here. I want to write a verified algorithm that uses a look up table of some kind, and I need that lookup to be fast. The algorithm won't be proof producing, instead I'll ask the kernel for the <code>rfl</code> proof of the output of the algorithm. Are you saying I should never use <code>HashMap</code> in that situation?</p>",
        "id": 404031861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700869888
    },
    {
        "content": "<p>You want efficient hash functions. Those are usually not trivial to prove correct. There could be an entire math project dedicated to proving hash functions \"correct\" for some suitable criterion.</p>",
        "id": 404032492,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700870407
    },
    {
        "content": "<p>There are long textbook chapters dedicated to that topic,  there should also be (unfortunately longer, in most cases) verifications thereof!</p>",
        "id": 404032897,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700870593
    },
    {
        "content": "<p>Textbook chapters? You could write several volumes of books on hash functions. One will end up calling on probability theory (balls and bins problems all the way),  information theory, number theory, finite field polynomials, and what not.</p>",
        "id": 404033352,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700870908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> , does your thumbs up above mean \"I think HashMap (even with simple hash functions) should never be used in a verified algorithm\"? Or the opposite?</p>",
        "id": 404033595,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1700871119
    },
    {
        "content": "<p>btw hash function computations without bit level optimisations can be ... super inefficient to say the least.</p>",
        "id": 404033808,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700871247
    },
    {
        "content": "<p>That thumbs up was almost certainly referring to the \"just use simp lemmas\" part, but I did enjoy other parts of your comment :)</p>",
        "id": 404033833,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700871273
    },
    {
        "content": "<p>I do think all algorithms (and proofs) should be verified in some way. Whether Lean is the right tool is debatable but that's up to us to make it work, or fail...</p>",
        "id": 404034197,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1700871525
    },
    {
        "content": "<p>That's true.  I would like to see imperative programs  written and verified with lean, something that the do notation doesn't seem to support. So I am just not sure our abstractions are there yet.</p>",
        "id": 404034431,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1700871678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/deriving.20Hashable.20gives.20opaque.20definition/near/404031861\">said</a>:</p>\n<blockquote>\n<p>I want to write a verified algorithm that uses a look up table of some kind, and I need that lookup to be fast. The algorithm won't be proof producing, instead I'll ask the kernel for the <code>rfl</code> proof of the output of the algorithm.</p>\n</blockquote>\n<p>(Is this a concrete thing you're trying to do? More context could be useful)</p>",
        "id": 404037436,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700873364
    },
    {
        "content": "<p>I do think it's a bit weird to want \"running in the kernel but fast!\" rather than normal kernel proofs or proof by reflection</p>",
        "id": 404038045,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700873679
    },
    {
        "content": "<p>running hashmaps in the kernel will be very far from fast</p>",
        "id": 404048290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700880664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/deriving.20Hashable.20gives.20opaque.20definition/near/404031861\">said</a>:</p>\n<blockquote>\n<p>Mario, saying \"just use simp lemmas\" doesn't really cut it here. I want to write a verified algorithm that uses a look up table of some kind, and I need that lookup to be fast. The algorithm won't be proof producing, instead I'll ask the kernel for the <code>rfl</code> proof of the output of the algorithm. Are you saying I should never use <code>HashMap</code> in that situation?</p>\n</blockquote>\n<p>Yes, that is what I am saying. <code>HashMap</code> does not have the right performance profile for this situation, it will not be O(1) lookup because the kernel doesn't understand arrays and will resort to linear scans over the array for each lookup</p>",
        "id": 404048412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700880754
    },
    {
        "content": "<p>Use a RBMap instead</p>",
        "id": 404048426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1700880768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Like James, I am rather confused as to what you are trying to do here. It is possible to write verify <code>HashMap</code>  without kernel computations about <code>hash</code>. In fact, I happen to be working on a project that is currently requiring me to do exactly this. I am almost close to done and the implementation of hash as never posed a problem once.  Verifying <code>HashMap</code> itself works fine by just assuming <code>LawfulHashable</code> and showing <code>LawfulHashable</code> still seems possible with <code>mixHash</code> for most use cases I can think of.</p>",
        "id": 404048627,
        "sender_full_name": "Mac Malone",
        "timestamp": 1700880944
    }
]