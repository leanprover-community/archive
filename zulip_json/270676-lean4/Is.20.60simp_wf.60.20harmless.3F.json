[
    {
        "content": "<p>I'd like to propose that <code>decreasing_by</code> build in an application of the <code>simp_wf</code> tactic by default.  (This is one of the innards of <code>decreasing_tactic</code>.). It makes the infoview a lot clearer. Here's an example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gcd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>Compare the goal state for the following two partially-set-up termination proofs (in each case with the cursor right before the <code>sorry</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">a b : Nat</span>\n<span class=\"cm\">⊢ (invImage (fun a =&gt; PSigma.casesOn a fun a snd =&gt; snd) instWellFoundedRelation).1 { fst := b + 1, snd := a % (b + 1) }</span>\n<span class=\"cm\">  { fst := a, snd := Nat.succ b }</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">decreasing_by</span> <span class=\"n\">simp_wf</span> <span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">a b : Nat</span>\n<span class=\"cm\">⊢ a % (b + 1) &lt; Nat.succ b</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>The latter is much more informative.</p>",
        "id": 342520204,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679048870
    },
    {
        "content": "<p>It seems to me that the only reason not to do this would be if there are examples of termination proofs which this <code>simp_wf</code> would make fail.  Does anyone have such an example or is the <code>simp_wf</code> indeed harmless?</p>",
        "id": 342520489,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679048945
    },
    {
        "content": "<p>Alternatively: is it possible to write my own syntax <code>custom_decreasing_by</code> which does this?  I got as far in the source as the place where <a href=\"https://github.com/leanprover/lean4/blob/badfcdc49f677500d6c3b718204966911617007d/src/Lean/Parser/Command.lean#L46\"><code>decreasing_by</code></a> is defined as a <code>leading_parser</code> but I'm not sure how to write a variant.</p>",
        "id": 342526111,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679050418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20.60simp_wf.60.20harmless.3F/near/342526111\">said</a>:</p>\n<blockquote>\n<p>Alternatively: is it possible to write my own syntax <code>custom_decreasing_by</code> which does this?  I got as far in the source as the place where <a href=\"https://github.com/leanprover/lean4/blob/badfcdc49f677500d6c3b718204966911617007d/src/Lean/Parser/Command.lean#L46\"><code>decreasing_by</code></a> is defined as a <code>leading_parser</code> but I'm not sure how to write a variant.</p>\n</blockquote>\n<p>You should have a look at the elaborator for <code>declaration</code>, that is where the <code>decreasing_by</code> is used. So you'd have to create new parser for <code>def</code>, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">custom_def</span>            <span class=\"o\">:=</span> <span class=\"n\">leading_parser</span>\n  <span class=\"s2\">\"custom_def \"</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declId</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">ppIndent</span> <span class=\"n\">optDeclSig</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">declVal</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">optDefDeriving</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">customTerminationSuffix</span>\n</code></pre></div>\n<p>Where <code>customTerminationSuffix</code> is a version of the <code>terminationSuffix</code> parser that uses <code>custom_decreasing_by</code>.<br>\n(You might be able to reuse the <code>def</code> keyword here, instead of <code>custom_def</code>; I'm not 100% sure, though, so I just picked a different command to be safe)</p>\n<p>Then, you have to write an elaborator for <code>custom_def</code>. We can look at the standard <code>declaration</code> elaborator for inspiration.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- from Lean.Elab.Declaration</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getTerminationHints</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TerminationHints</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n  <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">decl.getKind</span>\n  <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.def</span> <span class=\"bp\">||</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.abbrev</span> <span class=\"bp\">||</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.theorem</span> <span class=\"bp\">||</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Parser.Command.instance</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"n\">decl.getArgs</span>\n    <span class=\"o\">{</span> <span class=\"n\">terminationBy</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"n\">args.size</span> <span class=\"bp\">-</span> <span class=\"mi\">2</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">decreasingBy</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"n\">args.size</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">]</span><span class=\"bp\">!.</span><span class=\"n\">getOptional</span><span class=\"bp\">?</span> <span class=\"o\">}</span>\n  <span class=\"k\">else</span>\n    <span class=\"o\">{}</span>\n\n<span class=\"kd\">@[builtin_command_elab declaration]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabDeclaration</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandDeclNamespace</span><span class=\"bp\">?</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">newStx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">stx</span> <span class=\"n\">ns</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">ns</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">newStx</span><span class=\"o\">⟩)</span> <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">)</span>\n    <span class=\"n\">withMacroExpansion</span> <span class=\"n\">stx</span> <span class=\"n\">newStx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabCommand</span> <span class=\"n\">newStx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">decl</span>     <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span>\n    <span class=\"k\">let</span> <span class=\"n\">declKind</span> <span class=\"o\">:=</span> <span class=\"n\">decl.getKind</span>\n    <span class=\"k\">if</span> <span class=\"n\">declKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Command.</span><span class=\"bp\">«</span><span class=\"kd\">axiom</span><span class=\"bp\">»</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">modifiers</span> <span class=\"bp\">←</span> <span class=\"n\">elabModifiers</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n      <span class=\"n\">elabAxiom</span> <span class=\"n\">modifiers</span> <span class=\"n\">decl</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">declKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Command.</span><span class=\"bp\">«</span><span class=\"kd\">inductive</span><span class=\"bp\">»</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">modifiers</span> <span class=\"bp\">←</span> <span class=\"n\">elabModifiers</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n      <span class=\"n\">elabInductive</span> <span class=\"n\">modifiers</span> <span class=\"n\">decl</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">declKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Command.classInductive</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">modifiers</span> <span class=\"bp\">←</span> <span class=\"n\">elabModifiers</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n      <span class=\"n\">elabClassInductive</span> <span class=\"n\">modifiers</span> <span class=\"n\">decl</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">declKind</span> <span class=\"bp\">==</span> <span class=\"bp\">``</span><span class=\"n\">Lean.Parser.Command.</span><span class=\"bp\">«</span><span class=\"kd\">structure</span><span class=\"bp\">»</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">modifiers</span> <span class=\"bp\">←</span> <span class=\"n\">elabModifiers</span> <span class=\"n\">stx</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span>\n      <span class=\"n\">elabStructure</span> <span class=\"n\">modifiers</span> <span class=\"n\">decl</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">isDefLike</span> <span class=\"n\">decl</span> <span class=\"k\">then</span>\n      <span class=\"n\">elabMutualDef</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">stx</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">getTerminationHints</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">throwError</span> <span class=\"s2\">\"unexpected declaration\"</span>\n</code></pre></div>\n<p>You only care about <code>defs</code>, so the key line there is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">elabMutualDef</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">stx</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">getTerminationHints</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You can define a new version of <code>getTerminationHints</code> that inserts the call to <code>simp_wf</code> where you want it.<br>\nWith that, you define the elaborator for <code>custom_def</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[command_elab custom_def]</span>\n<span class=\"kd\">def</span> <span class=\"n\">elabCustomDef</span> <span class=\"o\">:</span> <span class=\"n\">CommandElab</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">liftMacroM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">expandDeclNamespace</span><span class=\"bp\">?</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">ns</span><span class=\"o\">,</span> <span class=\"n\">newStx</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ns</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">stx</span> <span class=\"n\">ns</span>\n    <span class=\"k\">let</span> <span class=\"n\">newStx</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">ns</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"n\">newStx</span><span class=\"o\">⟩)</span> <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">ns</span><span class=\"o\">)</span>\n    <span class=\"n\">withMacroExpansion</span> <span class=\"n\">stx</span> <span class=\"n\">newStx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabCommand</span> <span class=\"n\">newStx</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"n\">elabMutualDef</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">stx</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">getCustomTerminationHints</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I hope that helps! Feel free to ask for more clarification if the code is not clear</p>",
        "id": 342558591,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1679059078
    },
    {
        "content": "<p>There is no need to override <code>decreasing_by</code> (which is not extensible). You can instead override <code>decreasing_tactic</code> (which is extensible)</p>",
        "id": 342568870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679061387
    },
    {
        "content": "<p>note that <code>decreasing_tactic</code> calls <code>decreasing_with</code> which starts with a call to <code>simp_wf</code></p>",
        "id": 342569171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679061455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"481133\">@Alex Keizer</span> Thanks!  I learned a lot from your explanation, but I think if the scale of change needed is not just <code>custom_decreasing_by</code> but also <code>custom_def</code> then it's not worth it for me.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I'm not sure I follow, can you explain?  Note that I'm specifically interested in what is displayed in the goal state in the place marked with <code>*****</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">gcd</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">gcd</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">gcd</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n<span class=\"n\">decreasing_by</span> <span class=\"bp\">*****</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>At that point, <code>decreasing_tactic</code> does not seem to be relevant?  IIUC <code>decreasing_tactic</code> is only called as a finishing tactic if the <code>decreasing_by</code> line is missing.  I'm proposing effectively that one of the innards of <code>decreasing_tactic</code>, namely <code>simp_wf</code>, be called as a cleanup tactic as part of a <code>decreasing_by</code> line.</p>",
        "id": 342647376,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1679080373
    }
]