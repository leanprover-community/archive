[
    {
        "content": "<p>The comment at the head of <code>Std.CodeAction.Deprecated</code> says</p>\n<blockquote>\n<h1>Code action for @[deprecated] replacements</h1>\n<p>This is an opt-in mechanism for making machine-applicable <code>@[deprecated]</code> definitions. When enabled<br>\n(by setting the <code>machineApplicableDeprecated</code> tag attribute), a code action will be triggered<br>\nwhenever the deprecation lint also fires, allowing the user to replace the usage of the deprecated<br>\nconstant.</p>\n</blockquote>\n<p>How is \"setting the <code>machineApplicableDeprecated</code> tag attribute\" done?<br>\nIn the following example, currently an empty list of code actions is attached to the character range where <code>my_two_pos</code> is used.<br>\n[Edt: added <code>import Std.CodeActionDeprecated</code>]</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.CodeAction.Deprecated</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_zero_lt_two</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span> <span class=\"n\">my_zero_lt_two</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">my_two_pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">my_zero_lt_two</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_two_pow_pos</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_pow_of_pos</span> <span class=\"n\">m</span> <span class=\"n\">my_two_pos</span>\n</code></pre></div>",
        "id": 397589846,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697757200
    },
    {
        "content": "<p>It looks like you haven't imported <code>Std.CodeAction.Deprecated</code>.</p>",
        "id": 397591389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697758173
    },
    {
        "content": "<p>True! Adding it didn't make the code action appear.</p>",
        "id": 397592411,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697758827
    },
    {
        "content": "<p>\"Setting the <code>machineApplicableDeprecated</code> tag attribute\" is done by the code of an elaborator, not by a user. The elaborator for <code>alias</code> in <code>Std.Tactic.Alias</code> does it, when there is a <code>@[deprecated] alias x := y</code> and the token <code>deprecated</code> in the attribute tag is <em>not</em> followed by an identifier. </p>\n<p>I wonder if this is what was intended:<br>\n  (1) If a target is provided in a <code>@[deprecated]</code> attribute, the linter sets <code>machineApplicableDeprecated</code><br>\n  (2) The <code>alias</code> tactic also sets <code>machineApplicableDeprecated</code> only if it wasn't already done in (1)<br>\n... but somehow point (1) didn't get implemented.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.CodeAction.Deprecated</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Alias</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">newname</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span> <span class=\"n\">newname</span><span class=\"kd\">]</span> <span class=\"kd\">theorem</span> <span class=\"n\">oldname1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">newname</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span> <span class=\"n\">newname</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">oldname2</span> <span class=\"o\">:=</span> <span class=\"n\">newname</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">oldname3</span> <span class=\"o\">:=</span> <span class=\"n\">newname</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">thm1</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_pow_of_pos</span> <span class=\"n\">m</span> <span class=\"n\">oldname1</span> <span class=\"c1\">-- `oldname1` gets an empty list of code actions</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">thm2</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_pow_of_pos</span> <span class=\"n\">m</span> <span class=\"n\">oldname2</span> <span class=\"c1\">-- `oldname2` gets an empty list of code actions</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">thm3</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_pow_of_pos</span> <span class=\"n\">m</span> <span class=\"n\">oldname3</span> <span class=\"c1\">-- `oldname3` gets a code action</span>\n</code></pre></div>",
        "id": 397603500,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697765169
    },
    {
        "content": "<p><code>machineApplicableDeprecated</code> is public API but only usable from metaprograms. That is, this is a backend feature which is used for creating tactics and attributes that have support from the code action. The frontend version is <code>@[deprecated] alias</code>, and it is written such that you only get the code action if you use <code>@[deprecated] alias</code> specifically (not <code>@[deprecated other] alias</code> or <code>@[deprecated] def</code>)</p>",
        "id": 397630086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697778345
    },
    {
        "content": "<p>in short, the behavior you demonstrate is deliberate</p>",
        "id": 397630175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697778390
    },
    {
        "content": "<p>When you use <code>@[deprecated a] alias b := c</code>, it is not a machine-applicable replacement because <code>a</code> may not have the same type as <code>c</code>. If you do <code>@[deprecated c] alias b := c</code> then in principle it could do so, but there is not really any reason to write this (maybe we should lint against it?) since it is the same as <code>@[deprecated] alias b := c</code></p>",
        "id": 397630328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697778523
    },
    {
        "content": "<p>Here's how you are supposed to write the first example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Init.Data.Nat</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Alias</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">my_zero_lt_two</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_succ</span> <span class=\"n\">_</span>\n<span class=\"kd\">@[</span><span class=\"n\">deprecated</span><span class=\"kd\">]</span> <span class=\"n\">alias</span> <span class=\"n\">my_two_pos</span> <span class=\"o\">:=</span> <span class=\"n\">my_zero_lt_two</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_two_pow_pos</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">2</span> <span class=\"bp\">^</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.pos_pow_of_pos</span> <span class=\"n\">m</span> <span class=\"n\">my_two_pos</span>\n</code></pre></div>",
        "id": 397630551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697778670
    },
    {
        "content": "<p>Makes sense! Thank you for the explanation.</p>",
        "id": 397665192,
        "sender_full_name": "Richard Copley",
        "timestamp": 1697792992
    }
]