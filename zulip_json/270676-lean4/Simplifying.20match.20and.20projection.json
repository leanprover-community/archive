[
    {
        "content": "<p>Hi. I have the following function:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>When proving a theorem involving the function, I wanted to simplify a term with <code>match</code> and the projection like this, but <code>simp</code> couldn't process it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">motive</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">arr</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hmid₁</span><span class=\"o\">,</span> <span class=\"n\">hmid₂</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hmid₁</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">hmid₂</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"bp\">..</span><span class=\"o\">)⟩⟩,</span> <span class=\"n\">arr</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">arr</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"c1\">-- simp made no progress</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems that the <code>⟨hmid₁, hmid₂⟩</code> part is the culprit, so this version worked:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">motive'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">arr</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩,</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(⟨</span><span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hm.left</span><span class=\"o\">,</span> <span class=\"n\">Nat.le_trans</span> <span class=\"n\">hm.right</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"bp\">..</span><span class=\"o\">)⟩⟩,</span> <span class=\"n\">arr</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span> <span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">arr</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span>\n</code></pre></div>\n<p>Out of curiosity, I would like to know</p>\n<ol>\n<li>Why the first version didn't work?</li>\n<li>If we don't want to change the definition, how we can make the first version work?</li>\n</ol>\n<p>Thanks!</p>",
        "id": 403115145,
        "sender_full_name": "pandaman",
        "timestamp": 1700467740
    },
    {
        "content": "<p>A similar instance of the issue (sorry, couldn't minimize this). Consider the following definition of <code>quickSortImpl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">arr.size</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">partition</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">fl</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ln</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span> <span class=\"n\">mid</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span> <span class=\"o\">}</span> <span class=\"bp\">×</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quickSortImpl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ln</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"k\">then</span>\n    <span class=\"k\">match</span> <span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"n\">ln</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">hmid₁</span><span class=\"o\">,</span> <span class=\"n\">hmid₂</span><span class=\"o\">⟩⟩,</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- Lemmas</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">first</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"n\">first</span> <span class=\"o\">:=</span>  <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n      <span class=\"c1\">-- Recursion</span>\n      <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">quickSortImpl</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n      <span class=\"n\">quickSortImpl</span> <span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">last</span> <span class=\"n\">ln</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">arr</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"n\">first</span>\n</code></pre></div>\n<p>When proving a theorem about the function, I got a term like this, which <code>simp</code> cannot proceed with destructuring the <code>match</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- def P (arr : Vec α n) : Prop := sorry</span>\n\n<span class=\"c1\">-- I want to show this</span>\n<span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"n\">ln</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">({</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">mid</span><span class=\"o\">,</span> <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">mid</span> <span class=\"bp\">∧</span> <span class=\"n\">mid</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"o\">},</span> <span class=\"n\">arr</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">quickSortImpl</span> <span class=\"o\">(</span><span class=\"n\">quickSortImpl</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">last</span> <span class=\"n\">ln</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, when I removed the use of <code>match</code> in <code>quickSortImpl</code>, somehow I could get a nicer term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Given this definition</span>\n<span class=\"kd\">def</span> <span class=\"n\">quickSortImpl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Ord</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ln</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Vec</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">lt</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"k\">then</span>\n    <span class=\"c1\">-- Do not use match</span>\n    <span class=\"k\">let</span> <span class=\"n\">parted</span> <span class=\"o\">:=</span> <span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">Nat.le_of_lt</span> <span class=\"n\">lt</span><span class=\"o\">)</span> <span class=\"n\">ln</span>\n    <span class=\"k\">let</span> <span class=\"n\">mid</span> <span class=\"o\">:=</span> <span class=\"n\">parted.1.val</span>\n    <span class=\"k\">let</span> <span class=\"n\">hm</span> <span class=\"o\">:=</span> <span class=\"n\">parted.1.property</span>\n    <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">parted.2</span>\n\n    <span class=\"c1\">-- Lemmas</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">first</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">termination_lemma</span> <span class=\"n\">lt</span> <span class=\"n\">hm.1</span> <span class=\"n\">hm.2</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">last</span> <span class=\"bp\">-</span> <span class=\"n\">first</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.sub_lt_sub_left</span> <span class=\"n\">lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">hm.1</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_succ_self</span> <span class=\"bp\">..</span><span class=\"o\">))</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.sub_le</span> <span class=\"bp\">..</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.lt_of_le_of_lt</span> <span class=\"n\">hm.2</span> <span class=\"n\">ln</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">-- Recursion</span>\n    <span class=\"k\">let</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">quickSortImpl</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n    <span class=\"n\">quickSortImpl</span> <span class=\"n\">arr</span> <span class=\"o\">(</span><span class=\"n\">mid</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">last</span> <span class=\"n\">ln</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">arr</span>\n\n<span class=\"c1\">-- I got this, which I could prove by recursion on P.</span>\n<span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">quickSortImpl</span>\n    <span class=\"o\">(</span><span class=\"n\">quickSortImpl</span> <span class=\"o\">(</span><span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"n\">ln</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">first</span>\n      <span class=\"o\">((</span><span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"n\">ln</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"n\">ln</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst.val</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n    <span class=\"o\">((</span><span class=\"n\">partition</span> <span class=\"n\">arr</span> <span class=\"n\">first</span> <span class=\"n\">last</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">first</span> <span class=\"bp\">≤</span> <span class=\"n\">last</span><span class=\"o\">)</span> <span class=\"n\">ln</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fst.val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">last</span> <span class=\"n\">ln</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 403370693,
        "sender_full_name": "pandaman",
        "timestamp": 1700569677
    },
    {
        "content": "<p>Is this kind of use of <code>match</code> to deconstruct nested data structures not recommended?</p>",
        "id": 403370953,
        "sender_full_name": "pandaman",
        "timestamp": 1700569774
    }
]