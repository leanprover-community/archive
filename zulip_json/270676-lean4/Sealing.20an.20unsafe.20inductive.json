[
    {
        "content": "<p>Is it possible to seal an unsafe inductive type? The trouble I am running into is that the safe, <code>opaque</code> version of the type is not defeq to the unsafe version and consequently <code>implemented_by</code> rejects definitions on the safe version. More specifically,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">inductive</span> <span class=\"n\">RecMapUnsafe</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">RecMapUnsafe</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">RecMapUnsafe</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">RecMapUnsafe.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecMapUnsafe</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">bind</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">$</span> <span class=\"n\">mk</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[implemented_by RecMapUnsafe]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">RecMap</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> invalid 'implemented_by' argument 'Ii.RecMapUnsafe.get?', 'Ii.RecMapUnsafe.get?' has type</span>\n<span class=\"cm\">  {α β : Type} → α → RecMapUnsafe α β → Option β</span>\n<span class=\"cm\">but 'Ii.RecMap.get?' has type</span>\n<span class=\"cm\">  {α β : Type} → α → RecMap α β → Option β -/</span>\n<span class=\"kd\">@[implemented_by RecMapUnsafe.get?]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">RecMap.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 380811025,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690916498
    },
    {
        "content": "<p>I guess we can write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">RecMap.get</span><span class=\"bp\">?</span><span class=\"n\">Unsafe</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">RecMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">RecMapUnsafe</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">m</span>\n  <span class=\"n\">m.get</span><span class=\"bp\">?</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">@[implemented_by RecMap.get?Unsafe]</span>\n<span class=\"n\">opaque</span> <span class=\"n\">RecMap.get</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecMap</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 380812901,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690916959
    },
    {
        "content": "<p>You might be interested in <a href=\"https://github.com/leanprover-community/mathlib4/blob/067dad6dcbd5e61738f205faaeb4a0a3e26d9efd/Mathlib/Data/ListM/Basic.lean\">https://github.com/leanprover-community/mathlib4/blob/067dad6dcbd5e61738f205faaeb4a0a3e26d9efd/Mathlib/Data/ListM/Basic.lean</a></p>",
        "id": 380815806,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690917753
    },
    {
        "content": "<p>As in, the strategy of sealing a whole API at once? Or are you saying I should be interested in that data structure itself?</p>",
        "id": 380816354,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690917896
    },
    {
        "content": "<p>As a side note, there seems to be some kind of miselaboration when I change the type a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> application type mismatch</span>\n<span class=\"cm\">  Array.size vs</span>\n<span class=\"cm\">argument has type</span>\n<span class=\"cm\">  _nested.Array_4</span>\n<span class=\"cm\">but function has type</span>\n<span class=\"cm\">  Array (RecMapUnsafe' α β → Option β) → ℕ -/</span>\n<span class=\"n\">unsafe</span> <span class=\"kd\">inductive</span> <span class=\"n\">RecMapUnsafe'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Hashable</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">PersistentHashMap</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">RecMapUnsafe'</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">RecMapUnsafe'</span> <span class=\"n\">α</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 380817783,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690918306
    },
    {
        "content": "<p>I was only suggesting the strategy.</p>",
        "id": 380822586,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690919705
    }
]