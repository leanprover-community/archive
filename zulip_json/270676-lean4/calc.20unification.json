[
    {
        "content": "<p>Here is an apparent discrepancy between Lean 3 calc and Lean 4 calc, regarding the ability to fill in <code>_</code> with terms provided in other places.  In Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">List.Sorted</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">List.foo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">List.rel_foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.Sorted</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">l.foo</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.foo</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w.Sorted</span> <span class=\"o\">(</span><span class=\"bp\">·</span> <span class=\"bp\">≥</span> <span class=\"bp\">·</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">w.foo</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">≤</span> <span class=\"n\">w.foo</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">w.foo</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">w.foo</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">List.rel_foo</span> <span class=\"n\">hw</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hij</span> <span class=\"bp\">;</span> <span class=\"gr\">sorry</span> <span class=\"bp\">;</span> <span class=\"gr\">sorry</span>\n    <span class=\"c1\">-- goals generated for `i &lt; List.length w` and `j &lt; List.length w`</span>\n</code></pre></div>",
        "id": 326006988,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675627394
    },
    {
        "content": "<p>And in Lean 3 -- no need to fill the holes for <code>i &lt; List.length w</code> and <code>j &lt; List.length w</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.Sorted</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">list.foo</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">list.rel_foo</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">l.Sorted</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">l.foo</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l.foo</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w.Sorted</span> <span class=\"o\">(</span><span class=\"bp\">≥</span><span class=\"o\">))</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">w.length</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hij</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">w.foo</span> <span class=\"n\">i</span> <span class=\"n\">hi</span> <span class=\"bp\">≤</span> <span class=\"n\">w.foo</span> <span class=\"n\">j</span> <span class=\"n\">hj</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">calc</span>\n    <span class=\"n\">w.foo</span> <span class=\"n\">i</span> <span class=\"n\">_</span> <span class=\"bp\">≤</span> <span class=\"n\">w.foo</span> <span class=\"n\">j</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">list.rel_foo</span> <span class=\"n\">hw</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">hij</span>\n</code></pre></div>",
        "id": 326007031,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675627433
    },
    {
        "content": "<p>I am working on <code>nightly-2023-02-03</code> which I think has all the recent <code>calc</code> improvements by <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>.  It is a minimization of a change needed to make mathlib compile after the bump (see <a href=\"https://github.com/leanprover-community/mathlib4/pull/1999\">!4#1999</a>).</p>",
        "id": 326007182,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675627540
    },
    {
        "content": "<p>In my opinion, this is of much lower importance than the other issues Gabriel has fixed recently in <code>calc</code>.  So if the answer is \"this is how it has to be as a tradeoff in fixing the other issues\", that's fine with me.  Just wanted to record it.</p>",
        "id": 326007290,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1675627616
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2095\">lean4#2095</a>  As a quick fix, you can remove the <code>by</code>.</p>",
        "id": 326249321,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675722082
    }
]