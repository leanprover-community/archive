[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and I were writing some array processing code and as an experiment we inserted <code>dbgTraceIfShared</code> to verify that some arrays were indeed not being shared, but we found instead that they were.</p>\n<p>With a big more experimentation, the presence of <code>dbgTraceIfShared</code> was actually causing sharing. Here's a small example that shows the behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">@[noinline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Array.add</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">a.map</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">a.getD</span> <span class=\"n\">i</span> <span class=\"mi\">0</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"a\"</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"n\">c</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Sharing</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"n\">a</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">shared RC a</span>\n<span class=\"cm\">shared RC a</span>\n<span class=\"cm\">shared RC a</span>\n<span class=\"cm\">shared RC a</span>\n<span class=\"cm\">#[27, 28, 29, 30]</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">@[noinline]</span>\n<span class=\"kd\">def</span> <span class=\"n\">Array.add'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"a\"</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">test'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">a.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">a.getD</span> <span class=\"n\">i</span> <span class=\"mi\">0</span>\n    <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a.add</span> <span class=\"n\">c</span>\n  <span class=\"n\">return</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">a'</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- No sharing</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test'</span> <span class=\"n\">a'</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">#[27, 28, 29, 30]</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 358683422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684232578
    },
    {
        "content": "<p>Based on the IR, it looks like what's going on is that <code>Array.getD</code> is being unfolded and <code>dbgTraceIfShared \"a\" a</code> is being hoisted above <code>a.get</code>, leading to two live references to <code>a</code>.</p>",
        "id": 358683636,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684232644
    },
    {
        "content": "<p>A Heisenbug!</p>",
        "id": 358683974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684232760
    },
    {
        "content": "<p>I don't know enough about the new vs old compiler to know if this worth reporting or not (or even whether <code>#eval</code> is using the new or old compiler) -- I'm assuming this is a bug though, given that it's transforming a program that uses <code>a</code> linearly into one that doesn't.</p>",
        "id": 358684241,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684232829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I like how this one is opposite of a normal Heisenbug -- here there's no bug until you look at it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 358684490,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1684232888
    },
    {
        "content": "<p>So it's a coHeisenbug?</p>",
        "id": 358685049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1684233024
    },
    {
        "content": "<p>Maybe an anti-Heisenbug?</p>",
        "id": 358685246,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1684233076
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2218\">lean4#2218</a>  The bad news is that this issue doesn't even need <code>dbgTraceIfShared</code>, you get the same nonlinearity when you write <code>a.add 0</code> instead.</p>",
        "id": 359098747,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1684365382
    }
]