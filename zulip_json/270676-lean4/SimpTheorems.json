[
    {
        "content": "<p>Is there documentation on the data structures used for <code>simp</code> somewhere? In particular, I don't understand how to use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.SimpTheorems#doc\">docs4#Lean.Meta.SimpTheorems</a>. <br>\nAs an example of my confusion: to elaborate a list of arguments to <code>simp</code>, there's the function <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Elab.Tactic.elabSimpArgs#doc\">docs4#Lean.Elab.Tactic.elabSimpArgs</a>. Among other things it returns an array of <code>SimpTheorems</code>. First, I don't understand why it returns an <em>array</em> of <code>SimpTheorems</code>, as the latter seems to already be a collection of simp theorems. Then, in the <code>SimpTheorems</code> structure there seem to be two ways of accessing the theorems. First, via the discrimination trees (though I don't understand what <code>pre</code> vs. <code>post</code> is) and second via the <code>lemmaNames</code>. Is the <code>lemmaNames</code> field the preferred way of accessing the list of theorems? E.g., I want to check if the simp theorems all hold by reflexivity, but I'm not sure how to do this based only on <code>lemmaNames</code>.</p>",
        "id": 408480121,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1702846858
    },
    {
        "content": "<ul>\n<li>Array of <code>SimpTheorems</code> because <code>simp</code> can use multiple sets of <code>simp</code> theorems, each of which is a <code>SimpTheorems</code> structure. Alternatively, one could implement a <code>merge</code> operation for <code>SimpTheorems</code> (I had this in Aesop at some point), but that's harder and possibly slower.</li>\n<li><code>pre</code> and <code>post</code> lemmas are used at different points during <code>simp</code>, but I forget the details.</li>\n<li><code>lemmaNames</code> is a cache containing the names (more precisely: origins) of all lemmas contained in the structure. This enables fast membership queries.</li>\n<li>There are some additional operations on <code>DiscrTree</code>s in mathlib, e.g. <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.DiscrTree.fold#doc\">docs#Lean.Meta.DiscrTree.fold</a>.</li>\n</ul>\n<p>None of this is documented afaik; I learned it from staring at the <code>simp</code> code at lot.</p>",
        "id": 408564357,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1702890109
    },
    {
        "content": "<p>The core loop in <code>simp</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.Simp.simp.simpLoop#doc\">docs#Lean.Meta.Simp.simp.simpLoop</a>) looks like:</p>\n<ol>\n<li>Check to see if there is a <code>pre</code> lemma that applies to the current expression. If so, apply it and continue looking for applicable <code>pre</code> lemmas.</li>\n<li>Apply a congruence lemma to the current expression. This creates subproblems -- recursively apply simp to these subproblems. (This implements how <code>simp</code> is able to visit subexpressions.)</li>\n<li>Check to see if a <code>post</code> lemma applies to the current expression. If so, apply it and start back at 1.</li>\n</ol>",
        "id": 408624455,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702910271
    }
]