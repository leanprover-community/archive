[
    {
        "content": "<p>This is hopefully just a question about others' workflow.</p>\n<p>Often I'm working in VSCode, and either want to run <code>lake build</code>, or <code>lake exe cache get</code>. If I do so from a terminal within VSCode, likely there is already a Lean 4 server running, and it will \"fight\" with the command I'm running in the terminal (e.g. overwriting olean files).</p>\n<p>I could close VSCode and run these commands in an outside terminal, but this is pretty annoying. Is there a way to stop the Lean 4 server from inside VSCode so I can run this command?</p>\n<p>Perhaps beyond that I think I'd like a keyboard shortcut that:</p>\n<ul>\n<li>stops the server</li>\n<li>runs either <code>lake build</code> or <code>lake exe cache get &amp;&amp; lake build</code> in a new terminal</li>\n<li>restarts the server...</li>\n</ul>\n<p>Advice, or an explanation that I'm doing it wrong, much appreciated. :-)</p>",
        "id": 341935382,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678841177
    },
    {
        "content": "<p>Indeed, I also find it very frustrating that I have no control over when things get built.  And closing a file in vscode doesn't help either, lake just keeps running in the background. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 341935523,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678841263
    },
    {
        "content": "<p>having a \"stop server\" instead of just \"restart server\" would help a lot</p>",
        "id": 341935742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678841366
    },
    {
        "content": "<p>overwriting/corrupting olean files is a bug though, there should be some locking going on</p>",
        "id": 341935974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678841452
    },
    {
        "content": "<p>I usually run <code>sleep 1; killall lean</code> in a loop when starting up vscode to prevent it from running out of memory, and this is also useful when I want to \"stop server\"</p>",
        "id": 341936262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678841555
    },
    {
        "content": "<p>I wonder if we should just disable the auto-build when opening a file.</p>",
        "id": 341936336,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678841595
    },
    {
        "content": "<p>Just make a big \"dependencies not built/up-to-date\" popup instead.</p>",
        "id": 341936380,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678841615
    },
    {
        "content": "<p>One thing I find really annoying is when vscode decides to build something for a while (usually because I was stupid and forgot to fetch the oleans before opening vscode) and even after closing vscode I have some number of lean processes running forever.</p>",
        "id": 341936564,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678841692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20run.20.60lake.20exe.20cache.20get.60.20while.20in.20VSCode/near/341935523\">said</a>:</p>\n<blockquote>\n<p>Indeed, I also find it very frustrating that I have no control over when things get built.  And closing a file in vscode doesn't help either, lake just keeps running in the background. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>Ah I guess this is the same issue :)</p>",
        "id": 341936768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678841780
    },
    {
        "content": "<p>Concerning Scott's original message: there are times where I want to switch branches within mathlib4, and I found that I can do this effectively by remembering to first close all files in vscode, switch branches, use <code>lake exe cache get!</code> (maybe the <code>!</code> is too aggressive, but whatever) in a vscode terminal, restart the server, and only then (re)open the files I want. It's not the most errorproof workflow, but it works.</p>",
        "id": 341937630,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1678842262
    },
    {
        "content": "<p>Okay, it's great/terrible to see that everyone is having the same troubles as me. :-)</p>",
        "id": 341938112,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678842487
    },
    {
        "content": "<p>Here's a \"Stop server\" command, which works, but reports an annoying message: <a href=\"https://github.com/leanprover/vscode-lean4/pull/291\">https://github.com/leanprover/vscode-lean4/pull/291</a></p>",
        "id": 341939343,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1678843220
    },
    {
        "content": "<p>That probably won't help with the issue of runaway Lake and Lean worker processes, will it?</p>",
        "id": 341997378,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678871925
    },
    {
        "content": "<p>In theory, <code>lake</code> should die the next time it tries to write \"Building [...]\" to stderr, though that may of course take an arbitrary amount of time. Apparently there is a much better way to make sure child processes die with their parents, which we could integrate into <code>IO.Process.spawn</code>. Alas, Linux only. <a href=\"https://stackoverflow.com/a/36945270\">https://stackoverflow.com/a/36945270</a></p>",
        "id": 341998396,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678872231
    },
    {
        "content": "<p>If we add a (cross-platform) <code>IO.Process.kill</code>, could we track each thread's open processes and send them sigkill when the thread gets shut down?</p>",
        "id": 342001622,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678873140
    },
    {
        "content": "<p>I think that would also have a propensity to corrupt oleans</p>",
        "id": 342002812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678873488
    },
    {
        "content": "<p><code>lean</code> itself will never corrupt oleans because they are first written to a temporary location and then moved to the final location (assuming you FS supports atomic moves)</p>",
        "id": 342003412,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678873632
    },
    {
        "content": "<p>...as long as you don't run two <code>lean -o</code> processes for the same file</p>",
        "id": 342003596,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678873681
    },
    {
        "content": "<p>is that because the temp location is deterministic?</p>",
        "id": 342003719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678873707
    },
    {
        "content": "<p>two <code>lean -o</code> processes for the same file sounds like a very likely situation, although it is fair to argue that this should be lake's problem to prevent</p>",
        "id": 342003974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1678873771
    },
    {
        "content": "<p>Yes, it is literally just <code>.tmp</code> appended. And yes, the build system should prevent that for more than just that reason.</p>",
        "id": 342004266,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678873833
    },
    {
        "content": "<p>Processes still running after vscode is closed should be a bug in the Lean extension right? It ought to clean everything up upon receiving the disposing signal</p>",
        "id": 342011626,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1678875778
    },
    {
        "content": "<p>I don't see why this should get an editor-specific solution</p>",
        "id": 342013217,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678876166
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20run.20.60lake.20exe.20cache.20get.60.20while.20in.20VSCode/near/342003974\">said</a>:</p>\n<blockquote>\n<p>two <code>lean -o</code> processes for the same file sounds like a very likely situation, although it is fair to argue that this should be lake's problem to prevent</p>\n</blockquote>\n<p>Since we don't have an API for getting temp file handles yet, it's not really a fixable problem...</p>",
        "id": 342139479,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678905740
    },
    {
        "content": "<p>and it looks like windows doesnt even have an API for atomically getting a unique temp file</p>",
        "id": 342139674,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678905800
    },
    {
        "content": "<p>(made a separate topic for that discussion <a href=\"#narrow/stream/270676-lean4/topic/Temp.20file.20utilities\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Temp.20file.20utilities</a>)</p>",
        "id": 342141242,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1678906245
    },
    {
        "content": "<p>FWIW, I have written up a preliminary RFC at <a href=\"https://github.com/leanprover/lean4/pull/2154\">lean4#2154</a></p>",
        "id": 342144935,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678907252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20run.20.60lake.20exe.20cache.20get.60.20while.20in.20VSCode/near/341937630\">said</a>:</p>\n<blockquote>\n<p>Concerning Scott's original message: there are times where I want to switch branches within mathlib4, and I found that I can do this effectively by remembering to first close all files in vscode, switch branches, use <code>lake exe cache get!</code> (maybe the <code>!</code> is too aggressive, but whatever) in a vscode terminal, restart the server, and only then (re)open the files I want. It's not the most errorproof workflow, but it works.</p>\n</blockquote>\n<p>How do you restart the server when no files are open?</p>",
        "id": 342582302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679064534
    },
    {
        "content": "<p>I think that command is only available if you have a lean file open</p>",
        "id": 342582443,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679064566
    },
    {
        "content": "<p>I'd love to see progress on this one. I am still regularly having to close VSCode / logout and login / <code>pkill lean</code> etc. I change branches a lot!</p>\n<p>In particular, the thing I want most is to prevent opening a new file in VSCode starting to rewrite oleans on the disk!</p>",
        "id": 345277320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680055255
    }
]