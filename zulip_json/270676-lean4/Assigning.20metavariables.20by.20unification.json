[
    {
        "content": "<p>This came from a discussion in the Xena server; is there any hope for code such as the below working? Some variation of this used to work in Lean3, iirc:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_complicated_goal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">simpler_goal</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">my_lemma</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">my_complicated_goal</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">simpler_goal</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">my_complicated_goal</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lem</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"c1\">-- type mismatch...</span>\n\n  <span class=\"n\">exact</span> <span class=\"n\">simpler_goal</span> <span class=\"n\">t</span> <span class=\"c1\">-- should be forced by the `exact h`</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 407227526,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1702296752
    },
    {
        "content": "<p>Yes, that is sad. At first I thought replacing the <code>have</code> with a <code>let</code> would help, but I can't get it to work.</p>",
        "id": 407344327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1702341157
    },
    {
        "content": "<p>This seems to be a workaround:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">my_complicated_goal</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">lem</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"bp\">?</span><span class=\"n\">b</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lem</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"bp\">?</span><span class=\"n\">c</span><span class=\"o\">⟩</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">my_lemma</span><span class=\"o\">]</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  case b:</span>\n<span class=\"cm\">  ⊢ ∃ t, (fun t ↦ simpler_goal t) t</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 407345181,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702341594
    },
    {
        "content": "<p>It's got something to do with delayed assignment metavariables, but I don't know what the issue is exactly. If you have just <code>∃ t : Nat, ?a</code>, you'll notice you just have <code>h : ?m.45 t</code>, where (I didn't check this but I have a good guess that) <code>?m.45</code> is registered as a delayed assignment, where it will be assigned once <code>?a</code> is. If <code>?a</code> could be a natural metavariable, then the <code>exact h</code> might go through.</p>",
        "id": 407345742,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702341858
    },
    {
        "content": "<p>I'm not sure to what extent <code>isDefEq</code> can handle assigning to delayed assignment metavariables with <code>withAssignableSyntheticOpaque</code> on. Maybe there's a way to get <code>?m.45 t =?= simple_goal t</code> to see that it's OK to solve <code>?a =?= simple_goal t</code>. Though a problem with delayed assignment metavariables is that <code>instantiateMVars</code> doesn't do anything with them until the metavariable associated to them is <em>completely</em> assigned, with no metavariables remaining.</p>",
        "id": 407346121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702342048
    },
    {
        "content": "<p>In particular, you can't reduce <code>?m.45 t =?= e</code> to <code>?a =?= e</code> unless <code>e</code> has no metavariables, if I'm understanding this all correctly.</p>",
        "id": 407346286,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702342107
    },
    {
        "content": "<p>(My workaround is simulating how natural metavariables get abstracted.)</p>",
        "id": 407346384,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702342160
    },
    {
        "content": "<p>Hmm, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.expandDelayedAssigned%3F#doc\">docs#Lean.Meta.expandDelayedAssigned?</a> suggests that it <em>does</em> try to solve <code>?m.45 t =?= e</code> by reducing it to <code>?a =?= e</code></p>",
        "id": 407349003,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702343265
    },
    {
        "content": "<p>Oh, but then the <code>t</code> in <code>simpler_goal t</code> is not the same fvar as the <code>t</code> in the local context for <code>?a</code>, so defeq fails.</p>",
        "id": 407349326,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702343413
    },
    {
        "content": "<p>There's a comment in that function explaining a possible improvement to the algorithm that should help here.</p>",
        "id": 407349359,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1702343429
    },
    {
        "content": "<p>Recall that, for people who are not Kyle and look for an interesting and useful meta-programming challenge, we need to port <a href=\"https://github.com/Armael/coq-procrastination\">coq-procrastination</a>.</p>",
        "id": 407350443,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1702344014
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"303675\">@Anand Rao Tadipatri</span>, <span class=\"user-mention\" data-user-id=\"479299\">@Jovan Gerbscheid</span>, <span class=\"user-mention\" data-user-id=\"398581\">@Mantas Baksys</span> who worked with handling metavariables this summer to implement something pretty similar to this</p>",
        "id": 407407709,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1702365326
    },
    {
        "content": "<p>The particular example is easy to do with the targeted rewrite that we have, which is able to rewrite under binders.</p>",
        "id": 407416566,
        "sender_full_name": "Jovan Gerbscheid",
        "timestamp": 1702368423
    }
]