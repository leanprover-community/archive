[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">ST.Ref</span> <span class=\"n\">Unit</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">kernel</span><span class=\"o\">)</span> <span class=\"n\">mutually</span> <span class=\"kd\">inductive</span> <span class=\"n\">types</span> <span class=\"n\">must</span> <span class=\"n\">live</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"kd\">universe</span>\n</code></pre></div>\n<p>but..these types to live in the same universe right?  After all the elaborator did not complain about the <code>: Type</code> annotation and if I was to split up the <code>mutual</code> by setting <code>A = Nat</code> in <code>B</code> and <code>B = Nat</code> in <code>A</code> respectively they do end up living in the proper universes.</p>\n<p>Is this a bug?</p>",
        "id": 339579059,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677945541
    },
    {
        "content": "<p>This works though:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">stref</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">stref</span> <span class=\"n\">Unit</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339583799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1677947348
    },
    {
        "content": "<p>Ah I think I'm onto something:</p>\n<p>fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">RefPointed</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Ref</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">RefPointed.type</span>\n  <span class=\"n\">h</span>   <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">mutual</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Ref</span> <span class=\"n\">Unit</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">opaque</span> <span class=\"n\">RefPointed</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Ref</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">RefPointed.type</span>\n  <span class=\"c1\">-- POOF! h   : Nonempty α</span>\n\n<span class=\"kd\">mutual</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Ref</span> <span class=\"n\">Unit</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339584269,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677947482
    },
    {
        "content": "<p>Alternatively further minimized of course:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Ref1</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"c1\">--h   : Nonempty α</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Ref2</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">h</span>   <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">mutual</span>\n\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Ref2</span> <span class=\"n\">Unit</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339585320,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677947932
    },
    {
        "content": "<p>This doesn't seem too surprising, after all if you put a random thing instead of <code>Ref2</code> then it would be unsound, so there will also be cases where it would be fine but Lean still rejects it</p>",
        "id": 339589933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950176
    },
    {
        "content": "<p>Can you elaborate? I don't understand what is wrong</p>",
        "id": 339590118,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677950293
    },
    {
        "content": "<p>For example if <code>Ref2 Unit A</code> unfolds to <code>A -&gt; False</code>, that would be Bad</p>",
        "id": 339590232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950342
    },
    {
        "content": "<p>Right but that would be a non positive occurence and not a universe error would it?</p>",
        "id": 339590531,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677950470
    },
    {
        "content": "<p>Even here it is not very obvious to me what induction principle Lean is supposed to generate for these types</p>",
        "id": 339590563,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950489
    },
    {
        "content": "<p>oh well, I don't really trust Lean to produce the correct error message</p>",
        "id": 339590592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950508
    },
    {
        "content": "<p>Maybe it is connected to the Prop-truncation of <code>Nonempty</code> though?</p>",
        "id": 339590662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950533
    },
    {
        "content": "<p>Already this fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">mutual</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 339590924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950689
    },
    {
        "content": "<p>or even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 339591220,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950835
    },
    {
        "content": "<p>I am not saying that it should be allowed or shouldn't be allowed, just that I am not surprised that it is currently not allowed.</p>",
        "id": 339591430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677950960
    },
    {
        "content": "<p>Yes, Nonempty is inlined, which makes this a mixed-Type/Prop mutual inductive</p>",
        "id": 339592177,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677951336
    },
    {
        "content": "<p>:( So I cannot have mutual inductives with mutable references for now?</p>",
        "id": 339592824,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677951719
    },
    {
        "content": "<p>If you could have one then you could build a cyclic reference right? I was under the impression that was intended to be impossible</p>",
        "id": 339593475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677952089
    },
    {
        "content": "<p>you can do it with an unsafe inductive</p>",
        "id": 339617311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677968299
    }
]