[
    {
        "content": "<p>I'm trying to import a file in <code>Functional Programming in Lean/5.0.lean</code><br>\nI was under the impression that if you surround your strings with \\f&lt;&lt; and \\f&gt;&gt; then it automatically escapes characters that would normally create issues, like spaces. But it seems to not work in this case</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"bp\">«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">».«</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">»</span>\n\n\n<span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">vscode</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---v4.2.0/bin/lake print-paths Init «Functional Programming in Lean».«5.0» --no-build` failed:</span>\n\n<span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">'«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">».«</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">»'</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./././</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"n\">lean</span>\n</code></pre></div>\n<p>It's trying to find a file called <code>5.lean</code> instead. Renaming the file and import to <code>5-0.lean</code> works, but obviously not ideal. Is there a different syntax I can use to support importing a file with multiple <code>.</code>s in its name?</p>",
        "id": 404508048,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1701128968
    },
    {
        "content": "<p>This looks like a bug to me</p>",
        "id": 404508159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129032
    },
    {
        "content": "<p><code>import «Functional Programming in Lean».«5.0.lean»</code> appears to work</p>",
        "id": 404508635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129365
    },
    {
        "content": "<p>is this a lean issue or a lake issue?</p>",
        "id": 404508725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701129433
    },
    {
        "content": "<p>This is a lean issue</p>",
        "id": 404508751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129450
    },
    {
        "content": "<p><code>lean --deps</code> also drops the <code>.0</code></p>",
        "id": 404508760,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129460
    },
    {
        "content": "<p>Also, you can import the same module twice which makes Lean unhappy:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.ohno</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.</span><span class=\"bp\">«</span><span class=\"n\">ohno.lean</span><span class=\"bp\">»</span>\n</code></pre></div>\n<p>(because the definitions already exist)</p>",
        "id": 404508944,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129599
    },
    {
        "content": "<p>This is because Lean uses <code>withExtension</code> to manipulate the file extensions of imports (e.g., to add <code>.lean</code>). This replaces the final \"extension\" (i.e., <code>.0</code>) if there is one.</p>",
        "id": 404508963,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701129602
    },
    {
        "content": "<p>What is it calling <code>withExtension</code> on?</p>",
        "id": 404509114,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129648
    },
    {
        "content": "<p>Arguably putting <code>Functional Programming in Lean/5.0</code> in a <code>FilePath</code> object in the first place is a mistake, because that doesn't represent an actual path</p>",
        "id": 404509379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129734
    },
    {
        "content": "<p>Many things. For example, <a href=\"https://github.com/leanprover/lean4/blob/ffbea840bfca68e682f1d4456e763df3f336875a/src/Lean/Util/Path.lean#L31\"><code>modToFilePath</code> uses <code>withExtension</code></a>.</p>",
        "id": 404509477,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701129772
    },
    {
        "content": "<p>Similarly, so does <a href=\"https://github.com/leanprover/lean4/blob/ffbea840bfca68e682f1d4456e763df3f336875a/src/Lean/Util/Path.lean#L49\"><code>findWithExt</code></a>. Most of the module loading code in Lean and Lake does.</p>",
        "id": 404509648,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701129828
    },
    {
        "content": "<p>That should be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">modToFilePath</span> <span class=\"o\">(</span><span class=\"n\">base</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mod</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span>\n  <span class=\"n\">go</span> <span class=\"n\">mod</span>\n<span class=\"n\">where</span>\n  <span class=\"n\">go</span> <span class=\"o\">:</span> <span class=\"n\">Name</span> <span class=\"bp\">→</span> <span class=\"n\">FilePath</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Name.str</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">go</span> <span class=\"n\">p</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"s2\">\".\"</span> <span class=\"bp\">+</span> <span class=\"n\">ext</span><span class=\"o\">)</span> <span class=\"c1\">-- does `ext` include the `.`?</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Name.anonymous</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">base</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Name.num</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">panic</span><span class=\"bp\">!</span> <span class=\"s2\">\"ill-formed import\"</span>\n</code></pre></div>\n<p>right?</p>",
        "id": 404509726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701129859
    },
    {
        "content": "<p>Something like that would fix this, yes. I am a little curious as to why all of this code used <code>withExtension</code> in the first place. It struck me as weird when I first read it, but I  kind of assumed there was a reason (as doing otherwise is just as easy) so I followed the pattern in Lake.</p>",
        "id": 404509974,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701129994
    },
    {
        "content": "<p><code>findWithExt</code> looks safe until someone makes a <em>package</em> with a bizarre name</p>",
        "id": 404509997,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701130019
    },
    {
        "content": "<p>Note that a <code>findWithExt</code> package is not a Lake package, it is just a root module name. So it would, e.g., break <code>import «Foo-2.0»</code> of the file <code>Foo-2.0.lean</code>.</p>",
        "id": 404510163,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701130097
    },
    {
        "content": "<p>One more thing I want to add here.</p>\n<blockquote>\n<p>import «Functional Programming in Lean».«5.0.lean» appears to work</p>\n</blockquote>\n<p>That \"worked\" meaning it seemed like it could find the <code>5.0.lean</code> file, but it gave a different error <code>unknown package 'sandbox'</code>. This is what my lakefile looked like.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lake</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lake</span> <span class=\"n\">DSL</span>\n\n<span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"v4.2.0\"</span>\n\n<span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">sandbox</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"c1\">-- add package configuration options here</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">default_target</span><span class=\"kd\">]</span>\n<span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">Sandbox</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Sandbox.Sandbox</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">lean_lib</span> <span class=\"bp\">«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">`«</span><span class=\"n\">Functional</span> <span class=\"n\">Programming</span> <span class=\"k\">in</span> <span class=\"n\">Lean</span><span class=\"bp\">»</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>And I had the top level folder <code>Functional Programming in Lean/</code> with the <code>x.y.lean</code> chapter files. I renamed the directory and the lib and import to <code>FPIL</code> and <code>import «FPIL».«5.0.lean»</code> and the error went away and the import works fine now. I don't know if this is related to the original issue with <code>.</code> not being properly escaped, but it seems like a different bug since I only changed the directory name which only includes spaces.</p>",
        "id": 404905058,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1701275395
    },
    {
        "content": "<p>I drafted a fix at <a href=\"https://github.com/leanprover/lean4/pull/2994\">lean4#2994</a></p>",
        "id": 404921744,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701280624
    },
    {
        "content": "<p>Do we really want to fix this? Shouldn't we simply say that such a file name is a bad idea?</p>",
        "id": 404937037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1701286629
    },
    {
        "content": "<p>I can't remember where I read/heard it, but I thought the whole purpose of <code>\\f&lt;&lt; ... \\f&gt;&gt;</code> was to make it easier for less computer-literate mathematicians to start using Lean. I'm a software engineer and I understand why spaces and dots in directory/file names aren't normally used for programming projects. But I also understand that some new Lean users might not get that and think Lean ought to be able to handle it.</p>\n<p>Normally I'd agree and say these are weird names and should be avoided, but I thought that was why <code>\\f&lt;&lt; \\f&gt;&gt;</code> existed in the first place.</p>",
        "id": 404941481,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1701288371
    },
    {
        "content": "<p>I think that pretending we have support for disallowed names via <code>\\f&lt;&lt; \\f&gt;&gt;</code> is more trouble than it is worth. It encourages people to do the bad thing (not use plain vanilla names).</p>",
        "id": 404961124,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701297044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Import.20file.20with.20multiple.20dots.20in.20file.20name/near/404937037\">said</a>:</p>\n<blockquote>\n<p>Do we really want to fix this? Shouldn't we simply say that such a file name is a bad idea?</p>\n</blockquote>\n<p>These two are not mutually exclusive, and we should do both</p>",
        "id": 404964157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701298562
    },
    {
        "content": "<p>I think it's pretty clear that this is just a bug? The patch in <a href=\"https://github.com/leanprover/lean4/pull/2994\">lean4#2994</a> (once I actually get it working) is computationally faster anyway.</p>",
        "id": 404964210,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701298576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Import.20file.20with.20multiple.20dots.20in.20file.20name/near/404961124\">said</a>:</p>\n<blockquote>\n<p>I think that pretending we have support for disallowed names via <code>\\f&lt;&lt; \\f&gt;&gt;</code> is more trouble than it is worth. It encourages people to do the bad thing (not use plain vanilla names).</p>\n</blockquote>\n<p>We are hopefully not pretending.  <code>\\f&lt;&lt; \\f&gt;&gt;</code> names are certainly meant to be supported.</p>",
        "id": 405011575,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701316324
    },
    {
        "content": "<p>I mean, this thread wouldn't exist if disallowed names were supported. :-)</p>",
        "id": 405022800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701319523
    },
    {
        "content": "<p>(That is, by claiming to support bad names, we have encouraged people to use them, thereby discovering the bugs in our handling of bad names!)</p>",
        "id": 405022959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1701319567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/Import.20file.20with.20multiple.20dots.20in.20file.20name/near/405022800\">said</a>:</p>\n<blockquote>\n<p>I mean, this thread wouldn't exist if disallowed names were supported. :-)</p>\n</blockquote>\n<p>\"Supported\" implies intent, and I believe the intent exists even if the implementation is lacking</p>",
        "id": 405024406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701320042
    },
    {
        "content": "<p>It is also worth noting that <code>\\f&lt;&lt; \\f&gt;&gt;</code> names are useful for more than just \"bad\" names. They also enable a wide variety of other useful non-identifier names (e.g., names in foreign languages with characters outside Lean's restricted identifier set).</p>",
        "id": 405062992,
        "sender_full_name": "Mac Malone",
        "timestamp": 1701332188
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2994\">lean4#2994</a> is now green. <span class=\"user-mention\" data-user-id=\"544521\">@Alex Sweeney</span>, could you file a bug report on the lean4 issue tracker so that I can reference it from my PR?</p>",
        "id": 405144447,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1701358978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I haven't submitted an issue here before, so let me know if I need to change anything. I won't be available again until later tonight though.</p>\n<p><a href=\"https://github.com/leanprover/lean4/issues/2999\">https://github.com/leanprover/lean4/issues/2999</a></p>",
        "id": 405157554,
        "sender_full_name": "Alex Sweeney",
        "timestamp": 1701362812
    }
]