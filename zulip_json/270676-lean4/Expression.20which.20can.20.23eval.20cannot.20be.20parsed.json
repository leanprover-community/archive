[
    {
        "content": "<p>I have this expression</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Gives 10</span>\n<span class=\"k\">#eval</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span><span class=\"bp\">;</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>However if I run this through</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>then I get the error <code>&lt;stdin&gt;:1:8: expected term</code>. The same thing happens with <code>let x := 5\\n x + x</code>. How can I make this expression go through parsing?</p>",
        "id": 362075216,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685424395
    },
    {
        "content": "<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 362109794,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685435658
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Expression.20which.20can.20.23eval.20cannot.20be.20parsed/near/362109794\">said</a>:</p>\n<blockquote>\n<p>Do you have an <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>\n</blockquote>\n<p>Yes. (this has some extra stuff since even if the syntax passes parsing it has to parse elaboration too</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">str_to_name</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">):</span> <span class=\"n\">Name</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">s.splitOn</span> <span class=\"s2\">\".\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldl</span> <span class=\"n\">Name.str</span> <span class=\"n\">Name.anonymous</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">subroutine</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"s2\">\"let x : = 5</span><span class=\"se\">\\n</span><span class=\"s2\"> x + x\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">Parser.runParserCategory</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">MonadEnv.getEnv</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">catName</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">IO.println</span> <span class=\"n\">str</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">stx</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expectedType</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"bp\">←</span> <span class=\"n\">instantiateMVars</span> <span class=\"n\">expr</span>\n    <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Meta.ppExpr</span> <span class=\"n\">expr</span><span class=\"o\">)</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">str</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">Environment</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"Init\"</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreM</span> <span class=\"o\">:=</span> <span class=\"n\">Meta.MetaM.run'</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Elab.Term.TermElabM.run'</span> <span class=\"n\">subroutine</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"n\">str_to_name</span> <span class=\"s2\">\"Roundtrip\"</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">coreM.run'</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toBaseIO</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exception</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← exception.toMessageData.toString}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span>            <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Finished\"</span>\n</code></pre></div>",
        "id": 362124437,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1685439330
    }
]