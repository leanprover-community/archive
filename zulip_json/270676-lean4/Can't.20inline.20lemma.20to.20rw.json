[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.RingTheory.IntegralDomain</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.FieldTheory.Finite.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Classical</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Polynomial.sum_eval_eq_iff'</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span>  <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Subgroup</span> <span class=\"o\">(</span><span class=\"n\">Units</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"o\">))}</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">σ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">Fintype.card</span> <span class=\"n\">G</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n\n  <span class=\"c1\">-- rw [mul_div_cancel' (FiniteField.card_cast_subgroup_card_ne_zero G)]</span>\n  <span class=\"c1\">-- -- did not find instance of the pattern in the target expression</span>\n\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span><span class=\"o\">]</span>\n  <span class=\"n\">exact</span> <span class=\"n\">FiniteField.card_cast_subgroup_card_ne_zero</span> <span class=\"n\">G</span>\n  <span class=\"c1\">-- works fine</span>\n</code></pre></div>\n<p>Why can I not do the first one?</p>",
        "id": 397518091,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697725659
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">FiniteField.card_cast_subgroup_card_ne_zero</span> <span class=\"n\">G</span><span class=\"o\">)]</span>\n</code></pre></div>",
        "id": 397518500,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697725785
    },
    {
        "content": "<p>Thank you, I'm dumb.</p>",
        "id": 397518600,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697725807
    },
    {
        "content": "<p>Just ambitious :)</p>",
        "id": 397518640,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697725821
    },
    {
        "content": "<p>Wait I'm still confused</p>",
        "id": 397518739,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697725859
    },
    {
        "content": "<p>Why is the first one not a type error then?</p>",
        "id": 397518779,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697725871
    },
    {
        "content": "<p>It looks like Lean tries to make sense of that as <code>(a : ?G0)</code></p>",
        "id": 397519798,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697726167
    },
    {
        "content": "<p>If I do <code>  have := mul_div_cancel' (FiniteField.card_cast_subgroup_card_ne_zero G)</code> it gives </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">typeclass</span> <span class=\"kd\">instance</span> <span class=\"n\">problem</span> <span class=\"n\">is</span> <span class=\"n\">stuck</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">often</span> <span class=\"n\">due</span> <span class=\"n\">to</span> <span class=\"n\">metavariables</span>\n  <span class=\"n\">CommGroupWithZero</span> <span class=\"bp\">?</span><span class=\"n\">m.1195</span>\n</code></pre></div>\n<p>Why isn't that the error I see in my example?</p>",
        "id": 397520032,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697726247
    },
    {
        "content": "<p>It appears if you trace the output with <code>trace.Meta.isDefEq</code></p>",
        "id": 397520188,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1697726297
    },
    {
        "content": "<p>It seems to me I shouldn't have to do a fancy trace to see that if this is the problem</p>",
        "id": 397520633,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1697726448
    },
    {
        "content": "<p>I think in the context of <code>rw</code>, stuck TC problems are allowed and resolved later</p>",
        "id": 397521524,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697726713
    },
    {
        "content": "<p>But it's still weird that that example gets that far, because it looks like there's a universe issue long before a typeclass issue</p>",
        "id": 397521618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697726743
    }
]