[
    {
        "content": "<p>--- Meant to post this in \"Is there code for X?\"<br>\nI'd like an easy way to \"unfold\" a short sum.  For Finset.Ico I found this way, which is not too bad, but I had trouble with using the repeat tactic on the rw</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.BigOperators.Intervals</span>\n<span class=\"kn\">open</span> <span class=\"n\">BigOperators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_lem</span> <span class=\"o\">:</span> <span class=\"bp\">âˆ‘</span> <span class=\"n\">n</span> <span class=\"k\">in</span> <span class=\"n\">Finset.Ico</span> <span class=\"mi\">3</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"mi\">3</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">g</span> <span class=\"mi\">6</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_sum_Ico_succ_bot</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_sum_Ico_succ_bot</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_sum_Ico_succ_bot</span><span class=\"o\">]</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Finset.sum_eq_sum_Ico_succ_bot</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- Extra simplification before closing goal</span>\n</code></pre></div>\n<p>Just wondering if this is the simplest way.  I tried using the repeat tactic and that went into an infinite loop and crashed the lean server.</p>",
        "id": 395168637,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1696566932
    },
    {
        "content": "<p>does <code>simp [Finset.sum_eq_sum_Ico_succ_bot]</code> do the right thing? I'm sorta surprised if it doesn't</p>",
        "id": 395172121,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696568400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Explicit.20summation.20for.20small.20sums/near/395172121\">said</a>:</p>\n<blockquote>\n<p>does <code>simp [Finset.sum_eq_sum_Ico_succ_bot]</code> do the right thing? I'm sorta surprised if it doesn't</p>\n</blockquote>\n<p>Yes that's better, thanks!</p>",
        "id": 395172761,
        "sender_full_name": "Teddy Baker",
        "timestamp": 1696568700
    },
    {
        "content": "<p><code>simp [x]</code> does use an entirely different algorithm from <code>rw [x]</code>, so it can't <em>always</em> be dropped in for <code>rw</code>, but for most common cases <code>simp</code> is like a repeated rewrite :D</p>",
        "id": 395172945,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1696568801
    }
]