[
    {
        "content": "<p>Hi, I have the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">BinTree</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BinTree.leaf</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BinTree.leaf</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BinTree.branch</span> <span class=\"n\">l</span> <span class=\"n\">x</span> <span class=\"n\">r</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BinTree.branch</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This gives <code>unknown identifier 'map'</code>. With <code>Functor.map</code> instead, I get <code>failed to synthesize instance\n  Functor BinTree</code>. How do I write a recursive typeclass method?</p>",
        "id": 362929116,
        "sender_full_name": "James Sully",
        "timestamp": 1685681409
    },
    {
        "content": "<p>You implement it is a separate function and provide the instwce to the type class mechanism</p>",
        "id": 362931379,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685682737
    },
    {
        "content": "<p>But it would indeed be very cool if this worked ^^</p>",
        "id": 362931403,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685682755
    },
    {
        "content": "<p>ah, thanks very much</p>",
        "id": 362974714,
        "sender_full_name": "James Sully",
        "timestamp": 1685696433
    },
    {
        "content": "<p>yep that worked</p>",
        "id": 362974726,
        "sender_full_name": "James Sully",
        "timestamp": 1685696437
    },
    {
        "content": "<p>I don't hate that to be honest, it feels organised to have a separate named map in the relevant namespace for each type</p>",
        "id": 362975006,
        "sender_full_name": "James Sully",
        "timestamp": 1685696494
    },
    {
        "content": "<p>If for some reason you don't want to add a separate definition, you can also make do with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 363056278,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1685713582
    },
    {
        "content": "<p>ah, I wasn't aware you could have a <code>let</code> immediately inside an <code>instance where</code></p>",
        "id": 363057836,
        "sender_full_name": "James Sully",
        "timestamp": 1685713907
    },
    {
        "content": "<p>Ah, no you can't. It would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">BinTree</span> <span class=\"n\">where</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n    <span class=\"n\">map</span>\n</code></pre></div>",
        "id": 363378942,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1685824862
    }
]