[
    {
        "content": "<p>In the <code>elan/toolchains</code> folder if you ask for the sizes of each toolchain you get something similar to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Mohanad@LAPTOP-OTL5MR4E MINGW64 ~/.elan/toolchains\n$ du -h --max-depth=1 | sort -n\n5.3G    .\n26M     ./leanprover-community--lean---3.43.0\n26M     ./leanprover-community--lean---3.50.0\n26M     ./leanprover-community--lean---3.51.0\n26M     ./leanprover-community--lean---3.51.1\n739M    ./stable\n906M    ./leanprover--lean4---nightly-2023-06-20\n907M    ./leanprover--lean4---nightly\n907M    ./leanprover--lean4---nightly-2023-07-12\n907M    ./nightly\n908M    ./leanprover--lean4---nightly-2023-07-15\n</code></pre></div>\n<p>All the lean 3 toolchains are very small about 26M compared to the above 800MB sizes of the lean4 toolchains. I find this surprising. Looking into the folders the bulk of the size is coming from <code>lib\\lean\\Lean</code>. What is Lean4 doing that requires it to be very big (and according to my subjective feeling slower)? </p>\n<p>I have a vague idea that \"lean is now extensible in the lean language and most of its components are compiled from lean into <code>.oleans</code> that are packed with the toolchain. The main in these \"written in lean components\" being the subfolders of <code>lib\\lean\\Lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">Compiler</span> <span class=\"bp\">|</span> <span class=\"n\">Data</span> <span class=\"bp\">|</span> <span class=\"n\">Elab</span> <span class=\"bp\">|</span> <span class=\"n\">Linter</span> <span class=\"bp\">|</span> <span class=\"n\">Meta</span> <span class=\"bp\">|</span> <span class=\"n\">Parser</span> <span class=\"bp\">|</span> <span class=\"n\">ParserCompiler</span> <span class=\"bp\">|</span> <span class=\"n\">PrettyPrinter</span> <span class=\"bp\">|</span> <span class=\"n\">Server</span> <span class=\"bp\">|</span> <span class=\"n\">Util</span> <span class=\"bp\">|</span> <span class=\"n\">Widget</span>\n</code></pre></div>\n<p>I am trying to understand,  so I have no clear questions but feel free to chime in with any thoughts. Perhaps a few \"vague questions\":</p>\n<ol>\n<li>where can I read about the change in architecture (or only the new architecture) </li>\n<li>what makes things compiled into oleans bigger in size than whatever lean 3 was doing to compile them ? Is there anywhere I can read about this?</li>\n</ol>",
        "id": 379180965,
        "sender_full_name": "MohanadAhmed",
        "timestamp": 1690467872
    },
    {
        "content": "<p>This thread contains some info why Lean 4's oleans are bigger, and how we can reduce some of that size: <a href=\"#narrow/stream/270676-lean4/topic/olean.20dump.20tool\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/olean.20dump.20tool</a></p>",
        "id": 379191565,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1690469482
    },
    {
        "content": "<p>Its not only the Oleans, large chunks of this amount are caused by shared objects such as LLVM that we ship</p>",
        "id": 379248294,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1690479080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"497480\">MohanadAhmed</span> <a href=\"#narrow/stream/270676-lean4/topic/Lean.204.20Toolchain.20much.20bigger.20than.20lean3/near/379180965\">said</a>:</p>\n<blockquote>\n<p>and according to my subjective feeling slower</p>\n</blockquote>\n<p>This subjective feeling is mostly wrong. We've stopped running the comparison bot against mathlib3, but there was overall about a 1.8x wallclock speedup compiling mathlib4 vs mathlib3 (and a 3.3x speedup in CPU time).</p>",
        "id": 379322911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690501052
    },
    {
        "content": "<p>(and that's before people started seriously refactoring the slow files that were ported at the very end)</p>",
        "id": 379323008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690501096
    },
    {
        "content": "<p>Presumably the larger oleans mean that Lean is more I/O bound than it used to be?</p>",
        "id": 379323058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690501127
    },
    {
        "content": "<p>And so on systems with slow hard drives, Lean4 could be slower than Lean 3</p>",
        "id": 379323081,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690501146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> while this may be a factor, Lean does memory map oleans and share them across executions, so that should significantly decrease the amount of drive I/O that occurs.</p>",
        "id": 379328579,
        "sender_full_name": "Mac Malone",
        "timestamp": 1690504084
    },
    {
        "content": "<p>not compared to lean 3 because lean 3 didn't use interprocess memory in the first place</p>",
        "id": 379331462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690505229
    },
    {
        "content": "<p>lean 3 was its own build system so everything was running in the same process</p>",
        "id": 379331515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690505249
    }
]