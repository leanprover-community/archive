[
    {
        "content": "<p>Is there a way to run <code>lean</code> in typecheck-only mode, without building the full project? (something like <code>tsc</code> in TypeScript or <code>cargo check</code> in Rust)</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Things I've tried</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p><code>lean --help | less</code> - no flags for typecheck-only mode</p>\n<p><code>lake --help | less</code> - no flags for typecheck-only mode</p>\n<p>Check each file manually using the following script - prints errors about unknown packages (which is incorrect, since the packages are defined in lakefile, and <code>lake build</code> doesn't print any errors):</p>\n<p>(the script is not formatted because the \"code\" formatting conflicts with \"spolier\" formatting in Zulip)</p>\n<p>#!/usr/bin/env bash</p>\n<p>FILES=$(fd --glob '*.lean' .)</p>\n<p>for FILE in $FILES<br>\ndo<br>\n  lake env lean --root=~/workspace/playbook $FILE<br>\ndone</p>\n</div></div>",
        "id": 385039595,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692087736
    },
    {
        "content": "<p>everything lean does is basically typechecking, so that doesn't actually narrow things down much</p>",
        "id": 385039856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692087807
    },
    {
        "content": "<p>the direct answer to your question is no, there is no such facility - lean has only one mode it can use to elaborate files. <a class=\"stream-topic\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4/topic/quick.20and.20dirty.20mode\">#lean4 &gt; quick and dirty mode</a> was a proposal to add such a \"quick mode\" which prioritizes getting type signatures right and parsing the file correctly but doing as little other work as possible, but it's hard because lean code can do arbitrary things at compile time so it is difficult to bound the things that are required to keep later things compiling</p>",
        "id": 385040816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692088072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599279\">Denis Gorbachev</span> has marked this topic as resolved.</p>",
        "id": 385041285,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692088183
    },
    {
        "content": "<p>Lake does know about two different 'levels' to which you can build your project: you can either build a library, generating only .olean and .c files, or you can build an executable, which also builds .o files and links them into an executable</p>",
        "id": 385041388,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692088207
    },
    {
        "content": "<p>the latter step involves C compiling but it is generally not much of a bottleneck</p>",
        "id": 385041504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692088236
    },
    {
        "content": "<p>Looks like \"bin\" facet in <code>lake build</code> is the default one already</p>\n<p><code>bin (default)         Lean binaries (*.olean, *.ilean files) and *.c file</code></p>",
        "id": 385041721,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692088298
    },
    {
        "content": "<p>it depends on whether your lakefile has a <code>lean_lib</code> or <code>lean_exe</code> target</p>",
        "id": 385041887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692088338
    },
    {
        "content": "<p>(you will almost always have a <code>lean_lib</code>, but if you are making an executable you will also have a <code>lean_exe</code> that depends on the lib)</p>",
        "id": 385042028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692088385
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 385042173,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692088429
    },
    {
        "content": "<p>Thank you</p>",
        "id": 385042187,
        "sender_full_name": "Denis Gorbachev",
        "timestamp": 1692088431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Typecheck-only/near/385039856\">said</a>:</p>\n<blockquote>\n<p>everything lean does is basically typechecking, so that doesn't actually narrow things down much</p>\n</blockquote>\n<p>Lean does actually always perform code generation as well to down the optimized lambda RC level, it just doesn't necessarily emit the code as C/LLVM. And this time is known to be significant for files with big computational content sadly. So it would be possible to write a mode where we don't do that I guess?</p>",
        "id": 385086270,
        "sender_full_name": "Henrik BÃ¶ving",
        "timestamp": 1692098377
    },
    {
        "content": "<p>I was thinking about that, but I think what I said still applies - because downstream code may need that compiled code to be there (e.g. it is evaluated by a tactic) it is hard to safely avoid doing the work</p>",
        "id": 385248423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692117013
    }
]