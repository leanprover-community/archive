[
    {
        "content": "<p>I was wondering if there's any way I might be able to automate generating a category from a type definition. For example, I can define what a graph is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"n\">where</span>\n  <span class=\"n\">Vertex</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">Edge</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"n\">source</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"bp\">→</span> <span class=\"n\">Vertex</span>\n  <span class=\"n\">target</span> <span class=\"o\">:</span> <span class=\"n\">Edge</span> <span class=\"bp\">→</span> <span class=\"n\">Vertex</span>\n</code></pre></div>\n<p>and then define what a graph homomorphism is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">GraphHomomorphism</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mapVertex</span> <span class=\"o\">:</span> <span class=\"n\">G.Vertex</span> <span class=\"bp\">→</span> <span class=\"n\">H.Vertex</span>\n  <span class=\"n\">mapEdge</span> <span class=\"o\">:</span> <span class=\"n\">G.Edge</span> <span class=\"bp\">→</span> <span class=\"n\">H.Edge</span>\n  <span class=\"n\">mapSource</span> <span class=\"o\">:</span> <span class=\"n\">H.source</span> <span class=\"bp\">∘</span> <span class=\"n\">mapEdge</span> <span class=\"bp\">=</span> <span class=\"n\">mapVertex</span> <span class=\"bp\">∘</span> <span class=\"n\">G.source</span>\n  <span class=\"n\">mapTarget</span> <span class=\"o\">:</span> <span class=\"n\">H.target</span> <span class=\"bp\">∘</span> <span class=\"n\">mapEdge</span> <span class=\"bp\">=</span> <span class=\"n\">mapVertex</span> <span class=\"bp\">∘</span> <span class=\"n\">G.target</span>\n</code></pre></div>\n<p>and then define composition of homomorphisms, prove it's associative, and prove each graph has an identity homomorphism.</p>\n<p>But this whole process could be automated by code to generate a category out of any <code>structure</code> type: the homomorphism type would get a <code>mapX</code>field for each field <code>x</code> in the original structure, whose type is the homomorphism type for the field type (with <code>Type</code>-homomorphisms being functions, and <code>X -&gt; Y</code>-homomorphisms being commutative squares).</p>\n<p>Ideally I could then just do <code>def graphCategory : Category := generateCategory Graph</code> and it would auto-generate everything.</p>\n<p>Has something like this been done before?</p>",
        "id": 377496531,
        "sender_full_name": "James Randolf",
        "timestamp": 1690006748
    },
    {
        "content": "<p>I think that the nearest we have to this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bundled#doc\">docs#CategoryTheory.Bundled</a> .</p>\n<p>One issue with pushing this further is that you can't guess the morphisms in general. For example let's say I gave you the definition of a topological space or a scheme. It's not at all obvious what the definition of a morphism should be just from a definition of the objects.</p>",
        "id": 377500029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690008334
    },
    {
        "content": "<p>Also when there are contravariant or mixed stuff there's no clear way forward</p>",
        "id": 377583808,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1690028769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/Automating.20generation.20of.20category.20from.20structure.20type/near/377500029\">said</a>:</p>\n<blockquote>\n<p>I think that the nearest we have to this is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=CategoryTheory.Bundled#doc\">docs#CategoryTheory.Bundled</a> .</p>\n<p>One issue with pushing this further is that you can't guess the morphisms in general. For example let's say I gave you the definition of a topological space or a scheme. It's not at all obvious what the definition of a morphism should be just from a definition of the objects.</p>\n</blockquote>\n<p>While it is possible to guess that morphisms of topological spaces are continuous functions by looking at the type of the only data field <code>IsOpen</code> (though I'm not sure that one can guess the right implication), if you look at metric spaces, the task becomes impossible because one can define several meaningful types of morphisms: continuous maps, Lipschitz continuous maps, maps that are Lipschitz continuous with constant 1, isometric maps, dilations, probably more.</p>",
        "id": 377598483,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1690032242
    },
    {
        "content": "<p>A middle ground would be to define the morphisms and have a tactic check composition, associativity, and identity properties (when trivial).</p>",
        "id": 377609788,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1690034542
    },
    {
        "content": "<p>We already have <code>aesop</code> for that :-)</p>",
        "id": 377615374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1690035972
    },
    {
        "content": "<p>For algebraic-like categories, meaning structures where the data fields are operations on some type, this is certainly possible to automate</p>",
        "id": 377623044,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690038055
    },
    {
        "content": "<p>Ideally such automation would become part of a hierarchy builder in the spirit of <a href=\"https://github.com/math-comp/hierarchy-builder\">https://github.com/math-comp/hierarchy-builder</a></p>",
        "id": 377623475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1690038169
    },
    {
        "content": "<p>I think the payoff does not come from automating the construction of the category itself, but all the stuff that comes later \"for free\" for algebraic categories: limits, filtered colimits preserved by <code>forget</code>, internal objects, etc.</p>",
        "id": 377695045,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690067828
    },
    {
        "content": "<p>That would be a cool project!</p>",
        "id": 377695100,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1690067837
    },
    {
        "content": "<p>As it happens, I've started working on some stuff that will automatically generate a category from a type definition. See: <a href=\"https://github.com/tswett/leanstuff/blob/main/Menagerie/Meta/VarietyInfo/Extract.lean\">https://github.com/tswett/leanstuff/blob/main/Menagerie/Meta/VarietyInfo/Extract.lean</a> and <a href=\"https://github.com/tswett/leanstuff/blob/main/Menagerie/Meta/VarietyInfo/Synthesize.lean\">https://github.com/tswett/leanstuff/blob/main/Menagerie/Meta/VarietyInfo/Synthesize.lean</a></p>\n<p>I've only just barely started; I have a thing that will look at a structure and see what the types in it are, but that's about it. Maybe in a few weeks I'll have something that can automatically generate a category in at least one circumstance.</p>\n<p>It's true that in general, you can't guess which way the functions are supposed to do. Initially, I'm just going to assume that all sorts are covariant, and so it won't be possible to define a topological space. Eventually, I'll probably add a mechanism for specifying whether a sort is covariant (a morphism A -&gt; B contains a function A.whatever -&gt; B.whatever), contravariant (a morphism A -&gt; B contains a function B.whatever -&gt; A.whatever), or invariant (a morphism A -&gt; B contains a bijection A.whatever &lt;-&gt; B.whatever).</p>",
        "id": 378270119,
        "sender_full_name": "Tanner Swett",
        "timestamp": 1690231489
    }
]