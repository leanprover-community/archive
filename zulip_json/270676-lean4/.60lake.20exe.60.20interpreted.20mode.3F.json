[
    {
        "content": "<p>It <a href=\"https://github.com/leanprover-community/mathlib4/pull/4289#discussion_r1204209579\">came up in discussion</a> that we could try to decrease the runtime of <code>lake exe cache get</code> by running it in interpreted mode instead of compiling and then running it. However I don't see an easy option to do this in lake (the ideal interface being a <code>interpretIfNotBuilt := true</code> option on the <code>lake_exe cache</code> target) and the lake internals make me a bit queasy. Any ideas how this can be done?</p>",
        "id": 361187691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685060259
    },
    {
        "content": "<p>Did you benchmark the interpreted version?  I wouldn't be surprised if compilation overhead - interpretation overhead is only a small fraction of the total runtime (which at least on my machine is dominated by the unpacking).  And the compilation overhead is really only compiling Cache.Main and linking the executable, the rest happens in parallel.</p>",
        "id": 361188608,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685060915
    },
    {
        "content": "<p>No, because I couldn't figure out how to wrangle lake to do it in the first place</p>",
        "id": 361190358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062168
    },
    {
        "content": "<p>that was the point of the exercise</p>",
        "id": 361190367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062176
    },
    {
        "content": "<p>You can run the build and run steps separately though.  That is,</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">time</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>cache\n<span class=\"nb\">time</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>env<span class=\"w\"> </span>./build/bin/cache\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">time</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span>Cache.Main\n<span class=\"nb\">time</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>env<span class=\"w\"> </span>lean<span class=\"w\"> </span>--run<span class=\"w\"> </span>Cache/Main.lean\n</code></pre></div>",
        "id": 361190499,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062270
    },
    {
        "content": "<p>Of course it is only a small fraction of the work. Most of the actual time is spent in <code>curl</code>, as it should be. But it's somewhere around 8 seconds to compile fresh, which seems worse than what I could do with a python script</p>",
        "id": 361190541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062321
    },
    {
        "content": "<p>For me the first steps are 3.6s - 2.8s = 0.8s, and the interpreted version actually fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--run Cache/Main.lean get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">2713</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span> <span class=\"mi\">2713</span><span class=\"bp\">/</span><span class=\"mi\">2713</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n</code></pre></div>",
        "id": 361190733,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062441
    },
    {
        "content": "<p>I've gotten that error before even with regular <code>lake exe cache get</code></p>",
        "id": 361190810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062479
    },
    {
        "content": "<p>what is that subtraction measuring?</p>",
        "id": 361190879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062540
    },
    {
        "content": "<p>The difference between building+compiling cache and building Cache.Main, i.e., the compilation overhead.</p>",
        "id": 361190945,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062566
    },
    {
        "content": "<p>is it possible to do <code>lean --run Cache/Main.lean</code> without the <code>build</code> step?</p>",
        "id": 361190972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062601
    },
    {
        "content": "<p>No, of course not.</p>",
        "id": 361190983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062617
    },
    {
        "content": "<p>that is, does it need <code>Cache.Main</code> to be built, or just its dependencies</p>",
        "id": 361191015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062645
    },
    {
        "content": "<p>you might be building <code>Cache.Main</code> twice that way</p>",
        "id": 361191035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062662
    },
    {
        "content": "<p>Ah, probably only the dependencies.</p>",
        "id": 361191042,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062666
    },
    {
        "content": "<p>timing aside I got a similar error as you:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"n\">Cache.Main</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--run Cache/Main.lean get</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">2713</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">Downloaded</span> <span class=\"mi\">2713</span><span class=\"bp\">/</span><span class=\"mi\">2713</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"mi\">100</span><span class=\"bp\">%</span><span class=\"o\">]</span>\n<span class=\"n\">No</span> <span class=\"n\">cache</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">decompress</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.IO</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Hashing</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Requests</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">3</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">4</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Cache.Main</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"mi\">8</span><span class=\"bp\">/</span><span class=\"mi\">8</span><span class=\"o\">]</span> <span class=\"n\">Linking</span> <span class=\"n\">cache</span>\n<span class=\"n\">Attempting</span> <span class=\"n\">to</span> <span class=\"n\">download</span> <span class=\"mi\">2235</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 361191191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062769
    },
    {
        "content": "<p>it is interesting that the second run of <code>lake exe cache get</code> still wanted to download things</p>",
        "id": 361191214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062794
    },
    {
        "content": "<p>I think the first one just didn't download anything at all.  You probably had 2713-2235 cache files already downloaded before.</p>",
        "id": 361191506,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062830
    },
    {
        "content": "<p>really? It spent a while going through all 2713 files in the first run</p>",
        "id": 361191678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062877
    },
    {
        "content": "<p>404s take time as well. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 361191797,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685062905
    },
    {
        "content": "<p>It should say <code>, N failures</code> during the download if it's not getting OK 200</p>",
        "id": 361192085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685062949
    },
    {
        "content": "<p>when I try to run <code>lake env lean --run Cache/Main.lean get</code> again, it tries to download 2713 files again</p>",
        "id": 361192354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685063017
    },
    {
        "content": "<p>I don't get that message at all, not even with the compiled version.  This is after adding a line to Mathlib/Dynamics/Flow.lean:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lake<span class=\"w\"> </span>exe<span class=\"w\"> </span>cache<span class=\"w\"> </span>get\nAttempting<span class=\"w\"> </span>to<span class=\"w\"> </span>download<span class=\"w\"> </span><span class=\"m\">6</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\nDownloaded<span class=\"w\"> </span><span class=\"m\">6</span>/6<span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"m\">100</span>%<span class=\"o\">]</span>\nDecompressing<span class=\"w\"> </span><span class=\"m\">2707</span><span class=\"w\"> </span>file<span class=\"o\">(</span>s<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 361192384,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685063042
    },
    {
        "content": "<p>oh, oops I double checked and it reports a failure for anything except <code>.ok 200 | .ok 404</code></p>",
        "id": 361192692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685063108
    },
    {
        "content": "<p>It should probably report how many 200s it's getting</p>",
        "id": 361192922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685063161
    },
    {
        "content": "<p>yep, they are all 404s</p>",
        "id": 361194937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685063588
    },
    {
        "content": "<p>The bug appears to be caused by <code>rootHash</code> being set nondeterministically to random values when <code>cache</code> is run in the interpreter, even though the initializer does seem to be running and produces the correct result. I have a fix for <code>cache</code> to not use <code>initialize</code> in <a href=\"https://github.com/leanprover-community/mathlib4/pull/4369\">!4#4369</a> which fixes this bug, but there is another bug regarding <code>initialize</code> returning bogus values which I'm still not sure about.</p>",
        "id": 361203746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685069127
    },
    {
        "content": "<p>Here's a MWE:<br>\n<code>Test.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">initialize</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">UInt32</span> <span class=\"bp\">←</span> <span class=\"n\">pure</span> <span class=\"mi\">1234</span>\n</code></pre></div>\n<p><code>Main.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Test</span>\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"n\">IO.println</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">test</span>\n<span class=\"mi\">1234</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">test</span>\n<span class=\"mi\">1234</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--run Main.lean</span>\n<span class=\"mi\">2469</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--run Main.lean</span>\n<span class=\"mi\">2469</span>\n</code></pre></div>\n<p>and with no changes other than changing the type of <code>foo</code> to <code>UInt64</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">test</span>\n<span class=\"mi\">1234</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">test</span>\n<span class=\"mi\">1234</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--run Main.lean</span>\n<span class=\"mi\">139969183532424</span>\n<span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">env</span> <span class=\"n\">lean</span> <span class=\"c1\">--run Main.lean</span>\n<span class=\"mi\">139869239559560</span>\n</code></pre></div>",
        "id": 361204708,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685069795
    },
    {
        "content": "<p>the 2469 looks very much like a tagged pointer being interpreted as an integer, so this is most likely an ABI mismatch</p>",
        "id": 361204761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685069839
    },
    {
        "content": "<p>This brings back memories. <a href=\"https://github.com/leanprover/lean4/issues/1998\">https://github.com/leanprover/lean4/issues/1998</a></p>",
        "id": 361205060,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685070041
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/initializing.20data.20from.20IO/near/318427595\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/initializing.20data.20from.20IO/near/318427595</a></p>",
        "id": 361205111,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685070072
    },
    {
        "content": "<p>more precisely, I think the initializer is being stored boxed and read as unboxed, which is why in the u32 case you see an extra 1 bit (the tag for small integers) and in the u64 case you see a pointer value</p>",
        "id": 361205671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685070429
    },
    {
        "content": "<p>Oh right, I also forgot to report that you can run <code>#eval main</code> in the server as well, and you see the same ABI mismatch issue, which I suppose should not be a surprise</p>",
        "id": 361205860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685070563
    },
    {
        "content": "<p>Hmm, I thought <code>1234</code> shouldn't be boxed.</p>",
        "id": 361205960,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1685070635
    },
    {
        "content": "<p>it seems like UInt64 is always boxed in interpreted mode?</p>",
        "id": 361209132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685072845
    },
    {
        "content": "<p><code>1234</code> is indeed not boxed when it's a <code>UInt32</code>, that's why it looks like <code>2469</code></p>",
        "id": 361209230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685072886
    },
    {
        "content": "<p>or rather, it's in the \"inline\" variant of a <code>lean_object*</code> ABI, while it was supposed to be using <code>uint32_t</code> i.e. actually unboxed</p>",
        "id": 361209302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685072945
    },
    {
        "content": "<p>I think the bug is here: when we load a constant <a href=\"https://github.com/leanprover/lean4/blob/8d4dd23/src/library/compiler/ir_interpreter.cpp#L812\">we use the type and load <code>uint64</code> as itself</a> but when we initialize the constant <a href=\"https://github.com/leanprover/lean4/blob/8d4dd23/src/library/compiler/ir_interpreter.cpp#L1038\">we always store it as <code>object*</code></a></p>",
        "id": 361224125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685081230
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2236\">lean4#2236</a></p>",
        "id": 361260603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685091766
    }
]