[
    {
        "content": "<p>In the Functional Programming book, we encounter a coercion from <code>NonEmptyList</code> to <code>List</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n</code></pre></div>\n<p>and a claim that 'This allows non-empty lists to be used with the entire List API.'  I am not sure what this entails; for instance, I am trying to append two <code>NonEmptyList</code>s and it fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myNeList</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"hello\"</span><span class=\"o\">,</span> <span class=\"s2\">\"my\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mySnList</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">List.append</span> <span class=\"n\">myNeList</span> <span class=\"o\">[</span><span class=\"s2\">\"world\"</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">List.append</span> <span class=\"bp\">?</span><span class=\"n\">m.1468</span> <span class=\"o\">[</span><span class=\"s2\">\"world\"</span><span class=\"o\">]</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>What am I doing wrong here?  Ultimately, I just want to be able to do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">concList</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">myNeList</span> <span class=\"bp\">++</span> <span class=\"n\">mySnList</span>\n</code></pre></div>",
        "id": 374542503,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1689153251
    },
    {
        "content": "<p>Well, you're successfully calling <code>List.append</code> and this creates a new <code>List</code>. At this point, lean says \"hold on, is that new <code>List</code> really nonempty?\" - and this is indeed something you need to prove</p>",
        "id": 374545557,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1689153869
    },
    {
        "content": "<p>Yeah, it means you can use <code>NonEmptyList</code> wherever a <code>List</code> is expected, but it doesn't mean you can use a <code>List</code> wherever a <code>NonEmptyList</code> is expected.</p>",
        "id": 374546401,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689154038
    },
    {
        "content": "<p>Coercions allow you to use <code>NonEmptyList</code>s where a <code>List</code> would be expected, but it only goes one way. For example, this definition doesn't give an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">myNeList</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"o\">({</span><span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"s2\">\"hello\"</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"s2\">\"my\"</span><span class=\"o\">]}</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If you wanted to do things the other way around, you would need to have a coercion from <code>List</code> to <code>NonEmptyList</code>. This, however, is not possible since you'd also need to coerce empty lists into a nonempty one. If you want to go deeper, there is a way to have some form of  such coercion using a dependent coe, called <code>CoeDep</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨{</span><span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">l</span><span class=\"o\">}⟩</span>\n</code></pre></div>\n<p>Using this, any list that has a term on the head will be able to coerce to a <code>NonEmptyList</code>. This makes your first definition <code>myNeList</code> work. However, it's not so obvious to Lean that your second list <code>mySnList</code> has such a shape, and as such, you'll still get an error on it.</p>",
        "id": 374547033,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689154169
    },
    {
        "content": "<p>You could define your own constructor that tries to prove nonemptiness automatically using <code>simp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.ofList</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">≠</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">xs.head</span> <span class=\"n\">nonempty</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs.tail</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">NonEmptyList.coe_ofList</span> <span class=\"o\">(</span><span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span><span class=\"o\">:</span> <span class=\"n\">xs</span> <span class=\"bp\">≠</span> <span class=\"o\">[])</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">NonEmptyList.ofList</span> <span class=\"n\">xs</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">nonempty</span>\n  <span class=\"bp\">·</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ofList</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">myNeList</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"o\">[</span><span class=\"s2\">\"hello\"</span><span class=\"o\">,</span> <span class=\"s2\">\"my\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mySnList</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.append</span> <span class=\"n\">myNeList</span> <span class=\"o\">[</span><span class=\"s2\">\"world\"</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">myNeListOfNeList</span> <span class=\"o\">(</span><span class=\"n\">neList</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ofList</span> <span class=\"n\">neList</span>\n</code></pre></div>",
        "id": 374548161,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689154402
    },
    {
        "content": "<p>My problem with all this is that the Functional Programming book is using the above code in the Applicative section: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Validate</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span>     <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">errors</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span>    <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">e'</span><span class=\"o\">)</span> <span class=\"c1\">-- NonEmptyList coercion fails to concatenate</span>\n</code></pre></div>\n<p>This code is directly from that book and it fails.  I am not sure what I am missing, since the definitions and instances regarding <code>NonEmptyList</code> are scattered throughout the text.</p>",
        "id": 374582545,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1689161127
    },
    {
        "content": "<p>I wrote an implementation of <code>HAppend</code> for non-empty lists, but the error in the above code persists :(</p>",
        "id": 374745028,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1689195823
    },
    {
        "content": "<p>This works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Validate</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span>     <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">errors</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">α</span><span class=\"o\">):=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">CoeDep</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Append</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">append</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">{</span><span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span>    <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">++</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 374746997,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689196581
    },
    {
        "content": "<p>but you're right, it's unfortunate that code coming straigth from the book doesn't work</p>",
        "id": 374747989,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689196973
    },
    {
        "content": "<p>Looking back at this, I'm having a hard time accepting that this shouldn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">NonEmptyList</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">tail</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Validate</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">ok</span>     <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n  <span class=\"bp\">|</span> <span class=\"n\">errors</span> <span class=\"o\">:</span> <span class=\"n\">NonEmptyList</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"n\">Validate</span> <span class=\"n\">ε</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">α</span><span class=\"o\">):=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span>\n  <span class=\"bp\">|</span> <span class=\"o\">{</span> <span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">xs</span> <span class=\"o\">}</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAppend</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NonEmptyList</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAppend</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">match</span> <span class=\"n\">a</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">b</span>\n    <span class=\"bp\">|</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>  <span class=\"o\">{</span><span class=\"n\">head</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tail</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"bp\">++</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span>    <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n                                 <span class=\"bp\">^^</span>\n<span class=\"c\">/-</span><span class=\"cm\">has type</span>\n<span class=\"cm\">  List ε : outParam (Type ?u.1962)</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  NonEmptyList ε : Type ?u.1962-/</span>\n</code></pre></div>\n<p>Looking into the <code>synthInstance</code>s, it looks to me like the <code>outParam</code> of <code>HAppend</code> is decided only upon the first argument (of type <code>List ε</code>), and thus decides this is <code>HAppend (List ε) (List ε) (List ε)</code>, before trying to coerce <code>e'</code> into a List. I would naively expect the <code>outParam</code> to take all \"non-out\" parameters into account before being decided upon. Is this an intended behaviour ? Marking <code>foo</code> as a <code>default_instance</code> doesn't solve the issue either.</p>",
        "id": 374899480,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689248612
    },
    {
        "content": "<p>This kind of ambiguous input regarding order of coercions and heterogeneous operations is fundamentally problematic. The heuristic <code>++</code> uses to insert coercions fails in this case. <a href=\"https://github.com/leanprover/lean4/blob/a3ebfe29ea516e45dba97dfd303cfc11cc47ff04/src/Lean/Elab/Extra.lean#L91-L96\">https://github.com/leanprover/lean4/blob/a3ebfe29ea516e45dba97dfd303cfc11cc47ff04/src/Lean/Elab/Extra.lean#L91-L96</a></p>",
        "id": 374906587,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1689249924
    },
    {
        "content": "<p>I wouldn't suggest to turn off the <code>binop%</code> elaborator here, but in case it's illuminating here's how you do it, and then Lean finds the <code>HAppend</code> instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">++</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">HAppend.hAppend</span> <span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Applicative</span> <span class=\"o\">(</span><span class=\"n\">Validate</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">pure</span>    <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">ok</span>\n  <span class=\"n\">seq</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">g</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">g</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">())</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"o\">()</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"n\">e'</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"bp\">.</span><span class=\"n\">errors</span> <span class=\"o\">((</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">++</span> <span class=\"n\">e'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 374912781,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689251229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusion.20about.20coercions/near/374582545\">said</a>:</p>\n<blockquote>\n<p>This code is directly from that book and it fails.  I am not sure what I am missing, since the definitions and instances regarding <code>NonEmptyList</code> are scattered throughout the text.</p>\n</blockquote>\n<p>This is definitely a drawback of the style!</p>\n<p>The code examples that the book's build process draws from are available in its repository. The <code>Append</code> instance is here: <a href=\"https://github.com/leanprover/fp-lean/blob/56422d4a279d6a74dcf6dc1f9eaa84227ea81f0c/examples/Examples/Classes.lean#L1024-L1026\">https://github.com/leanprover/fp-lean/blob/56422d4a279d6a74dcf6dc1f9eaa84227ea81f0c/examples/Examples/Classes.lean#L1024-L1026</a></p>\n<p>All the <code>book declaration</code> and <code>expect info</code> lines can be ignored - they're part of how the code was extracted.</p>\n<p>It would be a nice addition to the book to write a program to extract more readable source to all examples, eliminating the ones with errors.</p>",
        "id": 374913633,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1689251412
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"354934\">David Thrane Christiansen</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusion.20about.20coercions/near/374913633\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusion.20about.20coercions/near/374582545\">said</a>:</p>\n<blockquote>\n<p>This code is directly from that book and it fails.  I am not sure what I am missing, since the definitions and instances regarding <code>NonEmptyList</code> are scattered throughout the text.</p>\n</blockquote>\n<p>This is definitely a drawback of the style!</p>\n<p>The code examples that the book's build process draws from are available in its repository. The <code>Append</code> instance is here: <a href=\"https://github.com/leanprover/fp-lean/blob/56422d4a279d6a74dcf6dc1f9eaa84227ea81f0c/examples/Examples/Classes.lean#L1024-L1026\">https://github.com/leanprover/fp-lean/blob/56422d4a279d6a74dcf6dc1f9eaa84227ea81f0c/examples/Examples/Classes.lean#L1024-L1026</a></p>\n<p>All the <code>book declaration</code> and <code>expect info</code> lines can be ignored - they're part of how the code was extracted.</p>\n<p>It would be a nice addition to the book to write a program to extract more readable source to all examples, eliminating the ones with errors.</p>\n</blockquote>\n<p>I believe <span class=\"user-mention\" data-user-id=\"577163\">@Ioannis Konstantoulas</span> may have been lead by the exercise given at chapter 4.5 into believing it would make things work, seeing this message:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"577163\">Ioannis Konstantoulas</span> <a href=\"#narrow/stream/270676-lean4/topic/Confusion.20about.20coercions/near/374745028\">said</a>:</p>\n<blockquote>\n<p>I wrote an implementation of <code>HAppend</code> for non-empty lists, but the error in the above code persists :(</p>\n</blockquote>\n<p>Perhaps it may help to have one other exercise before the HAppend one to simply prove <code>Append (NonEmptyList α)</code> ? This would be enough to make the code from the book \"work\"</p>",
        "id": 374916742,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1689252030
    },
    {
        "content": "<p>Good idea! I'm away from the computer for a bit - would you mind making an issue here? <a href=\"https://github.com/leanprover/fp-lean/issues\">https://github.com/leanprover/fp-lean/issues</a></p>",
        "id": 375701168,
        "sender_full_name": "David Thrane Christiansen",
        "timestamp": 1689497236
    }
]