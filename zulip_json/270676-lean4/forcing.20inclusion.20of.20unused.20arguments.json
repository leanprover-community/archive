[
    {
        "content": "<p>Is there a better way to force an argument to be included than a dummy <code>let</code> clause?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">m</span>\n    <span class=\"mi\">0</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">foo</span>\n</code></pre></div>\n<p>This has come up in <a href=\"https://github.com/leanprover-community/mathlib4/pull/2347\">!4#2347</a> (cc <span class=\"user-mention\" data-user-id=\"569722\">@Pol'tta / KÃ´ Miyahara</span>), where we want to include an unused typeclass argument for symmetry, but don't want to move all the arguments into the <code>def</code> line if we can avoid it</p>",
        "id": 328480100,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643226
    },
    {
        "content": "<p><code>def foo : Nat := (0 : (m, _).2)</code> works too, but seems pretty silly</p>",
        "id": 328480359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643291
    },
    {
        "content": "<p>Seems not that great a solution for a <code>def</code>, since it affects the term</p>",
        "id": 328481000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676643472
    },
    {
        "content": "<p>Either one, I mean</p>",
        "id": 328481027,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676643477
    },
    {
        "content": "<p>Oh you're right, I missed the fact that the second one poisons the <code>Zero</code> instance</p>",
        "id": 328481254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643537
    },
    {
        "content": "<p>I suspect there isn't a great way because the <code>variable</code> remover runs so late (as I understand it)</p>",
        "id": 328481444,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676643597
    },
    {
        "content": "<p>That's what I'm leaning towards too. Maybe we do just have to list all the variables</p>",
        "id": 328481866,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676643714
    },
    {
        "content": "<p>I think the better solution is just to have an <code>include</code> command. The whole idea behind not including it (heh...) was as a social experiment to see how necessary it really is</p>",
        "id": 328484062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676644311
    },
    {
        "content": "<p>I don't think there are any fundamental reasons not to have such a command, it is just almost never necessary and I wouldn't really trust the existing <code>include</code> commands for e.g. mathport usage</p>",
        "id": 328484318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676644369
    },
    {
        "content": "<p>Another issue with the current system is that sometimes I find myself with 20 unused variables in a tactic proof, they seem to have been put there \"just in case\"</p>",
        "id": 328484765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676644496
    },
    {
        "content": "<p>I think we could plausibly make them auxDecls or something to hide them from the tactic state, but that's a bit weird if you actually want them to play a role</p>",
        "id": 328485417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676644669
    }
]