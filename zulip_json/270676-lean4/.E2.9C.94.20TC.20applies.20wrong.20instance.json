[
    {
        "content": "<p>I have a really strange failure of type class synthesis. It looks like that an instance is applied to a goal of completely different type which then leads to mayhem. </p>\n<p>In VS code if you unfold <code>💥 IsDiffT Prod.fst</code>  the third line is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">instVecTZ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TZ</span> <span class=\"n\">z</span><span class=\"o\">))</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x.fst</span> <span class=\"bp\">×</span> <span class=\"n\">TY</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which is really odd as <code>(z : Z) → Vec (TZ z)</code> and <code>(x : X × Y) → Vec (TX x.fst × TY x.snd) </code> are no the same types, so how can <code>instVecTZ</code> be applied here is a mystery to me.</p>\n<p>What is going on here?</p>",
        "id": 325703904,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675450771
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">class</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instVecProd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">@[infer_tc_goals_rl]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instDiffProd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TX</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">IsDiff</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- Transitive closuse of `IsDiff` via `comp.arg_x.isDiff`</span>\n<span class=\"kd\">class</span> <span class=\"n\">IsDiffT</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n\n<span class=\"c1\">-- Cast `IsDiff` to `IsDiffT`</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instIsDiffT</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsDiff</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">IsDiffT</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">instVecTX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">instDiffX</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">instVecTY</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">instDiffY</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TZ</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">instVecTZ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TZ</span> <span class=\"n\">z</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">instDiffZ</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">Z</span> <span class=\"n\">TZ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">comp.arg_x.isDiff</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsDiffT</span> <span class=\"n\">f</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">IsDiffT</span> <span class=\"n\">g</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">IsDiffT</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">Prod.fst.arg_xy.isDiff</span> <span class=\"o\">:</span> <span class=\"n\">IsDiff</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- set_option pp.all true in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.funBinderTypes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">IsDiffT</span> <span class=\"o\">(</span><span class=\"n\">Prod.fst</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">infer_instance</span>\n</code></pre></div>",
        "id": 325703939,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675450785
    },
    {
        "content": "<p>Somewhat reduced <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> which can be fixed by adding <code>infer_tc_goals_rl</code> to <code>instDiffProd</code></p>\n<p>There is again very suspicious application</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">✅</span> <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">instVecTY</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"n\">to</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m.969</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">class</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instVecProd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"c1\">-- @[infer_tc_goals_rl]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">instDiffProd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TX</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">instVecTX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">instDiffX</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">instVecTY</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">instDiffY</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.funBinderTypes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">synthInstance.maxHeartbeats</span> <span class=\"mi\">200</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.synthInstance</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TX</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n</code></pre></div>",
        "id": 325705107,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675451165
    },
    {
        "content": "<p>Ah, that's an interesting side effect.  Nothing is wrong here.  We try to apply the <code>instVecTZ</code> instance to a subgoal, then realize half-way through that the subgoal is already solved (by unification with the <code>IsDiffT</code> goal).</p>",
        "id": 325705921,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675451442
    },
    {
        "content": "<p>\"Application succeeded: didn't do anything.\"</p>",
        "id": 325706009,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675451480
    },
    {
        "content": "<p>Where do you see \"Application succeeded: didn't do anything.\" ?</p>",
        "id": 325706788,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675451755
    },
    {
        "content": "<p>If the application of <code>instVecTZ</code> is not the problem, what is causing the infinite loop? I don't really understand the trace.</p>",
        "id": 325707313,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675451917
    },
    {
        "content": "<p>The quoted phrase was my interpretation of the situation. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> It doesn't appear in the trace.</p>",
        "id": 325707382,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675451947
    },
    {
        "content": "<p>I see <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 325707417,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675451964
    },
    {
        "content": "<p>This is all in the same area as <a href=\"https://github.com/leanprover/lean4/pull/1901\">lean4#1901</a>.  Your best bet right now is to do it like mathlib:</p>\n<ul>\n<li>Remove <code>infer_tc_goals_rl</code></li>\n<li>Run the linter from std4 and mark the arguments as implicit when it tells you to</li>\n</ul>",
        "id": 325707972,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1675452138
    },
    {
        "content": "<p>Thanks, it solves the reduced mwe but I'm not having luck with the original mwe yet.</p>",
        "id": 325710078,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675452907
    },
    {
        "content": "<p>How do I get the linter to tell me to change the arguments to implicit? I'm getting only documentation and unused argument warnings.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.all</span> <span class=\"n\">true</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">linter.missingDocs</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">class</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">instVecTX</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"bp\">$</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TangentSpace</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instVecProd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Vec</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">instDiffProd</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)]</span>\n  <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n  <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TX</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨⟩</span>\n\n<span class=\"kd\">variable</span>\n  <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">instVecTX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TX</span> <span class=\"n\">x</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">instDiffX</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">X</span> <span class=\"n\">TX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">TY</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">instVecTY</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">Vec</span> <span class=\"o\">(</span><span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">instDiffY</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"n\">Y</span> <span class=\"n\">TY</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Diff</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">×</span><span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">TX</span> <span class=\"n\">x</span> <span class=\"bp\">×</span> <span class=\"n\">TY</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstance</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span>\n</code></pre></div>\n<p>produces </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `docBlame` linter reports:</span>\n<span class=\"cm\">DEFINITIONS ARE MISSING DOCUMENTATION STRINGS: -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Vec</span> <span class=\"c\">/-</span><span class=\"cm\"> inductive missing documentation string -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">Diff</span> <span class=\"c\">/-</span><span class=\"cm\"> inductive missing documentation string -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `unusedArguments` linter reports:</span>\n<span class=\"cm\">UNUSED ARGUMENTS. -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">instVecProd</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 3 inst✝¹ : Vec X, argument 4 inst✝ : Vec Y -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">instDiffProd</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 7 inst✝¹ : Diff X TX, argument 8 inst✝ : Diff Y TY -/</span>\n</code></pre></div>\n<p>Changing <code>[∀ x, Vec (TX x)] [∀ y, Vec (TY y)]</code> to <code>{isntVecTX : ∀ x, Vec (TX x)} {instVecTY : ∀ y, Vec (TY y)}</code> solves the TC failure.</p>",
        "id": 325712508,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675453788
    },
    {
        "content": "<p>Ok the fix works to the original mwe too, I just had too low heartbeat count.</p>",
        "id": 325715202,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1675454838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> has marked this topic as resolved.</p>",
        "id": 325715215,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675454844
    }
]