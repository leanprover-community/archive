[
    {
        "content": "<p>I would like to map all projection operations in an <code>Expr</code> object with <code>Meta.mkProjection</code>, so it becomes <code>.app</code> instead of <code>.proj</code>. <code>mkProjection</code> must be run in context since it relies on typing.</p>\n<p>Is there a function that can be used to map an entire expression tree using a monad that must be run in place? e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">map_expr</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">MetaM</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">...</span>\n</code></pre></div>\n<p>and <code>m</code> would be the identity function when its input is not a <code>.proj</code>. When it is <code>.proj</code> it would be <code>Meta.mkProjection</code>.</p>",
        "id": 406404516,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701903806
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.transform#doc\">docs#Lean.Meta.transform</a> lets you do that, and it lets you control whether the transformation is recursive or not</p>",
        "id": 406409564,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701906329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 406409866,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701906497
    }
]