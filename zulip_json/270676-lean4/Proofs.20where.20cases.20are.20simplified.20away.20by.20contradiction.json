[
    {
        "content": "<p>I have many proofs where I <code>cases</code> on a complicated inductive, and all but one case is eliminated from contradictions in the hypotheses. I wish to then automatically introduce the variables of the interesting inductive without having a nesting of <code>case &lt;case_name&gt; &lt;var1&gt; &lt;var2&gt; ... &lt;varN&gt;</code>. <del>Is there some way to achieve this?</del> What is the canonical way to write this proof in Lean? </p>\n<p>Example proof, where I wish to avoid the <code>case some ___</code> and the nesting that comes with it.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">example_thm</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">FOO</span><span class=\"o\">:</span> <span class=\"n\">foo.isSome</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">BAR</span><span class=\"o\">:</span> <span class=\"n\">bar.isSome</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">BAZ</span><span class=\"o\">:</span> <span class=\"n\">baz.isSome</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n  <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Option.bind</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">cases</span> <span class=\"n\">FOO_VAL</span><span class=\"o\">:</span><span class=\"n\">foo</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">FOO_VAL</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">FOO</span><span class=\"bp\">;</span> <span class=\"n\">case</span> <span class=\"n\">some</span> <span class=\"n\">foo_val</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">BAR_VAL</span><span class=\"o\">:</span><span class=\"n\">bar</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">BAR_VAL</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">BAR</span><span class=\"bp\">;</span> <span class=\"n\">case</span> <span class=\"n\">some</span> <span class=\"n\">bar_val</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">BAZ_VAL</span><span class=\"o\">:</span><span class=\"n\">baz</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">BAZ_VAL</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">BAZ</span><span class=\"bp\">;</span> <span class=\"n\">case</span> <span class=\"n\">some</span> <span class=\"n\">baz_val</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span>\n        <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">FOO_VAL</span><span class=\"o\">,</span> <span class=\"n\">BAR_VAL</span><span class=\"o\">,</span> <span class=\"n\">BAZ_VAL</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 338364408,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1677513143
    },
    {
        "content": "<p>How about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">example_thm</span>\n  <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- -- unused</span>\n  <span class=\"c1\">-- (FOO: foo.isSome)</span>\n  <span class=\"c1\">-- (BAR: bar.isSome)</span>\n  <span class=\"c1\">-- (BAZ: baz.isSome)</span>\n<span class=\"o\">:</span> <span class=\"o\">(</span>\n    <span class=\"o\">(</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n  <span class=\"o\">)</span>\n<span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Option.bind</span><span class=\"o\">]</span>\n  <span class=\"n\">cases</span> <span class=\"n\">foo</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">bar</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 338366064,
        "sender_full_name": "Adrien Champion",
        "timestamp": 1677513532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380302\">@Adrien Champion</span> it works in this case, but in the proof I have, I really do need control over the name I introduce, since the proof is not immediately dispatched by <code>simp</code>.</p>",
        "id": 338367651,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1677513866
    },
    {
        "content": "<p>This works;</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">example_thm</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">baz</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">FOO</span><span class=\"o\">:</span> <span class=\"n\">foo.isSome</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">BAR</span><span class=\"o\">:</span> <span class=\"n\">bar.isSome</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">BAZ</span><span class=\"o\">:</span> <span class=\"n\">baz.isSome</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">((</span><span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n    <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span>\n    <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">bar</span>\n      <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">foo</span>\n      <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"bp\">←</span> <span class=\"n\">baz</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">match</span> <span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">baz</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">some</span> <span class=\"n\">z</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bind</span><span class=\"o\">,</span> <span class=\"n\">Option.bind</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 338368124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677513978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> nice, thanks! What does <code>match</code> do in the unhandled case? does it automatically dispatch the contradiction?</p>",
        "id": 338369785,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1677514367
    },
    {
        "content": "<p>Clearly it did so here, although I don't know exactly what type of contradiction it can and can't dispatch</p>",
        "id": 338370211,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514453
    },
    {
        "content": "<p>My best guess is that it unfolded <code>Option.isSome</code> at all the hypotheses that depended on <code>foo</code>, <code>bar</code>, <code>baz</code> (reducing them to <code>false = true</code>), then did cases on those too</p>",
        "id": 338370316,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1677514479
    }
]