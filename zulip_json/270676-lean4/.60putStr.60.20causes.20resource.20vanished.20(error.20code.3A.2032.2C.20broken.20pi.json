[
    {
        "content": "<p>Calling <code>IO.FS.Handle.putStr</code> with too large string causes <code>resource vanished (error code: 32, broken pipe)</code> . With string of length in a very particular range I'm getting assertion violation</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">LEAN</span> <span class=\"n\">ASSERTION</span> <span class=\"n\">VIOLATION</span>\n<span class=\"n\">File</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">work</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">runtime</span><span class=\"bp\">/</span><span class=\"n\">io.cpp</span>\n<span class=\"n\">Line</span><span class=\"o\">:</span> <span class=\"mi\">89</span>\n<span class=\"n\">fclose</span><span class=\"o\">(</span><span class=\"n\">static_cast</span><span class=\"bp\">&lt;</span><span class=\"n\">FILE</span> <span class=\"bp\">*&gt;</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">==</span> <span class=\"mi\">0</span>\n<span class=\"bp\">'</span><span class=\"n\">unreachable'</span> <span class=\"n\">code</span> <span class=\"n\">was</span> <span class=\"n\">reached</span>\n</code></pre></div>\n<p>mwe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">IO</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">24000</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">Char.ofNat</span> <span class=\"n\">i</span> <span class=\"o\">::</span> <span class=\"n\">s</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"n\">String.mk</span> <span class=\"n\">s</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">run</span> <span class=\"bp\">←</span> <span class=\"n\">Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ls\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">run.takeStdin</span>\n\n  <span class=\"n\">stdin.putStr</span> <span class=\"n\">s'</span>\n</code></pre></div>\n<p>The code works for <code>n&lt;22000</code>, assertion is  violated for <code>n≈23000</code> and <code>resource vanished</code> error happens for  <code>n&gt;24000</code>.</p>\n<hr>\n<p>In my <a href=\"https://github.com/lecopivo/SciLean/blob/154c9daaa74d36037eb332c762eee9a445a1d983/SciLean/Util/Profile.lean#L24\">uses case</a>, I'm passing profiler output to <a href=\"https://github.com/hargoniX/Flame\">Henrik's Flame</a> and it fails if the output is too long.</p>",
        "id": 398260067,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698144267
    },
    {
        "content": "<p>This is probably OS specific, I'm running Ubuntu 20.04.6 LTS. Nevertheless , lean web editor behaves the same.</p>",
        "id": 398260652,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698144507
    },
    {
        "content": "<p>Pipes have a fixed capacity, if you pass too much to them they need to block</p>",
        "id": 398260661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698144513
    },
    {
        "content": "<p>I know nothing about these things, how do I pass big string?</p>",
        "id": 398260749,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698144555
    },
    {
        "content": "<p>(probably <code>putStr</code> needs to handle this instead of just passing the whole block)</p>",
        "id": 398260756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698144560
    },
    {
        "content": "<p>try splitting it into chunks and passing it one piece at a time</p>",
        "id": 398260785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698144575
    },
    {
        "content": "<p>ok</p>",
        "id": 398260810,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698144584
    },
    {
        "content": "<p>A bit more investigation, <code>putStr</code> works for strings of <code>≤2^16</code> bytes. Assertion is violated for <code>2^16&lt;·&lt;2^16 + 2^12</code> and resource vanish happens for <code>≥2^16 + 2^12</code></p>",
        "id": 398265121,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698146281
    },
    {
        "content": "<p>Here is my attempt at splitting in into multiple strings, but it behaves really oddly. It does not work even for <code>n=2^16</code> as it previously did.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">IO</span>\n\n<span class=\"sd\">/-- Split a string into substrings that have maximum size in bytes</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">String.splitToByteChunks</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">chunkByteSize</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Substring</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">chunks</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">String.Pos</span> <span class=\"o\">:=</span> <span class=\"n\">str.endPos</span>\n  <span class=\"n\">while</span> <span class=\"n\">s</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"n\">s</span>\n    <span class=\"n\">while</span> <span class=\"o\">(</span><span class=\"n\">str.next</span> <span class=\"n\">s'</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">byteIdx</span> <span class=\"bp\">≤</span> <span class=\"n\">chunkByteSize</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">s'</span> <span class=\"bp\">&lt;</span> <span class=\"n\">e</span> <span class=\"k\">do</span>\n      <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"n\">str.next</span> <span class=\"n\">s'</span>\n    <span class=\"n\">chunks</span> <span class=\"o\">:=</span> <span class=\"n\">chunks.push</span> <span class=\"o\">(</span><span class=\"n\">Substring.mk</span> <span class=\"n\">str</span> <span class=\"n\">s</span> <span class=\"n\">s'</span><span class=\"o\">)</span>\n    <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">s'</span>\n  <span class=\"n\">chunks</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Char</span> <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">17</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"sc\">'a'</span> <span class=\"o\">::</span> <span class=\"n\">s</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">s'</span> <span class=\"o\">:=</span> <span class=\"n\">String.mk</span> <span class=\"n\">s</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">run</span> <span class=\"bp\">←</span> <span class=\"n\">Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ls\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">run.takeStdin</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span>\n  <span class=\"k\">let</span> <span class=\"n\">chunks</span> <span class=\"o\">:=</span> <span class=\"n\">s'.splitToByteChunks</span> <span class=\"n\">m</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">toString</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"number of chunks {chunks.size}\"</span>\n  <span class=\"n\">for</span> <span class=\"n\">chunk</span> <span class=\"k\">in</span> <span class=\"n\">chunks</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">chunks.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"chunk {i} of length {chunk.length}\"</span>\n    <span class=\"n\">stdin.putStr</span> <span class=\"n\">chunk</span>\n</code></pre></div>",
        "id": 398273051,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1698148410
    },
    {
        "content": "<p>This is indeed really weird. Even with <code>n=2^14</code> and <code>m=4</code>  and a <code>break</code> in the loop (so it's just printing <code>aaaa</code> once) it has an assertion violation. This does not happen when <code>n</code> is smaller (even though the chunk in question is still <code>aaaa</code>) which means that the original string <code>s</code> must be malformed in some way</p>",
        "id": 398351159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698177027
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">IO</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">show</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"k\">from</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">run</span> <span class=\"bp\">←</span> <span class=\"n\">Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ls\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">run.takeStdin</span>\n  <span class=\"n\">for</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"o\">[:</span><span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">14</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.print</span> <span class=\"mi\">1</span>\n  <span class=\"n\">stdin.putStr</span> <span class=\"s2\">\"aaaa\"</span>\n</code></pre></div>",
        "id": 398356168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698179324
    },
    {
        "content": "<p>It seems printing on stdout affects the child's stdin handle in some way</p>",
        "id": 398356457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698179478
    }
]