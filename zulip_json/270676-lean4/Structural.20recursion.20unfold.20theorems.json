[
    {
        "content": "<p>I'm trying to generate an equational lemma for a function defined by structural recursion, but I can't work out how to prove the required equalities. <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">replace</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">replace</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def replace : (Foo → Option Foo) → Foo → Foo :=</span>\n<span class=\"cm\">fun f t =&gt;</span>\n<span class=\"cm\">  Foo.brecOn t fun t f_1 =&gt;</span>\n<span class=\"cm\">    match f t with</span>\n<span class=\"cm\">    | some u =&gt; u</span>\n<span class=\"cm\">    | none =&gt;</span>\n<span class=\"cm\">      (match (motive := (t : Foo) → Foo.below t → Foo) t with</span>\n<span class=\"cm\">        | Foo.zero =&gt; fun x =&gt; Foo.zero</span>\n<span class=\"cm\">        | Foo.succ t =&gt; fun x =&gt; Foo.succ x.fst.fst)</span>\n<span class=\"cm\">        f_1</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">replace_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">replace</span> <span class=\"c1\">-- failed to generate unfold theorem for 'replace'</span>\n</code></pre></div>",
        "id": 404006526,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700850163
    },
    {
        "content": "<p>Even copy-pasting the <code>#print</code>-ed definition doesn't check as defeq to <code>replace f t</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">replace_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">Foo.brecOn</span> <span class=\"n\">t</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">f_1</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Foo.below</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Foo.zero</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.zero</span>\n        <span class=\"bp\">|</span> <span class=\"n\">Foo.succ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Foo.succ</span> <span class=\"n\">x.fst.fst</span><span class=\"o\">)</span>\n        <span class=\"n\">f_1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"> tactic 'rfl' failed, equality lhs</span>\n<span class=\"cm\">  replace f t</span>\n<span class=\"cm\">is not definitionally equal to rhs</span>\n<span class=\"cm\">  Foo.brecOn t fun t f_1 =&gt;</span>\n<span class=\"cm\">    match f t with</span>\n<span class=\"cm\">    | some u =&gt; u</span>\n<span class=\"cm\">    | none =&gt;</span>\n<span class=\"cm\">      (match (motive := (t : Foo) → Foo.below t → Foo) t with</span>\n<span class=\"cm\">        | Foo.zero =&gt; fun x =&gt; Foo.zero</span>\n<span class=\"cm\">        | Foo.succ t =&gt; fun x =&gt; Foo.succ x.fst.fst)</span>\n<span class=\"cm\">        f_1</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 404006674,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700850267
    },
    {
        "content": "<p>this seems like a bug in the equation generator?</p>",
        "id": 404010155,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700852718
    },
    {
        "content": "<p>I'm not sure exactly what unfold theorems are and how the relate to equation theorems, but <code>simp</code> can handle this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">replace_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n      <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n          <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">replace</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">replace</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>This <code>cases t</code> is important because the definition of <code>replace</code> proceeds by cases on <code>t</code>, so it's not unreasonable for it to decide to generate equation lemmas specialized for the different cases.</p>",
        "id": 404012804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700854617
    },
    {
        "content": "<p>(\"failed to generate unfold theorem for 'replace'\" does seem like a potential bug)</p>",
        "id": 404012931,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700854700
    },
    {
        "content": "<p>That fix also works in my real case, thanks!</p>",
        "id": 404013660,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700855140
    },
    {
        "content": "<p>I'd assumed that the equational lemmas would only be specialised to cases when the entire function was defined by pattern-matching - in this case, the match expression is internal so I assumed it wouldn't.</p>",
        "id": 404013750,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700855208
    },
    {
        "content": "<p>Even when it's defined by pattern matching you can unfold the definition to a match. See:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Foo</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nonrecCasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">t'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">nonrecCasing</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">nonrecCasing</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">recursive</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"o\">(</span><span class=\"n\">recursive</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">recursive</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">recursive</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">recCasing</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">recCasing</span> <span class=\"n\">f</span> <span class=\"n\">t'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">recCasing</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">recCasing</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">recCasing2</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t1</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">t2</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">recCasing</span> <span class=\"n\">f</span> <span class=\"n\">t'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">recCasing2</span> <span class=\"n\">f</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">recCasing2</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Let me look for related issues on the lean4 repo</p>",
        "id": 404014495,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700855830
    },
    {
        "content": "<p>Those unfolds don't work for me: <code>failed to generate unfold theorem for 'recCasing'</code></p>",
        "id": 404014602,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700855943
    },
    {
        "content": "<p>Yep, that's the bug. It should work fine.</p>",
        "id": 404014614,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700855964
    },
    {
        "content": "<p>(<code>recCasing</code> is your original <code>replace</code> function)</p>",
        "id": 404014627,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700855982
    },
    {
        "content": "<p>and swapping the order of the matches also proceeds through the equation generator fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">recCasing'</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">zero</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">t'</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">match</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">u</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">u</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">recCasing'</span> <span class=\"n\">f</span> <span class=\"n\">t'</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">recCasing'</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">recCasing'</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"c1\">--note this is the same function as before</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">recCasing</span> <span class=\"bp\">=</span> <span class=\"n\">recCasing'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">funext</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">t</span>\n  <span class=\"n\">induction</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">recCasing</span><span class=\"o\">,</span> <span class=\"n\">recCasing'</span><span class=\"o\">]</span>\n  <span class=\"n\">split</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 404015159,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700856310
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/issues/2962\">https://github.com/leanprover/lean4/issues/2962</a></p>",
        "id": 404017102,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1700857916
    },
    {
        "content": "<p>Thanks for submitting the issue!</p>",
        "id": 404017165,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1700857946
    }
]