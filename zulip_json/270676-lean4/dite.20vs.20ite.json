[
    {
        "content": "<p>What is the purpose of <code>ite</code> if we have <code>dite</code>? Why doesn't normal if statement introduce the hypothesis into the context? I.e. why is normal if statement implemented with <code>ite</code> and not <code>dite</code>?</p>\n<p>I am asking because I want to do some rewriting in one of the if branches and if I do not use <code>dite</code> explicitly then tactics do not have access to the if condition.</p>",
        "id": 363223921,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685776159
    },
    {
        "content": "<p><code>if p then a else b</code> is notation for <code>ite p a b</code>. <code>if h : p then a h else b h</code> is notation for <code>dite p a b</code>. Does that answer your question?</p>",
        "id": 363233974,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685779624
    },
    {
        "content": "<p>I don't think it answers his question. He asks why <code>ite</code> exists at all when it's strictly less powerful than <code>dite</code>.</p>",
        "id": 363234813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685779901
    },
    {
        "content": "<p>I'm sure the answer is pretty technical and in an ideal world <code>ite</code> wouldn't exist.</p>",
        "id": 363234952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1685779926
    },
    {
        "content": "<p>Yeah, I think it comes down to \"dite is somewhat more difficult to work with in practice\"</p>",
        "id": 363237091,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685780572
    },
    {
        "content": "<p>The answer is pretty technical but surely you already know it: non-dependent arguments are much easier to rewrite than dependent ones. At any rate, it sounds like Tomas is looking for a congruency lemma. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_congr\">docs#if_congr</a> isn't quite strong enough as I would have expected it to take <code>p -&gt; x = u</code> and <code>not p -&gt; y = v</code> as arguments instead of <code>x = u</code> and <code>y = v</code>.</p>",
        "id": 363237752,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1685780757
    },
    {
        "content": "<p>Yes I'm interested in the technical details. Is there a simple example that demonstrates that working with <code>dite</code> is more difficult than working with <code>ite</code>? Does <code>dite</code> prevent compilers from doing some smart stuff? Something along those lines.</p>",
        "id": 363265176,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685787784
    },
    {
        "content": "<p>One possible argument: <code>ite c x y</code> would be <code>dite c (fun _ =&gt; x) (fun _ =&gt; y)</code> and applying rewrite <code>x = x'</code> is a bit more difficult as <code>x</code> is under a binder with <code>dite</code>.</p>",
        "id": 363268334,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685788587
    },
    {
        "content": "<p>yes, the usual situation is that <code>x</code> has some spurious dependency on the <code>fun _ =&gt;</code> variable</p>",
        "id": 363268713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685788713
    },
    {
        "content": "<p>What do you mean by \"spurious dependency\"?</p>",
        "id": 363268904,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685788782
    },
    {
        "content": "<p>like <code>fun h =&gt; Function.const _ x h</code> only less obvious</p>",
        "id": 363269013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685788803
    },
    {
        "content": "<p>I mean, if there is a real dependency on the variable then it's not an <code>ite</code> and it will definitely be harder to rewrite, but you are talking about cases which are \"in principle\" <code>ite</code> applications, so there shouldn't actually be a dependency</p>",
        "id": 363269169,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685788859
    },
    {
        "content": "<p>But if you write an if statement with <code>ite</code> then there is no dependency, no? Why not convert it immediately to <code>dite</code> without any spurious dependency?</p>",
        "id": 363269348,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685788904
    },
    {
        "content": "<p>From the compiler perspective <code>dite</code> is definitely preferred, and it has to bend over backwards to make sure that <code>ite</code> is unfolded to something with a lambda in it</p>",
        "id": 363269443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685788923
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/dite.20vs.20ite/near/363269348\">said</a>:</p>\n<blockquote>\n<p>But if you write an if statement with <code>ite</code> then there is no dependency, no? Why not convert it immediately to <code>dite</code> without any spurious dependency?</p>\n</blockquote>\n<p>After some simplifications and rewrites it may not stay that way</p>",
        "id": 363269612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685788971
    },
    {
        "content": "<p>also, at what stage are you talking about \"convert it immediately to <code>dite</code>\"? Is <code>ite</code> in the user source?</p>",
        "id": 363269823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789024
    },
    {
        "content": "<p>is it there at elaboration time?</p>",
        "id": 363269862,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789037
    },
    {
        "content": "<p>Another way to find out the answer to this question BTW would be to change the definition of the <code>if then else</code> syntax in core and try to compile lean</p>",
        "id": 363270129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789106
    },
    {
        "content": "<p>Yes probably during elaboration, effectively I'm advocating for getting rid of <code>ite</code> all together</p>",
        "id": 363270188,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685789120
    },
    {
        "content": "<p>actually maybe a more controlled place to try it out would be mathlib, just put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"bp\">$</span><span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>in <code>Mathlib.Tactic.Basic</code></p>",
        "id": 363270649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/dite.20vs.20ite/near/363269612\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/dite.20vs.20ite/near/363269348\">said</a>:</p>\n<blockquote>\n<p>But if you write an if statement with <code>ite</code> then there is no dependency, no? Why not convert it immediately to <code>dite</code> without any spurious dependency?</p>\n</blockquote>\n<p>After some simplifications and rewrites it may not stay that way</p>\n</blockquote>\n<p>Well but I can't do those rewrites and simplifications when using <code>ite</code> in the first place. I would have to convert <code>ite</code> to <code>dite</code>, do the rewrites and then the branches will depend on <code>h</code>. That is ok</p>",
        "id": 363270707,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685789262
    },
    {
        "content": "<p>no I mean doing simplifications on a non-dependent lambda might not retain the property of being non-dependent</p>",
        "id": 363270988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789344
    },
    {
        "content": "<p>and there are things like <code>assumption</code> that might randomly decide to use the variable just because it's there</p>",
        "id": 363271102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789383
    },
    {
        "content": "<p>I would be curious if this spurious use is really a problem. My expectation is that giving access to that variable to <code>assumption</code> would allow me to do more desirable rewrites.</p>",
        "id": 363271654,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685789545
    },
    {
        "content": "<p>I'm on the phone right now and I can't test but I'm expecting that <code>if (x != 0) then x/x else 1</code> does not simplify to <code>1</code> but <code>dite</code> version does(or easily can)</p>",
        "id": 363272317,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685789734
    },
    {
        "content": "<p>you assume incorrectly</p>",
        "id": 363273053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789928
    },
    {
        "content": "<p>or at least, it is provably equal to 1 and I don't know whether there is a simp lemma for it</p>",
        "id": 363273155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685789955
    },
    {
        "content": "<p>but you can definitely do conditional rewrites in an ite, this is the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/if_ctx_congr\">docs#if_ctx_congr</a> theorem Yael mentioned before</p>",
        "id": 363273486,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685790039
    },
    {
        "content": "<p>Wouldn't that work if I run <code>simp</code> with <code>assumption</code>discharger and add simple simp lemma <code>if _ : c then x else x = x</code>?</p>",
        "id": 363273592,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685790073
    },
    {
        "content": "<p>And mark <code>x != 0 -&gt; x/x = 1</code> as simp lemma which I do not know if it is done or not</p>",
        "id": 363274082,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685790150
    },
    {
        "content": "<p>In Lean3 you needed <code>contextual := true</code> to make <code>simp</code> use hypotheses in binders</p>",
        "id": 363274632,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685790247
    },
    {
        "content": "<p>lean 4 as well</p>",
        "id": 363274955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685790286
    },
    {
        "content": "<p>Ok I turn on contextual, then it works right? And there is not much hope doing the same with <code>ite</code></p>",
        "id": 363277464,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685790689
    },
    {
        "content": "<p>there is, you can use contextual congr rules for ite</p>",
        "id": 363277624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685790733
    },
    {
        "content": "<p>like the one I linked</p>",
        "id": 363277636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685790738
    },
    {
        "content": "<p>Right, but I would have to write my own automation or can I use such congruence lemma with simp?</p>",
        "id": 363279537,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685791286
    },
    {
        "content": "<p>there is a <code>@[congr]</code> attribute for these kind of rules</p>",
        "id": 363279725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685791341
    },
    {
        "content": "<p>at least, as long as we are talking about the system we want to see it is not too hard to posit that this is marked up to work as expected</p>",
        "id": 363279833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685791380
    },
    {
        "content": "<p>In the same way that <code>finset.sum</code> doesn't include the information that the element is in the set, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.sum_congr\">docs#finset.sum_congr</a> does</p>",
        "id": 363280543,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685791562
    },
    {
        "content": "<p>Ok, I will look into these congr lemmas, see how they are commonly used and see if I can do what I want.</p>",
        "id": 363286131,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1685793124
    }
]