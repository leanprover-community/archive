[
    {
        "content": "<p>The code </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">True</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">nope</span>\n</code></pre></div>\n<p>produces the error <code>unknown tactic</code>. How hard would it be to print the error <code>unknown tactic 'nope'</code>?</p>\n<p>I had some people using <code>suggest</code> (my alias for <code>library_search</code>) and they got the <code>unknown tactic</code> error. I realize only a few hours later that this error was because the <code>sugges</code> tactic is an unknown tactic, and the <code>suggest</code> tactic was still running.</p>",
        "id": 364278258,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686144296
    },
    {
        "content": "<p>should be easy, the unknown tactic tactic is an ident parser</p>",
        "id": 364284133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686145494
    },
    {
        "content": "<p>I agree that Floris' suggestion will already be a great improvement but it would also be nice to fix the underlying problem that this error message shouldn't stay like this. I noticed this is indeed very confusing.</p>",
        "id": 364322919,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686153011
    },
    {
        "content": "<p>I'm confused what distinction you are making. Floris's suggestion is to improve the error message, no?</p>",
        "id": 364325907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686153589
    },
    {
        "content": "<p>or do you think the behavior needs to change more radically?</p>",
        "id": 364326153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686153626
    },
    {
        "content": "<p>Patrick, are you saying that the <code>unknown tactic</code> error message should disappear when <code>suggest</code> is running. I'm not sure if that is good. I definitely want to see the goal view while Lean is running.</p>",
        "id": 364330440,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686154540
    },
    {
        "content": "<p>I want to see the goal but not the unknown tactic error</p>",
        "id": 364341709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686156951
    },
    {
        "content": "<p>One could imagine that the error is cleared when the next key is pressed. In Lean 3 you used to see weird errors like <code>unknown import data.real.basi</code> which were confusing when in the file you've clearly typed <code>data.real.basic</code>.</p>",
        "id": 364343954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686157441
    },
    {
        "content": "<p>Yes exactly. Here the outdated error stays on display for a very long time because Lean is working on something else.</p>",
        "id": 364344215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1686157496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20tactic/near/364343954\">said</a>:</p>\n<blockquote>\n<p>One could imagine that the error is cleared when the next key is pressed. In Lean 3 you used to see weird errors like <code>unknown import data.real.basi</code> which were confusing when in the file you've clearly typed <code>data.real.basic</code>.</p>\n</blockquote>\n<p>This is annoying though because while you are typing you see no information, rather than an unbroken (if delayed) infoview</p>",
        "id": 364347227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158222
    },
    {
        "content": "<p>I would much rather have it hold the last message if it has nothing useful to display, possibly with a spinner or something to indicate it is out of date</p>",
        "id": 364347400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158264
    },
    {
        "content": "<p>this is especially important if you are typing something based on the goal view (e.g. the type of a hypothesis), since you might forget what it was halfway through typing</p>",
        "id": 364347799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686158363
    },
    {
        "content": "<p>Couldn't that be mitigated by various <em>long</em>-running things sending more LSP diagnostics themselves, just not error ones?</p>",
        "id": 364403877,
        "sender_full_name": "Julian Berman",
        "timestamp": 1686175631
    },
    {
        "content": "<p>E.g. the <code>Processing...</code> LSP info diagnostic messages -- or tactic specific ones saying <code>suggest is searching through lemmas</code> or whatever that gets sent on start and cleared when it's done</p>",
        "id": 364403942,
        "sender_full_name": "Julian Berman",
        "timestamp": 1686175664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20tactic/near/364347400\">said</a>:</p>\n<blockquote>\n<p>I would much rather have it hold the last message if it has nothing useful to display, possibly with a spinner or something to indicate it is out of date</p>\n</blockquote>\n<p>A visual indication on all outdated message would also be very helpful! With \"outdated message\" I mean here any message that is produced by a line in the \"yellow bar zone\" (i.e. that will be recompiled without any additional keystrokes). I think this should include the goal view, assuming the visual indication is not too obtrusive.</p>",
        "id": 364558753,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1686230154
    },
    {
        "content": "<p>Good point with the yellow bar, that should mean it's implementable in the extension without touching core</p>",
        "id": 364563828,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1686231229
    }
]