[
    {
        "content": "<p>In Lean 3 we could write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>(without any import!). In Lean 4, even importing all of Mathlib is not enough</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">True</span>\n</code></pre></div>\n<p>Is this really missing?</p>",
        "id": 398719328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698335560
    },
    {
        "content": "<p>yes looks that way, but its easy to add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"n\">binder_predicate</span> <span class=\"n\">x</span> <span class=\"s2\">\" ∉ \"</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"bp\">$</span><span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">True</span>\n</code></pre></div>",
        "id": 398722006,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698336391
    },
    {
        "content": "<p>Thanks Alex, but I think this isn't enough. It will be missing in delaborators.</p>",
        "id": 398722344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698336511
    },
    {
        "content": "<p>Looks like that is more hardcoded yeah <a href=\"https://github.com/leanprover-community/mathlib4/blob/8cd944d0aa56ccfd19573ab0199afe25b4431fee/Mathlib/Util/PiNotation.lean#L50\">https://github.com/leanprover-community/mathlib4/blob/8cd944d0aa56ccfd19573ab0199afe25b4431fee/Mathlib/Util/PiNotation.lean#L50</a></p>",
        "id": 398722810,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698336691
    },
    {
        "content": "<p>Oh but you wrote that 2 weeks ago?</p>",
        "id": 398722970,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698336743
    },
    {
        "content": "<p>I know...</p>",
        "id": 398722994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698336752
    },
    {
        "content": "<p>Surely that's covered by <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s binder elaboration suite?</p>",
        "id": 398723812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1698337050
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/std4/pull/323\">std4#323</a> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 398725075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698337564
    },
    {
        "content": "<p>By the way Mario, are you interested in having <a href=\"https://github.com/leanprover-community/mathlib4/blob/8cd944d0aa56ccfd19573ab0199afe25b4431fee/Mathlib/Util/PiNotation.lean\">this file</a> in Std? I could add it to the above PR, updating it for new binders.</p>",
        "id": 398725478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698337686
    },
    {
        "content": "<p>Remember you said two weeks ago that this file was good enough for Mathlib until you'll redo it better.</p>",
        "id": 398725619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698337736
    },
    {
        "content": "<p>nope, for one thing it will require a lot more review than the PR you just sent, and for another I will probably push to do it the right way if you do so it will probably take a while</p>",
        "id": 398725763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698337785
    },
    {
        "content": "<p>this is besides the part where I'm not sure we want pi notation, given it was removed from core</p>",
        "id": 398725978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698337856
    },
    {
        "content": "<p>Presumably we could split that file in two, and Std could gain the bit that uses the extended binders on forall?</p>",
        "id": 398726156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698337923
    },
    {
        "content": "<p>(or at least, <code>exists_delab</code>)</p>",
        "id": 398726205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698337940
    },
    {
        "content": "<p>yes I think a piece of that file, suitably rewritten, is appropriate for std</p>",
        "id": 398726293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698337982
    },
    {
        "content": "<p>Oh no, </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>already fails to use the notation.</p>",
        "id": 398730080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698339397
    },
    {
        "content": "<p>Is there an easy way to find which delaborator is used? Say I notice that <code>#check 0 ≠ 1</code> and I want to see which delaborator was used so that I can copy-paste it.</p>",
        "id": 398730238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698339482
    },
    {
        "content": "<p>Ne is its own def though, so probably just using the default app unexpander for applications (<a href=\"https://github.com/leanprover/lean4/blob/6c5f79c0df01e9cd74ac4ee411ec392a5ac1b5d3/src/Lean/Elab/Notation.lean#L81\">https://github.com/leanprover/lean4/blob/6c5f79c0df01e9cd74ac4ee411ec392a5ac1b5d3/src/Lean/Elab/Notation.lean#L81</a>), so I'm not sure this would apply in the same way for not in out of the box</p>",
        "id": 398735633,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1698341588
    },
    {
        "content": "<p>I managed to write in only half an hour:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Lean.PrettyPrinter.Delaborator</span>\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Not</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">delab_not_in</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">SubExpr.getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">unless</span> <span class=\"n\">f.getAppFn</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">Membership.mem</span> <span class=\"n\">_</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx₁</span> <span class=\"bp\">←</span> <span class=\"n\">SubExpr.withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SubExpr.withNaryArg</span> <span class=\"mi\">3</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx₂</span> <span class=\"bp\">←</span> <span class=\"n\">SubExpr.withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">SubExpr.withNaryArg</span> <span class=\"mi\">4</span> <span class=\"n\">delab</span>\n  <span class=\"n\">return</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">stx₁</span> <span class=\"bp\">∉</span> <span class=\"bp\">$</span><span class=\"n\">stx₂</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I think I deserve some lunch.</p>",
        "id": 398736420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698341915
    },
    {
        "content": "<p>I \"quickly\" created <a href=\"https://github.com/leanprover-community/mathlib4/pull/7964\">#7964</a> before lunch.</p>",
        "id": 398742729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1698344321
    }
]