[
    {
        "content": "<p>Hi!</p>\n<p>I encountered an issue where <code>rw</code> works but <code>simp</code> doesn't.<br>\nIs it because I'm doing something wrong? Or is this a bug? I know I kind of abuse notations in my code, maybe I'm just not supposed to do that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>Here's a file that reproduces this: <a href=\"https://gist.github.com/thejohncrafter/74765fb7f7b00f129b92ec048ede729c\">https://gist.github.com/thejohncrafter/74765fb7f7b00f129b92ec048ede729c</a> (long file, extracted from a personal project, sorry I didn't find enough time to reduce this to a mwe, I guess we don't need that much code to reproduce the issue).<br>\nI tried different versions of lean, apparently this breaks with <code>nightly-2023-01-06</code> and this is still broken today (<code>nightly-2023-04-20</code>).</p>\n<p>The issue is basically (omitting most definitions):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Category</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Prefunctor</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">where</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">map</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Functor.map_comp</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Category</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">z</span><span class=\"o\">),</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">F.map</span> <span class=\"n\">g</span>\n  <span class=\"o\">:=</span> <span class=\"n\">map_comp'</span> <span class=\"n\">F</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Functor.comp'</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">Category</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">C</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Functor</span> <span class=\"n\">B</span> <span class=\"n\">D</span> <span class=\"n\">where</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">G.obj</span> <span class=\"bp\">‚àò</span> <span class=\"n\">F.obj</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"n\">G.map</span> <span class=\"bp\">‚àò</span> <span class=\"n\">F.map</span>\n  <span class=\"n\">map_id'</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n  <span class=\"n\">map_comp'</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- closes the goal up to `nightly-2023-01-05`</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">F.map_comp</span><span class=\"o\">,</span> <span class=\"n\">G.map_comp</span><span class=\"o\">]</span> <span class=\"c1\">-- necessary from `nightly-2023-01-06` on</span>\n</code></pre></div>",
        "id": 355134099,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683030374
    },
    {
        "content": "<p>Changelog for that nightly seems to be</p>\n<ul>\n<li><a href=\"https://github.com/leanprover/lean4-nightly/commit/fedf235cba35ed8bf6bf571cf38e6d8536b904ac\"><code>fedf235</code></a> fix: fixes <a href=\"https://github.com/leanprover-community/mathlib/pull/2011\">#2011</a></li>\n<li><a href=\"https://github.com/leanprover/lean4-nightly/commit/b9f0062a5813f3bec597a1377c818875b1b8f1e0\"><code>b9f0062</code></a> doc: replace maximum? in minimum? docstring</li>\n<li><a href=\"https://github.com/leanprover/lean4-nightly/commit/770815be9b355d73e4f6c7710f417eaf069d303f\"><code>770815b</code></a> test: for issue <a href=\"https://github.com/leanprover-community/mathlib/pull/1937\">#1937</a></li>\n<li><a href=\"https://github.com/leanprover/lean4-nightly/commit/ce4dc2388eadf8bac92a7e9dda3c98c6b218c1e9\"><code>ce4dc23</code></a> chore: update stage0</li>\n<li><a href=\"https://github.com/leanprover/lean4-nightly/commit/dd682bf1d5603a82fb63b861ace7958bc4032a63\"><code>dd682bf</code></a> feat: add support for HO projections at <code>DiscrTree</code></li>\n</ul>",
        "id": 355135379,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1683030635
    },
    {
        "content": "<p>Yes, I don't know the internals of Lean well enough to be able to guess which commit breaks it :/</p>",
        "id": 355135775,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683030741
    },
    {
        "content": "<p>I would imagine the last one? the discrimination tree is used by simp to match what it wants to simplify with the simp rules</p>",
        "id": 355141812,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1683032154
    },
    {
        "content": "<p>Makes sense, maybe this insight can help simplifying my example?</p>",
        "id": 355146007,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683033057
    },
    {
        "content": "<p>I also ran into such an issue a few days ago but reported it in the mathlib4 stream as it was to do with porting: <a href=\"#narrow/stream/287929-mathlib4/topic/simp.20not.20using.20a.20simp.20lemma/near/353943416\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/simp.20not.20using.20a.20simp.20lemma/near/353943416</a> . I would love to know what's going on here.</p>",
        "id": 355146319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683033111
    },
    {
        "content": "<p>Yeah that looks like the exact same issue. Maybe your example works with <code>nightly-2023-01-05</code>? (I can't test this right now but will as soon as I can.)</p>",
        "id": 355152395,
        "sender_full_name": "Julien Marquet",
        "timestamp": 1683034382
    }
]