[
    {
        "content": "<p>I just wanted to share this great example of a bug I found in lean4lean. It was very puzzling: it was going through all the same motions as the C++ code but it was in rare cases performing 20x worse. On these examples there wasn't much in the profiler report, but I did notice that a lot of time was being spent in <code>lean_array_push</code> in the union-find data structure, which seemed a bit weird since there were also hashmap pushes and other things that should presumably also have shown up if it was just working hard. Turns out it was a sharing bug, or actually two.</p>\n<p>Example 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">UnionFind</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UnionFind</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"n\">self.arr.push</span> <span class=\"o\">⟨</span><span class=\"n\">self.arr.size</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">model</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">self.model'</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hm.push</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>fixed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">UnionFind</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">UnionFind</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">self.arr.size</span><span class=\"bp\">;</span> <span class=\"n\">self.arr.push</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">model</span> <span class=\"o\">:=</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hm</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">self.model'</span><span class=\"bp\">;</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hm.push</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>This one is understandable, although it's annoying that lean makes you do it.</p>\n<p>Example 2:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">quickIsDefEq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">useHash</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecM</span> <span class=\"n\">LBool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">modifyGet</span> <span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">st.eqvManager.isEquiv</span> <span class=\"n\">useHash</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">st</span> <span class=\"k\">with</span> <span class=\"n\">eqvManager</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"o\">})</span>\n  <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">true</span>\n</code></pre></div>\n<p>fixed:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"kd\">def</span> <span class=\"n\">quickIsDefEq</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">useHash</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecM</span> <span class=\"n\">LBool</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"bp\">←</span> <span class=\"n\">modifyGet</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">a3</span> <span class=\"n\">a4</span> <span class=\"n\">a5</span> <span class=\"n\">a6</span> <span class=\"o\">(</span><span class=\"n\">eqvManager</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m.isEquiv</span> <span class=\"n\">useHash</span> <span class=\"n\">t</span> <span class=\"n\">s</span>\n    <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">a1</span> <span class=\"n\">a2</span> <span class=\"n\">a3</span> <span class=\"n\">a4</span> <span class=\"n\">a5</span> <span class=\"n\">a6</span> <span class=\"o\">(</span><span class=\"n\">eqvManager</span> <span class=\"o\">:=</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n  <span class=\"k\">then</span> <span class=\"n\">return</span> <span class=\"bp\">.</span><span class=\"n\">true</span>\n</code></pre></div>\n<p>This fix makes me unhappy, and is almost enough to make me declare \"<code>modifyGet</code> considered harmful\". If I had just used plain structure update this would have preserved sharing, but lean apparently does not hoist the projections of everything other than the <code>eqvManager</code> field past the call to <code>isEquiv</code> here, meaning that a reference to <code>st</code> is live while <code>isEquiv</code> is running and hence <code>st.eqvManager</code> is shared during the call. The fix is to fully destructure it and put it back together afterward.</p>",
        "id": 398867630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698401456
    },
    {
        "content": "<p>Oh no, it's even worse than I thought: the bug fix above doesn't work. Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Id</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">st</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">two</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"st\"</span> <span class=\"n\">st</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">two'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">bla</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"two\"</span> <span class=\"n\">two</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">two'</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">test</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[],</span> <span class=\"bp\">#</span><span class=\"o\">[]⟩</span>\n</code></pre></div>\n<p>This prints <code>shared RC two</code> even though it manifestly uses every value linearly</p>",
        "id": 398870286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698402530
    },
    {
        "content": "<p>Here's the start of the extracted function <code>test</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"s2\">\"st\"</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"bp\">◾</span> <span class=\"n\">x_2</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">isShared</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"s2\">\"two\"</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"bp\">◾</span> <span class=\"n\">x_7</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">bla</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">isShared</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n    <span class=\"n\">case</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n    <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_11</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"n\">set</span> <span class=\"n\">x_9</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n      <span class=\"n\">set</span> <span class=\"n\">x_3</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"n\">set</span> <span class=\"n\">x_3</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_11</span><span class=\"bp\">;</span>\n      <span class=\"n\">ret</span> <span class=\"n\">x_3</span>\n    <span class=\"n\">Bool.true</span> <span class=\"bp\">→</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_12</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_13</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"n\">inc</span> <span class=\"n\">x_13</span><span class=\"bp\">;</span>\n      <span class=\"n\">inc</span> <span class=\"n\">x_12</span><span class=\"bp\">;</span>\n      <span class=\"n\">dec</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n      <span class=\"k\">let</span> <span class=\"n\">x_14</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Prod.mk</span><span class=\"o\">]</span> <span class=\"n\">x_5</span> <span class=\"n\">x_13</span><span class=\"bp\">;</span>\n      <span class=\"n\">set</span> <span class=\"n\">x_3</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_14</span><span class=\"bp\">;</span>\n      <span class=\"n\">set</span> <span class=\"n\">x_3</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_12</span><span class=\"bp\">;</span>\n      <span class=\"n\">ret</span> <span class=\"n\">x_3</span>\n</code></pre></div>\n<p>I think it might be that the FBIP optimization, which has triggered to reuse the memory of <code>x_3</code>, is also keeping it alive and causing a shared result? This seems very bizarre</p>",
        "id": 398870723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698402726
    },
    {
        "content": "<p>Oops, false alarm, the test is bad because lean made two copies of the empty array via CSE. Using <code>test ⟨#[0], #[1]⟩</code> results in no shared data. The bug fix does work, it just shows sharing at the very beginning because the empty state is shared.</p>",
        "id": 398874089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698403967
    },
    {
        "content": "<p>I'm actually already surprised by the first example. I could understand that it introduces non-unqueness in a lazy language, but in a strict language the argument needs to be evaluated before the function call, so why does binding <code>n</code> make a difference here?</p>",
        "id": 398877048,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1698405045
    },
    {
        "content": "<p>because the arguments are evaluated left to right</p>",
        "id": 398877907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405377
    },
    {
        "content": "<p>actually no nvm, I agree that one is dumb</p>",
        "id": 398878005,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405432
    },
    {
        "content": "<p>What's the IR for that one?</p>",
        "id": 398878245,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698405529
    },
    {
        "content": "<p>I have an example 3 because it seems this array refuses to be unshared:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">EquivManager</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">NodeRef</span> <span class=\"o\">:=</span> <span class=\"n\">m.uf.size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">EquivManager</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">EquivManager</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">uf</span> <span class=\"o\">:=</span> <span class=\"n\">m.uf.push</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toNode</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"n\">EquivManager</span> <span class=\"n\">NodeRef</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">m.toNodeMap.find</span><span class=\"bp\">?</span> <span class=\"n\">e</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">m.next</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">m.push</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">toNodeMap</span> <span class=\"o\">:=</span> <span class=\"n\">m.toNodeMap.insert</span> <span class=\"n\">e</span> <span class=\"n\">r</span> <span class=\"o\">})</span>\n</code></pre></div>\n<p>It appears that <code>m</code> is being shared across the call to <code>push</code>, even if I inline the two functions:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean.EquivManager.toNode._lambda_1</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Lean4Lean.UnionFind.push</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n  <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.HashMap.insert._at.Lean.EquivManager.toNode._spec_1</span> <span class=\"n\">x_7</span> <span class=\"n\">x_2</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_9</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Lean.EquivManager.mk</span><span class=\"o\">]</span> <span class=\"n\">x_6</span> <span class=\"n\">x_8</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_10</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Prod.mk</span><span class=\"o\">]</span> <span class=\"n\">x_5</span> <span class=\"n\">x_9</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_10</span>\n</code></pre></div>\n<p>(Notice that <code>x_4</code> is <code>inc</code>'d just before the <code>push</code> call)</p>",
        "id": 398878289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/Surprising.20sharing.20bug/near/398878245\">said</a>:</p>\n<blockquote>\n<p>What's the IR for that one?</p>\n</blockquote>\n<p>Example 1:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Lean4Lean.UnionFind.push</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.size</span> <span class=\"bp\">◾</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Lean4Lean.UFNode.mk</span><span class=\"o\">]</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.push</span> <span class=\"bp\">◾</span> <span class=\"n\">x_1</span> <span class=\"n\">x_4</span><span class=\"bp\">;</span>\n  <span class=\"n\">ret</span> <span class=\"n\">x_5</span>\n</code></pre></div>",
        "id": 398878348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405584
    },
    {
        "content": "<p>oh wait that's the fixed version</p>",
        "id": 398878440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405609
    },
    {
        "content": "<p>the unfixed version is exactly the same...</p>",
        "id": 398878492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405631
    },
    {
        "content": "<p>I must have misdiagnosed because of example 3</p>",
        "id": 398878530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405646
    },
    {
        "content": "<p>(I have a shared array and a bunch of suspicious patterns I'm trying to fix to eliminate it)</p>",
        "id": 398878626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698405682
    },
    {
        "content": "<p>Here's an MWE for example 3:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">noinline</span><span class=\"kd\">]</span> <span class=\"kd\">def</span> <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">StateM</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">next</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">m.1.size</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">push</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">m.1.push</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"n\">m</span>\n  <span class=\"k\">let</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">push</span> <span class=\"n\">m</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">m.2.push</span> <span class=\"n\">r</span> <span class=\"o\">})</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">x_1</span> <span class=\"o\">:</span> <span class=\"n\">obj</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_2</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">next</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"n\">inc</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_3</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">push</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n  <span class=\"k\">let</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"o\">:=</span> <span class=\"n\">isShared</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n  <span class=\"n\">case</span> <span class=\"n\">x_4</span> <span class=\"o\">:</span> <span class=\"n\">u8</span> <span class=\"n\">of</span>\n  <span class=\"n\">Bool.false</span> <span class=\"bp\">→</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_5</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_5</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_6</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">proj</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"n\">inc</span> <span class=\"n\">x_6</span><span class=\"bp\">;</span>\n    <span class=\"n\">dec</span> <span class=\"n\">x_1</span><span class=\"bp\">;</span>\n    <span class=\"n\">inc</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_7</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">Array.push</span> <span class=\"bp\">◾</span> <span class=\"n\">x_6</span> <span class=\"n\">x_2</span><span class=\"bp\">;</span>\n    <span class=\"n\">set</span> <span class=\"n\">x_3</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">x_7</span><span class=\"bp\">;</span>\n    <span class=\"k\">let</span> <span class=\"n\">x_8</span> <span class=\"o\">:</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ctor_0</span><span class=\"o\">[</span><span class=\"n\">Prod.mk</span><span class=\"o\">]</span> <span class=\"n\">x_2</span> <span class=\"n\">x_3</span><span class=\"bp\">;</span>\n    <span class=\"n\">ret</span> <span class=\"n\">x_8</span>\n</code></pre></div>",
        "id": 398879423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406019
    },
    {
        "content": "<p>the <code>inc</code> before <code>push</code> is the problem, and it happens because of the <code>proj[1] x_1</code> further down</p>",
        "id": 398879493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406049
    },
    {
        "content": "<p>Wow, I've never seen <code>with 1</code> before</p>",
        "id": 398879667,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1698406110
    },
    {
        "content": "<p>I think this one can be fixed by just inlining everything</p>",
        "id": 398879798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406187
    },
    {
        "content": "<p>but inline annotations are not sufficient</p>",
        "id": 398879893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406212
    },
    {
        "content": "<p>even</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">m</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">m.1.size</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">m.1.push</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">m.2.push</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>doesn't work</p>",
        "id": 398880096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406320
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"bp\">×</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Id</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">a.size</span>\n  <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">a.push</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b.push</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>does though</p>",
        "id": 398880175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406337
    },
    {
        "content": "<p>woohoo, that finally killed the sharing bug and lean4lean is acceptably fast</p>",
        "id": 398880938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698406634
    },
    {
        "content": "<p>This one is at least understandable though, right?<br>\nIIRC, there is something vaguely related in GHC where if the GC encounters a thunk that is a projection (say <code>m.2</code>) out of another heap object <code>m</code> that has already been evaluated to a constructor, then it will just evaluate the thunk rather than copy it, which might eliminate the last reference to <code>m</code>. Not sure if there is any way to diagnose this Lean situation at runtime though.</p>",
        "id": 398997498,
        "sender_full_name": "Reid Barton",
        "timestamp": 1698459455
    },
    {
        "content": "<p>wow, just bumped into this. I am actually debugging gccjit backend all day long and surprisingly seeing a similar test case here.</p>",
        "id": 399004153,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698463758
    },
    {
        "content": "<p><a href=\"https://github.com/SchrodingerZhu/LeanGccBackend/commit/555fdb80c8b850f8df6ccca752c59c0f6301e47d\">https://github.com/SchrodingerZhu/LeanGccBackend/commit/555fdb80c8b850f8df6ccca752c59c0f6301e47d</a></p>",
        "id": 399004197,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698463800
    },
    {
        "content": "<p>I guess I have messed up something in the backend, such that the array is not updated in place somehow. I am looking into the low level it line by line and I am still not sure why the RC keeps ramping up before push.</p>",
        "id": 399004400,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698463948
    },
    {
        "content": "<p>Yeah, it was just me setting wrong header.</p>",
        "id": 399009376,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1698467638
    },
    {
        "content": "<p>Today's example of a 40x slowdown in lean4lean wrt the C++ is, again, traced to a sharing bug. Example 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">whnfCore'</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cheapRec</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cheapProj</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">save</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">if</span> <span class=\"bp\">!</span><span class=\"n\">cheapRec</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">cheapProj</span> <span class=\"k\">then</span>\n      <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">whnfCoreCache</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"!!\"</span> <span class=\"n\">s.whnfCoreCache</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"n\">e</span> <span class=\"n\">r</span> <span class=\"o\">}</span>\n    <span class=\"n\">return</span> <span class=\"n\">r</span>\n  <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">e.withAppRev</span> <span class=\"k\">fun</span> <span class=\"n\">f0</span> <span class=\"n\">rargs</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"bp\">←</span> <span class=\"n\">whnfCore</span> <span class=\"n\">f0</span> <span class=\"n\">cheapRec</span> <span class=\"n\">cheapProj</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">rec</span> <span class=\"n\">loop</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">RecM</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n        <span class=\"k\">let</span> <span class=\"n\">cont2</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">f.instantiateRange</span> <span class=\"o\">(</span><span class=\"n\">rargs.size</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">rargs.size</span> <span class=\"n\">rargs</span>\n          <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.mkAppRevRange</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">rargs.size</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">rargs</span>\n          <span class=\"n\">save</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">whnfCore</span> <span class=\"n\">r</span> <span class=\"n\">cheapRec</span> <span class=\"n\">cheapProj</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"k\">then</span>\n          <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">rargs.size</span> <span class=\"k\">then</span> <span class=\"n\">loop</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">body</span>\n          <span class=\"k\">else</span> <span class=\"n\">cont2</span>\n        <span class=\"k\">else</span> <span class=\"n\">cont2</span>\n      <span class=\"n\">loop</span> <span class=\"mi\">1</span> <span class=\"n\">body</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">f0</span> <span class=\"k\">then</span>\n      <span class=\"bp\">...</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">f.mkAppRevRange</span> <span class=\"mi\">0</span> <span class=\"n\">rargs.size</span> <span class=\"n\">rargs</span>\n      <span class=\"n\">save</span> <span class=\"bp\">&lt;|←</span> <span class=\"n\">whnfCore</span> <span class=\"n\">r</span> <span class=\"n\">cheapRec</span> <span class=\"n\">cheapProj</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 399227193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698642892
    },
    {
        "content": "<p>The shared value is the <code>s.whnfCoreCache</code> value at the start. As far as I can tell, there is no way to predict this by looking at the code. It is fixed by writing <code>let rec save</code> instead of <code>let save</code> for the join point; this causes lean to hoist it out as a separate definition instead of inlining it, and somehow this gets the order of operations right</p>",
        "id": 399227249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698642954
    },
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">arr</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">bla</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Maybe</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">none</span>\n  <span class=\"k\">with</span> <span class=\"kd\">@[</span><span class=\"n\">computed_field</span><span class=\"kd\">]</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span> <span class=\"bp\">→</span> <span class=\"n\">Unit</span> <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">()</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Maybe</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">StateT</span> <span class=\"n\">Foo</span> <span class=\"n\">Id</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">save</span> <span class=\"o\">:=</span> <span class=\"k\">do</span> <span class=\"c1\">-- change this to `let rec save` to eliminate the sharing below</span>\n    <span class=\"n\">modify</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">s</span> <span class=\"k\">with</span> <span class=\"n\">arr</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"!!\"</span> <span class=\"n\">s.arr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">push</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"k\">then</span>\n    <span class=\"n\">save</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">compiler.extract_closed</span> <span class=\"n\">false</span> <span class=\"k\">in</span>\n<span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">⟨</span><span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">],</span> <span class=\"mi\">3</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 399228942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698644595
    },
    {
        "content": "<p>it appears to have something to do with computed fields</p>",
        "id": 399228949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698644608
    }
]