[
    {
        "content": "<p>I noticed that <code>(Int × Int) × (Int × Int)</code> evaluates to the same type as <code>(Int × Int) × Int × Int</code>. Can see some good mathematical reasons for doing that, but this leads to the following rather intuitive behavior:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">l3</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Prod</span> <span class=\"n\">Int</span> <span class=\"n\">Int</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"o\">[((</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">))]</span>\n<span class=\"c1\">-- Expected</span>\n<span class=\"n\">l3.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x3</span><span class=\"o\">,</span> <span class=\"n\">x4</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Not expected</span>\n<span class=\"n\">l3.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">((</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">),</span> <span class=\"n\">x3</span><span class=\"o\">,</span> <span class=\"n\">x4</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265202310,
        "sender_full_name": "Tim Hunter",
        "timestamp": 1639681020
    },
    {
        "content": "<p>The notation itself is right associative <a href=\"https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L65\">https://github.com/leanprover/lean4/blob/master/src/Init/Notation.lean#L65</a></p>\n<p>Prod isn't itself associative, though, since <code>(Int × Int) × Int</code> and <code>Int × (Int × Int)</code> are different types.</p>\n<p>Right associativity makes it work well with angle bracket universal constructor notation, which has the rule that you can splice in the last list of arguments into the whole list:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">bm</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">bm</span><span class=\"o\">⟩</span>\n<span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">bm</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">an</span><span class=\"o\">,</span> <span class=\"n\">b1</span><span class=\"o\">,</span> <span class=\"bp\">...</span><span class=\"o\">,</span> <span class=\"n\">bm</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265204534,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639681913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"460889\">Tim Hunter</span> has marked this topic as resolved.</p>",
        "id": 265209955,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639684195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Is.20Prod.20associative.3F/near/265204534\">said</a>:</p>\n<blockquote>\n<p>Prod isn't itself associative, though, since <code>(Int × Int) × Int</code> and <code>Int × (Int × Int)</code> are different types.</p>\n</blockquote>\n<p>Isn't that undecidable?</p>",
        "id": 265214878,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1639686508
    },
    {
        "content": "<p>I think it's independent of lean, i.e. you can't prove them neither equal nor different</p>",
        "id": 265216165,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1639687160
    },
    {
        "content": "<p>But that still means that for practical purpose you should think of them as not being equal (that's not to say \"as being provably different\")</p>",
        "id": 265216427,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1639687271
    },
    {
        "content": "<p>And they are still different in the sense that they are not definitionally equal, so they are not the same type, under this interpretation of \"same\" (which maybe is the most useful one in this context)</p>",
        "id": 265217326,
        "sender_full_name": "Horațiu Cheval",
        "timestamp": 1639687685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456794\">@Patrick Johnson</span> Whether or not they might be <code>Eq</code>, they're definitely not definitionally equal. Lean will decide the following has a type mismatch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Int</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">Int</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">Int</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 265217333,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1639687688
    }
]