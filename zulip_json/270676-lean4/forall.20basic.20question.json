[
    {
        "content": "<p>Hi I'm working through Theorem Proving in Lean 4.</p>\n<p>I have a proof of commutivity of OR:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.intro</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">a</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">b</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">a</span>\n     <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">b</span> <span class=\"o\">)</span>\n</code></pre></div>\n<p>I wanted to simplify the repeated lambda by extracting a theorem:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">flipOr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inl</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inr</span> <span class=\"n\">a</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Or.inr</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Or.inl</span> <span class=\"n\">b</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.intro</span> <span class=\"n\">flipOr</span> <span class=\"n\">flipOr</span>\n</code></pre></div>\n<p>however this gives a type error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">Iff.intro</span> <span class=\"n\">flipOr</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">flipOr</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>if it's true for all p q, it must be true for the specific bound p and q in the example, right? How do I fix this?</p>",
        "id": 362632913,
        "sender_full_name": "James Sully",
        "timestamp": 1685598462
    },
    {
        "content": "<p>Nevermind, got it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">Iff.intro</span> <span class=\"o\">(</span><span class=\"n\">flipOr</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flipOr</span> <span class=\"n\">q</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362633168,
        "sender_full_name": "James Sully",
        "timestamp": 1685598563
    },
    {
        "content": "<p>You may want to look into implicit binders -- if you bind <code>p</code> and <code>q</code> in <code>flipOr</code> using <em>implicit binders</em>, the values will automatically be filled in by unification at the use-site:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">flipOr</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 362633529,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685598684
    },
    {
        "content": "<p>nice, thank you</p>",
        "id": 362633671,
        "sender_full_name": "James Sully",
        "timestamp": 1685598732
    },
    {
        "content": "<p>I was sort of confused at first, because Lean will automatically introduce implicit bindings for any variables you use without binding them, so in a fresh file if you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">flipOr</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n<p>Lean will add the <code>{p q : Prop}</code> automatically. But I assume you declared <code>variables (p q : Prop)</code> above, which overrides the auto-implicit behavior.</p>",
        "id": 362634017,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685598860
    },
    {
        "content": "<p>That is in fact exactly what my confusion was. It was because I didn't didn't write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>myself, I copied the exercises from the book</p>",
        "id": 362634250,
        "sender_full_name": "James Sully",
        "timestamp": 1685598946
    },
    {
        "content": "<p>thanks very much!</p>",
        "id": 362634262,
        "sender_full_name": "James Sully",
        "timestamp": 1685598954
    },
    {
        "content": "<p>so when I add <code>{p q}</code> to a theorem in a context where I've already introduced <code>p</code> and <code>q</code> as variables, am I just shadowing them?</p>",
        "id": 362634655,
        "sender_full_name": "James Sully",
        "timestamp": 1685599076
    },
    {
        "content": "<p>roughly, yeah. my impression is that all <code>variables</code> bindings are added at the start of each declaration before elaboration, and then any unused bindings are removed after elaboration. (someone correct me if that's wrong)</p>",
        "id": 362635392,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1685599300
    },
    {
        "content": "<p>ok, cool</p>",
        "id": 362636980,
        "sender_full_name": "James Sully",
        "timestamp": 1685599787
    }
]