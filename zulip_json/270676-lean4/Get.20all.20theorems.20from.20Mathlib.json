[
    {
        "content": "<p>Is there a way that I can obtain ‚âà1000 (or all <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span> ) theorems from Mathlib in a metaprogram? I have the following code, but has extreme performance problems.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasPrefix</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">comps</span> <span class=\"o\">:=</span> <span class=\"n\">name.components.toArray</span>\n  <span class=\"k\">let</span> <span class=\"n\">preComps</span> <span class=\"o\">:=</span> <span class=\"n\">pre.components.toArray</span>\n  <span class=\"n\">comps</span><span class=\"o\">[:</span><span class=\"n\">preComps.size</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"n\">preComps</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#bench\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">mathlibModules</span> <span class=\"o\">:=</span> <span class=\"n\">env.allImportedModuleNames</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">hasPrefix</span> <span class=\"bp\">`</span><span class=\"n\">Mathlib.Data.Int</span> <span class=\"bp\">.</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">mathlibModules.size</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">3</span> <span class=\"k\">then</span>\n    <span class=\"n\">mathlibModules</span> <span class=\"o\">:=</span> <span class=\"n\">mathlibModules</span><span class=\"o\">[:</span><span class=\"mi\">3</span><span class=\"o\">]</span>\n    <span class=\"n\">dbg_trace</span> <span class=\"s2\">\"Too many modules, truncating to just {mathlibModules}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mathlibModuleIdxs</span> <span class=\"o\">:=</span> <span class=\"n\">mathlibModules.map</span> <span class=\"o\">(</span><span class=\"n\">env.moduleIdxForModule</span><span class=\"bp\">?</span> <span class=\"bp\">.</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">-- The following is the slow part:</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp</span> <span class=\"o\">:=</span> <span class=\"n\">mathlibModuleIdxs.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">env.declsInModuleIdx</span> <span class=\"n\">x</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toArray</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">tmp2</span> <span class=\"o\">:=</span> <span class=\"n\">tmp.flatten</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Have {tmp2.size} declarations from {mathlibModules}\"</span>\n\n<span class=\"bp\">#</span><span class=\"n\">bench</span>\n</code></pre></div>",
        "id": 347161214,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680704303
    },
    {
        "content": "<p>If <code>env</code> is your current environment (which should be everything if you already have <code>import Mathlib</code>) then <code>env.constants</code> (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Environment#doc\">docs4#Lean.Environment</a>) should be all theorems.<br>\nOf course there are lots so things might eventually be slow but this works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">hasPrefix</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">comps</span> <span class=\"o\">:=</span> <span class=\"n\">name.components.toArray</span>\n  <span class=\"k\">let</span> <span class=\"n\">preComps</span> <span class=\"o\">:=</span> <span class=\"n\">pre.components.toArray</span>\n  <span class=\"n\">comps</span><span class=\"o\">[:</span><span class=\"n\">preComps.size</span><span class=\"o\">]</span> <span class=\"bp\">==</span> <span class=\"n\">preComps</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"#bench\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getEnv</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Have {env.constants.size} declarations\"</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">env.constants.toList.take</span> <span class=\"mi\">1000</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">Prod.fst</span>\n\n<span class=\"bp\">#</span><span class=\"n\">bench</span>\n</code></pre></div>",
        "id": 347182414,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680708330
    },
    {
        "content": "<p>You might also want to look at how the mathlib linters function <a href=\"https://github.com/leanprover-community/mathlib4/blob/e54ba2250be1bd7bbb68497a3781dc62ca072d79/scripts/runLinter.lean#L32\">https://github.com/leanprover-community/mathlib4/blob/e54ba2250be1bd7bbb68497a3781dc62ca072d79/scripts/runLinter.lean#L32</a>, these run over all declarations and are pretty efficient</p>",
        "id": 347182824,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680708406
    },
    {
        "content": "<p>I see you only want mathlib theorems, maybe <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Std.Tactic.Lint.getDeclsInPackage#doc\">docs4#Std.Tactic.Lint.getDeclsInPackage</a> is the right answer in that case</p>",
        "id": 347183809,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680708616
    },
    {
        "content": "<p><code>getDeclsInPackage</code> looks very promising! Thanks a lot</p>",
        "id": 347190464,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1680709985
    }
]