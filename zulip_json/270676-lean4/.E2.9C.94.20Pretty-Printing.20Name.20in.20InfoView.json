[
    {
        "content": "<p>I have a <code>Lean.Name</code> that exist in the environment, and I want to print it using <code>Lean.logInfo</code> so that I can hover and click the name.<br>\nRight now I turn it into an expr using <code>Lean.mkConstWithLevelParams</code>, but then it’s printed with <code>@</code> in front.<br>\nIs there a convenient way to have the name printed without <code>@</code> and still get the hover information?<br>\n(Sorry, I wanted to post this to <code>lean4</code>)</p>",
        "id": 378282147,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690235081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> does the printed constant have implicit parameters? I think that might just be how Lean's pretty-printer works. A single constant with implicits that are not provided will be printed with an <code>@</code>. If you really wanted to, you could perhaps fill the implicits with some metavariables.</p>",
        "id": 378283667,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690235693
    },
    {
        "content": "<p>Right, that’s why it feels wrong to go via <code>Expr</code> in the first place – I already have the name, so why not do directly what the pretty-printer does when it encounters a (satisfied) constant in an <code>Expr</code>.</p>",
        "id": 378283759,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690235748
    },
    {
        "content": "<p>What do you mean 'do directly what the pretty-printer does'? The infoview 'knows' about expressions and provides hovers for them. If you just send a name, it might not be a constant at all (it could be a namespace for instance), so we wouldn't know what interactions to provide for it.</p>",
        "id": 378284011,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690235841
    },
    {
        "content": "<p>So somewhere there must be code in the InfoView that takes such an Expr apart and when it finds an <code>Expr.constant name</code>, pretty-prints that name, with our without <code>@</code>, possibly looking up its type. I wonder if I could just reach that code path more directly <code>Lean.Name</code>.</p>\n<p>But skimming through the existing code it seems unlikely, so I guess I won’t bother for now, the <code>@</code> isn’t that ugly.</p>",
        "id": 378284698,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690236128
    },
    {
        "content": "<p><code>rw?</code> has the <code>@</code> as well and I always wondered why. (I'm not sure about <code>exact?</code>, actually...)</p>",
        "id": 378285094,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690236290
    },
    {
        "content": "<p>The code you're thinking of is in the <em>delaborator</em>, but doesn't live in the infoview. It turns <code>Expr</code>essions into <code>Syntax</code>objects. This is followed by the <em>parenthesizer</em> (<code>Syntax -&gt; Syntax</code>), then the <em>formatter</em> (<code>Syntax -&gt; Format</code>), and finally a <code>Format</code> printer (<code>Format -&gt; String</code>, morally). Overall we get a chain <code>pp : Expr -&gt; String</code>. The infoview just receives the resulting string. <em>But</em> substrings in this string are tagged with original input data. For instance, if we have <code>pp (← mkConstWithLevelParams `id) = \"@id\"</code>, the entire string will be tagged with <code>.const id univParams</code>, and the infoview knows how to generate hovers for such tags.</p>",
        "id": 378285434,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690236460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/287929-mathlib4/topic/Pretty-Printing.20Name.20in.20InfoView/near/378285094\">said</a>:</p>\n<blockquote>\n<p><code>rw?</code> has the <code>@</code> as well and I always wondered why. (I'm not sure about <code>exact?</code>, actually...)</p>\n</blockquote>\n<p>But that’s a slightly different case:<br>\nThere clicking on the names in the info view  (or rather the whole line) will insert it into the document.<br>\nWhat I want to achieve is similar to the goal view: That you can ctrl-click on a name to jump to its definition, or hover to see the types.</p>",
        "id": 378285569,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690236516
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"128280\">@Wojciech Nawrocki</span> ! And the supported tags are those in <a href=\"https://leanprover-community.github.io/mathlib4_docs/Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\"><code>Lean.Elab.Info</code></a> I presume?<br>\n(Anyways, off to bed, and this is far from important…)</p>",
        "id": 378285733,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690236597
    },
    {
        "content": "<p>Ah no, that's different. <code>Lean.Elab.Info</code> is how data about Lean modules is stored in the server. Tags are produced <em>from</em> that. The set of possible tags is extensible, but one supported tag is <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Widget.MsgEmbed#doc\">docs#Lean.Widget.MsgEmbed</a>. Note that this is quite deep into the implementation, ideally you shouldn't have to think about this.</p>",
        "id": 378286202,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690236774
    },
    {
        "content": "<p>Ok, won’t do :)</p>",
        "id": 378286308,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690236825
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> has marked this topic as resolved.</p>",
        "id": 378286317,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690236828
    },
    {
        "content": "<p>You can hook into the delaborator to change this quite easily:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter</span> <span class=\"n\">Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[delab app]</span>\n<span class=\"kd\">def</span> <span class=\"n\">bareConstant</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span> <span class=\"n\">matches</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">..</span> <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"bp\">..</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">getPPOption</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"n\">getBool</span> <span class=\"bp\">`</span><span class=\"n\">pp.bare</span><span class=\"o\">)</span> <span class=\"k\">do</span> <span class=\"n\">failure</span>\n  <span class=\"n\">delabAppFn</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"demo\"</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">logInfo</span> <span class=\"bp\">&lt;|</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"bp\">``</span><span class=\"n\">id</span> <span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"o\">])</span><span class=\"bp\">.</span><span class=\"n\">setOption</span> <span class=\"bp\">`</span><span class=\"n\">pp.bare</span> <span class=\"n\">true</span>\n\n<span class=\"n\">demo</span>\n</code></pre></div>",
        "id": 378286560,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690236911
    },
    {
        "content": "<p>(The option is there to make this opt-in.)</p>",
        "id": 378286625,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690236939
    },
    {
        "content": "<p>yeah but that doesn't look like a good long term strategy</p>",
        "id": 378286765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690236984
    },
    {
        "content": "<p>the bare option should be in the actual delaborator</p>",
        "id": 378286798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690237000
    },
    {
        "content": "<p>I agree in principle.  We also have a few places in core where we print constants in messages that could use this.  But in practice the custom delaborator works just as well, and could live in mathlib.</p>",
        "id": 378287054,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1690237083
    },
    {
        "content": "<p>std also wants this</p>",
        "id": 378287308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690237178
    },
    {
        "content": "<p>although I forget now where exactly it came up</p>",
        "id": 378287352,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690237197
    },
    {
        "content": "<p><code>#explode</code> is doing some hack to work around this issue</p>",
        "id": 378287435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690237211
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Mathlib.Explode.ppConst#src\">src4#Mathlib.Explode.ppConst</a></p>",
        "id": 378287514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690237241
    },
    {
        "content": "<p>I think the issue is that those can be different terms. <code>id.{u}</code> elaborates to <code>@id.{u} ?m123</code>.</p>",
        "id": 378287574,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1690237266
    },
    {
        "content": "<p>also copied into std as <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.ppConst#src\">src4#Lean.ppConst</a></p>",
        "id": 378287607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690237279
    },
    {
        "content": "<p>Thanks, that works. Still a bit round-about to have to go via <code>Expr</code> first, if this handles only <code>.const</code> anyways, but good enough for me now.</p>",
        "id": 378376546,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1690272946
    },
    {
        "content": "<p>I left a note at <a href=\"https://github.com/leanprover/lean4/pull/2352#issuecomment-1649257597\">https://github.com/leanprover/lean4/pull/2352#issuecomment-1649257597</a> though it's just an idle thought at this point</p>",
        "id": 378383016,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1690274339
    }
]