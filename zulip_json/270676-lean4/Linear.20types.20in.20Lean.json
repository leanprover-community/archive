[
    {
        "content": "<p>What is the community's opinion on having linear / substructural types in Lean?<br>\n(To be clear, this is not a feature request. I'm considering doing a PhD on this topic, but it would very likely require kernel modifications, thus buy-in from the core team &amp; community)</p>\n<p>I'm mostly thinking about the benefits to Lean as a programming language. Looking at Linear Haskell, an effort to add linear types to Haskell, they cite two reasons:</p>\n<ul>\n<li>\n<p>Linearity enables optimizations like in-place mutation. IIUC Lean does do in-place mutation when the reference count of a value is 1, but it's currently easy to introduce a performance regression. A type like <code>Array</code> might be a good candidate for being linear (or at least, affine), with an explicit copy method, so that it's very clear when things are done in-place, and when a copy is required</p>\n</li>\n<li>\n<p>Safe Monadic Programming. Currently, a value of <code>IO ...</code> might be accidentally copied, causing the associated effect to happen twice. Linear types would help prevent this (again, with some explicit copy method when the double effect is actually desirable).</p>\n</li>\n</ul>\n<p>Of course, Lean is also a proof assistant. Presumably, the addition of linearity to the kernel would translate to benefits to, e.g., the recent effort to port Iris developments to Lean.</p>\n<p>The idea would be to make this all as gradual, and opt-in, as possible, where currently written code and proofs keeps working classically, but there is some way to opt-in to linearity.</p>",
        "id": 336462221,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1677239462
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/270676-lean4/topic/ownership.20.2F.20borrow-checking/near/324859952\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/ownership.20.2F.20borrow-checking/near/324859952</a>!</p>",
        "id": 336469288,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677241823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/Linear.20types.20in.20Lean/near/336462221\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Linearity enables optimizations like in-place mutation</li>\n</ul>\n</blockquote>\n<p>In the general case you'll want Clean-like uniqueness types for this, not linear types. Marc's thesis will expand on that.</p>\n<blockquote>\n<p>Safe Monadic Programming. Currently, a value of <code>IO ...</code> might be accidentally copied, causing the associated effect to happen twice. Linear ypes would help prevent this (again, with some explicit copy method when the double effect is actually desirable).</p>\n</blockquote>\n<p>I don't understand this point, copying an <code>IO</code> value does nothing until you actually execute them, which is always an explicit action in Lean.</p>\n<blockquote>\n<p>Of course, Lean is also a proof assistant. Presumably, the addition of linearity to the kernel would translate to benefits to, e.g., the recent effort to port Iris developments to Lean.</p>\n</blockquote>\n<p>Lean's type theory is relatively conservative, there are no plans to introduce multiplicity into the kernel.</p>",
        "id": 336469743,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677241999
    },
    {
        "content": "<p>(Leo had mentioned at some point wanting to add multiplicity annotations, right? But with a checker that is outside the kernel?)</p>",
        "id": 336528104,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677256217
    },
    {
        "content": "<p>Yes, that is roughly Marc's approach</p>",
        "id": 336528995,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677256435
    }
]