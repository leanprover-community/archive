[
    {
        "content": "<p>When porting homotopy groups to mathlib4 I observed the following strange behavior of <code>erw</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">homotopicFrom</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">Ω^</span> <span class=\"n\">N</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">toLoop</span> <span class=\"n\">i</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Homotopic</span> <span class=\"o\">(</span><span class=\"n\">toLoop</span> <span class=\"n\">i</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Homotopic</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine'</span> <span class=\"n\">Nonempty.map</span> <span class=\"k\">fun</span> <span class=\"n\">H</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">⟨⟨</span><span class=\"n\">homotopyFrom</span> <span class=\"n\">i</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span>\n  <span class=\"n\">pick_goal</span> <span class=\"mi\">3</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rintro</span> <span class=\"n\">t</span> <span class=\"n\">y</span> <span class=\"o\">⟨</span><span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">jH</span><span class=\"o\">⟩</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">homotopyFrom_apply</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>After the <code>refine'</code> there are three goals, and I pick the third to work on. After the <code>·</code> only goal 3 appears, as expected, but after the <code>erw</code>, goal 1 and 2 reappear in the scope. Any idea why this happens? I'm unable to minimize this further, since the following behaves normally:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.PermuteGoals</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">Classical.em</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"n\">pick_goal</span> <span class=\"mi\">2</span>\n  <span class=\"bp\">·</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">eq_comm</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- case inl doesn't appear here</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>So I guess you will have to check out my branch at <a href=\"https://github.com/leanprover-community/mathlib4/pull/4939\">!4#4939</a> (look <a href=\"https://github.com/leanprover-community/mathlib4/blob/08e319789d708f40753027432e14e1e9be72a6bd/Mathlib/Topology/Homotopy/HomotopyGroup.lean#L337-L344\">here</a> specifically) to further investigate this.</p>\n<p>(Update: I realize this probably has nothing to do with <code>pick_goal</code>)</p>",
        "id": 365015075,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1686370560
    }
]