[
    {
        "content": "<p>Is there a reason <code>lake exe cache get</code> doesn't work in a subdirectory of a repo?  E.g., in mathlib4 I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">topology</span><span class=\"o\">)</span> <span class=\"n\">julia</span><span class=\"o\">:</span><span class=\"n\">mathlib4</span><span class=\"bp\">%</span> <span class=\"n\">pwd</span>\n<span class=\"bp\">/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">irving</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span>\n<span class=\"o\">(</span><span class=\"n\">topology</span><span class=\"o\">)</span> <span class=\"n\">julia</span><span class=\"o\">:</span><span class=\"n\">mathlib4</span><span class=\"bp\">%</span> <span class=\"n\">cd</span> <span class=\"n\">Mathlib</span>\n<span class=\"o\">(</span><span class=\"n\">topology</span><span class=\"o\">)</span> <span class=\"n\">julia</span><span class=\"o\">:</span><span class=\"n\">Mathlib</span><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">./</span><span class=\"n\">lakefile.lean</span>\n<span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">topology</span><span class=\"o\">)</span> <span class=\"n\">julia</span><span class=\"o\">:</span><span class=\"n\">Mathlib</span><span class=\"bp\">%</span> <span class=\"n\">cd</span> <span class=\"bp\">..</span>\n<span class=\"o\">(</span><span class=\"n\">topology</span><span class=\"o\">)</span> <span class=\"n\">julia</span><span class=\"o\">:</span><span class=\"n\">mathlib4</span><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"n\">exe</span> <span class=\"n\">cache</span> <span class=\"n\">get</span>\n<span class=\"n\">No</span> <span class=\"n\">files</span> <span class=\"n\">to</span> <span class=\"n\">download</span>\n<span class=\"n\">Decompressing</span> <span class=\"mi\">3851</span> <span class=\"n\">file</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"n\">unpacked</span> <span class=\"k\">in</span> <span class=\"mi\">37</span> <span class=\"n\">ms</span>\n</code></pre></div>",
        "id": 398558611,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698266948
    },
    {
        "content": "<p>Probably because nobody tried it yet</p>",
        "id": 398558662,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1698266978
    },
    {
        "content": "<p>As far as I remember, the target place of the olean files depend on whether you're using a lib as a dependency or not.</p>\n<p>If you're using Mathlib as a dependency, you'd need to call <code>cache</code> from the root directory of your project so it can be aware that Mathlib is a dependency and then place the cache files in the correct place</p>",
        "id": 398563747,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698269723
    },
    {
        "content": "<p>Wait, you're calling <code>lake exe cache get</code> from a folder that's not the root folder of a Lake project. No <code>lake</code> command will work from there, except commands like <code>lake new ...</code>, <code>lake init ...</code>.</p>",
        "id": 398564088,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698269928
    },
    {
        "content": "<p>Is there a reason it doesn’t search upwards to find the project root, similar to git?  Or just an unimplemented feature?</p>",
        "id": 398564902,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698270416
    },
    {
        "content": "<p>Idk, but that's a Lake feature. So the topic name is not exactly precise for this discussion. Pinging <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> regardless</p>",
        "id": 398565160,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1698270533
    },
    {
        "content": "<p>It could search upward. There is a question though of whether one would want an accidental <code>lake build</code>, <code>lake clean</code>, etc. in directory to just do something unexpected because there is <code>lakefile.lean</code> somewhere higher up in the hierarchy.</p>",
        "id": 398566052,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698271056
    },
    {
        "content": "<p>Ah yes, I suppose that might interact poorly with an <code>rm -rf</code> bug.</p>",
        "id": 398566374,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698271239
    },
    {
        "content": "<p>Last time I asked about this Mac suggested I open an issue. When thinking about it more I became slightly skeptical it was a good idea, so never opened the issue. But as people keep asking, perhaps we should have the issue anyway? <span class=\"user-mention\" data-user-id=\"514145\">@Geoffrey Irving</span>?</p>",
        "id": 398577161,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1698276553
    },
    {
        "content": "<p>I find it a bit frustrating on command line (eg after manually manipulating files or directories in NNG) that I have to cd back to root (which I don't really want to do) in order to build a file. I usually get around this by having two terminals open.</p>",
        "id": 398623450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698303055
    },
    {
        "content": "<p>As a workaround, you can enclose your <code>cd...</code> command in round brackets: <code>( cd ../../..; lake build)</code> should let you stay in the current directory.</p>",
        "id": 398626875,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698304208
    },
    {
        "content": "<p>(That is, will run the command in a subshell and not touch the current one)</p>",
        "id": 398626962,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698304241
    },
    {
        "content": "<p>And <code>cd -</code> undoes the last cd command</p>",
        "id": 398628192,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1698304694
    },
    {
        "content": "<p>It's <code>cd ../../..</code> which I'm constantly typing btw</p>",
        "id": 398628319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698304744
    },
    {
        "content": "<p>Although, honestly, I have aliases for moving to the root directory and then perform various operations...</p>",
        "id": 398628367,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698304766
    },
    {
        "content": "<p>(Updated the command above! <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span> )</p>",
        "id": 398628632,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698304842
    },
    {
        "content": "<p>I think this is a good feature to add iff we are confident it doesn’t interact with other bugs to have bad consequences.  But since this would happen very soon in lake’s execution, before .olean complexity, it may be fine.</p>",
        "id": 398628682,
        "sender_full_name": "Geoffrey Irving",
        "timestamp": 1698304865
    },
    {
        "content": "<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">alias</span><span class=\"w\"> </span><span class=\"nv\">rbuild</span><span class=\"o\">=</span><span class=\"s1\">'( cd \"$(git rev-parse --show-toplevel)\" &amp;&amp; lake build )'</span>\n</code></pre></div>\n<p>Should run lake build in the root dir, without leaving the current dir.</p>",
        "id": 398629223,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698305059
    },
    {
        "content": "<p>Nice!</p>",
        "id": 398630794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1698305636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/.60lake.20exe.20cache.20get.60.20doesn't.20work.20in.20a.20subdirectory/near/398629223\">said</a>:</p>\n<blockquote>\n<p>E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">alias</span><span class=\"w\"> </span><span class=\"nv\">rbuild</span><span class=\"o\">=</span><span class=\"s1\">'( cd \"$(git rev-parse --show-toplevel)\" ; lake build )'</span>\n</code></pre></div>\n<p>Should run lake build in the root dir, without leaving the current dir.</p>\n</blockquote>\n<p>Make the <code>;</code> an <code>&amp;&amp;</code> and I'm all for it</p>",
        "id": 398651472,
        "sender_full_name": "Richard Copley",
        "timestamp": 1698313130
    },
    {
        "content": "<p>Richard, thanks: edited above!</p>",
        "id": 398658782,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698315820
    },
    {
        "content": "<p><code>&amp;&amp;</code> will probably not make a difference unless you have some unusual bash option set (or an unusual shell possibly).</p>",
        "id": 398694257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1698328465
    },
    {
        "content": "<p>Reid, you are right: I just tested and the exit code of the <code>cd ...</code> part is <code>0</code> regardless of whether you are in a git-managed dir or not!</p>\n<p>(I use bash.)</p>",
        "id": 398695276,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698328775
    },
    {
        "content": "<p>So, if you really wanted to use that workflow, this could achieve it:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"k\">$(</span>git<span class=\"w\"> </span>rev-parse<span class=\"w\"> </span>--show-toplevel<span class=\"k\">)</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"k\">$(</span>git<span class=\"w\"> </span>rev-parse<span class=\"w\"> </span>--show-toplevel<span class=\"k\">)</span><span class=\"s2\">\"</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 398696388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698329038
    },
    {
        "content": "<p>However, I doubt that I will ever have a non-git indexed dir where <code>lake build</code> will work, so I am happy to see the default error, if I happen to type the command in a wrong folder.</p>",
        "id": 398696763,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1698329139
    },
    {
        "content": "<p>Lake also has a <code>-d</code> option to run from a different directory without <code>cd</code>'ing to it. For example, <code>lake -d ../../.. build</code> should work for Kevin's case.</p>",
        "id": 398733823,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698340844
    },
    {
        "content": "<p>Or, <code>lake -d \"$(git rev-parse --show-toplevel)\" build</code>,  for the general case.</p>",
        "id": 398733947,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698340906
    },
    {
        "content": "<p>if you use the <code>-d</code> option to <code>lake exe</code> something, does the called executable get the root directory or the current directory?</p>",
        "id": 398756976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698350002
    },
    {
        "content": "<p>(or <code>lake env</code>)</p>",
        "id": 398756988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698350009
    },
    {
        "content": "<p>Current directory, because Lean does not currently have a <code>IO.Process.chdir</code> (which is why the option is also <code>-d</code> rather than the more standard <code>-C</code>).</p>",
        "id": 398759951,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698351126
    },
    {
        "content": "<p>Conceivably it could change the current directory for only external processes, but then the paths it passed would break as they are relative to the old current directory.</p>",
        "id": 398760122,
        "sender_full_name": "Mac Malone",
        "timestamp": 1698351221
    }
]