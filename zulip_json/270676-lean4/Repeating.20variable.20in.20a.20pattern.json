[
    {
        "content": "<p>Is there any way to have pattern matching cases that repeat variables? For example I have this, which gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Term</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">sub</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n  <span class=\"bp\">|</span> <span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span> <span class=\"bp\">→</span> <span class=\"n\">Term</span>\n\n<span class=\"n\">deriving</span> <span class=\"kd\">instance</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">for</span> <span class=\"n\">Term</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">simplify</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Term</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Term.sub</span> <span class=\"o\">(</span><span class=\"n\">Term.add</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span> <span class=\"c1\">-- invalid pattern, variable 'b' occurred more than once</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>Is there any way of doing this? I'd like to avoid having to change it to <code>| Term.sub (Term.add a b) c =&gt; if b = c then a else x</code>, so that future cases can handle it if it doesn't match.</p>",
        "id": 385988856,
        "sender_full_name": "James Randolf",
        "timestamp": 1692392661
    },
    {
        "content": "<p>Whatever your pattern match syntax is, it'd have to compile to some Lean term. I don't think there's a term (made from things like recursors for inductive data types) that can do that behaviour that's any simpler than if-then-else. So no, I don't think that's possible.</p>",
        "id": 386005898,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692403144
    },
    {
        "content": "<p>Consider what would happen if the repeated variable didn't have decidable equality - how would it be able to evaluate the function?</p>",
        "id": 386005931,
        "sender_full_name": "Sky Wilshaw",
        "timestamp": 1692403169
    },
    {
        "content": "<p>While the first half of the argument is correct and it would require substantial changes I dont think the decidable equality part is relevant, it could just throw an error in the same way that it would if you had the if</p>",
        "id": 386006618,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692403525
    },
    {
        "content": "<p>Also the main issue is not noticeable from the example above. The thing above could be rather easily implemented with some macro expansion that turns this match arm into an arm that has the if. The main issue is things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n</code></pre></div>\n<p>You cannot trivially implement the behavior of this with an if statement after the match arm because you would have to continue with further matches if the first match didn't succeed so the control flow becomes kind of messy since there is kind of \"an option to return from an arm into the match statement\" which is the main issue here I believe, this is also what makes pattern guards non trivial to do.</p>",
        "id": 386006995,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692403741
    }
]