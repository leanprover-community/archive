[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Danger</span>\n  <span class=\"bp\">|</span> <span class=\"n\">high</span>\n  <span class=\"bp\">|</span> <span class=\"n\">low</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Class</span> <span class=\"o\">:</span> <span class=\"n\">Danger</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">golden</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"n\">Danger.high</span>\n  <span class=\"bp\">|</span> <span class=\"n\">silver</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"n\">Danger.low</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Adventurer</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Danger</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span>\n  <span class=\"n\">classif</span> <span class=\"o\">:</span> <span class=\"n\">Class</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">highDanger</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Adventurer</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x.classif</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Class.golden</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Class.silver</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>I can't use this code because of this error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">compiler</span> <span class=\"n\">IR</span> <span class=\"n\">check</span> <span class=\"n\">failed</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">highDanger</span><span class=\"bp\">?.</span><span class=\"n\">_rarg'</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">type</span> <span class=\"bp\">'</span><span class=\"n\">obj'</span><span class=\"o\">,</span> <span class=\"n\">scalar</span> <span class=\"n\">expected</span>\n</code></pre></div>\n<p>Why I'm having this error and how to fix it?</p>",
        "id": 396948190,
        "sender_full_name": "Sofia Rodrigues",
        "timestamp": 1697477576
    },
    {
        "content": "<p>You can work around it for now by adding <code>noncomputable</code> to tell the compiler not to compile it at all</p>",
        "id": 396950120,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697478399
    },
    {
        "content": "<p>But this looks like a bug</p>",
        "id": 396950127,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697478403
    },
    {
        "content": "<p>Another workaround would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">highDanger</span> <span class=\"o\">{</span><span class=\"n\">d</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Adventurer</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">d</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Danger.high</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Danger.low</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 396950234,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697478445
    },
    {
        "content": "<p>The underlying bug here is that the compiler IR is mistyping the <code>x.classif</code> <code>sproj</code> as an Lean object (<code>obj</code>) rather than the primitive scalar <code>u8</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span>\n<span class=\"cm\">[init]</span>\n<span class=\"cm\">def highDanger?._rarg (x_1 : obj) : u8 :=</span>\n<span class=\"cm\">  let x_2 : obj := sproj[1, 0] x_1;</span>\n<span class=\"cm\">  case x_2 : obj of</span>\n<span class=\"cm\">  Class.golden →</span>\n<span class=\"cm\">    let x_3 : u8 := 1;</span>\n<span class=\"cm\">    ret x_3</span>\n<span class=\"cm\">  Class.silver →</span>\n<span class=\"cm\">    let x_4 : u8 := 0;</span>\n<span class=\"cm\">    ret x_4</span>\n<span class=\"cm\">def highDanger? (x_1 : u8) : obj :=</span>\n<span class=\"cm\">  let x_2 : obj := pap highDanger?._rarg;</span>\n<span class=\"cm\">  ret x_2</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">def</span> <span class=\"n\">highDanger</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Adventurer</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">x.classif</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Class.golden</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n  <span class=\"bp\">|</span> <span class=\"n\">Class.silver</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 396950802,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697478696
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> may have some clue why this occurs due to his familiarity with the compiler.</p>",
        "id": 396951227,
        "sender_full_name": "Mac Malone",
        "timestamp": 1697478872
    },
    {
        "content": "<p>It seems it already fucked up in the init phase of the Lean part so this is a bug in the C++ part of the compiler which I don't know much about as we want to get rid off it anyways...I guess you can open an issue about it and it will be put onto the \"new  code generator\" pile</p>",
        "id": 396951334,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697478948
    }
]