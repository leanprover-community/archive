[
    {
        "content": "<p>In Lean 3, <code>#print prod</code> gave</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>structure prod : Type u → Type v → Type (max u v)\nfields:\nprod.fst : Π {α : Type u} {β : Type v}, α × β → α\nprod.snd : Π {α : Type u} {β : Type v}, α × β → β\n</code></pre></div>\n<p>It now gives</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>inductive Prod.{u, v} : Type u → Type v → Type (max u v)\nnumber of parameters: 2\nconstructors:\nProd.mk : {α : Type u} → {β : Type v} → α → β → α × β\n</code></pre></div>\n<p>The new output doesn't mention the names <code>fst</code> and <code>snd</code>, which seem like important things to want to know when printing a structure. Is there another command that does do this?</p>",
        "id": 391122508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694770146
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Prod#doc\">docs#Prod</a></p>",
        "id": 391122830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694770228
    },
    {
        "content": "<p>docgen seems to do okay</p>",
        "id": 391122886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694770251
    },
    {
        "content": "<p>Is that you saying \"don't uses <code>#print</code>, go to the docs\", or \"this should be an easy fix to <code>#print</code> since doc-gen can do it\"?</p>",
        "id": 391123040,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694770311
    },
    {
        "content": "<p>both?</p>",
        "id": 391123196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694770345
    },
    {
        "content": "<p>doc-gen isn't an option for structures defined outside mathlib, or in local branches</p>",
        "id": 391123252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694770363
    },
    {
        "content": "<p>If I am in code I usually <code>#check Foo</code> and then go to definition on <code>Foo</code> to see what it looks like</p>",
        "id": 391123301,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694770378
    },
    {
        "content": "<p>That doesn't work if <code>Foo</code> is generated programmatically</p>",
        "id": 391123346,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694770392
    }
]