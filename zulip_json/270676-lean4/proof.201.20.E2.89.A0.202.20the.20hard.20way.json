[
    {
        "content": "<p>How do I prove 1 ≠ 2? I can always use <code>by simp</code>, but what about without it?</p>\n<p>I know this is the same as <code>1 = 2 → False</code>, so presumably I want something along these lines?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h1eq2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">show</span> <span class=\"n\">False</span> <span class=\"k\">from</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 362650186,
        "sender_full_name": "James Sully",
        "timestamp": 1685603790
    },
    {
        "content": "<p>What type are your numbers?</p>",
        "id": 362650390,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685603863
    },
    {
        "content": "<p><code>Nat</code></p>",
        "id": 362650404,
        "sender_full_name": "James Sully",
        "timestamp": 1685603868
    },
    {
        "content": "<p>let's say</p>",
        "id": 362650518,
        "sender_full_name": "James Sully",
        "timestamp": 1685603889
    },
    {
        "content": "<p><code>fun.</code></p>",
        "id": 362650683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685603964
    },
    {
        "content": "<p>or <code>fun h =&gt; nomatch h</code></p>",
        "id": 362650732,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685603980
    },
    {
        "content": "<p>one more step lower in abstraction is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Nat.noConfusion</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 362651280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604130
    },
    {
        "content": "<p>Thanks! ok, the <code>nomatch</code> one works (I'll have to look up nomatch)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">oneNeqTwo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nomatch</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>But i'm not sure where to put that <code>fun.</code> syntax. This is a syntax error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">oneNeqTwo</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 362651923,
        "sender_full_name": "James Sully",
        "timestamp": 1685604327
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.NoMatch</span>\n</code></pre></div>",
        "id": 362651975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604346
    },
    {
        "content": "<p>it's just syntax over <code>nomatch</code> , to allow empty pattern matches in <code>match</code> and <code>fun</code></p>",
        "id": 362652141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604389
    },
    {
        "content": "<p><code>unknown package 'Std'</code></p>",
        "id": 362652205,
        "sender_full_name": "James Sully",
        "timestamp": 1685604406
    },
    {
        "content": "<p>put this in your lakefile:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">std</span> <span class=\"k\">from</span> <span class=\"n\">git</span> <span class=\"s2\">\"https://github.com/leanprover/std4\"</span> <span class=\"bp\">@</span> <span class=\"s2\">\"main\"</span>\n</code></pre></div>",
        "id": 362652571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604498
    },
    {
        "content": "<p>the lean core distribution basically only contains the compiler and facilities needed to write the compiler</p>",
        "id": 362652876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604556
    },
    {
        "content": "<p>Ah, I see. I'm just working through Theorem Proving, so I'm not in a project, I'm just using the vscode extension on a standalone file.</p>",
        "id": 362652999,
        "sender_full_name": "James Sully",
        "timestamp": 1685604599
    },
    {
        "content": "<p>You will hit on limitations of that mode pretty quickly</p>",
        "id": 362653195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604639
    },
    {
        "content": "<p>not being able to import anything being the main one</p>",
        "id": 362653247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604654
    },
    {
        "content": "<p>You can start a lake project depending on mathlib using <code>lake new myproj math</code>, you will want to do that to play with more advanced library stuff</p>",
        "id": 362653457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604719
    },
    {
        "content": "<p>makes sense.<br>\nI'm also not seeing <code>Nat.noConfusion</code> when I search the docs?<br>\n<a href=\"https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=Nat.noConfusion\">https://leanprover-community.github.io/mathlib4_docs/search.html?sitesearch=https%3A%2F%2Fleanprover-community.github.io%2Fmathlib4_docs&amp;q=Nat.noConfusion</a></p>",
        "id": 362653567,
        "sender_full_name": "James Sully",
        "timestamp": 1685604742
    },
    {
        "content": "<p>It's an automatically generated definition created for every inductive type</p>",
        "id": 362653634,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604766
    },
    {
        "content": "<p>recommended reading: <a href=\"https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/\">https://xenaproject.wordpress.com/2018/03/24/no-confusion-over-no_confusion/</a></p>",
        "id": 362653721,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604798
    },
    {
        "content": "<p>you can use <code>#print Nat.noConfusion</code> and <code>#print Nat.noConfusionType</code> to see the definitions</p>",
        "id": 362653799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685604830
    },
    {
        "content": "<p>Ok, cheers! Doing a quick search, it looks like it comes up in chapter 8 of Theorem Proving as well</p>",
        "id": 362653978,
        "sender_full_name": "James Sully",
        "timestamp": 1685604878
    },
    {
        "content": "<p>Here's another alternative:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h1eq2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h1eq2</span>\n</code></pre></div>\n<p><code>cases</code> on an equality means it tries to unify the LHS and RHS since <code>rfl</code> is the only constructor, and <code>cases</code> knows how to peel off constructors and that different constructors can't be equal, so it sees <code>1 = 2</code>, turns it into <code>0 = 1</code>, and then knows <code>0</code> can't equal <code>Nat.succ</code> so recognizes the contradiction.</p>",
        "id": 362659011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685606071
    },
    {
        "content": "<p><code>match</code>/<code>nomatch</code> can do the same kinds of calculations</p>",
        "id": 362660103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685606319
    },
    {
        "content": "<p>A term proof is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">h1eq2</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">Nat.zero_ne_one</span> <span class=\"o\">(</span><span class=\"n\">Nat.succ_inj'.mp</span> <span class=\"n\">h1eq2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>though these are probably proved using <code>match</code> or <code>Nat.noConfusion</code></p>",
        "id": 362660290,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1685606363
    },
    {
        "content": "<p>It is worth noting that the actual proof that simp comes up with is actually a bit closer to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.ne_of_beq_eq_false</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>taking advantage of the fact that natural number equality has a primitive implementation in the kernel. This is especially important if the proof is not about <code>1 ≠ 2</code> but rather <code>1000000000 ≠ 2000000000</code>, because the methods involving <code>noConfusion</code> involve peeling one constructor off at a time, which would mean a billion steps to prove this</p>",
        "id": 362661022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685606503
    },
    {
        "content": "<p>It's all very well explaining these cute hacky methods/tricks but <code>by norm_num</code> is really the correct answer because this is the technique which generalises. <code>norm_num</code> is the tactic which proves equalities and inequalities between numerals.</p>",
        "id": 362663817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685607067
    },
    {
        "content": "<p>how do I look at the term proof a tactic produces?</p>",
        "id": 362665573,
        "sender_full_name": "James Sully",
        "timestamp": 1685607453
    },
    {
        "content": "<p><code>#print mytheorem</code></p>",
        "id": 362665770,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685607496
    },
    {
        "content": "<p>ah, of course lol</p>",
        "id": 362666070,
        "sender_full_name": "James Sully",
        "timestamp": 1685607570
    },
    {
        "content": "<p>You don't want to look at the term proof that <code>norm_num</code> produces though :-)</p>",
        "id": 362666302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685607612
    },
    {
        "content": "<p>you know, saying that is just going to make people want to look at it</p>",
        "id": 362666665,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685607713
    },
    {
        "content": "<p>I'm staying away from std for the duration of this book. The book hasn't told me to use it and I assume there are pedagogical reasons not to yet</p>",
        "id": 362666790,
        "sender_full_name": "James Sully",
        "timestamp": 1685607739
    },
    {
        "content": "<p>or mathlib rather</p>",
        "id": 362666928,
        "sender_full_name": "James Sully",
        "timestamp": 1685607770
    },
    {
        "content": "<p>Now I've found that James is a \"let me look at the proof term\" kind of person (ie not a mathematician) I wish I'd not opened my mouth :-)</p>",
        "id": 362666952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685607776
    },
    {
        "content": "<p>hahaha</p>",
        "id": 362667067,
        "sender_full_name": "James Sully",
        "timestamp": 1685607811
    },
    {
        "content": "<p>my cover's blown</p>",
        "id": 362667139,
        "sender_full_name": "James Sully",
        "timestamp": 1685607833
    },
    {
        "content": "<p>Re pedagogical reasons -- it depends what you're trying to teach. \"Mathematics in Lean\" uses mathlib from page 1</p>",
        "id": 362667226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685607844
    },
    {
        "content": "<p>I actually started on Functional Programming in lean and then switched halfway through out of curiosity</p>",
        "id": 362667370,
        "sender_full_name": "James Sully",
        "timestamp": 1685607880
    },
    {
        "content": "<p>I teach maths undergraduates lean from scratch using mathlib, but I don't teach them anything about term mode at all, or proof terms etc</p>",
        "id": 362667426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685607898
    },
    {
        "content": "<p>It all depends on the level of abstraction you're interested in</p>",
        "id": 362667503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685607918
    },
    {
        "content": "<p>lol, I tried it and got:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">show_term</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n<span class=\"c1\">-- Try this: of_eq_true (eq_true_of_decide (Eq.refl true))</span>\n</code></pre></div>",
        "id": 362667566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685607932
    },
    {
        "content": "<p>yeah, I'm more interested in the FP side and potentially bringing insights back with me to other languages</p>",
        "id": 362667583,
        "sender_full_name": "James Sully",
        "timestamp": 1685607936
    },
    {
        "content": "<p>which is not a norm_num proof at all</p>",
        "id": 362667618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685607944
    },
    {
        "content": "<p>using <code>norm_num1</code> produces the expected horror:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">show_term</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num1</span>\n<span class=\"c1\">-- Try this: of_eq_true</span>\n<span class=\"c1\">--   (eq_true</span>\n<span class=\"c1\">--     (Mathlib.Meta.NormNum.isNat_eq_false (Mathlib.Meta.NormNum.isNat_ofNat ℕ (Eq.refl 1))</span>\n<span class=\"c1\">--       (Mathlib.Meta.NormNum.isNat_ofNat ℕ (Eq.refl 2)) (Eq.refl false)))</span>\n</code></pre></div>",
        "id": 362667871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685608002
    },
    {
        "content": "<p>(which BTW is just an obfuscated version of the same proof)</p>",
        "id": 362667959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685608022
    },
    {
        "content": "<p>James can take that insight back with them to other languages</p>",
        "id": 362668019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1685608031
    }
]