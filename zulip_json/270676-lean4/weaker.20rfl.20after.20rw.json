[
    {
        "content": "<p>In Lean 3, the <code>rw</code> closed the goal. In Lean 4 it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">→</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- ⊢ Function.comp f g' x = f (g' x)</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I'm interested in understanding why this happens because it just came up in the mathlib port and I suspect we'll be seeing it again. Is there some rule of thumb here about the change?</p>",
        "id": 323579994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674679027
    },
    {
        "content": "<p>Is this a change related to rfl or Function.comp? I feel like I've hit issues with comp before</p>",
        "id": 323582169,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1674679829
    },
    {
        "content": "<p>Oh I don't know! In mathlib3 <code>rw</code> tries a \"weak <code>rfl</code>\", not daring to unfold too much, because we don't want a performance hit when it fails.</p>",
        "id": 323582474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674679946
    }
]