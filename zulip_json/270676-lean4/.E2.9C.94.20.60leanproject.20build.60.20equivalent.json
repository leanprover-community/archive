[
    {
        "content": "<p>In Lean 3, I could run <code>leanproject build</code> to make sure there was no error in the <code>src</code> directory. In Lean 4, we no longer put everything into the <code>src</code> directory afaik. What is the Lean 4 command that will similarly check every <code>.lean</code> file in my project?</p>",
        "id": 329448152,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677077676
    },
    {
        "content": "<p>It would probably be <code>lake build</code>, but it won't check every file in your project if you don't include them in your <code>lakefile</code> or as a dependency of something in it.</p>",
        "id": 329448759,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1677077817
    },
    {
        "content": "<p>I would think it's good practice anyway to have some <code>ProjectName.lean</code> file that includes your individual files and if you have that one in your lakefile it should check everything from there</p>",
        "id": 329449102,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1677077903
    },
    {
        "content": "<p>If you're using Lake, the <code>build</code> command is more flexible (but also more complex...). You can have, for example, different libs in the same Lake package. So <code>lake build</code> needs an argument to tell the target, unless a <code>@[default_target]</code> is set.</p>\n<p>In <code>mathlib4</code>, this is done with a <code>Mathlib.lean</code> file that imports everything. But it needs to be maintained</p>",
        "id": 329449216,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677077929
    },
    {
        "content": "<p>Yes, I'm using Lake, but I will happily use something else and dumber (less flexible).</p>",
        "id": 329449956,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677078098
    },
    {
        "content": "<p>In our <code>YatimaStdLib.lean</code> package, we have a <a href=\"https://github.com/yatima-inc/YatimaStdLib.lean/blob/main/lakefile.lean#L53-L55\">Lake script</a> that does it for us. Calling <code>lake run import_all</code> (over)writes the <code>YatimaStdLib.lean</code> file with all the imports. Then <code>lake build</code> will target it</p>",
        "id": 329449971,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677078103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329449956\">said</a>:</p>\n<blockquote>\n<p>Yes, I'm using Lake, but I will happily use something else and dumber (less flexible).</p>\n</blockquote>\n<p>There isn't anything less flexible... <code>lake build</code> requires a specific build target now</p>",
        "id": 329450393,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677078196
    },
    {
        "content": "<p>Is there any easy workaround in shell? Something like <code>lake build *.lean</code> but that will work?</p>",
        "id": 329450948,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677078328
    },
    {
        "content": "<p>You can use something like <code>globs := #[.submodules `src]</code> to include all files in <code>src/</code> in a <code>lean_lib</code> in your lakefile</p>",
        "id": 329451916,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677078536
    },
    {
        "content": "<p>Can I do it for the root directory instead?</p>",
        "id": 329452451,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677078649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329451916\">said</a>:</p>\n<blockquote>\n<p>You can use something like <code>globs := #[.submodules `src]</code> to include all files in <code>src/</code> in a <code>lean_lib</code> in your lakefile</p>\n</blockquote>\n<p>Oh that's good to know. It searches recursively into directories, right?</p>",
        "id": 329453119,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677078782
    },
    {
        "content": "<p>I think so</p>",
        "id": 329454438,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677079058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329452451\">said</a>:</p>\n<blockquote>\n<p>Can I do it for the root directory instead?</p>\n</blockquote>\n<p>Untested, but <code>.submodules .anonymous</code> might work</p>",
        "id": 329454494,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677079072
    },
    {
        "content": "<p>Interesting. Is there a reason why we doing the exhaustive listing of imports in <code>mathlib4</code> instead of this simpler solution?</p>",
        "id": 329456004,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677079382
    },
    {
        "content": "<p>Unclear, I think? <a href=\"#narrow/stream/287929-mathlib4/topic/generating.20Mathlib.2Elean/near/264350855\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/generating.20Mathlib.2Elean/near/264350855</a></p>",
        "id": 329458008,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677079827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329454494\">said</a>:</p>\n<blockquote>\n<p>Untested, but <code>.submodules .anonymous</code> might work</p>\n</blockquote>\n<p>Does it require having a <code>MyProject.lean</code> file if <code>MyProject</code> is the name of my project?</p>",
        "id": 329459009,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677080067
    },
    {
        "content": "<p>It should only require a <code>lean_lib</code> with the <code>globs</code> attribute set as Sebastian mentioned</p>",
        "id": 329459309,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677080137
    },
    {
        "content": "<p>A <code>lean_lib</code> is something you can define using the DSL that <code>lakefile.lean</code> accepts</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MyProject</span> <span class=\"n\">where</span>\n  <span class=\"n\">globs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"bp\">.</span><span class=\"n\">submodules</span> <span class=\"bp\">.</span><span class=\"n\">anonymous</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Then try <code>lake build</code>. Disclaimer: <strong>untested</strong></p>",
        "id": 329459925,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677080275
    },
    {
        "content": "<p>If it gets angry when trying to build <code>lakefile.lean</code>, then you'll need to put your actual lib files in a dedicated folder. This is the standard structure of Lake projects anyways</p>",
        "id": 329460525,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677080404
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span> <span class=\"bp\">.\\.\\.\\\\</span><span class=\"n\">git.lean</span>\n</code></pre></div>",
        "id": 329460669,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677080437
    },
    {
        "content": "<p>Idk what that is</p>",
        "id": 329461174,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677080544
    },
    {
        "content": "<p>I should try it in a directory that has <code>.lean</code> files only. I gotta go now; I will test it later.</p>",
        "id": 329462598,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677080913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329451916\">said</a>:</p>\n<blockquote>\n<p>You can use something like <code>globs := #[.submodules `src]</code> to include all files in <code>src/</code> in a <code>lean_lib</code> in your lakefile</p>\n</blockquote>\n<p>It works! Thanks a lot!<br>\n<a href=\"https://github.com/madvorak/lean-mam/blob/main/lakefile.lean\">https://github.com/madvorak/lean-mam/blob/main/lakefile.lean</a><br>\nIn case you see something redundant in my <code>lakefile</code> please let me know!</p>",
        "id": 329679273,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677148050
    },
    {
        "content": "<p>What is the equivalent of <code>leanproject clean</code> in Lean 4 please?</p>",
        "id": 329679609,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677148140
    },
    {
        "content": "<p><code>lake clean</code> should do the trick :D</p>",
        "id": 329680857,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1677148409
    },
    {
        "content": "<p>Oh. I accidentally kept the placeholder <code>MyProject</code> on the <code>globs</code> line. Lake doesn't seem to mind. What is the role of this identifier?</p>",
        "id": 329680873,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677148413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329680857\">said</a>:</p>\n<blockquote>\n<p><code>lake clean</code> should do the trick :D</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover/lake/pull/156\">https://github.com/leanprover/lake/pull/156</a></p>",
        "id": 329682419,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677148829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329451916\">said</a>:</p>\n<blockquote>\n<p>You can use something like <code>globs := #[.submodules `src]</code> to include all files in <code>src/</code> in a <code>lean_lib</code> in your lakefile</p>\n</blockquote>\n<p>I think this is worth adding to the README as well. I cannot be the only one who asks about making <code>lake</code> do the thing that <code>leanproject</code> did.</p>",
        "id": 329682858,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677148953
    },
    {
        "content": "<p>Note that you probably shouldn't use <code>src</code> if you're writing a library others are supposed to use since their imports would then start with <code>src.</code></p>",
        "id": 329683989,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677149237
    },
    {
        "content": "<p>or maybe... <code>src/Foo.lean</code> should be interpreted as <code>import MyProj.Foo</code></p>",
        "id": 329685269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677149602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329685269\">said</a>:</p>\n<blockquote>\n<p>or maybe... <code>src/Foo.lean</code> should be interpreted as <code>import MyProj.Foo</code></p>\n</blockquote>\n<p>Are you suggesting it as a possible change in Lake?</p>",
        "id": 329685419,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677149651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329683989\">said</a>:</p>\n<blockquote>\n<p>Note that you probably shouldn't use <code>src</code> if you're writing a library others are supposed to use since their imports would then start with <code>src.</code></p>\n</blockquote>\n<p>Is it better to create a directory that repeats the name of my project? Or something similar?</p>",
        "id": 329685524,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677149692
    },
    {
        "content": "<p>honestly I don't know whether it's already covered by the <code>globs</code> functionality, so I don't know whether it is a feature request or a suggestion to use the existing functionality</p>",
        "id": 329685536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677149696
    },
    {
        "content": "<p>it is what I would consider an obvious folder hierarchy, so lake should ideally be able to support it</p>",
        "id": 329685662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1677149737
    },
    {
        "content": "<p>This would require a change in Lean. Basing import translation on the file system structure alone was a deliberate change, so please just follow the structure described at <a href=\"https://leanprover.github.io/lean4/doc/setup.html#lake\">https://leanprover.github.io/lean4/doc/setup.html#lake</a></p>",
        "id": 329686772,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1677150059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.60leanproject.20build.60.20equivalent/near/329680873\">said</a>:</p>\n<blockquote>\n<p>Oh. I accidentally kept the placeholder <code>MyProject</code> on the <code>globs</code> line. Lake doesn't seem to mind. What is the role of this identifier?</p>\n</blockquote>\n<p>What role does <code>MyProject</code> in the line <code>lean_lib MyProject where</code> play?</p>",
        "id": 329691614,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1677151483
    },
    {
        "content": "<p>It allows you to say <code>lake build MyProject</code>. Again, you can have multiple libs in a lake package. <code>lake build</code> targets the default one</p>",
        "id": 329694948,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1677152358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> has marked this topic as resolved.</p>",
        "id": 338666932,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677610574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20.60leanproject.20build.60.20equivalent/near/329683989\">said</a>:</p>\n<blockquote>\n<p>Note that you probably shouldn't use <code>src</code> if you're writing a library others are supposed to use since their imports would then start with <code>src.</code></p>\n</blockquote>\n<p>Note that one can use <code>srcDir := \"src\"</code> as a <code>package</code> configuration option to use such a directory without it interfering with module names.</p>",
        "id": 350340933,
        "sender_full_name": "Mac Malone",
        "timestamp": 1681663593
    }
]