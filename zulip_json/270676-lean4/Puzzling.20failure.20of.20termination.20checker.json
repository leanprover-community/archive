[
    {
        "content": "<p>Minor puzzle: the following MWE doesn't pass the termination checker</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Form</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n  <span class=\"bp\">|</span> <span class=\"n\">impl</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"n\">Form</span>\n\n<span class=\"kd\">infix</span><span class=\"o\">:</span><span class=\"mi\">256</span> <span class=\"s2\">\"⊃\"</span>  <span class=\"bp\">=&gt;</span> <span class=\"n\">Form.impl</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BTheorem</span> <span class=\"o\">:</span> <span class=\"n\">Form</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span>\n  <span class=\"bp\">|</span> <span class=\"n\">taut</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mp</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">⊃</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">proofDepth</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">prf</span>\n  <span class=\"n\">case</span> <span class=\"n\">taut</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span>\n  <span class=\"n\">case</span> <span class=\"n\">mp</span> <span class=\"n\">thm₁</span> <span class=\"n\">thm₂</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₁</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm₁</span>\n    <span class=\"k\">have</span> <span class=\"n\">l₂</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm₂</span>\n    <span class=\"n\">exact</span> <span class=\"n\">l₁</span> <span class=\"bp\">+</span> <span class=\"n\">l₂</span>\n</code></pre></div>\n<p>A workaround is to use <code>induction</code> rather than <code>cases</code>(thanks <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> ), which has now solved the original more complicated problem. But at least in the context of the MWE, that gives <code>code generator does not support BTheorem.rec yet</code>.</p>\n<p>There are other (more natural) ways of defining the <code>proofDepth</code> function that don't cause problems, but is there an easy way to see why this MWE doesn't work?</p>",
        "id": 338411277,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677520793
    },
    {
        "content": "<p>This works...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proofDepth</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BTheorem.taut</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">BTheorem.mp</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">proofDepth</span> <span class=\"n\">t1</span> <span class=\"bp\">+</span> <span class=\"n\">proofDepth</span> <span class=\"n\">t2</span>\n</code></pre></div>",
        "id": 338413621,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677521324
    },
    {
        "content": "<p>Just a guess, but the issue might be that you're trying to use tactics to make this definition.</p>",
        "id": 338414155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1677521464
    },
    {
        "content": "<p>So first things first as a general rule of thumb in 99.9% of cases you do never want to use tactics to generate running code, this is the case here as well. If you just write your code the proper way this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">proofDepth</span> <span class=\"o\">(</span><span class=\"n\">prf</span> <span class=\"o\">:</span> <span class=\"n\">BTheorem</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">prf</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">taut</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">thm1</span> <span class=\"n\">thm2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm1</span> <span class=\"bp\">+</span> <span class=\"n\">proofDepth</span> <span class=\"n\">thm2</span>\n</code></pre></div>\n<p>The reason you do not want to use tactics is that they are not mean to generate a certain term of some type but just <em>any</em> term of some type and you can kinda guide them in doing so but as you can see from your error this will not work out. (Also the reason you do not just want <em>any</em> term is that if you have running code you usually care about what it does and not just that it inhabits some type)</p>\n<p>Tangent: The reason the induction variant does not end up working out is that executable code uses another primitive to perform recursion (namely <code>brecOn</code> and <code>casesOn</code>) while proofs via induction use the recursor (<code>.rec</code>) directly and generating code for recursors in a strict programming language is a little annoying so we don't do that and that is the reason it complains if you start doing it this way.</p>\n<p>Now why this doesn't pass the termination checker if you use the <code>cases</code> variant is a question I don't know the answer to because I don't actually know what the structural recursion heuristic is doing under the hood</p>",
        "id": 338414578,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677521590
    },
    {
        "content": "<p>OK, got it. Yeah, defining this particular function is not the problem (it's trivial to do so) - this is a reduced version of a more complicated proof where tactics made sense.</p>",
        "id": 338415099,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677521733
    },
    {
        "content": "<blockquote>\n<p>Now why this doesn't pass the termination checker if you use the cases variant is a question I don't know the answer to because I don't actually know what the structural recursion heuristic is doing under the hood</p>\n</blockquote>\n<p>OK, that's good to know. I'm glad it's not obvious, at least.</p>",
        "id": 338415265,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677521780
    },
    {
        "content": "<p>In principle the termination checker can cooperate with manual recursion + <code>cases</code> and I have done that myself in the past.</p>",
        "id": 338415597,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677521877
    },
    {
        "content": "<p>Yes,  all other cases in the larger argument were fine. There's something about the return type of <code>mp</code> that causes trouble.  Within the <code>mp</code> case, lean infers that <code>thm₂ : BTheorem (p✝⊃f)</code>, where <code>f</code> is from the declaration <code>proofDepth (prf : BTheorem f) : Nat</code>. Either avoiding recursion on <code>thm₂</code>, or redefining mp so that the return type isn't exactly <code>q</code> seems to allow the termination checker figure out how to proceed.</p>",
        "id": 338420108,
        "sender_full_name": "Graham Leach-Krouse",
        "timestamp": 1677522980
    }
]