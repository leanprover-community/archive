[
    {
        "content": "<p>Could someone who uses Windows open up VS Code, create a new Lean file, and check the following?</p>\n<p>First:<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/RFC.3A.20.22String.20gaps.22.20for.20multiline.20string.20literals/near/400445262\">said</a>:</p>\n<blockquote>\n<p>Quick question for any windows users: are .lean files using CRLF or LF most of the time? (It says one of the two in the bottom right when the lean file is open.)</p>\n</blockquote>\n<p>Second, if it's CRLF, does this print <code>1</code> or <code>2</code> for you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"s2\">\"</span>\n<span class=\"s2\">\"</span><span class=\"bp\">.</span><span class=\"n\">length</span>\n</code></pre></div>",
        "id": 400792399,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699380551
    },
    {
        "content": "<p>It was LF by default for me (and the answer to your code block was 1). I switched by hand to CRLF, and now the answer is 2.</p>",
        "id": 400793046,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1699380813
    },
    {
        "content": "<p>Thanks -- that's good to have confirmation that CRLF mode does make a length-2 string.</p>\n<p>I'm only curious now if there are any Windows users out there that work with Lean in CRLF mode.</p>",
        "id": 400793743,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699381108
    },
    {
        "content": "<p>I wonder if we should follow Rust's lead here (<a href=\"https://github.com/rust-lang/rust/issues/62865\">issue</a> and <a href=\"https://github.com/rust-lang/rust/pull/62948\">PR</a>) and normalize CRLF -&gt; LF when reading Lean files?</p>\n<p>I see Lake already has such a normalization function (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lake.crlf2lf#doc\">docs#Lake.crlf2lf</a>) that's used when computing file hashes. Maybe there could be an alternative to <code>IO.FS.readFile</code> that does CRLF -&gt; LF normalization that the Lean frontend uses.</p>\n<p>In addition to making the <code>#eval</code> example above always output <code>1</code>, this would help in, for example, <code>#guard_msgs</code> in std, where docstrings are compared to generated output. It turns out it doesn't handle files in CRLF mode, but if the docstring were pre-translated to normalize to LF's (along with the rest of the file) then it would just work.</p>",
        "id": 400797364,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699382761
    },
    {
        "content": "<p><code>FileMap.ofString</code> would probably be a good point in the pipeline to do this transformation</p>",
        "id": 400797736,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1699382915
    }
]