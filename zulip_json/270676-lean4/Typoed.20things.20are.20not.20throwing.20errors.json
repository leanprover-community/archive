[
    {
        "content": "<p>I have the following MWnotE</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Field.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.MvPolynomial.CommRing</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">StraightforwardAGMProofSystem</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n_stmt</span> <span class=\"n\">n_wit</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">relation</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n_stmt</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n_wit</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n  <span class=\"n\">nSample</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">nCrs</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n  <span class=\"n\">crs_elems</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n_crs</span> <span class=\"bp\">→</span> <span class=\"n\">MvPolynomial</span> <span class=\"o\">(</span><span class=\"n\">Fin</span> <span class=\"n\">n_sample</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n</code></pre></div>\n<p>How do I make this throw an error?</p>",
        "id": 390102816,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694323803
    },
    {
        "content": "<p>I thought all I had to do was put</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span>\n  <span class=\"s2\">\"-Dpp.unicode.fun=true\"</span><span class=\"o\">,</span> <span class=\"c1\">-- pretty-prints `fun a ↦ b`</span>\n  <span class=\"s2\">\"-DAutoImplicit=false\"</span>\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>In my lakefile, but that's already there</p>",
        "id": 390102916,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694323842
    },
    {
        "content": "<p>To make it clear, I would like this to throw an error because the <code>n_crs</code> is supposed to be the same as <code>nCrs</code>.</p>",
        "id": 390103700,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694324350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span> , you were the person who gave me <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/369781944\">that settings snippet</a>, is this the same issue?</p>",
        "id": 390103876,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1694324463
    },
    {
        "content": "<p>If I was, I probably just copied it from mathlib - you could look there</p>",
        "id": 390107544,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1694327095
    },
    {
        "content": "<p>i don't think it will, but does <code>lake build</code> report it as an error?</p>",
        "id": 390108045,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694327474
    },
    {
        "content": "<p>You need to pass <code>moreServerArgs</code> into various places in your lakefile too</p>",
        "id": 390118703,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694334975
    },
    {
        "content": "<p>By itself, that code snippet does nothing</p>",
        "id": 390118722,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694334985
    }
]