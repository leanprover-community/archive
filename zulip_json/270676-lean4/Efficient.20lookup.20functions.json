[
    {
        "content": "<p>Is the following going to be compiled efficiently (i.e., better than linear in <code>N</code>)? If not, how to compile it efficiently? What if I have the same construct but using <code>match ... with ...</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span>  <span class=\"bp\">...</span>\n  <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">N</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"c1\">-- fallback case</span>\n</code></pre></div>\n<p>For instance, would it be faster to use red-black trees (or some other kind of search trees) and lookup up values in the trees?</p>",
        "id": 355816215,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683214931
    },
    {
        "content": "<p>I would guess that <code>match</code> is identical to a direct pattern match</p>",
        "id": 355816670,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683215034
    },
    {
        "content": "<p>I did a little test to see what kind of C code it produces, since last I checked it was a linear search but I wanted to be sure.</p>\n<p>Here's my <code>foo2.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">cow</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">100</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">111</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">102</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">114</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">5</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">106</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">6</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">117</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">7</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">108</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">37</span>\n</code></pre></div>\n<p>then in the <code>Scratch</code> project I did <code>lake build Scratch.foo2:c</code>. Then <code>build/ir/Scratch/foo2.c</code> shows that it's a linear search:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">LEAN_EXPORT</span><span class=\"w\"> </span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">l_cow</span><span class=\"p\">(</span><span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"nl\">_start</span><span class=\"p\">:</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_3</span><span class=\"p\">;</span>\n<span class=\"n\">x_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">0u</span><span class=\"p\">);</span>\n<span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_2</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_3</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_5</span><span class=\"p\">;</span>\n<span class=\"n\">x_4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">1u</span><span class=\"p\">);</span>\n<span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_4</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_5</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_7</span><span class=\"p\">;</span>\n<span class=\"n\">x_6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">2u</span><span class=\"p\">);</span>\n<span class=\"n\">x_7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_6</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_7</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_9</span><span class=\"p\">;</span>\n<span class=\"n\">x_8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">3u</span><span class=\"p\">);</span>\n<span class=\"n\">x_9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_8</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_9</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_11</span><span class=\"p\">;</span>\n<span class=\"n\">x_10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">5u</span><span class=\"p\">);</span>\n<span class=\"n\">x_11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_10</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_11</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_12</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_13</span><span class=\"p\">;</span>\n<span class=\"n\">x_12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">6u</span><span class=\"p\">);</span>\n<span class=\"n\">x_13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_12</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_13</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_14</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">x_15</span><span class=\"p\">;</span>\n<span class=\"n\">x_14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">7u</span><span class=\"p\">);</span>\n<span class=\"n\">x_15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_nat_dec_eq</span><span class=\"p\">(</span><span class=\"n\">x_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x_14</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x_15</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_16</span><span class=\"p\">;</span>\n<span class=\"n\">x_16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">37u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_16</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_17</span><span class=\"p\">;</span>\n<span class=\"n\">x_17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">108u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_17</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_18</span><span class=\"p\">;</span>\n<span class=\"n\">x_18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">117u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_18</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_19</span><span class=\"p\">;</span>\n<span class=\"n\">x_19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">106u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_19</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_20</span><span class=\"p\">;</span>\n<span class=\"n\">x_20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">114u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_20</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_21</span><span class=\"p\">;</span>\n<span class=\"n\">x_21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">102u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_21</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_22</span><span class=\"p\">;</span>\n<span class=\"n\">x_22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">111u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_22</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">else</span>\n<span class=\"p\">{</span>\n<span class=\"n\">lean_object</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x_23</span><span class=\"p\">;</span>\n<span class=\"n\">x_23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">lean_unsigned_to_nat</span><span class=\"p\">(</span><span class=\"mi\">100u</span><span class=\"p\">);</span>\n<span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x_23</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 355818278,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683215442
    },
    {
        "content": "<p>Maybe it's helpful to see <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Deriving/DecEq.lean#L110\"><code>mkEnumOfNat</code></a>, which is used for <code>deriving DecidableEq</code> when you have an inductive type with only 0-ary constructors. It creates a definition that gives a constructor for a given index that runs in log time. Example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Animals</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cow</span> <span class=\"bp\">|</span> <span class=\"n\">horse</span> <span class=\"bp\">|</span> <span class=\"n\">cat</span> <span class=\"bp\">|</span> <span class=\"n\">dog</span> <span class=\"bp\">|</span> <span class=\"n\">moose</span> <span class=\"bp\">|</span> <span class=\"n\">shoop</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">Animals.ofNat</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">def Animals.ofNat : Nat → Animals :=</span>\n<span class=\"cm\">fun n =&gt;</span>\n<span class=\"cm\">  bif Nat.ble 3 n then bif Nat.ble 4 n then bif Nat.beq n 4 then Animals.moose else Animals.shoop else Animals.dog</span>\n<span class=\"cm\">  else bif Nat.ble 1 n then bif Nat.beq n 1 then Animals.horse else Animals.cat else Animals.cow</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 355819580,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683215770
    },
    {
        "content": "<p>Thanks. I think we'll stick to search trees for now, those ought to work efficiently.</p>",
        "id": 355822364,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683216337
    },
    {
        "content": "<p>Note that, even if we generate C code in this way the c compiler might still optimize it into the log variant so I would say the best way might be to benchmark?</p>",
        "id": 355822384,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683216342
    },
    {
        "content": "<p>In this case it's not so bad to  look at the generated assembly code. GCC compiles this into the following algorithm:</p>\n<ol>\n<li>check if it's not a scalar (i.e., if it's not an integer embedded in a pointer; Lean uses an encoding where pointers with a 1 in the least-significant bit is an integer), and in this case fall back on doing a linear search.</li>\n<li>otherwise, compute a value from the scalar, use it to index into a table of pointers, then jump to a piece of code that returns the correct value.</li>\n</ol>\n<p>The jump table is somewhat wonky, and for some reason one of the cases is used both in the fallback and for one of the scalar values, so it has an extra <code>test</code> and a <code>cmov</code> in there.</p>\n<p>Assuming all small integers are encoded as scalars (they should be), then the algorithm is O(1), assuming GCC is able to do this jump table transformation even if there are many more cases.</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">l_cow:</span>\n<span class=\"w\">    </span><span class=\"nf\">pushq</span><span class=\"w\">   </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"no\">$1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%bl</span>\n<span class=\"w\">    </span><span class=\"nf\">je</span><span class=\"w\">  </span><span class=\"no\">.LBB0_1</span>\n<span class=\"w\">    </span><span class=\"nf\">leaq</span><span class=\"w\">    </span><span class=\"mi\">-1</span><span class=\"p\">(</span><span class=\"nv\">%rbx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">%rcx</span>\n<span class=\"w\">    </span><span class=\"nf\">cmpq</span><span class=\"w\">    </span><span class=\"no\">$12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rcx</span>\n<span class=\"w\">    </span><span class=\"nf\">ja</span><span class=\"w\">  </span><span class=\"no\">.LBB0_10</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$201</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">leaq</span><span class=\"w\">    </span><span class=\"no\">.LJTI0_0</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">%rdx</span>\n<span class=\"w\">    </span><span class=\"nf\">movslq</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"nv\">%rdx</span><span class=\"p\">,</span><span class=\"nv\">%rcx</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">%rcx</span>\n<span class=\"w\">    </span><span class=\"nf\">addq</span><span class=\"w\">    </span><span class=\"nv\">%rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rcx</span>\n<span class=\"w\">    </span><span class=\"nf\">jmpq</span><span class=\"w\">    </span><span class=\"p\">*</span><span class=\"nv\">%rcx</span>\n<span class=\"nl\">.LBB0_12:</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$223</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB0_10:</span>\n<span class=\"w\">    </span><span class=\"nf\">cmpq</span><span class=\"w\">    </span><span class=\"no\">$15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">sete</span><span class=\"w\">    </span><span class=\"nv\">%al</span>\n<span class=\"nl\">.LBB0_11:</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%al</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%al</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$217</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$75</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">cmovneq</span><span class=\"w\"> </span><span class=\"nv\">%rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rax</span>\n<span class=\"w\">    </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB0_13:</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$205</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB0_14:</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$229</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB0_15:</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$213</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB0_16:</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$235</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"nl\">.LBB0_17:</span>\n<span class=\"w\">    </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span>\n<span class=\"w\">    </span><span class=\"nf\">retq</span>\n<span class=\"nl\">.LBB0_1:</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$201</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%cl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%cl</span>\n<span class=\"w\">    </span><span class=\"nf\">jne</span><span class=\"w\"> </span><span class=\"no\">.LBB0_17</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$223</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%cl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%cl</span>\n<span class=\"w\">    </span><span class=\"nf\">jne</span><span class=\"w\"> </span><span class=\"no\">.LBB0_17</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$205</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%cl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%cl</span>\n<span class=\"w\">    </span><span class=\"nf\">jne</span><span class=\"w\"> </span><span class=\"no\">.LBB0_17</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$229</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%cl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%cl</span>\n<span class=\"w\">    </span><span class=\"nf\">jne</span><span class=\"w\"> </span><span class=\"no\">.LBB0_17</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$213</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%cl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%cl</span>\n<span class=\"w\">    </span><span class=\"nf\">jne</span><span class=\"w\"> </span><span class=\"no\">.LBB0_17</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%ecx</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$235</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%eax</span>\n<span class=\"w\">    </span><span class=\"nf\">testb</span><span class=\"w\">   </span><span class=\"nv\">%cl</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%cl</span>\n<span class=\"w\">    </span><span class=\"nf\">jne</span><span class=\"w\"> </span><span class=\"no\">.LBB0_17</span>\n<span class=\"w\">    </span><span class=\"nf\">movl</span><span class=\"w\">    </span><span class=\"no\">$15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%esi</span>\n<span class=\"w\">    </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">    </span><span class=\"nf\">callq</span><span class=\"w\">   </span><span class=\"no\">lean_nat_big_eq@PLT</span>\n<span class=\"w\">    </span><span class=\"nf\">jmp</span><span class=\"w\"> </span><span class=\"no\">.LBB0_11</span>\n<span class=\"nl\">.LJTI0_0:</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_17-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_12-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_13-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_14-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_15-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_10-.LJTI0_0</span>\n<span class=\"w\">    </span><span class=\"na\">.long</span><span class=\"w\">   </span><span class=\"no\">.LBB0_16-.LJTI0_0</span>\n</code></pre></div>",
        "id": 355832820,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683218772
    },
    {
        "content": "<blockquote>\n<p>Assuming all small integers are encoded as scalars (they should be),</p>\n</blockquote>\n<p>This is a requirement of the encoding. \"small big integers\" will cause arithmetic operations to produce incorrect results.</p>",
        "id": 355838646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683220306
    }
]