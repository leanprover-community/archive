[
    {
        "content": "<p>if I have <code>list : List Int</code>, and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">list</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">List.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>What's the syntax for obtaining a proof of <code>list ≠ []</code> in the second branch?</p>",
        "id": 405588161,
        "sender_full_name": "James Sully",
        "timestamp": 1701567595
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">List.cons</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 405589651,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701568620
    },
    {
        "content": "<p>You should have the hypothesis <code>h : list = List.cons ....</code>.  inside the cons arm. Then you can introduce a local <code>have</code> declaration in the cons arm. With a little bit of <code>simp</code> on h, you should be able to get the proof of <code>list ≠ []</code></p>",
        "id": 405590113,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701568889
    },
    {
        "content": "<p>neat it works, thank you! I'm trying to understand what this means... <code>h</code> is given the type of the value of the list?? Where can I read about what's going on here?</p>",
        "id": 405590455,
        "sender_full_name": "James Sully",
        "timestamp": 1701569051
    },
    {
        "content": "<p>I am not sure there is a deeper explanation. Every inductive type comes with a <code>casesOn</code> recursor. This is produced by lean along with <code>rec</code>.</p>",
        "id": 405590630,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701569182
    },
    {
        "content": "<p>If I remember this correctly, match uses the cases recursor.</p>",
        "id": 405590660,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701569214
    },
    {
        "content": "<p>I will read through this chapter: <a href=\"https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html\">https://lean-lang.org/theorem_proving_in_lean4/induction_and_recursion.html</a></p>",
        "id": 405590738,
        "sender_full_name": "James Sully",
        "timestamp": 1701569253
    },
    {
        "content": "<p>If you are referring to the name <code>h</code>,  its type is a value of <code>Prop</code>. It is an equality.</p>",
        "id": 405590841,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701569329
    },
    {
        "content": "<p>h for hypothesis?</p>",
        "id": 405590868,
        "sender_full_name": "James Sully",
        "timestamp": 1701569360
    },
    {
        "content": "<p><code>h</code> is a name I picked. You can give it whatever name you like</p>",
        "id": 405590892,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701569383
    },
    {
        "content": "<p>sure, I'm asking about the convention</p>",
        "id": 405590906,
        "sender_full_name": "James Sully",
        "timestamp": 1701569396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> <a href=\"#narrow/stream/270676-lean4/topic/proving.20list.20nonempty.20by.20pattern.20match/near/405590868\">said</a>:</p>\n<blockquote>\n<p>h for hypothesis?</p>\n</blockquote>\n<p>That's my best guess. I have never bothered to ask (maybe I should have).</p>",
        "id": 405590968,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1701569421
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621161\">James Sully</span> <a href=\"#narrow/stream/270676-lean4/topic/proving.20list.20nonempty.20by.20pattern.20match/near/405590455\">said</a>:</p>\n<blockquote>\n<p>h is given the type of the value of the list??</p>\n</blockquote>\n<p><code>h</code> is given a <em>proof</em> that <code>list</code> equals the given pattern for the given match arm</p>",
        "id": 405590976,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701569428
    },
    {
        "content": "<p>(and yeah, I think <code>h</code> is \"hypothesis\". it's often used as a prefix for proof variables, like <code>hpos : 0 &lt; x</code> for the fact that <code>x</code> is positive)</p>",
        "id": 405590993,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701569442
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 405591000,
        "sender_full_name": "James Sully",
        "timestamp": 1701569449
    },
    {
        "content": "<p>thanks both!</p>",
        "id": 405591071,
        "sender_full_name": "James Sully",
        "timestamp": 1701569508
    },
    {
        "content": "<p>This notation by the way appears in a few other constructs, like <code>if h : x = 0 then ... else ...</code>, which gives you <code>h : x = 0</code> in the true case and <code>x : Not (x = 0)</code> in the false case, or <code>for h : x in lst do ...</code> to get a proof that <code>x</code> is in <code>lst</code> in the loop body.</p>",
        "id": 405591357,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701569729
    },
    {
        "content": "<p>Oh nice, that's good to know.</p>",
        "id": 405591511,
        "sender_full_name": "James Sully",
        "timestamp": 1701569842
    },
    {
        "content": "<p>Would the <code>by simp [h]</code> bottom out in a <code>List.noConfusion</code>?</p>",
        "id": 405591540,
        "sender_full_name": "James Sully",
        "timestamp": 1701569869
    },
    {
        "content": "<p>if written out explicitly?</p>",
        "id": 405591596,
        "sender_full_name": "James Sully",
        "timestamp": 1701569888
    },
    {
        "content": "<p>I assume you mean if you have something like <code>have : list ≠ [] := by simp [h]</code> in the second branch? Yeah, that sounds right.</p>",
        "id": 405591766,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570015
    },
    {
        "content": "<p>yep. ok cool</p>",
        "id": 405591796,
        "sender_full_name": "James Sully",
        "timestamp": 1701570040
    },
    {
        "content": "<p>You could also do <code>by intro h'; cases h.symm.trans h'</code> (untested!), which would also use <code>List.noConfusion</code>. The <code>h.symm.trans h'</code> should be <code>something :: something = []</code></p>",
        "id": 405591852,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570096
    },
    {
        "content": "<p>that also works. I'm not familiar with the <code>cases</code> tactic yet, I've only used <code>cases'</code> from the Lean Game Server, which I think is a simplified version</p>",
        "id": 405592179,
        "sender_full_name": "James Sully",
        "timestamp": 1701570342
    },
    {
        "content": "<p><code>cases'</code> is like <code>cases</code> but it has different syntax for how you name hypotheses (it's the Lean 3 style <code>cases</code> tactic)</p>",
        "id": 405592259,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570386
    },
    {
        "content": "<p>Oh is the <code>h.symm.trans</code> just function application? Like <code>trans (symm h)</code></p>",
        "id": 405592331,
        "sender_full_name": "James Sully",
        "timestamp": 1701570429
    },
    {
        "content": "<p>It takes a bit of a leap into dependent type theory to see why <code>cases</code> on an equality makes sense, but all you need to know  is that it tries to make both sides of an equality exactly the same. That might mean substituting variables automatically, or, in this case, realizing we're in an impossible situation and close the goal using <code>List.noConfusion</code>.</p>",
        "id": 405592484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570498
    },
    {
        "content": "<p>Oh, yeah, <code>h.symm.trans h'</code> is <code>Eq.trans (Eq.symm h) h'</code>.</p>",
        "id": 405592517,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701570511
    },
    {
        "content": "<p>what's the type of <code>h.symm.trans</code>?</p>",
        "id": 405593112,
        "sender_full_name": "James Sully",
        "timestamp": 1701570885
    },
    {
        "content": "<p>i'm trying to extract it into a <code>have</code> to understand better</p>",
        "id": 405593183,
        "sender_full_name": "James Sully",
        "timestamp": 1701570935
    },
    {
        "content": "<p>If i'm understanding right:</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>h.symm : x :: xs = list\nh.symm.trans : (list = c) -&gt; x :: xs = c\n</code></pre></div>",
        "id": 405593700,
        "sender_full_name": "James Sully",
        "timestamp": 1701571268
    },
    {
        "content": "<p>I wrote it out in excruciating detail and I'm starting to understand haha</p>\n<div class=\"codehilite\" data-code-language=\"lean4\"><pre><span></span><code>      match h : digits with\n        | [] =&gt; none\n        | x :: xs =&gt;\n            have digits_ne_nil : digits ≠ [] := by\n              -- simp [h]\n              -- or\n              -- rw [h]\n              -- exact λ h2 =&gt; List.noConfusion h2\n              -- or\n              intro (h1 : digits = [])\n              have h2 {c} : (digits = c) → x :: xs = c := h.symm.trans\n              have h3 : x :: xs = [] := h2 h1\n              cases h3\n</code></pre></div>",
        "id": 405594197,
        "sender_full_name": "James Sully",
        "timestamp": 1701571599
    }
]