[
    {
        "content": "<p>Injectivity of type constructor is obviously anticlassical, as we can define an inductive type <code>Bad : (Type -&gt; Type) -&gt; Type</code>, whose sole existence implies an injective function from <code>Type -&gt; Type</code> to <code>Type</code>, with which we can invoke Cantor's argument.</p>\n<p>However, does injectivity of <code>-&gt;</code> (let's not consider the dependent case first) break anything? This come up when I am contemplating the unprovability of <code>HEq f g -&gt; HEq x y -&gt; HEq (f x) (g y)</code>. Is there any literature investigating this problem?</p>",
        "id": 327817109,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1676391699
    },
    {
        "content": "<p>I think the set-theoretic model like in Mario's thesis needs at most minor tweaks in order to validate injectivity of <code>-&gt;</code>.</p>",
        "id": 327822249,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676392989
    },
    {
        "content": "<p>Oh wait, it's slightly awkward to deal with <code>A -&gt; B</code> with <code>B</code> empty but not <code>A</code>.</p>",
        "id": 327823102,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676393215
    },
    {
        "content": "<p>Do you care about the interaction with propext? <code>(false -&gt; true) = (true -&gt; true)</code></p>",
        "id": 327823945,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676393459
    },
    {
        "content": "<p>Ok, that breaks. So we definitely don't have <code>HEq f g -&gt; HEq x y -&gt; HEq (f x) (g y)</code> right? I will try to construct a disproof, but I should sleep now.</p>",
        "id": 327828008,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1676394532
    },
    {
        "content": "<p>i suspect it's unprovable but not unsound when in Type u? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> not sure though</p>",
        "id": 327843654,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1676398853
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"404479\">Trebor Huang</span> <a href=\"#narrow/stream/270676-lean4/topic/Injectivity.20of.20function.20type.20constructor/near/327828008\">said</a>:</p>\n<blockquote>\n<p>Ok, that breaks. So we definitely don't have <code>HEq f g -&gt; HEq x y -&gt; HEq (f x) (g y)</code> right? I will try to construct a disproof, but I should sleep now.</p>\n</blockquote>\n<p><del>docs#congr_heq</del> ah, not quite</p>",
        "id": 327847567,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676399980
    },
    {
        "content": "<p>For <code>HEq f g -&gt; HEq x y -&gt; HEq (f x) (g y)</code> you actually want injectivity only in the right argument - <code>(A -&gt; B) = (A -&gt; C)</code> implies <code>B = C</code>. As long as <code>A</code> is nonempty this is basically always true, but for <code>A</code> empty you need some additional tagging scheme to make it true (but it can still be done as long as <code>B, C : Type u</code>). For <code>B, C : Prop</code> it is false because of <code>(false -&gt; false) = (false -&gt; true)</code>.</p>",
        "id": 327861558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676404371
    },
    {
        "content": "<p>For <code>HEq f g -&gt; HEq x y -&gt; HEq (f x) (g y)</code> this isn't an issue though, because <code>x</code> and <code>y</code> witness the nonemptiness of <code>A</code></p>",
        "id": 327861842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676404450
    },
    {
        "content": "<p>For the values it is easy enough to ensure that this theorem holds, you just take <code>HEq</code> to mean ZFC <code>=</code> and then it is true</p>",
        "id": 327861973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676404491
    }
]