[
    {
        "content": "<p>I copied some code from <code>mathlib4/Mathlib/Topology/Homeomorph.lean</code> and modified it slightly, but I got the error. I'm using <code>Lean 4.0.0-nightly-2023-07-12</code>. Here is the MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Complex.Basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Real.Basic</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Z</span> <span class=\"kd\">extends</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℝ</span> <span class=\"n\">where</span>\n  <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Continuous</span> <span class=\"n\">toFun</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">toEquiv_injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">toEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>The last line triggers the message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"bp\">'</span><span class=\"n\">cases'</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">nested</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n<span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">equation</span>\n  <span class=\"n\">toEquiv</span> <span class=\"o\">{</span> <span class=\"n\">toEquiv</span> <span class=\"o\">:=</span> <span class=\"n\">toEquiv</span><span class=\"bp\">✝</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"bp\">✝</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">toEquiv</span> <span class=\"o\">{</span> <span class=\"n\">toEquiv</span> <span class=\"o\">:=</span> <span class=\"n\">toEquiv</span><span class=\"bp\">✝¹</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"bp\">✝¹</span> <span class=\"o\">}</span>\n<span class=\"n\">at</span> <span class=\"n\">case</span> <span class=\"n\">Eq.refl</span> <span class=\"n\">after</span> <span class=\"n\">processing</span>\n  <span class=\"o\">(</span><span class=\"n\">Z.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">Z.mk</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">_</span>\n<span class=\"n\">the</span> <span class=\"n\">dependent</span> <span class=\"n\">pattern</span> <span class=\"n\">matcher</span> <span class=\"n\">can</span> <span class=\"n\">solve</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">kinds</span> <span class=\"n\">of</span> <span class=\"n\">equations</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">and</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">var</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">term</span><span class=\"bp\">&gt;</span> <span class=\"n\">where</span> <span class=\"n\">the</span> <span class=\"n\">terms</span> <span class=\"n\">are</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span>\n<span class=\"bp\">-</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span> <span class=\"bp\">=</span> <span class=\"bp\">&lt;</span><span class=\"n\">constructor</span><span class=\"bp\">&gt;</span><span class=\"o\">,</span> <span class=\"n\">examples</span><span class=\"o\">:</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.cons</span> <span class=\"n\">y</span> <span class=\"n\">ys</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">List.cons</span> <span class=\"n\">x</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">List.nil</span>\n</code></pre></div>\n<p>What can I do to fix it?<br>\nTo be honest, I don't even know how <code>Homeomorph.lean</code> proves its theorem <code>toEquiv_injective</code>.<br>\nI just read the proof above as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pattern</span> <span class=\"k\">match</span><span class=\"o\">:</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">toEquiv</span><span class=\"o\">(</span><span class=\"n\">z1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">toEquiv</span><span class=\"o\">(</span><span class=\"n\">z2</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">z1</span> <span class=\"bp\">=</span> <span class=\"n\">z2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I find it looks like it defines equality but does not prove it.</p>",
        "id": 379780595,
        "sender_full_name": "Wen Yang",
        "timestamp": 1690632345
    },
    {
        "content": "<p>I get <code>unknown identifier 'toEquiv'</code>. Do you get this error as well if you use <code>set_option relaxedAutoImplicit false</code> or write the MWE from within mathlib?</p>",
        "id": 379784281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690633259
    },
    {
        "content": "<p>with <code>set_option relaxedAutoImplicit true</code> I can replicate your error</p>",
        "id": 379784607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690633326
    },
    {
        "content": "<p>So the issue is that <code>toEquiv</code> is an unknown function, hence <code>toEquiv { toEquiv := toEquiv✝, c := c✝ }</code> doesn't reduce to <code>toEquiv✝</code> and the equality elimination fails</p>",
        "id": 379784809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690633369
    },
    {
        "content": "<p>this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">toEquiv_injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">Z.toEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 379784916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690633391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416034\">Wen Yang</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20prove.20theorem.20toEquiv_injective.20.3F/near/379780595\">said</a>:</p>\n<blockquote>\n<p>To be honest, I don't even know how <code>Homeomorph.lean</code> proves its theorem <code>toEquiv_injective</code>.<br>\nI just read the proof above as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pattern</span> <span class=\"k\">match</span><span class=\"o\">:</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">z2</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">toEquiv</span><span class=\"o\">(</span><span class=\"n\">z1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">toEquiv</span><span class=\"o\">(</span><span class=\"n\">z2</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">z1</span> <span class=\"bp\">=</span> <span class=\"n\">z2</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and I find it looks like it defines equality but does not prove it.</p>\n</blockquote>\n<p>That's not quite right, you are missing the inner pattern match. What it really says is closer to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pattern</span> <span class=\"k\">match</span><span class=\"o\">:</span> <span class=\"bp\">|</span> <span class=\"o\">(⟨</span><span class=\"n\">eqv</span><span class=\"o\">,</span> <span class=\"n\">c1</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(⟨</span><span class=\"n\">eqv</span><span class=\"o\">,</span> <span class=\"n\">c2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">eqv</span> <span class=\"bp\">=</span> <span class=\"n\">eqv</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"o\">⟨</span><span class=\"n\">eqv</span><span class=\"o\">,</span> <span class=\"n\">c1</span><span class=\"o\">⟩</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">eqv</span><span class=\"o\">,</span> <span class=\"n\">c2</span><span class=\"o\">⟩)</span>\n</code></pre></div>\n<p>The two occurrences of <code>eqv</code> are forced to be the same because of the <code>rfl</code> pattern match, and on the right <code>⟨eqv, c1⟩ = ⟨eqv, c2⟩</code> is true by <code>rfl</code> because <code>c1</code> and <code>c2</code> are proofs of the same proposition (namely <code>Continuous eqv.toFun</code>) and are hence defeq</p>",
        "id": 379786059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1690633659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20prove.20theorem.20toEquiv_injective.20.3F/near/379784281\">发言道</a>：</p>\n<blockquote>\n<p>I get <code>unknown identifier 'toEquiv'</code>. Do you get this error as well if you use <code>set_option relaxedAutoImplicit false</code> or write the MWE from within mathlib?</p>\n</blockquote>\n<p>Yes, I get this error as well if I use <code>set_option relaxedAutoImplicit false</code>. I don't write my code within mathlib. I just created a project that requires mathlib in the lakefile.<br>\n<span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/how.20to.20prove.20theorem.20toEquiv_injective.20.3F/near/379784916\">发言道</a>：</p>\n<blockquote>\n<p>this works:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">toEquiv_injective</span> <span class=\"o\">:</span> <span class=\"n\">Function.Injective</span> <span class=\"o\">(</span><span class=\"n\">Z.toEquiv</span> <span class=\"o\">:</span> <span class=\"n\">Z</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">≃</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It works! Thank you very much! In fact, I define a new structure from the Homeomorph ≃ₜ but not the Equiv ≃, and now I find I should use Z.toHomeomorph instead of Z.toEquiv.</p>",
        "id": 379799882,
        "sender_full_name": "Wen Yang",
        "timestamp": 1690636878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416034\">Wen Yang</span> has marked this topic as resolved.</p>",
        "id": 379799896,
        "sender_full_name": "Notification Bot",
        "timestamp": 1690636884
    }
]