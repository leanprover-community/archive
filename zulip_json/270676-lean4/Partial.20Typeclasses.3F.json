[
    {
        "content": "<p>Is there a way to define a typeclass instance that might be inferred on some cases but not necessarily others (and let Lean complain in those other cases that it can't)? Conceretely, imagine I have a type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Positive</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I can define an <code>OfNat</code> instance for <code>Positive</code> for everything except <code>0</code>. I could do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">Positive</span> <span class=\"n\">n</span> <span class=\"n\">where</span>\n  <span class=\"n\">ofNat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">aesop</span> <span class=\"o\">)⟩</span>\n</code></pre></div>\n<p>but that won't work then if I somewhere later try to use a positive number where I need it to be <code>Positive</code>, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Positive</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"c1\">-- failed to synthesize instance  OfNat Positive 1</span>\n</code></pre></div>\n<p>Is there a way to get that last one to work? Particularly for <code>OfNat</code> where the typeclass is specifically defined on the actual values, I would expect that to be possible somehow?</p>",
        "id": 359442438,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1684427265
    },
    {
        "content": "<p>For this particular case you can use <code>[NeZero n]</code> in place of <code>h</code></p>",
        "id": 359444362,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1684427786
    },
    {
        "content": "<p>ah, that's an interesting idea! use another typeclass for the property. It does work for me for this case, but I don't understand how I would define the typeclass instance <code>NeZero</code> for all <code>n : Nat</code> except 0 (and in this case it seems to be burried under a lot of mathlib magic)</p>",
        "id": 359446953,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1684428525
    },
    {
        "content": "<p>you could have an instance for <code>NeZero (n+1)</code></p>",
        "id": 359447980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1684428815
    }
]