[
    {
        "content": "<p>I just came across something curious.<br>\nFirst, here's a bit of Lean4 code that does what is expected:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span> <span class=\"kn\">section</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It just shows <code>α : Type u</code> in the infoview at the <code>#check</code> location. <br>\nNow let's flip the <code>set_option</code> and <code>variable</code> commands:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"kn\">section</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This results in an error at alpha: <code>unknown identifier 'α'</code>. </p>\n<p>Now let's remove the <code>set_option</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"kn\">section</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>This again works, and shows <code>α : Type u</code> at the <code>#check</code> location. </p>\n<p>What's going on?</p>",
        "id": 388236383,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1693451539
    },
    {
        "content": "<p>I do not have an answer to your question, but I also discovered this.  Which one do you think is correct?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n  <span class=\"kn\">section</span>\n  <span class=\"kd\">end</span> <span class=\"n\">a</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n  <span class=\"kn\">section</span>\n  <span class=\"kd\">end</span>\n<span class=\"kd\">end</span> <span class=\"n\">a</span>\n</code></pre></div>\n<p>(the indentation is unnecessary, but I thought that it was helpful!)</p>",
        "id": 388251239,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693458950
    },
    {
        "content": "<p>Also, if you type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">a</span> <span class=\"k\">in</span>\n<span class=\"kn\">section</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>then I was unable to finish this in a way that Lean was happy!</p>",
        "id": 388252179,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693459462
    },
    {
        "content": "<p>I think that <code>section</code> closes early due to the <code>end</code> inserted by the <code>in</code>.  If you do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kn\">section</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>depending on the order of the <code>in</code>s, you either do not get the pretty-printing or you do not have <code>α</code> in the <code>example</code>.</p>",
        "id": 388252858,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693459883
    },
    {
        "content": "<p>My guess is that <code>&lt;whatever&gt; in section</code> basically does nothing (except possibly consuming an <code>end</code> and never complaining about it).</p>",
        "id": 388253023,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1693459997
    },
    {
        "content": "<p>Yeah, the <code>X in Y</code> is <code>section X Y end</code>, so if you do <code>X in section</code> you get <code>section X section end</code>.</p>\n<p>This is a consequence to <code>section</code> and <code>end</code> being commands in their own right, rather than being some larger syntactic construct that collects all the commands between them.</p>",
        "id": 388274015,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693470194
    },
    {
        "content": "<p>I'm thinking it would be best to just have <code>in</code> detect when the RHS is a section or namespace command and just elaborate <code>A in B in section</code> as <code>section; A; B</code></p>",
        "id": 388274203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470261
    },
    {
        "content": "<p>I wonder if there should be two levels of commands, with <code>section</code>/<code>namespace</code>/<code>end</code> not being normal <code>command</code>s, which would allow <code>X in section</code> to not parse since <code>section</code> wouldn't be a normal <code>command</code>.</p>",
        "id": 388274340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693470323
    },
    {
        "content": "<p>It's easy enough to make <code>X in section</code> not parse if we want to go that route</p>",
        "id": 388274402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470350
    },
    {
        "content": "<p>but do we want this to work?</p>",
        "id": 388274424,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1693470358
    },
    {
        "content": "<p>I suppose we could make <code>X in section foo</code> expand to <code>section foo X</code> easily enough, but we'd want to be sure it works with multiple <code>in</code>s</p>",
        "id": 388278370,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693471803
    }
]