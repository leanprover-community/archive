[
    {
        "content": "<p>This is asking for community feedback before opening a Lean 4 RFC. Consider the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>       <span class=\"c1\">--    { toA := { x := 1 }, y := 2 } : B</span>\n</code></pre></div>\n<p>Lean understands what I mean by <code>({ x := 1, y := 2 } : B)</code>, and it also understands <code>{ x := 1, y := 2 : B }</code>. But it always displays <code>{ toA := { x := 1 }, y := 2 } : B</code>. I think it should delaborate this to <code>{ x := 1, y := 2 }</code>. This is especially common in Mathlib which has deeply nested structures. Note that Lean 3 had the same behavior, but nested structures were a lot less common.</p>",
        "id": 396574802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697233456
    },
    {
        "content": "<p>Taking this even further, wouldn't it be convenient if it was in fact <code>{x := 1, y := 2}</code> rather than just  delaborating to it? not only is it convenient, given <code>let h := {x := 1, y := 2 : B}</code> one might try to access <code>h.x</code> rather than <code>h.toA.x</code>and get errors.</p>",
        "id": 396576159,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697234397
    },
    {
        "content": "<p>No, you won't get an error.</p>",
        "id": 396578796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697236171
    },
    {
        "content": "<p>You can simply try:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"o\">({</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span> <span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">h.x</span>\n</code></pre></div>",
        "id": 396578918,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697236245
    },
    {
        "content": "<p>Direct access to a structure field is only the simplest use of dot notation in Lean.</p>",
        "id": 396578946,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1697236272
    },
    {
        "content": "<p>Thanks that helps</p>",
        "id": 396578977,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1697236300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466334\">Shreyas Srinivas</span> <a href=\"#narrow/stream/270676-lean4/topic/Nested.20structure.20delaborator/near/396576159\">said</a>:</p>\n<blockquote>\n<p>Taking this even further, wouldn't it be convenient if it was in fact <code>{x := 1, y := 2}</code> rather than just  delaborating to it?</p>\n</blockquote>\n<p>Under the RFC at <a href=\"https://github.com/leanprover/lean4/pull/2666\">lean4#2666</a>, this behavior can be recovered with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">B</span> <span class=\"kd\">extends</span> <span class=\"kd\">@[</span><span class=\"n\">flat</span><span class=\"kd\">]</span> <span class=\"n\">A</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n</code></pre></div>\n<p>which means <code>{x := 1, y := 2]</code> is notation for <code>.mk 1 2</code> as opposed to <code>.mk (.mk 1) 2</code></p>",
        "id": 396579776,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697237029
    },
    {
        "content": "<p>(If you like that approach, I encourage you or anyone else reading to <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> the RFC, as supposedly this has some impact on prioritization)</p>",
        "id": 396579973,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697237177
    }
]