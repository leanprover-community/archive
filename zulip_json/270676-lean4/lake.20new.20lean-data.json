[
    {
        "content": "<p>The command <code>lake new lean-data</code> gives me a PANIC with a backtrace and the following error</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>no<span class=\"w\"> </span>such<span class=\"w\"> </span>file<span class=\"w\"> </span>or<span class=\"w\"> </span>directory<span class=\"w\"> </span><span class=\"o\">(</span>error<span class=\"w\"> </span>code:<span class=\"w\"> </span><span class=\"m\">2</span><span class=\"o\">)</span>\n<span class=\"w\">  </span>file:\n</code></pre></div>\n<p>I tried this on two different computers with different linux distros. Can someone else reproduce?</p>",
        "id": 362919054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685673775
    },
    {
        "content": "<p>This is using <code>Lake version 4.1.0-pre (Lean version 4.0.0-nightly-2023-06-01)</code></p>",
        "id": 362919077,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1685673792
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">%</span> <span class=\"n\">lake</span> <span class=\"bp\">+</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">05</span><span class=\"bp\">-</span><span class=\"mi\">31</span> <span class=\"n\">new</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">data</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Option.get</span><span class=\"bp\">!</span> <span class=\"n\">Init.Data.Option.BasicAux</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"n\">is</span> <span class=\"n\">none</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">such</span> <span class=\"n\">file</span> <span class=\"n\">or</span> <span class=\"n\">directory</span> <span class=\"o\">(</span><span class=\"n\">error</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"n\">file</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>on macos.</p>",
        "id": 362932096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685683116
    },
    {
        "content": "<p>Looks like anything with a <code>-</code> in the name.</p>",
        "id": 362932163,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1685683163
    },
    {
        "content": "<p>This is definitely a regression though, it used to work with doc-gen4</p>",
        "id": 362932816,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1685683497
    },
    {
        "content": "<p>I actually think this is a Lean regression -- not a Lake one -- as <code>lake new lean-data</code> works on the latest Lake master.</p>",
        "id": 362950132,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685690081
    },
    {
        "content": "<p>Yep, Lean regression -- works 04-04, broken on 06-01</p>",
        "id": 362952492,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685690818
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 362953240,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685691031
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 362955238,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685691571
    },
    {
        "content": "<p>testing reveals that <del>04-11</del>  (edit: messed up my testing) is the first broken release.</p>",
        "id": 362957904,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685692290
    },
    {
        "content": "<p>Looking at the code suggests <a href=\"https://github.com/leanprover/lake/blob/master/Lake/CLI/Init.lean#L171\">this</a> is the <code>Option.get!</code> that is panicking</p>",
        "id": 362958707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685692490
    },
    {
        "content": "<p>The code seems to be assuming that <code>rootFile</code> has some initial <code>./</code> on it; it is <code>lean-data.lean</code> in this example and <code>rootFile.parent</code> returns <code>none</code></p>",
        "id": 362959434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685692664
    },
    {
        "content": "<p>my guess is that the lean change is doing some additional canonicalization to remove superfluous <code>./</code></p>",
        "id": 362959561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685692692
    },
    {
        "content": "<p>Ah! I suspected it might have been this: <a href=\"https://github.com/leanprover/lean4/pull/2233\">lean4#2233</a> and it is. You are calling <code>String.toName</code> on the string <code>\"lean-data\"</code>, which previously generated <code> `lean-data</code> but now produces <code>none</code> (encoded as <code>.anonymous</code>, which is otherwise not a legal output of the function). The function <code>String.toName</code> was broken for actual lean names, which made it impossible to import lean files that start with a digit (such as those in the mathlib archive). It should not be used on things that are not intended to be interpreted via lean name parsing rules (i.e. dot-separated, and quote any weird characters with <code>«»</code>)</p>",
        "id": 362961787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span></p>",
        "id": 362961894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693257
    },
    {
        "content": "<p>I think the most logical fix in this case is to use <code>Name.mkSimple</code> (aka the coercion) instead of trying to parse it into multiple components</p>",
        "id": 362962380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Lake accepts multiple components though and will produce a proper directory structure from it. This allows one to create a package like <code>data.json</code> and get the proper folder nesting.</p>",
        "id": 362962689,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685693466
    },
    {
        "content": "<p>but does it have to do that in <code>lake new</code>?</p>",
        "id": 362962747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693483
    },
    {
        "content": "<p>what does it mean to <code>lake new foo.bar</code></p>",
        "id": 362962825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693516
    },
    {
        "content": "<p>it will create a </p>\n<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362962825\">said</a>:</p>\n<blockquote>\n<p>what does it mean to <code>lake new foo.bar</code></p>\n</blockquote>\n<p>It creates a package <code>foo.bar</code> with its main library file being <code>Foo/Bar.lean</code></p>",
        "id": 362963241,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685693610
    },
    {
        "content": "<p>However, I guess I can just inline the old algorithm instead of using <code>toName</code>.</p>",
        "id": 362964455,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685693937
    },
    {
        "content": "<p>you shouldn't, it was broken</p>",
        "id": 362964519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what was wrong about it for my use case?</p>",
        "id": 362964628,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685693971
    },
    {
        "content": "<p>how about using <code>String.toName</code> and if that fails reverting to <code>mkSimple</code>?</p>",
        "id": 362964651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685693976
    },
    {
        "content": "<p>you are inventing your own name encoding mechanism here, which should stick out as a bad idea. Names can have lots of weird things in them, is this CLI only or will it end up in file names and reparsed by other things leading to inconsistency?</p>",
        "id": 362965296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694119
    },
    {
        "content": "<p>The bug you mention in the issue is just about french quotes which should not be used on the command line anyway.</p>",
        "id": 362965422,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694137
    },
    {
        "content": "<p>This kind of disagreement between two parties about how to parse a thing is where tons of bugs / security vulnerabilities come from</p>",
        "id": 362965677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362965296\">said</a>:</p>\n<blockquote>\n<p>you are inventing your own name encoding mechanism here, which should stick out as a bad idea. Names can have lots of weird things in them, is this CLI only or will it end up in file names and reparsed by other things leading to inconsistency?</p>\n</blockquote>\n<p>The name encoding system is just split the CLI input (which should not have french quotes) on <code>.</code> and then construct each component with<code>Nane.str</code>. Since the name will be wrapped in french quotes, this should be a perfectly valid name construction.</p>",
        "id": 362965965,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694262
    },
    {
        "content": "<p>so if I give it <code>«a.b».c</code> then it turns into <code>«a</code>.<code>b»</code>.<code>c</code> and you generate some lean files with broken escapes</p>",
        "id": 362966195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694323
    },
    {
        "content": "<p>Yes, if you are for some reason inputting french quotes on the command line.</p>",
        "id": 362966299,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694352
    },
    {
        "content": "<p>FYI I had to write exactly that for mathport</p>",
        "id": 362966400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694367
    },
    {
        "content": "<p>Why?</p>",
        "id": 362966541,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694404
    },
    {
        "content": "<p>scripts are often calling CLI utilities with arguments that would be weird to type directly</p>",
        "id": 362966553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694408
    },
    {
        "content": "<p>the example I just gave isn't even that weird, it is the logical name of a file <code>Foo.Bar/Baz.lean</code></p>",
        "id": 362966667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362966667\">said</a>:</p>\n<blockquote>\n<p>the example I just gave isn't even that weird, it is the logical name of a file <code>Foo.Bar/Baz.lean</code></p>\n</blockquote>\n<p>That is a horribly invalid module path in Lean.</p>",
        "id": 362966917,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694486
    },
    {
        "content": "<p>no it's not</p>",
        "id": 362966947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694492
    },
    {
        "content": "<p>Yes, it does not round-trip on <code>modToLeanPath</code> which will break tons of assumptions in the importing procedure.</p>",
        "id": 362967057,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694530
    },
    {
        "content": "<p>maybe lake breaks it but lean is able to handle module names like <code>«Foo.Bar».Baz</code></p>",
        "id": 362967087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694537
    },
    {
        "content": "<p>I don't see why it wouldn't roundtrip?</p>",
        "id": 362967365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694600
    },
    {
        "content": "<p>Oh my.</p>",
        "id": 362967377,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694602
    },
    {
        "content": "<p>the components of that name are <code>\"Foo.Bar\", \"Baz\"</code> so you would get <code>Foo.Bar/Baz.lean</code> out</p>",
        "id": 362967537,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694633
    },
    {
        "content": "<p>Yeah, I guess that would work with Lean if you use french quotes like that. The UX for that seems miserable though. I can just imagine the Zulip questions when someone forgets the french quotes.</p>",
        "id": 362967638,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694658
    },
    {
        "content": "<p>lake already puts french quotes in most lakefiles IIRC</p>",
        "id": 362967814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694704
    },
    {
        "content": "<p>Yes, it escapes all components of the identifiers it generates.</p>",
        "id": 362968392,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694845
    },
    {
        "content": "<p>isn't there a function to do that already?</p>",
        "id": 362968505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694880
    },
    {
        "content": "<p>if you used it it would probably solve the issue where it french quotes things that don't need it</p>",
        "id": 362968591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694900
    },
    {
        "content": "<p><code>Name.toString</code></p>",
        "id": 362968872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685694974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362968505\">said</a>:</p>\n<blockquote>\n<p>isn't there a function to do that already?</p>\n</blockquote>\n<p>No, the function escapes only identifiers with special characters. Lake has to escape it always to prevent things like <code>lake new if</code> from breaking.</p>",
        "id": 362968874,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685694975
    },
    {
        "content": "<p>oh I wrote a version that does that somewhere</p>",
        "id": 362968968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685695003
    },
    {
        "content": "<p>it escapes keywords by checking the grammar</p>",
        "id": 362969082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685695040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362967087\">said</a>:</p>\n<blockquote>\n<p>maybe lake breaks it but lean is able to handle module names like <code>«Foo.Bar».Baz</code></p>\n</blockquote>\n<p>Lake will break when using globs on this because our glob traversal also used <code>toName</code> so <code>Foo.Bar</code> was split on <code>.</code> and the new <code>toName</code> will just break on any file with special characters (e.g., <code>Foo-Bar/Baz</code>).</p>",
        "id": 362969868,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695242
    },
    {
        "content": "<p>the new <code>toName</code> is expecting properly constructed names. That example of a file with special characters is not a name</p>",
        "id": 362970341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685695369
    },
    {
        "content": "<p>how is it being turned into one?</p>",
        "id": 362970383,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685695381
    },
    {
        "content": "<p>you can't have a file with <code>/</code> in it anyway (in linux, mac, windows, at least)</p>",
        "id": 362970505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685695415
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/blob/0d4da61cbfe65f19ac7070c2c9f62f36db529c4c/Lake/Config/Glob.lean#L30\">https://github.com/leanprover/lake/blob/0d4da61cbfe65f19ac7070c2c9f62f36db529c4c/Lake/Config/Glob.lean#L30</a></p>",
        "id": 362970676,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695452
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362970505\">said</a>:</p>\n<blockquote>\n<p>you can't have a file with <code>/</code> in it anyway (in linux, mac, windows, at least)</p>\n</blockquote>\n<p>Ah, no, I mean a directory named <code>Foo-Bar</code> with a file <code>Baz.lean</code> in it.</p>",
        "id": 362970776,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695484
    },
    {
        "content": "<p>Another use case similar to globs  would be the eventual solution to <a href=\"https://github.com/leanprover/lake/issues/147\">lake#147</a>.</p>",
        "id": 362971128,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695586
    },
    {
        "content": "<p>We will need to turn the path into a module name, so <code>Foo-Bar/Baz.lean</code> becomes <code>&lt;&lt;Foo-Bar&gt;&gt;.Baz</code></p>",
        "id": 362971238,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695623
    },
    {
        "content": "<p>For those cases, <code>Name.str</code> should be fine though I believe?</p>",
        "id": 362971466,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695680
    },
    {
        "content": "<p>I need to get off to bed, so I will be jumping off. Happy to discuss further tomorrow if you want, Mario.</p>",
        "id": 362971880,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685695769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/362971238\">said</a>:</p>\n<blockquote>\n<p>We will need to turn the path into a module name, so <code>Foo-Bar/Baz.lean</code> becomes <code>&lt;&lt;Foo-Bar&gt;&gt;.Baz</code></p>\n</blockquote>\n<p>right, I guess my point is that if you do this everything just works</p>",
        "id": 362973432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685696157
    },
    {
        "content": "<p>because as long as you just use names, nothing will be sneakily re-parsing the text (this is one thing I don't miss about shell scripting), and using <code>String.toName</code> and <code>Name.toString</code> results in a roundtripping pair if you want to make a string out of it (modulo the issue about keywords)</p>",
        "id": 362973877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685696265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sorry to resurrect this thread, but I encounter more concerns trying to fix this issue. Presumably, we want to be able to name packages things like <code>lean-data</code>, correct? Since these are not proper names, <code>toName</code> no longer works. However, it seems like we still need them to operate like names. For example, if the <code>lean-data</code> package has a target named <code>linter</code>, that may be built via <code>lake build lean-data.linter</code> (i.e., a two part name of <code>lean-data</code>, <code>linter</code>). I do not see how to accomplish this without replicating the old <code>toName</code> behavior.</p>",
        "id": 364424950,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686188564
    },
    {
        "content": "<p>is <code>lean-data</code> the module name?</p>",
        "id": 364425096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188659
    },
    {
        "content": "<p><code>lean-data</code> is the package name</p>",
        "id": 364425132,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686188691
    },
    {
        "content": "<p>If this is part of the <code>lake build</code> CLI parsing, you can use dot separators if you like, that field is already hella overloaded</p>",
        "id": 364425273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188768
    },
    {
        "content": "<p>I don't think it necessarily has to be interpreted as a name in that case</p>",
        "id": 364425298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188802
    },
    {
        "content": "<p>In general, CLI targets often want to be improper names (e.g. using hypens, reserved words, etc.) but still namespace like normal names. I do not see how to synergize these two desires without a custom name parser.</p>",
        "id": 364425306,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686188810
    },
    {
        "content": "<p>TBH I'm not sure that lowercase package names is a good idea</p>",
        "id": 364425342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188838
    },
    {
        "content": "<p>it's a bit confusing that the package name of the mathlib package is <code>mathlib</code> even though literally every other place it appears it is spelled <code>Mathlib</code> in code</p>",
        "id": 364425366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188867
    },
    {
        "content": "<p>Virtually every modern major languages uses lowercase package name (JS, Python, Ruby, Rust).</p>",
        "id": 364425422,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686188890
    },
    {
        "content": "<p>...</p>",
        "id": 364425446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188920
    },
    {
        "content": "<p>this is not helpful</p>",
        "id": 364425459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686188931
    },
    {
        "content": "<p>Its not? I think it is good to keep a standard to help with transitioning new and returning users.</p>",
        "id": 364425487,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686188958
    },
    {
        "content": "<p>Hence why I copied NPM's command names and syntax for Lake were possible.</p>",
        "id": 364425516,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686188997
    },
    {
        "content": "<p>I think it does not match other uses in lean</p>",
        "id": 364425573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189010
    },
    {
        "content": "<p>when I want to import things from the std package I <code>import Std</code>, why is that?</p>",
        "id": 364425596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189032
    },
    {
        "content": "<p>People were quite insistent that everything in mathlib had to be in the <code>Mathlib</code> folder</p>",
        "id": 364425650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189078
    },
    {
        "content": "<p>One reason (though I am not sure you would like it), is that I am importing the <em>module</em> <code>Std</code> not the package.</p>",
        "id": 364425663,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189088
    },
    {
        "content": "<p><em>everything in the mathlib package</em></p>",
        "id": 364425679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189105
    },
    {
        "content": "<p>The whole package has to be under that path</p>",
        "id": 364425737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189126
    },
    {
        "content": "<p><code>import Std</code> is just the main target</p>",
        "id": 364425753,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189144
    },
    {
        "content": "<p>I think the logic there was to avoid namespace population?</p>",
        "id": 364425756,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189146
    },
    {
        "content": "<p>well now we have two names for a thing and that's dumb</p>",
        "id": 364425766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364425737\">said</a>:</p>\n<blockquote>\n<p>The whole package has to be under that path</p>\n</blockquote>\n<p>No it doesn't, a package can have multiple libraries and multiple roots per library.</p>",
        "id": 364425775,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189176
    },
    {
        "content": "<p>remind me why packages exist?</p>",
        "id": 364425819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189222
    },
    {
        "content": "<p>That was specifically added to support Haskell-like module naming (e.g., <code>Data.*</code> and <code>Control.*</code>)</p>",
        "id": 364425887,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189247
    },
    {
        "content": "<p>why can't it just be libs</p>",
        "id": 364425905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364425819\">said</a>:</p>\n<blockquote>\n<p>remind me why packages exist?</p>\n</blockquote>\n<p>To group libraries, exes, and other targets.</p>",
        "id": 364425911,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189272
    },
    {
        "content": "<p>and why do we need said groups</p>",
        "id": 364425922,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189281
    },
    {
        "content": "<p>e.g. in mathlib, you have both the linter, cache, and library in the same package</p>",
        "id": 364425937,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189296
    },
    {
        "content": "<p>in the same lakefile at least</p>",
        "id": 364425964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189319
    },
    {
        "content": "<p>To index the objects e.g. for dependency management.</p>",
        "id": 364425979,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364425964\">said</a>:</p>\n<blockquote>\n<p>in the same lakefile at least</p>\n</blockquote>\n<p>And the same package.</p>",
        "id": 364425996,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189349
    },
    {
        "content": "<p>but what if I need dependencies between libs?</p>",
        "id": 364425999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189352
    },
    {
        "content": "<p>Currently unsupported, only package level dependencies are specifiable.</p>",
        "id": 364426064,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189382
    },
    {
        "content": "<p>(outside of manually coded custom dependency targets)</p>",
        "id": 364426080,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189405
    },
    {
        "content": "<p>so, if every package had to have one lib/exe but a lakefile could have multiple packages, then that would basically mean packages don't have to exist</p>",
        "id": 364426199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189508
    },
    {
        "content": "<p>Incorrect, it is the other way around. A lakefile must have exactly one package declaration, but can have zero or more libs, exes, or other targets (and other such things like scripts and deps).</p>",
        "id": 364426236,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189557
    },
    {
        "content": "<p>I'm aware</p>",
        "id": 364426243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189564
    },
    {
        "content": "<p>Oh, that was a proposal.</p>",
        "id": 364426256,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189588
    },
    {
        "content": "<p>I'm saying that if it was the other way around then the \"package\" abstraction would be superfluous</p>",
        "id": 364426258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189589
    },
    {
        "content": "<p>But packages don't need targets. They can also e.g. be all scripts.</p>",
        "id": 364426315,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189605
    },
    {
        "content": "<p>scripts don't have to be packages</p>",
        "id": 364426357,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189626
    },
    {
        "content": "<p>Also, if they have multiple targets, which one would decide the name?</p>",
        "id": 364426372,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364426357\">said</a>:</p>\n<blockquote>\n<p>scripts don't have to be packages</p>\n</blockquote>\n<p>They have to be in one though.</p>",
        "id": 364426388,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189650
    },
    {
        "content": "<p><code>@[default_target]</code>?</p>",
        "id": 364426393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189655
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 364426417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189665
    },
    {
        "content": "<p>Multiple libraries can be the default target.</p>",
        "id": 364426431,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189673
    },
    {
        "content": "<p>??</p>",
        "id": 364426437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189686
    },
    {
        "content": "<p>what kind of default is this</p>",
        "id": 364426446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364426417\">said</a>:</p>\n<blockquote>\n<p>what do you mean?</p>\n</blockquote>\n<p>You can execute scripts from other packages e.g. via <code>lake run pkg/script</code></p>",
        "id": 364426447,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189698
    },
    {
        "content": "<p>ok so do that</p>",
        "id": 364426455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189708
    },
    {
        "content": "<p>which means the package needs a name</p>",
        "id": 364426483,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364426446\">said</a>:</p>\n<blockquote>\n<p>what kind of default is this</p>\n</blockquote>\n<p>the <code>default_target</code> just means build the this target on a bare <code>lake build</code>.</p>",
        "id": 364426559,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189746
    },
    {
        "content": "<p>for <code>lake run</code>, you could either leave them unnamespaced, or allow the lakefile to namespace entities from another lakefile on <code>require</code></p>",
        "id": 364426677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189817
    },
    {
        "content": "<p>which is useful e.g. in a big package like LLVM with multiple sublibraries and executables of which many should get built by default.</p>",
        "id": 364426682,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189823
    },
    {
        "content": "<p>Also, the package is convenient for setting package wide settings such as build flags and server flags.</p>",
        "id": 364426768,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189872
    },
    {
        "content": "<p>eh, that has been causing us issues anyway, both std and mathlib use definitions for that now</p>",
        "id": 364426839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189915
    },
    {
        "content": "<p>I am also curious why you are attempting to remove the notion of a package name.</p>",
        "id": 364426841,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686189917
    },
    {
        "content": "<p>Well, if it had the same name as the main lib there would not be so much problem</p>",
        "id": 364426943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189979
    },
    {
        "content": "<p>but like I said, two names for the same thing is dumb</p>",
        "id": 364426956,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686189994
    },
    {
        "content": "<p>It's not the same thing though, the package is a superset of the library.</p>",
        "id": 364426970,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190021
    },
    {
        "content": "<p>especially if it's using a naming convention (kebab case) that doesn't play well with lean</p>",
        "id": 364426990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190027
    },
    {
        "content": "<p>yeah yeah I get it</p>",
        "id": 364427023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190065
    },
    {
        "content": "<p>I mean kebab-case doesn't play well with JS, Ruby, Python, or Rust, and they still use it for their package names.</p>",
        "id": 364427032,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190070
    },
    {
        "content": "<p>rust at least renames it before it enters a rust file</p>",
        "id": 364427094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190092
    },
    {
        "content": "<p>and JS doesn't have it in JS files at all</p>",
        "id": 364427147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190116
    },
    {
        "content": "<p>not sure about ruby/python package management</p>",
        "id": 364427161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190128
    },
    {
        "content": "<p>It appears in JS import statements.</p>",
        "id": 364427204,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190155
    },
    {
        "content": "<p>in quotes?</p>",
        "id": 364427212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190168
    },
    {
        "content": "<p>do any of those languages use them as identifiers?</p>",
        "id": 364427282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190201
    },
    {
        "content": "<p>Python sorta, it works like Lean -- package names and module names are orthogonal and module names are valid identifiers.</p>",
        "id": 364427369,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190244
    },
    {
        "content": "<p>maybe that would solve the issues: just use <code>package \"foo\" where</code> in the lakefile</p>",
        "id": 364427428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190273
    },
    {
        "content": "<p>I could always change the keyword <code>package</code> syntax to use quotes if that would appeals more.</p>",
        "id": 364427430,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190275
    },
    {
        "content": "<p>and likewise in <code>require</code></p>",
        "id": 364427443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190285
    },
    {
        "content": "<p>where else do you have to type a package name?</p>",
        "id": 364427538,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190324
    },
    {
        "content": "<p>However, I still want to transform them into Names for quicker storage in maps (but in that case, they can just be simple names).</p>",
        "id": 364427574,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190346
    },
    {
        "content": "<p>However, this also applies to targets and facets as well -- they also appear on both CLI and in lakefiles. I guess I could force valid Lean names there though.</p>",
        "id": 364427660,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190426
    },
    {
        "content": "<p>Or use simple names if the user uses a string.</p>",
        "id": 364427733,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190471
    },
    {
        "content": "<p>IIUC those also coincide with the name of a module unless you do something special</p>",
        "id": 364427784,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190519
    },
    {
        "content": "<p>That is just for libraries (and sometimes executables), custom targets do not necessarily even have modules associated with them.</p>",
        "id": 364427880,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686190568
    },
    {
        "content": "<p>well as ever our naming conventions are in shambles: <code>Qq</code>, <code>doc-gen4</code> and <code>proofwidgets</code> are packages, <code>runLinter</code> and <code>cache</code> are lake_exe targets, <code>MathlibExtras</code> is a lake_lib target, and that's just in the mathlib lakefile</p>",
        "id": 364428296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686190875
    },
    {
        "content": "<p>Yeah, there does not seem to be an agreed upon name convention in the mathlib world for this stuff.</p>",
        "id": 364428476,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191015
    },
    {
        "content": "<p>I suspect that lake itself is causing some of the problem here, e.g. <code>ProofWidgets</code> is written like that everywhere in the readme and the repo name is <code>ProofWidgets4</code> but the package name is <code>proofwidgets</code>, most likely because <code>lake new</code> did that</p>",
        "id": 364428488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191033
    },
    {
        "content": "<p>My sense is that there is a strong tendency toward capital camel case package names</p>",
        "id": 364428570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191079
    },
    {
        "content": "<p>people mostly just do what <code>lake new</code> recommends, and since the package name almost never matters it's not a surprise that you get weird stuff</p>",
        "id": 364428696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191196
    },
    {
        "content": "<p>Lake does not all lowercase package name, it just decapitalizes them, so <code>proofwidgets</code> had to be manually named to get that lowercase <code>w</code>.</p>",
        "id": 364428746,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191248
    },
    {
        "content": "<p>why does it do that?</p>",
        "id": 364428847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191315
    },
    {
        "content": "<p>e.g. in <code>cargo new</code> you type the package name not the module name</p>",
        "id": 364428872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191349
    },
    {
        "content": "<p>Also, this whole thread is about  Adam naming his package with a hyphen, so there is definitely people who feel more comfortable with that (despite it being an illegal identifier and not recommended anywhere).</p>",
        "id": 364428876,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191354
    },
    {
        "content": "<p>making it not a \"name\" mostly solves that problem</p>",
        "id": 364428890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191378
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364428847\">said</a>:</p>\n<blockquote>\n<p>why does it do that?</p>\n</blockquote>\n<p>For legacy reasons, to prevent a clash between the package identifier and the library identifier.</p>",
        "id": 364428970,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191426
    },
    {
        "content": "<p>I hope those reasons no longer apply?</p>",
        "id": 364428983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191443
    },
    {
        "content": "<p>because I definitely want them to clash</p>",
        "id": 364428993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191454
    },
    {
        "content": "<p>The still applies to prevent a CLI clash between the two targets.</p>",
        "id": 364428996,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364428993\">said</a>:</p>\n<blockquote>\n<p>because I definitely want them to clash</p>\n</blockquote>\n<p>I mean they are definitions, so they generally can't clash?</p>",
        "id": 364429024,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191477
    },
    {
        "content": "<p>huh?</p>",
        "id": 364429034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191490
    },
    {
        "content": "<p>this architecture has so many surprises</p>",
        "id": 364429053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191516
    },
    {
        "content": "<p>I just happen to have elided the packages name because, since there can only be one, I can just have the definition use a fixed name (e.g. <code>_package</code>).</p>",
        "id": 364429057,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191517
    },
    {
        "content": "<p>Being able to refer to this stuff can be useful when building custom targets.</p>",
        "id": 364429135,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191563
    },
    {
        "content": "<p>in that case there isn't a clash though, if you have a package named the same as a lib</p>",
        "id": 364429267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191663
    },
    {
        "content": "<p>unless the lib is named <code>_package</code></p>",
        "id": 364429297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191688
    },
    {
        "content": "<p>Yes, hence me stating the clash avoidance in packages was for legacy reasons. Clash avoidance is still relevant in targets though.</p>",
        "id": 364429355,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364428746\">said</a>:</p>\n<blockquote>\n<p>Lake does not all lowercase package name, it just decapitalizes them, so <code>proofwidgets</code> had to be manually named to get that lowercase <code>w</code>.</p>\n</blockquote>\n<p>Though, having stated this, since I am changing the code here anyway, I think I will just use to <code>toLower</code> (that will help make the convention more obvious).</p>",
        "id": 364429578,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191895
    },
    {
        "content": "<p>or how about just not touching the name specified?</p>",
        "id": 364429598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191919
    },
    {
        "content": "<p>did you consider maybe taking a poll on this?</p>",
        "id": 364429609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191937
    },
    {
        "content": "<p>Well that has the disadvantage of creating the very confusing mix we have currently.</p>",
        "id": 364429636,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191957
    },
    {
        "content": "<p>if I <code>cargo new FooBar-baz</code> that's exactly the package name I get</p>",
        "id": 364429664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686191986
    },
    {
        "content": "<p>I was basing the conventions on those used by other package managers.</p>",
        "id": 364429671,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686191991
    },
    {
        "content": "<p>But sure, I can not touch it -- I do not really care that much.</p>",
        "id": 364429770,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192044
    },
    {
        "content": "<p>As I said, the decapitalization was just designed to avoid a previous clash (and that particular transformation was chosen to fit with the usual naming convention for packages in other languages).</p>",
        "id": 364429812,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192076
    },
    {
        "content": "<p>I am generally open to style change suggestions. In designing Lake, I just did whatever seemed best to me at the time based on my knowledge of other language's package managers and there conventions.</p>",
        "id": 364430047,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192215
    },
    {
        "content": "<p>My only major constraints on suggestions is that I have to not think they look ugly and they have to work with the existing/planned features of Lake.</p>",
        "id": 364430119,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192254
    },
    {
        "content": "<p>in that case, do you mind if I put 4 spaces in all your function signatures? :D</p>",
        "id": 364430127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686192257
    },
    {
        "content": "<p>Yes, because as I told Sebastian, I do think that looks ugly. <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 364430165,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192297
    },
    {
        "content": "<p>Its hard for me to parse and I am the primary person who has to work with this code.</p>",
        "id": 364430211,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192330
    },
    {
        "content": "<p>yeah, I was going to say that this</p>\n<blockquote>\n<p>I am generally open to style change suggestions.</p>\n</blockquote>\n<p>is basically the opposite of this</p>\n<blockquote>\n<p>I have to not think they look ugly</p>\n</blockquote>",
        "id": 364430228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686192351
    },
    {
        "content": "<p>obviously you think all styles except your own are ugly</p>",
        "id": 364430304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686192374
    },
    {
        "content": "<p>There is a wide range of things that I do not think look ugly. I am happy to support anything (even if I think it looks ugly) and am willing to recommend, mandate, or use anything that I do not think is ugly.</p>",
        "id": 364430354,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364430211\">said</a>:</p>\n<blockquote>\n<p>I am the primary person who has to work with this code.</p>\n</blockquote>\n<p>As you know, I would like to change this</p>",
        "id": 364430377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686192440
    },
    {
        "content": "<p>That is actually news to me.</p>",
        "id": 364430402,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192468
    },
    {
        "content": "<p>What do you mean by that? Do you want to contribute or do you want someone else to take over the project? I am confused.</p>",
        "id": 364430480,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192508
    },
    {
        "content": "<p>I want to distribute maintenance over multiple people who each feel relatively okay with making changes</p>",
        "id": 364430540,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686192566
    },
    {
        "content": "<p>Lake is an important project which affects many people, and I want some more consensus decision making and less \"I think this is the best way, let's assume everyone else does too\"</p>",
        "id": 364430982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686192880
    },
    {
        "content": "<p>I mean, that is pretty much everything in Lean is developed? If Leo likes it (and secondarily Sebastian likes it), it gets in Lean; if you like it, it gets in Std; If Gabriel likes it (and secondarily Wojciech likes it), it gets in the VSCode extension; and if I like it, it gets in Lake. There is some negotiation obviously, but that is the general rule.</p>",
        "id": 364431112,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686192967
    },
    {
        "content": "<p>you forgot one (big) project</p>",
        "id": 364431323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193132
    },
    {
        "content": "<p>Also, for Lake, it is not like there have been a whole lot of suggestions to the contrary. I have merged virtually every PR made to Lake.</p>",
        "id": 364431352,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193148
    },
    {
        "content": "<p>And I have yet to close an issue as <code>wontfix</code>.</p>",
        "id": 364431386,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364431323\">said</a>:</p>\n<blockquote>\n<p>you forgot one (big) project</p>\n</blockquote>\n<p>Mathlib is kind of a special case. Both because of its side and its target audience. It is still somewhat true though there as well. If the lead mathematicians and maintainers their don't like it, it doesn't get added. Hence its Classical focus as opposed to something else.</p>",
        "id": 364431563,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193279
    },
    {
        "content": "<p>It is also technically not part of the Lean infrastructure.</p>",
        "id": 364431651,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193327
    },
    {
        "content": "<p>but also, for my part and I think several of the other examples you gave, maintainers defer a significant amount of decision making to consensus. I try very hard not to push changes in opposition to the popular view and argue my case instead</p>",
        "id": 364431826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193452
    },
    {
        "content": "<p>What did you not like about that? Are you arguing mathlib is part of the Lean infrastructure? It is undoubtedly a key (and probably the key) component of the ecosystem, but that is not the same as being part of the infrastructure.</p>",
        "id": 364431851,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193482
    },
    {
        "content": "<p>If you think it doesn't act as infrastructure you aren't paying attention</p>",
        "id": 364431934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193538
    },
    {
        "content": "<p>I am confused. Maybe you and I have a different definition of infrastructure?</p>",
        "id": 364432007,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193578
    },
    {
        "content": "<p>maybe you don't realize what is in mathlib</p>",
        "id": 364432013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193588
    },
    {
        "content": "<p><code>lake exe cache</code> is literally an implementation of a missing feature in lake</p>",
        "id": 364432081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364431826\">said</a>:</p>\n<blockquote>\n<p>I try very hard not to push changes in opposition to the popular view and argue my case instead</p>\n</blockquote>\n<p>I do too. Again, I have yet to have a feature suggestion I have rejected.</p>",
        "id": 364432162,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193685
    },
    {
        "content": "<p>the mathlib tactic library is more comprehensive than lean core and std combined</p>",
        "id": 364432166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364432081\">said</a>:</p>\n<blockquote>\n<p><code>lake exe cache</code> is literally an implementation of a missing feature in lake</p>\n</blockquote>\n<p>That feature exists, it is called <code>lake upload</code>. You simply cannot feasibly use it because Mathlib updates too often.</p>",
        "id": 364432206,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193727
    },
    {
        "content": "<p>And I cannot implement <code>cache get</code> in Lake because I do not have a general repository to store builds of arbitrary packages in.</p>",
        "id": 364432248,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193763
    },
    {
        "content": "<p>right, you aren't meeting people where they are so they have to write a thing on the side</p>",
        "id": 364432253,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193768
    },
    {
        "content": "<p>gosh, that almost sounds like infrastructure</p>",
        "id": 364432337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193812
    },
    {
        "content": "<p><code>cache get</code> uses mathlib's proprietary azure instance. That does not work as a general Lake feature.</p>",
        "id": 364432352,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193827
    },
    {
        "content": "<p>it is configurable</p>",
        "id": 364432374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193844
    },
    {
        "content": "<p>also I don't think that's what proprietary means</p>",
        "id": 364432392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364432337\">said</a>:</p>\n<blockquote>\n<p>gosh, that almost sounds like infrastructure</p>\n</blockquote>\n<p>Just because LLVM has its own infrastructure does not make it part of the C++ infrastructure. The same is true for mathlib.</p>",
        "id": 364432429,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193905
    },
    {
        "content": "<p>somehow <code>cargo</code> does make use of <code>crates.io</code> \"proprietary\" infrastructure</p>",
        "id": 364432504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686193929
    },
    {
        "content": "<p><a href=\"http://crates.io\">crates.io</a> is owned by the Rust Foundation.</p>",
        "id": 364432538,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686193969
    },
    {
        "content": "<p>It is certainly the hope that we will have an analogous service eventually but we currently do not have it.</p>",
        "id": 364432577,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194000
    },
    {
        "content": "<p>we do have the service, we don't have the foundation</p>",
        "id": 364432588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194015
    },
    {
        "content": "<p>Also, I should note that mathlib went and did its own thing without attempting to integrate it with Lake. So, I am not sure how I caused a problem there.</p>",
        "id": 364432676,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194061
    },
    {
        "content": "<p>because you make it <em>very clear</em> what your opinions are and how interested you would be in PRs that go against those opinions</p>",
        "id": 364432713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364432588\">said</a>:</p>\n<blockquote>\n<p>we do have the service, we don't have the foundation</p>\n</blockquote>\n<p>Yes, and I (and everyone else) would need to be able to upload to that service to support it in Lake, which no outside the mathlib maintainers can currently do.</p>",
        "id": 364432759,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194139
    },
    {
        "content": "<p>you have already more or less said that <code>lake exe cache</code> would not make it into lake as it currently exists</p>",
        "id": 364432782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194158
    },
    {
        "content": "<p>and yet, there are conferences coming up, people want to distribute lean now and what are they going to do?</p>",
        "id": 364432845,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194179
    },
    {
        "content": "<p>I would love it to be part of Lake. I just, personally, don't see how it could. If you can figure it out, I would be all ears.</p>",
        "id": 364432855,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194194
    },
    {
        "content": "<p>simple, put it in lake as is and work out how to generalize later</p>",
        "id": 364432881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364432713\">said</a>:</p>\n<blockquote>\n<p>because you make it <em>very clear</em> what your opinions are and how interested you would be in PRs that go against those opinions</p>\n</blockquote>\n<p>If that is the case, I am apparently bad at communication. I am happy to have PRs or RFCs or whatever to address any deficiencies.</p>",
        "id": 364433044,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364432881\">said</a>:</p>\n<blockquote>\n<p>simple, put it in lake as is and work out how to generalize later</p>\n</blockquote>\n<p>I do not have the keys. I cannot test it. That would be irresponsible. Secondly, if it only works for mathlib that will be extremely confusing to anyone not using mathlib.</p>",
        "id": 364433081,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194401
    },
    {
        "content": "<p>I am happy to add the functionality with a configurable server that mathlib can set to its current one. But I still need a way to  test that it works.</p>",
        "id": 364433199,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194467
    },
    {
        "content": "<p>I'm sure we can set something up. It doesn't just work for mathlib, although we might want to whitelist some projects to make it work for</p>",
        "id": 364433204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194475
    },
    {
        "content": "<p>I don't think it would be a problem to have the keys in lake CI too if necessary, although I doubt it would be</p>",
        "id": 364433311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194569
    },
    {
        "content": "<p>See, that is what I would like to hear. It seems to me that you have just assumed I am nonresponsive without testing to see if that hypothesis was true.</p>",
        "id": 364433315,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194575
    },
    {
        "content": "<p>okay, I'm working on a PR to delete all the monads from lake, we'll see how it goes :)</p>",
        "id": 364433354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686194619
    },
    {
        "content": "<p>Obviously, that would need an RFC before a PR (just like it would on Lean).</p>",
        "id": 364433432,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194654
    },
    {
        "content": "<p>Which is kind of my point, Leo is vocally more closed to PRs than I am and yet you seem to have assumed I am more opposed to them. I am very confused as to how that happened.</p>",
        "id": 364433508,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194717
    },
    {
        "content": "<p>I will fully admit there are many things about Lake's codebase that could use improvement. But I currently work on Lake for free, so I tend to prioritize bug fixing, PR reviews, and heavily demanded requests when I have time. Or, if I happen to be in the mood to work on Lake for fun, adding things that I want to it.</p>",
        "id": 364433816,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686194916
    },
    {
        "content": "<p>Right, that's because it's a one-man show and why I want to diversify the maintainership</p>",
        "id": 364434093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686195121
    },
    {
        "content": "<p>Why Lake in particular? Couldn't you have the same objection to the Lean core itself?</p>",
        "id": 364434167,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686195158
    },
    {
        "content": "<p>Also, I am curious what you are hoping to accomplish. I would be happy to accept a RFC/PR dealing with any of the outstanding issues, so what exactly is it that you want addressed that requires a different approach?</p>",
        "id": 364434377,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686195320
    },
    {
        "content": "<p>Or does this just have to do with code style or something like that?</p>",
        "id": 364434471,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686195383
    },
    {
        "content": "<p>Do RFCs get resolved? The ones I can see on lake repo don't look too fruitful</p>",
        "id": 364434479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686195390
    },
    {
        "content": "<p>The only two RFCs currently on the issue board are related to <code>cache</code> and appear to have been dropped for that instead of proceeding with the discussion. The were two outstanding points: 1) the fact that non-mathlib maintainers do not have access to the storage and 2) and an issue raised by Gabriel about how to handle dependencies.</p>",
        "id": 364434840,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686195711
    },
    {
        "content": "<p>There was also the question about OS/architecture independent hashing, which my last comment on was expressing acceptance of a mentioned solution.</p>",
        "id": 364434967,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686195791
    },
    {
        "content": "<p>can you elaborate on the problem with (1)?</p>",
        "id": 364434972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686195793
    },
    {
        "content": "<p>More precisely, no one pushes to the storage except mathlib4 CI, for which CMU is donating some machines because it would be too much for GH actions</p>",
        "id": 364435119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686195918
    },
    {
        "content": "<p>the situation is pretty similar for <a href=\"http://crates.io\">crates.io</a>: it is run by foundation money and is maintained by small team but any <code>cargo</code> can connect to it</p>",
        "id": 364435258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196030
    },
    {
        "content": "<p>we could make it work with a different server, but that would still require setting up a server just for testing</p>",
        "id": 364435341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196084
    },
    {
        "content": "<p>There are two problems: 1) the storage needs to be accessible for testing the Lake code and 2) general end users need to have some direction on how to use this feature for their own projects</p>",
        "id": 364435346,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196090
    },
    {
        "content": "<p>If it only works for mathlib, then it makes sense to leave it in mathlib.</p>",
        "id": 364435365,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196106
    },
    {
        "content": "<p>it's really not that hard to make it work with another server, it's just a URL</p>",
        "id": 364435396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196135
    },
    {
        "content": "<p>One thing I would suggest on that front is hooking the <code>lake exe cache get</code> into the standard build process for mathlib, which is already possible through <code>extraDepTargets</code>.</p>",
        "id": 364435458,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196185
    },
    {
        "content": "<p>It is also worth noting that Arthur's RFC was not just cache, but also a unified store for packages (so that the files were not downloaded to each project).</p>",
        "id": 364435597,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196270
    },
    {
        "content": "<p>yes, I agree with both points</p>",
        "id": 364435625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196298
    },
    {
        "content": "<p>having a copy of mathlib in every project is kind of crazy right now</p>",
        "id": 364435699,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196324
    },
    {
        "content": "<p>Gabriel's comments were largely critical of that idea, because it is unlikely for package versions and configurations to match across projects.</p>",
        "id": 364435757,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196378
    },
    {
        "content": "<p><code>lake exe cache</code> doesn't have a big issue with that, because it hashes all the relevant dependencies, including the lean version</p>",
        "id": 364435793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196414
    },
    {
        "content": "<p>worst case scenario you don't get sharing, which is the status quo</p>",
        "id": 364435808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196428
    },
    {
        "content": "<p>Yeah, those critiques do not apply to <code>cache</code>.</p>",
        "id": 364435894,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196474
    },
    {
        "content": "<p>He did, however, note that in the general sense for packages, there is a significant trade-off right now between hashing and scalability and he was not sure it was solvable at the moment (due to the very discrete nature of Lean versioning).</p>",
        "id": 364436045,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364435458\">said</a>:</p>\n<blockquote>\n<p>One thing I would suggest on that front is hooking the <code>lake exe cache get</code> into the standard build process for mathlib, which is already possible through <code>extraDepTargets</code>.</p>\n</blockquote>\n<p>On this point, couldn't the mathlib lakefile just declare the cache server URL? You don't have to run <code>cache get</code> until after you have parsed the lakefile anyway</p>",
        "id": 364436076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196608
    },
    {
        "content": "<p>Of course,, incorporating cache is easy. The question is whether the current version is actually useful for anyone out of mathlib.  If not, this could actually hurt mathlib as and changes to the caching algorithm would require PRs to Lake/Lean and thus not enable the same kind of speedy changes mathlib is used to.</p>",
        "id": 364436275,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196739
    },
    {
        "content": "<p>That is why my current suggestion for improvement would be to just incorporate it into mathlib's build itself using <code>extraDepTargets</code>.</p>",
        "id": 364436320,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196777
    },
    {
        "content": "<p>Once we have a general repository for packages then I think merging it with Lake would be a good idea.</p>",
        "id": 364436431,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196822
    },
    {
        "content": "<blockquote>\n<p>The question is whether the current version is actually useful for anyone out of mathlib.</p>\n</blockquote>\n<p>Well, std is also being cached and lots of non-mathlib projects use std</p>",
        "id": 364436690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686196944
    },
    {
        "content": "<p>Overall, my last comment on the cache/store RFC is this <a href=\"https://github.com/leanprover/lake/issues/153#issuecomment-1421298503\">one</a>, which did three things: 1) summarize Gabriel's objections related to likely cache misses and ask for further input, 2) accept a version of his suggestion regarding hashing, and 3) note the storage issue.</p>",
        "id": 364436753,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686196995
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364436690\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The question is whether the current version is actually useful for anyone out of mathlib.</p>\n</blockquote>\n<p>Well, std is also being cached and lots of non-mathlib projects use std</p>\n</blockquote>\n<p>True, but unless I am mistaken, Std has pretty fast build times, correct?</p>",
        "id": 364436897,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197073
    },
    {
        "content": "<p>(Hence why cache is in mathlib not Std?)</p>",
        "id": 364436925,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197096
    },
    {
        "content": "<p>pretty fast, comparatively, but as pointed out in the RFC it's still nontrivial especially if you have many projects depending on it</p>",
        "id": 364436968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197126
    },
    {
        "content": "<p>I will also admit that I have not fully read <code>cache</code>'s code so I am not sure what it is doing different from the stuff Lake already supports.</p>",
        "id": 364437004,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197158
    },
    {
        "content": "<p>it collects the unbuilt dependencies of the project, downloads them using <code>curl --parallel</code> and unzips them</p>",
        "id": 364437125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364436968\">said</a>:</p>\n<blockquote>\n<p>pretty fast, comparatively, but as pointed out in the RFC it's still nontrivial especially if you have many projects depending on it</p>\n</blockquote>\n<p>How would the number of projects effect build times? The RFC I believe was talking about storage (for the unified store), which Gabriel rather solidly shot down (at least that was my impression).</p>",
        "id": 364437142,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197235
    },
    {
        "content": "<p>If you have 3 projects depending on std that's 3 builds</p>",
        "id": 364437175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197268
    },
    {
        "content": "<p>even if they use the same version of everything</p>",
        "id": 364437202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197282
    },
    {
        "content": "<p>But I imagine you are not building them in sequence?</p>",
        "id": 364437243,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364437202\">said</a>:</p>\n<blockquote>\n<p>even if they use the same version of everything</p>\n</blockquote>\n<p>Gabriel's main point was that this is highly unlikely.</p>",
        "id": 364437268,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197321
    },
    {
        "content": "<p>well it's not like anything helps us ensure it</p>",
        "id": 364437275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197337
    },
    {
        "content": "<p>it's not very desirable to have many different versions of lean simultaneously</p>",
        "id": 364437298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197353
    },
    {
        "content": "<p>right now the best we can do is try to update the world in waves</p>",
        "id": 364437325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197386
    },
    {
        "content": "<p>And yet that is the way Lean currently works (which is not a result of Lake).</p>",
        "id": 364437333,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197392
    },
    {
        "content": "<p>One thing that we could do is put the package store inside the <code>.elan/today-toolchain</code> directory</p>",
        "id": 364437498,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197506
    },
    {
        "content": "<p>Gabriel's point was packages other than mathlib would not likely be updated in this manner so the caching was likely to miss if they all were on different versions of Lean (which is likely for everything except mathlib).</p>",
        "id": 364437502,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197509
    },
    {
        "content": "<p>then if you wipe the elan store the packages go with it</p>",
        "id": 364437573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197528
    },
    {
        "content": "<p>those build artifacts aren't useful for other versions anyway</p>",
        "id": 364437606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197547
    },
    {
        "content": "<p>Yeah, that is how I would do it.</p>",
        "id": 364437607,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197547
    },
    {
        "content": "<p>if someone is maintaining 3+ projects they are probably also doing this dance</p>",
        "id": 364437659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197583
    },
    {
        "content": "<p>maybe not on the same cadence as mathlib</p>",
        "id": 364437675,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197596
    },
    {
        "content": "<p>And I think that could reasonably work right now. Store each package with its commit id and first trying symlinking from the package store before cloning. That would help with deduplication within a given toolchain.</p>",
        "id": 364437696,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197617
    },
    {
        "content": "<p>Gabriel's point is that it would be hard to have cloud builds for these packages, though. As the each package is likely to be built on a different nightly and only store the cloud build for that nightly (e.g., via its CI). Then, a package which depends on those disparate package is likely to be on a different nightly (or at least a different nightly from some of them) and thus require rebuilding all the disparately-versioned packages on its nightly.</p>",
        "id": 364437954,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197774
    },
    {
        "content": "<p>And that is just the Lean version, there is also the OS, architecture, configuration options, build flags, and other things to think of that could cause a rebuild for more CS-oriented packages (which Gabriel also brought up).</p>",
        "id": 364438008,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364437954\">said</a>:</p>\n<blockquote>\n<p>Gabriel's point is that it would be hard to have cloud builds for these packages, though. As the each package is likely to be built on a different nightly and only store the cloud build for that nightly (e.g., via its CI).</p>\n</blockquote>\n<p><code>cache</code> doesn't do that, it stores builds for lots of commits on lots of nightlies</p>",
        "id": 364438067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197866
    },
    {
        "content": "<p>But just the nightlies mathlib has been updated to, right?</p>",
        "id": 364438146,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197917
    },
    {
        "content": "<p>yes, mathlib has a <code>lean-toolchain</code> file after all</p>",
        "id": 364438183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197953
    },
    {
        "content": "<p>His point was most other packages would only update its nightly infrequently so the space of nightlies with a cloud build for such packages would be sparse.</p>",
        "id": 364438187,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686197961
    },
    {
        "content": "<p>okay, so use those nightlies</p>",
        "id": 364438212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686197988
    },
    {
        "content": "<p>that's what we recommend for users in the readme</p>",
        "id": 364438278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686198007
    },
    {
        "content": "<p>Again, the problem is that for package which depends on multiple packages with different sparse nightly builds, it is unlikely there will be significant overlap, so most of them will have to rebuilt no matter what nightly is picked.</p>",
        "id": 364438340,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686198065
    },
    {
        "content": "<p>sure, but if, say, one of those packages is 10x the size of the others, you know which nightly to use</p>",
        "id": 364438428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686198124
    },
    {
        "content": "<p>Mathlib avoids this because it uploads its entire chain of dependencies and most packages which depend on it only depend on it and not other packages with conflicting nightlies.</p>",
        "id": 364438450,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686198144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/lake.20new.20lean-data/near/364438428\">said</a>:</p>\n<blockquote>\n<p>sure, but if, say, one of those packages is 10x the size of the others, you know which nightly to use</p>\n</blockquote>\n<p>The discussion there was not just for packages which depend on mathlib. Also, it can be the case the end user package use a newer nightly than its dependencies.</p>",
        "id": 364438486,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686198180
    },
    {
        "content": "<p>I don't want to interrupt the show here, but chiming in on something mentioned above --- I find it confusing and annoying that <code>mathlib</code> is lowercase in <code>lakefile.lean</code> and <code>Mathlib</code> everywhere else, and I would prefer if this discrepancy were compulsorily removed (i.e. always using <code>Mathlib</code>).</p>",
        "id": 364438517,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686198201
    },
    {
        "content": "<p>The question is... is mathlib a type? Or just the conjunction of all its theorems?</p>",
        "id": 364438633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686198259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Ah, so you fit with Mario here. I am curious, do you feel similarly about the mathlib GitHub repository? Should its name also be capitalized?</p>",
        "id": 364439631,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686199002
    },
    {
        "content": "<p>Interesting! I hadn't thought of that one, and while is seems strange at first, consistency sounds great! :-)</p>",
        "id": 364439699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686199055
    },
    {
        "content": "<p>So you would go with uppercase everywhere. That certainly does have the advantage of consistency.</p>",
        "id": 364439813,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686199128
    },
    {
        "content": "<p>Note that it is perfectly possible to adopt that naming convention. Lake will work fine if the <code>mathlib</code> package is renamed <code>Mathlib</code> (other than downstream <code>require</code> statement also needing to change the name).</p>",
        "id": 364439880,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686199185
    },
    {
        "content": "<p>I was thinking about that as well, and I personally prefer keeping the repo lowercase, as well as the name of the folder in which I store the mathlib4 repo</p>",
        "id": 364440174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686199354
    },
    {
        "content": "<p>And for me, since I think of the folder and repo name as the name of the package, it makes sense for the package name in the lakefile to match them.</p>",
        "id": 364440346,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686199463
    },
    {
        "content": "<p>Mario successfully convinced me to leave the package name alone in <code>lake new</code>, so everyone will be able use the naming convention they want now without Lake's input on the topic.</p>",
        "id": 364440431,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686199535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I like your suggestion of supporting / using strings and/or simple names for packages (and possibly targets) to avoid the illegal name debacle. However, I have been attempting to implement his and discovered that doing this would require a large refactor than expected and/or break things (it is not currently easy to prohibit a package / target from acquiring a non-simple name and breaking things). Thus, I am going use <code>toName</code> defaulting to <code>mkSimple</code> as a stop-gap measure for now.</p>",
        "id": 364442417,
        "sender_full_name": "Mac Malone",
        "timestamp": 1686200663
    },
    {
        "content": "<p>where are target names used, other than <code>lake build</code>?</p>",
        "id": 364967069,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686343914
    },
    {
        "content": "<p>i was skimming the earlier convo pretty fast so I apologize if I missed that</p>",
        "id": 364967203,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1686343948
    },
    {
        "content": "<p>e.g. <code>lake exe cache get</code>, <code>cache</code> is a taregt.</p>",
        "id": 364987360,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686352810
    }
]