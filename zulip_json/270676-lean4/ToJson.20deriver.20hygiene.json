[
    {
        "content": "<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean.Data.Json</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AsFunc</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">oneOf</span>   <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">self</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Lean.FromJson</span><span class=\"o\">,</span> <span class=\"n\">Lean.ToJson</span>\n</code></pre></div>\n<p>only works if the parameter is named self. Is this a hygiene issue in the implementation? I tried to figure out where it's coming from in the metacode but couldn't figure it out.</p>",
        "id": 393809273,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695937417
    },
    {
        "content": "<p>Note that names matter for a {To, From}Json implementation</p>",
        "id": 393809378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695937465
    },
    {
        "content": "<p>but <em>type</em> parameter names...?</p>",
        "id": 393809453,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695937522
    },
    {
        "content": "<p>It's in the constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AsFunc</span> <span class=\"o\">(</span><span class=\"n\">sel</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">oneOf</span>   <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">sel</span><span class=\"o\">)</span>\n<span class=\"c1\">-- AsFunc.oneOf.{u_1} {sel : Type u_1} (self : AsFunc sel) : Option (Array sel)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">AsFunc</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">oneOf</span>   <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">self</span><span class=\"o\">)</span>\n<span class=\"c1\">-- AsFunc.oneOf.{u_1} {self : Type u_1} (self : AsFunc self) : Option (Array self)</span>\n</code></pre></div>",
        "id": 393810500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695938082
    },
    {
        "content": "<p>here's a replication without the deriving handler:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">AsFunc</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">oneOf</span>   <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">self</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">self</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ToJson</span> <span class=\"n\">self</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">AsFunc</span> <span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Json</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Json.mkObj</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">List.join</span> <span class=\"o\">[[(</span><span class=\"s2\">\"oneOf\"</span><span class=\"o\">,</span> <span class=\"n\">toJson</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">oneOf</span><span class=\"o\">)]]</span>\n                                          <span class=\"c1\">-- ^^^^^^^^^</span>\n<span class=\"c1\">-- application type mismatch</span>\n<span class=\"c1\">--   @AsFunc.oneOf x</span>\n<span class=\"c1\">-- argument</span>\n<span class=\"c1\">--   x</span>\n<span class=\"c1\">-- has type</span>\n<span class=\"c1\">--   AsFunc self : Type ?u.274</span>\n<span class=\"c1\">-- but is expected to have type</span>\n<span class=\"c1\">--   Type ?u.307 : Type (?u.307 + 1)</span>\n</code></pre></div>",
        "id": 393811106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695938420
    },
    {
        "content": "<p>minimized:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">self</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x.val</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Foo</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Foo.val</span> <span class=\"n\">x</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 393811399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695938591
    },
    {
        "content": "<p>I guess according to <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/App.lean#L566\">the app elaborator</a> when you have a projection of a structure, <code>x.val</code> is meant to be equivalent to <code>Foo.val (self := x)</code>.</p>",
        "id": 393811719,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1695938814
    },
    {
        "content": "<p><code>Foo.val (self := x)</code> also fails exactly when the parameter is named <code>self</code>, which makes sense - the reference is ambiguous in that case. But it seems that <code>x.val</code> unfolds to effectively <code>Foo.val (self := x)</code>, leading to this issue</p>",
        "id": 393811720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695938814
    },
    {
        "content": "<p>ahhh, I see.</p>",
        "id": 393812928,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695939466
    },
    {
        "content": "<p>a linter for ambiguous arg names would be pretty nice <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 393813059,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1695939529
    },
    {
        "content": "<p>I think the name resolution should work from back to front though, generally later arguments shadow earlier ones not the other way around</p>",
        "id": 393813448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695939785
    }
]