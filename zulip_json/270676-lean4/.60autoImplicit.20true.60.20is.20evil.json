[
    {
        "content": "<p>Any chance of convincing y'all that setting <code>autoImplicit</code> to <code>true</code> by default is a big mistake? It's a horrible, horrible idea. Any design feature which just silently accepts typos is a mistake.</p>",
        "id": 355142480,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683032294
    },
    {
        "content": "<p>previous discussion: <a href=\"#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.5BRFC.5D.20Make.20autoImplicit.20default.20to.20false.20on.20non-greek</a></p>",
        "id": 355143317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032468
    },
    {
        "content": "<p>Oh well, we'll have to live with mathematicians. They have no idea how to make things organized. The silliness with \"greek letters\" is even crazier. I give up.</p>",
        "id": 355144052,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683032634
    },
    {
        "content": "<p>you can turn on/off options globally in your lakefile if you take universal umbrage to the feature</p>",
        "id": 355144315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032684
    },
    {
        "content": "<p>I think it is impossible for any sufficiently large language to not have a few situations like that</p>",
        "id": 355144474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032727
    },
    {
        "content": "<p>Yeah, but in 2023 a language need not make rookie mistakes from the 1950's.</p>",
        "id": 355144596,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683032756
    },
    {
        "content": "<p>but greek aside there is a lot of other discussion on that issue, it is a complicated thing</p>",
        "id": 355144789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032799
    },
    {
        "content": "<p>Where precisely would I set an option project-wise?</p>",
        "id": 355144819,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683032806
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MyProject</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DautoImplicit=false\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 355145141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032862
    },
    {
        "content": "<p>(The Greek stuff is going to be just wonderful when people start formalizing Euclidean geometry.) And what are actual living Greeks going to do? Use Cyrilic?</p>",
        "id": 355145146,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683032864
    },
    {
        "content": "<p>actually you might want to set <code>moreServerArgs</code> as well, like this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"n\">std</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DwarningAsError=true\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-Dlinter.missingDocs=true\"</span><span class=\"o\">]</span>\n  <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-Dlinter.missingDocs=true\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 355145527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032964
    },
    {
        "content": "<p>one controls the behavior in server mode (that one is probably more important in this case) and the other one controls console / CI use</p>",
        "id": 355145709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683032996
    },
    {
        "content": "<p>The first thing I do when porting any file is to turn this option off, but I've not written enough Lean 4 code of my own to have a judgement about whether it's confusing in general.</p>",
        "id": 355146744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683033203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355144052\">said</a>:</p>\n<blockquote>\n<p>Oh well, we'll have to live with mathematicians.</p>\n</blockquote>\n<p>I don't think this feature was requested by the mathematician users of Lean</p>",
        "id": 355154250,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683034740
    },
    {
        "content": "<blockquote>\n<p>I don't think this feature was requested by the mathematician users of Lean</p>\n</blockquote>\n<p>Really? Let's name some names <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 355157010,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683035316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355144596\">said</a>:</p>\n<blockquote>\n<p>Yeah, but in 2023 a language need not make rookie mistakes from the 1950's.</p>\n</blockquote>\n<p>I'm not sure that's a fair assessment, unless you're referring to Fortan's implicit feature. I don't know of a single language from back then that generates new arguments like Lean's auto implicits (after all, dependent types are relatively new in programming languages).</p>\n<p>That said, I do frequently find auto-implicits to be annoying when I make a typo, and the saving grace is that editor support gives hints as to what is an auto-implicit.</p>\n<p>Code with auto-implicits can look nice; maybe there's a way to aim this footgun slightly away from our feet. I wonder if an <code>autoImplicits</code> command, where you name variables that can be autoimplicits in your file, would make them less annoying?</p>",
        "id": 355158311,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683035573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355157010\">said</a>:</p>\n<blockquote>\n<p>Really? Let's name some names <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>\n<p>Well, the very first sentence of the post Mario links to says</p>\n<blockquote>\n<p>the documentation says \"we love this feature and use it extensively when implementing Lean\"</p>\n</blockquote>\n<p>I think \"implementing Lean\" sounds like a CS task not a mathemtical one!</p>",
        "id": 355158544,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683035630
    },
    {
        "content": "<p>Yeah, I thought this was a Lean 4 core feature, and it seemed to me that many mathematicians were bothered by it when they first encountered it during porting. (Here I'm not making any claim on the value or anti-value of this feature)</p>",
        "id": 355159051,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683035739
    },
    {
        "content": "<p>ML-family languages all have auto-implicits for type variables, but type variables are of a different sort than normal variables (they're more like universe level variables) so it's not quite so much of a footgun in these.</p>",
        "id": 355159424,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683035823
    },
    {
        "content": "<ol>\n<li>Before starting to use Lean, I never saw anyone use lower case Greek letters to denote \"ambient sets\" (aka types)</li>\n<li>I think there is great potential in using auto-implicits. As Kyle says, we should try to point the footgun away from our feet. But I really like the idea of writing <code>Module R M</code> and having Lean fill in all the details that are missing (which is something that would go a bit beyond current auto-implicits).</li>\n<li><span class=\"user-mention\" data-user-id=\"345260\">@Andrej Bauer</span> In your talk on \"invisible mathematics\" aren't you telling your audience that a good mathematical vernacular needs support for auto-implicits? Your example just starts talking about <code>f : V -&gt; W</code> without mentioning the field of scalars, and you point that out in your talk... So I would expect you to <span aria-label=\"dancing\" class=\"emoji emoji-1f57a\" role=\"img\" title=\"dancing\">:dancing:</span> and <span aria-label=\"man cartwheeling\" class=\"emoji emoji-1f938-200d-2642\" role=\"img\" title=\"man cartwheeling\">:man_cartwheeling:</span> when seeing this feature <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></li>\n</ol>",
        "id": 355160063,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1683035981
    },
    {
        "content": "<p>The real issue here, one that I have been puzzling over for a while, is whether we actually need two different environments: one  for programming the backend, and one for using the frontend. LaTeX is like that, for example.</p>",
        "id": 355160871,
        "sender_full_name": "Andrej Bauer",
        "timestamp": 1683036154
    },
    {
        "content": "<p>I also have mixed feelings about autoimplicits. One thing that would make it much better in my opinion is if it was much more obvious when an auto implicit is introduced with some very obvious syntax highlighting, for example.</p>",
        "id": 355163501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1683036716
    },
    {
        "content": "<p>The autoimplicits freak me out as well, but I don't have enough experience to make a qualified opinion.</p>",
        "id": 355164936,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683037007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355159424\">said</a>:</p>\n<blockquote>\n<p>ML-family languages all have auto-implicits for type variables, but type variables are of a different sort than normal variables (they're more like universe level variables) so it's not quite so much of a footgun in these.</p>\n</blockquote>\n<p>The binding site of type variables eventually becomes a confusion/issue for students learning ML, but it tends to make intuitive sense to students for the first 2 months of the semester :)</p>",
        "id": 355167396,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1683037489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355158311\">said</a>:</p>\n<blockquote>\n<p>I wonder if an <code>autoImplicits</code> command, where you name variables that can be autoimplicits in your file, would make them less annoying?</p>\n</blockquote>\n<p>Would <code>autoImplicits a b c d</code> be meaningfully different to <code>variable (a b c d : _)</code>?</p>",
        "id": 355175146,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683038973
    },
    {
        "content": "<p>Is the latter even valid? That is, will Lean actually assign those metavariables eventually?</p>",
        "id": 355187852,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1683041481
    },
    {
        "content": "<p>No, <code>variable {x : _}</code> isn't valid (\"failed to infer binder type\"). This error doesn't appear unless you use <code>x</code> somewhere that doesn't constrain the type, like <code>example : id x = x := rfl</code> (though <code>example : id (x : Nat) = x := rfl</code> is ok). I guess autoimplicits are able to introduce fresh type variables for remaining metavariables, so the first example becomes ok without the <code>variable</code> declaration.</p>",
        "id": 355190235,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683041973
    },
    {
        "content": "<p><code>autoImplicits</code> would also be different from <code>variable</code> in that these names would only appear in the local context if they're actually used, which would reduce some local context clutter.</p>",
        "id": 355191021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1683042119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355145141\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MyProject</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DautoImplicit=false\"</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It works (i.e., it makes declarations that depend on an auto-implicit argument fail) when I run <code>lake build</code> on a command line, but it still builds successfully in VS Code (even thought it shouldn't). Why?</p>",
        "id": 355211309,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683046532
    },
    {
        "content": "<p>Because you didn't read Mario's follow-up message</p>",
        "id": 355212875,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683046867
    },
    {
        "content": "<p>Is it now set correctly?<br>\n<a href=\"https://github.com/madvorak/lean-mam/blob/main/lakefile.lean\">https://github.com/madvorak/lean-mam/blob/main/lakefile.lean</a><br>\nDisabling autoImplicit went right, but I want to make sure I didn't damage <code>lakefile.lean</code> in other ways.</p>",
        "id": 355215288,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683047424
    },
    {
        "content": "<p>The reason for my worry is that the second example by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> puts <code>moreLeanArgs</code> after package but I put it after lean_lib. Is there any difference?</p>",
        "id": 355248124,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683055795
    },
    {
        "content": "<p>The one I think you didn't read is the one that also sets <code>moreServerArgs</code></p>",
        "id": 355257427,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1683058900
    },
    {
        "content": "<p>For what it is worth, I like auto-implicits as they are, and for my personal use would not want to add any barrier to using them. Certainly in teaching you would want to turn them off.</p>",
        "id": 355288116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1683073059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355257427\">said</a>:</p>\n<blockquote>\n<p>The one I think you didn't read is the one that also sets <code>moreServerArgs</code></p>\n</blockquote>\n<p>What is wrong with the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">package</span> <span class=\"bp\">«</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">mam</span><span class=\"bp\">»</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreServerArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DautoImplicit=false\"</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 355345473,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683099268
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417654\">Martin Dvořák</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355215288\">said</a>:</p>\n<blockquote>\n<p>Is it now set correctly?<br>\n<a href=\"https://github.com/madvorak/lean-mam/blob/main/lakefile.lean\">https://github.com/madvorak/lean-mam/blob/main/lakefile.lean</a><br>\nDisabling autoImplicit went right, but I want to make sure I didn't damage <code>lakefile.lean</code> in other ways.</p>\n</blockquote>\n<p>Since I am afraid I caused a misunderstanding, I'll try to make my question clear.<br>\nFrom the post I am referencing on, I haven't been asking \"how to disable autoïmplicit\".<br>\nI disabled autoïmplicit according to the two posts by <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> above and it worked (both for <code>lake build</code> and for VS Code).<br>\nFrom the post I am referencing on, I have been asking whether my <code>lakefile.lean</code> is correct overall, because I made some changes that I don't fully understand, which makes me afraid of side effects of those changes.</p>",
        "id": 355362788,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1683103737
    },
    {
        "content": "<p>Why not start another thread then?</p>",
        "id": 355372773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1683106052
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"345260\">Andrej Bauer</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355144596\">said</a>:</p>\n<blockquote>\n<p>Yeah, but in 2023 a language need not make rookie mistakes from the 1950's.</p>\n</blockquote>\n<p>I agree with this. I am stunned that that the old Visual Basic <code>Option Explicit</code> now needs to be written in Lean 4.</p>",
        "id": 367745712,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687206756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/355145141\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[default_target]</span>\n<span class=\"n\">lean_lib</span> <span class=\"n\">MyProject</span> <span class=\"n\">where</span>\n  <span class=\"n\">moreLeanArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-DautoImplicit=false\"</span><span class=\"o\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Can we add this to the <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean\">mathlib4 lakefile</a> ?</p>",
        "id": 367746902,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687207140
    },
    {
        "content": "<p>Would that turn off the <code>autoImplicit</code> feature, even in side VSCode?</p>",
        "id": 367746972,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1687207164
    },
    {
        "content": "<p>I think it's a really uncharitable take that auto-implicits are a misfeature from the 1950s. I've also been frustrated by them, and I do think their design needs more attention, but they don't need to be <a href=\"#narrow/stream/270676-lean4/topic/Undefined.20variables.20silently.20accepted/near/367745038\">\"nuked from orbit\"</a>. The Visual Basic comparison isn't very apt since that feature was that you could accidentally refer to undefined variables and they'd be initialized to a default value -- something completely undetectable. At least in Lean, I usually don't get too far without noticing the types are messed up, I slap my forehead, and move on.</p>\n<p>If you're familiar with Haskell or ML, then you'd know that these languages have a sort of auto-implicits for type variables. It's convenient being able to automatically bind any remaining free variables as implicit universal quantifiers in these languages, and it would be nice if Lean could support this too, though in a way that isn't surprising.</p>",
        "id": 367753661,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687210092
    },
    {
        "content": "<p>A variation on something I was thinking about earlier in this thread would be a feature where you'd be able to write something like <code>autoImplicit {/a-z/ : _}</code> to be able to specify auto-implicits for names that match certain patterns (like here, a single latin letter). These would be like <code>variable</code>, but they don't get added to the context unless they're actually mentioned, and like the current auto-implicits design they'd come <em>before</em> everything else.</p>\n<p>Something nice about this is you could have <code>autoImplicit {m n : Nat}</code> for example to restrict how an auto-implicit is used. Another example, <code>autoImplicit {X Y Z : Type _}</code> could be useful for topological spaces.</p>",
        "id": 367754256,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687210383
    },
    {
        "content": "<p>Right now the huge problem (which has bitten me several times and is the reason I now start all files with <code>set_option autoImplicit false</code>) is that the system accepts typos in multiple-letter declaration names.</p>",
        "id": 367755337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687210959
    },
    {
        "content": "<p>I quite like <code>autoImplicit</code>, and would like to keep it! I could probably happily live with it restricted to one character identifiers, however.</p>",
        "id": 367757534,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687212295
    },
    {
        "content": "<p>Oh -- it seems this is already implemented! We just need <code>set_option relaxedAutoImplicit false</code>. This (according to docs, not tested) allows autoimplicits for single characters (lower case or greek only), optionally with following digits.</p>",
        "id": 367758062,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687212609
    },
    {
        "content": "<p>I would relax the lower case requirement, mathlib4 will certainly break there.</p>",
        "id": 367758096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687212631
    },
    {
        "content": "<p>But we can probably add some <code>variable</code> statements easily enough to cover the few files that will affect.</p>",
        "id": 367758145,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687212669
    },
    {
        "content": "<p>How urgently do people want this? I can turn this on in mathlib4 pretty quickly, I think. Ideally we would PR to lean4 to allow uppercase single letters in strict mode, as there is a lot of that in mathlib, but that may be too slow.</p>",
        "id": 367758454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687212857
    },
    {
        "content": "<p>I think it's pretty safe to turn this type of thing on during the port</p>",
        "id": 367759074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687213224
    },
    {
        "content": "<p>We can always become less strict later, it's hard to become more strict as that breaks code</p>",
        "id": 367759097,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687213240
    },
    {
        "content": "<p>I'm making a PR now. Every time I add a <code>variable {R}</code> I'm leaving a note about wanting to change how <code>relaxedAutoImplicit</code> works. I'll separately make a PR to lean4, and if that is eventually merged we can easily clean up.</p>",
        "id": 367759320,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687213376
    },
    {
        "content": "<p>Also, I've found at least one actual bug in mathlib4, with a nonsensical statement caused by autoImplicits!</p>",
        "id": 367759353,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687213400
    },
    {
        "content": "<p>The majority of the changes I'm having to make involve single letter uppercase variables.</p>",
        "id": 367759772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687213655
    },
    {
        "content": "<p>Yes, I want this now. Single character (latin + greek) autoimplicits are great, but I mostly agree with Oliver that multi-character ones are evil. I have run into many headaches during porting as a result of this (especially because they get <code>sorryAx</code>ed, and I may not find it until later)</p>",
        "id": 367759781,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687213666
    },
    {
        "content": "<p>Scott, is it possible to just write the option you want (copying code from Lean 4) and make it allow upper case? Then make a PR to Lean 4 for what we actually want.</p>",
        "id": 367759872,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687213708
    },
    {
        "content": "<p>If so, that seems simpler.</p>",
        "id": 367759910,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687213733
    },
    {
        "content": "<blockquote>\n<p>Every time I add a variable {R}</p>\n</blockquote>\n<p>for the sake of speedy merging, you could also just disable the option in the files that actually need it</p>",
        "id": 367759958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687213761
    },
    {
        "content": "<p>Another trick that Sebastian used to find autoImplicit bugs was to modify lean to print the name of each autoImplicit as it was inferred, and then take a look at the list to see if anything suspicious stands out (like a typo'd declaration name)</p>",
        "id": 367760863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214314
    },
    {
        "content": "<p>it would be nice to have this as a permanent feature we could enable via a debugging option</p>",
        "id": 367760891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214339
    },
    {
        "content": "<p>Why add this change to lean itself if it can be done for mathlib alone?</p>",
        "id": 367761042,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687214427
    },
    {
        "content": "<p>This is not a small change. Many other projects might be affected</p>",
        "id": 367761137,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687214497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, what change are you talking about?</p>",
        "id": 367761179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687214521
    },
    {
        "content": "<p>autoImplicit insertion is done by lean itself. Unless lean adds a hook for user-provided behavior it all has to be done upstream</p>",
        "id": 367761265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214550
    },
    {
        "content": "<p>For now I am just adding <code>variable {R}</code> (with a comment) for single character auto-implicits. If the Lean4 PR allowing upper case autoimplicits in strict mode is merged, we can remove these again.</p>",
        "id": 367761310,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687214583
    },
    {
        "content": "<p>even determining what variables are autoImplicits is not possible after the fact AFAIK (unless you just disable them and look for the red squigglies, which I think is what Scott is doing)</p>",
        "id": 367761336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214603
    },
    {
        "content": "<p>The PR to lean 4. From your message and Jireh's, I am guessing you are going to restrict autoimplicits to one character by default (with capital letters permitted)</p>",
        "id": 367761486,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687214693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, I'm pretty sure Scott is describing a PR to mathlib4 not lean4</p>",
        "id": 367761576,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687214759
    },
    {
        "content": "<p>FWIW the uppercase R was the reason why I campaigned to allow all identifiers as autoimplicits. (It used to be more restrictive.)</p>",
        "id": 367761732,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687214844
    },
    {
        "content": "<p>I would rather have this be a lint warning if anything, because I don't like that this causes pressure to make variables one letter long</p>",
        "id": 367761852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214910
    },
    {
        "content": "<p>It would be nice if \"single character\" includes things like <code>x'</code> and <code>h1</code> (i.e., allow primes and numbers afterwards).</p>",
        "id": 367761862,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687214920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367759320\">said</a>:</p>\n<blockquote>\n<p>I'll separately make a PR to lean4, and if that is eventually merged we can easily clean up.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <br>\nMaybe this only refers to a change in the behavior of relaxedAutoImplicit?</p>",
        "id": 367761867,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687214921
    },
    {
        "content": "<p>especially since this affects programming use too, not just mathlib</p>",
        "id": 367761884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214936
    },
    {
        "content": "<p>single letter identifiers are vilified in common programming practice</p>",
        "id": 367761933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687214964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367761933\">said</a>:</p>\n<blockquote>\n<p>single letter identifiers are vilified in common programming practice</p>\n</blockquote>\n<p>For good reason. I agree. This change will make life hard in programming.</p>",
        "id": 367761949,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687214976
    },
    {
        "content": "<p>Shreyas, I don't think the change you're worried about is the one being proposed against Lean 4</p>",
        "id": 367762270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687215128
    },
    {
        "content": "<p>My understanding is that the change to lean4 that <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is suggesting is that <em>in strict mode</em> (<code>relaxedAutoImplicit false</code>) instead of having <code>a</code> be legal but <code>A</code> be illegal, both <code>a</code> and <code>A</code> would be legal.</p>",
        "id": 367762353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687215185
    },
    {
        "content": "<p>The only change I am proposing is that with <code>autoImplicit true</code>, and <code>relaxedAutoImplicit false</code>, then upper case single letter identifiers are eligible as autoimplicits (along with lower case single letters and greek letters).</p>",
        "id": 367762363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215193
    },
    {
        "content": "<p>Because mathlib has sensibly decided to call rings <code>R</code> rather than <code>α</code>.</p>",
        "id": 367762408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215217
    },
    {
        "content": "<p>Now found 3 real bugs!</p>",
        "id": 367762688,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215364
    },
    {
        "content": "<p>Okay thanks for clarifying this :)</p>",
        "id": 367762836,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1687215473
    },
    {
        "content": "<p>I am finding lots of files where we should be using auto-implicits much more. :-)</p>",
        "id": 367763031,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215580
    },
    {
        "content": "<p>What's the symptom of that?</p>",
        "id": 367763554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687215803
    },
    {
        "content": "<p>Well, or just using <code>variable</code> would do...</p>",
        "id": 367763592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215831
    },
    {
        "content": "<p>Files with endless {X Y : ...} arguments for every lemma.</p>",
        "id": 367763645,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> In your proposal, could you <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367761862\">allow trailing primes and numbers</a> for strict auto-implicits too? I understand wanting to have a conservative proposal, but I don't think these would cause any additional surprise.</p>",
        "id": 367763651,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1687215855
    },
    {
        "content": "<p>Trailing numbers are already allowed, but primes are a great idea. Subscripts probably too.</p>",
        "id": 367763816,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215943
    },
    {
        "content": "<p>Pausing on this for a few hours, but hopefully will have PRs today.</p>",
        "id": 367763900,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687215966
    },
    {
        "content": "<blockquote>\n<p>Files with endless {X Y : ...} arguments for every lemma.</p>\n</blockquote>\n<p>Sometimes there's a semantic difference though, along the lines of the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 367765323,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687216888
    },
    {
        "content": "<p>Another interpretation is that this is actually a symptom that things aren't sectioned very well</p>",
        "id": 367765811,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687217267
    },
    {
        "content": "<p>With the argument being that if you section things correctly, you almost never end up in the situation where you find that your lemmas are in the wrong order and you can't prove a complex result in terms of a simple one</p>",
        "id": 367765891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687217315
    },
    {
        "content": "<p>I guess that embeds the (mostly true) assumption that we always prove complex statements by invoking lemmas needing weaker typeclasses with forgetful typeclass assumptions, rather than adjoining elements to the less-constrained type and using the complex lemma to prove the one with weaker constraints.</p>",
        "id": 367765990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687217402
    },
    {
        "content": "<p>well no, you would have exactly the same issue if the instances were the other way around</p>",
        "id": 367766128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687217486
    },
    {
        "content": "<p>because you don't want <code>foo</code> to take both a <code>PartialOrder</code> and <code>DistribLattice</code> hypothesis</p>",
        "id": 367766160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687217515
    },
    {
        "content": "<p>What I mean is that we often have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">DistribLattice</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>where we probably meant</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">section</span> <span class=\"n\">PartialOrder</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">PartialOrder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span>  <span class=\"o\">:</span> <span class=\"bp\">...</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">DistribLattice</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DistribLattice</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 367766479,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687217678
    },
    {
        "content": "<p>Where the latter is beneficial because we almost certainly want <code>foo</code> available before <code>bar</code> anyway since it needs weaker typeclasses and might be useful for proving <code>bar</code></p>",
        "id": 367766553,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687217717
    },
    {
        "content": "<p>PRs at <a href=\"https://github.com/leanprover-community/mathlib4/pull/5277\">https://github.com/leanprover-community/mathlib4/pull/5277</a> and <a href=\"https://github.com/leanprover/lean4/pull/2277\">https://github.com/leanprover/lean4/pull/2277</a>.</p>",
        "id": 367779728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687225075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> for the Lean 4 PR, would it make sense to make <code>autoImplicit</code> more configurable? i.e., instead of just the toggle, the false relaxed version could take a declaration of type <code>Name -&gt; Bool</code> which specifies the valid autoimplicit names.</p>",
        "id": 367782319,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687226505
    },
    {
        "content": "<p>I understand if you're just trying to keep the diff as small as possible for faster merging.</p>",
        "id": 367782430,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687226541
    },
    {
        "content": "<p>I reordered git history on the mathlib4 PR, so you can see the actual mathematical errors that had resulted from not watching auto-implicits. For your viewing pleasure: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5277/commits/3288923b168f2874b4598462ea46eb59ceb852b3\">https://github.com/leanprover-community/mathlib4/pull/5277/commits/3288923b168f2874b4598462ea46eb59ceb852b3</a></p>",
        "id": 367782844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687226778
    },
    {
        "content": "<p>I will not name names. :-) (Especially because I'm worried I'd have to name myself.)</p>",
        "id": 367782870,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687226797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span>, I'm skeptical without explicit demand for this.</p>\n<p>(Also I'm worried how it would work -- surely you want to put this option in your project's lakefile: could you even name a declaration there?)</p>",
        "id": 367782980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687226879
    },
    {
        "content": "<p>25% of these errors would still happen even if we allow only single-character autoimplicits.</p>",
        "id": 367783206,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1687227002
    },
    {
        "content": "<p>Although an alternative conclusion is that <code>AddGroupWithZeroNhd.z</code> is a bad name, and it should be <code>AddGroupWithZeroNhd.zeroNhd</code>!</p>",
        "id": 367783342,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687227094
    },
    {
        "content": "<p>FWIW I think <code>autoImplicit</code> is still awful even if restricted to single letters and I would never edit a file without turning it off.</p>",
        "id": 367788257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687230184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367754256\">said</a>:</p>\n<blockquote>\n<p>A variation on something I was thinking about earlier in this thread would be a feature where you'd be able to write something like <code>autoImplicit {/a-z/ : _}</code> to be able to specify auto-implicits for names that match certain patterns (like here, a single latin letter). These would be like <code>variable</code>, but they don't get added to the context unless they're actually mentioned, and like the current auto-implicits design they'd come <em>before</em> everything else.</p>\n<p>Something nice about this is you could have <code>autoImplicit {m n : Nat}</code> for example to restrict how an auto-implicit is used. Another example, <code>autoImplicit {X Y Z : Type _}</code> could be useful for topological spaces.</p>\n</blockquote>\n<p>Isn't this exactly how <code>variable</code> works already (at least in Lean 3)?</p>",
        "id": 367795720,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687234927
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367761933\">said</a>:</p>\n<blockquote>\n<p>single letter identifiers are vilified in common programming practice</p>\n</blockquote>\n<p>Except, oddly, in parametric types (e.g., generics) where <code>T</code>, <code>U</code>, and <code>V</code> are all standard parlance.</p>",
        "id": 367795971,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687235075
    },
    {
        "content": "<p>FWIW, from a programming context, I generally like auto-implicits. While I certainly have typo'd myself into a temporarily confusing error, it has also led to a type error somewhere in my experience that I have yet to require a long time to fix. The advantage of not having to be explicit about types everywhere (and the shorter definition signatures that permits) outweighs the disadvantages for me thus far.</p>",
        "id": 367796843,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687235649
    },
    {
        "content": "<p>However, I do think the single character (potentially along with certain acceptable sufffixes) would markedly reduce the typo confusions and stil cover the vast majority of helpful auto-implicit use.</p>",
        "id": 367797017,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687235768
    },
    {
        "content": "<p>note that the \"typo problem\" already existed in lean 3 (and rust) in the form of pattern matching on constants:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">true</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tru</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"c1\">-- unreachable pattern</span>\n</code></pre></div>",
        "id": 367797032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687235778
    },
    {
        "content": "<p>I think the best way to battle this kind of issue is through linters that detect suspicious names</p>",
        "id": 367797106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687235837
    },
    {
        "content": "<p>Yep, that one has tripped me quite a few times as well. I have also found those sometimes harder to diagnose (though the redundant alternative error generally helps).</p>",
        "id": 367797131,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687235858
    },
    {
        "content": "<p>The \"typo problem\" can also be known as \"oops one of my imports added a declaration called α\" problem.</p>",
        "id": 367797237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687235899
    },
    {
        "content": "<p>that's the co-typo problem</p>",
        "id": 367797258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687235914
    },
    {
        "content": "<blockquote>\n<p>FWIW, from a programming context, I generally like auto-implicits. While I certainly have typo'd myself into a temporarily confusing error, it has also led to a type error somewhere in my experience that I have yet to require a long time to fix. </p>\n</blockquote>\n<p>I can believe this; the types that show up in a programming context are generally <em>much</em> simpler than the ones in a proving context. It's great that there is an easy way to have <code>autoImplicit</code> be on globally in programming projects, and off globally in proving projects. However, it only helps if people actually do it...</p>",
        "id": 367797712,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687236187
    },
    {
        "content": "<p>I think, along the lines of Mac's observation about generic args, that the best single letter / autoImplicit variables are the ones that appear in type dependencies, which is to say most variables in mathlib theorem signatures</p>",
        "id": 367797911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236303
    },
    {
        "content": "<p>which at least explains why empirically we don't name our variables that much</p>",
        "id": 367797958,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236325
    },
    {
        "content": "<p>and I would contend that those variables are the best ones to infer, whether by <code>variable</code> or autoImplicit</p>",
        "id": 367798047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236367
    },
    {
        "content": "<p>the nondependent ones are much more likely to lead to misleading signatures if you pull them into a <code>variable</code></p>",
        "id": 367798081,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236397
    },
    {
        "content": "<p>In the context of mathlib I would guess this is like 95% about the fact that we make ourselves write <code>{G : Type _} [Group G]</code> rather than just <code>G : Group</code>.</p>",
        "id": 367798357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687236571
    },
    {
        "content": "<p>You can actually autoImplicit that kind of thing as long as one of the constants in the theorem statement takes a group as an argument</p>",
        "id": 367798702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236730
    },
    {
        "content": "<p>but that's probably the minority of cases in the basic <code>Algebra/</code> files</p>",
        "id": 367798738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236764
    },
    {
        "content": "<p>What do you mean? Omitting the binder for <code>G</code> or for the instance argument?</p>",
        "id": 367798807,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687236817
    },
    {
        "content": "<p>both</p>",
        "id": 367798815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236824
    },
    {
        "content": "<p>I don't think people are clamoring to omit <code>[Group G]</code>, particularly as often the theorem will only hold for an abelian group, or the thing used in the statement will be defined more generally for semigroups.</p>",
        "id": 367799420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687237129
    },
    {
        "content": "<p>yeah, I realize that in mathlib where all the typeclasses are atomized it is less often that you can take advantage of this behavior. It comes up quite often in std where you have some object which has a typeclass assumption to make it work and then all the lemmas use the same typeclass</p>",
        "id": 367799657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237249
    },
    {
        "content": "<p>I can somewhat understand not wanting to write the <code>{G : Type _}</code> part, and just writing <code>[Group G]</code>. I still think it's pretty wild stuff to actually do it and just, like, hope that the name <code>G</code> does not refer to anything, when you could just be explicit about what you mean and avoid the assumption that <code>G</code> is not bound to anything.</p>",
        "id": 367799669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687237255
    },
    {
        "content": "<p>I don't think it is that weird to be asserting that you know what names are in scope. That's what <code>open</code> and such is for</p>",
        "id": 367799769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237307
    },
    {
        "content": "<p>if you introduce names you didn't expect you can also get ambiguous references, so it's not like lean files are robust to added declarations in upstream files in the first place</p>",
        "id": 367799885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237348
    },
    {
        "content": "<p>besides that, declarations named <code>G</code> are terrible</p>",
        "id": 367799936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237376
    },
    {
        "content": "<p>(hence my ire at those <code>A</code> / <code>a</code> declarations from the IMO archive, even if they are namespaced)</p>",
        "id": 367799996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237403
    },
    {
        "content": "<p>Obviously the much bigger problem with autoImplicit, which is the reason I would never consider using it, is the inscrutable error messages that you will probably get when it triggers unexpectedly.</p>",
        "id": 367800146,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687237475
    },
    {
        "content": "<p>if we're going to reserve single letters (capital and lowercase) + decorators for strict autoImplicits, then we should conversely also ban them as declaration names (via lint warnings)</p>",
        "id": 367800190,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237491
    },
    {
        "content": "<p>(and this has a cost that you pay every time you get <em>any</em> inscrutable error message, because you have to wonder if maybe you messed up a variable name somewhere in addition to everything else that could go wrong)</p>",
        "id": 367800470,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687237591
    },
    {
        "content": "<p>Back in lean 3 days, there was a nice feature where error messages would mention that you had duplicate names in the context when you have a type error that might implicate them. It seems logical to do the same thing for autoImplicits</p>",
        "id": 367800558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237618
    },
    {
        "content": "<p>Yes, that would certainly help if the error is sufficiently local. Then you have the cases where the error may not be detected locally or indeed at all, as in the \"mathematical errors\" diff above.<br>\nPersonally, I don't understand why I would ever want to allow these kinds of misinterpretations.</p>",
        "id": 367801526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687238050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367801526\">said</a>:</p>\n<blockquote>\n<p>Personally, I don't understand why I would ever want to allow these kinds of misinterpretations.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That is the great thing about it being an option. You can turn it off you do not like it! And inversely, for situations where it is disabled by default, you can turn it on if you like.</p>",
        "id": 367802463,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687238453
    },
    {
        "content": "<p>Yes, so this is really a mathlib4 discussion, not a lean4 discussion.</p>",
        "id": 367802660,
        "sender_full_name": "Reid Barton",
        "timestamp": 1687238531
    },
    {
        "content": "<p>I wonder if we could even add something like a <code>autoImplicitRegex</code> option to precisely select what identifiers a project allows (which would avoid further upstream PRs for slight changes in the pattern like the one Scott made in the future).</p>",
        "id": 367802829,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687238606
    },
    {
        "content": "<p>Some such interesting modifications this would allow is adding the prime suffixes some want and removing potential dangers like <code>ℕ</code> from the list.</p>",
        "id": 367803194,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687238709
    },
    {
        "content": "<p>I don't think blackboard bold letters should be identifier characters in the first place</p>",
        "id": 367804553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687239184
    },
    {
        "content": "<p>mh, maybe I will regret that statement</p>",
        "id": 367804651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687239224
    },
    {
        "content": "<p><code>sℕ</code> is actually used as an identifier in <code>NormNum</code>...</p>",
        "id": 367804755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687239254
    },
    {
        "content": "<p>maybe it shouldn't be an id_start character</p>",
        "id": 367804809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687239277
    },
    {
        "content": "<p>ah, <code>𝕜</code> is also used as a variable</p>",
        "id": 367805056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687239365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367802829\">said</a>:</p>\n<blockquote>\n<p>I wonder if we could even add something like a <code>autoImplicitRegex</code> option to precisely select what identifiers a project allows (which would avoid further upstream PRs for slight changes in the pattern like the one Scott made in the future).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> this isn't exactly what I suggested above, but it's the same spirit.</p>",
        "id": 367808300,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1687240622
    },
    {
        "content": "<p>Well, Leo has merged the simple change already, so let's punt on this one for now. :-)</p>",
        "id": 367808916,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687240836
    },
    {
        "content": "<p>What does \"punt\" mean here?</p>",
        "id": 367811150,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1687241579
    },
    {
        "content": "<p>I presume it means let us delay any further auto-implicit changes until there is a manifest need.</p>",
        "id": 367811290,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687241636
    },
    {
        "content": "<p>This one: <a href=\"https://en.wiktionary.org/wiki/punt#Verb_2\">https://en.wiktionary.org/wiki/punt#Verb_2</a></p>\n<blockquote>\n<ol start=\"2\">\n<li>(colloquial, intransitive) To equivocate and delay or put off (answering a question, addressing an issue, etc).</li>\n</ol>\n</blockquote>",
        "id": 367816651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687243493
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367782844\">said</a>:</p>\n<blockquote>\n<p>I reordered git history on the mathlib4 PR, so you can see the actual mathematical errors that had resulted from not watching auto-implicits. For your viewing pleasure: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5277/commits/3288923b168f2874b4598462ea46eb59ceb852b3\">https://github.com/leanprover-community/mathlib4/pull/5277/commits/3288923b168f2874b4598462ea46eb59ceb852b3</a></p>\n</blockquote>\n<p>I'm confused why we need to do this in the first place. Surely mathport already output all these variable lines. Did we really delete them when porting?</p>",
        "id": 367945052,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1687270763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367945052\">said</a>:</p>\n<blockquote>\n<p>I'm confused why we need to do this in the first place. Surely mathport already output all these variable lines. Did we really delete them when porting?</p>\n</blockquote>\n<p>I suspect these are largely lemmas added during porting, or already in new features, although I wouldn't be totally surprised if porters sometimes removed arguments that auto-implicit could handle (hopefully not?)</p>\n<p>In any case, this PR is going to wait for the next lean4 nightly, after which I'll bump and remove the commit that adds all these variables before we merge.</p>",
        "id": 368067423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687300939
    },
    {
        "content": "<p>the \"mathematical errors\" commit looks to be entirely composed of mathport oopsies (bad re-casing) which are usually caught during porting and are only hidden here because of autoImplicit behavior</p>",
        "id": 368068283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687301360
    },
    {
        "content": "<p>Yeah when I realised this was happening I started strongly advocating for \"set autoImplicit false at the top of every file you're porting\" and it even made it into the instructions</p>",
        "id": 368118614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687326759
    },
    {
        "content": "<p>Right now most lean 4 code is written by mathport. As we transition into code being written by humans, analogous human errors are/were going to appear.</p>",
        "id": 368122300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1687327857
    },
    {
        "content": "<p>The mathlib4 PR \"disable relaxedAutoImplicit\" <a href=\"https://github.com/leanprover-community/mathlib4/pull/5277\">#5277</a> should now be ready to go.</p>",
        "id": 368720786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687480211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60autoImplicit.20true.60.20is.20evil/near/367797032\">said</a>:</p>\n<blockquote>\n<p>note that the \"typo problem\" already existed in lean 3 (and rust) in the form of pattern matching on constants:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">match</span> <span class=\"n\">true</span> <span class=\"k\">with</span>\n<span class=\"bp\">|</span> <span class=\"n\">tru</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">...</span> <span class=\"c1\">-- unreachable pattern</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>and this is affected by your open namespaces <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> I obsessively put <code>.</code> in front of all constructor patterns nowadays... frankly, I'd want a lint that requires it for constructor patterns!</p>",
        "id": 369271839,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1687646057
    },
    {
        "content": "<p>How do I disable autoimplicit in my project?</p>",
        "id": 369780386,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1687800032
    },
    {
        "content": "<p>Like this, but without the \"relaxed\", aiui <a href=\"https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean#L7\">https://github.com/leanprover-community/mathlib4/blob/master/lakefile.lean#L7</a></p>",
        "id": 369781944,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1687800384
    },
    {
        "content": "<p>Just a data point:<br>\nI just spent about 40 minutes trying to figure out what was wrong with my code, which turned out to be a typo in a <code>variable</code> declaration combined with autoImlicit being on. The message <code>declaration uses 'sorry'</code> didn't help me much.</p>",
        "id": 370680996,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688027083
    },
    {
        "content": "<p>Are you on a version of Mathlib including <a href=\"https://github.com/leanprover-community/mathlib4/pull/5277\">#5277</a> ? The situation (for Mathlib) is far better now.</p>",
        "id": 370685410,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688027970
    },
    {
        "content": "<p>I don't know.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"o\">:</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">06</span><span class=\"bp\">-</span><span class=\"mi\">20</span>\n</code></pre></div>",
        "id": 370686970,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688028269
    },
    {
        "content": "<p>the autoImplicit setting is project-local (it is set in the mathlib lakefile), so if it is in his own code it won't be affected by mathlib's autoImplicit setting</p>",
        "id": 370687074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1688028289
    },
    {
        "content": "<p>I just disabled it for my project as well.</p>",
        "id": 370687216,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688028313
    },
    {
        "content": "<p>Ah you're not working in Mathlib!</p>",
        "id": 370687391,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1688028346
    },
    {
        "content": "<p>I have projects that _depend on_ Mathlib.</p>",
        "id": 370687613,
        "sender_full_name": "Martin Dvořák",
        "timestamp": 1688028382
    },
    {
        "content": "<p>FWIW, I just did an <a href=\"https://github.com/leanprover/std4/compare/relaxedAutoImplicit\">experiment</a> disabling <code>relaxedAutoImplicit</code> in std. I didn't find any bugs, but there are a fair number of autoimplicits with longer names that trip the linter:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cmp</span> <span class=\"n\">cmpα</span> <span class=\"n\">cmpβ</span> <span class=\"n\">cmpγ</span> <span class=\"n\">cut</span> <span class=\"n\">le</span>\n<span class=\"n\">path</span> <span class=\"n\">path'</span> <span class=\"n\">parent</span> <span class=\"n\">res</span> <span class=\"n\">sz</span>\n<span class=\"n\">acc</span> <span class=\"n\">dflt</span> <span class=\"n\">init</span> <span class=\"n\">step</span>\n<span class=\"n\">cl</span> <span class=\"n\">cr</span>\n<span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"n\">xs</span> <span class=\"n\">cs₁</span> <span class=\"n\">cs₂</span>\n<span class=\"n\">it</span> <span class=\"n\">it₁</span> <span class=\"n\">it₂</span>\n<span class=\"n\">ml</span> <span class=\"n\">mm</span> <span class=\"n\">mr</span>\n<span class=\"n\">Cont</span> <span class=\"n\">Idx</span> <span class=\"n\">Elem</span> <span class=\"n\">Dom</span>\n</code></pre></div>\n<p>There was only one occurrence of variables with an initial capital, for <code>Cont Idx Elem Dom</code> in some theorems about <code>GetElem</code>, but I think the current naming convention would have those be lowercase; so plausibly a rule along those lines could work in std. Multi-letter variables are possibly somewhat more common than mathlib due to its more CS-focus.</p>",
        "id": 386671847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692729216
    }
]