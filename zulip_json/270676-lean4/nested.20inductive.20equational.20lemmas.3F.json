[
    {
        "content": "<p>an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Basic</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">ReducedForm</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">ReducedForm</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">or</span>  <span class=\"o\">(</span><span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">ReducedForm</span> <span class=\"n\">L</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm</span> <span class=\"n\">L</span>\n<span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm</span> <span class=\"n\">L</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ReducedForm.toPropFun</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">r</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">and</span> <span class=\"n\">fs</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">fs'</span> <span class=\"o\">:=</span> <span class=\"n\">fs.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ReducedForm.toPropFun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">Array.size</span> <span class=\"n\">fs'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">or</span> <span class=\"n\">fs</span>  <span class=\"bp\">=&gt;</span>\n    <span class=\"k\">let</span> <span class=\"n\">fs'</span> <span class=\"o\">:=</span> <span class=\"n\">fs.attach.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ReducedForm.toPropFun</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"n\">Array.size</span> <span class=\"n\">fs'</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lit</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm.toPropFun</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ReducedForm.toPropFun</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm.toPropFun</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ReducedForm</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">ReducedForm.toPropFun</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">WellFounded.fix_eq</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I expected the first example to prove by its equational lemmas, but it doesn't. is this expected?</p>",
        "id": 404784800,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234556
    },
    {
        "content": "<p>you made it a <code>theorem</code>, this is like <code>opaque</code></p>",
        "id": 404784978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701234662
    },
    {
        "content": "<p><span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 404785001,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234680
    },
    {
        "content": "<p>forgot that turns off the equational lemma generation <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> then this is a feature request for a warning when you try to simp a theorem</p>",
        "id": 404785111,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234722
    },
    {
        "content": "<p>um...</p>",
        "id": 404785208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701234746
    },
    {
        "content": "<p>people use theorems in simp all the time</p>",
        "id": 404785232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701234753
    },
    {
        "content": "<p>err, you are right <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> i have no clue what this request is then</p>",
        "id": 404785285,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234772
    },
    {
        "content": "<p>probably to make <code>defTheorem</code> a lean linter</p>",
        "id": 404785328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701234789
    },
    {
        "content": "<p>I think mathlib also has a linter for theorems with return type not in <code>Prop</code> right?</p>",
        "id": 404785343,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234795
    },
    {
        "content": "<p>yeah</p>",
        "id": 404785347,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234797
    },
    {
        "content": "<p>you can run <code>#lint</code> but it's not as obvious</p>",
        "id": 404785386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701234815
    },
    {
        "content": "<p>thanks for the fast response <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span> my proofing is once again proceeding</p>",
        "id": 404785422,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1701234830
    }
]