[
    {
        "content": "<p>When creating an <code>extern_lib</code>, we may hope our downstream targets to inherit some flags from the lib. In particular, if our <code>extern_lib</code> itself depends on some other libs that are external to lean, we may want downstream libs to inherit the linkage to those external libs. Is there a way to do so? </p>\n<p>(I remember <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> mentioned that there is ongoing work to support compiling an <code>extern_lib</code> to shared targets, which, I guess, can also workaround such dependency issues, but I am sure whether there are more general cases requiring passing other args may or may not being related to dependency).</p>\n<p>Also, in Rust or some other languages, there is a concept of <a href=\"https://doc.rust-lang.org/reference/items/external-blocks.html#linking-modifiers-bundle\"><code>bundled dependency</code></a>, which, I suppose, is also not supported in Lake yet.</p>",
        "id": 392649029,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695448198
    },
    {
        "content": "<p>thoughts on this？</p>",
        "id": 393073581,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695663657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> As you surmised, Lake does yet provide a way to inherit flags, and, hopefully, the planned <code>extern_lib</code> rewrite will help do away with many of the cases where this would currently be useful.  I am not sure how Rust's bundled dependency notion would apply to Lake. Lake has no parallel to rlibs and already supports static linking of native libraries (the fact that Lake <em>only</em> supports this is what is currently the problem).</p>",
        "id": 393112254,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695676415
    },
    {
        "content": "<p>the behavior of “bundle” is roughly that it will pull in all dependency (including system level static libs that a rlib depends on) when packaging a static lib. </p>\n<p>I personally actually find this annoying in some rare cases where the project is a complicated rust/c/c++ mixture — some static dependencies packaged by rust is making c++ unhappy (of cuz there are ways to address such issues but they are rather tedious). </p>\n<p>However, it is arguably an easy way to solve the dependency problem when upstream static lib depends on another external static lib.</p>\n<p>I think lean4 does not support the mode when an upstream lean lib is compiled into a static lib while depending on some other static libs that are external to lean. Having the shared lib solves this but there seems to be no way to keep the upstream lean lib static other than requiring the downstream lean lib to add the linking args.</p>",
        "id": 393145437,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695694017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> <a href=\"#narrow/stream/270676-lean4/topic/Is.20there.20a.20way.20to.20inherit.20flags.2Fdependency.20from.20.60extern_lib.60/near/393145437\">said</a>:</p>\n<blockquote>\n<p>I think lean4 does not support the mode when an upstream lean lib is compiled into a static lib while depending on some other static libs that are external to lean.</p>\n</blockquote>\n<p>Sorry, I am still confused. <span aria-label=\"face with spiral eyes\" class=\"emoji emoji-1f635-200d-1f4ab\" role=\"img\" title=\"face with spiral eyes\">:face_with_spiral_eyes:</span>   I believe Lake supports this? Lake will automatically pull into static <code>extern_lib</code>s from dependencies and you can build a static lib for any library via <code>:static</code>.</p>",
        "id": 393155294,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695699816
    },
    {
        "content": "<p>So sorry for the confusion. Let me write an example then:</p>\n<p>Suppose I wrote a library named <code>LeanWrapper</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">LeanWrapper</span> <span class=\"c1\">-- depends on libunwind.a (or libWhateverThatIsNotBuiltByLean.a)</span>\n</code></pre></div>\n<p>Then, in a downstream executable, I may need something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean_exe</span> <span class=\"bp\">«</span><span class=\"n\">my</span><span class=\"bp\">-</span><span class=\"n\">exe</span><span class=\"bp\">»</span> <span class=\"o\">{</span>\n  <span class=\"n\">root</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">Main</span>\n  <span class=\"n\">moreLinkArgs</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-l:libunwind.a\"</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>Is there a better way to do this without letting <code>«my-exe»</code> supply the flag? (It may be legal to carry the objects inside <code>libunwind.a</code> with <code>libLeanWrapper.a</code> or it may be the case that <code>libunwind.a</code> is a common library.)</p>\n<p>P.S. I may just be ignorant here, may be Lake is already capable of doing this?</p>",
        "id": 393156749,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695700736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"639630\">@Schrodinger ZHU Yifan</span> My solution would be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">extern_lib</span> <span class=\"n\">libunwind</span> <span class=\"o\">:=</span>\n  <span class=\"n\">inputFile</span> <span class=\"s2\">\"path/to/libunwind.a\"</span>\n</code></pre></div>",
        "id": 393283946,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695747492
    },
    {
        "content": "<p>That would work, I suppose!</p>",
        "id": 393316895,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1695758436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639630\">Schrodinger ZHU Yifan</span> has marked this topic as resolved.</p>",
        "id": 393316909,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695758439
    }
]