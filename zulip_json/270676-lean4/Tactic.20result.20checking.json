[
    {
        "content": "<p>Where does Lean check whether the result of a tactic is correct? In principle a tactic can output something that does not type check, and how does Lean prevent this?</p>",
        "id": 396358613,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1697142017
    },
    {
        "content": "<p>I always used this function to execute tactics and it seems like it has type checking built into it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"n\">stx</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">profileitM</span> <span class=\"n\">Exception</span> <span class=\"s2\">\"tactic execution\"</span> <span class=\"o\">(</span><span class=\"n\">decl</span> <span class=\"o\">:=</span> <span class=\"n\">stx.getKind</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getOptions</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">withRef</span> <span class=\"n\">stx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withIncRecDepth</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withFreshMacroScope</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">node</span> <span class=\"n\">_</span> <span class=\"n\">k</span> <span class=\"n\">_</span>    <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">==</span> <span class=\"n\">nullKind</span> <span class=\"k\">then</span>\n        <span class=\"c1\">-- Macro writers create a sequence of tactics `t₁ ... tₙ` using `mkNullNode #[t₁, ..., tₙ]`</span>\n        <span class=\"n\">stx.getArgs.forM</span> <span class=\"n\">evalTactic</span>\n      <span class=\"k\">else</span> <span class=\"n\">withTraceNode</span> <span class=\"bp\">`</span><span class=\"n\">Elab.step</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"n\">stx</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">evalFns</span> <span class=\"o\">:=</span> <span class=\"n\">tacticElabAttribute.getEntries</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">stx.getKind</span>\n        <span class=\"k\">let</span> <span class=\"n\">macros</span>  <span class=\"o\">:=</span> <span class=\"n\">macroAttribute.getEntries</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span> <span class=\"n\">stx.getKind</span>\n        <span class=\"k\">if</span> <span class=\"n\">evalFns.isEmpty</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">macros.isEmpty</span> <span class=\"k\">then</span>\n          <span class=\"n\">throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"tactic '{stx.getKind}' has not been implemented\"</span>\n        <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.saveState</span>\n        <span class=\"n\">expandEval</span> <span class=\"n\">s</span> <span class=\"n\">macros</span> <span class=\"n\">evalFns</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">missing</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">pure</span> <span class=\"o\">()</span>\n    <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throwError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"unexpected tactic{indentD stx}\"</span>\n<span class=\"n\">where</span>\n    <span class=\"n\">throwExs</span> <span class=\"o\">(</span><span class=\"n\">failures</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">EvalTacticFailure</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n     <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">fail</span> <span class=\"o\">:=</span> <span class=\"n\">failures</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n       <span class=\"c1\">-- Recall that `failures[0]` is the highest priority evalFn/macro</span>\n       <span class=\"n\">fail.state.restore</span> <span class=\"o\">(</span><span class=\"n\">restoreInfo</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n       <span class=\"n\">throw</span> <span class=\"n\">fail.exception</span> <span class=\"c1\">-- (*)</span>\n     <span class=\"k\">else</span>\n       <span class=\"n\">throwErrorAt</span> <span class=\"n\">stx</span> <span class=\"s2\">\"unexpected syntax {indentD stx}\"</span>\n\n    <span class=\"kd\">@[</span><span class=\"n\">inline</span><span class=\"kd\">]</span> <span class=\"n\">handleEx</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">failures</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">EvalTacticFailure</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"n\">Exception</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">EvalTacticFailure</span> <span class=\"bp\">→</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">ex</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Elab.tactic.backtrack</span><span class=\"o\">]</span> <span class=\"n\">ex.toMessageData</span>\n        <span class=\"k\">let</span> <span class=\"n\">failures</span> <span class=\"o\">:=</span> <span class=\"n\">failures.push</span> <span class=\"o\">⟨</span><span class=\"n\">ex</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.saveState</span><span class=\"o\">⟩</span>\n        <span class=\"n\">s.restore</span> <span class=\"o\">(</span><span class=\"n\">restoreInfo</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">k</span> <span class=\"n\">failures</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">internal</span> <span class=\"n\">id</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"k\">if</span> <span class=\"n\">id</span> <span class=\"bp\">==</span> <span class=\"n\">unsupportedSyntaxExceptionId</span> <span class=\"k\">then</span>\n          <span class=\"c1\">-- We do not store `unsupportedSyntaxExceptionId`, see throwExs</span>\n          <span class=\"n\">s.restore</span> <span class=\"o\">(</span><span class=\"n\">restoreInfo</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">k</span> <span class=\"n\">failures</span>\n        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">id</span> <span class=\"bp\">==</span> <span class=\"n\">abortTacticExceptionId</span> <span class=\"k\">then</span>\n          <span class=\"n\">for</span> <span class=\"n\">msg</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Core.getMessageLog</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toList</span> <span class=\"k\">do</span>\n            <span class=\"n\">trace</span><span class=\"o\">[</span><span class=\"n\">Elab.tactic.backtrack</span><span class=\"o\">]</span> <span class=\"n\">msg.data</span>\n          <span class=\"k\">let</span> <span class=\"n\">failures</span> <span class=\"o\">:=</span> <span class=\"n\">failures.push</span> <span class=\"o\">⟨</span><span class=\"n\">ex</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">Tactic.saveState</span><span class=\"o\">⟩</span>\n          <span class=\"n\">s.restore</span> <span class=\"o\">(</span><span class=\"n\">restoreInfo</span> <span class=\"o\">:=</span> <span class=\"n\">true</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">k</span> <span class=\"n\">failures</span>\n        <span class=\"k\">else</span>\n          <span class=\"n\">throw</span> <span class=\"n\">ex</span> <span class=\"c1\">-- (*)</span>\n\n    <span class=\"n\">expandEval</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">macros</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">evalFns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">failures</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">EvalTacticFailure</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n      <span class=\"k\">match</span> <span class=\"n\">macros</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"n\">evalFns</span> <span class=\"n\">failures</span>\n      <span class=\"bp\">|</span> <span class=\"n\">m</span> <span class=\"o\">::</span> <span class=\"n\">ms</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">try</span>\n          <span class=\"n\">withReader</span> <span class=\"o\">({</span> <span class=\"bp\">·</span> <span class=\"k\">with</span> <span class=\"n\">elaborator</span> <span class=\"o\">:=</span> <span class=\"n\">m.declName</span> <span class=\"o\">})</span> <span class=\"k\">do</span>\n            <span class=\"n\">withTacticInfoContext</span> <span class=\"n\">stx</span> <span class=\"k\">do</span>\n              <span class=\"k\">let</span> <span class=\"n\">stx'</span> <span class=\"bp\">←</span> <span class=\"n\">adaptMacro</span> <span class=\"n\">m.value</span> <span class=\"n\">stx</span>\n              <span class=\"n\">evalTactic</span> <span class=\"n\">stx'</span>\n        <span class=\"n\">catch</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">handleEx</span> <span class=\"n\">s</span> <span class=\"n\">failures</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">expandEval</span> <span class=\"n\">s</span> <span class=\"n\">ms</span> <span class=\"n\">evalFns</span><span class=\"o\">)</span>\n\n    <span class=\"n\">eval</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">SavedState</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">evalFns</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">failures</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">EvalTacticFailure</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n      <span class=\"k\">match</span> <span class=\"n\">evalFns</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"o\">[]</span>              <span class=\"bp\">=&gt;</span> <span class=\"n\">throwExs</span> <span class=\"n\">failures</span>\n      <span class=\"bp\">|</span> <span class=\"n\">evalFn</span><span class=\"o\">::</span><span class=\"n\">evalFns</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">try</span>\n          <span class=\"n\">withReader</span> <span class=\"o\">({</span> <span class=\"bp\">·</span> <span class=\"k\">with</span> <span class=\"n\">elaborator</span> <span class=\"o\">:=</span> <span class=\"n\">evalFn.declName</span> <span class=\"o\">})</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withTacticInfoContext</span> <span class=\"n\">stx</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">evalFn.value</span> <span class=\"n\">stx</span>\n        <span class=\"n\">catch</span> <span class=\"n\">ex</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">handleEx</span> <span class=\"n\">s</span> <span class=\"n\">failures</span> <span class=\"n\">ex</span> <span class=\"o\">(</span><span class=\"n\">eval</span> <span class=\"n\">s</span> <span class=\"n\">evalFns</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>evalFns</code> variable is internal.</p>",
        "id": 396368118,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1697146639
    }
]