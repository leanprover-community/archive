[
    {
        "content": "<p>Consider this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n</code></pre></div>\n<p>After <code>intro h</code>, I have <code>h : A ⊆ B</code> in the tactic state.  But now suppose I change the example to this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">∩</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now I get an error message: <code>type mismatch h has type A ⊆ B : Prop but is expected to have type ?m.49 ∈ A → ?m.49 ∈ B : Prop</code>.  Why?  Shouldn't this work?</p>",
        "id": 305150215,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666272634
    },
    {
        "content": "<p>The definition of <code>Set.subset</code>  is <br>\n<code>∀ {a}, a ∈ s₁ → a ∈ s₂</code><br>\nand so it seems like Lean interprets <code>h</code> as <code>@h _</code>.<br>\nThis looks like a bug in <code>intro</code> (since <code>h</code> should not be applied to implicit arguments).</p>",
        "id": 305157886,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666274932
    },
    {
        "content": "<p>That's what I thought.  Any idea how to fix it?</p>",
        "id": 305162877,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666276326
    },
    {
        "content": "<p>If you don't specify the type, it will work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 305175647,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666279709
    },
    {
        "content": "<p>Opened a (minimized) issue as <a href=\"https://github.com/leanprover/lean4/pull/1759\">leanprover/lean4#1759</a></p>",
        "id": 305177912,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666280254
    },
    {
        "content": "<p>Yes, I know.  But I'm supposed to be able to specify the type, right?</p>\n<p>I am trying to implement an <code>assume</code> tactic, for use by students.  My tactic is essentially just a wrapper around <code>intro</code>.  I want to encourage students to say explicitly what statement is being assumed, so that Lean can correct them if they are assuming the wrong thing.  So I need to be able to pass the type to <code>intro</code> and have it make sure it's the right type.  So this bug, if it is a bug, is a problem for me.</p>",
        "id": 305177952,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666280264
    },
    {
        "content": "<p>Pushed a fix for the issue above.</p>",
        "id": 305183945,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1666282020
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 305187104,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1666282959
    },
    {
        "content": "<p>I'm a little puzzled by the following examples:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_instance</span><span class=\"o\">]</span> <span class=\"n\">Set.instSingletonSet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>The first and third examples work, but the second doesn't.  The error message is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"bp\">`</span><span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">`</span><span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"bp\">?</span><span class=\"n\">m.387</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>If I don't include the line <code>attribute [default_instance] Set.instSingletonSet</code>, then Lean doesn't understand the example at all.  I assume the problem is that the notation <code>{x}</code> becomes ambiguous because it could have several different types.  With the line <code>attribute [default_instance] Set.instSingletonSet</code>, Lean interprets <code>{x}</code> in the statement of the example as denoting a singleton set.  But it doesn't seem to understand it that way in <code>intro</code>.  Is the <code>default_instance</code> specification ignored by <code>intro</code>?</p>",
        "id": 342956891,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1679241071
    },
    {
        "content": "<p>Weirdly <code>intro (h : y ∈ singleton x)</code> works fine too</p>",
        "id": 342958336,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679241772
    },
    {
        "content": "<p>When I was implementing <code>change ... at</code> I noticed these sorts of unification errors occurring. I don't fully understand them, but I did find a workaround by using the <code>show</code> elaborator. I'll just leave this working implementation of <code>intro</code> with type ascriptions here in case anyone has any ideas (note that it works without the default instance as well, after suitably modifying the theorem statements):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">introType</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typeStx</span> <span class=\"o\">:</span> <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">term</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">TacticM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">fvarId</span> <span class=\"bp\">←</span> <span class=\"n\">liftMetaTacticAux</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">fvarId</span><span class=\"o\">,</span> <span class=\"n\">mvarId</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">mvarId.intro</span> <span class=\"n\">n</span>\n      <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">fvarId</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">mvarId</span><span class=\"o\">])</span>\n    <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">fvarType</span> <span class=\"bp\">←</span> <span class=\"n\">fvarId.getType</span>\n      <span class=\"k\">let</span> <span class=\"n\">mvar</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"n\">none</span>\n      <span class=\"n\">_</span> <span class=\"bp\">←</span> <span class=\"n\">Term.withSynthesize</span> <span class=\"bp\">&lt;|</span>\n            <span class=\"n\">elabTerm</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">term</span> <span class=\"bp\">|</span> <span class=\"k\">show</span> <span class=\"bp\">$</span><span class=\"n\">typeStx</span> <span class=\"k\">from</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">Term.exprToSyntax</span> <span class=\"n\">mvar</span><span class=\"o\">)))</span> <span class=\"n\">fvarType</span>\n      <span class=\"k\">let</span> <span class=\"n\">type</span> <span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">mvar</span>\n      <span class=\"n\">liftMetaTactic</span> <span class=\"k\">fun</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">mvarId.replaceLocalDeclDefEq</span> <span class=\"n\">fvarId</span> <span class=\"n\">type</span><span class=\"o\">]</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"my_intro\"</span> <span class=\"s2\">\"(\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">term</span> <span class=\"s2\">\")\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">my_intro</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">introType</span> <span class=\"n\">h.getId</span> <span class=\"n\">type</span>\n\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">default_instance</span><span class=\"o\">]</span> <span class=\"n\">Set.instSingletonSet</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">my_intro</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">Nat</span><span class=\"o\">))</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 343016664,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679281668
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  for your suggestion.</p>\n<p>Here's another idea:  Do the same thing that <code>evalIntro</code> does for the pattern-matching case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">my_intro</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">:</span><span class=\"n\">term</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">evalTactic</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"k\">match</span> <span class=\"bp\">@</span><span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">type</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I'm not sure I entirely understand what's going on here, but it seems to work.  Is there any possibility of the <code>h</code> in the <code>intro h</code> step conflicting with some other name?  Is the <code>try</code> necessary?</p>",
        "id": 344259269,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1679663311
    },
    {
        "content": "<p>I know this is an old thread but I have a new question about the same topic. The context of this question is <a href=\"https://proofassistants.stackexchange.com/questions/2333/minimizing-proof-environment-change-while-proving-in-lean/2334?noredirect=1#comment5228_2334\">this comment</a> where a user laments that you cannot put type ascriptions in <code>intros</code>. I was about to answer that you can, but I decided to check just in case. Weirdly, you can with <code>intro</code>, thanks to <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/BuiltinTactic.lean#L248-L249\">those lines</a> but not with <code>intros</code> (whose code is <a href=\"https://github.com/leanprover/lean4/blob/master/src/Lean/Elab/Tactic/BuiltinTactic.lean#L276\">a few lines down</a>). Is it intentional? In the spirit of getting rid of the plural versions <code>universes</code> and <code>variables</code>, wouldn't it make to get rid of <code>intros</code>? Or is it meant to have a really different meaning?</p>",
        "id": 380438399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690825477
    },
    {
        "content": "<p>I guess the key difference is that <code>intros</code> intros all the binders but <code>intro</code> intros just one? Maybe <code>intro ..</code> could be the spelling for \"intro everything\", to match <code>exact foo ..</code> to use everything; which lets us eliminate <code>intros</code>.</p>",
        "id": 380438889,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690825573
    },
    {
        "content": "<p>By the way, the previous messages in this thread are also interesting and seem to be still relevant.</p>",
        "id": 380439904,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690825761
    },
    {
        "content": "<p>Eric, you can intro many things with <code>intro</code>.</p>",
        "id": 380439992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690825779
    },
    {
        "content": "<p>But indeed if you don't specify any name then <code>intro</code> will intro only one, and <code>intros</code> will intro everything. But this isn't very useful since you get inaccessible names.</p>",
        "id": 380440415,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690825851
    },
    {
        "content": "<p>the <code>intro ..</code> spelling or <code>intro a b c ..</code> seems nice.</p>",
        "id": 380442431,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1690826265
    },
    {
        "content": "<p>Sure, my point was that if we're going to combine the two commands into one (which I agree is a good idea), then we need to disambiguate <code>intro</code> from <code>intros</code> when they have no arguments, either by changing the spelling of one, or dropping one entirely</p>",
        "id": 380442450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690826270
    },
    {
        "content": "<p>I guess even <code>intro a .. b c</code> could be legal</p>",
        "id": 380442620,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690826301
    },
    {
        "content": "<p>what is the <code>exact ..</code> syntax? I see it's used a couple times in mathlib</p>",
        "id": 380619747,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1690881799
    },
    {
        "content": "<p><code>f ..</code> means <code>f _ _ _</code> for suitably many <code>_</code></p>",
        "id": 380621974,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1690882217
    }
]