[
    {
        "content": "<p>The following produces an error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Lean.versionString</span> <span class=\"c1\">-- \"4.2.0-rc1\"</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"n\">where</span> <span class=\"c1\">-- error: type mismatch</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">X</span> <span class=\"k\">else</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>Is this expected?</p>\n<hr>\n<p>This fails as well:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">decide</span> <span class=\"n\">True</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n</code></pre></div>\n<p>But this doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">match</span> <span class=\"n\">true</span> <span class=\"k\">with</span> <span class=\"bp\">|</span> <span class=\"n\">true</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">false</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 394061021,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1696059644
    },
    {
        "content": "<p>This error happens when Lean tries to generate the <code>SizeOf</code> instance. I'll go have a look.</p>",
        "id": 394062653,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696061264
    },
    {
        "content": "<p>Ah, it was a TC diamond all along ! Since <code>if-then-else</code> doesn't have a proper <code>SizeOf</code> instance, it would infer that its instance would be the default <code>fun _ =&gt; 0</code>, whereas <code>X</code> did have a non-zero instance ! Adding the following instance solves the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SizeOf</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">SizeOf</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">C</span> <span class=\"k\">then</span> <span class=\"n\">A</span> <span class=\"k\">else</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">sizeOf</span> <span class=\"o\">:=</span> <span class=\"n\">iteInduction</span> <span class=\"o\">(</span><span class=\"n\">motive</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">X</span> <span class=\"k\">else</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"c1\">--works</span>\n</code></pre></div>",
        "id": 394065191,
        "sender_full_name": "Arthur Adjedj",
        "timestamp": 1696063515
    }
]