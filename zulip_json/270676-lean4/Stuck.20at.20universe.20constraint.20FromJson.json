[
    {
        "content": "<p>I came across yet another universe unification issue, this time trying to write down some <code>FromJson</code> instance. Here's a MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">Foo</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjValAs</span><span class=\"bp\">?</span> <span class=\"n\">α</span> <span class=\"s2\">\"x\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjValAs</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"s2\">\"y\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.554</span> <span class=\"bp\">?</span><span class=\"n\">u.619</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.620</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.619</span> <span class=\"bp\">?</span><span class=\"n\">u.620</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Can anyone tell where the <code>max</code> is being introduced? (besides the product... I don't think that's the issue?). Note that the error mentions three universe parameters... Why?!</p>",
        "id": 381555640,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691082114
    },
    {
        "content": "<p>Note that the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">deriving</span> <span class=\"n\">FromJson</span>\n</code></pre></div>\n<p>results in the same error (as expected)</p>",
        "id": 381555875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691082148
    },
    {
        "content": "<p>Note that this works just fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n<span class=\"n\">deriving</span> <span class=\"n\">FromJson</span>\n</code></pre></div>",
        "id": 381557178,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1691082368
    },
    {
        "content": "<p>do-notation only supports a single universe.  This is a known limitation.</p>",
        "id": 381564909,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1691084035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjValAs</span><span class=\"bp\">?</span> <span class=\"n\">α</span> <span class=\"s2\">\"x\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjValAs</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"s2\">\"y\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>gives a good error message</p>",
        "id": 381565743,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1691084198
    },
    {
        "content": "<p>Not just <code>do</code> notation but all of the monad notation, right?</p>",
        "id": 381567153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691084546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20at.20universe.20constraint.20FromJson/near/381565743\">said</a>:</p>\n<blockquote>\n<p>... gives a good error message</p>\n</blockquote>\n<p>This is a case of <code>autoImplicit</code> making the error more confusing, right?</p>",
        "id": 381567432,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691084620
    },
    {
        "content": "<p>I guess in the sense that you aren't specifying what universe the types are coming from. The universe inference works great until it doesn't and then the messages are unreadable.</p>",
        "id": 381570252,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1691085332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20at.20universe.20constraint.20FromJson/near/381567153\">said</a>:</p>\n<blockquote>\n<p>Not just <code>do</code> notation but all of the monad notation, right?</p>\n</blockquote>\n<p>yeah, the monad typeclasses are not univ polymorphic</p>",
        "id": 381570470,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1691085374
    },
    {
        "content": "<p>FWIW, I'm PR'ing a  <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=ULiftable#doc\">docs#ULiftable</a> instance for <code>Except</code> right now, which almost makes it possible to write the above</p>",
        "id": 381570562,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691085395
    },
    {
        "content": "<p>The next problem is that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.instFromJsonProd#doc\">docs#Lean.instFromJsonProd</a> it's called <del>isn't universe polymorphic</del> has had the wrong universes inferred!</p>",
        "id": 381570723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691085435
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/pull/6350\">mathlib4#6350</a></p>",
        "id": 381575729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691086529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, here's a working version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Control.ULiftable</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">ULiftable</span> <span class=\"o\">(</span><span class=\"n\">Except.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Except.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">congr</span> <span class=\"n\">e</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">toFun</span> <span class=\"o\">:=</span> <span class=\"n\">Except.map</span> <span class=\"n\">e</span>\n      <span class=\"n\">invFun</span> <span class=\"o\">:=</span> <span class=\"n\">Except.map</span> <span class=\"n\">e.symm</span>\n      <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Except.map</span><span class=\"o\">]</span>\n      <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">f</span> <span class=\"bp\">=&gt;</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Except.map</span><span class=\"o\">]</span>  <span class=\"o\">}</span>\n\n<span class=\"c1\">-- fails: this expects `α β : Type (max u v)`!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.instFromJsonProd</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Json.arr</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">ja</span><span class=\"o\">,</span> <span class=\"n\">jb</span><span class=\"o\">]</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">ULiftable.up</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">ja</span>\n      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">ULiftable.up</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">jb</span>\n      <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"n\">j</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">throw</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"expected pair, got '{j}'\"</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">FromJson</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">Foo.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">fromJson</span><span class=\"bp\">?</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">ULift.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"n\">ULiftable.up</span> <span class=\"o\">(</span><span class=\"n\">j.getObjValAs</span><span class=\"bp\">?</span> <span class=\"n\">α</span> <span class=\"s2\">\"x\"</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">←</span> <span class=\"n\">j.getObjValAs</span><span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"s2\">\"y\"</span>\n    <span class=\"n\">return</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">y</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 381576775,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691086786
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2382\">lean4#2382</a> fixes the error in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.instFromJsonProd#doc\">docs#Lean.instFromJsonProd</a> (which was also caused by <code>autoImplicit</code>s)</p>",
        "id": 381579400,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691087484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20at.20universe.20constraint.20FromJson/near/381570470\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20at.20universe.20constraint.20FromJson/near/381567153\">said</a>:</p>\n<blockquote>\n<p>Not just <code>do</code> notation but all of the monad notation, right?</p>\n</blockquote>\n<p>yeah, the monad typeclasses are not univ polymorphic</p>\n</blockquote>\n<p>The core monad classes (e.g., <code>Monad</code>, <code>Alternative</code>, <code>MonadReader</code>,<code>MonadState</code>, and <code>MonadExcept</code>) are all universe polymorphic. And  <code>do</code> notation support \"technically\" supports universe polymorphism. The problem is the two key building blocks, <code>Bind</code> and <code>Seq</code>, are not <em>heterogenous</em> and thus do not support chaining monads of different universes (without one lifting to the other).</p>",
        "id": 381589621,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691090368
    },
    {
        "content": "<p>yeah i guess i should have said not universe polymorphic enough <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 381590046,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1691090499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/270676-lean4/topic/Stuck.20at.20universe.20constraint.20FromJson/near/381555640\">said</a>:</p>\n<blockquote>\n<p>This gives</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.554</span> <span class=\"bp\">?</span><span class=\"n\">u.619</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">u.620</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.619</span> <span class=\"bp\">?</span><span class=\"n\">u.620</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"o\">(</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"o\">(</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">FromJson</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">))</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This message is nonsense, right? The expressions it refers to don't typecheck! Is there an open issue about this?</p>",
        "id": 383072105,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691526497
    },
    {
        "content": "<p>Hovering over them in the goal view gives <code>Error: Rpc error: InternalError: function expected</code></p>",
        "id": 383072248,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691526540
    },
    {
        "content": "<p>I have seen this issue before</p>",
        "id": 383072272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691526545
    },
    {
        "content": "<p>we shouldn't expect it to completely type check, especially if it's reporting on a type error, but I have it apply functions on total nonsense</p>",
        "id": 383072369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691526572
    },
    {
        "content": "<p>like using the type of a function instead of a function itself</p>",
        "id": 383072429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691526585
    },
    {
        "content": "<p>which looks like the issue here</p>",
        "id": 383072657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691526631
    },
    {
        "content": "<p>can you make a MWE?</p>",
        "id": 383072676,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691526638
    },
    {
        "content": "<p>The example at the top of this thread is a Lean-only MWE</p>",
        "id": 383193218,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1691570608
    }
]