[
    {
        "content": "<p>What's the state of the art for making http(s) requests using lean4? I remember that someone was working on an http library a while ago, but I can't seem to find it. Is this the best approach? If I understand correctly, lake has some wrappers around curl for such requests, is that right?</p>",
        "id": 326482125,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675814785
    },
    {
        "content": "<p><a href=\"https://github.com/xubaiw/Socket.lean/tree/main/examples/http-server\">https://github.com/xubaiw/Socket.lean/tree/main/examples/http-server</a> ?</p>",
        "id": 326482383,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1675814930
    },
    {
        "content": "<p>yeah I think that's the repo I was thinking of. Thanks. I guess what I'm looking for is something with a similar functionality as python's requests package.</p>",
        "id": 326482657,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675815076
    },
    {
        "content": "<p>I suppose such a thing doesn't exist.</p>",
        "id": 326482674,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1675815085
    },
    {
        "content": "<p>Such a thing does indeed not exist yet.</p>",
        "id": 326517090,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1675839961
    },
    {
        "content": "<p>The repo you linked above archived now. Are there “serious” lean4 libraries for Sockets/TCP/HTTP already?</p>",
        "id": 385710075,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692289109
    },
    {
        "content": "<p>Not that I know of but this is something I seriously considered doing, I gave up thinking that somebody with better knowledge than me would eventually do it. I'm still very interested though!</p>",
        "id": 385712655,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1692290003
    },
    {
        "content": "<p>The above is the only one that I am aware of. And getting this done in an async fashion is even further out of reach right now.</p>",
        "id": 385712663,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692290007
    },
    {
        "content": "<p>That said my reason for not doing it is the same as <span class=\"user-mention\" data-user-id=\"119741\">@François G. Dorais</span> so maybe someone <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> should just do it :D</p>",
        "id": 385715147,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692290928
    },
    {
        "content": "<p>Presumably it should be relatively easy to make a wrapper around the curl c api</p>",
        "id": 385768367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692315002
    },
    {
        "content": "<p>Anyway, it would be great to have such a thing.</p>",
        "id": 385768496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692315070
    },
    {
        "content": "<p>As far as I know, <a href=\"https://github.com/lurk-lab/Http.lean\">https://github.com/lurk-lab/Http.lean</a> is state of the art (and building on a fork of repo archived above)</p>",
        "id": 385820652,
        "sender_full_name": "Pim Otte",
        "timestamp": 1692334311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/385715147\">said</a>:</p>\n<blockquote>\n<p>That said my reason for not doing it is the same as <span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> so maybe someone <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> should just do it :D</p>\n</blockquote>\n<p>I'll do it to learn alloy now^^</p>",
        "id": 386145235,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692479435
    },
    {
        "content": "<p>Developing a proper HTTP request API for Lean 4 is definitely something I've wanted to do for a while. If someone is going to spearhead such a project and needs an extra pair of hands, just ping me or send a DM</p>",
        "id": 386148370,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1692481845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> i've got this setup so far: <a href=\"https://github.com/hargoniX/socket.lean\">https://github.com/hargoniX/socket.lean</a> and I tried to compile just to see if it works and am getting </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_32S</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"kn\">local</span> <span class=\"n\">symbol</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Socket.alloy.c.o</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">Socket.alloy.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Socket.alloy.c.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mk_socket</span><span class=\"o\">)</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_32S</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"kn\">local</span> <span class=\"n\">symbol</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Socket.alloy.c.o</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">Socket.alloy.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Socket.alloy.c.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mk_socket</span><span class=\"o\">)</span>\n\n<span class=\"n\">ld.lld</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">relocation</span> <span class=\"n\">R_X86_64_32</span> <span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">against</span> <span class=\"kn\">local</span> <span class=\"n\">symbol</span><span class=\"bp\">;</span> <span class=\"n\">recompile</span> <span class=\"k\">with</span> <span class=\"bp\">-</span><span class=\"n\">fPIC</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">defined</span> <span class=\"k\">in</span> <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Socket.alloy.c.o</span>\n<span class=\"bp\">&gt;&gt;&gt;</span> <span class=\"n\">referenced</span> <span class=\"kd\">by</span> <span class=\"n\">Socket.alloy.c</span>\n<span class=\"bp\">&gt;&gt;&gt;</span>               <span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">ir</span><span class=\"bp\">/</span><span class=\"n\">Socket.alloy.c.o</span><span class=\"o\">:(</span><span class=\"n\">lean_mk_socket</span><span class=\"o\">)</span>\n<span class=\"n\">clang</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">linker</span> <span class=\"n\">command</span> <span class=\"n\">failed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">-</span><span class=\"n\">v</span> <span class=\"n\">to</span> <span class=\"n\">see</span> <span class=\"n\">invocation</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-19/bin/leanc` exited with code 1</span>\n</code></pre></div>\n<p>any idea? do I have to sneak -fPIC in?</p>",
        "id": 386150195,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692483706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I would certainly give<code>-fPIC</code> a try (via <code>moreLeancArgs</code>).</p>",
        "id": 386150294,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692483838
    },
    {
        "content": "<p>That seems to work indeed</p>",
        "id": 386150348,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692483874
    },
    {
        "content": "<p>Can a linker magician tell me why I need FPIC? :D</p>",
        "id": 386150354,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692483882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>  It sounds like it may be due to mixing shared and static libraries based on this <a href=\"https://stackoverflow.com/questions/13812185/how-to-recompile-with-fpic\">StackOverflow question</a>.</p>",
        "id": 386150490,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692484048
    },
    {
        "content": "<p>However, I am curious why I never encountered this problem in the Alloy S test.</p>",
        "id": 386150555,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692484093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> A more generally comment on your code. One of the advantages of Alloy is that C code is now Lean code, so you can use  Lean metaprogramming to generate definitions. For instance, you could define some custom syntax/elaborator to map your enums to C and back instead of having to write it all manually.</p>",
        "id": 386150712,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692484296
    },
    {
        "content": "<p>Oh <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> that's a good idea yeah, i'll try that</p>",
        "id": 386150803,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692484377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Also, if anything breaks, report it!  I have only tested Alloy on a few examples, so you are essentially an Alloy beta tester. Thus,  I would appreciate any feedback you can provide (both bugs and feature requests). Also, do not be hesitant to blame any breakage on Alloy. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 386151058,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692484666
    },
    {
        "content": "<p>:D sure!</p>",
        "id": 386151104,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692484685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> I have one right away!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"kn\">section</span>\n      <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"bp\">$</span><span class=\"n\">cType</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ffiType</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n      <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n   <span class=\"o\">)</span>\n</code></pre></div>\n<p>where </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">ffiType</span> <span class=\"o\">:</span> <span class=\"n\">Ident</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ffiType.raw</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">ffiType</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Ident</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">Alloy.C.pointer</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>is there a nice way to make these or do I go the raw route?</p>",
        "id": 386152578,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692486436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Could you give a full <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? (i.e., with an example of what <code>cType</code> and <code>leanToC</code> are as well)</p>",
        "id": 386152798,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692486680
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"alloy\"</span> <span class=\"s2\">\"c\"</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"translators\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"where\"</span> <span class=\"o\">(</span><span class=\"s2\">\"| \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">cType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">translators</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↔</span> <span class=\"bp\">$</span><span class=\"n\">cToLean</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">leanVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">cVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiType</span> <span class=\"bp\">←</span>\n    <span class=\"k\">if</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">uint8_t</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">uint16_t</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">uint32_t</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Enum {name} has more than 2^32 variants, this is not supported\"</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span>\n    <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"kn\">section</span>\n      <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"bp\">$</span><span class=\"n\">cType</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ffiType</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n   <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 386152819,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692486714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> It is clear I am missing some <code>TSyntax</code> <code>Coe</code> instance, the question is: which ones/ Currently working on it.</p>",
        "id": 386153343,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692487334
    },
    {
        "content": "<p>I'll use the fast forward button (formely known as \"sleeping\") in that case :P</p>",
        "id": 386153359,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692487364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Having finished investigating, this is actually just due to ambiguities of the C grammar. You just need to be explicit about the syntax kind:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"bp\">$</span><span class=\"n\">cType</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ffiType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{}</span>\n</code></pre></div>",
        "id": 386153842,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692487913
    },
    {
        "content": "<p>Also, out of curiosity, <span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span>, are you making use of Alloy's <code>clangd</code> LSP integration (i.e., do you see semantic highlighting, hovers, go-to-def,  etc. in C code)?</p>",
        "id": 386171210,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692496393
    },
    {
        "content": "<p>After seeing your message I tried it in loogle (by changing the nix shell to use the clang-stdenv, so any problems may be nix-related), but I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"o\">(</span><span class=\"n\">version</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"bp\">-</span><span class=\"n\">nightly</span><span class=\"bp\">-</span><span class=\"mi\">2023</span><span class=\"bp\">-</span><span class=\"mi\">08</span><span class=\"bp\">-</span><span class=\"mi\">15</span><span class=\"o\">,</span> <span class=\"n\">commit</span> <span class=\"n\">b5a736708f40</span><span class=\"o\">,</span> <span class=\"n\">Release</span><span class=\"o\">)</span>\n<span class=\"n\">E</span><span class=\"o\">[</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span><span class=\"mi\">06</span><span class=\"bp\">.</span><span class=\"mi\">889</span><span class=\"o\">]</span> <span class=\"n\">Trying</span> <span class=\"n\">to</span> <span class=\"n\">remove</span> <span class=\"n\">file</span> <span class=\"k\">from</span> <span class=\"n\">TUScheduler</span> <span class=\"n\">that</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">tracked</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">dev</span><span class=\"bp\">/</span><span class=\"n\">null</span>\n<span class=\"o\">[</span><span class=\"n\">Error</span> <span class=\"bp\">-</span> <span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"o\">:</span><span class=\"mi\">06</span><span class=\"o\">]</span> <span class=\"n\">Request</span> <span class=\"n\">textDocument</span><span class=\"bp\">/</span><span class=\"n\">semanticTokens</span><span class=\"bp\">/</span><span class=\"n\">range</span> <span class=\"n\">failed.</span>\n  <span class=\"n\">Message</span><span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">language</span> <span class=\"n\">server</span> <span class=\"n\">request</span> <span class=\"mi\">3</span> <span class=\"n\">failed</span><span class=\"o\">:</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">get</span> <span class=\"n\">AST</span> <span class=\"n\">for</span> <span class=\"n\">non</span><span class=\"bp\">-</span><span class=\"n\">added</span> <span class=\"n\">document</span>\n  <span class=\"n\">Code</span><span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">32602</span>\n</code></pre></div>",
        "id": 386200107,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692520586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386171210\">said</a>:</p>\n<blockquote>\n<p>Also, out of curiosity, <span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span>, are you making use of Alloy's <code>clangd</code> LSP integration (i.e., do you see semantic highlighting, hovers, go-to-def,  etc. in C code)?</p>\n</blockquote>\n<p>I do see proper highlighting of the code yes, didn't try the rest yet</p>",
        "id": 386201883,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692522030
    },
    {
        "content": "<p>I present the final:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">cType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">translators</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↔</span> <span class=\"bp\">$</span><span class=\"n\">cToLean</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">leanVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">cVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">ffiType</span> <span class=\"bp\">←</span>\n    <span class=\"k\">if</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">uint8_t</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">16</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">uint16_t</span>\n    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">&lt;=</span> <span class=\"mi\">2</span><span class=\"bp\">^</span><span class=\"mi\">32</span> <span class=\"k\">then</span>\n      <span class=\"n\">pure</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">uint32_t</span>\n    <span class=\"k\">else</span>\n      <span class=\"n\">Macro.throwError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Enum {name} has more than 2^32 variants, this is not supported\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">counter</span> <span class=\"o\">:=</span> <span class=\"n\">Array.range</span> <span class=\"n\">leanVariant.size</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">Syntax.mkNumLit</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">toString</span> <span class=\"bp\">·</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"kd\">inductive</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span> <span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">leanVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">]</span><span class=\"bp\">*</span>\n    <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"kn\">section</span>\n      <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"bp\">$</span><span class=\"n\">cType</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ffiType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"bp\">$</span><span class=\"o\">[</span>\n            <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"n\">counter</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"o\">:</span>\n              <span class=\"n\">return</span> <span class=\"bp\">$</span><span class=\"n\">cVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">;</span>\n          <span class=\"o\">]</span><span class=\"bp\">*</span>\n          <span class=\"n\">default</span><span class=\"o\">:</span>\n            <span class=\"n\">lean_panic_fn</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"illegal C value\"</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"bp\">$</span><span class=\"n\">ffiType</span> <span class=\"bp\">$</span><span class=\"n\">cToLean</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cType</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">switch</span> <span class=\"o\">(</span><span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"bp\">$</span><span class=\"o\">[</span>\n            <span class=\"n\">case</span> <span class=\"bp\">$</span><span class=\"n\">cVariant</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">:</span>\n              <span class=\"n\">return</span> <span class=\"bp\">$</span><span class=\"n\">counter</span><span class=\"o\">:</span><span class=\"n\">num</span><span class=\"bp\">;</span>\n          <span class=\"o\">]</span><span class=\"bp\">*</span>\n          <span class=\"n\">default</span><span class=\"o\">:</span>\n            <span class=\"n\">lean_panic_fn</span><span class=\"o\">(</span><span class=\"n\">lean_box</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">lean_mk_string</span><span class=\"o\">(</span><span class=\"s2\">\"illegal Lean value\"</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n   <span class=\"o\">)</span>\n</code></pre></div>\n<p>Sadly all of those annotations are necessary right now. But I'm quite happy it just seems to work out! The highlighting also works very nicely!</p>\n<p><a href=\"/user_uploads/3121/dIPA0zmz9zccdlBar52rG9zW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/dIPA0zmz9zccdlBar52rG9zW/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/dIPA0zmz9zccdlBar52rG9zW/image.png\"></a></div>",
        "id": 386206749,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692525779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> I added a many more coercions last night and one more right now which allowed me to get  it down to this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">case</span><span class=\"w\"> </span><span class=\"no\">$counter</span><span class=\"p\">:</span><span class=\"n\">constExpr</span><span class=\"o\">:</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">$cVariant</span><span class=\"p\">;</span>\n<span class=\"p\">[...]</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"no\">$cVariant</span><span class=\"p\">:</span><span class=\"n\">constExpr</span><span class=\"o\">:</span>\n<span class=\"w\">   </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">$counter</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>But sadly many of those annotations don't seem removable.</p>",
        "id": 386213494,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692531054
    },
    {
        "content": "<p>That's fine for me right now, If you know about it it becomes trivial^^</p>\n<p>I do have a second idea already as well, for the sockaddr_in and sockaddr_in6 i essentially just need to manage a void pointer with Lean so I wrote this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\"alloy\"</span> <span class=\"s2\">\"c\"</span> <span class=\"s2\">\"alloc\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"as\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"translators\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"finalize\"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">alloc</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">cName</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">as</span> <span class=\"bp\">$</span><span class=\"n\">externClass</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">translators</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">↔</span> <span class=\"bp\">$</span><span class=\"n\">cToLean</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">finalize</span> <span class=\"bp\">$</span><span class=\"n\">finalizer</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">nonemptyType</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdent</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">name.getId.append</span> <span class=\"bp\">`</span><span class=\"n\">nonemptyType</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span>\n    <span class=\"n\">opaque</span> <span class=\"bp\">$</span><span class=\"n\">nonemptyType</span> <span class=\"o\">:</span> <span class=\"n\">NonemptyType</span>\n    <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">NonemptyType.type</span> <span class=\"bp\">$</span><span class=\"n\">nonemptyType</span>\n    <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Nonempty</span> <span class=\"bp\">$</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">Subtype.property</span> <span class=\"bp\">$</span><span class=\"n\">nonemptyType</span>\n\n    <span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"kn\">section</span>\n      <span class=\"n\">static</span> <span class=\"n\">lean_external_class</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">externClass</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"n\">NULL</span><span class=\"bp\">;</span>\n\n      <span class=\"n\">static</span> <span class=\"n\">void</span> <span class=\"bp\">$</span><span class=\"n\">finalizer</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"n\">void</span><span class=\"bp\">*</span> <span class=\"n\">ptr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">free</span><span class=\"o\">((</span><span class=\"bp\">$</span><span class=\"n\">cName</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"n\">ptr</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"n\">lean_object</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">cToLean</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cName</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"n\">ptr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">externClass</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">==</span> <span class=\"n\">NULL</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"bp\">$</span><span class=\"n\">externClass</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"bp\">=</span> <span class=\"n\">lean_register_external_class</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">finalizer</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"n\">NULL</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">return</span> <span class=\"n\">lean_alloc_external</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">externClass</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"n\">ptr</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n      <span class=\"o\">}</span>\n\n      <span class=\"n\">static</span> <span class=\"n\">inline</span> <span class=\"bp\">$</span><span class=\"n\">cName</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span> <span class=\"bp\">$</span><span class=\"n\">leanToC</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">(</span><span class=\"n\">b_lean_obj_arg</span> <span class=\"n\">ptr</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">cName</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"bp\">*</span><span class=\"o\">)(</span><span class=\"n\">lean_get_external_data</span><span class=\"o\">(</span><span class=\"n\">ptr</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n      <span class=\"o\">}</span>\n    <span class=\"kd\">end</span>\n  <span class=\"o\">)</span>\n</code></pre></div>\n<p>used like so</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">alloc</span> <span class=\"n\">SockAddr4</span> <span class=\"bp\">=</span> <span class=\"n\">sockaddr_in</span> <span class=\"n\">as</span> <span class=\"n\">g_sockaddr_in_external_class</span> <span class=\"n\">translators</span> <span class=\"n\">sockaddr_in_to_lean</span> <span class=\"bp\">↔</span> <span class=\"n\">lean_to_sockaddr_in</span> <span class=\"n\">finalize</span> <span class=\"n\">sockaddr_in_finalize</span>\n</code></pre></div>\n<p>which gives me the new and exciting!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">command</span> <span class=\"n\">is</span> <span class=\"n\">ill</span><span class=\"bp\">-</span><span class=\"n\">formed</span> <span class=\"o\">(</span><span class=\"n\">cannot</span> <span class=\"n\">be</span> <span class=\"n\">reprinted</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>how do I go from here? :D</p>",
        "id": 386213936,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692531385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> To fix it, use <code>$cToLean:ident($cName* ptr)</code> instead of <code>$cToLean:ident($cName:ident* ptr)</code>. Why this is happening I am not quite sure.</p>",
        "id": 386214612,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532018
    },
    {
        "content": "<p>Somehow the annotation is producing some syntax it cannot reprint.</p>",
        "id": 386214628,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532040
    },
    {
        "content": "<p>That works indeed, next question! Since <code>sockaddr_in</code> is a <code>struct</code> that is not typedef-ed I need to <code>struct sockaddr_in</code> in my generated C code. What is the proper category to replace <code>ident</code> on the <code>cName</code> variable with? <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span></p>",
        "id": 386215099,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692532397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> If you update, it should figure that one out automatically (I tested that so it should hopefully work).</p>",
        "id": 386215192,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532475
    },
    {
        "content": "<p>(For reference though, the kind is <code>aggrSig</code>.)</p>",
        "id": 386215212,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532501
    },
    {
        "content": "<p>Is it not cTypeSpec?</p>",
        "id": 386215234,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692532525
    },
    {
        "content": "<p>Oh, maybe I am misunderstanding. What do you want to exactly?</p>",
        "id": 386215303,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532565
    },
    {
        "content": "<p>I thought you just wanted to do <code>struct $var:kind</code></p>",
        "id": 386215312,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532584
    },
    {
        "content": "<p>Ah that is also an option yes. But I was thinking about keeping it generic maybe? So turning:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">scoped</span> <span class=\"n\">syntax</span> <span class=\"s2\">\"alloy\"</span> <span class=\"s2\">\"c\"</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"translators\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" ↔ \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"where\"</span> <span class=\"o\">(</span><span class=\"s2\">\"| \"</span> <span class=\"n\">ident</span> <span class=\"s2\">\" = \"</span> <span class=\"n\">ident</span><span class=\"o\">)</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>into a syntax that accepts (syntactically) both:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">alloc</span> <span class=\"n\">SockAddr4</span> <span class=\"bp\">=</span> <span class=\"n\">sockaddr_in</span> <span class=\"n\">as</span> <span class=\"n\">struct</span> <span class=\"n\">g_sockaddr_in_external_class</span> <span class=\"n\">translators</span> <span class=\"n\">sockaddr_in_to_lean</span> <span class=\"bp\">↔</span> <span class=\"n\">lean_to_sockaddr_in</span> <span class=\"n\">finalize</span> <span class=\"n\">sockaddr_in_finalize</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">alloc</span> <span class=\"n\">SockAddr4</span> <span class=\"bp\">=</span> <span class=\"n\">sockaddr_in</span> <span class=\"n\">as</span> <span class=\"n\">g_sockaddr_in_external_class</span> <span class=\"n\">translators</span> <span class=\"n\">sockaddr_in_to_lean</span> <span class=\"bp\">↔</span> <span class=\"n\">lean_to_sockaddr_in</span> <span class=\"n\">finalize</span> <span class=\"n\">sockaddr_in_finalize</span>\n</code></pre></div>\n<p>such that a user is not necessarily forced to use it with structs</p>",
        "id": 386215366,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692532670
    },
    {
        "content": "<p>So my question is what do I have to replace the second <code>ident</code> in the <code>syntax</code> decl with such that it captures <code>struct sockaddr_in</code> and also just a basic <code>sockaddr_in</code>? Or in general any valid c type I guess.</p>",
        "id": 386215434,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692532713
    },
    {
        "content": "<p>Oh, that is actually a bit complicated depending on the generality you are going for. The C grammar is weird.</p>",
        "id": 386215630,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532868
    },
    {
        "content": "<p><span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> maybe just <code>struct ident</code> and <code>ident</code> then? :D Do we have something for that?</p>",
        "id": 386215718,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692532927
    },
    {
        "content": "<p>However, I think in your case what you want is <code>cDeclSpec+</code>.</p>",
        "id": 386215739,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692532947
    },
    {
        "content": "<p>O_o why the <code>+</code>?</p>",
        "id": 386215763,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692532980
    },
    {
        "content": "<p>What makes it interesting is you then want to to put a pointer after it, which happens to be be the convenient boundary point.</p>",
        "id": 386215801,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692533007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386215763\">said</a>:</p>\n<blockquote>\n<p>O_o why the <code>+</code>?</p>\n</blockquote>\n<p>Because your presumable also want to accept thins like <code>const struct sockaddr_in</code>.</p>",
        "id": 386215967,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692533160
    },
    {
        "content": "<p>however, if you do just want plain types, you are correct that the category is<code>cTypeSpec</code>.</p>",
        "id": 386216178,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692533234
    },
    {
        "content": "<p>Hurray it works indeed. This is the most fun i've had with C in a while :D</p>",
        "id": 386216381,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692533316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> It is worth noting that this will not accept a pointer type like <code>char*</code> for instance.</p>",
        "id": 386216440,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692533354
    },
    {
        "content": "<p>I hope that I won't want to box pointers for now :D</p>",
        "id": 386216483,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692533378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Well, with that done, I will myself be heading to sleep myself (that is time zone differences for you).</p>",
        "id": 386216653,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692533504
    },
    {
        "content": "<p>Happy I was able to help you have some fun with C!</p>",
        "id": 386216706,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692533527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> One final note: For <code>lean_register_external_class</code>, I was under the impression you had to provide handler for both (i.e., <code>NULL</code> was not a valid option). If you want it to be a no-op, you needed to define a no-op handler.</p>",
        "id": 386217302,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692534015
    },
    {
        "content": "<p>I might have found a bug in your grammar now^^</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">IPv4Addr</span> <span class=\"o\">:=</span> <span class=\"n\">UInt32</span>\n<span class=\"kd\">def</span> <span class=\"n\">IPv4Addr.mk</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"n\">second</span> <span class=\"n\">third</span> <span class=\"n\">fourth</span> <span class=\"o\">:</span> <span class=\"n\">UInt8</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IPv4Addr</span> <span class=\"o\">:=</span>\n  <span class=\"n\">first.toUInt32</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">24</span> <span class=\"bp\">|||</span> <span class=\"n\">second.toUInt32</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">16</span> <span class=\"bp\">|||</span> <span class=\"n\">third.toUInt32</span> <span class=\"bp\">&lt;&lt;&lt;</span> <span class=\"mi\">8</span> <span class=\"bp\">|||</span> <span class=\"n\">fourth.toUInt32</span>\n\n<span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">extern</span> <span class=\"s2\">\"lean_mk_sockaddr_in\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">SockAddr4.mk</span> <span class=\"o\">(</span><span class=\"n\">ip</span> <span class=\"o\">:</span> <span class=\"n\">IPv4Addr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">port</span> <span class=\"o\">:</span> <span class=\"n\">UInt16</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">struct</span> <span class=\"n\">sockaddr_in</span><span class=\"bp\">*</span> <span class=\"n\">sa</span> <span class=\"bp\">=</span> <span class=\"n\">malloc</span><span class=\"o\">(</span><span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">struct</span> <span class=\"n\">sockaddr_in</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n   <span class=\"bp\">.......</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>This fails to parse but if I turn the <code>malloc</code> into: <code>malloc(sizeof(sockaddr_in))</code> it parses although now the c compiler is of course very unhappy. I'll work around it with a typedef for now.</p>",
        "id": 386219028,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692535087
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/WmH1Ijp843jQ-b6Aej841TNE/image.png\">image.png</a><br>\n<span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/WmH1Ijp843jQ-b6Aej841TNE/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/WmH1Ijp843jQ-b6Aej841TNE/image.png\"></a></div>",
        "id": 386236301,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692545674
    },
    {
        "content": "<p>This is a nice thread, it's great to see what is already possible. We should also document what is missing in the FFI to make this feasible purely in Lean.</p>",
        "id": 386238791,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692547771
    },
    {
        "content": "<p>To make what exactly feasible purely in Lean? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> Do you want to get to the point where we don't have to write C at all?</p>",
        "id": 386239389,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692548315
    },
    {
        "content": "<p>Yes, that's what I would expect from a complete FFI, no?</p>",
        "id": 386239516,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692548450
    },
    {
        "content": "<p>Hm, not really no. For example in OCaml it is very common to write C code still. They also have absolutely awesome docs on their FFI: <a href=\"https://v2.ocaml.org/manual/intfc.html\">https://v2.ocaml.org/manual/intfc.html</a> I think if we can get to the level of this document we should be fine for a while^^</p>",
        "id": 386239668,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692548554
    },
    {
        "content": "<p>So OCaml supports only homogeneous <code>value</code> FFI signatures? We are already beyond that, and I see no reason not to move even further.</p>",
        "id": 386240481,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692549366
    },
    {
        "content": "<p>No, they do also have unboxed values (namely everything &lt;= 63 bit can be unboxed, 63 because the 64th bit is used for the box/unbox tag) and external allocations just like we do. They also have a bunch of special stuff like float arrays without indirection just like we do. In general I feel like modulo the garbage collector vs RC stuff our FFI is actually not that different from OCaml.</p>\n<p>And on top of that they have Eisenberg (the GHC Eisenberg) working on more unboxed stuff at JaneStreet so I would expect something to come out of that in the not too distant future as well.</p>",
        "id": 386241123,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692549951
    },
    {
        "content": "<blockquote>\n<p>User primitives with arity n ≤ 5 are implemented by C functions that take n arguments of type value, and return a result of type value</p>\n</blockquote>\n<p>This seems quite clear to me. In any case, OCaml appears to be a relative outlier here, I can't think of any other compiled language that wants you to write C code for interfacing (of course, OCaml is not <em>exclusively</em> compiled, which might be one reason for this design).</p>",
        "id": 386241430,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692550204
    },
    {
        "content": "<p>You will find many libraries in the Haskell ecosystem that uses generated c compatibility shims e g <a href=\"https://github.com/haskell/hsc2hs\">https://github.com/haskell/hsc2hs</a> generates c code, too</p>",
        "id": 386242075,
        "sender_full_name": "MangoIV",
        "timestamp": 1692550702
    },
    {
        "content": "<p>Which languages are you thinking about here? The ones that come to mind for me instantly would be C, C++, Rust, Golang and Haskell.<br>\nC/C++ are obviously not relevant here.</p>\n<p>With Rust you can do everything in Rust indeed but they also have support for C constructs that we don't afaik?:</p>\n<ul>\n<li>directly integrated pointers</li>\n<li>unions</li>\n<li>the <code>#[repr(C)]</code></li>\n<li>on top of that you usually use an FFI generator but that's more of a bonus. </li>\n</ul>\n<p>Golang has <code>cgo</code> which is effectively an FFI generator that spits out both golang and C files as well.</p>\n<p>For haskell I don't quite know what they do</p>",
        "id": 386242080,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692550716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386239516\">said</a>:</p>\n<blockquote>\n<p>Yes, that's what I would expect from a complete FFI, no?</p>\n</blockquote>\n<p>While a great feature, having it would be surprising. Rust is the only language I know of that has something close to this and that is because it supports exact C calling conventions and data representations (so you do essentially write C in Rust). Every other major language language I know of, both compiled and interpreted, use C shims to fill in gaps in the FFI: Haskell, Java, PHP, Python, Ruby, JavaScript,  , etc.</p>",
        "id": 386258105,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692564333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386219028\">said</a>:</p>\n<blockquote>\n<p>I might have found a bug in your grammar now^^</p>\n</blockquote>\n<p>Fixed. This grammar mistake was a result of me misreading a formatting error in Microsoft's <a href=\"https://learn.microsoft.com/en-us/cpp/c-language/summary-of-expressions?view=msvc-170\">C Language Syntax Summary</a>. Its grammar for the type-based <code>sizeof</code> is written as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>unary-expression:\n postfix-expression\n ++ unary-expression\n -- unary-expression\n unary-operator cast-expression\n sizeof unary-expression\n sizeof ( type-name )  _Alignof ( type-name )\n</code></pre></div>\n<p>Where the final <code>sizeof</code> and <code>_Alignof</code> should be on separate lines.</p>",
        "id": 386259559,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692565441
    },
    {
        "content": "<p>I have new cursed stuff for you! <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> The manpages for unix domain sockets demonstrate this syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">strncpy</span><span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"bp\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"o\">,</span> <span class=\"n\">lean_string_cstr</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">),</span> <span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"bp\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n</code></pre></div>\n<p>like so for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">extern</span> <span class=\"s2\">\"lean_mk_sockaddr_un\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">SockAddrUnix.unix</span> <span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">System.FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SockAddrUnix</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">struct</span> <span class=\"n\">sockaddr_un</span><span class=\"bp\">*</span> <span class=\"n\">sa</span> <span class=\"bp\">=</span> <span class=\"n\">malloc</span><span class=\"o\">(</span><span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">struct</span> <span class=\"n\">sockaddr_un</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"n\">sa</span><span class=\"bp\">-&gt;</span><span class=\"n\">sun_family</span> <span class=\"bp\">=</span> <span class=\"n\">AF_UNIX</span><span class=\"bp\">;</span>\n  <span class=\"n\">strncpy</span><span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"bp\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"o\">,</span> <span class=\"n\">lean_string_cstr</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">),</span> <span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"bp\">-&gt;</span><span class=\"n\">sun_path</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">return</span> <span class=\"n\">sockaddr_un_to_lean</span><span class=\"o\">(</span><span class=\"n\">sa</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>your sizeof grammar does not approve</p>",
        "id": 386667046,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692727132
    },
    {
        "content": "<p>What goes wrong? <code>(sa-&gt;sun_path)</code> is a fine <code>unary-expression</code>, and <code>(sa-&gt;sun_path) - 1</code> is not; and <code>sa-&gt;sun_path</code> isn't a <code>type-name</code>. (However, <code>strncpy</code> <em>is</em> cursed.)</p>",
        "id": 386670206,
        "sender_full_name": "Richard Copley",
        "timestamp": 1692728427
    },
    {
        "content": "<p>It complains at the <code>-</code> of the <code>-&gt;sun_path</code> that it expects a <code>)</code></p>",
        "id": 386670758,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692728678
    },
    {
        "content": "<p>It being alloy, so the grammar implemented in alloy still seems to be flawed</p>",
        "id": 386670806,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692728704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Fixed. My implementation was missing an <code>atomic</code>.</p>",
        "id": 386672874,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692729678
    },
    {
        "content": "<p>Yay that works</p>",
        "id": 386674029,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692730195
    },
    {
        "content": "<p>Okay I think I got a basic socket API for UNIX based systems working and documented now. Next thing would of course be <span aria-label=\"window\" class=\"emoji emoji-1fa9f\" role=\"img\" title=\"window\">:window:</span> <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> do you have a particular story for cross platform in mind with alloy? Or is it also intended as an ifdef macro massacre?</p>",
        "id": 386685047,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692734928
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> <code>ifdef</code> is how it is done in core, so at least for now, that is how I would assume FFIs would do it.</p>",
        "id": 386685222,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692735004
    },
    {
        "content": "<p>Okay. But <code>#ifdef</code> doesn't seem to work with alloy code blocks (probably given that it is not valid C but preprocessor C?) so what is the intended integration way here?</p>",
        "id": 386685552,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692735139
    },
    {
        "content": "<p>In particular also with <code>#include</code>'s given that I need to work with the win32 header files to get sockets going properly.</p>",
        "id": 386685738,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692735240
    },
    {
        "content": "<p>the lean 4 equivalent of <code>#ifdef</code> is <code>meta if</code>, not sure if it is applicable here</p>",
        "id": 386685946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692735321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386685552\">said</a>:</p>\n<blockquote>\n<p>Okay. But <code>#ifdef</code> doesn't seem to work with alloy code blocks (probably given that it is not valid C but preprocessor C?) so what is the intended integration way here?</p>\n</blockquote>\n<p>It should work. <code>#ifdef</code> is <a href=\"https://github.com/tydeu/lean4-alloy/blob/96a2c6ac7cf8d376b3c6f670306abdff4390377b/Alloy/C/Grammar.lean#L930\">part</a> of the Alloy's C grammar. Do you have an example breakage?</p>",
        "id": 386687940,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692736213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386687940\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386685552\">said</a>:</p>\n<blockquote>\n<p>Okay. But <code>#ifdef</code> doesn't seem to work with alloy code blocks (probably given that it is not valid C but preprocessor C?) so what is the intended integration way here?</p>\n</blockquote>\n<p>It should work. <code>#ifdef</code> is <a href=\"https://github.com/tydeu/lean4-alloy/blob/96a2c6ac7cf8d376b3c6f670306abdff4390377b/Alloy/C/Grammar.lean#L930\">part</a> of the Alloy's C grammar. Do you have an example breakage?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"n\">extern</span> <span class=\"s2\">\"lean_mk_socket\"</span>\n<span class=\"kd\">def</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">family</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">AddressFamily</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">type</span> <span class=\"o\">:</span> <span class=\"bp\">@&amp;</span> <span class=\"n\">Typ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Socket</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">int</span> <span class=\"n\">af</span> <span class=\"bp\">=</span> <span class=\"n\">lean_to_socket_af</span><span class=\"o\">(</span><span class=\"n\">family</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"n\">int</span> <span class=\"n\">typ</span> <span class=\"bp\">=</span> <span class=\"n\">lean_to_socket_type</span><span class=\"o\">(</span><span class=\"n\">type</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"bp\">#</span><span class=\"n\">ifdef</span> <span class=\"n\">FOO</span>\n    <span class=\"n\">int</span><span class=\"bp\">*</span> <span class=\"n\">fd</span> <span class=\"bp\">=</span> <span class=\"n\">malloc</span><span class=\"o\">(</span><span class=\"n\">sizeof</span><span class=\"o\">(</span><span class=\"n\">int</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"bp\">#</span><span class=\"n\">endif</span>\n  <span class=\"bp\">*</span><span class=\"n\">fd</span> <span class=\"bp\">=</span> <span class=\"n\">socket</span><span class=\"o\">(</span><span class=\"n\">af</span><span class=\"o\">,</span> <span class=\"n\">typ</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n  <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"n\">fd</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">free</span><span class=\"o\">(</span><span class=\"n\">fd</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">return</span> <span class=\"n\">lean_io_result_mk_error</span><span class=\"o\">(</span><span class=\"n\">lean_decode_io_error</span><span class=\"o\">(</span><span class=\"n\">errno</span><span class=\"o\">,</span> <span class=\"n\">NULL</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n    <span class=\"n\">return</span> <span class=\"n\">lean_io_result_mk_ok</span><span class=\"o\">(</span><span class=\"n\">socket_to_lean</span><span class=\"o\">(</span><span class=\"n\">fd</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 386688087,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692736279
    },
    {
        "content": "<p>Oh, yeah, I made pp directives just commands, not statements. Need to fix that.</p>",
        "id": 386688327,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692736387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Examples like yours should now work.</p>",
        "id": 386690916,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692737723
    },
    {
        "content": "<p>Nice. What about the <code>include</code> lines? Do I <code>meta if</code> those?</p>",
        "id": 386690961,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692737747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> No, this should work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">alloy</span> <span class=\"n\">c</span> <span class=\"kn\">section</span>\n<span class=\"bp\">#</span><span class=\"n\">ifdef</span> <span class=\"n\">WIN32</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">windows</span><span class=\"bp\">/</span><span class=\"n\">windows.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"k\">else</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">unistd.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"n\">endif</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 386691105,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692737818
    },
    {
        "content": "<p>Ah of course^^</p>",
        "id": 386691153,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692737842
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> do we have a story for injecting linker arguments to leanc based on platform or is this a meta if job? It's because I gotta <code>-lws2_32</code> but of course only on windows</p>",
        "id": 386709257,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692745433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> You can just us normal Lean syntax for that (i.e., <code>if Platform.isWindows then ... else ...</code>)</p>",
        "id": 386709356,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692745483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386709356\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> You can just us normal Lean syntax for that (i.e., <code>if Platform.isWindows then ... else ...</code>)</p>\n</blockquote>\n<p>I got this now: <a href=\"https://github.com/hargoniX/socket.lean/blob/main/lakefile.lean#L14\">https://github.com/hargoniX/socket.lean/blob/main/lakefile.lean#L14</a> but the flag is not properly injected into the leanc call that is used to build the alloy shim:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"mi\">89</span><span class=\"bp\">/</span><span class=\"mi\">95</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Socket</span>\n<span class=\"o\">[</span><span class=\"mi\">89</span><span class=\"bp\">/</span><span class=\"mi\">95</span><span class=\"o\">]</span> <span class=\"n\">Generating</span> <span class=\"n\">Socket</span> <span class=\"n\">alloy</span>\n<span class=\"o\">[</span><span class=\"mi\">90</span><span class=\"bp\">/</span><span class=\"mi\">95</span><span class=\"o\">]</span> <span class=\"n\">Compiling</span> <span class=\"n\">Socket</span> <span class=\"n\">alloy</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">c</span><span class=\"o\">:</span><span class=\"bp\">\\</span><span class=\"n\">Users</span><span class=\"bp\">\\</span><span class=\"n\">runneradmin</span><span class=\"bp\">\\.</span><span class=\"n\">elan</span><span class=\"bp\">\\</span><span class=\"n\">toolchains</span><span class=\"bp\">\\</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-08-19\\bin\\leanc.exe -shared -o .\\build\\lib\\Socket-1.dll .\\build\\ir\\Socket.o .\\build\\ir\\Socket.alloy.c.o -L.\\lake-packages\\alloy\\build\\lib -L.\\lake-packages\\std\\build\\lib -L.\\build\\lib -lAlloy-Util-Parser-1 -lAlloy-C-Grammar-1 -lAlloy-C-Syntax-1 -lAlloy-C-IR-1 -lAlloy-C-Shim-1 -lAlloy-Util-Extension-1 -lAlloy-C-Extension-1 -lAlloy-Util-Syntax-1 -lAlloy-Util-Binder-1 -lAlloy-C-Command-1 -lAlloy-Util-Server-Capabilities-1 -lAlloy-Util-Server-Initialize-1 -lAlloy-Util-Server-Methods-1 -lAlloy-C-Server-Clangd-1 -lAlloy-Util-Server-Worker-1 -lAlloy-C-Server-Worker-1 -lAlloy-C-Server-Utils-1 -lAlloy-Util-Server-1 -lAlloy-C-Server-Hover-1 -lAlloy-C-Server-SemanticTokens-1 -lAlloy-C-Server-1 -lAlloy-C-1 -lStd-Tactic-OpenPrivate-1 -lStd-Tactic-NoMatch-1 -lStd-Data-List-Init-Lemmas-1 -lStd-Data-Array-Init-Basic-1 -lStd-Data-Ord-1 -lStd-Data-Array-Basic-1</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>I'm assuming I have to do something additional?</p>",
        "id": 386710878,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692746481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Actually that is a bug in Lake with precompiled modules. I  did not include the module's <code>moreLinkArgs</code>. Oops!</p>",
        "id": 386712665,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692747755
    },
    {
        "content": "<p>I shall await the next nightly then^^</p>",
        "id": 386712698,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692747782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"346070\">@Tomas Skrivan</span> I suspect this will fix our eigen bindings also!</p>",
        "id": 386712712,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692747789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> However, you should still be able to build the executable.</p>",
        "id": 386712732,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692747810
    },
    {
        "content": "<p>if I add the linker flags there?</p>",
        "id": 386712753,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692747826
    },
    {
        "content": "<p>let's see</p>",
        "id": 386712819,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692747847
    },
    {
        "content": "<p>No it does seem to forcibly want to link Socket before but that's fine I have time^^</p>",
        "id": 386713422,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692748233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Could you try turning off <code>precompileModules</code>? I want to verify my suspicion that that is the problem.</p>",
        "id": 386713583,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692748348
    },
    {
        "content": "<p>sure</p>",
        "id": 386713604,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692748361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386713583\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> Could you try turning off <code>precompileModules</code>? I want to verify my suspicion that that is the problem.</p>\n</blockquote>\n<p>yes</p>",
        "id": 386714349,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692748857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Yes, it worked without <code>precompileModules</code>?</p>",
        "id": 386714816,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692749139
    },
    {
        "content": "<p>Yes</p>",
        "id": 386714822,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692749148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Thanks! <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 386714835,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692749160
    },
    {
        "content": "<p>(note that work means: it manages to pass the linker argument through, windows is of course ridiculing me and telling me that it cannot find that library)</p>\n<p>Which is why i checked the docs and for some god-forsaken reason they (<a href=\"https://learn.microsoft.com/en-us/windows/win32/winsock/creating-a-basic-winsock-application\">https://learn.microsoft.com/en-us/windows/win32/winsock/creating-a-basic-winsock-application</a>) want you to do it like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">ifndef</span> <span class=\"n\">WIN32_LEAN_AND_MEAN</span>\n<span class=\"bp\">#</span><span class=\"n\">define</span> <span class=\"n\">WIN32_LEAN_AND_MEAN</span>\n<span class=\"bp\">#</span><span class=\"n\">endif</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">windows.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">winsock2.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">ws2tcpip.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">iphlpapi.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">stdio.h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"bp\">#</span><span class=\"n\">pragma</span> <span class=\"n\">comment</span><span class=\"o\">(</span><span class=\"n\">lib</span><span class=\"o\">,</span> <span class=\"s2\">\"Ws2_32.lib\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">int</span> <span class=\"n\">main</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>and i tried that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">ifndef</span> <span class=\"n\">WIN32_LEAN_AND_MEAN</span>\n<span class=\"bp\">#</span><span class=\"n\">define</span> <span class=\"n\">WIN32_LEAN_AND_MEAN</span>\n<span class=\"bp\">#</span><span class=\"n\">endif</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">windows.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">winsock2.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">ws2tcpip.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">iphlpapi.h</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">#</span><span class=\"kn\">include</span> <span class=\"bp\">&lt;</span><span class=\"n\">stdio.h</span><span class=\"bp\">&gt;</span>\n\n<span class=\"bp\">#</span><span class=\"n\">pragma</span> <span class=\"n\">comment</span><span class=\"o\">(</span><span class=\"n\">lib</span><span class=\"o\">,</span> <span class=\"s2\">\"Ws2_32.lib\"</span><span class=\"o\">)</span>\n\n<span class=\"n\">int</span> <span class=\"n\">main</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"n\">return</span> <span class=\"mi\">0</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>but alloy does not like the pragma syntax as it aborts at the <code>\"</code> of \"ws2...\" so that's another grammar issue for your^^ <span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> </p>\n<p><span aria-label=\"fast forward\" class=\"emoji emoji-23e9\" role=\"img\" title=\"fast forward\">:fast_forward:</span></p>",
        "id": 386715339,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692749425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> Fixed.</p>",
        "id": 386716359,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692749922
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/leanprover/lean4/pull/2447\">lean4#2447</a></p>",
        "id": 386718155,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692750690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> does it suffice to checkout the latest lean, build it, and <code>/path/to/checkout/bin/lake build</code> to test this?</p>",
        "id": 386729104,
        "sender_full_name": "Siddharth Bhat",
        "timestamp": 1692755462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130575\">@Siddharth Bhat</span> Sure, you shouldn't even need to build Lean itself, just building lake with a recent Lean toolchain should work.</p>",
        "id": 386729222,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692755533
    },
    {
        "content": "<p>So... suppose I wanted to be able to handle https traffic........ I assume there's a lot of work before socket.lean could support https? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 386999240,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692854194
    },
    {
        "content": "<p>There are basically two requirements for this.</p>\n<ol>\n<li>Someone needs to write an HTTP parser. Parsing HTTP 1.1 is actually completely trivial and I claim most FP interested people on this server could get it done with parser combinators in a few days based on the RFC: <a href=\"https://www.rfc-editor.org/rfc/rfc2616\">https://www.rfc-editor.org/rfc/rfc2616</a> Implementing everything the standard tells you is another thing but many things in the HTTP 1.1 standard are very simple (deliberately). If we want a modern HTTP library we'll at least have to parse HTTP 2...if we want to do that you can throw the idea of \"deliberate simplicity\" completely out of the window since they employ lots funky mechanisms such as: Multiplexing multiple connections through the same socket as \"streams, Compressing headers in such a way that you basically only get differential update on what headers changed and many  more fun things. So getting a compliant HTTP 2 implementation is actually something where you kind of need to know what you are doing</li>\n<li>the TLS/SSL part, this is in <em>theory</em> easy as we \"just need to bind OpenSSL\" since it provides the necessary API for wrapping a regular socket with a TLS/SSL context such that the encryption/decryption just works <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span>. Then again binding OpenSSL especially in such a way that it is secure and safe is also not very trivial. However this second half can be ignored for a long while as it is rather common to have a reverse proxy like nginx today that receives the TLS connection which can then forward it to us in clear text.</li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span></p>",
        "id": 387016192,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692864151
    },
    {
        "content": "<p>Note that this topic originally was about <em>making</em> HTTP requests, not accepting them :) . For which, as pointed out, binding to libcurl should indeed be vastly easier.</p>",
        "id": 387018968,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692865420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/386200107\">said</a>:</p>\n<blockquote>\n<p>After seeing your message I tried it in loogle (by changing the nix shell to use the clang-stdenv, so any problems may be nix-related), but I get</p>\n</blockquote>\n<p>I just realized I somehow overlooked this message. Sorry! That error is unfortunately an expected one  but fortunately should not actually cause any problems.</p>",
        "id": 388047724,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693380711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I see <code>Http.lean</code> has an http parser and the relevant types -- do you think we could separate those into a package independent of <code>Socket</code>? (is the package worth reviving?)</p>",
        "id": 390058798,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694287345
    },
    {
        "content": "<p>We're not maintaining the repo right now, but feel free to open PRs to organize it in a way that you see fit and I can review</p>",
        "id": 390058904,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694287461
    },
    {
        "content": "<p>It's also, obviously, fine to maintain a fork of your own for the sake of agility on your side</p>",
        "id": 390059020,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1694287577
    },
    {
        "content": "<p>(frankly, I don't really <em>want</em> to maintain an http library, so if lurk could maintain it longterm I'd prefer that, but I suspect you're not using it right now? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span>)</p>",
        "id": 390059172,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694287764
    },
    {
        "content": "<p>I'll fork it for now, and we can figure out long term maintenance later</p>",
        "id": 390059270,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694287852
    },
    {
        "content": "<p>Interesting JEP in the context of this thread: <a href=\"https://openjdk.org/jeps/454\">https://openjdk.org/jeps/454</a></p>\n<blockquote>\n<p>Replace the brittle machinery of native methods and the Java Native Interface (JNI) with a concise, readable, and pure-Java API.</p>\n</blockquote>\n<blockquote>\n<p>JNI involves several tedious artifacts: a Java API (native methods), a C header file derived from the Java API, and a C implementation that calls the native library of interest. Java developers must work across multiple toolchains to keep platform-dependent artifacts in sync, which is especially burdensome when the native library evolves rapidly.</p>\n</blockquote>",
        "id": 390594491,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1694551867
    },
    {
        "content": "<p>Ok, I have updated and pretty much rewritten/overhauled the http library here: <a href=\"https://github.com/JamesGallicchio/http\">https://github.com/JamesGallicchio/http</a></p>",
        "id": 390782903,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694631031
    },
    {
        "content": "<p>Looks like you can remove the \"When running lake update ...\" note in the README!</p>",
        "id": 390819794,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694648591
    },
    {
        "content": "<p>wha-- I just put that there! <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 390820271,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694648923
    },
    {
        "content": "<p>wait, <a href=\"https://github.com/fgdorais/lean4-unicode-basic/blob/main/lake-manifest.json\">https://github.com/fgdorais/lean4-unicode-basic/blob/main/lake-manifest.json</a> is still out of date</p>",
        "id": 390820580,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694649152
    },
    {
        "content": "<p>Sorry, my mistake!</p>",
        "id": 390821718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694649984
    },
    {
        "content": "<p>Great example of the automatic version bumping / notification we need all across the ecosystem. :-)</p>",
        "id": 390821775,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1694650039
    },
    {
        "content": "<p>if i make enough libraries on my way to the github bot, i'll have no path forward except through!</p>",
        "id": 390823273,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694651135
    },
    {
        "content": "<p>&lt;---- I am a clown</p>",
        "id": 390823352,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694651167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"407274\">@James Gallicchio</span> <br>\nIs this ready to replace <code>curl</code> calls? If so is there an example?</p>",
        "id": 390834365,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1694656810
    },
    {
        "content": "<p>No -- part of the rewrite's purpose was to get rid of dependence on <code>Socket.lean</code>. It only defines types for representing HTTP, not how to send them over the wire. The second half is honestly pretty straightforward to do from scratch, and is somewhat opinionated on what's the best API, so it makes sense to stay separate.</p>",
        "id": 390837090,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694658547
    },
    {
        "content": "<p>I can add some examples to the README. The types are fairly straightforward, but the documentation is definitely lacking...</p>",
        "id": 390837227,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694658620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/390837090\">said</a>:</p>\n<blockquote>\n<p>No -- part of the rewrite's purpose was to get rid of dependence on <code>Socket.lean</code>. It only defines types for representing HTTP, not how to send them over the wire. The second half is honestly pretty straightforward to do from scratch, and is somewhat opinionated on what's the best API, so it makes sense to stay separate.</p>\n</blockquote>\n<p>But you don't really want to have this separation with HTTP right? Like even very basic HTTP already has a concept of keeping connections alive and things like that.</p>",
        "id": 390884026,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694681653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/390884026\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"407274\">James Gallicchio</span> <a href=\"#narrow/stream/270676-lean4/topic/http.20requests/near/390837090\">said</a>:</p>\n<blockquote>\n<p>No -- part of the rewrite's purpose was to get rid of dependence on <code>Socket.lean</code>. It only defines types for representing HTTP, not how to send them over the wire. The second half is honestly pretty straightforward to do from scratch, and is somewhat opinionated on what's the best API, so it makes sense to stay separate.</p>\n</blockquote>\n<p>But you don't really want to have this separation with HTTP right? Like even very basic HTTP already has a concept of keeping connections alive and things like that.</p>\n</blockquote>\n<p>I think separate abstraction is actually common?<br>\n<a href=\"https://crates.io/crates/http/0.2.9\">https://crates.io/crates/http/0.2.9</a></p>",
        "id": 390926495,
        "sender_full_name": "Schrodinger ZHU Yifan",
        "timestamp": 1694696825
    },
    {
        "content": "<p>Interesting I see</p>",
        "id": 390929253,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1694697701
    },
    {
        "content": "<p>yeah an HTTP <em>server</em> is super complicated compared to anything in this package</p>",
        "id": 390965047,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1694704959
    }
]