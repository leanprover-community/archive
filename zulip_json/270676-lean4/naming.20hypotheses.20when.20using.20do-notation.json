[
    {
        "content": "<p>I looked into the documentation (doc/do.md) but I didn't find anything... still using <code>fact</code> as my running example, consider the two styles below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">checked_sub</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact3</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">checked_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n      <span class=\"n\">fact3</span> <span class=\"n\">y</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact3</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact4</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">checked_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">fact4</span> <span class=\"n\">y</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">none</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact4</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am now in a monad (this is obviously a simplified version of what I'm trying to achieve)... the recursion is not really relevant to this example</p>\n<p>for <code>fact4</code>, I have a hypothesis <code>h: checked_sub x 1 = some y</code> in my context (after <code>simp_wf</code>), but for <code>fact3</code>, I don't have that crucial bit of information in my context</p>\n<p>is there any way to bind the hypothesis when using do &lt;- notation?</p>",
        "id": 324164598,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674858036
    },
    {
        "content": "<p>Hi Jonathan! I don't see how this could work for an arbitrary monad. But for specific cases like <code>Option</code> we can transfer the hypothesis inside a subtype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option.attach</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"bp\">...</span>      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">checked_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">attach</span>\n</code></pre></div>",
        "id": 324311553,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674920101
    },
    {
        "content": "<p>hey Sebastian! ok, this is nice -- I had gone that route (<span class=\"user-mention\" data-user-id=\"371938\">@Son Ho</span>'s suggestion) but eventually realized that the refinement prevented the operator from satisfying the signature of the Bind typeclass... but your solution is nice and compact... maybe I could even define a custom operator (&lt;--) that combines both in one go, but I don't know yet how to do that... thanks!</p>",
        "id": 324331891,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674929124
    },
    {
        "content": "<p>Oh yes, you can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" &lt;-- \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">Option.attach</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"bp\">...</span>       <span class=\"k\">let</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span><span class=\"c1\">-- checked_sub x 1</span>\n</code></pre></div>\n<p>and then optionally abstract <code>attach</code> into a typeclass</p>",
        "id": 324350255,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674941464
    },
    {
        "content": "<p>ah that's excellent, thanks so much Sebastian!</p>",
        "id": 324350919,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674941974
    },
    {
        "content": "<p>actually I'm reviving this thread... I finally got around to using this in real code, but then I have an universes issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">checked_sub</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Option.attach</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">termination</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"mi\">0</span>\n  <span class=\"k\">else</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">checked_sub</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">USize.ofNatCore</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"kd\">by</span>\n      <span class=\"k\">match</span> <span class=\"n\">USize.size</span><span class=\"o\">,</span> <span class=\"n\">usize_size_eq</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Or.inl</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">Or.inr</span> <span class=\"n\">rfl</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">decide</span><span class=\"o\">))</span>\n    <span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">foo</span> <span class=\"n\">T</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Option.attach</span>\n    <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">k</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">T</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">termination</span> <span class=\"n\">T</span> <span class=\"n\">k</span> <span class=\"n\">v</span>\n<span class=\"n\">decreasing_by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>here, the termination measure is rejected, on the basis that:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">termination</span> <span class=\"n\">T</span> <span class=\"n\">k</span> <span class=\"n\">v</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">USize</span> <span class=\"bp\">×</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.9354</span>\n</code></pre></div>\n<p>bear in mind that this code is auto-generated, so the termination measure always, by default, contains a tuple of all the arguments</p>",
        "id": 326728099,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916009
    },
    {
        "content": "<p>this is of course a minimal repro, the actual use-case is more involved, but this is the gist of the issue</p>",
        "id": 326728129,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916037
    },
    {
        "content": "<p>if I get rid of the option.attach and the <code>h</code>, then all goes well</p>",
        "id": 326728201,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916070
    },
    {
        "content": "<p>so I don't understand why this particular usage gives rise to a universe problem</p>",
        "id": 326728210,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916080
    },
    {
        "content": "<p>that is a strange error message, since the type should unify with that target type</p>",
        "id": 326729095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675916678
    },
    {
        "content": "<p>the only thing I can think is that one of those metavariables is not assignable at the current mvar depth, or is not allowed to reference those local variables or something along those lines</p>",
        "id": 326729168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675916734
    },
    {
        "content": "<p>or else the error message is just lying</p>",
        "id": 326729181,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675916745
    },
    {
        "content": "<p>do you have an MWE not using <code>intlit</code>?</p>",
        "id": 326729252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675916798
    },
    {
        "content": "<p>oh sorry yes of course</p>",
        "id": 326729254,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916806
    },
    {
        "content": "<p>I thought it was self-contained</p>",
        "id": 326729256,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916811
    },
    {
        "content": "<p><code>sorry</code> seems to work to reproduce</p>",
        "id": 326729272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675916838
    },
    {
        "content": "<p>ok glad to know you were able to reproduce</p>",
        "id": 326729294,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675916865
    },
    {
        "content": "<p>using <code>(k, v)</code> directly causes a similar error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">termination_by</span> <span class=\"n\">foo</span> <span class=\"n\">T</span> <span class=\"n\">k</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">v</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m.864</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.859</span>\n</code></pre></div>\n<p>which makes me think that it is indeed an issue of the metavariable not being allowed to reference <code>T</code></p>",
        "id": 326729588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675917123
    },
    {
        "content": "<p>This probably warrants a bug report, but you can likely work around it by using <code>termination_by'</code> instead</p>",
        "id": 326729731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675917265
    },
    {
        "content": "<p>although, in this example how <em>do</em> you intend to prove termination? <code>T</code> is an arbitrary type, you don't have a well founded instance on it</p>",
        "id": 326729775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675917348
    },
    {
        "content": "<p>For this particular example, I guess you don't want <code>v</code> to participate in the well founded measure</p>",
        "id": 326729951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675917495
    },
    {
        "content": "<p>this is just to demonstrate the issue, in this example, I could conceivably show that the first argument of the pair is always decreasing, I guess</p>",
        "id": 326734138,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675921060
    },
    {
        "content": "<p>thanks, I'll file an issue on the bug tracker</p>",
        "id": 326734202,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675921085
    },
    {
        "content": "<p>I mean that in general, it doesn't make sense to have <code>v</code> in there because <code>T</code> is a generic argument. You would have to change the type of the function <code>foo</code> to add a well founded measure</p>",
        "id": 326734340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675921198
    },
    {
        "content": "<p>do you mean that if <code>v</code> appears in the <code>termination_by</code>, then there is no hope of proving termination, even though the first argument is decreasing?</p>",
        "id": 326734494,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675921316
    },
    {
        "content": "<p>I mean that there is no hope of making the termination hint typecheck, because even after you get past the current error message there is a secondary goal (solved by typeclass inference) to find an instance of <code>WellFoundedRelation</code> for the type of the expression you gave (here <code>USize x T</code>)</p>",
        "id": 326734890,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675921573
    },
    {
        "content": "<p>and that will definitely fail because there is no instance of <code>WellFoundedRelation T</code> in the context</p>",
        "id": 326734907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675921595
    },
    {
        "content": "<p>furthermore, if you fix this issue by not including variables with generic types in the tuple, then the current issue will also go away</p>",
        "id": 326734957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675921656
    },
    {
        "content": "<p>An alternative way to solve that issue would be to change the type of foo to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">WellFoundedRelation</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span> <span class=\"n\">USize</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">:</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">USize</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>at which point arguably it should work to use <code>(k, v)</code> as the termination hint, and this is what I regard as the bug in this case</p>",
        "id": 326735109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675921784
    },
    {
        "content": "<p>Lean is supposed to be doing some preprocessing to determine the arguments that don't change in the recursion (here both <code>T</code> and <code>v</code> would be eligible) and excluding them from the termination context, so that the goal becomes <code>T, v |- WellFounded USize</code> instead of <code>|- WellFoundedRelation ((T : Type) ×' (_ : USize) ×' T)</code> (which is more awkward to work with). Specifically, I believe <code>termination_by</code> is trying to use <code>invImage (fun (T, k, v) =&gt; &lt;your hint&gt;) _</code> as the termination relation, and this is a problem because the type of <code>&lt;your hint&gt;</code> cannot depend on <code>T,k,v</code> here since <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=invImage#doc\">docs4#invImage</a> requires a non-dependent function</p>",
        "id": 326735423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675922019
    },
    {
        "content": "<p>If you use <code>termination_by'</code> you can take the construction of the termination relation into your own hands, which will likely lead to more stable behavior compared to <code>termination_by</code>'s heuristics</p>",
        "id": 326735782,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675922255
    },
    {
        "content": "<p>BTW, if your termination hint is just the tuple of everything I think you can leave it off, since that's the default</p>",
        "id": 326736260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675922638
    },
    {
        "content": "<p>thanks, in my case I do expect and anticipate that the user will refine the termination measure -- the <code>termination</code> definition is in a separate file that is not auto-generated and that the user will have to provide... Aeneas currently generates a \"template\" where the default termination measure is a tuple of all the arguments, and the termination proof is just <code>sorry</code> -- the user takes that template as a base, then replaces the definitions</p>",
        "id": 326737201,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675923245
    },
    {
        "content": "<p>so it's just a confusing error message for the default measure that in any case would not have worked anyhow</p>",
        "id": 326737221,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675923263
    },
    {
        "content": "<p>Note that lean's actual default does not suffer from this issue, if you use <code>decreasing_by sorry</code> alone you can see in the input tactic states some references to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">a</span> <span class=\"k\">fun</span> <span class=\"n\">T</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">PSigma.casesOn</span> <span class=\"n\">snd</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"n\">snd</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">sizeOf</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span>\n</code></pre></div>\n<p>which is to say, lean is using the equivalent of <code>termination_by T k v =&gt; sizeOf k</code></p>",
        "id": 326738098,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1675923870
    },
    {
        "content": "<p>I made progress, but I'm still getting errors... thanks for your patience as I try to work this out</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option.attach</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">o</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span>\n  <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">))</span>\n  <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ls</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">_</span> <span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">do</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">tl</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">ls</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n        <span class=\"k\">let</span> <span class=\"o\">⟨</span> <span class=\"n\">tl0</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟩</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">f</span> <span class=\"n\">T</span> <span class=\"n\">tl</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Option.attach</span>\n        <span class=\"bp\">.</span><span class=\"n\">none</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">.</span><span class=\"n\">none</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">f</span> <span class=\"n\">ls</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">List.length</span> <span class=\"n\">ls</span>\n</code></pre></div>\n<p>here, notice that I have gotten rid of all of the decreases_by business, and I'm merely trying to get the termination proof to work out in the style you suggested (with a <code>have</code> right before the recursive call)</p>\n<p>I thought this would work, but I'm getting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">solutions</span><span class=\"o\">:</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"k\">have</span><span class=\"bp\">`-</span><span class=\"n\">expressions</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">the</span> <span class=\"n\">remaining</span> <span class=\"n\">goals</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">different</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n  <span class=\"bp\">-</span> <span class=\"n\">Use</span> <span class=\"bp\">`</span><span class=\"n\">decreasing_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">your</span> <span class=\"n\">own</span> <span class=\"n\">tactic</span> <span class=\"n\">for</span> <span class=\"n\">discharging</span> <span class=\"n\">this</span> <span class=\"n\">kind</span> <span class=\"n\">of</span> <span class=\"n\">goal</span>\n<span class=\"n\">tl</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"bp\">✝</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">List.length</span> <span class=\"n\">tl</span> <span class=\"bp\">&lt;</span> <span class=\"n\">List.length</span> <span class=\"n\">ls</span><span class=\"bp\">✝</span>\n<span class=\"n\">ls</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">List.length</span> <span class=\"n\">ls</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Nat.succ</span> <span class=\"o\">(</span><span class=\"n\">List.length</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>if I replace <code>⟨ tl0, h ⟩</code> with <code>x</code>, then this succeeds...</p>",
        "id": 326891317,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675968476
    },
    {
        "content": "<p>the other thing I'm noticing as I look back at this: I'm not even sure how the proof is supposed to succeed... this goal is really confusing</p>",
        "id": 326916975,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675976951
    },
    {
        "content": "<p>It's also fixed if you move the recursive call outside the do notation <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> this seems to be one of those places where do notation destroys all evidence of where values come from</p>",
        "id": 326920692,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675978428
    },
    {
        "content": "<p>let me see if i can make a simple MWE to show why...</p>",
        "id": 326920776,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675978451
    },
    {
        "content": "<p>oh dear, I am quite confused. somewhat simpler MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this works</span>\n<span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ls</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"n\">T</span> <span class=\"n\">tl</span>\n      <span class=\"n\">res</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Option.attach</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">bind</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"c1\">-- this does not</span>\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ls</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">g'</span> <span class=\"n\">T</span> <span class=\"n\">tl</span> <span class=\"bp\">|&gt;</span> <span class=\"n\">Option.attach</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">bind</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n</code></pre></div>",
        "id": 326923260,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675979437
    },
    {
        "content": "<p>maybe one of the elaboration experts can give some insight here ???</p>",
        "id": 326923322,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675979467
    },
    {
        "content": "<p>I suspect it has something to do with the fact that <code>g' T tl</code> appears in the <em>type</em> of <code>Option.attach res</code>, which breaks (?) the structural induction??</p>",
        "id": 326923752,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675979670
    },
    {
        "content": "<p>nice repro, thanks!</p>",
        "id": 326923932,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675979766
    },
    {
        "content": "<p>ooh, even more strange:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- works</span>\n<span class=\"kd\">def</span> <span class=\"n\">g'</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ls</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Option.attach</span> <span class=\"o\">(</span><span class=\"n\">g'</span> <span class=\"n\">T</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n      <span class=\"n\">res.bind</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x.val</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"c1\">-- doesn't</span>\n<span class=\"kd\">def</span> <span class=\"n\">g''</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ls</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ls</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">::</span><span class=\"n\">tl</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">res</span> <span class=\"o\">:=</span> <span class=\"n\">Option.attach</span> <span class=\"o\">(</span><span class=\"n\">g''</span> <span class=\"n\">T</span> <span class=\"n\">tl</span><span class=\"o\">)</span>\n      <span class=\"n\">res.bind</span> <span class=\"k\">fun</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n</code></pre></div>",
        "id": 326924026,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675979814
    },
    {
        "content": "<p>this matches what I observed earlier, which it is the unpacking of the subtype via the \\langle, \\rangle that causes the error</p>",
        "id": 326924091,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675979840
    },
    {
        "content": "<p>I had thought it was unrelated :D I was wrong</p>",
        "id": 326924145,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1675979865
    },
    {
        "content": "<p>so I'm wondering if having very dependently-typed hypotheses in the context is somehow leading to a poor unification choice (e.g. with variables that later on would escape their scope), and thus ultimately to a failure</p>",
        "id": 326924157,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1675979870
    },
    {
        "content": "<p>This is a bug for sure. I assume it has something to do with the fact that <code>match</code> generates a matcher function which generalizes over a bunch of things in the context, and it might be picking <code>g''</code> itself as one of the things to generalize, meaning that the call to <code>fun ⟨x,h⟩ =&gt; x</code> (which macro expands to <code>fun x =&gt; match x with | ⟨x,h⟩ =&gt; x</code>) turns into something like <code>fun x =&gt; g''._match g'' T tl res x</code> and now <code>g''</code> is being passed unapplied to a helper function and this is no longer structurally recursive</p>",
        "id": 326970903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1676008713
    },
    {
        "content": "<p>thanks, I filed a bug <a href=\"https://github.com/leanprover/lean4/issues/2102\">https://github.com/leanprover/lean4/issues/2102</a></p>",
        "id": 327130364,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676057282
    },
    {
        "content": "<p>So far, with everyone's help, I have a workaround for all of the issues above (notably, introducing extra let-bindings to defeat issue <a href=\"https://github.com/leanprover-community/mathlib/pull/2102\">#2102</a>)... but I am now hitting performance problems (which surfaced via errors referring to \"heartbeats\", as I mentioned in another thread). Here's a succinct description of the issue: if my definition uses the <code>&lt;-</code> monadic bind operator, it is type-checked instantly and the interactive mode returns to me in a snap, but if I use the <code>&lt;--</code> (see above, the one that pipes the result through Result.attach), I need to multiply max heartbeats by 10 and the definition type-checks in a little under 3 minutes. This is a closed term, so in theory, it should be able to reduce in a call-by-value, efficient fashion, but clearly, it's not happening here.</p>\n<p>I could not reproduce the issue with Option, so unfortunately the repro involves cloning the Aeneas repo...</p>\n<p>Here's what I tried:</p>\n<ul>\n<li>I traced Compiler.simp to see what was happening with reduction, and I did see that with my special &lt;-- operator, there were a lot of packing / unpackings of <code>Subtype</code></li>\n<li>interestingly, the elaboration seems to \"figure out\" that with &lt;-, some monadic let-bindings had no dependency upon a lot of earlier variables, and thus could be hoisted, this did not seem to happen with the &lt;-- version</li>\n<li>I tried to reproduce with Option.bind, to no avail, so I looked up the definition of Option.bind, and I noticed that it was marked as @[inline], so I marked my own Result.attach and Result.bind as @[inline]</li>\n<li>with the fix above, I was able to see that eventually, the &lt;- version (fast) and the &lt;-- version (slow) reduce to the same term (size: 132), but I don't seem to have access to the intermediary states of reduction (the output is trimmed to the most recent few messages)</li>\n</ul>\n<p>in case anyone has the good will and time to take a look, the repro is here: <a href=\"https://github.com/AeneasVerif/aeneas/blob/8a986a9c61e62ad3cc1955a71e3c14de00411f60/tests/lean/hashmap_on_disk/HashmapMain/Funs.lean#L558-L632\">https://github.com/AeneasVerif/aeneas/blob/8a986a9c61e62ad3cc1955a71e3c14de00411f60/tests/lean/hashmap_on_disk/HashmapMain/Funs.lean#L558-L632</a>, the repository should be clone-able easily, and it suffices to open this file in an editor to witness the issue (or run lake build on the command-line)</p>",
        "id": 328123483,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676501490
    },
    {
        "content": "<p>my closed term is not huge, so I'm wondering if the presence of hypotheses triggers a bad complexity somewhere... but I don't have enough expertise to figure out what it might be</p>",
        "id": 328123692,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1676501583
    }
]