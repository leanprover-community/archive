[
    {
        "content": "<p>I looked into the documentation (doc/do.md) but I didn't find anything... still using <code>fact</code> as my running example, consider the two styles below:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">checked_sub</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;=</span> <span class=\"n\">m</span> <span class=\"k\">then</span>\n    <span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">none</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact3</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">checked_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span>\n      <span class=\"n\">fact3</span> <span class=\"n\">y</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact3</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fact4</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">Option</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">return</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span>\n    <span class=\"k\">match</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">checked_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">some</span> <span class=\"n\">y</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">fact4</span> <span class=\"n\">y</span>\n    <span class=\"bp\">|</span> <span class=\"n\">none</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">none</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">fact4</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">decreasing_by</span>\n  <span class=\"n\">simp_wf</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I am now in a monad (this is obviously a simplified version of what I'm trying to achieve)... the recursion is not really relevant to this example</p>\n<p>for <code>fact4</code>, I have a hypothesis <code>h: checked_sub x 1 = some y</code> in my context (after <code>simp_wf</code>), but for <code>fact3</code>, I don't have that crucial bit of information in my context</p>\n<p>is there any way to bind the hypothesis when using do &lt;- notation?</p>",
        "id": 324164598,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674858036
    },
    {
        "content": "<p>Hi Jonathan! I don't see how this could work for an arbitrary monad. But for specific cases like <code>Option</code> we can transfer the hypothesis inside a subtype.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Option.attach</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"n\">o</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">none</span>   <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">none</span>\n\n<span class=\"bp\">...</span>      <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">⟩</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">checked_sub</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">attach</span>\n</code></pre></div>",
        "id": 324311553,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674920101
    },
    {
        "content": "<p>hey Sebastian! ok, this is nice -- I had gone that route (<span class=\"user-mention\" data-user-id=\"371938\">@Son Ho</span>'s suggestion) but eventually realized that the refinement prevented the operator from satisfying the signature of the Bind typeclass... but your solution is nice and compact... maybe I could even define a custom operator (&lt;--) that combines both in one go, but I don't know yet how to do that... thanks!</p>",
        "id": 324331891,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674929124
    },
    {
        "content": "<p>Oh yes, you can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"let\"</span> <span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"s2\">\" &lt;-- \"</span> <span class=\"n\">f</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">doElem</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">doElem</span><span class=\"bp\">|</span> <span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">$</span><span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"bp\">←</span> <span class=\"n\">Option.attach</span> <span class=\"bp\">$</span><span class=\"n\">f</span><span class=\"o\">)</span>\n\n<span class=\"bp\">...</span>       <span class=\"k\">let</span> <span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&lt;</span><span class=\"c1\">-- checked_sub x 1</span>\n</code></pre></div>\n<p>and then optionally abstract <code>attach</code> into a typeclass</p>",
        "id": 324350255,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1674941464
    },
    {
        "content": "<p>ah that's excellent, thanks so much Sebastian!</p>",
        "id": 324350919,
        "sender_full_name": "Jonathan Protzenko",
        "timestamp": 1674941974
    }
]