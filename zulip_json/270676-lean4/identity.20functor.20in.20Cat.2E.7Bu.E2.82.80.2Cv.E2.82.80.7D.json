[
    {
        "content": "<p>This code gives me an error message: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">obj'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Quiver.Hom.obj'</span>\n  <span class=\"mi\">𝟙</span> <span class=\"n\">C</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span> <span class=\"bp\">⟶</span> <span class=\"n\">C</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat.</span><span class=\"o\">{</span><span class=\"n\">u₀</span><span class=\"o\">,</span><span class=\"n\">v₀</span><span class=\"o\">}}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n</code></pre></div>\n<p>Is seems it didn't infer the full functor but instead only a quantale. All this time I thought it was inferring the full functor.</p>",
        "id": 386467149,
        "sender_full_name": "Dean Young",
        "timestamp": 1692649402
    },
    {
        "content": "<p>Here's a similar error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">AdjComDom</span> <span class=\"n\">φ</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">CategoryStruct.toQuiver.1</span> <span class=\"o\">(</span><span class=\"n\">AdjComDom</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">AdjComDom</span> <span class=\"n\">φ</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>It should have type functor but it's not inferring it.</p>",
        "id": 386472405,
        "sender_full_name": "Dean Young",
        "timestamp": 1692650468
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 386473446,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692651013
    },
    {
        "content": "<p>This is the smallest portion of code which produces the \"just a quiver\" error:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">}</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n</code></pre></div>\n<p>I just need the identity functor is all but it won't infer it.</p>",
        "id": 386474428,
        "sender_full_name": "Dean Young",
        "timestamp": 1692651446
    },
    {
        "content": "<p>It’s not a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> if you don’t have all the imports</p>",
        "id": 386474675,
        "sender_full_name": "Jason Rute",
        "timestamp": 1692651566
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Cat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">⥤</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span>\n</code></pre></div>",
        "id": 386475116,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692651786
    },
    {
        "content": "<p>The issue you're facing is that Lean4 considers <code>𝟙 C</code> as a morphism in <code>Cat</code>, as opposed to a functor. Of course morphisms in <code>Cat</code> are <em>defined</em> as the type of functors, but Lean4 has a hard time distinguishing the two without hints. If you want the identity functor as a functor, you can use <code>𝟭 C</code>. E.g.: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.CategoryTheory.Category.Cat</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">CategoryTheory</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Cat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">𝟙</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟭</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 386475413,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1692651930
    }
]