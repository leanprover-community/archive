[
    {
        "content": "<p>I'd like to write a failure message which references a term I have.  I guessed a syntax but I guessed wrongly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"foo \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"s2\">\"foo {$a} failed\"</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 370934797,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688075999
    },
    {
        "content": "<p>Here's the best I could come up with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"foo \"</span> <span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab.Tactic</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"fail_tactic \"</span> <span class=\"n\">t</span><span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">goals</span> <span class=\"bp\">←</span> <span class=\"n\">getGoals</span>\n  <span class=\"k\">let</span> <span class=\"n\">goalsMsg</span> <span class=\"o\">:=</span> <span class=\"n\">MessageData.joinSep</span> <span class=\"o\">(</span><span class=\"n\">goals.map</span> <span class=\"n\">MessageData.ofGoal</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\n\\n</span><span class=\"s2\">\"</span>\n  <span class=\"n\">throwError</span> <span class=\"s2\">\"tactic '{t}' failed</span><span class=\"se\">\\n</span><span class=\"s2\">{goalsMsg}\"</span>\n\n<span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">fail_tactic</span> <span class=\"bp\">$</span><span class=\"o\">(⟨</span><span class=\"bp\">←</span> <span class=\"n\">getRef</span><span class=\"o\">⟩))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">13</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">tactic 'foo 12 + 13' failed</span>\n<span class=\"cm\">⊢ 1 + 1 = 2</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 370937234,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688076931
    },
    {
        "content": "<p>I couldn't find a way to embed <code>$a</code> into the string for <code>fail</code> and also pretty print it (I'm not under the impression that macros have access to the pretty printer)</p>",
        "id": 370937395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688076984
    },
    {
        "content": "<p>For example,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro_rules</span> <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"bp\">$</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">msg</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"'{a}' failed\"</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span> <span class=\"bp\">|</span> <span class=\"n\">fail</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">Lean.Syntax.mkStrLit</span> <span class=\"n\">msg</span><span class=\"o\">))</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"mi\">13</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">'(«term_+_» (num \"12\") \"+\" (num \"13\"))' failed</span>\n<span class=\"cm\">⊢ 1 + 1 = 2</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 370937565,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688077056
    },
    {
        "content": "<p>Thanks Kyle for the detailed explanation!</p>",
        "id": 370941324,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1688078563
    }
]