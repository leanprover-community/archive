[
    {
        "content": "<p>Whilst creating some libclang bindings I've come across a problem: I want to port a large enum from libclang (<a href=\"https://clang.llvm.org/doxygen/group__CINDEX.html#gaaccc432245b4cd9f2d470913f9ef0013\">https://clang.llvm.org/doxygen/group__CINDEX.html#gaaccc432245b4cd9f2d470913f9ef0013</a>) and I thought that an inductive type would fit best.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span>   <span class=\"kd\">inductive</span> <span class=\"n\">CursorKind</span> <span class=\"n\">where</span>\n<span class=\"mi\">2</span>   <span class=\"bp\">|</span> <span class=\"n\">UnexposedDecl</span>\n<span class=\"mi\">3</span>   <span class=\"bp\">|</span> <span class=\"n\">StructDecl</span>\n<span class=\"mi\">4</span>   <span class=\"bp\">|</span> <span class=\"n\">UnionDecl</span>\n<span class=\"bp\">...</span>\n<span class=\"mi\">285</span> <span class=\"bp\">|</span> <span class=\"n\">ConceptDecl</span>\n<span class=\"mi\">286</span> <span class=\"bp\">|</span> <span class=\"n\">FirstExtraDecl</span>\n<span class=\"mi\">287</span> <span class=\"bp\">|</span> <span class=\"n\">LastExtraDecl</span>\n<span class=\"mi\">288</span> <span class=\"bp\">|</span> <span class=\"n\">OverloadCandidate</span>\n</code></pre></div>\n<p>This compiles fine, but when I create a simple <code>fromNat</code> function for <code>CursorKind</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fromNat</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">CursorKind</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">UnexposedDecl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">StructDecl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">3</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">UnionDecl</span>\n<span class=\"bp\">...</span>\n<span class=\"bp\">|</span> <span class=\"mi\">604</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ConceptDecl</span>\n<span class=\"bp\">|</span> <span class=\"mi\">700</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OverloadCandidate</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">OverloadCandidate</span>\n</code></pre></div>\n<p>The compiler seems to struggle with this definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">292</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I don't feel like setting the maximum heartbeats will help. What's the alternative to an inductive type here?</p>",
        "id": 364417630,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686183621
    },
    {
        "content": "<p>it sounds like the issue is not the inductive type but rather the <code>Nat</code> pattern match</p>",
        "id": 364420874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686185805
    },
    {
        "content": "<p>does it work if you replace all the match arms by <code>()</code>?</p>",
        "id": 364420887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686185817
    },
    {
        "content": "<p>I think that it's the <code>Nat</code> pattern match too</p>",
        "id": 364421173,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186004
    },
    {
        "content": "<p>When I replace the match arms, since they're all just redundant alternatives I can't actually compile the program</p>",
        "id": 364421235,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186049
    },
    {
        "content": "<p>I mean the RHS of the arms</p>",
        "id": 364421265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686186064
    },
    {
        "content": "<p>Same error message as before:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">293</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">isDefEq'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span>\n<span class=\"n\">CursorKind.lean</span><span class=\"o\">:</span><span class=\"mi\">292</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">deterministic</span><span class=\"o\">)</span> <span class=\"n\">timeout</span> <span class=\"n\">at</span> <span class=\"bp\">'</span><span class=\"n\">whnf'</span><span class=\"o\">,</span> <span class=\"n\">maximum</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"n\">heartbeats</span> <span class=\"o\">(</span><span class=\"mi\">200000</span><span class=\"o\">)</span> <span class=\"n\">has</span> <span class=\"n\">been</span> <span class=\"n\">reached</span> <span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"bp\">&lt;</span><span class=\"n\">num</span><span class=\"bp\">&gt;'</span> <span class=\"n\">to</span> <span class=\"n\">set</span> <span class=\"n\">the</span> <span class=\"n\">limit</span><span class=\"o\">)</span><span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 364421439,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186143
    },
    {
        "content": "<p>Seems to be the <code>Nat</code> patterns</p>",
        "id": 364421476,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186177
    },
    {
        "content": "<p>Probably increasing the timeout will actually work, although it's not a great solution</p>",
        "id": 364421508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686186196
    },
    {
        "content": "<p>You could put all the options in an array and index into it</p>",
        "id": 364421534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686186229
    },
    {
        "content": "<p>Yeah, I personally dislike increasing the timeout though. Another solution is just to use raw numbers instead of naturals, or to generate lots of constants</p>",
        "id": 364421598,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186253
    },
    {
        "content": "<p>Oh I see, it's just a bunch of constants</p>",
        "id": 364421619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686186273
    },
    {
        "content": "<p>that will probably work better</p>",
        "id": 364421626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686186280
    },
    {
        "content": "<p>you can use a macro to automate that kind of thing</p>",
        "id": 364421663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686186306
    },
    {
        "content": "<p>Ill try this out</p>",
        "id": 364421682,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186320
    },
    {
        "content": "<p>Although I can't see why lean struggles to pattern match the <code>Nat</code>s</p>",
        "id": 364421728,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686186354
    },
    {
        "content": "<p>I ended up just writing a macro for enumerations:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">enumPair</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span> <span class=\"s2\">\"=\"</span> <span class=\"n\">term</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"enum\"</span> <span class=\"n\">ident</span> <span class=\"s2\">\"where\"</span> <span class=\"n\">enumPair</span><span class=\"o\">,</span><span class=\"bp\">+</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"n\">macro_rules</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">enum</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"n\">where</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">],</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">defs</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">a.zip</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">foldlM</span> <span class=\"o\">(</span><span class=\"n\">init</span> <span class=\"o\">:=</span> <span class=\"bp\">←</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kn\">namespace</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">))</span> <span class=\"k\">fun</span> <span class=\"n\">ns</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">ns</span>\n      <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">defs</span><span class=\"o\">:</span><span class=\"n\">command</span>\n    <span class=\"kd\">end</span> <span class=\"bp\">$</span><span class=\"n\">name</span><span class=\"o\">)</span>\n\n<span class=\"n\">enum</span> <span class=\"n\">CursorKind</span> <span class=\"n\">where</span>\n  <span class=\"n\">CXCursor_UnexposedDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_StructDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_UnionDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_ClassDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_EnumDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_FieldDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_EnumConstantDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_FunctionDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">8</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_VarDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">9</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_ParmDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_ObjCInterfaceDecl</span> <span class=\"bp\">=</span> <span class=\"mi\">11</span><span class=\"o\">,</span>\n  <span class=\"bp\">...</span>\n  <span class=\"n\">CXCursor_FirstExtraDecl</span> <span class=\"bp\">=</span> <span class=\"n\">CXCursor_ModuleImportDecl</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_LastExtraDecl</span> <span class=\"bp\">=</span> <span class=\"n\">CXCursor_ConceptDecl</span><span class=\"o\">,</span>\n  <span class=\"n\">CXCursor_OverloadCandidate</span> <span class=\"bp\">=</span> <span class=\"mi\">700</span>\n</code></pre></div>",
        "id": 364430342,
        "sender_full_name": "Pedro Oliveira",
        "timestamp": 1686192407
    }
]