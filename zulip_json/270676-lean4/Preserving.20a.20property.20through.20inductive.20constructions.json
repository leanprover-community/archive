[
    {
        "content": "<p>Suppose we have a list <code>l</code> for which we have a hypothesis like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"bp\">∧</span> <span class=\"n\">p</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>where <code>p</code> is a predicate over the elements of <code>l</code>.</p>\n<p>Now suppose I have an inductive constructor that operates on such lists.<br>\nI would like to proove that such constructors preserve <code>p</code>.</p>\n<p>Here is an MWE that is specific to my use case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Data.AssocList</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.List.Lemmas</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">MWE11</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cond_eq_ite</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"n\">c</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">c</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">cases</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">cond_decide</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cond</span> <span class=\"o\">(</span><span class=\"n\">decide</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">p</span> <span class=\"bp\">&lt;;&gt;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Problems.20simplifying.20.20conditions.20with.20hypotheses/near/324212540</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">beq_eq_eq</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">==</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">decide</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Strings</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">String</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">addSubSup</span><span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">String</span> <span class=\"n\">Strings</span> <span class=\"bp\">→</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">String</span> <span class=\"n\">Strings</span>\n<span class=\"bp\">|</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">sup</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>            <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">sub</span> <span class=\"o\">[</span><span class=\"n\">sup</span><span class=\"o\">]</span> <span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"bp\">|</span> <span class=\"n\">sub</span><span class=\"o\">,</span> <span class=\"n\">sup</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">bif</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">sub</span> <span class=\"k\">then</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">sub</span> <span class=\"o\">(</span><span class=\"n\">as.insert</span> <span class=\"n\">sup</span><span class=\"o\">)</span> <span class=\"n\">tail</span> <span class=\"k\">else</span> <span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">as</span> <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span> <span class=\"n\">tail</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">theorem</span> <span class=\"n\">addSubSup.sub_sup</span>\n  <span class=\"o\">(</span><span class=\"n\">sub</span> <span class=\"n\">sup</span><span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">:</span> <span class=\"n\">Std.AssocList</span> <span class=\"n\">String</span> <span class=\"n\">Strings</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Std.AssocList.toList</span> <span class=\"n\">tail</span> <span class=\"bp\">∧</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">Std.AssocList.toList</span> <span class=\"o\">(</span><span class=\"n\">addSubSup</span> <span class=\"n\">sub</span> <span class=\"n\">sup</span> <span class=\"n\">tail</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">x.fst</span> <span class=\"bp\">=</span> <span class=\"n\">sup</span>\n<span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">MWE11</span>\n</code></pre></div>\n<p>Intuitively, <code>addSubSup</code> only preprends entries to the 3rd argument; so if that 3rd argument satisfies a property, then the result of the constructors should also satisfy the same property.</p>\n<p>Any suggestions about proving this sort of thing?</p>",
        "id": 324493307,
        "sender_full_name": "Nicolas Rouquette",
        "timestamp": 1675029708
    }
]