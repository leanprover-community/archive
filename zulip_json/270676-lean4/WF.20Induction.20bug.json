[
    {
        "content": "<p>This isn't quite as minimized as it could be (the problem has nothing to do with <code>Finset</code>), but the following looks like a bug. </p>\n<p>The only difference between <code>foo1</code> and <code>foo2</code> is that <code>foo1</code> uses an indented tactic line to prove <code>h_lt</code>, and <code>foo2</code> uses <code>:=</code>. The former fails with a generic WF induction error, and the latter works. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Card</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">hP</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"n\">t</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo1</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hPt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hP</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_lt</span> <span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span>\n  <span class=\"bp\">·</span> <span class=\"n\">exact</span> <span class=\"n\">Finset.card_lt_card</span> <span class=\"n\">ht</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">foo1</span> <span class=\"n\">t</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.card</span>\n<span class=\"c1\">-- failed to prove termination, possible solutions:</span>\n<span class=\"c1\">--   - Use `have`-expressions to prove the remaining goals</span>\n<span class=\"c1\">--   - Use `termination_by` to specify a different well-founded relation</span>\n<span class=\"c1\">--   - Use `decreasing_by` to specify your own tactic for discharging this kind of goal</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo2</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">h</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hPt</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hP</span> <span class=\"n\">h</span>\n  <span class=\"k\">have</span> <span class=\"n\">h_lt</span> <span class=\"o\">:</span> <span class=\"n\">t.card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">s.card</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.card_lt_card</span> <span class=\"n\">ht</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hPt</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">foo2</span> <span class=\"n\">t</span>\n<span class=\"n\">termination_by</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s.card</span>\n<span class=\"c1\">-- works fine</span>\n</code></pre></div>",
        "id": 404312033,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1701049261
    },
    {
        "content": "<p>With <code>decreasing_by simp_wf</code> we can see the goals in both cases. This is the goal that fails</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">s</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">t</span>\n<span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span>\n<span class=\"n\">hPt</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">t</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>and this is the corresponding goal that succeeds</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">a</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">y</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">y</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">s</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">h</span><span class=\"bp\">✝</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">t</span>\n<span class=\"n\">ht</span><span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">s</span>\n<span class=\"n\">hPt</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"n\">t</span>\n<span class=\"n\">h_lt</span><span class=\"o\">:</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">s</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">s</span>\n</code></pre></div>\n<p>So it loses the <code>l_lt</code> premise somehow.</p>",
        "id": 404362053,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701074924
    },
    {
        "content": "<p>With <code>set_option trace.Elab.definition.wf true</code> we see more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">foo1</span> <span class=\"o\">:=</span>\n    <span class=\"n\">WellFounded.fix</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Exists.casesOn</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">And.casesOn</span> <span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">ht</span> <span class=\"n\">hPt</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">hPt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">Eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Std.Classes.Order._auxLemma.4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">true</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>vs.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">foo2</span> <span class=\"o\">:=</span>\n    <span class=\"n\">WellFounded.fix</span> <span class=\"o\">(</span><span class=\"n\">invImage</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">instWellFoundedRelation</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">Classical.byContradiction</span> <span class=\"k\">fun</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">Exists.casesOn</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">fun</span> <span class=\"n\">t</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n          <span class=\"n\">And.casesOn</span> <span class=\"n\">h</span> <span class=\"k\">fun</span> <span class=\"n\">ht</span> <span class=\"n\">hPt</span> <span class=\"bp\">=&gt;</span>\n            <span class=\"n\">let_fun</span> <span class=\"n\">h_lt</span> <span class=\"o\">:=</span> <span class=\"n\">Finset.card_lt_card</span> <span class=\"n\">ht</span><span class=\"bp\">;</span>\n            <span class=\"n\">hPt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">Eq.mpr</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"n\">Std.Classes.Order._auxLemma.4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sorryAx</span> <span class=\"o\">(</span><span class=\"n\">Finset.card</span> <span class=\"n\">t</span> <span class=\"bp\">&lt;</span> <span class=\"n\">Finset.card</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">true</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>so the <code>let_fun</code> is dropped somewhere along the way, and it seems to be happening before it reaches the code that deals with recursion.</p>\n<p>Maybe someone who knows more about the implementation of <code>have</code> can spot the issue. In any case, feel free to open an issue. Maybe you can minimize it further; it can also be very helpful to know when the issue disappears.</p>",
        "id": 404362295,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701075012
    },
    {
        "content": "<p>this is a known issue, you can work around it by putting the <code>have</code> in the same term as the <code>exact</code></p>",
        "id": 404365837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1701076187
    },
    {
        "content": "<p>Is there a lean issue for it?</p>",
        "id": 404374496,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701079157
    }
]