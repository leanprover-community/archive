[
    {
        "content": "<p>Mathlib4 is just starting to get big enough to be useful. How hard it is to import one project from another when using Lean 4, and what is the right way to do it?</p>\n<p>Mathlib4 is currently small enough that I don't mind cutting and pasting the files that I need, but if there's a better way, I'll be happy to try it out.</p>",
        "id": 245575109,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1625956127
    },
    {
        "content": "<p>Putting the following in your <code>leanpkg.toml</code> should do it:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[dependencies]</span>\n<span class=\"n\">mathlib4</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s\">\"/path/to/mathlib4\"</span> <span class=\"p\">}</span>\n</code></pre></div>\n<p>or to fetch from git:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[dependencies]</span>\n<span class=\"n\">mathlib4</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">git</span> <span class=\"o\">=</span> <span class=\"s\">\"https://github.com/leanprover-community/mathlib4\"</span><span class=\"p\">,</span> <span class=\"n\">rev</span> <span class=\"o\">=</span> <span class=\"s\">\"5212f0c\"</span> <span class=\"p\">}</span>\n</code></pre></div>\n<p>This should work in VSCode, while on the command line <code>leanpkg build</code> must be used (<code>lean</code> used directly will not know where to find the dependencies).</p>\n<p>If you are feeling particularly adventurous, you could also try the new build system - <a href=\"https://github.com/tydeu/lean4-lake\">Lake</a>. Note that Lean 4 only imports .oleans and ignores .leans, so if errors happen it's useful to check if the .oleans are present.</p>",
        "id": 245578319,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1625961635
    },
    {
        "content": "<p>Are there some interesting progress in Lean about analytical number theory?</p>",
        "id": 310855646,
        "sender_full_name": "Meow",
        "timestamp": 1668787615
    },
    {
        "content": "<p>Hi, how do I correctly start a mathlib4 project in VS Code on Ubuntu?</p>",
        "id": 340339937,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678276668
    },
    {
        "content": "<p>I mean, I just downloaded Lean 4 through VS Code and I would like to get up and running contributing to mathlib, but only using Lean 4</p>",
        "id": 340341471,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277033
    },
    {
        "content": "<p>After I run <code>lake init ringel</code> what next?</p>",
        "id": 340341801,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277098
    },
    {
        "content": "<p>because \"leanproject only supports Lean 3. If you are using Lean 4, the information on this page is not relevant.\"</p>",
        "id": 340342393,
        "sender_full_name": "Jeremy Tan",
        "timestamp": 1678277244
    },
    {
        "content": "<p>You can make a new project depending on mathlib4 with <code>lake new &lt;project_name&gt; math</code>. Or if you have an existing project with a <code>lakefile</code>,  you should be able to just add </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">require</span> <span class=\"n\">mathlib</span> <span class=\"k\">from</span> <span class=\"n\">git</span>\n  <span class=\"s2\">\"https://github.com/leanprover-community/mathlib4.git\"</span>\n</code></pre></div>\n<p>to the <code>lakefile</code> right above the line containing<code>@[default_target]</code> and run <code>lake update</code> to download mathlib.</p>",
        "id": 340349797,
        "sender_full_name": "Logan Murphy",
        "timestamp": 1678279410
    },
    {
        "content": "<p>Note: <code>lake new &lt;project_name&gt; math</code> has to be called with a reasonably recent toolchain or there is a high chance it will start your project with the wrong toolchain</p>",
        "id": 340352998,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678280300
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4#using-mathlib4-as-a-dependency\">https://github.com/leanprover-community/mathlib4#using-mathlib4-as-a-dependency</a></p>",
        "id": 340357749,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678281501
    },
    {
        "content": "<p>Btw <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> I just noticed that you added a new step 6:</p>\n<blockquote>\n<ol start=\"6\">\n<li>Run <code>cp lake-packages/mathlib/lean-toolchain .</code> to make sure your new project uses the same Lean version as <code>mathlib4</code>.</li>\n</ol>\n</blockquote>\n<p>This isn't necessary due to step 2</p>",
        "id": 340358651,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678281678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> No that's not true.  \"Sufficiently recent\" is not enough.</p>",
        "id": 340448061,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678303873
    },
    {
        "content": "<p>Is \"at least as recent as ...\" enough then?</p>",
        "id": 340448306,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678303945
    },
    {
        "content": "<p>No, of course not.  It needs to be the exact same version.</p>",
        "id": 340448737,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304103
    },
    {
        "content": "<p>That's not true. Recent toolchains have a fix on Lake that downloads the correct toolchain file for a project that uses the <code>math</code> template</p>",
        "id": 340448949,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304189
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lake/pull/152\">https://github.com/leanprover/lake/pull/152</a></p>",
        "id": 340449060,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304232
    },
    {
        "content": "<p>Ah, I forgot about that.  However step (5) says to use <code>lake update</code> which does not know about <code>lean-toolchain</code>.</p>",
        "id": 340449235,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304297
    },
    {
        "content": "<p>What do you mean? <code>lake update</code> should pick the correct toolchain for <code>lake</code></p>",
        "id": 340449543,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304422
    },
    {
        "content": "<p>Last time I checked it didn't touch the file at all.</p>",
        "id": 340449686,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304484
    },
    {
        "content": "<p><code>lake update</code> shouldn't touch <code>lean-toolchain</code>. It's the <code>lake new</code> command that creates a project with a correct <code>lean-toolchain</code> file out of the box</p>",
        "id": 340449977,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304579
    },
    {
        "content": "<p>Which then becomes incorrect as soon you do <code>lake update</code> (because the new mathlib4 version might require a different Lean version).</p>",
        "id": 340450141,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304637
    },
    {
        "content": "<p>It's the <code>master</code> version regardless</p>",
        "id": 340450498,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304739
    },
    {
        "content": "<p>Which changes regularly?</p>",
        "id": 340450546,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304755
    },
    {
        "content": "<p>Yes, but then the problem is something else. It's a generalized issue due to pinning <code>master</code></p>",
        "id": 340450804,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304843
    },
    {
        "content": "<p>But if you do <code>lake new</code> and then <code>lake update</code> within the same day, it shouldn't be a problem</p>",
        "id": 340450938,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304884
    },
    {
        "content": "<p>Pinning mathlib to <code>master</code> and having <code>lake update</code> always get the latest mathlib version is what we want though.</p>",
        "id": 340450974,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304895
    },
    {
        "content": "<blockquote>\n<p>But if you do <code>lake new</code> and then <code>lake update</code> within the same [minute], it shouldn't be a problem</p>\n</blockquote>\n<p>Sure, if you do it quickly enough then both <code>lake new</code> and <code>lake update</code> will see the same version.</p>",
        "id": 340451160,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678304964
    },
    {
        "content": "<p>\"quickly enough\" = a time window of 24-48 hours</p>",
        "id": 340451241,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678304993
    },
    {
        "content": "<p>But we need to teach people to set the correct Lean version.  Because they'll run <code>lake update</code> themselves later.  (Or change <code>lake update</code> to do that.)</p>",
        "id": 340451337,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305010
    },
    {
        "content": "<p>If that's the case, doing it via <code>cp</code> is a very bad UX</p>",
        "id": 340451569,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305086
    },
    {
        "content": "<blockquote>\n<p>\"quickly enough\" = a time window of 24-48 hours</p>\n</blockquote>\n<p>Not really.  It doesn't matter how frequently we update Lean, if you're unlucky you pick exactly the time where the bump PR lands.  (And one minute before bump PR = old version, one minute after = new version.)</p>",
        "id": 340451647,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305117
    },
    {
        "content": "<blockquote>\n<p>If that's the case, doing it via cp is a very bad UX</p>\n</blockquote>\n<p>I agree.</p>",
        "id": 340451716,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib4/near/340451647\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>\"quickly enough\" = a time window of 24-48 hours</p>\n</blockquote>\n<p>Not really.  It doesn't matter how frequently we update Lean, if you're unlucky you pick exactly the time where the bump PR lands.  (And one minute before bump PR = old version, one minute after = new version.)</p>\n</blockquote>\n<p>How realistically likely is that? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 340451873,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305182
    },
    {
        "content": "<p>Anyways, maybe <code>lake new</code> shouldn't pin to <code>master</code></p>",
        "id": 340452038,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305240
    },
    {
        "content": "<p>That's what people want though.</p>",
        "id": 340452205,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305285
    },
    {
        "content": "<p>It should pin to the most recent commit when <code>lake new</code> runs</p>",
        "id": 340452279,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305315
    },
    {
        "content": "<p>Do you mean set up <code>lake-manifest.json</code> automatically?  That seems like a good idea as well.</p>",
        "id": 340452566,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305401
    },
    {
        "content": "<p>No I mean have a placeholder in the lakefile template that should be replaced by the most recent <code>mathlib4</code> commit on <code>master</code></p>",
        "id": 340452775,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305466
    },
    {
        "content": "<p>If we're gonna talk about teaching people, I believe we should teach them to mindfully update their <code>mathlib4</code> hashes to get updates. Pinning to <code>master</code> is a flaky idea. It's very prone to errors</p>",
        "id": 340453043,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305546
    },
    {
        "content": "<p>But then what's the point of having the <code>lake update</code> command?</p>",
        "id": 340453180,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305591
    },
    {
        "content": "<p>When you update the hash in the lakefile, run <code>lake update</code> and it will update the manifest and download the correct dependency repo version</p>",
        "id": 340453418,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305651
    },
    {
        "content": "<p>How does this make things any easier?  With this proposal, you'd need to manually update <em>both</em> the git revision as well as the lean-toolchain file.</p>",
        "id": 340453683,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678305722
    },
    {
        "content": "<p>It's less flaky</p>",
        "id": 340453873,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305776
    },
    {
        "content": "<p>It's one of the lessons I've learned from managing a less trivial DAG of dependencies</p>",
        "id": 340454033,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678305825
    },
    {
        "content": "<p>That's the situation we've had before <code>lake update</code>.  If you don't want to use <code>lake update</code>, that's perfectly fine and you can still edit everything manually.</p>",
        "id": 340456035,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678306445
    },
    {
        "content": "<p>I'm so happy that I no longer need bespoke shell scripts that update <code>lakefile.lean</code> using <code>sed</code>.</p>",
        "id": 340456078,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678306467
    },
    {
        "content": "<p>Nah, <code>lake update</code> does git clones for me</p>",
        "id": 340456214,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678306527
    },
    {
        "content": "<p>There's also <code>lake resolve-deps</code> which iirc does git clones but without the version bumps.</p>",
        "id": 340456279,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1678306553
    },
    {
        "content": "<p>IMO, the current behavior of <code>lake update</code> needs to update <code>lean-toolchain</code> according to the most recent <code>lean-toolchain</code> across all dependencies</p>",
        "id": 340456642,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678306681
    },
    {
        "content": "<p>(and don't touch it if the most recent toolchain isn't newer than the current one)</p>",
        "id": 340456783,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1678306724
    },
    {
        "content": "<p>At one point I was thinking about whether it should be legal for a <code>lean-toolchain</code> to simply refer to another toolchain file as in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">cat</span> <span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n<span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">mathlib4</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">-</span><span class=\"n\">toolchain</span>\n</code></pre></div>\n<p>... but that's a bit problematic when <code>lake-packages</code> does not exist yet</p>",
        "id": 340458253,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678307278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  It should be the other way around where things in <code>lake-packages</code> grab <code>lean-toolchain</code> from the root and then inspect it for suitability. As far as I can tell, lake currently ignores all other <code>lean-toolchain</code> files and only uses the one in root for everything. Maybe the lakefile should contain a kind of toolchain range statement to check compatibility.</p>",
        "id": 340495967,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1678324990
    },
    {
        "content": "<p>I imagine once things stabilize and lean-toolchain points to a tagged version and not a nightly (and also in mathlib), this issue will not come up as often, but the underlying reason is that we'll probably need a full-fledged package manager at some point, to solve version dependencies, right?</p>",
        "id": 340529805,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1678346678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119741\">François G. Dorais</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib4/near/340495967\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span>  It should be the other way around where things in <code>lake-packages</code> grab <code>lean-toolchain</code> from the root and then inspect it for suitability. As far as I can tell, lake currently ignores all other <code>lean-toolchain</code> files and only uses the one in root for everything. Maybe the lakefile should contain a kind of toolchain range statement to check compatibility.</p>\n</blockquote>\n<p>That doesn't work when you have a dependency like mathlib that a) contains a vast majority of the code of the package tree and so is the most likely point of breakage, and b) comes with an olean cache for a specific Lean version</p>",
        "id": 340537520,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678349777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/package.20versioning.20and.20dependency.20pinning\">previously</a>, <a href=\"#narrow/stream/270676-lean4/topic/.22Perfect.20world.22.20dependency.20management\">previously</a></p>",
        "id": 340537872,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1678349900
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span> <a href=\"#narrow/stream/270676-lean4/topic/mathlib4/near/340537520\">said</a>:</p>\n<blockquote>\n<p>That doesn't work when you have a dependency like mathlib that a) contains a vast majority of the code of the package tree and so is the most likely point of breakage, and b) comes with an olean cache for a specific Lean version</p>\n</blockquote>\n<p>True. Fortunately, \"a dependency like mathlib\" is a singleton and I can't imagine anything comparable forthcoming. IMHO, that use case is pretty clearly a mathlib problem and not a lake problem. Lean's <a href=\"https://en.wikipedia.org/wiki/Pareto_principle\">Pareto Principle</a> is more 99/1 than 80/20. Tough situation indeed!</p>",
        "id": 340564087,
        "sender_full_name": "François G. Dorais",
        "timestamp": 1678357340
    }
]