[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">or_congr</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">P1</span> <span class=\"n\">P2</span> <span class=\"n\">Q1</span> <span class=\"n\">Q2</span> <span class=\"n\">R1</span> <span class=\"n\">R2</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">`repeat` docstring:</span>\n<span class=\"cm\">repeat tac applies tac to main goal. If the application succeeds, the tactic</span>\n<span class=\"cm\">is applied recursively to the generated subgoals until it eventually fails.</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">∨</span> <span class=\"n\">Q1</span> <span class=\"bp\">∨</span> <span class=\"n\">R1</span> <span class=\"bp\">↔</span> <span class=\"n\">P2</span> <span class=\"bp\">∨</span> <span class=\"n\">Q2</span> <span class=\"bp\">∨</span> <span class=\"n\">R2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">apply</span> <span class=\"n\">or_congr</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  ⊢ P1 ↔ P2</span>\n<span class=\"cm\">  ⊢ Q1 ∨ R1 ↔ Q2 ∨ R2</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"c1\">-- it didn't repeat</span>\n  <span class=\"n\">repeat</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">P1</span> <span class=\"bp\">∨</span> <span class=\"n\">Q1</span> <span class=\"bp\">∨</span> <span class=\"n\">R1</span> <span class=\"bp\">↔</span> <span class=\"n\">P2</span> <span class=\"bp\">∨</span> <span class=\"n\">Q2</span> <span class=\"bp\">∨</span> <span class=\"n\">R2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">repeat</span> <span class=\"n\">apply</span> <span class=\"n\">squeamish_ossifrage</span> <span class=\"c1\">-- not actually a theorem</span>\n  <span class=\"c1\">-- no error</span>\n  <span class=\"c1\">-- ⊢ P1 ∨ Q1 ∨ R1 ↔ P2 ∨ Q2 ∨ R2</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For the first one, am I misunderstanding what \"generated subgoals\" means? For the second, perhaps this is strictly speaking correct behaviour, although speaking from experience it can cause a lot of confusion.</p>",
        "id": 346849249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680614592
    },
    {
        "content": "<p>Use <code>repeat'</code> there is a thread on this somewhere!</p>",
        "id": 346883255,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680620313
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/Semantics.20of.20repeat/near/307770628\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/Semantics.20of.20repeat/near/307770628</a></p>",
        "id": 346884088,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1680620486
    },
    {
        "content": "<p>Oh thanks! So the docstring is wrong? What should be fixed? The docstring or the tactic? Or do we just let people continue to discover this?</p>",
        "id": 346921074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1680627946
    },
    {
        "content": "<p>yeah the doc is misleading at best. It's really just looping <code>tac</code> until it fails, which means that it actually only runs on the first generated subgoal if you use a branching tactic</p>",
        "id": 346928602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1680629841
    },
    {
        "content": "<p>doc-string PR at <a href=\"https://github.com/leanprover/lean4/pull/2184\">https://github.com/leanprover/lean4/pull/2184</a></p>",
        "id": 346991271,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1680651924
    }
]