[
    {
        "content": "<p>I am writing some meta-code where I want to turn an <code>Expr</code> describing a <code>String</code> into an actual <code>String</code> object.<br>\nI initially thought <code>reduceEval</code> was what I want, but it seems to only work for string literals:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Qq</span>\n<span class=\"kn\">open</span> <span class=\"n\">Qq</span> <span class=\"n\">Lean.Meta</span>\n\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">reduceEval</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"s2\">\"a\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"c1\">-- \"a\"</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> reduceEval: failed to evaluate argument</span>\n<span class=\"cm\">    \"a\" ++ \"b\" -/</span>\n<span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">reduceEval</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"s2\">\"a\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\"b\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Is this by design or a bug?</p>",
        "id": 392355927,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1695313403
    },
    {
        "content": "<p>I don't know about <code>reduceEval</code> but you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"o\">(</span><span class=\"n\">evalExpr</span> <span class=\"n\">String</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">(</span><span class=\"s2\">\"a\"</span> <span class=\"bp\">++</span> <span class=\"s2\">\"b\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 392356828,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695313725
    },
    {
        "content": "<p>Thanks! That indeed works for my minimized example, but for my actual code <code>evalExpr</code> throws an <code>incomplete case</code> error</p>",
        "id": 392358832,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1695314519
    },
    {
        "content": "<p>What is in your actual code that causes that?</p>",
        "id": 392360851,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1695315305
    }
]