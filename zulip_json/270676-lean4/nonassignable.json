[
    {
        "content": "<p>Looking through traces I see</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>                            <span class=\"o\">[]</span> <span class=\"bp\">❌</span> <span class=\"bp\">?</span><span class=\"n\">m.6557</span> <span class=\"n\">x</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">▼</span>\n                              <span class=\"o\">[]</span> <span class=\"bp\">?</span><span class=\"n\">m.6557</span> <span class=\"n\">x</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span> <span class=\"bp\">=?=</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"o\">[</span><span class=\"n\">nonassignable</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Here <code>s : Finset K</code>, and <code>↑s : Set K</code> and <code>x : ?m.6547</code>. I think that this should be solvable, with <code>?m.6557 x := ↑s</code>. What does <code>nonassignable</code> mean? I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.profiler</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Meta.isDefEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">maxHeartbeats</span> <span class=\"mi\">950000</span> <span class=\"k\">in</span>\n</code></pre></div>\n<p>and I'm assuming that the trace in question is coming from <code>trace.Meta.isDefEq</code>. Is this question too vague? The trace is right in the middle of a really gnarly calculation which depends on a lot of mathlib.</p>",
        "id": 364695859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686265971
    },
    {
        "content": "<p>nonassignable means that we are in a sub-scope in which that metavariable is supposed to be treated like a constant</p>",
        "id": 364696555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686266342
    },
    {
        "content": "<p>But s is a constant, it's just some variable. Is there some situation where it's not possible to assign the metavariables to make it all work? 6557 is just the constant function to \\u s and 6547 is whatever the type of x is</p>",
        "id": 364743183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686292035
    },
    {
        "content": "<p>It is likely that you are just looking at the wrong part of the trace. This metavariable is not assignable at this point in the computation, because it is in a scope which said \"assume everything is nonassignable except for these mvars and try to solve for them\"</p>",
        "id": 364747780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1686293368
    },
    {
        "content": "<p>Thanks. Whilst I have no desire to learn about <code>expr</code>s and CS-monads (the really nitty-gritty stuff), I think that learning something about how the typeclass and unification algorithms work would be of some benefit to me -- I have no clue at all about when and where one assigns metavariables.</p>",
        "id": 364751963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1686294591
    }
]