[
    {
        "content": "<p>Hello, I am working on a research project, that tries to extend lean4 syntax to allow for more natuaral theorem proving language.<br>\nThe end goal should be similar to PatrickMassout's <a href=\"https://github.com/PatrickMassot/lean-verbose\">lean-verbose</a> for lean3.<br>\nI am very new to lean4 and I am struggling both with documentation (which can be aided by reading the manuals and browsing the source code) and to get the philosophy of lean4. (Typically I would think rewriting the source code of the language is a bad idea...)</p>\n<p>My question is this: How do you write a lean4 parser while conforming to best practices?<br>\nHow do you ensure usability (i.e. you can just import parser and there you go)?<br>\nWhat should I do and shouldn't do? (Rewriting the source code is a no-no, or it's ok if you follow xyz guidelines).</p>\n<p>Another approach would be to write a program that takes a say .txt file as input and outputs a runnable .lean file. This can be done in other programming languages (and given my ignorance of lean4 appears to be more straight forward to me).<br>\nWhat would a lean4 expert say? What ressources should I check out? What requirements would a parser need to fulfill that you would consider using it?</p>\n<p>Thank you so much <span aria-label=\"thanks\" class=\"emoji emoji-1fac2\" role=\"img\" title=\"thanks\">:thanks:</span></p>",
        "id": 400297600,
        "sender_full_name": "Andreas K.",
        "timestamp": 1699103714
    },
    {
        "content": "<p>Best practice is not to write a Lean 4 parser.  Lean 4 is very extensible.  This makes it hard to parse if not impossible without using Lean itself.  But it also makes it possible to extend Lean without changing it.  I imagine could implement your ideas via this same extensibility.  I think this is basically what Patrick did.  So you wouldn't write a new Lean, but use Lean to add your own syntax ideas.</p>",
        "id": 400299180,
        "sender_full_name": "Jason Rute",
        "timestamp": 1699105006
    },
    {
        "content": "<p>Sorry, I mistook which project of Patrick you were talking about.  I was thinking of a more recent project in Lean 4 (that I'm having trouble finding the repo for at the moment).</p>",
        "id": 400299619,
        "sender_full_name": "Jason Rute",
        "timestamp": 1699105256
    },
    {
        "content": "<p>Here is a video demo of the project of <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> that I was referring to: <a href=\"https://www.youtube.com/watch?v=tp_h3vzkObo\">https://www.youtube.com/watch?v=tp_h3vzkObo</a>.  (Edit: I might be mistaken about whether this project uses Lean macros.  It does at the end with the Python example, but I don't know about the main talk.  In particular, this is about outputting existing Lean proofs and not writing new Lean proofs.)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"tp_h3vzkObo\" href=\"https://www.youtube.com/watch?v=tp_h3vzkObo\"><img src=\"https://uploads.zulipusercontent.net/4446eceb03ccc3e7f0e817586d5c605657835fd3/68747470733a2f2f692e7974696d672e636f6d2f76692f74705f6833767a6b4f626f2f64656661756c742e6a7067\"></a></div>",
        "id": 400300870,
        "sender_full_name": "Jason Rute",
        "timestamp": 1699106125
    },
    {
        "content": "<p>Also see this video of <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  which shows the power of Lean's macros which let you implement custom DSLs in Lean: <a href=\"https://www.youtube.com/watch?v=n1Pd0GeHsAY\">https://www.youtube.com/watch?v=n1Pd0GeHsAY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"n1Pd0GeHsAY\" href=\"https://www.youtube.com/watch?v=n1Pd0GeHsAY\"><img src=\"https://uploads.zulipusercontent.net/1024ca55582ea8ff0339ccaffe88378b0769dcf6/68747470733a2f2f692e7974696d672e636f6d2f76692f6e315064304765487341592f64656661756c742e6a7067\"></a></div>",
        "id": 400300877,
        "sender_full_name": "Jason Rute",
        "timestamp": 1699106142
    },
    {
        "content": "<p>I think the <a href=\"https://github.com/leanprover-community/lean4-metaprogramming-book\">Lean metaprogramming</a> book is a place to learn about this stuff, but it is probably better to start learning the basics of Lean as in <a href=\"https://lean-lang.org/lean4/doc/tpil.html\">Theorem Proving in Lean</a> and maybe <a href=\"https://lean-lang.org/functional_programming_in_lean/\">Functional Programming in Lean</a>, if you don't know them already.</p>",
        "id": 400300967,
        "sender_full_name": "Jason Rute",
        "timestamp": 1699106219
    },
    {
        "content": "<p>You may also want to look a the <a href=\"https://adam.math.hhu.de/#/g/hhu-adam/NNG4\">natural number game for Lean 4</a> and in particular its code at <a href=\"https://github.com/leanprover-community/lean4game\">https://github.com/leanprover-community/lean4game</a>.  This is another example of a special user interface built on top of Lean 4.</p>",
        "id": 400301867,
        "sender_full_name": "Jason Rute",
        "timestamp": 1699106886
    },
    {
        "content": "<p>There two completely different project here. Informal Lean is all about the output format after parsing an existing regular Lean file. Verbose Lean is about the input format and is only a teaching tool (where the goal is to teach ordinary maths instead of maths in Lean). I made a tiny start at porting Verbose Lean to Lean 4 more than one year ago, but I should return to it. And indeed this involves no modification to core Lean. It simply uses the extensibility capabilities of Lean (and Lean 3 was already extensible enough for this).</p>",
        "id": 400303804,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699108545
    },
    {
        "content": "<p>Wonderful, thank you very much for your quick responses! :)</p>",
        "id": 400689281,
        "sender_full_name": "Andreas K.",
        "timestamp": 1699346004
    }
]