[
    {
        "content": "<p>I can share a repro of this (very much not minimised), but I have a bug that (as far as I can tell) depends only on <code>_uniq</code> terms. I'm really not sure what these are and I cannot find much documentation on them, but they're causing really bizarre behaviour in my case. So what are they? Why does <code>rw</code> introduce them?</p>",
        "id": 397368130,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697655222
    },
    {
        "content": "<p><code>_uniq</code> are names automatically introduced by the elaborator for free variables, they can definitley pop up in meta code but you'll have to be more precise for help I think.</p>",
        "id": 397368613,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1697655484
    },
    {
        "content": "<p>They're popping up in terms in my proof. I will post the whole code in a sec, then</p>",
        "id": 397368673,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697655523
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\"><pre><span></span><code>import Mathlib.RingTheory.IntegralDomain\nimport Mathlib.Tactic.ApplyFun\n\nopen scoped BigOperators\n\ndef asd {R} [CommRing R] : R → R := 0\n\nlemma sum_units_nonunits {α β : Type*} [Monoid α] [AddCommMonoid β] [Fintype α] [Fintype αˣ]\n  [Fintype &lt;| nonunits α] (f : α → β) :\n    (∑ x : αˣ, f x) + ∑ x in (nonunits α).toFinset, f x = ∑ x : α, f x :=\nsorry\n\ntheorem FiniteField.sum_pow_lt_card_sub_one (R) [CommRing R] [NoZeroDivisors R] [Fintype R] {i : ℕ} (h : i &lt; Fintype.card R - 1) :\n    ∑ x : R, x ^ i = 0 := sorry\n\ntheorem teing {T} [CommRing T] [IsDomain T] [Fintype T] [DecidableEq T]\n  [DecidablePred (· ∈ nonunits T)] : False := by\n  have key : _ = asd 37 := FiniteField.sum_pow_lt_card_sub_one T (Nat.mod_lt 3 &lt;| by simpa using Fintype.one_lt_card)\n  let inst : Field T := Fintype.fieldOfDomain T\n  have key3 :\n    @Eq.{u_1 + 1} T\n      (@HAdd.hAdd.{u_1, u_1, u_1} T T T\n        (@instHAdd.{u_1} T\n          (@AddSemigroup.toAdd.{u_1} T\n            (@AddMonoid.toAddSemigroup.{u_1} T\n              (@AddCommMonoid.toAddMonoid.{u_1} T\n                (@NonUnitalNonAssocSemiring.toAddCommMonoid.{u_1} T\n                  (@NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u_1} T\n                    (@NonAssocRing.toNonUnitalNonAssocRing.{u_1} T\n                      (@Ring.toNonAssocRing.{u_1} T (@CommRing.toRing.{u_1} T _)))))))))\n        (@Finset.sum.{u_1, u_1} T\n          (@Units.{u_1} T\n            (@MonoidWithZero.toMonoid.{u_1} T\n              (@Semiring.toMonoidWithZero.{u_1} T\n                (@DivisionSemiring.toSemiring.{u_1} T\n                  (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _))))))\n          (@NonUnitalNonAssocSemiring.toAddCommMonoid.{u_1} T\n            (@NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u_1} T\n              (@NonAssocRing.toNonUnitalNonAssocRing.{u_1} T\n                (@Ring.toNonAssocRing.{u_1} T (@CommRing.toRing.{u_1} T _)))))\n          (@Finset.univ.{u_1}\n            (@Units.{u_1} T\n              (@MonoidWithZero.toMonoid.{u_1} T\n                (@Semiring.toMonoidWithZero.{u_1} T\n                  (@DivisionSemiring.toSemiring.{u_1} T\n                    (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _))))))\n            (@instFintypeUnits.{u_1} T\n              (@MonoidWithZero.toMonoid.{u_1} T\n                (@Semiring.toMonoidWithZero.{u_1} T\n                  (@DivisionSemiring.toSemiring.{u_1} T\n                    (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _)))))\n              _ fun (a b : T) ↦ ‹DecidableEq _› a b))\n          fun\n            (x :\n              @Units.{u_1} T\n                (@MonoidWithZero.toMonoid.{u_1} T\n                  (@Semiring.toMonoidWithZero.{u_1} T\n                    (@DivisionSemiring.toSemiring.{u_1} T\n                      (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _)))))) ↦\n          @HPow.hPow.{u_1, 0, u_1} T Nat T\n            (@instHPow.{u_1, 0} T Nat\n              (@Monoid.Pow.{u_1} T\n                (@MonoidWithZero.toMonoid.{u_1} T\n                  (@Semiring.toMonoidWithZero.{u_1} T\n                    (@CommSemiring.toSemiring.{u_1} T (@CommRing.toCommSemiring.{u_1} T _))))))\n            (@Units.val.{u_1} T\n              (@MonoidWithZero.toMonoid.{u_1} T\n                (@Semiring.toMonoidWithZero.{u_1} T\n                  (@DivisionSemiring.toSemiring.{u_1} T\n                    (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _)))))\n              x)\n            (@HMod.hMod.{0, 0, 0} Nat Nat Nat (@instHMod.{0} Nat Nat.instModNat) 3\n              (@HSub.hSub.{0, 0, 0} Nat Nat Nat (@instHSub.{0} Nat instSubNat) (@Fintype.card.{u_1} T _) 1)))\n        (@Finset.sum.{u_1, u_1} T T\n          (@NonUnitalNonAssocSemiring.toAddCommMonoid.{u_1} T\n            (@NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u_1} T\n              (@NonAssocRing.toNonUnitalNonAssocRing.{u_1} T\n                (@Ring.toNonAssocRing.{u_1} T (@CommRing.toRing.{u_1} T _)))))\n          (@Set.toFinset.{u_1} T\n            (@nonunits.{u_1} T\n              (@MonoidWithZero.toMonoid.{u_1} T\n                (@Semiring.toMonoidWithZero.{u_1} T\n                  (@DivisionSemiring.toSemiring.{u_1} T\n                    (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _))))))\n            (@Subtype.fintype.{u_1} T\n              (fun (x : T) ↦\n                @Membership.mem.{u_1, u_1} T (Set.{u_1} T) (@Set.instMembershipSet.{u_1} T) x\n                  (@nonunits.{u_1} T\n                    (@MonoidWithZero.toMonoid.{u_1} T\n                      (@Semiring.toMonoidWithZero.{u_1} T\n                        (@DivisionSemiring.toSemiring.{u_1} T\n                          (@Semifield.toDivisionSemiring.{u_1} T (@Field.toSemifield.{u_1} T _)))))))\n              (fun (a : T) ↦ ‹DecidablePred _› a) _))\n          fun (x : T) ↦\n          @HPow.hPow.{u_1, 0, u_1} T Nat T\n            (@instHPow.{u_1, 0} T Nat\n              (@Monoid.Pow.{u_1} T\n                (@MonoidWithZero.toMonoid.{u_1} T\n                  (@Semiring.toMonoidWithZero.{u_1} T\n                    (@CommSemiring.toSemiring.{u_1} T (@CommRing.toCommSemiring.{u_1} T _))))))\n            x\n            (@HMod.hMod.{0, 0, 0} Nat Nat Nat (@instHMod.{0} Nat Nat.instModNat) 3\n              (@HSub.hSub.{0, 0, 0} Nat Nat Nat (@instHSub.{0} Nat instSubNat) (@Fintype.card.{u_1} T _) 1))))\n              (@asd.{u_1} T _\n    (@OfNat.ofNat.{u_1} T 37\n      (@instOfNat.{u_1} T 37\n        (@Semiring.toNatCast.{u_1} T (@CommSemiring.toSemiring.{u_1} T (@CommRing.toCommSemiring.{u_1} T _)))\n        (@instNatAtLeastTwo 35))))\n    := sorry\n  rw [←sum_units_nonunits] at key\n  rw [show asd (37 : T) = 0 from rfl] at key\n</code></pre></div>\n</div></div>",
        "id": 397387170,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665485
    },
    {
        "content": "<p>A very not minimised example; the term is long on purpose to make sure that it's identical in pretty much all other ways.</p>",
        "id": 397387222,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665519
    },
    {
        "content": "<p><a href=\"https://www.diffchecker.com/JvUutdxZ/\">https://www.diffchecker.com/JvUutdxZ/</a></p>",
        "id": 397387234,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665525
    },
    {
        "content": "<p>The diff between <code>key</code> and <code>key3</code> on pp.all for those who can't be asked</p>",
        "id": 397387275,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665553
    },
    {
        "content": "<p>It is _only_ these <code>uniq</code> terms</p>",
        "id": 397387327,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665572
    },
    {
        "content": "<p>But if yousee, the <code>rw</code> at the bottom fails on <code>key</code> but succeeds on <code>key3</code></p>",
        "id": 397387351,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665587
    },
    {
        "content": "<p>I'm trying to find smaller examples but have failed so far.</p>",
        "id": 397387367,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697665602
    },
    {
        "content": "<p>Digging into the code a bit, we can see that <code>rw ... at</code> uses <code>replaceLocalDecl</code>, which in turn contains the following telling comment in <code>replaceLocalDeclCore</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"c1\">-- `typeNew` may contain variables that occur after `fvarId`.</span>\n    <span class=\"c1\">-- Thus, we use the auxiliary function `findMaxFVar` to ensure `typeNew` is well-formed at the position we are inserting it.</span>\n</code></pre></div>\n<p>Indeed, moving the <code>let inst</code> statement to before <code>have key ...</code> fixes the issue, and now what used to be an unknown free variable is <code>inst</code>. That suggests to me that this part of <code>replaceLocalDeclCore</code> isn't working as intended. Why, exactly, though, I'm not sure yet.</p>",
        "id": 397424158,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697687990
    },
    {
        "content": "<p>Oh, looks like a missing <code>instantiateMVars</code>. Some tracing showed me that one of the expressions containing the unknown fvar is actually an mvar (and so the search by <code>findMaxFVar</code> can't see through it). I think what's happening is that the <code>instantiateMVars</code> occurs too early in <code>MVarId.rewrite</code>; we do a bunch of things which can assign mvars after it and thus introduce an fvar.</p>\n<p>Maybe <code>replaceLocalDecl</code> should perform an <code>instantiateMVars</code> before it looks for the max fvar in general to bulletproof it against this sort of thing.</p>",
        "id": 397435973,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697695725
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Bar</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">True</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Bar</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.explicit</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">example</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span>\n  <span class=\"k\">let</span> <span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">Bar</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foo</span> <span class=\"mi\">5</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  h✝: w 5</span>\n<span class=\"cm\">  h: w (@f Nat _uniq.124 5)</span>\n<span class=\"cm\">  inst: Bar Nat := @Bar.mk Nat 0</span>\n<span class=\"cm\">  ⊢ ?m.95</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 397438021,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697696645
    },
    {
        "content": "<p>So, to sum up what's happening here and answer the original question more fully:</p>\n<p><code>_uniq</code> appeared because <code>rw</code> tried to use a free variable earlier than it actually appeared in the tactic state. </p>\n<p>Under the hood, each free variable consists of a unique id called the <code>FVarId</code>, normally of the form <code>_uniq.NNNN</code>. The local context is what associates those unique id's to surface-level names, like <code>h</code> and <code>inst</code>, as well as to their types.</p>\n<p>When you write <code>rw ... at h</code>, <code>rw</code> tries to to replace the free variable with name <code>h</code> with one that has a rewritten type. The types of free variables can't depend on free variables which come after them—only on ones which come before. So, when it replaces <code>h</code> with the new free variable, it tries to take care to insert the new, type-rewritten free variable <code>h</code> after any free variables on which it depends (in this case <code>inst</code>), and then removes the original <code>h</code>.</p>\n<p>But because of a bug, it failed at this task: it didn't think that <code>inst</code> was involved in <code>h</code>'s type, and thus inserted the rewritten <code>h</code> before <code>inst</code>. (<code>h</code> depends on <code>inst</code>, and so needs to come after <code>inst</code>.) This insertion actually also served to change the <code>FVarId</code> of <code>inst</code> to something else (this is typical; <code>FVarId</code>s might get changed by tactics even if nothing seems like it's visibly changing), so what you're seeing as <code>_uniq.124</code> is actually the <em>old</em> <code>FVarId</code> of <code>inst</code> before the rewrite—which no longer exists in the local context, and thus gets printed as its raw, underlying <code>FVarId</code>, instead of a nice user-friendly name.</p>",
        "id": 397440110,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697697857
    },
    {
        "content": "<p>Issue: <a href=\"https://github.com/leanprover/lean4/pull/2711\">lean4#2711</a></p>",
        "id": 397444012,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697699924
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover/lean4/pull/2712\">lean4#2712</a></p>",
        "id": 397455684,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697704013
    },
    {
        "content": "<p>Wow, Thomas, I was not expecting a full minimsation AND fix whilst I was asleep. Thank you so much! This is amazing, amazing work</p>",
        "id": 397458026,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697704892
    },
    {
        "content": "<p>Thanks, but don’t get too excited yet! :D Turns out that while this was indeed <em>a</em> problem, it actually might not be the only problem!</p>",
        "id": 397470012,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697709318
    },
    {
        "content": "<p>Where I’m at currently: the minimized version above actually behaves a little differently. The metavariables in <code>foo 5</code> get created when <code>foo 5</code> gets elaborated as opposed to from a <code>forallMetaTelescope</code> during the rewrite. Somehow, the metavariable for <code>Bar Nat</code> makes it all the way through to the expression type without being assigned, added to the tactic state, or causing an error.</p>\n<p>But there is one thing I <em>really</em> don’t understand: it shows up in the infoview as one of the free variables in its context even though it doesn’t get assigned! All I can guess at is that this has something to do with local instances, since I don’t know what those are really for either (and the fvar does show up in the local instances).</p>",
        "id": 397493935,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697718130
    },
    {
        "content": "<p>Ah: the reason it gets replaced with one of its free variables is <code>Term.withSynthesize</code>. Maybe that's part of the issue here...</p>",
        "id": 397578946,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697750312
    },
    {
        "content": "<p>Getting closer to figuring out this bug! The issue <em>seems</em> to be that when a local declaration’s type involves a pending metavariable which can be solved by one of its own local instances (via <code>Term.synthesizeSyntheticMVars</code>), but this instance fvar comes <em>after</em> the fvar in question in the original tactic state, we get an unknown free variable in its place. (I.e., just that local instance, but now we don’t know what it is.)</p>\n<p>Whether this is a fully accurate characterization of the issue and why this happens exactly, I’m still not sure.</p>",
        "id": 397760899,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697827884
    },
    {
        "content": "<p>There’s an easy fix for <code>rw</code> in particular: just perform <code>replaceLocalDecl</code> outside of <code>Term.withSynthesize</code>. But maybe this situation warrants closer attention in general, as it turns hypothesis manipulation within <code>Term.withSynthesize</code> into a bit of a footgun. I’ll open an issue, but I’m not sure what would need to change exactly.</p>",
        "id": 397762712,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697828841
    },
    {
        "content": "<p>Issue <a href=\"https://github.com/leanprover/lean4/pull/2727\">lean4#2727</a></p>",
        "id": 397824116,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697871664
    },
    {
        "content": "<p>Is that <a href=\"https://github.com/leanprover/lean4/pull/2727\">lean4#2727</a>? And amazing for getting to the bottom of this! Very nice!</p>",
        "id": 397825550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697873218
    },
    {
        "content": "<p>It is indeed! Not the first time I've forgotten the prefix <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 397828356,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697875981
    },
    {
        "content": "<p>And here's PR <a href=\"https://github.com/leanprover/lean4/pull/2728\">lean4#2728</a> for this issue in <code>rw</code> specifically, even though it doesn't address the general case of hypothesis manipulation inside <code>Term.withSynthesize</code>. Here's hoping it passes CI. :)</p>",
        "id": 397828385,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697876030
    },
    {
        "content": "<p>It wasn't the last either ;-)</p>",
        "id": 397828449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697876067
    },
    {
        "content": "<p>The Nix build passed, so in a bench or two <a href=\"https://github.com/leanprover/lean4/pull/2712\">lean4#2712</a> and <a href=\"https://github.com/leanprover/lean4/pull/2728\">lean4#2728</a> should be out for review. :)</p>",
        "id": 397829181,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697876794
    },
    {
        "content": "<p>Thank you very much again for investigating and fixing this so promptly, the issues that this bug caused were absolutely horrid to work around! I'm surprised this wasn't run into elsewhere</p>",
        "id": 397831620,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697879091
    },
    {
        "content": "<p>No problem! :) Though…we’re not at the finish line yet! It’s only done when it’s merged. :) Looks like the more innocuous change—instantiating mvars—somehow breaks std4. It’s possible this is actually due to some other commit somewhere, but it does look mvar related. :(</p>\n<p>I wouldn’t have thought instantiating mvars would be an issue, but maybe it messes with the types or something? I’ll continue investigating tomorrow.</p>",
        "id": 397833098,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697880622
    },
    {
        "content": "<p>Actually I’m kind of hopeful that this doesn’t have to do with my change. The declaration</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">mod_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">Fin.mk</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">%</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Nat.mod_lt</span> <span class=\"n\">_</span> <span class=\"n\">a.size_pos</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>breaks, and I’m not sure how that involves <code>replaceLocalDecl</code> at all…but I haven’t deconstructed it.</p>",
        "id": 397833314,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697880850
    },
    {
        "content": "<p>(And it does look like there have been some recent <code>mod</code>-related core commits, so, maybe this is really just an unrelated breakage?)</p>",
        "id": 397833677,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697881218
    },
    {
        "content": "<p>That is unrelated breakage; I think there is a PR with the std4 fix to be merged on the next lean bump</p>",
        "id": 397834183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697881722
    },
    {
        "content": "<p>Hmm, I'm trying to get it building by hand, but it's getting a bit difficult to keep up with all of the different adaptations that need to be manually incorporated. For example, I merged that std4 PR into a branch on my fork, then updated the testing branch to use that fork; but then mathlib4 was broken in two different ways still unrelated to the lean4 PR at hand (upstreaming of lemmas, and something involving <code>sublists</code>).</p>",
        "id": 397876203,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697920279
    },
    {
        "content": "<p>Sorry, it's the weekend here, and a breaking change was committed late Friday... :-( Hopefully <code> nightly-testing</code> is now working, but there are probably a bunch of <code>lean-pr-testing-NNNN</code> branches that need to have <code>nightly-testing</code> merged into them.</p>",
        "id": 397885702,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697932721
    },
    {
        "content": "<p>Ah, sorry! In general, is waiting a while then merging <code>nightly-testing</code> into the pr testing branch the way to go? Do the lean4 PRs also need to be rebased onto master when doing that? (Does the latter trigger the former automatically?) (At your leisure—I’m not in any rush :) )</p>",
        "id": 397888214,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1697934990
    },
    {
        "content": "<p>Unfortunately, the only way to be completely certain that <code>lean-pr-testing-NNNN</code> branches are behaving properly is:</p>\n<ul>\n<li>Check that <code>nightly-testing</code> is currently building.</li>\n<li>Check that your lean4 PR is rebased onto the commit corresponding to the nightly release that <code>nightly-testing</code> is using.</li>\n<li>Merge <code>nightly-testing</code> into your <code>lean-pr-testing-NNNN</code> branch.</li>\n</ul>\n<p>As an approximation to that:</p>\n<ul>\n<li>rebasing your lean4 PR onto <code>master</code>, and/or</li>\n<li>merging <code>nightly-testing</code> into your <code>lean-pr-testing-NNNN</code> branch<br>\nare nearly always helpful if you have a mysterious failure on your <code>lean-pr-testing-NNNN</code> branch. :-)</li>\n</ul>",
        "id": 397889415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697935816
    }
]