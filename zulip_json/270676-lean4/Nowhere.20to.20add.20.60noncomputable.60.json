[
    {
        "content": "<p>For this example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ohno</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">OhNo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">ohno</span>\n</code></pre></div>\n<p>lean says</p>\n<blockquote>\n<p>failed to compile definition, consider marking it as 'noncomputable' because it depends on 'ohno', and it does not have executable code</p>\n</blockquote>\n<p>How do I \"mark this as <code>noncomputable</code>\"?</p>",
        "id": 397341329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697644024
    },
    {
        "content": "<p>Does wrapping it in <code>suppress_compilation</code> work?  It is either a success or a feature request...</p>",
        "id": 397342941,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697644654
    },
    {
        "content": "<p>Nope, nor does <code>noncomputable section</code></p>",
        "id": 397343252,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697644782
    },
    {
        "content": "<p>It seems that marking <code>inductive</code>s (hence also <code>structure</code>) is expressly prohibited by <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=checkValidInductiveModifier#doc\">docs#checkValidInductiveModifier</a> defined in <code>Lean.Elab.Inductive</code> and used in <code>Lean.Elab.Declaration</code> when parsing the declaration. It is also expressly prohibited on fields of a structure in <code>Lean.Elab.Structure</code>. I'm not sure why its use is prohibited though. Maybe because Lean can't construct the recursor? That's beyond my understanding.</p>",
        "id": 397347182,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697646080
    },
    {
        "content": "<p>The recursor, constructor, and projections should all be computable here</p>",
        "id": 397347809,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697646328
    },
    {
        "content": "<p>All that's noncomputable is the magic for the <code>{}</code> notation</p>",
        "id": 397347828,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697646337
    },
    {
        "content": "<p>Is this a theoretical observation or did it actually happen to you btw?</p>",
        "id": 397355614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697649478
    },
    {
        "content": "<p>This happened to me while trying to help someone in <a class=\"stream\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members\">#new members</a></p>",
        "id": 397356341,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697649799
    },
    {
        "content": "<p><code>:=</code> in structures is not useful very often anyway, but if it doesn't work for <code>noncomputable</code> then it's going to be even more useless for mathlib!</p>",
        "id": 397356390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697649830
    },
    {
        "content": "<p>(the kicker here is that the the real example is only noncomputable because of <code>suppress_compilation</code> and the compiler being too slow)</p>",
        "id": 397356482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697649877
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">ohno</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"ok\"</span> <span class=\"o\">:</span><span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n<span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"n\">exact</span> <span class=\"n\">ohno</span><span class=\"o\">)</span>\n<span class=\"kd\">structure</span> <span class=\"n\">OhNo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ok</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">OhNo.mk</span>\n</code></pre></div>\n<p>lol. Its not clear where you can add a modifier like this tbh, maybe after the <code>:=</code> ?<br>\nIt is the def <code>OhNo.x._default</code> that you'd like to have a way of marking noncomputable indeed.</p>\n<p>It turns out both of these are valid syntax but turned down by the elaborator, they wouldnt be the right thing anyway.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OhNo</span> <span class=\"n\">where</span>\n<span class=\"kd\">noncomputable</span> <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"kd\">noncomputable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 397373831,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1697658148
    },
    {
        "content": "<p>Another fix would be to make the compiler allow this definition, it should not be noncomputable in the first place because the bad term appears in an annotation</p>",
        "id": 397375887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697659222
    },
    {
        "content": "<p>I think it would be reasonable for it to force me to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">OhNo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">noncomputable</span> <span class=\"n\">ohno</span>\n</code></pre></div>",
        "id": 397385484,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697664403
    },
    {
        "content": "<p>Since Lean seems to want noncomputability to never be implicit</p>",
        "id": 397385530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697664442
    },
    {
        "content": "<p>A bug report would be good!</p>",
        "id": 397389561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697666950
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2710\">lean4#2710</a></p>",
        "id": 397392003,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697668564
    },
    {
        "content": "<p>Am I imagining that the lean4 web editor used to have a button to reveal the version number of lean, but no longer does?</p>",
        "id": 397392041,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697668587
    },
    {
        "content": "<p>No sure about the button. <code>#eval Lean.versionString</code> is a workaround.</p>",
        "id": 397393763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697669971
    }
]