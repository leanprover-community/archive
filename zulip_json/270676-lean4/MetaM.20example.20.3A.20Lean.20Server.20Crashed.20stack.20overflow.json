[
    {
        "content": "<p>I was typing out the example on page 20 of the <code>Metaprogramming in Lean 4</code> pdf. It shows how assignment to and instantiation of metavariables works. </p>\n<p>I got as far as the line :<code>mvar₁.mvarId!.assign (.app mvar₁ mvar₂)</code>. Until the end of this line everything worked file. However, as soon as I finish typing the next line which just says <code>printMVars</code>, the lean server crashes and vscode reports </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">server</span> <span class=\"n\">printed</span> <span class=\"n\">an</span> <span class=\"n\">error</span><span class=\"o\">:</span>\n\n<span class=\"n\">Stack</span> <span class=\"n\">overflow</span> <span class=\"n\">detected.</span> <span class=\"n\">Aborting.</span>\n</code></pre></div>",
        "id": 361048643,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685018136
    },
    {
        "content": "<p>So for good measure, I added the lines assigning all three meta vars <code>mvar1</code>, <code>mvar2</code>, <code>mvar3</code> and the assigns are not a problem.</p>",
        "id": 361049688,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685018349
    },
    {
        "content": "<p>but as soon as printMVars is added, the crash happens.</p>",
        "id": 361049773,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685018374
    },
    {
        "content": "<p>For reference here's printMVars :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"k\">let</span> <span class=\"n\">printMVars</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"meta 1 : {← instantiateMVars mvar1}\"</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"meta 2 : {← instantiateMVars mvar2}\"</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"meta 3 : {← instantiateMVars mvar3}\"</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 361050098,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685018430
    },
    {
        "content": "<p>You are assigning an mvar to itself (<code>mvar₁ := ... mvar₁ ...</code>), I think that's not supposed to be like that?</p>",
        "id": 361070348,
        "sender_full_name": "Max Nowak 🐉",
        "timestamp": 1685023228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak 🐺</span> <a href=\"#narrow/stream/270676-lean4/topic/MetaM.20example.20.3A.20Lean.20Server.20Crashed.20stack.20overflow/near/361070348\">said</a>:</p>\n<blockquote>\n<p>You are assigning an mvar to itself (<code>mvar₁ := ... mvar₁ ...</code>), I think that's not supposed to be like that?</p>\n</blockquote>\n<p>thanks. That makes sense. The error was indeed caused by the assignment to <code>mvar1</code></p>",
        "id": 361098873,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1685029499
    }
]