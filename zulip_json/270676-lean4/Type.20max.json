[
    {
        "content": "<p>I just noticed that Lean 4 displays <code>Type (max (max (max (max u_1 u_3) u_4) u_6) 0)</code> where Lean 3 displayed <code>Type (max u_1 u_3 u_4 u_6)</code>. Is this simply a missing delaborator? The <code>max</code> with zero looks suspicious. Was is already there in Lean 3 but not displayed?</p>",
        "id": 400854917,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411003
    },
    {
        "content": "<p>no, the normalization changed</p>",
        "id": 400855114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411092
    },
    {
        "content": "<p>which is to say, it doesn't normalize as eagerly as it used to</p>",
        "id": 400855152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411118
    },
    {
        "content": "<p>you can see that it still uses the same display for right associative max, but it doesn't actually right associate unsolicited:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span>\n<span class=\"k\">#check</span> <span class=\"kt\">Type</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">c</span> <span class=\"n\">d</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Type (max (max a b) c d) : Type ((max (max a b) c d) + 1)</span>\n</code></pre></div>",
        "id": 400855343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411216
    },
    {
        "content": "<p>the universe inference mechanism is more likely to generate left associated max expressions too, so you get those towers of maxes</p>",
        "id": 400855450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411279
    },
    {
        "content": "<p>Ok thanks. Unfortunately none of this directly explain why Lean 4 can't understand universes in the sphere eversion project.</p>",
        "id": 400855792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411435
    },
    {
        "content": "<p>no, it's probably just obfuscating things a bit</p>",
        "id": 400855888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411476
    },
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">HtpyFormalSol</span> <span class=\"o\">(</span><span class=\"n\">RelMfld.localize</span> <span class=\"n\">p.φ</span> <span class=\"n\">p.ψ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"c1\">-- Type (max (max u₁ u₄) 0)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">RelLoc.HtpyFormalSol.unloc</span> <span class=\"o\">:</span> <span class=\"n\">HtpyFormalSol</span> <span class=\"o\">(</span><span class=\"n\">RelMfld.localize</span> <span class=\"n\">p.φ</span> <span class=\"n\">p.ψ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>and the def complains about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">stuck</span> <span class=\"n\">at</span> <span class=\"n\">solving</span> <span class=\"kd\">universe</span> <span class=\"n\">constraint</span>\n  <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₁</span> <span class=\"n\">u₃</span><span class=\"o\">)</span> <span class=\"n\">u₄</span><span class=\"o\">)</span> <span class=\"n\">u₆</span> <span class=\"bp\">=?=</span> <span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.114816</span> <span class=\"bp\">?</span><span class=\"n\">u.114817</span>\n<span class=\"n\">while</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">Set</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₆</span> <span class=\"n\">u₄</span><span class=\"o\">)</span> <span class=\"n\">u₃</span><span class=\"o\">)</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u₆</span> <span class=\"n\">u₄</span><span class=\"o\">)</span> <span class=\"n\">u₃</span><span class=\"o\">)</span> <span class=\"n\">u₁</span><span class=\"o\">)</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">Set.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.114816</span> <span class=\"bp\">?</span><span class=\"n\">u.114817</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.114816</span> <span class=\"bp\">?</span><span class=\"n\">u.114817</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">u.114816</span> <span class=\"bp\">?</span><span class=\"n\">u.114817</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400855955,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411518
    },
    {
        "content": "<p>It seems crazy that the check understands universe but not the def.</p>",
        "id": 400856008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411536
    },
    {
        "content": "<p>I know this isn't the first message on Zulip about Lean being stuck at a problem such as <code>max (max (max u₁ u₃) u₄) u₆ =?= max ?u.114816 ?u.114817</code>, but are we getting anywhere closer to a solution?</p>",
        "id": 400856223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411614
    },
    {
        "content": "<p>Of course I could replace all <code>Type*</code> in the project with <code>Type</code> without loosing any application, but somehow I've been trained not to do this.</p>",
        "id": 400856510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411721
    },
    {
        "content": "<p>There is no <code>Set</code> in the example?</p>",
        "id": 400856513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411724
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">RelMfld</span> <span class=\"o\">:=</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">OneJetBundle</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400856570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411751
    },
    {
        "content": "<p>What do the variables look like?</p>",
        "id": 400856585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411759
    },
    {
        "content": "<p>The variables look like we are in the differential geometry corner of Mathlib:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">F'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">F'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">F'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">G'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">J'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">F'</span> <span class=\"n\">G'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">N'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">G'</span> <span class=\"n\">N'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">J'</span> <span class=\"n\">N'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">EP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">EP</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">EP</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">HP</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">HP</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">IP</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">EP</span> <span class=\"n\">HP</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">HP</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">IP</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">EX</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">EX</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">EX</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">HX</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">HX</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">IX</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">EX</span> <span class=\"n\">HX</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelMfld</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 400856718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411809
    },
    {
        "content": "<p>what is the type of <code>HtpyFormalSol</code>?</p>",
        "id": 400856720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411809
    },
    {
        "content": "<p>wow that's a lot</p>",
        "id": 400856786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411840
    },
    {
        "content": "<p>Sorry, I copy-pasted from the wrong file</p>",
        "id": 400856790,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₄</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₅</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₆</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">MetricSpace</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelMfld</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 400856821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411850
    },
    {
        "content": "<p>I added explicit universe variables in a desperate attempt to please the universe checker.</p>",
        "id": 400856952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Type.20max/near/400856786\">said</a>:</p>\n<blockquote>\n<p>wow that's a lot</p>\n</blockquote>\n<p>That's a typical variable command in the sphere eversion end-game.</p>",
        "id": 400857013,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411927
    },
    {
        "content": "<p>that's not where you need the universes, you need them in <code>HtpyFormalSol</code>, hence the question</p>",
        "id": 400857029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699411941
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">HtpyFormalSol.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">,</span> <span class=\"n\">u_4</span><span class=\"o\">,</span> <span class=\"n\">u_5</span><span class=\"o\">,</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">NormedAddCommGroup</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">NormedSpace</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_5</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">H'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">ModelWithCorners</span> <span class=\"n\">ℝ</span> <span class=\"n\">E'</span> <span class=\"n\">H'</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_6</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">TopologicalSpace</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ChartedSpace</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">SmoothManifoldWithCorners</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelMfld</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"n\">u_4</span><span class=\"o\">)</span> <span class=\"n\">u_6</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400857062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699411962
    },
    {
        "content": "<p>Sorry about all the edits, I tried to get it to fit on a Zulip code block.</p>",
        "id": 400857330,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412081
    },
    {
        "content": "<p>Does it help if you make <code>RelMfld</code> a def?</p>",
        "id": 400857653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412201
    },
    {
        "content": "<p>It is already a def.</p>",
        "id": 400857709,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412225
    },
    {
        "content": "<p>not reducible</p>",
        "id": 400857725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412230
    },
    {
        "content": "<p>It wasn't reducible in Lean 3, but I had to make it reducible to please Lean 4 which is more strict with defeq abuse.</p>",
        "id": 400857815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412266
    },
    {
        "content": "<p>or maybe make <code>RelMFld'</code> which is a def wrapper around <code>RelMfld</code> and make <code>HtpyFormalSol</code> take it as an argument</p>",
        "id": 400857818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412267
    },
    {
        "content": "<p>to minimize other breakage</p>",
        "id": 400857884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412285
    },
    {
        "content": "<p>is <code>OneJetBundle</code> also reducible?</p>",
        "id": 400858041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412362
    },
    {
        "content": "<p>Maybe  I should say that </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">HtpyFormalSol</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelMfld</span> <span class=\"n\">I</span> <span class=\"n\">M</span> <span class=\"n\">I'</span> <span class=\"n\">M'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">FamilyFormalSol</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"n\">ℝ</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>where <code>FamilyFormalSol</code> is a serious definition in the sense that it is parametrized by 9 universe levels.</p>",
        "id": 400858173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412405
    },
    {
        "content": "<p>And yes, <code>OneJetBundle</code> is also reducible:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[</span><span class=\"n\">reducible</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">OneJetBundle</span> <span class=\"o\">:=</span>\n  <span class=\"n\">TotalSpace</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">OneJetSpace</span> <span class=\"n\">I</span> <span class=\"n\">I'</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">×</span> <span class=\"n\">M'</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 400858318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412453
    },
    {
        "content": "<p>oh no</p>",
        "id": 400858477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412508
    },
    {
        "content": "<p>how many of these definitions did you make reducible?</p>",
        "id": 400858504,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412518
    },
    {
        "content": "<p>Surely this file is intolerable to compile</p>",
        "id": 400858601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412537
    },
    {
        "content": "<p>Many. At some point during the ongoing port it seemed to be the solution to all issues.</p>",
        "id": 400858623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412547
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Type.20max/near/400858601\">said</a>:</p>\n<blockquote>\n<p>Surely this file is intolerable to compile</p>\n</blockquote>\n<p>No, it isn't particularly slow.</p>",
        "id": 400858725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412590
    },
    {
        "content": "<p>Actually in that folder there are only three reducible definitions and two abbreviations.</p>",
        "id": 400858806,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412633
    },
    {
        "content": "<p>I think what is happening is that <code>RelMfld I M I' M' =?= RelMfld ?I ?M ?I' ?M'</code> doesn't actually imply <code>I =?= ?I</code>, <code>M =?= ?M</code> etc because one of these reducible definitions doesn't actually use the variable</p>",
        "id": 400858936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412679
    },
    {
        "content": "<p>which then makes it useless as a way of inferring the implicit arguments</p>",
        "id": 400858978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412711
    },
    {
        "content": "<p>Try passing in these variables explicitly, what is the type of <code>RelMfld.localize p.φ p.ψ R</code>?</p>",
        "id": 400859076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412756
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">RelMfld.localize</span> <span class=\"n\">p.φ</span> <span class=\"n\">p.ψ</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">RelMfld</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">E</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"n\">E'</span>\n</code></pre></div>",
        "id": 400859176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412788
    },
    {
        "content": "<p>so maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RelLoc.HtpyFormalSol.unloc</span> <span class=\"o\">:</span> <span class=\"n\">HtpyFormalSol</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:=</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I'</span> <span class=\"o\">:=</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E'</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M'</span> <span class=\"o\">:=</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">RelMfld.localize</span> <span class=\"n\">p.φ</span> <span class=\"n\">p.ψ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 400859264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412844
    },
    {
        "content": "<p>That doesn't help. I think you would waste less time by checking out the lean4 branch of <a href=\"https://github.com/leanprover-community/sphere-eversion\">https://github.com/leanprover-community/sphere-eversion</a></p>",
        "id": 400859385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699412906
    },
    {
        "content": "<p>I think I would waste quite a bit more time doing that :D</p>",
        "id": 400859409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412926
    },
    {
        "content": "<p>it's a lean 3 project?</p>",
        "id": 400859509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699412995
    },
    {
        "content": "<p>oh the branch is just called lean4</p>",
        "id": 400859572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413012
    },
    {
        "content": "<p>The master branch is on Lean 3.</p>",
        "id": 400859580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413016
    },
    {
        "content": "<p>Oh!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">RelLoc.HtpyFormalSol.unloc</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is already giving the universe constraint error</p>",
        "id": 400860323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413434
    },
    {
        "content": "<p>What?</p>",
        "id": 400860357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413451
    },
    {
        "content": "<p>which means the issue is in the variable declarations</p>",
        "id": 400860372,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413459
    },
    {
        "content": "<p>But why do the <code>#check</code> work then?</p>",
        "id": 400860447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413489
    },
    {
        "content": "<p>there is a red squiggle on the <code>R</code> on L154</p>",
        "id": 400860452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413494
    },
    {
        "content": "<p>because <code>#check</code> doesn't require all pending universe problems to be solved, it shows things with metavariables</p>",
        "id": 400860487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413518
    },
    {
        "content": "<p>If you <code>#exit</code> before the def then there is no squiggle.</p>",
        "id": 400860535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413538
    },
    {
        "content": "<p>that's because variable elaboration is borked</p>",
        "id": 400860612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413571
    },
    {
        "content": "<p>Actually Lean seems confused by the fact that <code>HtpyFormalSol</code> exist in two different namespaces (with different meaning).</p>",
        "id": 400860825,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413648
    },
    {
        "content": "<p>oh wait, <code>def foo := sorry</code> doesn't work period</p>",
        "id": 400860892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413682
    },
    {
        "content": "<p>You can get rid of the <code>variable</code> line error by replacing it by <code>variable (F : _root_.HtpyFormalSol R)</code></p>",
        "id": 400860962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413713
    },
    {
        "content": "<p>This is <em>wild</em>.</p>",
        "id": 400861079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413741
    },
    {
        "content": "<p>Aha, it's an ambiguous reference which was waiting for type information, and this is screwing up the rest of the inference</p>",
        "id": 400861173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413781
    },
    {
        "content": "<p>What do you call \"the rest of the inference\" in <code>def foo := sorry</code>?</p>",
        "id": 400861237,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413815
    },
    {
        "content": "<p>Ok, <code>def foo : Nat := sorry</code> does work</p>",
        "id": 400861267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413833
    },
    {
        "content": "<p><code>def foo := sorry</code> just doesn't work at all, that was a false alarm</p>",
        "id": 400861270,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413835
    },
    {
        "content": "<p>it complains because it doesn't know what universe the definition lives in or something</p>",
        "id": 400861344,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413853
    },
    {
        "content": "<p>Oh I see, <code>def foo  :=  sorry</code> doesn't work in an empty Lean file.</p>",
        "id": 400861373,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413878
    },
    {
        "content": "<p>I think it should be made to work, but whatever</p>",
        "id": 400861375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413879
    },
    {
        "content": "<p>But putting <code>_root_.HtpyFormalSol</code> everywhere seems to work.</p>",
        "id": 400861446,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699413935
    },
    {
        "content": "<p>Oh I see, this is even more wild than I thought: the <code>HtpyFormalSol</code> on the <code>variable</code> line is not ambiguous, but in the context of <code>nonrec def RelLoc.HtpyFormalSol.unloc</code> because this def is in the <code>RelLoc</code> namespace now it considers the other definition as in scope</p>",
        "id": 400861533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413973
    },
    {
        "content": "<p>that's what hygiene was supposed to save us from</p>",
        "id": 400861556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699413991
    },
    {
        "content": "<p>By the way, the <code>nonrec</code> is irrelevant, it's an habit I got when facing the weirdest errors in Lean 4: try addiing a <code>nonrec</code> in front of def, just in case Lean gets confused by names.</p>",
        "id": 400861662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699414055
    },
    {
        "content": "<p>sadly it wasn't enough to save us from this issue :(</p>",
        "id": 400861763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699414088
    },
    {
        "content": "<p>Exactly, but it was in the right direction somehow.</p>",
        "id": 400861768,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699414104
    },
    {
        "content": "<p>Thank you very much Mario. I'll try to minimize this and open a Lean 4 issue.</p>",
        "id": 400862124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699414272
    },
    {
        "content": "<p>Well, minimizing wasn't hard:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Foo.Bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Foo.Baz</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"n\">Bar</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span>\n</code></pre></div>",
        "id": 400862402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699414375
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"kd\">instance</span>\n  <span class=\"n\">HAdd</span> <span class=\"o\">(</span><span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"n\">Nat</span> <span class=\"n\">Nat</span>\n</code></pre></div>",
        "id": 400862445,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699414394
    },
    {
        "content": "<p>I opened <a href=\"https://github.com/leanprover/lean4/pull/2844\">lean4#2844</a>.</p>",
        "id": 400863207,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699414774
    },
    {
        "content": "<p>that one is expected, as I just wrote on the issue</p>",
        "id": 400864170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699415268
    },
    {
        "content": "<p>Yeah this is normal, and it's a great feature once you've got over being bitten by it several times</p>",
        "id": 400895510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1699432739
    },
    {
        "content": "<p>I put a new example in the Lean 4 issue.</p>",
        "id": 400953283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1699453028
    }
]