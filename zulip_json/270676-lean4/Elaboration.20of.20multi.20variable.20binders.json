[
    {
        "content": "<p>When defining this type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Handler</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>one might expect sigma m and n to have the same universe levels. However Lean does decide to go maximum polymorphic here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Handler.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">,</span> <span class=\"n\">u_2</span><span class=\"o\">,</span> <span class=\"n\">u_3</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_3</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Now while this is a cool short-hand for spelling out the same <code>Type _ -&gt; Type _</code> signature thrice I am curious as to whether this is intended behavior or just an accident in the way that multi variable binders are elaborated.</p>\n<p>If it is on purpose is there a specific reason apart from is it compact. If it is an accident: Do we consider this a bug given that it produces a slightly unintuitive result?</p>",
        "id": 386209785,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692528282
    },
    {
        "content": "<p>I'm pretty sure this is on purpose, and that it works for the same reason as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l1</span> <span class=\"n\">l2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">List.zipWith</span> <span class=\"n\">f</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span>\n</code></pre></div>\n<p>which fills the (type) metavariable in two different ways</p>",
        "id": 386216864,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1692533674
    }
]