[
    {
        "content": "<p>I'm doing some metaprogramming, taking existing <code>structure T ...</code> declarations, modifying them, and I add a modified <code>structure T' ...</code> via <code>addDecl</code>. But when I do <code>Lean.getStructureInfo? T'</code>, I just get <code>none</code> back for some reason. Does <code>addDecl</code> not register <code>T'</code> as a structure by itself? I was hoping to profit from the amazing info (mapping <code>idx</code> to projection functions, etc) that <code>StructureInfo</code> provides.</p>",
        "id": 338358336,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1677511625
    },
    {
        "content": "<p>If I recall correctly, addDecl is a fairly low-level function which will not do all the extra stuff that the elaborator for structures does, including registering StructureInfo. Is there a reason why you need to resort to addDecl instead of invoking the elaborator for structures, or easier still using a macro?</p>",
        "id": 338505190,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1677563911
    },
    {
        "content": "<p>I'm working on a translation of Lean to a logic which doesn't support polymorphism, so I am monomorphizing environment items, including ones such as <code>Prod</code>. At that point all I have is a <code>Name</code> and then that item's <code>ConstantInfo</code>. Based on that I generate <code>Prod'</code>. So I never have any <code>Syntax</code> to begin with, only the already-elaborated <code>Expr</code>.</p>",
        "id": 338537826,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1677576887
    },
    {
        "content": "<p>You might want to poke around in <code>Lean.Elab.Structure</code>; in addition to processing the syntax (which you don‚Äôt need to do) the functions there also deal with registering the structure as a structure, and I‚Äôm pretty sure some of them take in the elaborated expressions as arguments</p>",
        "id": 338655843,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1677607655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416280\">@Max Nowak üê∫</span> oh, cool! I gave monomorphization a shot not so long ago <a href=\"https://github.com/ufmg-smite/lean-smt/blob/381eca004ca0211306c2c25693205be2850b4dfe/Smt/Tactic/Concretize.lean#L322\">here</a>, but the approach I was trying ran into a wall of performance issues in the reduction engine. I think it could be made to work, but would require more serious work on verified reduction. Happy to chat about how monormphization could be done!</p>",
        "id": 338711261,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1677625942
    },
    {
        "content": "<p>I am yet to see how my toy performs, so we will see! What problems did you encounter, and what do you mean with reduction engine? Cool to see others also working on this.</p>\n<p>What I'm doing is very simple: Every time I encounter an expression <code>.app (.const X) args</code> where <code>X</code> has <code>Type</code> binders, such as <code>x : (Œ± : Type) -&gt; ...</code>, I use those args to find what I need to mono to.<br>\nType indices are handled before monomorphization (<code>Vect Œ± n</code> becomes <code>{v: Vect' Œ± // v.len = n}</code>, so I don't need to worry about them.<br>\nAnd when you encounter arguments to types which are values (and not just <code>Type</code>s), there's two options:<br>\n1) Just monomorphize <code>X</code> to that specific value as well.<br>\n2) Include these parameters in the guarding predicate, similar to type indices.<br>\nI am saying these are the two approaches I've thought about, but I haven't gotten around to implementing either just yet haha.</p>",
        "id": 338714306,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1677627460
    },
    {
        "content": "<p>Ah nice you can register translators via an attribute and then it picks then first translator that \"matches\"?</p>",
        "id": 338789666,
        "sender_full_name": "Max Nowak üêâ",
        "timestamp": 1677665056
    },
    {
        "content": "<blockquote>\n<p>What I'm doing is very simple: Every time I encounter an expression <code>.app (.const X) args</code> where <code>X</code> has <code>Type</code> binders, such as <code>x : (Œ± : Type) -&gt; ...</code>, I use those args to find what I need to mono to.</p>\n</blockquote>\n<p>This is precisely what I was doing as well. The question, though, is how you want to justify to Lean that this transformation is correct, in particular that any further proofs about the monomorphized version are also proofs about the original statement using polymorphic expressions. This is where I ran into performance issues with reduction, because I was essentially trying to justify that <code>X FooType = bodyOfX_at_FooType</code> using partial evaluation on the LHS which mathematically follows by <code>rfl</code>; in practice, though, that <code>rfl</code> check is not feasible at the moment for large expressions.</p>",
        "id": 339970040,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1678137669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416280\">Max Nowak üê∫</span> <a href=\"#narrow/stream/270676-lean4/topic/What.20creates.20StructureInfo.3F/near/338789666\">said</a>:</p>\n<blockquote>\n<p>Ah nice you can register translators via an attribute and then it picks then first translator that \"matches\"?</p>\n</blockquote>\n<p>That's how the final stage of the translation from Lean expressions to SMTLIB works, after all preprocessing steps have been applied. Since monomorphization is a preprocessing step, it would happen before any translation. This staged approach is what successfully worked in Coq, e.g. in <a href=\"https://arxiv.org/pdf/2204.02643.pdf\">this paper</a> from CPP 2023.</p>",
        "id": 339970241,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1678137758
    }
]