[
    {
        "content": "<p>I managed to make a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> for something I encountered :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getOption</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">str</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getIOString</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">file.toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">works</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOption</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIOString</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"s2\">\"no option\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">also_works</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"bp\">&lt;-</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOption</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIOString</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"no option\"</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">var</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOption</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIOString</span> <span class=\"n\">opt</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown identifier 'opt'</span>\n    <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"s2\">\"no option\"</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">var</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">works</span> <span class=\"c1\">-- \"str\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">also_works</span> <span class=\"c1\">-- \"str\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">oops</span> <span class=\"c1\">-- cannot evaluate code because 'oops' uses 'sorry' and/or contains errors</span>\n</code></pre></div>\n<p>What's happening here?</p>",
        "id": 396223643,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697092554
    },
    {
        "content": "<p>I think the <code>unknown identifier</code> message is just unfortunate and the problem is actually related to the use of <code>←</code> in <code>do</code>-notation. If you try this, it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"bp\">←</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOption</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span> <span class=\"n\">getIOString</span> <span class=\"n\">opt</span> <span class=\"k\">else</span> <span class=\"n\">return</span> <span class=\"s2\">\"no option\"</span>\n  <span class=\"n\">return</span> <span class=\"n\">var</span>\n</code></pre></div>",
        "id": 396224722,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1697093075
    },
    {
        "content": "<p>Yes, that's the also_works case . I wonder why this message would show up, usually if I use <code>:=</code> incorrectly I would get an error tell me to use the arrow.</p>",
        "id": 396225513,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697093445
    },
    {
        "content": "<p>Seems some info is unavailable to Lean during elaboration</p>",
        "id": 396225637,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697093520
    },
    {
        "content": "<p>Oh sorry, I totally ignored the other definitions <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 396260946,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1697106879
    },
    {
        "content": "<p>The fact this fails looks like expected behavior to me; after the <code>:=</code> you are no longer in a monadic context, so the <code> (&lt;- getIOString opt)</code> has to be lifted all the way before it</p>",
        "id": 396272639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697111694
    },
    {
        "content": "<p>I'm a bit surprised this doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">also_works</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOption</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIOString</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"no option\"</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I thought that <code>let x &lt;- f</code> and <code>let x := (&lt;- f)</code> meant the same thing</p>",
        "id": 396272940,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697111819
    },
    {
        "content": "<p>it does work</p>",
        "id": 396284425,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697116064
    },
    {
        "content": "<p>but the entire do block has no return value, so it complains about a <code>Unit</code>/ <code>String</code> mismatch on the last line</p>",
        "id": 396284539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697116092
    },
    {
        "content": "<p>putting <code>_</code> after the do block makes the error go away</p>",
        "id": 396284614,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697116117
    },
    {
        "content": "<p>Oh! The version with <code>let x &lt;- f</code> has no errors, which is definitely a bug (it apparently just ignores the <code>x</code> binding and returns <code>f</code> to the do block)</p>",
        "id": 396285071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697116250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier.20in.20.60let.20var.20.3A.3D.20if.20let.60/near/396272639\">said</a>:</p>\n<blockquote>\n<p>The fact this fails looks like expected behavior to me; after the <code>:=</code> you are no longer in a monadic context, so the <code> (&lt;- getIOString opt)</code> has to be lifted all the way before it</p>\n</blockquote>\n<p>Yes, this fails is expected, actually I was fiddling deep in levels of nesting even forgot the <code>:=</code> that was already there so I didn't realize why until I minimize it. But the real wierd thing is the error unkown identifier, which creeps me out as it's another level of horror.</p>\n<p>Usually, when I misuse <code>:=</code>, <code>&lt;-</code>, <code>:= (&lt;- ...)</code>, I get an informative error.</p>\n<ol>\n<li>expect <code>&lt;-</code>, misuse <code>:=</code></li>\n</ol>\n<p>The error propagates down to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">value</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>which reminds me I'm dealing with Monad</p>\n<ol start=\"2\">\n<li>expect <code>:=</code>, misuse `&lt;-'</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"s2\">\"str\"</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">String</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">IO</span> <span class=\"bp\">?</span><span class=\"n\">m.1506</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>which also reminds me.</p>\n<ol start=\"3\">\n<li>even better, in <code>if let</code>, expect <code>:=</code>, misuse `&lt;-', gives me:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">token</span> <span class=\"bp\">'&lt;-';</span> <span class=\"n\">expected</span> <span class=\"bp\">'</span><span class=\"o\">:=</span><span class=\"bp\">'</span> <span class=\"n\">or</span> <span class=\"sc\">'←'</span>\n</code></pre></div>\n<ol start=\"4\">\n<li>in <code>if let</code>, expect <code>:= (&lt;- ... )</code>, misuse <code>:=</code>gives me <code>type mismatch</code>, misuse <code>&lt;-</code> gives me <code>unexpected token '&lt;-'; expected ':=' or '←'</code> which corner me to <code>:= (&lt;- ...)</code>.</li>\n</ol>",
        "id": 396285832,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697116522
    },
    {
        "content": "<p>I'll make a longer <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> to produce all these in a sec.</p>",
        "id": 396286098,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697116622
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2676\">lean4#2676</a></p>",
        "id": 396291108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697118269
    },
    {
        "content": "<p>EDIT: the following is improved and published to a LeanInk annotated output : <a href=\"https://utensil.github.io/lean-playground/Zulip/Arrow.html\">https://utensil.github.io/lean-playground/Zulip/Arrow.html</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getOpt</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">str</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getIO</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"n\">str</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getOptIO</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">pure</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">str</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- if let return</span>\n<span class=\"kd\">def</span> <span class=\"n\">works₁</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOpt</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"s2\">\"none\"</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">works₁</span> <span class=\"c1\">-- works \"str\"</span>\n\n<span class=\"c1\">-- let var &lt;- if let</span>\n<span class=\"kd\">def</span> <span class=\"n\">works₂</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"bp\">&lt;-</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOpt</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"none\"</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">var</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">works₂</span> <span class=\"c1\">-- works: \"str\"</span>\n\n<span class=\"c1\">-- let var := if let</span>\n<span class=\"kd\">def</span> <span class=\"n\">oops₀</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOpt</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span><span class=\"o\">)</span>  <span class=\"c1\">-- unknown identifier 'opt'</span>\n    <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"s2\">\"none\"</span>\n\n  <span class=\"n\">return</span> <span class=\"n\">var</span>\n\n<span class=\"c1\">-- 1. expect `&lt;-`, misuse `:=`</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oops₁₁</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"n\">getOptIO</span> <span class=\"s2\">\"str\"</span>\n  <span class=\"n\">ret</span> <span class=\"c1\">-- unknown identifier 'ret'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oops₁₂</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"n\">getOptIO</span> <span class=\"s2\">\"str\"</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"s2\">\"none\"</span> <span class=\"c1\">-- type mismatch: `IO (Option String)` got `Option ?m.2842`</span>\n  <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">works₁₃</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">ret</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getOptIO</span> <span class=\"s2\">\"str\"</span> <span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"s2\">\"none\"</span>\n  <span class=\"n\">pure</span> <span class=\"n\">ret</span> <span class=\"c1\">-- works</span>\n\n<span class=\"c1\">-- 2. expect `:=`, misuse `&lt;-`</span>\n<span class=\"kd\">def</span> <span class=\"n\">oops₂</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">io</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"s2\">\"str\"</span>\n  <span class=\"n\">io</span> <span class=\"c1\">-- type mismatch: expected `IO String`, got `String`</span>\n\n<span class=\"c1\">-- 3. in `if let`, expect `:=`, misuse `&lt;-`</span>\n<span class=\"kd\">def</span> <span class=\"n\">oops₃</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getOpt</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>  <span class=\"c1\">-- unexpected token '&lt;-'; expected ':=' or '←'</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">return</span> <span class=\"s2\">\"none\"</span>\n\n<span class=\"c1\">-- 4 in `if let`, expect := (&lt;- ... )</span>\n\n<span class=\"c1\">-- 4.1 misuse `:=` gives me type mismatch</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">oops₄₁</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOptIO</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- type mismatch: expected `IO (Option String)`, got `Option ?m.3586`</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"none\"</span>\n\n<span class=\"c1\">-- 4.2 misues `&lt;-`</span>\n<span class=\"kd\">def</span> <span class=\"n\">oops₄₂</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getOptIO</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span> <span class=\"c1\">-- unexpected token '&lt;-'; expected ':=' or '←'</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"none\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">works₄₃</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getOptIO</span> <span class=\"s2\">\"str\"</span><span class=\"o\">)</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"bp\">&lt;-</span> <span class=\"n\">getIO</span> <span class=\"n\">opt</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"none\"</span>\n</code></pre></div>",
        "id": 396295224,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697119443
    },
    {
        "content": "<p>OK, I've got all the variants I want to try, don't know if <a href=\"https://github.com/leanprover/lean4/pull/2676\">lean4#2676</a> fixes them all.</p>",
        "id": 396295399,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697119490
    },
    {
        "content": "<p>The key ones are</p>\n<ul>\n<li><code>oops₀</code>:<ul>\n<li><code>let var := if let</code></li>\n<li>gives <code>unknown identifier</code></li>\n</ul>\n</li>\n<li><code>oops₁₁</code><ul>\n<li>expect <code>&lt;-</code>, misuse <code>:=</code></li>\n<li>gives <code>unknown identifier</code></li>\n</ul>\n</li>\n<li><code>oops₄</code><ul>\n<li>in <code>if let</code>,  forces <code>(&lt;- ... )</code></li>\n</ul>\n</li>\n</ul>",
        "id": 396295834,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697119597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, forgetting the final return was a typo. This still doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getOption</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">str</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">getIOString</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"n\">file.toString</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">also_works</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">opt</span> <span class=\"o\">:=</span> <span class=\"n\">getOption</span> <span class=\"s2\">\"str\"</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">ret</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">&lt;-</span> <span class=\"n\">getIOString</span> <span class=\"n\">opt</span><span class=\"o\">)</span>\n    <span class=\"n\">pure</span> <span class=\"n\">ret</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">pure</span> <span class=\"s2\">\"no option\"</span><span class=\"o\">)</span>\n  <span class=\"n\">pure</span> <span class=\"n\">var</span>\n</code></pre></div>",
        "id": 396296116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697119677
    },
    {
        "content": "<p>(but works fine if I replace <code>:= (&lt;- ...)</code> with <code>&lt;- ...</code>)</p>",
        "id": 396296422,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697119745
    },
    {
        "content": "<p>Idk how to try the Lean in PR...</p>",
        "id": 396296444,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697119749
    },
    {
        "content": "<p>this is I guess semi-expected</p>",
        "id": 396296788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697119820
    },
    {
        "content": "<p>in the variation <code>:= (&lt;- ...)</code> the <code>if let</code> expression is treated as a term, because <code>(&lt;- ...)</code> takes a term. Thus the inner <code>&lt;- getIOString</code> needs to be hoisted out of it (and because of another bug lean doesn't give a nice error message saying it can't lift <code>&lt;-</code> over a binder like it normally does) and you get an unknown variable error</p>",
        "id": 396297217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697119928
    },
    {
        "content": "<p>In the variation <code>&lt;- ...</code> the <code>if let</code> is a <code>doElem</code>, because the <code>let x &lt;- ...</code> doElem takes a doElem on the RHS (and it specially forbids things like <code>let x &lt;- let y &lt;- 1</code> which are otherwise syntactically correct). I believe the reason this is done is so that control flow like <code>if</code> and <code>match</code> are still considered to be part of the same do block</p>",
        "id": 396297559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697120043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier.20in.20.60let.20var.20.3A.3D.20if.20let.60/near/396295834\">said</a>:</p>\n<blockquote>\n<p>The key ones are</p>\n<ul>\n<li><code>oops₀</code>:<ul>\n<li><code>let var := if let</code></li>\n<li>gives <code>unknown identifier</code></li>\n</ul>\n</li>\n<li><code>oops₁₁</code><ul>\n<li>expect <code>&lt;-</code>, misuse <code>:=</code></li>\n<li>gives <code>unknown identifier</code></li>\n</ul>\n</li>\n<li><code>oops₄</code><ul>\n<li>in <code>if let</code>,  forces <code>(&lt;- ... )</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>I can't relate the tests added in PR to these oops. The 2nd test gives me <code>unknown identifier</code>, the 1st test gives me:</p>\n<p><a href=\"/user_uploads/3121/fsoqm8rJtSqBPHH9JJdEBYLG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/fsoqm8rJtSqBPHH9JJdEBYLG/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/fsoqm8rJtSqBPHH9JJdEBYLG/image.png\"></a></div>",
        "id": 396299102,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697120480
    },
    {
        "content": "<p>the second test is a separate bug, I thought it was a duplicate but it's not</p>",
        "id": 396299942,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697120707
    },
    {
        "content": "<p>the first test gives the error you are showing without the fix, but the fix should make it pass</p>",
        "id": 396300023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697120735
    },
    {
        "content": "<p>Ah, so it sounds like the transformation is actually from <code>let x &lt;- f g</code> to <code>let x := (&lt;- do f g)</code>?</p>",
        "id": 396300152,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697120775
    },
    {
        "content": "<p>...does that work? I would expect it to have a separate scope for mutation but now I'm not sure</p>",
        "id": 396300341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697120851
    },
    {
        "content": "<p>no luck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n  <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"k\">do</span>\n    <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"c1\">-- `x` cannot be mutated</span>\n    <span class=\"n\">pure</span> <span class=\"o\">())</span>\n  <span class=\"n\">pure</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 396300612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697120940
    },
    {
        "content": "<p>this is because the <code>do</code> <em>term</em> starts a new scope for mutation, <code>return</code> etc while the <code>do</code> <em>doElem</em> is just a grouping construct (i.e. it's the same issue)</p>",
        "id": 396300893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1697121017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296911\">Utensil Song</span> <a href=\"#narrow/stream/270676-lean4/topic/unknown.20identifier.20in.20.60let.20var.20.3A.3D.20if.20let.60/near/396296444\">said</a>:</p>\n<blockquote>\n<p>Idk how to try the Lean in PR...</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"296911\">@Utensil Song</span>, once the PR compiles, you will be able to use it by setting your <code>lean-toolchain</code> to <code>leanprover/lean4-pr-releases:pr-release-2676</code>.</p>",
        "id": 396376377,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697150544
    },
    {
        "content": "<p>Alternatively you can compile the PR locally and use <code>elan override set</code> following the instructions at <a href=\"https://lean-lang.org/lean4/doc/dev/index.html\">https://lean-lang.org/lean4/doc/dev/index.html</a></p>",
        "id": 396376459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1697150607
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">downloading</span> <span class=\"n\">component</span> <span class=\"bp\">'</span><span class=\"n\">lean'</span>\n<span class=\"n\">Error</span><span class=\"o\">(</span><span class=\"n\">Download</span><span class=\"o\">(</span><span class=\"n\">HttpStatus</span><span class=\"o\">(</span><span class=\"mi\">404</span><span class=\"o\">)),</span> <span class=\"n\">State</span> <span class=\"o\">{</span> <span class=\"n\">next_error</span><span class=\"o\">:</span> <span class=\"n\">None</span><span class=\"o\">,</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span> <span class=\"n\">InternalBacktrace</span> <span class=\"o\">{</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span> <span class=\"n\">None</span> <span class=\"o\">}</span> <span class=\"o\">})</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">download</span> <span class=\"n\">nonexistent</span> <span class=\"n\">lean</span> <span class=\"n\">version</span> <span class=\"bp\">`</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">releases</span><span class=\"o\">:</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"mi\">2676</span><span class=\"bp\">`</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">caused</span> <span class=\"kd\">by</span><span class=\"o\">:</span> <span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">download</span> <span class=\"n\">file</span> <span class=\"k\">from</span> <span class=\"bp\">'</span><span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github.com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">releases</span><span class=\"bp\">/</span><span class=\"n\">releases</span><span class=\"bp\">/</span><span class=\"n\">expanded_assets</span><span class=\"bp\">/</span><span class=\"n\">pr</span><span class=\"bp\">-</span><span class=\"n\">release</span><span class=\"bp\">-</span><span class=\"mi\">2676</span><span class=\"bp\">'</span> <span class=\"n\">to</span> <span class=\"bp\">'/</span><span class=\"n\">Users</span><span class=\"bp\">/</span><span class=\"n\">utensil</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">tmp</span><span class=\"bp\">/</span><span class=\"n\">f52sgiqoibbyouat_file'</span>\n<span class=\"n\">info</span><span class=\"o\">:</span> <span class=\"n\">caused</span> <span class=\"kd\">by</span><span class=\"o\">:</span> <span class=\"n\">http</span> <span class=\"n\">request</span> <span class=\"n\">returned</span> <span class=\"n\">an</span> <span class=\"n\">unsuccessful</span> <span class=\"n\">status</span> <span class=\"n\">code</span><span class=\"o\">:</span> <span class=\"mi\">404</span>\n</code></pre></div>\n<p>Maybe this method won't work for Mac M1? It seems most of the CI has passed. But maybe can't try it on Linux yet as well since one of the Linux CIs gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span>    <span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">Elab</span><span class=\"bp\">/</span><span class=\"n\">Binders.lean</span>\n<span class=\"n\">Lean</span><span class=\"bp\">/</span><span class=\"n\">PrettyPrinter</span><span class=\"bp\">/</span><span class=\"n\">Delaborator</span><span class=\"bp\">/</span><span class=\"n\">Builtins.lean</span><span class=\"o\">:</span><span class=\"mi\">672</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">pure</span> <span class=\"n\">PUnit.unit</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">PUnit.unit</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">PUnit</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span><span class=\"n\">u.538015</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Syntax</span> <span class=\"bp\">×</span> <span class=\"n\">Name</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>\n<p>EDIT: tested on Codespaces (Ubuntu), not working either. (EDIT: I realized that I should check <code>toolchain-available</code> label first, I thought the release CI has passed).</p>\n<p>I'll try to build Lean now (following nix setup, ~45min on Codespaces).</p>",
        "id": 396395984,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697160603
    },
    {
        "content": "<p>Tests from the PR pass for me, but <code>oops₀</code>, <code>oops₁₁</code> and <code>oops₄</code> are not fixed per my test (same errors), and I've confirmed the Lean version by <code>#eval Lean.githash</code> to be \"4bb9a11e0c13a82682af6238e237f05e95a989ac\" immediately before oops.</p>\n<p>Don't know if I have missed something.</p>",
        "id": 396418015,
        "sender_full_name": "Utensil Song",
        "timestamp": 1697169926
    }
]