[
    {
        "content": "<p>I have a little tool with a working <code>lakefile.lean</code>, depending on mathlib and other projects, and using stuff like <code>extern_lib</code>:<br>\n&lt;<a href=\"https://github.com/nomeata/loogle/blob/fcc3a0bc01a9dad20fee2d078f0188014d250908/lakefile.lean\">https://github.com/nomeata/loogle/blob/fcc3a0bc01a9dad20fee2d078f0188014d250908/lakefile.lean</a>&gt;</p>\n<p>Since I may want to deploy that at some time in the future, I’d like to nix’ify the build. I made a feeble attempt at using <code>buildLeanPackage</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span>\n  <span class=\"n\">inputs.nixpkgs.url</span> <span class=\"bp\">=</span> <span class=\"n\">github</span><span class=\"o\">:</span><span class=\"n\">NixOS</span><span class=\"bp\">/</span><span class=\"n\">nixpkgs</span><span class=\"bp\">;</span>\n  <span class=\"n\">inputs.lean.url</span> <span class=\"bp\">=</span> <span class=\"s2\">\"github:leanprover/lean4\"</span><span class=\"bp\">;</span>\n  <span class=\"n\">outputs</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">self</span><span class=\"o\">,</span> <span class=\"n\">lean</span><span class=\"o\">,</span> <span class=\"n\">nixpkgs</span> <span class=\"o\">}:</span>\n    <span class=\"k\">let</span>\n      <span class=\"n\">system</span> <span class=\"bp\">=</span> <span class=\"s2\">\"x86_64-linux\"</span><span class=\"bp\">;</span>\n      <span class=\"n\">pkgs</span> <span class=\"bp\">=</span> <span class=\"n\">nixpkgs.legacyPackages.</span><span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">system</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"n\">leanPkgs</span> <span class=\"bp\">=</span> <span class=\"n\">lean.packages.</span><span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">system</span><span class=\"o\">}</span><span class=\"bp\">;</span>\n      <span class=\"n\">lakePkg</span> <span class=\"bp\">=</span> <span class=\"n\">leanPkgs.buildLeanPackage</span> <span class=\"o\">{</span>\n        <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">\"Loogle\"</span><span class=\"bp\">;</span>\n        <span class=\"n\">src</span> <span class=\"bp\">=</span> <span class=\"bp\">./.;</span>\n      <span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"k\">in</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">packages.</span><span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">system</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">lakePkg</span><span class=\"bp\">;</span>\n    <span class=\"o\">}</span><span class=\"bp\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>But </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nix</span> <span class=\"n\">build</span> <span class=\"bp\">.#</span><span class=\"n\">executable</span>\n</code></pre></div>\n<p>says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"kn\">attribute</span> <span class=\"bp\">'</span><span class=\"n\">Mathlib.Tactic.Find'</span> <span class=\"n\">missing</span>\n\n       <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">m3n7ham5k637bjy1m9q599bskh2iq9jy</span><span class=\"bp\">-</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">buildLeanPackage.nix</span><span class=\"o\">:</span><span class=\"mi\">199</span><span class=\"o\">:</span><span class=\"mi\">83</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>It seems that <code>buidLeanPackage</code> does not build on <code>lake</code> or at least <code>lakefile.lean</code>, but is an alternative to it? In particular, should I call <code>buildLeanPackage</code> for each dependency of my little project (e.g. <code>mathlib</code>)?<br>\n(Like in <a href=\"https://github.com/stites/templates/blob/492ffebb29b479d3ee85fa24beb214ecb227fbb0/lean4/flake.nix#L66-L88\">https://github.com/stites/templates/blob/492ffebb29b479d3ee85fa24beb214ecb227fbb0/lean4/flake.nix#L66-L88</a>)</p>",
        "id": 386131218,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692467331
    },
    {
        "content": "<p>Yes, they are separate, the Nix builder is older than Lake. I got it far enough to auto-translate mathlib's dependency tree <a href=\"https://github.com/kha/nale\">https://github.com/kha/nale</a>, but it isn't clear to me whether there is sufficient reason to continue working on that or whether a different approach should be used.</p>",
        "id": 386144000,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692478098
    },
    {
        "content": "<p>Doing one derivation per package certainly is a no-go for mathlib, except you could cheat and make it a FOD that downloads the cache</p>",
        "id": 386144066,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692478197
    },
    {
        "content": "<p>I'm currently also searching to use nix with to import mathlib and saw this conversation. <br>\nI would like to give some input on the topic \"but it isn't clear to me whether there is sufficient reason to continue working on that or whether a different approach should be used\", basically as a \"lessons learnt\" from Haskell's build sytem story. </p>\n<p>I'm sure this is known but there's a very big mistake that cabal did some 20 years ago, it introduced the <code>Setup.hs</code> file, which reverses the responsibility of the build from the build system (cabal) to the package, which can do <em>anything</em> at install-time. <br>\nThis makes it so that the build systems gives up control and at the same time ties the ecosystem not only to legacy features of its library but also to itself. This is now causing a lot of issues, that the cabal stanza is basically \"complete\" and we do not really need any Setup.hs files anymore but now we're stuck with them, we cannot build any sufficiently large Haskell package without at least using <code>Cabal</code> the library. </p>\n<p>If I were to choose, I would never make the choice of delegating building to the package, but always keep the control in the build system, I would probably do something like generating a lowlevel stanza which can easily be interpreted but also easily be used to create a build plan to invoke the compiler with. I guess this is similar to what you did in an adhoc way in <code>nale</code> but I think that the lower level stanza should be specified, such that it can also be generated by a third party (e.g. if we specify dependencies within nix instead of a lakefile)</p>\n<p>I hope this makes a tiny bit of sense :D</p>",
        "id": 386237325,
        "sender_full_name": "MangoIV",
        "timestamp": 1692546512
    },
    {
        "content": "<p>Thanks for the perspective, but that ship has thoroughly sailed with Lake, hasn't it? I included support for custom Nix overrides inside the package source in Nale as the next-best compromise I could think of.</p>",
        "id": 386237943,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692547093
    },
    {
        "content": "<blockquote>\n<p>but that ship has thoroughly sailed with Lake, hasn't it? </p>\n</blockquote>\n<p>I feared that would be the answer </p>\n<p>On another note, is there any usage example of how nale might be used? I see there's a <code>lakeRepo2flake</code> thing which I tried to use as such, but it didn't work. (no outputs are generated) </p>\n<p><a href=\"/user_uploads/3121/ldAYz1mRydV_DIIwSEXG0MLH/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/ldAYz1mRydV_DIIwSEXG0MLH/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/ldAYz1mRydV_DIIwSEXG0MLH/image.png\"></a></div>",
        "id": 386239164,
        "sender_full_name": "MangoIV",
        "timestamp": 1692548134
    },
    {
        "content": "<p>I’m bindly playing around with it as well.<br>\n<a href=\"https://github.com/nomeata/loogle/blob/537ebbc4b8f115e6fea7f9ea3ffeab6528fcd5d5/flake.nix\">https://github.com/nomeata/loogle/blob/537ebbc4b8f115e6fea7f9ea3ffeab6528fcd5d5/flake.nix</a><br>\nand then</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">nix</span> <span class=\"n\">build</span> <span class=\"bp\">./#</span><span class=\"n\">loogle</span> <span class=\"c1\">--extra-substituters https://lean4.cachix.org/ --extra-trusted-public-keys lean4.cachix.org-1:mawtxSxcaiWE24xCXXgh3qnvlTkyU7evRRnGeAhD4Wk=</span>\n</code></pre></div>\n<p>but I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">nix</span> <span class=\"n\">log</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">mvjzqimxs2q2j58nj4vpkqygkqk6vvy8</span><span class=\"bp\">-</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"kn\">export</span><span class=\"bp\">-</span><span class=\"n\">json.drv</span>\n<span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Option.get</span><span class=\"bp\">!</span> <span class=\"n\">Init.Data.Option.BasicAux</span><span class=\"o\">:</span><span class=\"mi\">16</span><span class=\"o\">:</span><span class=\"mi\">14</span><span class=\"o\">:</span> <span class=\"n\">value</span> <span class=\"n\">is</span> <span class=\"n\">none</span>\n<span class=\"n\">backtrace</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">9</span><span class=\"n\">k6hadmqsqdlhakkkqka9mihy20jia38</span><span class=\"bp\">-</span><span class=\"n\">leanshared</span><span class=\"bp\">/</span><span class=\"n\">libleanshared.so</span><span class=\"o\">(</span><span class=\"n\">lean_panic_fn</span><span class=\"bp\">+</span><span class=\"mi\">0xa3</span><span class=\"o\">)[</span><span class=\"mi\">0x7ffff79908e3</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">b985sk3vpzpr9icps2y5jvirr038jzck</span><span class=\"bp\">-</span><span class=\"n\">lakeexport</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lakeexport</span><span class=\"o\">(</span><span class=\"n\">_lean_main</span><span class=\"bp\">+</span><span class=\"mi\">0x368</span><span class=\"o\">)[</span><span class=\"mi\">0x4668a8</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">b985sk3vpzpr9icps2y5jvirr038jzck</span><span class=\"bp\">-</span><span class=\"n\">lakeexport</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lakeexport</span><span class=\"o\">[</span><span class=\"mi\">0x4680f4</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">d2bpliayddadf6lx6l1i04w265gqw8n6</span><span class=\"bp\">-</span><span class=\"n\">glibc</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">34</span><span class=\"bp\">-</span><span class=\"mi\">210</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"mi\">0x29237</span><span class=\"o\">)[</span><span class=\"mi\">0x7ffff44b1237</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">d2bpliayddadf6lx6l1i04w265gqw8n6</span><span class=\"bp\">-</span><span class=\"n\">glibc</span><span class=\"bp\">-</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">34</span><span class=\"bp\">-</span><span class=\"mi\">210</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"bp\">/</span><span class=\"n\">libc.so.6</span><span class=\"o\">(</span><span class=\"n\">__libc_start_main</span><span class=\"bp\">+</span><span class=\"mi\">0x85</span><span class=\"o\">)[</span><span class=\"mi\">0x7ffff44b12f5</span><span class=\"o\">]</span>\n<span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">b985sk3vpzpr9icps2y5jvirr038jzck</span><span class=\"bp\">-</span><span class=\"n\">lakeexport</span><span class=\"bp\">/</span><span class=\"n\">bin</span><span class=\"bp\">/</span><span class=\"n\">lakeexport</span><span class=\"o\">(</span><span class=\"n\">_start</span><span class=\"bp\">+</span><span class=\"mi\">0x21</span><span class=\"o\">)[</span><span class=\"mi\">0x45e411</span><span class=\"o\">]</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">m961q6p1nfm7ncjw63b9k1jrwmld4l18</span><span class=\"bp\">-</span><span class=\"n\">byffgzrmq4irvfpm0mf21y5ssr07lqks</span><span class=\"bp\">-</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">nativeLibDir'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Lake.Pac</span><span class=\"bp\">&gt;</span>\n  <span class=\"n\">pkg</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Package</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">m961q6p1nfm7ncjw63b9k1jrwmld4l18</span><span class=\"bp\">-</span><span class=\"n\">byffgzrmq4irvfpm0mf21y5ssr07lqks</span><span class=\"bp\">-</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">42</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">nativeLibDir'</span><span class=\"o\">,</span> <span class=\"n\">the</span> <span class=\"n\">environment</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"n\">contain</span> <span class=\"bp\">'</span><span class=\"n\">Lake.Pac</span><span class=\"bp\">&gt;</span>\n  <span class=\"n\">pkg</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Package</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">m961q6p1nfm7ncjw63b9k1jrwmld4l18</span><span class=\"bp\">-</span><span class=\"n\">byffgzrmq4irvfpm0mf21y5ssr07lqks</span><span class=\"bp\">-</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">lakefile.lean</span><span class=\"o\">:</span> <span class=\"n\">package</span> <span class=\"n\">configuration</span> <span class=\"n\">has</span> <span class=\"n\">errors</span>\n</code></pre></div>\n<p>Presumably <code>lakeRepo2flake</code> uses an older version of <code>lake</code> that doesn’t provide <code>nativeLibDir</code> yet?</p>",
        "id": 387030853,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692869667
    },
    {
        "content": "<p>Looks like it’s not using the <code>lake</code> from the <code>lean4</code> repo yet:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">inputs.lake.url</span> <span class=\"bp\">=</span> <span class=\"n\">github</span><span class=\"o\">:</span><span class=\"n\">leanprover</span><span class=\"bp\">/</span><span class=\"n\">lake</span><span class=\"bp\">/</span><span class=\"n\">lean4</span><span class=\"bp\">-</span><span class=\"n\">master</span><span class=\"bp\">;</span>\n</code></pre></div>",
        "id": 387031333,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692869831
    },
    {
        "content": "<p>Indeed, this would need adjustments</p>",
        "id": 387031969,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692870024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"586938\">@MangoIV</span> Sorry, I missed your message. The intended way to use it was via a Nix plugin that provides a custom file scheme for auto-translating Lake packages to flakes, plugged into a custom version of Nix wrapped in a custom version of nix-portable: <a href=\"https://github.com/Kha/nale/blob/master/script/bench#L10\">https://github.com/Kha/nale/blob/master/script/bench#L10</a>. Very much experimental, yes.</p>",
        "id": 387032766,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692870300
    },
    {
        "content": "<p><span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span> What’s wrong with the usual approach of generating nix files from the lean code and then using IFD? </p>\n<p>Thank you though, I’ll have a look</p>",
        "id": 387033810,
        "sender_full_name": "MangoIV",
        "timestamp": 1692870613
    },
    {
        "content": "<p>A nix plugin! Very fancy :-)</p>\n<p>But won’t this make it harder to use this on CI platforms (like garnix) where you get a “stock” nix?</p>",
        "id": 387033822,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692870617
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 387033888,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692870642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> from what I gathered this is intended to be installed with a stock nix.</p>",
        "id": 387034736,
        "sender_full_name": "MangoIV",
        "timestamp": 1692870953
    },
    {
        "content": "<p>I e you use a stock nix to build the custom nix and then use that to build the lake file?</p>",
        "id": 387034860,
        "sender_full_name": "MangoIV",
        "timestamp": 1692870983
    },
    {
        "content": "<p>But you won’t be able to use that easily on platforms that “provide nix”, and do the evaluation for you. Isn’t one of the promises of nix (esp. flake) that everyone can just <code>nix run</code> etc, them? If you have to install a custom nix, that would prevent that, woudn’t it? (but maybe I misunderstand how plugins work)</p>",
        "id": 387035504,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692871224
    },
    {
        "content": "<p>Yeah. That’s why I was a bit surprised, too, I’d rather I were able to use the usual interface. Mind that this isn’t the case with the current nix code either, try e g nix flake show, the outputs generated by buildLeanPackage don’t follow the schema.</p>",
        "id": 387035972,
        "sender_full_name": "MangoIV",
        "timestamp": 1692871393
    },
    {
        "content": "<p>I made some progress, after commenting out all <code>Widget</code> related code from mathlib it is now building things.</p>",
        "id": 387037585,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692871924
    },
    {
        "content": "<p>But I wonder if the use-case “deploying applications built with lean”, where per-module-incremental compilation isn’t that important, is better served by a <code>buildRustPackage</code>-like (or was it go?) approach (vender dependencies, then build it all at once) that treats lake as a much darker box. The audience for the tool is probably rather small, so less moving parts means less maintenance. Although at least per-package-granularity would be nice… hmm.</p>",
        "id": 387038103,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692872061
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> there’s a very strong case for finer grained derivations, namely build caching. Given how large mathlib is I think it would be good to build things at least somewhat incremental. This is also an annoyance I have with buildRustPackage… <br>\nIn my opinion nix should be a way to improve UI. </p>\n<p>I think an approach similar to what Haskell.nix does would be really nice. Of course one would have to be careful to not make the same mistakes they did. (E g slow IFD, common compiler rebuilds, inconsistent use of modules)</p>",
        "id": 387039466,
        "sender_full_name": "MangoIV",
        "timestamp": 1692872544
    },
    {
        "content": "<p>Absolutely!</p>",
        "id": 387041112,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692873104
    },
    {
        "content": "<p>I have always wondered if a little help from the corresponding packaging tool (here lake) could go a long way for nix integration - because reimplementing too big chunks of the packaging tool logic in nix probably doesn't scale well. But I'm not sure what kind of help exactly would be needed.</p>",
        "id": 387041520,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692873237
    },
    {
        "content": "<p>I'm not sure whether this is entirely on topic with lean4 anymore but I have made up my mind about this a couple of times and I think a correct solution would be as follows </p>\n<ul>\n<li>provide an extensible project configuration stanza with common fields and custom fields similar to what dream2nix does</li>\n<li>provide a package-set provisioning system (read something like stackage) and a resolver (read something like the cabal resolver) tightly builtin to nix </li>\n<li>write small amounts of glue between a compiler and nix that plug into the realization of the build plan. </li>\n<li>write automatic converters from existing build plans (e.g. cabal stanzas) to that configuration stanza</li>\n<li>successively include the configuration stanza generation in the ecosystems s.t. they can be easily invoked and provided by a package</li>\n</ul>\n<p>This would offer several improvements: </p>\n<ul>\n<li>avoid code duplication across ecosystems (resolving and package set provisioning are implemented by every package manager), this improves both the usability (more development hours because we don't have to reimplement everything) and the reusability (ecosystems will have an easy start integrating into the nix ecosystem) </li>\n<li>a readable and agreed upon package format that allows developers to build and understand packages and their dependencies without understanding the build tool </li>\n<li>trivial adoption</li>\n</ul>",
        "id": 387044321,
        "sender_full_name": "MangoIV",
        "timestamp": 1692874255
    },
    {
        "content": "<p>Bold vision! I'm too pessimistic to hope that language ecosystems will use anything common, though, rather then reimplementing the wheel. And I'm not sure a common resolver is actually viable, things differ too much (versioning, flags, subcomponents, dependency algebra)</p>",
        "id": 387045989,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692874829
    },
    {
        "content": "<p>I agree it's very ambitious, but I think this could yield an actual improvement. </p>\n<blockquote>\n<p>things differ too much (versioning, flags, subcomponents, dependency algebra)</p>\n</blockquote>\n<p>the question is: should they? There's no <em>fundamental</em> difference, it's merely a choice of implementation.</p>",
        "id": 387046566,
        "sender_full_name": "MangoIV",
        "timestamp": 1692875046
    },
    {
        "content": "<p>They shouldn't maybe, but the psychological forces are too strong, I'd say. Or would you really think that, say, the lean ecosystem would have refrained from building their own build system, package manager, doc generation, package repository - even assuming a general purpose offering would exist?</p>",
        "id": 387048945,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692875929
    },
    {
        "content": "<blockquote>\n<p>r would you really think that, say, the lean ecosystem would have refrained from building their own build system, package manager, doc generation, package repository - even assuming a general purpose offering would exist?</p>\n</blockquote>\n<p>Well, this is also partly due to the state of the nix ecosystem and community, \"outsiders\" or non-nix users probably don't trust that nix can achieve what they want and they fear that this will make adoption for beginners harder (where, currently, if you're not a nix user, the latter is definitely true) </p>\n<p>also, on: </p>\n<blockquote>\n<p>little help from the packaging tool</p>\n</blockquote>\n<p>that's kinda what I was trying to get at with the \"intermediate representation\" where lake should spit out a plan that nix can realize somewhat easily, similar to how haskell.nix generates a json plan. This would also allow specifying or overwriting custom plans from the nix side. (e.g. <code>mathlib.src = inputs.mathlib;</code>)</p>",
        "id": 387050423,
        "sender_full_name": "MangoIV",
        "timestamp": 1692876426
    },
    {
        "content": "<p>So you’d imagine a nix-based build system that's used by various ecosystems? That I find even less plausible (sadly!). nix is great, but not Der Weisheits letzter Schluss, and fans of guuix and bazel and buck would certainly also good support.</p>\n<p>The intermediate representation approach is more plausible, which then can be consumed by nix/bazel/buck etc. It could do for build systems what LSP did for editor, if a nice, narrow and general division of labor between langauge-specific build systems and nix-like systems can be found.</p>",
        "id": 387052247,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692877082
    },
    {
        "content": "<blockquote>\n<p>that's used by various ecosystems</p>\n</blockquote>\n<p>well, I just want it to be easy for an ecosystem to adopt nix, such that it doesn't become a giant overhead that makes communities reject nix at the moment for their ecosystems</p>\n<blockquote>\n<p>nix is great, but not Der Weisheits letzter Schluss, and fans of guuix and bazel and buck would certainly also good support.</p>\n</blockquote>\n<p>sure, but this is not about commitment on one ecosystem but, much the opposite, making it easier to adopt nix with your ecosystem. </p>\n<blockquote>\n<p>The intermediate representation approach is more plausible, which then can be consumed by nix/bazel/buck etc. It could do for build systems what LSP did for editor, if a nice, narrow and general division of labor between language-specific build systems and nix-like systems can be found.</p>\n</blockquote>\n<p>yes, this is definitely more approachable and would be good enough in most cases.</p>",
        "id": 387060459,
        "sender_full_name": "MangoIV",
        "timestamp": 1692879724
    },
    {
        "content": "<p>Just to clarify, the goal of Nale was to build existing Lake packages with as little setup (including of Nix) as possible. But using it as a library as part of a standard flake using standard Nix should also be feasible.</p>",
        "id": 387061878,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692880141
    },
    {
        "content": "<p>The implementation of <a href=\"https://github.com/NixOS/rfcs/blob/master/rfcs/0092-plan-dynamism.md\">https://github.com/NixOS/rfcs/blob/master/rfcs/0092-plan-dynamism.md</a> is moving along at a steady pace. Do dynamic derivations help here?</p>",
        "id": 387062726,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1692880421
    },
    {
        "content": "<p>they will presumably make the situation around IFD a lot easier, so if we're able to get lake to spit out a format that nix can realize, this will definitely help.</p>",
        "id": 387064920,
        "sender_full_name": "MangoIV",
        "timestamp": 1692880964
    },
    {
        "content": "<blockquote>\n<p>But using it as a library as part of a standard flake using standard Nix should also be feasible.</p>\n</blockquote>\n<p>It’s been building mathlib for a while here already, so let’s see :-)</p>",
        "id": 387067249,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692881682
    },
    {
        "content": "<p>Some success!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">nix</span> <span class=\"n\">build</span> <span class=\"bp\">./#</span><span class=\"n\">mathlib4</span> <span class=\"c1\">--offline</span>\n<span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">ls</span> <span class=\"bp\">-</span><span class=\"n\">l</span> <span class=\"n\">result</span><span class=\"bp\">/</span><span class=\"n\">Mathlib.olean</span>\n<span class=\"n\">lrwxrwxrwx</span> <span class=\"mi\">1</span> <span class=\"n\">root</span> <span class=\"n\">root</span> <span class=\"mi\">67</span> <span class=\"n\">Jan</span>  <span class=\"mi\">1</span>  <span class=\"mi\">1970</span> <span class=\"n\">result</span><span class=\"bp\">/</span><span class=\"n\">Mathlib.olean</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"n\">a32m5lhdxyi6813fmvflix66zz2w1yb3</span><span class=\"bp\">-</span><span class=\"n\">Mathlib</span><span class=\"bp\">/./</span><span class=\"n\">Mathlib.olean</span>\n</code></pre></div>\n<p>Unfortunately, trying to build a package that depends on mathlib says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"kn\">attribute</span> <span class=\"bp\">'</span><span class=\"n\">Aesop'</span> <span class=\"n\">missing</span>\n\n       <span class=\"n\">at</span> <span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">store</span><span class=\"bp\">/</span><span class=\"mi\">146</span><span class=\"n\">ps5dfp8n0pfmw397nzs0wv0apppnz</span><span class=\"bp\">-</span><span class=\"n\">source</span><span class=\"bp\">/</span><span class=\"n\">nix</span><span class=\"bp\">/</span><span class=\"n\">buildLeanPackage.nix</span><span class=\"o\">:</span><span class=\"mi\">199</span><span class=\"o\">:</span><span class=\"mi\">83</span><span class=\"o\">:</span>\n\n          <span class=\"mi\">198</span><span class=\"bp\">|</span>              <span class=\"k\">else</span> <span class=\"n\">abort</span> <span class=\"s2\">\"errors while parsing imports of ${mod}:</span><span class=\"se\">\\n</span><span class=\"s2\">${lib.concatStringsSep \"</span><span class=\"bp\">\\</span><span class=\"n\">n</span><span class=\"s2\">\" header.errors}\"</span><span class=\"bp\">;</span>\n          <span class=\"mi\">199</span><span class=\"bp\">|</span>     <span class=\"k\">in</span> <span class=\"n\">mkMod</span> <span class=\"n\">mod</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">dep</span><span class=\"o\">:</span> <span class=\"k\">if</span> <span class=\"n\">modDepsMap</span> <span class=\"bp\">?</span> <span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">dep</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"n\">modCandidates.</span><span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">dep</span><span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"n\">externalModMap.</span><span class=\"bp\">$</span><span class=\"o\">{</span><span class=\"n\">dep</span><span class=\"o\">})</span> <span class=\"n\">deps</span><span class=\"o\">))</span> <span class=\"n\">modDepsMap</span><span class=\"bp\">;</span>\n             <span class=\"bp\">|</span>                                                                                   <span class=\"bp\">^</span>\n          <span class=\"mi\">200</span><span class=\"bp\">|</span>   <span class=\"n\">makeEmacsWrapper</span> <span class=\"bp\">=</span> <span class=\"n\">name</span><span class=\"o\">:</span> <span class=\"n\">emacs</span><span class=\"o\">:</span> <span class=\"n\">lean</span><span class=\"o\">:</span> <span class=\"n\">writeShellScriptBin</span> <span class=\"n\">name</span> <span class=\"bp\">''</span>\n<span class=\"o\">(</span><span class=\"n\">use</span> <span class=\"bp\">'</span><span class=\"c1\">--show-trace' to show detailed location information)</span>\n</code></pre></div>\n<p>whether I pass the <code>aesop4</code> flake in <code>depFlakes</code> or not. Odd.</p>\n<p>Seems to be related to <code>lean_exe</code>, because as a <code>lean_lib</code> the target builds. Later more.</p>",
        "id": 387072866,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692883273
    },
    {
        "content": "<p>Hmm, can't make sense of it. Building  a module as a library via <code>lakeRepo2flake</code>, it works. Building the same <code>.lean</code> file as an executable via <code>lakeRepo2flake</code> works as well. Under the hood this uses <code>buildLeanPackage</code>, but I failed to call <code>buildLeanPackage</code> in a way that even the library builds. Tricky nix stuff…</p>",
        "id": 387118390,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692894091
    },
    {
        "content": "<p>Ah, I have to use <code>.modRoot</code>. Ok, I can build the libray with plain <code>buildLeanPackage</code> now, so let’s see why <code>.executable</code> doesn’t work.</p>",
        "id": 387118793,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692894215
    },
    {
        "content": "<p>Some more sleuthing: It seems that <code>buildLeanPackage</code> gets confused in <code>allStaticLibDeps</code> if some of the dependency flakes have extra libraries (such as <code>AesopTest</code>), where it then will complain about a missing <code>Aesop</code>. I made some progress by removing all these extra <code>lean_lib</code>s of  the dependencies, it’s building 5000 c files now. That’s what I get for writing a tool that imports mathlib :-)</p>",
        "id": 387148634,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692904806
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"586938\">MangoIV</span> <a href=\"#narrow/stream/270676-lean4/topic/nix.3A.20buildLeanPackage.20vs.2E.20lakefile/near/387050423\">said</a>:</p>\n<blockquote>\n<p>Well, this is also partly due to the state of the nix ecosystem and community, \"outsiders\" or non-nix users probably don't trust that nix can achieve what they want and they fear that this will make adoption for beginners harder</p>\n</blockquote>\n<p>Unfortunately, trust is not the biggest issue here. Nix simply cannot achieve what any general purpose language wants because it does not support Windows.</p>",
        "id": 387193607,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692929248
    },
    {
        "content": "<p>After a few hours of compiling, success:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">nix</span> <span class=\"n\">run</span> <span class=\"bp\">./#</span><span class=\"n\">loogle</span> <span class=\"c1\">-- Std.Data.List.Lemmas '(List.replicate (_ + _) _ = _)'</span>\n<span class=\"n\">Found</span> <span class=\"mi\">2</span> <span class=\"n\">definitions</span> <span class=\"n\">mentioning</span> <span class=\"n\">List.replicate</span><span class=\"o\">,</span> <span class=\"n\">HAdd.hAdd</span> <span class=\"n\">and</span> <span class=\"n\">Eq.</span>\n<span class=\"n\">Of</span> <span class=\"n\">these</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"k\">match</span> <span class=\"n\">your</span> <span class=\"n\">patterns.</span>\n\n<span class=\"n\">List.replicate_succ</span>\n</code></pre></div>\n<p>And the binary is actually small, despite linking in all of <code>mathlib.a</code>. Probably link time optimization! </p>\n<p>But I should try to make <code>buildLeanPackage</code> to pass only the used <code>.o</code> files from dependencies to the linker, no point in compiling all of mathlib if the executable only uses 4 packages.</p>",
        "id": 387225391,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692949328
    },
    {
        "content": "<p>Ah, I probably did that so the linker cmdline size doesn't explode, but for mathlib dependents that's indeed not optimal</p>",
        "id": 387226868,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692950093
    },
    {
        "content": "<p>I’m not sure I can make that change without a bigger refactoring: If I see it right, then module dependencies are in  <code>modDepsMap</code> only for modules of the current package, so calculating the list of transitive objects isn’t quite possible yet. I’ll go with the current code for now, there are other hurdles before I can deploy loogle :-)</p>",
        "id": 387232294,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692952494
    },
    {
        "content": "<p>I am currently patching mathlib to not pull in ProofWidgets, which requires some <code>npm</code> stuff to be run before. Such stuff is probably out of scope for <code>buildLeanPackage</code> for now.</p>\n<p>Hmm, and it seems I can’t easily (without recompiling everything) patch from nix (e.g. with <code>pkgs.applyPatches</code>), as it changes the name of the input paths.</p>",
        "id": 387235659,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692953697
    },
    {
        "content": "<p>No <code>npm</code> should be required for ProofWidgets, if you can just use the downloadable release. (In particular, normal users of Mathlib are not expected to have <code>npm</code> available!)</p>",
        "id": 387245728,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692957408
    },
    {
        "content": "<p>I’m trying to deploy a lean application that uses mathlib as a library with nix, where you want to build from source. So unfortunately I don’t get to claim “normal users” benefits :-)</p>",
        "id": 387250186,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692959194
    },
    {
        "content": "<p>But you can't just pretend the ProofWidgets zip is a \"source\" file? I guess I haven't drunk enough of the nix kool-aid. :-)</p>",
        "id": 387256840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1692961917
    },
    {
        "content": "<p>There might be a way, but then I’d also have to figure out how to inject that into the nix-lean-buildsystem. It’s a mess. For now just patching Widgets out is a quicker way to get loogle online :-)</p>",
        "id": 387264031,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692965255
    },
    {
        "content": "<p>Next hurdle taken: Replace the <code>Alloy</code> setup for FFI with just a plain .c file, and figured out how to build that even though the c library depends on a system library (<code>libseccomp</code>), both using <code>lake</code> and <code>nix</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">~/</span><span class=\"n\">projekte</span><span class=\"bp\">/</span><span class=\"n\">programming</span><span class=\"bp\">/</span><span class=\"n\">loogle</span> <span class=\"bp\">$</span> <span class=\"n\">nix</span> <span class=\"n\">run</span> <span class=\"bp\">.#</span><span class=\"n\">loogle</span> <span class=\"c1\">--  --module  Std.Data.List.Lemmas '(List.replicate (include_str \"test\") = _)'</span>\n<span class=\"n\">Bad</span> <span class=\"n\">system</span> <span class=\"n\">call</span> <span class=\"o\">(</span><span class=\"n\">Speicherabzug</span> <span class=\"n\">geschrieben</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Now ready to create a service, then a nixos configuration, then deploy it.</p>",
        "id": 387274734,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692969538
    },
    {
        "content": "<p>Almost there, just uploading 4GB of oleans to Hetzner:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>nixos-rebuild<span class=\"w\"> </span>switch<span class=\"w\"> </span>--use-substitutes<span class=\"w\"> </span>--target-host<span class=\"w\"> </span>root@loogle.nomeata.de<span class=\"w\"> </span>--flake<span class=\"w\"> </span>.#loogle<span class=\"w\"> </span>--fast\n…\n</code></pre></div>",
        "id": 387294678,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692975964
    },
    {
        "content": "<p>And it’s live…  I think the time spend on getting this to run in nix was well worth it that I can now deploy it as simply as that.</p>",
        "id": 387303381,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692979243
    }
]