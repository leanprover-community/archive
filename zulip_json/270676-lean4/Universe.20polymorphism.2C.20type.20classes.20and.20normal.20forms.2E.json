[
    {
        "content": "<p>Has there been any tooling built so far to lift generic lemmas over classes such as <code>Functor</code> and <code>Monad</code> to more specific instances?</p>\n<p>I'm wondering particular in the case (such as <code>List</code> and <code>Option</code>) where the more specific type method has more universe polymorpism than the class method.  e.g., <code>List.bind</code> and <code>Option.bind</code> allows the universes of α and β to vary while <code>Bind.bind</code> does not.</p>\n<p>This is related the standard library in that it'd be great to write some lemmas at the class level and still have them automatically used on code that uses the class specific version of operator.</p>",
        "id": 399979811,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698942431
    },
    {
        "content": "<p>There are various threads about redesigning functor to be universe polymorphic</p>",
        "id": 399982292,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698943242
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Changing.20the.20functor.20typeclasses</a> had a lean 3 prototype, <a href=\"#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/universe.20polymorphic.20IO</a> has extended discussion</p>",
        "id": 399982510,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698943320
    },
    {
        "content": "<p>Thanks. I've read the universe polymorphic IO discussion.  I should have cited that.  It looks like that effort stalled out.  After a little bit of experimentation on my own, I felt <code>HMonad</code> is going to be difficult.</p>\n<p>Possible approaches to this I can think of:</p>\n<ol>\n<li>Generalize typeclasses like <code>Functor</code>, <code>Monad</code> to support more polymorphism.</li>\n<li>Restrict the universe polymorphism of <del>class</del> instance specific definitions.</li>\n<li>Build some sort of lift capability to lift theorems from the class to the type-specific instances.</li>\n<li>Generalize key tactics like <code>simp</code> to understand these operations are the same.  This might be solvable with rewriting modulo congruence closure, but the universe polymorpism makes me uncertain.</li>\n</ol>\n<p>I was thinking about doing some analysis to see how many problems option (2) created, but wanted to see if there's other options I should try first.</p>",
        "id": 399984858,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698944088
    },
    {
        "content": "<p>I think there's a compromise for <code>1</code> where we write polymorphic typeclasses for the notations, but not the lemmas</p>",
        "id": 399988618,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698945307
    },
    {
        "content": "<p>Which at least means we only have one way to spell things</p>",
        "id": 399988642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698945318
    },
    {
        "content": "<p>One downside is tht it's not just lemmas, but also default methods.  <code>Monad</code> doesn't have lemmas, but I found it tricky to generalize just because of the implementation of <code>seq</code> in terms of <code>bind</code>.</p>\n<p>I suspect option 2 is the most practical since one could hopefully lift the operation to the max universe, but it doesn't feel very elegant.</p>",
        "id": 399995049,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698947797
    },
    {
        "content": "<p>What do you mean by \"class-specific\"?</p>",
        "id": 399996442,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698948284
    },
    {
        "content": "<p>Are you using class to mean  something different to <code>class</code>?</p>",
        "id": 399996461,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698948294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Sorry, yes  that was confusing - I meant the opposite. :)  I meant not having multiple universe variables in instance specific methods such as <code>Option.bind</code>.</p>",
        "id": 399996866,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1698948474
    },
    {
        "content": "<p>I think that would be pretty annoying for mathlib, as it would break all sorts of things downstream</p>",
        "id": 399997666,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698948826
    }
]