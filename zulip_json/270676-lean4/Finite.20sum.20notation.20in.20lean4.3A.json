[
    {
        "content": "<p>In the repository referenced here: <a href=\"#narrow/stream/252551-graph-theory/topic/max-flow.20min-cut.20help\">https://leanprover.zulipchat.com/#narrow/stream/252551-graph-theory/topic/max-flow.20min-cut.20help</a><br>\nthey try to prove the max flow min cut theorem in graphs. In this the total flow into a set of vertices as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mk_in</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">V</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">finset.univ</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">y</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>I tried to replicate this in lean4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">flow_in</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">flow</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">vSet</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∑'</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"bp\">\\</span> <span class=\"n\">vSet</span><span class=\"o\">),</span>  <span class=\"bp\">∑'</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"n\">vSet</span><span class=\"o\">,</span> <span class=\"n\">flow</span> <span class=\"n\">s</span> <span class=\"n\">t</span>\n</code></pre></div>\n<p>Lean 4 complains that <code>in</code> is an error and says <code>expected ','</code></p>",
        "id": 344010144,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679584284
    },
    {
        "content": "<p>I suspect I can do it by explicitly using the fold functions for Finsets and <code>tsum</code>, but is there a neat way to use the sum notation?</p>",
        "id": 344010971,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679584452
    },
    {
        "content": "<p>Why did you use <code>∑'</code> instead?</p>",
        "id": 344012196,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1679584703
    },
    {
        "content": "<p>I followed the docs (<a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=tsum#doc\">docs4#tsum</a>)</p>",
        "id": 344012803,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679584824
    },
    {
        "content": "<p>Also it was recommended here: <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Beginner.20question.20on.20infinite.20sums\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Beginner.20question.20on.20infinite.20sums</a></p>",
        "id": 344012936,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679584851
    },
    {
        "content": "<p>Tried <code>∑</code> first but got <code>expected token</code> and then searched zulip to find this thread.</p>",
        "id": 344013130,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679584895
    },
    {
        "content": "<p><code>tsum</code> is intended for infinite sums</p>",
        "id": 344014539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679585146
    },
    {
        "content": "<p>And there's no <code>in</code> in its notation.</p>",
        "id": 344014679,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679585166
    },
    {
        "content": "<p>But anyways, you want <code>∑</code></p>",
        "id": 344014878,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679585207
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">flow_out</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">flow</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">vSet</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">∑</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">vSet</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑</span> <span class=\"n\">t</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">Finset.univ</span> <span class=\"bp\">\\</span> <span class=\"n\">vSet</span><span class=\"o\">),</span> <span class=\"n\">flow</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This throws the error <code>expected token</code></p>",
        "id": 344017342,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679585643
    },
    {
        "content": "<p>Error underlining <code>∑</code></p>",
        "id": 344017462,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679585663
    },
    {
        "content": "<p>Do you have <code>open BigOperators</code>?</p>",
        "id": 344017549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1679585676
    },
    {
        "content": "<p>ah no</p>",
        "id": 344017583,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679585685
    },
    {
        "content": "<p>Works. Thanks :)</p>",
        "id": 344018144,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679585801
    },
    {
        "content": "<p><code>Finset.univ \\ vSet</code> is <code>vSetᶜ</code>, by the way</p>",
        "id": 344022323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679586630
    },
    {
        "content": "<p>it works (although it gets a bit hard to read). Do we have a way to put a bar on top (like latex's \\overline{}?)</p>",
        "id": 344024298,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679587009
    },
    {
        "content": "<p>Don't think so! That sounds like WYSIWYG witchcraft.</p>",
        "id": 344024598,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1679587069
    },
    {
        "content": "<p>I hope I can use this thread for further questions about notation that I am trying out in this file: When defining a subset of a finset, the set brackets/builder notation constructs a set. At first I hoped there would be a simple way to translate this into a Finset. It seems more convoluted though since Finset consists of a multiset and a nodup predicate and so on. What's the quickest (notationally neatest) way to do this?:</p>\n<p>Simple example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inNeighbours</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"bp\">∈</span> <span class=\"n\">Fintype.elems</span> <span class=\"bp\">|</span> <span class=\"n\">G.isEdge</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 344033987,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679588885
    },
    {
        "content": "<p>This is an error because the RHS is a set. But I am creating a subset of Fintype.elems which is a Finset.</p>",
        "id": 344034212,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679588930
    },
    {
        "content": "<p>Do we not have nice syntax for <code>Finset.filter</code>?</p>",
        "id": 344035612,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1679589193
    },
    {
        "content": "<p>No, generally you use <code>Finset.filter</code> directly.</p>\n<p>Also, <span class=\"user-mention\" data-user-id=\"466334\">@Shreyas Srinivas</span>, one thing to know about the <code>Finset</code> API is that you almost never need to worry about the fact it's a <code>multiset</code> with a <code>nodup</code> predicate. There should be enough functions to construct whatever <code>Finset</code> you need.</p>",
        "id": 344037560,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679589604
    },
    {
        "content": "<p>If you want to use set notation, you can try using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Set.toFinset#doc\">docs4#Set.toFinset</a>, which works if you have enough <code>Fintype</code>/<code>Decidable</code> instances lying around.</p>",
        "id": 344037817,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679589671
    },
    {
        "content": "<p>It can look like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inNeighbours</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"bp\">|</span> <span class=\"n\">G.isEdge</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n</code></pre></div>\n<p>though you might need to write it as <code>Set.toFinset {w | G.isEdge w v}</code>. I expect you'll need a <code>[DecidableRel G.isEdge]</code> argument.</p>\n<p>Note that you shouldn't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.elems#doc\">docs4#Fintype.elems</a> -- the API expects that you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.univ#doc\">docs4#Finset.univ</a> (i.e., lemmas are about the latter, not the former).</p>",
        "id": 344038239,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679589768
    },
    {
        "content": "<p>Ah okay got it.  Thanks :)</p>\n<p>Additionally <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>  that <a href=\"#narrow/stream/270676-lean4/topic/Lean.20Mac.20OS.20Ventura.20.28Intel.29.20CPU.20usage\">macOS issue</a> occurred again.</p>",
        "id": 344039933,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679590184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Finite.20sum.20notation.20in.20lean4.3A/near/344038239\">said</a>:</p>\n<blockquote>\n<p>It can look like this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">inNeighbours</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">Digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"bp\">|</span> <span class=\"n\">G.isEdge</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">toFinset</span>\n</code></pre></div>\n<p>though you might need to write it as <code>Set.toFinset {w | G.isEdge w v}</code>. I expect you'll need a <code>[DecidableRel G.isEdge]</code> argument.</p>\n<p>Note that you shouldn't use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Fintype.elems#doc\">docs4#Fintype.elems</a> -- the API expects that you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.univ#doc\">docs4#Finset.univ</a> (i.e., lemmas are about the latter, not the former).</p>\n</blockquote>\n<p>Since I am not using this for computations yet, I marked the defs noncomputable and then lean stopped asking for a DecidableRel instance</p>",
        "id": 344044377,
        "sender_full_name": "Shreyas Srinivas",
        "timestamp": 1679591163
    }
]