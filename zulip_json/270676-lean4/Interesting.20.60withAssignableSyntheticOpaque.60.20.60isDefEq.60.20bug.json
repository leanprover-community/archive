[
    {
        "content": "<p>I figure this has to do with delayed-assigned metavariables. Consider the following apparent <code>refine</code> bug:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"c1\">-- unknown free variable '_uniq.39413'</span>\n</code></pre></div>\n<p>This seems to actually be due to <code>elabTermEnsuringType</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"test1 \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">elabTermEnsuringType</span> <span class=\"o\">(</span><span class=\"bp\">←`</span><span class=\"o\">(</span><span class=\"n\">term</span><span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"bp\">$</span><span class=\"n\">stx</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test1</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"c1\">-- unknown free variable '_uniq.46964'</span>\n</code></pre></div>\n<p>which in turn seems to be due to an issue with <code>isDefEq</code> under <code>withAssignableSyntheticOpaque</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"test2 \"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withAssignableSyntheticOpaque</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">isDefEq</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getMainTarget</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test2</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">_</span> <span class=\"c1\">-- unknown free variable '_uniq.48582'</span>\n</code></pre></div>\n<p>Removing <code>withAssignableSyntheticOpaque</code> fixes the issue.</p>\n<p>Note: replacing the underscore on the rhs of the <code>=</code> with the explicit term fixes the issue as well.</p>",
        "id": 400471552,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699253298
    },
    {
        "content": "<p>It seems to be that there's a bug in how <code>?...</code> holes are abstracted? Just elaborating the term <code>fun _ : Nat =&gt; ?_</code> leads to an expression with a metavariable that (through delayed assignment) is a metavariable with a type with the offending unbound fvar.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span> <span class=\"k\">in</span>\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"e = {e}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvs</span> <span class=\"bp\">←</span> <span class=\"n\">getMVars</span> <span class=\"n\">e</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"mvars = {mvs.map Expr.mvar}</span><span class=\"se\">\\n</span><span class=\"s2\">{← mvs.mapM MVarId.isDelayedAssigned}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  e = fun x ↦ ?m.4341 x</span>\n<span class=\"cm\">  mvars = [?m.4341, ?m.4339]</span>\n<span class=\"cm\">  [true, false]</span>\n<span class=\"cm\">  -- ?m.4341 : (x : Nat) → ?m.4340 x</span>\n<span class=\"cm\">  -- ?m.4339 : ?m.4340 _uniq.4336</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">test</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">_</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  e = fun x ↦ ?m.4348 x</span>\n<span class=\"cm\">  mvars = [?m.4348]</span>\n<span class=\"cm\">  [false]</span>\n<span class=\"cm\">  -- ?m.4348 : (x : Nat) → ?m.4347 x</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>",
        "id": 400598163,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699299151
    },
    {
        "content": "<p>Oh interesting! Hmmm...the offending fvar <em>is</em> present in local context of the mvar that has that fvar in its type, at least, though.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Tactic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">showLCtxFVars</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">m.withContext</span> <span class=\"k\">do</span>\n  <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getLCtx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fvarIdToDecl.toList.map</span> <span class=\"o\">(</span><span class=\"bp\">·.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">name</span><span class=\"o\">)</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"test\"</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Term.elabTerm</span> <span class=\"n\">stx</span> <span class=\"n\">none</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"e = {e}\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">mvs</span> <span class=\"bp\">←</span> <span class=\"n\">getMVars</span> <span class=\"n\">e</span>\n  <span class=\"k\">let</span> <span class=\"n\">fvars</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mvs.mapM</span> <span class=\"n\">showLCtxFVars</span>\n  <span class=\"k\">let</span> <span class=\"n\">types</span> <span class=\"bp\">←</span> <span class=\"n\">liftM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">mvs.mapM</span> <span class=\"n\">MVarId.getType</span>\n  <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"mvars = {mvs.map Expr.mvar}</span><span class=\"se\">\\n</span><span class=\"s2\">{fvars}</span><span class=\"se\">\\n</span><span class=\"s2\">{types}</span><span class=\"se\">\\n</span><span class=\"s2\">{← mvs.mapM MVarId.isDelayedAssigned}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">False</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">test</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">?</span><span class=\"n\">_</span>\n  <span class=\"c\">/-</span>\n<span class=\"cm\">  mvars = [?m.7027, ?m.7025]</span>\n<span class=\"cm\">  [[_uniq.7019], [_uniq.7019, _uniq.7022]]</span>\n<span class=\"cm\">  [(x : Nat) → ?m.7026 x, ?m.7026 _uniq.7022]</span>\n<span class=\"cm\">  [true, false]</span>\n<span class=\"cm\">  -/</span>\n</code></pre></div>\n<p>If all the eventual delayed-assignment-related substitutions worked as intended, this would be ok, right?</p>",
        "id": 400600733,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1699300350
    }
]