[
    {
        "content": "<p>I was expecting this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">DArray</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"n\">where</span> <span class=\"n\">mk</span> <span class=\"o\">::</span>\n  <span class=\"n\">size</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">get</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">Fin</span> <span class=\"n\">size</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"n\">i</span>\n\n<span class=\"c1\">-- TODO: Override mk</span>\n<span class=\"c1\">-- attribute [extern \"lean_array_size\"] DArray.mk</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_array_size\"</span><span class=\"o\">]</span> <span class=\"n\">DArray.size</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">extern</span> <span class=\"s2\">\"lean_array_fget\"</span><span class=\"o\">]</span> <span class=\"n\">DArray.get</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">DArray</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"c1\">-- @[nolint unusedVariables]</span>\n<span class=\"kd\">@[extern \"lean_mk_empty_array_with_capacity\"]</span>\n<span class=\"kd\">def</span> <span class=\"n\">mkEmpty</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">):</span> <span class=\"n\">DArray</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Fin.elim0</span> <span class=\"n\">i</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Repr</span> <span class=\"o\">(</span><span class=\"n\">DArray</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">reprPrec</span> <span class=\"n\">a</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"n\">repr</span> <span class=\"n\">a.size</span>\n\n<span class=\"k\">#eval</span> <span class=\"bp\">@</span><span class=\"n\">mkEmpty</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n</code></pre></div>\n<p>but I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">$</span> <span class=\"n\">lake</span> <span class=\"n\">build</span>\n<span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"bp\">/</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"n\">Building</span> <span class=\"n\">DArray</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"bp\">&gt;</span> <span class=\"n\">LEAN_PATH</span><span class=\"bp\">=./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">lake</span><span class=\"bp\">-</span><span class=\"n\">packages</span><span class=\"bp\">/</span><span class=\"n\">std</span><span class=\"bp\">/</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"n\">LD_LIBRARY_PATH</span><span class=\"bp\">=/</span><span class=\"n\">etc</span><span class=\"bp\">/</span><span class=\"n\">sane</span><span class=\"bp\">-</span><span class=\"n\">libs</span><span class=\"o\">:</span><span class=\"bp\">./</span><span class=\"n\">build</span><span class=\"bp\">/</span><span class=\"n\">lib</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jojo</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/lean ./././DArray.lean -R ././. -o ./build/lib/DArray.olean -i ./build/lib/DArray.ilean -c ./build/ir/DArray.c</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">stderr</span><span class=\"o\">:</span>\n<span class=\"n\">could</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"n\">native</span> <span class=\"n\">implementation</span> <span class=\"n\">of</span> <span class=\"n\">external</span> <span class=\"n\">declaration</span> <span class=\"bp\">'</span><span class=\"n\">DArray.mkEmpty'</span> <span class=\"o\">(</span><span class=\"n\">symbols</span> <span class=\"bp\">'</span><span class=\"n\">l_DArray_mkEmpty___boxed'</span> <span class=\"n\">or</span> <span class=\"bp\">'</span><span class=\"n\">l_DArray_mkEmpty'</span><span class=\"o\">)</span>\n<span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">external</span> <span class=\"n\">command</span> <span class=\"bp\">`/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">jojo</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---4.0.0/bin/lean` exited with code 1</span>\n</code></pre></div>\n<p>Why does it look for <code>l_DArray_mkEmpty</code> when I told it that the extern name is  <code>lean_mk_empty_array_with_capacity</code>?</p>",
        "id": 392814064,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695551050
    },
    {
        "content": "<p>The interpreter relies on the compiler generating a homogeneous representation of <code>extern</code>s (the <code>_boxed</code> version). It might not be needed here but the interpreter doesn't check that currently.</p>",
        "id": 392815554,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695551724
    },
    {
        "content": "<p>Does that mean I can’t use <code>#eval</code> inside the same file, but if I’d import it, it would work?</p>",
        "id": 392817612,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695552524
    },
    {
        "content": "<p>Only if you use (the somewhat experimental) <code>precompileModules</code>, which will insert a compilation step in between the two files</p>",
        "id": 392818845,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695552985
    },
    {
        "content": "<p>Ok, progress, I now get a segmentation fault :-D</p>\n<p>What is the significance of the <code>@&amp;</code> annotation? Different ABI (<code>lean_obj_arg</code> vs. <code>b_obj_arg</code> or something like this)?</p>",
        "id": 392822569,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695555011
    },
    {
        "content": "<p>Exactly, see <a href=\"https://lean-lang.org/lean4/doc/dev/ffi.html#borrowing\">https://lean-lang.org/lean4/doc/dev/ffi.html#borrowing</a></p>",
        "id": 392823977,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1695556046
    },
    {
        "content": "<p>Ok, but I think I got that right… or maybe not, anyways, I made some more progress.</p>\n<p>There seems to be no way to set that attribute on structure constructors/projections, right?</p>",
        "id": 392825235,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1695557141
    },
    {
        "content": "<p>They can be <a href=\"https://github.com/utensil/ginac-lean/blob/main/lean/Ginac/Symbol.lean\">set on opaque types</a>. Would love to know that they can also be set on actual Lean types, as this would answer what I wondered <a href=\"#narrow/stream/270676-lean4/topic/Parallelism.20outside.20IO/near/392837552\">here</a>.</p>",
        "id": 392908693,
        "sender_full_name": "Utensil Song",
        "timestamp": 1695617880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60extern.60.20symbol.20name.20ignored.3F/near/392825235\">said</a>:</p>\n<blockquote>\n<p>There seems to be no way to set that attribute on structure constructors/projections, right?</p>\n</blockquote>\n<p>This may require <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s <a href=\"https://github.com/leanprover/lean4/pull/2292\">lean4#2292</a>, though I am not entirely clear on whether that PR only applies to structures with one field or would also permit overriding constructors/projects on types of varying size. </p>\n<p>I have been looking into this as well because I have some experiments of my own that where it is necessary to override constructors and projections.</p>",
        "id": 393116124,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695678183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac Malone</span> The attribute there can be used on anything (and it is probably good documentation), but it's only relevant for single field structures. For multiple field structures lean will actually generate calls to the constructor and projection functions, so a regular <code>extern</code> will work. (It is not intended to block optimizations like <code>&lt;a, b&gt;.2 = b</code> though - it is still logically a pair so even if the representation is different from the standard one it should still allow this kind of optimization. If you need the functions to be preserved you should use <code>opaque</code> instead.)</p>",
        "id": 393152828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1695698247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60extern.60.20symbol.20name.20ignored.3F/near/393152828\">said</a>:</p>\n<blockquote>\n<p>For multiple field structures lean will actually generate calls to the constructor and projection functions, so a regular <code>extern</code> will work. </p>\n</blockquote>\n<p>Here is a stripped down version of the experiment I was toying with. In both the old and new compiler, my overriding of the <code>WorldValue</code> projections is not respecting in the trace of the IR of definition which uses them trace (and an attempt to use said definition thus predictably causes a crash):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">WorldValue</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">world</span> <span class=\"o\">:</span> <span class=\"n\">IO.RealWorld</span>\n  <span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">WorldValue</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">mkImpl</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">IO.RealWorld</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">WorldValue</span>  <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">a</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implemented_by</span> <span class=\"n\">mkImpl</span><span class=\"o\">]</span> <span class=\"n\">WorldValue.mk</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">valueImpl</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">WorldValue</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">unsafeCast</span> <span class=\"n\">v</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implemented_by</span> <span class=\"n\">valueImpl</span><span class=\"o\">]</span> <span class=\"n\">WorldValue.value</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">worldImpl</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">WorldValue</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO.RealWorld</span> <span class=\"o\">:=</span> <span class=\"o\">()</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implemented_by</span> <span class=\"n\">worldImpl</span><span class=\"o\">]</span> <span class=\"n\">WorldValue.world</span>\n\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">casesOnImpl</span> <span class=\"o\">{</span><span class=\"n\">motive</span> <span class=\"o\">:</span> <span class=\"n\">WorldValue</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">WorldValue</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">world</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">world</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">motive</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n    <span class=\"n\">mk</span> <span class=\"n\">v.world</span> <span class=\"n\">v.value</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">implemented_by</span> <span class=\"n\">casesOnImpl</span><span class=\"o\">]</span> <span class=\"n\">WorldValue.casesOn</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">WorldValue</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">WorldT</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">IO.RealWorld</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">WorldValue</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">WorldM</span> <span class=\"o\">:=</span> <span class=\"n\">WorldT</span> <span class=\"n\">Id</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">EWorldM</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ExceptT</span> <span class=\"n\">ε</span> <span class=\"n\">WorldM</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">WorldIO</span> <span class=\"o\">:=</span> <span class=\"n\">EWorldM</span> <span class=\"n\">IO.Error</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.Compiler.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">set_option</span> <span class=\"n\">trace.compiler.ir.result</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">@[inline]</span> <span class=\"kd\">def</span> <span class=\"n\">WorldIO.toIO</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">WorldIO</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">w</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"k\">let</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"n\">w</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">run</span>\n  <span class=\"k\">match</span> <span class=\"n\">v.value</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">a</span> <span class=\"n\">v.world</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"n\">v.world</span>\n</code></pre></div>",
        "id": 393154024,
        "sender_full_name": "Mac Malone",
        "timestamp": 1695698977
    }
]