[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">inductive</span> <span class=\"n\">Constant</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Constant</span> <span class=\"n\">a</span> <span class=\"n\">x</span>\n\n  <span class=\"kd\">inductive</span> <span class=\"n\">Choice</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Choice</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n  <span class=\"bp\">|</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Choice</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">x</span>\n\n  <span class=\"kd\">def</span> <span class=\"n\">ValP</span> <span class=\"n\">i</span> <span class=\"n\">q</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">Choice</span> <span class=\"o\">(</span><span class=\"n\">Constant</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">:=</span> <span class=\"n\">Choice.L</span> <span class=\"o\">(</span><span class=\"n\">Constant</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>the last line is failing with this:</p>\n<p>cat.lean:38:55<br>\napplication type mismatch<br>\n  Choice.L (Constant i x)<br>\nargument<br>\n  Constant i x<br>\nhas type<br>\n  Type : Type 1<br>\nbut is expected to have type<br>\n  Constant i x : Type</p>\n<p>maybe someone know why this is failing?</p>",
        "id": 323603794,
        "sender_full_name": "Gabriel gomez",
        "timestamp": 1674689399
    },
    {
        "content": "<p>I Found the error, sometimes I confused the diferent levels and go the wrong way.</p>",
        "id": 323605967,
        "sender_full_name": "Gabriel gomez",
        "timestamp": 1674690633
    },
    {
        "content": "<p>At the end of your last line you want to  be using <code>Constant.mk</code>.</p>",
        "id": 323645384,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1674715254
    }
]