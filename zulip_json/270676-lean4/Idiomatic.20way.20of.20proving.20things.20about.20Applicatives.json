[
    {
        "content": "<p>The definition of an <code>Applicative</code> in Lean is different from the one in Haskell, specifically the operator <code>&lt;*&gt;</code> is different. The type signature of <code>Seq.seq</code> is different than the type signature of <code>&lt;*&gt;</code>, in that it takes a thunk as its second argument. My understanding is that this is so that you don't waste time on big computations that won't be evaluated anyway (e.g. if you're in the Maybe monad) don't have time wasted on them. Additionally <code>&lt;*&gt;</code> is a more complicated sort of macro than a normal infix operator (this makes propositions involving <code>&lt;*&gt;</code>, e.g. the traversable laws, display with <code>&lt;*&gt;</code> expanded). These design choices make practical sense, but logically (in the precense of function extensionality) we have <code>(Unit → α) ≃ α</code> and so none of this should really matter when reasoning about <code>Applicative</code>s internal to Lean. Is therething I'm missing, or some way to avoid the pain point of <code>&lt;*&gt;</code> printing weirdly?</p>",
        "id": 401455718,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699663870
    },
    {
        "content": "<p>I guess also it's not clear to me why <code>Seq</code> takes one thunk and one non-thunk argument, instead of having <code>Seq.seq</code> be derived from some more symmetric primitive <code>Seq.seq' : {α β : Type u} → (Unit → f (α → β)) → (Unit → f α) → f β</code>?</p>",
        "id": 401538940,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699732629
    },
    {
        "content": "<p>Also, somewhat related, it seems like if you define a monad by just giving pure and bind and then want to prove that it's a lawful monad then you'll get some junk proof burdens about the applicative data that's just been derived from the given pure/bind. I might be missing something, but isn't requiring the user to prove <code>seqLeft_eq</code> totally redundant here?</p>",
        "id": 401640526,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699823240
    },
    {
        "content": "<p>Yes, Lean uses eager evaluation and Haskell uses lazy evaluation, which explains the practical difference in their types.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/270676-lean4/topic/Idiomatic.20way.20of.20proving.20things.20about.20Applicatives/near/401538940\">said</a>:</p>\n<blockquote>\n<p>I guess also it's not clear to me why <code>Seq</code> takes one thunk and one non-thunk argument, instead of having <code>Seq.seq</code> be derived from some more symmetric primitive <code>Seq.seq' : {α β : Type u} → (Unit → f (α → β)) → (Unit → f α) → f β</code>?</p>\n</blockquote>\n<p><code>Seq</code> always evaluates the first argument and it might evaluate the second, so there's no need for it to be symmetric. This operator is for writing programs, and making the first argument be <code>Unit -&gt; ...</code> as well would just be giving the compiler more work to do to eliminate the function application.</p>",
        "id": 401641914,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699824958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/270676-lean4/topic/Idiomatic.20way.20of.20proving.20things.20about.20Applicatives/near/401640526\">said</a>:</p>\n<blockquote>\n<p>I might be missing something, but isn't requiring the user to prove <code>seqLeft_eq</code> totally redundant here?</p>\n</blockquote>\n<p>I don't know what can be derived from what, but if you're able to prove it in general, you could add the proof as a default value for <code>seqLeft_eq</code> in the <a href=\"https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Init/Control/Lawful.lean#L46-L53\"><code>LawfulMonad</code></a> definition, just like how it's done for <code>map_pure</code> etc.</p>",
        "id": 401641992,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699825026
    },
    {
        "content": "<p><code>Seq</code> does always evaluate the first argument, but that's exactly the design choice I'm asking about. <code>Applicative</code>s are completely symmetric, you can always reverse their internal evaluation order, so why assume in the type of <code>Seq.seq</code> that evaluation is occuring left to right?</p>",
        "id": 401642083,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699825124
    },
    {
        "content": "<p>Maybe for consistency with other operators like <code>&amp;&amp;</code> which also evaluate left-to-right? It's also conceivable that they wanted to make sure the compiler didn't have to unfold <code>Seq.seq</code> and eliminate function applications before seeing how it sequences, similar to what I already suggested.</p>",
        "id": 401642208,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699825317
    },
    {
        "content": "<p>Re pretty printing of <code>Seq.seq</code>, that just seems to be an oversight.</p>",
        "id": 401642257,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699825355
    },
    {
        "content": "<p>To do it right takes a bit of work that hasn't been done yet. (You can write an <code>app_unexpander</code> that's right almost all the time, but it'd be good to make sure it really is always right.)</p>",
        "id": 401642341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699825456
    },
    {
        "content": "<p><code>&amp;&amp;</code> was a good point of comparison, I didn't know about <code>@[macro_inline]</code>. Maybe I'll toy around with it and see if I can somehow modify <code>&lt;*&gt;</code> to be a <code>@[macro_inline]</code> operator which calls <code>Seq.seq</code> on a thunk without breaking anything. Thanks!</p>",
        "id": 401642440,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699825600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> If all you're wanting is nice pretty printing, then here's what's missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Delab</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">PrettyPrinter.Delaborator</span> <span class=\"n\">SubExpr</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.Seq.seq</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSeq</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">thunk</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thunk.isLambda</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">thunk.bindingBody</span><span class=\"bp\">!.</span><span class=\"n\">hasLooseBVar</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">withAppFn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withBindingBody</span> <span class=\"bp\">`</span><span class=\"n\">_</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">&lt;*&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.SeqLeft.seqLeft</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSeqLeft</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">thunk</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thunk.isLambda</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">thunk.bindingBody</span><span class=\"bp\">!.</span><span class=\"n\">hasLooseBVar</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">withAppFn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withBindingBody</span> <span class=\"bp\">`</span><span class=\"n\">_</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">&lt;*</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[</span><span class=\"n\">delab</span> <span class=\"n\">app.SeqRight.seqRight</span><span class=\"kd\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">delabSeqRight</span> <span class=\"o\">:</span> <span class=\"n\">Delab</span> <span class=\"o\">:=</span> <span class=\"n\">whenPPOption</span> <span class=\"n\">Lean.getPPNotation</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">thunk</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getExpr</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">getAppArgs</span> <span class=\"bp\">|</span> <span class=\"n\">failure</span>\n  <span class=\"n\">guard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">thunk.isLambda</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"bp\">!</span><span class=\"n\">thunk.bindingBody</span><span class=\"bp\">!.</span><span class=\"n\">hasLooseBVar</span> <span class=\"mi\">0</span>\n  <span class=\"k\">let</span> <span class=\"n\">a</span> <span class=\"bp\">←</span> <span class=\"n\">withAppFn</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withAppArg</span> <span class=\"n\">delab</span>\n  <span class=\"k\">let</span> <span class=\"n\">b</span> <span class=\"bp\">←</span> <span class=\"n\">withAppArg</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">withBindingBody</span> <span class=\"bp\">`</span><span class=\"n\">_</span> <span class=\"n\">delab</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"bp\">$</span><span class=\"n\">a</span> <span class=\"bp\">*&gt;</span> <span class=\"bp\">$</span><span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Delab</span>\n\n<span class=\"c1\">-- Example</span>\n<span class=\"k\">#print</span> <span class=\"n\">LawfulApplicative</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">LawfulApplicative.mk : ∀ {f : Type u → Type v} [inst : Applicative f] [toLawfulFunctor : LawfulFunctor f],</span>\n<span class=\"cm\">  (∀ {α β : Type u} (x : f α) (y : f β), x &lt;* y = Function.const β &lt;$&gt; x &lt;*&gt; y) →</span>\n<span class=\"cm\">    (∀ {α β : Type u} (x : f α) (y : f β), x *&gt; y = Function.const α id &lt;$&gt; x &lt;*&gt; y) →</span>\n<span class=\"cm\">      (∀ {α β : Type u} (g : α → β) (x : f α), pure g &lt;*&gt; x = g &lt;$&gt; x) →</span>\n<span class=\"cm\">        (∀ {α β : Type u} (g : α → β) (x : α), g &lt;$&gt; pure x = pure (g x)) →</span>\n<span class=\"cm\">          (∀ {α β : Type u} (g : f (α → β)) (x : α), g &lt;*&gt; pure x = (fun h ↦ h x) &lt;$&gt; g) →</span>\n<span class=\"cm\">            (∀ {α β γ : Type u} (x : f α) (g : f (α → β)) (h : f (β → γ)),</span>\n<span class=\"cm\">                h &lt;*&gt; (g &lt;*&gt; x) = Function.comp &lt;$&gt; h &lt;*&gt; g &lt;*&gt; x) →</span>\n<span class=\"cm\">              LawfulApplicative f</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 401642809,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699826049
    },
    {
        "content": "<p>I just had it print <code>LawfulApplicative</code> as a test because it had all the operators</p>",
        "id": 401642856,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1699826120
    },
    {
        "content": "<p>Thanks, that's awesome! Should be much easier to read now</p>",
        "id": 401642864,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699826138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Idiomatic.20way.20of.20proving.20things.20about.20Applicatives/near/401641992\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/270676-lean4/topic/Idiomatic.20way.20of.20proving.20things.20about.20Applicatives/near/401640526\">said</a>:</p>\n<blockquote>\n<p>I might be missing something, but isn't requiring the user to prove <code>seqLeft_eq</code> totally redundant here?</p>\n</blockquote>\n<p>I don't know what can be derived from what, but if you're able to prove it in general, you could add the proof as a default value for <code>seqLeft_eq</code> in the <a href=\"https://github.com/leanprover/lean4/blob/baa4b68a71926a722b77d4ec2cba34bfc76cc5aa/src/Init/Control/Lawful.lean#L46-L53\"><code>LawfulMonad</code></a> definition, just like how it's done for <code>map_pure</code> etc.</p>\n</blockquote>\n<p>I think the issue is that <code>map_pure</code> can be proven without knowing the actual definition of the <code>Applicative</code> structure, using <code>bind_pure_comp</code> and <code>pure_bind</code>, while the implementation I'm suggesting requires you to know that the <code>Applicative</code> structure was constructed using the defaults in the declaration of <code>Monad</code>. Maybe it could be an alternate constructor for <code>LawfulMonad</code>? I'm not clear enough on how the default implementation sugar actually works</p>",
        "id": 401642965,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699826257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/270676-lean4/topic/Idiomatic.20way.20of.20proving.20things.20about.20Applicatives/near/401640526\">said</a>:</p>\n<blockquote>\n<p>Also, somewhat related, it seems like if you define a monad by just giving pure and bind and then want to prove that it's a lawful monad then you'll get some junk proof burdens about the applicative data that's just been derived from the given pure/bind.</p>\n</blockquote>\n<p>I think this is what <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=LawfulMonad.mk%27#doc\">docs#LawfulMonad.mk'</a> is for</p>",
        "id": 401645155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1699828596
    },
    {
        "content": "<p>!!! Tysm</p>",
        "id": 401645169,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1699828614
    }
]