[
    {
        "content": "<p>I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">find_theorems</span><span class=\"o\">)</span>\n  <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"#find_theorems\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"o\">(</span><span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">conclusion_pattern</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span><span class=\"o\">))</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comman</span>\n</code></pre></div>\n<p>and it works, but I’d like to make this prettier and name the syntax for the arguments. If I write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">find_pattern</span> <span class=\"o\">:=</span>\n  <span class=\"n\">strLit</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">conclusion_pattern</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span>\n\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">find_theorems</span><span class=\"o\">)</span>\n  <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"#find_theorems\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">find_pattern</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comman</span>\n</code></pre></div>\n<p>instead, however, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elaboration</span> <span class=\"n\">function</span> <span class=\"n\">for</span> <span class=\"bp\">'</span><span class=\"n\">find_pattern'</span> <span class=\"n\">has</span> <span class=\"n\">not</span> <span class=\"n\">been</span> <span class=\"n\">implemented</span>\n  <span class=\"s2\">\"all\"</span>\n</code></pre></div>\n<p>when trying to use it. I tried some unstructured cargo-culting, but couldn’t get it to work. Why do I need an elaboration function here when I am parsing the syntax in the elaboration function for the command?</p>\n<p>(I should try to come up with a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>)</p>",
        "id": 381571206,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691085555
    },
    {
        "content": "<p>Ok, got it to work somehow. The problem was that abstracting out definitions like this wraps the syntax in a new node, with the definition names as the “syntax node“ of the things parsed, and if I pass them to <code>Lean.Elab.Term.elabTerm</code> that functions complains. But the real problem was these extra wrappers, that I ought to remove before passing to <code>Lean.Elab.Term.elabTerm</code>. I now have this code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">name_pattern</span> <span class=\"o\">:=</span> <span class=\"n\">strLit</span>\n<span class=\"n\">syntax</span> <span class=\"n\">ident_pattern</span> <span class=\"o\">:=</span> <span class=\"n\">ident</span>\n<span class=\"n\">syntax</span> <span class=\"n\">turnstyle</span> <span class=\"o\">:=</span> <span class=\"s2\">\"⊢ \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\"|- \"</span>\n<span class=\"n\">syntax</span> <span class=\"n\">conclusion_pattern</span> <span class=\"o\">:=</span> <span class=\"n\">turnstyle</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span>\n<span class=\"n\">syntax</span> <span class=\"n\">term_pattern</span> <span class=\"o\">:=</span> <span class=\"n\">term</span><span class=\"o\">:</span><span class=\"n\">max</span>\n<span class=\"n\">syntax</span> <span class=\"n\">find_pattern</span> <span class=\"o\">:=</span> <span class=\"n\">name_pattern</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">ident_pattern</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">conclusion_pattern</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">term_pattern</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">find_theorems</span><span class=\"o\">)</span> <span class=\"n\">withPosition</span><span class=\"o\">(</span><span class=\"s2\">\"#find_theorems\"</span> <span class=\"o\">(</span><span class=\"n\">colGt</span> <span class=\"n\">find_pattern</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n</code></pre></div>\n<p>which I process with this fragment:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">match</span> <span class=\"n\">stx</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|#</span><span class=\"n\">find_theorems</span> <span class=\"bp\">$</span><span class=\"n\">args</span><span class=\"o\">:</span><span class=\"n\">find_pattern</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">for</span> <span class=\"n\">arg</span> <span class=\"k\">in</span> <span class=\"n\">args</span> <span class=\"k\">do</span>\n        <span class=\"k\">match</span> <span class=\"n\">arg</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">find_pattern</span><span class=\"bp\">|$</span><span class=\"n\">ss</span><span class=\"o\">:</span><span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.TSyntax.getString</span> <span class=\"n\">ss</span>\n          <span class=\"n\">name_pats</span> <span class=\"o\">:=</span> <span class=\"n\">name_pats.push</span> <span class=\"n\">str</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">find_pattern</span><span class=\"bp\">|$</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.TSyntax.getId</span> <span class=\"n\">i</span>\n          <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">contains</span> <span class=\"n\">n</span> <span class=\"k\">do</span>\n            <span class=\"n\">throwErrorAt</span> <span class=\"n\">i</span> <span class=\"s2\">\"Name {n} not in scope\"</span>\n          <span class=\"n\">idents</span> <span class=\"o\">:=</span> <span class=\"n\">idents.push</span> <span class=\"n\">n</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">find_pattern</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">_</span><span class=\"o\">:</span><span class=\"n\">turnstyle</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">s</span> <span class=\"n\">none</span>\n          <span class=\"n\">terms</span> <span class=\"o\">:=</span> <span class=\"n\">terms.push</span> <span class=\"o\">(</span><span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">find_pattern</span><span class=\"bp\">|</span> <span class=\"bp\">$</span><span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.Elab.Term.elabTerm</span> <span class=\"n\">s.raw</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">][</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">none</span>\n          <span class=\"n\">terms</span> <span class=\"o\">:=</span> <span class=\"n\">terms.push</span> <span class=\"o\">(</span><span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"c1\">-- unreachable?</span>\n</code></pre></div>\n<p>which I fear is rather non-idiomatic, but at least it works :)</p>",
        "id": 381578077,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691087114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/syntax.20subdefinitions.2C.20elaboration.20function.20for.20.E2.80.A6/near/381578077\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"c1\">-- unreachable?</span>\n</code></pre></div>\n<p>Note that this is reachable if another macro (accidently) produces an ill-formed <code>find_pattern</code> node. So, ideally, you should error here. The standard error is <code>Elab.throwUnsupportedSyntax</code> or <code>Macro.throwUnsupported</code>, but a more informative error using <code>throwErrorAt</code> or <code>Macro.throwErrorAt</code> is usually much nicer for the downstream debugger.</p>",
        "id": 381588471,
        "sender_full_name": "Mac Malone",
        "timestamp": 1691090025
    },
    {
        "content": "<p>Use <code>$s:term</code> to select the nested term node. Also, you should be able to use <code>i.getId</code> etc</p>",
        "id": 381598052,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691092877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/syntax.20subdefinitions.2C.20elaboration.20function.20for.20.E2.80.A6/near/381578077\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"c1\">-- unreachable?</span>\n</code></pre></div>\n<p>Perhaps in some far future we will actually get an exhaustiveness checker for <code>TSyntax</code> matches :)</p>",
        "id": 381598337,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691092949
    },
    {
        "content": "<p>Thanks. So a <code>$s:term</code>pattern will look inside syntax nodes, searching for a neated one with the right tag? Neat!<br>\n(The fog slowly retreats :-))</p>",
        "id": 381599443,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691093325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315577\">Mac Malone</span> <a href=\"#narrow/stream/270676-lean4/topic/syntax.20subdefinitions.2C.20elaboration.20function.20for.20.E2.80.A6/near/381588471\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/syntax.20subdefinitions.2C.20elaboration.20function.20for.20.E2.80.A6/near/381578077\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">return</span> <span class=\"c1\">-- unreachable?</span>\n</code></pre></div>\n<p>Note that this is reachable if another macro (accidently) produces an ill-formed <code>find_pattern</code> node. So, ideally, you should error here. The standard error is <code>Elab.throwUnsupportedSyntax</code> or <code>Macro.throwUnsupported</code>, but a more informative error using <code>throwErrorAt</code> or <code>Macro.throwErrorAt</code> is usually much nicer for the downstream debugger.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> is it still the case that the unreachable case is also hit if the syntax is incomplete or ill-formed and the parser produces <code>.missing</code> nodes?</p>",
        "id": 381665600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1691122972
    },
    {
        "content": "<p>If it is sufficiently ill-formed or incomplete not to match the previous patterns, then certainly, yes. How <code>missing</code> should interact with <code>TSyntax</code> is an interesting but likely complex question that I don't have an answer for currently.</p>",
        "id": 381718939,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1691135818
    },
    {
        "content": "<p>Is there a reason you made the synonyms <code>syntax name_pattern := strLit</code>, etc? Seems better just to skip these and use the existing names.</p>",
        "id": 382084682,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1691228061
    },
    {
        "content": "<p>I tried, but somehow I then got errors I didn't understand, or the types of the <code>TSyntax</code> variables further below changed in ways I didn't understand! I'd be grateful if someone could show me how I can avoid these extra definitions.</p>",
        "id": 382086151,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1691228420
    }
]