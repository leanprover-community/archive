[
    {
        "content": "<p>Hi, is there a way of letting lean4 figure out, which constraints are not needed? I would like to have something similar to <code>simp?</code> where it tells me which constraints I can delete without going all the way from deleting the constraints and then reintroducing them as the compiler tells me what it cannot deduce.</p>",
        "id": 386869658,
        "sender_full_name": "MangoIV",
        "timestamp": 1692797513
    },
    {
        "content": "<p>I'm not sure I entirely understand the question -- are you trying to minimize typeclass arguments to a def?</p>",
        "id": 386884024,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1692800927
    },
    {
        "content": "<p>I think so. I also believe this should be doable with an \"unused variable\" style approach in the resulting Expr of the definition but it doesn't exist right now</p>",
        "id": 386930791,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692815662
    },
    {
        "content": "<p>It's a reasonable and perhaps even straightforward extension of the unused variables linter that just hasn't been envisioned originally</p>",
        "id": 386932662,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692816515
    },
    {
        "content": "<p>That does exist, that's the mathlib linter</p>",
        "id": 386932773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816573
    },
    {
        "content": "<p>(actually std linter now)</p>",
        "id": 386932821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816599
    },
    {
        "content": "<p>There's also <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s generalisation linter, which I'm not sure if he has plans to port to Lean4.</p>",
        "id": 386933053,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692816686
    },
    {
        "content": "<p>It led to some very cool results in Lean3, though</p>",
        "id": 386933075,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1692816696
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.Lint</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">BEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">α</span>\n\n<span class=\"bp\">#</span><span class=\"n\">lint</span> <span class=\"n\">only</span> <span class=\"n\">unusedArguments</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Found 1 error in 1 declarations (plus 0 automatically generated ones) in the current file with 1 linters</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `unusedArguments` linter reports:</span>\n<span class=\"cm\">UNUSED ARGUMENTS. -/</span>\n<span class=\"k\">#check</span> <span class=\"n\">foo</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 2 inst✝ : BEq α -/</span>\n</code></pre></div>",
        "id": 386933218,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816747
    },
    {
        "content": "<p>Is there any reason for this to be a global linter?</p>",
        "id": 386933325,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692816812
    },
    {
        "content": "<p>yes, it works on Exprs instead of syntax</p>",
        "id": 386933350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816824
    },
    {
        "content": "<p>so it's impossible to implement as a lean linter unless you get a builtin and not super expensive version of <code>whatsnew in</code></p>",
        "id": 386933429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692816852
    },
    {
        "content": "<p>Oh, what you mean is that it is also supposed to work on generated definitions</p>",
        "id": 386933716,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1692816988
    },
    {
        "content": "<p>The most logical implementation would be to have an append-only list of declarations in the current file in declaration order in the <code>Environment</code>, we already need this for other reasons</p>",
        "id": 386933830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692817043
    },
    {
        "content": "<p>Even if it only works on the current definition, it's still annoying to code as a lean linter because you have to parse (and to some extent re-elaborate) the syntax to find out what the current declaration is</p>",
        "id": 386934109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692817163
    },
    {
        "content": "<p>and I'm really concerned about the performance cost of lean linters if we get any more of them, because they are not optional as currently designed</p>",
        "id": 386934605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1692817361
    },
    {
        "content": "<p>Could we maybe design this like rust does? Where you can run some sort of linter with the build tool like clippy? I would imagine lake should be hackable enough to allow us to inject stuff into the elaboration of files right?</p>",
        "id": 386966113,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1692835029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/superfluous.20constraints/near/386966113\">said</a>:</p>\n<blockquote>\n<p>I would imagine lake should be hackable enough to allow us to inject stuff into the elaboration of files right?</p>\n</blockquote>\n<p>Unfortunately, no. That is one thing Lake cannot do, because <code>lean</code> does provide any way (I know of) to do so.</p>",
        "id": 386980131,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692846340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/270676-lean4/topic/superfluous.20constraints/near/386933053\">said</a>:</p>\n<blockquote>\n<p>There's also <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span>'s generalisation linter, which I'm not sure if he has plans to port to Lean4.</p>\n</blockquote>\n<p>I plan to port and improve it at some point yes!</p>",
        "id": 387076997,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1692884373
    }
]