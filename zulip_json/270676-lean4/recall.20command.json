[
    {
        "content": "<p>For expository purposes, I think it's very nice if you can sometimes \"recall\" a definition. How hard would it be to have a <code>recall</code> command that behaves as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recall</span> <span class=\"n\">HasFDerivAtFilter</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">‚Üí</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">ùïú</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">Filter</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">f'</span> <span class=\"o\">(</span><span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"k\">fun</span> <span class=\"n\">x'</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x'</span> <span class=\"bp\">-</span> <span class=\"n\">x</span>\n</code></pre></div>\n<p>and the only thing it will do is roughly a <code>#check</code>. So it checks that <code>HasFDerivAtFilter</code> exists, and that the type that is written down after <code>recall</code> is defeq to the existing type in the library.</p>",
        "id": 366683397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686888827
    },
    {
        "content": "<p>Sorry, it should be a bit more than a <code>#check</code>. Because for <code>def</code>s it shouldn't just check that the types are defeq, but also the terms.<br>\nWhen recalling a theorem/lemma statement, it is of course enough that the types are defeq.</p>",
        "id": 366683547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686888900
    },
    {
        "content": "<p>When recalling a theorem statement, recalling the proof should be optional.</p>",
        "id": 366683582,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686888915
    },
    {
        "content": "<p>Should the order of hypotheses matter?</p>",
        "id": 366695291,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686894290
    },
    {
        "content": "<p>In your example, for instance, if I <code>recall</code>ed <code>x</code> before <code>f</code>, I would imagine that you would still want the check to pass, right?</p>",
        "id": 366695743,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686894425
    },
    {
        "content": "<p>No, it doesn't have to be sophisticated like that.</p>",
        "id": 366696038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894494
    },
    {
        "content": "<p>It should really be a way to recall a definition or theorem that will be used in some file that gives an expository account of some maths in Lean.</p>",
        "id": 366696235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894549
    },
    {
        "content": "<p>A possible approach to the question of <em>exact</em> recalling is to interpret <code>recall</code> as <code>theorem</code>, catch the <code>existing declaration</code> error, check defeq of the current and the found declaration and report the correct error/message.</p>",
        "id": 366696379,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686894593
    },
    {
        "content": "<p>In fact, I think <code>recall</code> may be quite pedantic about how well the statement matches the \"original\"</p>",
        "id": 366696387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894596
    },
    {
        "content": "<p>What I find important is that I can use the exact same name as the original.</p>",
        "id": 366696504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894633
    },
    {
        "content": "<p>So <code>recall</code> shouldn't attempt to add any new decl to the environment</p>",
        "id": 366696547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894657
    },
    {
        "content": "<p>So you would really like something like: if you <del>printed</del>typed the output of <code>#check</code> up to defeq, it should pass, otherwise fail?</p>",
        "id": 366696584,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686894665
    },
    {
        "content": "<p>yes, but with <code>def</code>s I don't just want to check the types but also the terms</p>",
        "id": 366697097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894903
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recall</span> <span class=\"n\">Complex.exp</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">C</span> <span class=\"bp\">\\</span><span class=\"n\">to</span> <span class=\"bp\">\\</span><span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n</code></pre></div>\n<p>should give an error.</p>",
        "id": 366697157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894936
    },
    {
        "content": "<p>Or <code>recall Real.pi : \\R := 0</code></p>",
        "id": 366697189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686894954
    },
    {
        "content": "<p>Ok, these would be all things that you can enforce after you have extracted the actual declaration from the environment.  I do not have much experience in doing this, but I am up for trying to implement it!</p>",
        "id": 366697409,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686895040
    },
    {
        "content": "<p>I can also try this. What would be nice is to also have a code action after a <code>#check</code> that can turn it into a recall.</p>",
        "id": 366697609,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1686895115
    },
    {
        "content": "<p>One more thing: in your initial recall example, there were no <code>Type</code> or instances: I was assuming that they were present thanks to a previous <code>variable</code> command.  Is this the case or you really just want a sublist of the arguments?</p>",
        "id": 366697688,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686895152
    },
    {
        "content": "<p>Siddhartha, I had the same idea!</p>",
        "id": 366697781,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686895198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> That's right, they were present thanks to an implicit <code>variable</code> command.</p>",
        "id": 366698456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686895379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"recall \"</span> <span class=\"n\">ident</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">optDeclSig</span><span class=\"o\">)</span> <span class=\"n\">declVal</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">recall</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">mkAuxName</span> <span class=\"n\">id.getId</span> <span class=\"mi\">1</span>\n    <span class=\"k\">let</span> <span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"n\">name</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id'</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@$</span><span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"bp\">@$</span><span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  @id_1</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  {Œ± : Sort ?u.8944} ‚Üí Œ± ‚Üí ‚Ñï : Type ?u.8944</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  {Œ± : Sort ?u.8943} ‚Üí Œ± ‚Üí Œ± : Sort (imax (?u.8943 + 1) ?u.8943)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 366698597,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686895419
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">23</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  foo = foo : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  foo = foo_1 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 366698776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686895481
    },
    {
        "content": "<p>Nice! And can I recall theorem statements without giving a proof?</p>",
        "id": 366698802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686895490
    },
    {
        "content": "<p>Ah, not yet</p>",
        "id": 366699106,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686895574
    },
    {
        "content": "<p>Presumably just <code>recall foo</code> should generate <code>Try this: recall foo := 22</code>.</p>",
        "id": 366699917,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1686895854
    },
    {
        "content": "<p>Or even already <code>#check foo</code> should have the option.</p>",
        "id": 366700358,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1686895970
    },
    {
        "content": "<p>Or otherwise a <code>recall?</code> command could do that.</p>",
        "id": 366700366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1686895972
    },
    {
        "content": "<p>New version:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"s2\">\"recall \"</span> <span class=\"n\">ident</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">optDeclSig</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declVal</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">recall</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">mkAuxName</span> <span class=\"n\">id.getId</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id'</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">@$</span><span class=\"n\">id</span> <span class=\"bp\">=</span> <span class=\"bp\">@$</span><span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">recall</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">mySorry</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">mkAuxName</span> <span class=\"bp\">`</span><span class=\"n\">mySorry</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">mkAuxName</span> <span class=\"n\">id.getId</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">axiom</span> <span class=\"bp\">$</span><span class=\"n\">mySorry</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id'</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">mySorry</span><span class=\"o\">)</span>\n    <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">type_of</span><span class=\"bp\">%</span> <span class=\"bp\">@$</span><span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"bp\">@$</span><span class=\"n\">id</span><span class=\"o\">)</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  @id_1</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  {Œ± : Sort ?u.8944} ‚Üí Œ± ‚Üí ‚Ñï : Type ?u.8944</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  {Œ± : Sort ?u.8943} ‚Üí Œ± ‚Üí Œ± : Sort (imax (?u.8943 + 1) ?u.8943)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">23</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  foo = foo : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  foo = foo_1 : Prop</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">Nat.add_comm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 366700901,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686896169
    },
    {
        "content": "<p>The way the no-value case works is that it creates the temporary definition using a custom sorry axiom (otherwise <code>def</code> reports \"uses sorry\" as a warning), and then there's a check that the type of this temporary definition is correct.</p>",
        "id": 366701557,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686896394
    },
    {
        "content": "<p>Both cases are using the <code>def </code> command itself so that you get all the usual binder and value elaboration rules without any extra work.</p>",
        "id": 366701958,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686896510
    },
    {
        "content": "<p>One problem with this is that it doesn't give an error if your recollection of the binder types is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recall</span> <span class=\"n\">Nat.add_comm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">Nat.add_comm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n</code></pre></div>",
        "id": 366702614,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1686896676
    },
    {
        "content": "<p>Here is a funny error message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">recall</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"mi\">5</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  bar = bar : Prop</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  bar = bar_1 : Prop</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 367455987,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687120090
    },
    {
        "content": "<p>(I was thinking that the proper answer was that bar has no definitional value, but maybe saying it is not equal is sufficient?)</p>",
        "id": 367456384,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687120324
    },
    {
        "content": "<p>Anyway, I stumbled onto this topic today and having recently learned how Lean elaborates the headers of mutual definitions, I wanted to give a more nuts and bolts version of <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>'s solution a try. The end result does not use sorry and elides the implementation details from its error messages. So, here is what I came up with: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.OpenPrivate</span>\n\n<span class=\"kn\">open</span> <span class=\"kn\">private</span> <span class=\"n\">elabHeaders</span> <span class=\"k\">from</span> <span class=\"n\">Lean.Elab.MutualDef</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"recall \"</span> <span class=\"n\">ident</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">optDeclSig</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declVal</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span> <span class=\"k\">in</span>\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">recall</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">id.getId</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unknown constant '{id}'\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">id'</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">mkAuxName</span> <span class=\"n\">id.getId</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">val</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">infoVal</span> <span class=\"o\">:=</span> <span class=\"n\">info.value</span><span class=\"bp\">?</span>\n        <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">val</span> <span class=\"s2\">\"constant '{id}' has no defined value\"</span>\n      <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">id'</span><span class=\"o\">:</span><span class=\"n\">declId</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">newInfo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">id'.getId</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"c1\">-- def already threw</span>\n      <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">mvs</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">newInfo.levelParams.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshLevelMVar</span>\n        <span class=\"k\">let</span> <span class=\"n\">newType</span> <span class=\"o\">:=</span> <span class=\"n\">newInfo.type.instantiateLevelParams</span> <span class=\"n\">newInfo.levelParams</span> <span class=\"n\">mvs</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">isDefEq</span> <span class=\"n\">info.type</span> <span class=\"n\">newType</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwTypeMismatchError</span> <span class=\"n\">none</span> <span class=\"n\">info.type</span> <span class=\"n\">newInfo.type</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">id.getId</span><span class=\"o\">)</span>\n        <span class=\"k\">let</span> <span class=\"n\">newVal</span> <span class=\"o\">:=</span> <span class=\"n\">newInfo.value</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">instantiateLevelParams</span> <span class=\"n\">newInfo.levelParams</span> <span class=\"n\">mvs</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">isDefEq</span> <span class=\"n\">infoVal</span> <span class=\"n\">newVal</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwErrorAt</span> <span class=\"n\">val</span> <span class=\"s2\">\"value mismatch{indentD id.getId}</span><span class=\"se\">\\n</span><span class=\"s2\">has value{indentExpr newVal}</span><span class=\"se\">\\n</span><span class=\"s2\">but is expected to have value{indentExpr infoVal}\"</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">expandOptDeclSig</span> <span class=\"n\">sig</span>\n      <span class=\"k\">let</span> <span class=\"n\">views</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[{</span>\n        <span class=\"n\">declId</span> <span class=\"o\">:=</span> <span class=\"n\">id'</span><span class=\"o\">,</span> <span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">missing</span><span class=\"o\">,</span>\n        <span class=\"n\">ref</span> <span class=\"o\">:=</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getRef</span><span class=\"o\">,</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"kd\">theorem</span><span class=\"o\">,</span> <span class=\"n\">modifiers</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n      <span class=\"o\">:</span> <span class=\"n\">DefView</span><span class=\"o\">}]</span>\n      <span class=\"n\">runTermElabM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">elabView</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">elabHeaders</span> <span class=\"n\">views</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">isDefEq</span> <span class=\"n\">info.type</span> <span class=\"n\">elabView.type</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwTypeMismatchError</span> <span class=\"n\">none</span> <span class=\"n\">info.type</span> <span class=\"n\">elabView.type</span> <span class=\"o\">(</span><span class=\"n\">mkConst</span> <span class=\"n\">id.getId</span><span class=\"o\">)</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">type mismatch</span>\n<span class=\"cm\">  id</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  {Œ± : Sort u_1} ‚Üí Œ± ‚Üí Nat : Type u_1</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  {Œ± : Sort u} ‚Üí Œ± ‚Üí Œ± : Sort (imax (u + 1) u)</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">22</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"mi\">23</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">value mismatch</span>\n<span class=\"cm\">  foo</span>\n<span class=\"cm\">has value</span>\n<span class=\"cm\">  23</span>\n<span class=\"cm\">but is expected to have value</span>\n<span class=\"cm\">  22</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">Nat.add_comm</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"n\">recall</span> <span class=\"n\">Nat.add_comm</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">axiom</span> <span class=\"n\">bar</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"n\">recall</span> <span class=\"n\">bar</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span>\n<span class=\"c\">/-</span><span class=\"cm\"> constant 'bar' has no defined value -/</span>\n</code></pre></div>",
        "id": 367458029,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687121207
    },
    {
        "content": "<p>LGTM! PR?</p>",
        "id": 367467503,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687127631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> Nice! That looks cool.</p>",
        "id": 367701394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687193504
    },
    {
        "content": "<p>The thing with binder types is a tidbit unfortunate, but absolutely not a deal breaker, I think</p>",
        "id": 367701842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1687193605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/270676-lean4/topic/recall.20command/near/367467503\">said</a>:</p>\n<blockquote>\n<p>LGTM! PR?</p>\n</blockquote>\n<p>Were should something like this be PR'd to? Std or Mathlib?</p>",
        "id": 367778069,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687224178
    },
    {
        "content": "<p>I would say <code>Mathlib</code>. There is both higher reviewing bandwidth, and more inclination towards \"are we sure we really want this? let's find out!\". Usually we wait for a specific reason (or Mario just wanting to) to move things up to Std.</p>",
        "id": 367778393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687224351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Perhaps surprisingly, this would actually be my first PR to Mathlib. I believe I have learned through osmosis here on the Zulip channel that PR's to mathlib are bit weird in that they generally come from branches on the repository rather than forks. Do I have that right, and how exactly does that work?</p>",
        "id": 367778994,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687224634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>, yes, that's right. Our CI works better from a branch of the main repo. I've just sent an invite giving your write access to the mathlib4 repo.</p>",
        "id": 367779896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687225172
    },
    {
        "content": "<p>(And yes, this is lame, and ideas for fixing it are welcome! I think the main issue is that CI needs to upload oleans to the global cache. :-)</p>",
        "id": 367779978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687225207
    },
    {
        "content": "<p>PR is up: <a href=\"https://github.com/leanprover-community/mathlib4/pull/5278\">!4#5278</a> (<span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, I tagged you in case I made any mistakes in the process.)</p>",
        "id": 367790409,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687231502
    },
    {
        "content": "<p>Looks great. Left a query.</p>",
        "id": 367790836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687231797
    },
    {
        "content": "<p>Ah -- one more thing, <span class=\"user-mention\" data-user-id=\"315577\">@Mac</span>: you should add the <code>awaiting-review</code> label, or otherwise it won't make it onto the <a href=\"https://bit.ly/3cKk3ld\">#queue4</a> and might never get merged. :-)</p>",
        "id": 367801820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687238189
    },
    {
        "content": "<p>The other useful label to for authors to frequently add is <code>awaiting-CI</code>, which will automatically be removed again once you get a green tick.</p>",
        "id": 367801872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1687238215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks and thanks again for all your help!</p>",
        "id": 367802059,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687238284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> I tried to use the <code>recall</code> command today and the version where users give only an identifier very rarely succeeds. For instance in:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">recall</span> <span class=\"n\">add_assoc</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">AddSemigroup</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"n\">recall</span> <span class=\"n\">add_assoc</span>\n</code></pre></div>\n<p>The first call succeeds but not the second one which says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span> <span class=\"n\">updating</span><span class=\"o\">:</span> <span class=\"n\">Error</span> <span class=\"n\">fetching</span> <span class=\"n\">goals</span><span class=\"o\">:</span> <span class=\"n\">Rpc</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">InternalError</span><span class=\"o\">:</span> <span class=\"n\">incorrect</span> <span class=\"n\">number</span> <span class=\"n\">of</span> <span class=\"kd\">universe</span> <span class=\"n\">levels</span> <span class=\"n\">add_assoc.</span>\n</code></pre></div>",
        "id": 376648750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689770041
    },
    {
        "content": "<p><code>recall Nat.add_assoc</code> works but this is pretty much the only kind of example where I've able to get an answer.</p>",
        "id": 376649175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689770125
    },
    {
        "content": "<p>The error message makes me suspect that <code>recall</code> turns the name <code>add_assoc</code> into an <code>Expr.const</code>, but without specifying appropriate universe levels (should probably be level metavariables). <code>Nat.add_assoc</code> doesn't have universe levels, so there it works.</p>",
        "id": 376649862,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1689770262
    },
    {
        "content": "<p>Yes, this is exactly what it sounds like.</p>",
        "id": 376651491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689770541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"256311\">@Jannis Limperg</span> Is right, I forgot to instantiate the level params in the identifier-only branch. Working on a fix  now.</p>",
        "id": 376651499,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689770543
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 376651548,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1689770552
    },
    {
        "content": "<p>Hmm, having worked on this somewhat. I am not sure my original diagnosis was correct. Instantiating the level params does not  seem to fix the issue, and further debugging reveals the error only appears in interactive mode. Thus, the server seems to assuming some invariant that I am violating that the normal lean frontend does not.</p>",
        "id": 376663878,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689772915
    },
    {
        "content": "<p>Found the problem: it had nothing to do with main recall command logic, was actual the term info node that was added to the info tree for go-to-def that was causing the error. Apparently the server checks that it has the right number of level parameters and I had not been providing them.</p>",
        "id": 376669226,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689773866
    },
    {
        "content": "<p>I am, however, confused why this error only occurred on the ident-only branch and not the normal one.</p>",
        "id": 376669964,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689773957
    },
    {
        "content": "<p>PR: <a href=\"https://github.com/leanprover-community/mathlib4/pull/6004\">#6004</a></p>",
        "id": 376677143,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689775269
    },
    {
        "content": "<p>As an aside, <code>#guard_msgs</code> seems broken in VSCode (i.e., it errors there with what appears to be the same message, but not on the CLI).</p>",
        "id": 376682294,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689776076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315577\">@Mac</span> What are you reporting about <code>#guard_msgs</code>?</p>",
        "id": 376683599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689776301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <code>#guard_msgs</code> is broken in Windows VSCode. That is, it reports a mismatch when there is none. For instance, I opened up e.g. mathlib's <code>test/Explode.lean</code> in VSCode and all the <code>#guard_msgs</code> commands error. I think the problem may be due to the embedded expression interactivity metadata because simple string messages like the last two <code>#guard_msgs</code> test cases in <code>test/Recall.lean</code> work correctly.</p>",
        "id": 376694450,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689778218
    },
    {
        "content": "<p>It's fine in VS Code on Linux. I wonder what the difference between Linux and Windows might be?</p>",
        "id": 376694776,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689778283
    },
    {
        "content": "<p>Maybe line endings need to be normalized? The <code>test/Recall.lean</code> examples both have no newlines.</p>",
        "id": 376695046,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689778330
    },
    {
        "content": "<p>Are you saying that the tests pass in the CLI on Windows? Is this any sort of unix-like environment you're working in?</p>",
        "id": 376695513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689778432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Yeah, line endings could definitely be it. My CLI is MSYS2 (so Unix-like).</p>",
        "id": 376715065,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689781923
    },
    {
        "content": "<p>Yep, went and checked -- it was the line endings. Likely an artifact of Git <code>autocrlf</code>.</p>",
        "id": 376715391,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689781992
    },
    {
        "content": "<p>The fix PR seems to be idling (<a href=\"https://github.com/leanprover-community/mathlib4/pull/6004\">#6004</a>). <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, is there anything I should do to get eyes on it, or is this just the normal waiting game?</p>",
        "id": 377453991,
        "sender_full_name": "Mac Malone",
        "timestamp": 1689985097
    },
    {
        "content": "<p>Meta PRs usually sit in the queue for a bit longer... there are fewer people qualified to review them.</p>",
        "id": 377491233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1690004144
    },
    {
        "content": "<p>I merged the PR since having no error message is better. But actually it made me realize the version giving only a name does nothing useful at all. I wrote a crappy version of what I had in mind in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Analysis.Calculus.ContDiff</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Std</span> <span class=\"n\">Tactic</span> <span class=\"n\">TryThis</span>\n\n<span class=\"sd\">/-- Dumb version of `addSuggestion` which suggest to write a String instead of</span>\n<span class=\"sd\">valid syntax. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">Std.Tactic.TryThis.addTextSuggestion</span> <span class=\"o\">(</span><span class=\"n\">ref</span> <span class=\"o\">:</span> <span class=\"n\">Syntax</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">msg</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">ref</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"Try this: {msg}\"</span>\n  <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">ref.getRange</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">map</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getFileMap</span>\n    <span class=\"k\">let</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">findLineStart</span> <span class=\"n\">map.source</span> <span class=\"n\">range.start</span>\n    <span class=\"k\">let</span> <span class=\"n\">body</span> <span class=\"o\">:=</span> <span class=\"n\">map.source.findAux</span> <span class=\"o\">(</span><span class=\"bp\">¬∑</span> <span class=\"bp\">‚â†</span> <span class=\"sc\">' '</span><span class=\"o\">)</span> <span class=\"n\">range.start</span> <span class=\"n\">start</span>\n    <span class=\"k\">let</span> <span class=\"n\">text</span> <span class=\"o\">:=</span> <span class=\"n\">Format.prettyExtra</span> <span class=\"n\">msg</span>\n      <span class=\"o\">(</span><span class=\"n\">indent</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">column</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">range.start</span> <span class=\"bp\">-</span> <span class=\"n\">start</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">stxRange</span> <span class=\"o\">:=</span> <span class=\"n\">ref.getRange</span><span class=\"bp\">?.</span><span class=\"n\">getD</span> <span class=\"n\">range</span>\n    <span class=\"k\">let</span> <span class=\"n\">stxRange</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">start</span> <span class=\"o\">:=</span> <span class=\"n\">map.lineStart</span> <span class=\"o\">(</span><span class=\"n\">map.toPosition</span> <span class=\"n\">stxRange.start</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">line</span>\n      <span class=\"n\">stop</span> <span class=\"o\">:=</span> <span class=\"n\">map.lineStart</span> <span class=\"o\">((</span><span class=\"n\">map.toPosition</span> <span class=\"n\">stxRange.stop</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">line</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n    <span class=\"k\">let</span> <span class=\"n\">range</span> <span class=\"o\">:=</span> <span class=\"n\">map.utf8RangeToLspRange</span> <span class=\"n\">range</span>\n    <span class=\"k\">let</span> <span class=\"n\">json</span> <span class=\"o\">:=</span> <span class=\"n\">Json.mkObj</span> <span class=\"o\">[(</span><span class=\"s2\">\"suggestion\"</span><span class=\"o\">,</span> <span class=\"n\">text</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"range\"</span><span class=\"o\">,</span> <span class=\"n\">toJson</span> <span class=\"n\">range</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"info\"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)]</span>\n    <span class=\"n\">Widget.saveWidgetInfo</span> <span class=\"bp\">``</span><span class=\"n\">tryThisWidget</span> <span class=\"n\">json</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofRange</span> <span class=\"n\">stxRange</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- Successively perform all string replacements in order. Slow. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">String.replace_list</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"bp\">√ó</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">String</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">::</span><span class=\"n\">tail</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">(</span><span class=\"n\">s.replace</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">replace_list</span> <span class=\"n\">tail</span>\n\n<span class=\"sd\">/-- Try to remove distracting bits of the output of `#check`. This is</span>\n<span class=\"sd\">really a workaround which should be replaced by something smarter.  -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">String.fix_decl</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n  <span class=\"n\">s.replace_list</span> <span class=\"o\">[(</span><span class=\"s2\">\".{u_1}\"</span><span class=\"o\">,</span><span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\".{u_1, u_2}\"</span><span class=\"o\">,</span><span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\".{u_1, u_2, u_3}\"</span><span class=\"o\">,</span><span class=\"s2\">\"\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"Type u_1\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Type _\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"Type u_2\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Type _\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"Type u_3\"</span><span class=\"o\">,</span> <span class=\"s2\">\"Type _\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù¬π : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù¬≤ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù¬≥ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù‚Å¥ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù‚Åµ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù‚Å∂ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù‚Å∑ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù‚Å∏ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"s2\">\"inst‚úù‚Åπ : \"</span><span class=\"o\">,</span> <span class=\"s2\">\"\"</span><span class=\"o\">)]</span>\n\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Mathlib.Tactic.Recall</span>\n\n<span class=\"sd\">/--</span>\n<span class=\"sd\">The `recall` command redeclares a previous definition for illustrative purposes.</span>\n<span class=\"sd\">This can be useful for files that give an expository account of some theory in Lean.</span>\n\n<span class=\"sd\">The syntax of the command mirrors `def`, so all the usual bells and whistles work.</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">recall List.cons_append (a : Œ±) (as bs : List Œ±) : (a :: as) ++ bs = a :: (as ++ bs) := rfl</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">Also, one can leave out the body.</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">recall Nat.add_comm (n m : Nat) : n + m = m + n</span>\n<span class=\"sd\">```</span>\n\n<span class=\"sd\">The command verifies that the new definition type-checks and that the type and value</span>\n<span class=\"sd\">provided are definitionally equal to the original declaration. However, this does not</span>\n<span class=\"sd\">capture some details (like binders), so the following works without error.</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">recall Nat.add_comm {n m : Nat} : n + m = m + n</span>\n<span class=\"sd\">```</span>\n<span class=\"sd\">-/</span>\n<span class=\"n\">syntax</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">recall</span><span class=\"o\">)</span> <span class=\"s2\">\"recall \"</span> <span class=\"n\">ident</span> <span class=\"n\">ppIndent</span><span class=\"o\">(</span><span class=\"n\">optDeclSig</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declVal</span><span class=\"o\">)</span><span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span> <span class=\"n\">Term</span>\n<span class=\"kn\">open</span> <span class=\"kn\">private</span> <span class=\"n\">elabHeaders</span> <span class=\"k\">from</span> <span class=\"n\">Lean.Elab.MutualDef</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">recall</span><span class=\"bp\">%$</span><span class=\"n\">tk</span> <span class=\"bp\">$</span><span class=\"n\">id</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"bp\">?</span><span class=\"o\">]</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">withoutModifyingEnv</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">declName</span> <span class=\"o\">:=</span> <span class=\"n\">id.getId</span>\n    <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">declName</span>\n      <span class=\"bp\">|</span> <span class=\"n\">throwError</span> <span class=\"s2\">\"unknown constant '{declName}'\"</span>\n    <span class=\"k\">let</span> <span class=\"n\">declConst</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span> <span class=\"n\">mkConst</span> <span class=\"n\">declName</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">info.levelParams.map</span> <span class=\"n\">Level.param</span>\n    <span class=\"n\">discard</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addTermInfo</span> <span class=\"n\">id</span> <span class=\"n\">declConst</span>\n    <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">_type</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">expandOptDeclSig</span> <span class=\"n\">sig</span>\n    <span class=\"k\">if</span> <span class=\"n\">binders</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isMissing</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">val</span><span class=\"bp\">?.</span><span class=\"n\">isNone</span> <span class=\"k\">then</span> <span class=\"c1\">-- User didn't provide any info</span>\n      <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">PrettyPrinter.ppSignature</span> <span class=\"n\">declName</span>\n      <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addTextSuggestion</span> <span class=\"n\">tk</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"recall {(toString foo.fmt).fix_decl}\"</span>\n\n    <span class=\"k\">let</span> <span class=\"n\">newId</span> <span class=\"o\">:=</span> <span class=\"n\">mkIdentFrom</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">mkAuxName</span> <span class=\"n\">declName</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"n\">val</span><span class=\"bp\">?</span> <span class=\"k\">then</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">infoVal</span> <span class=\"o\">:=</span> <span class=\"n\">info.value</span><span class=\"bp\">?</span>\n        <span class=\"bp\">|</span> <span class=\"n\">throwErrorAt</span> <span class=\"n\">val</span> <span class=\"s2\">\"constant '{declName}' has no defined value\"</span>\n      <span class=\"n\">elabCommand</span> <span class=\"bp\">&lt;|</span> <span class=\"bp\">‚Üê</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"bp\">$</span><span class=\"n\">newId</span> <span class=\"bp\">$</span><span class=\"n\">sig</span><span class=\"o\">:</span><span class=\"n\">optDeclSig</span> <span class=\"bp\">$</span><span class=\"n\">val</span><span class=\"o\">)</span>\n      <span class=\"k\">let</span> <span class=\"n\">some</span> <span class=\"n\">newInfo</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">getEnv</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">find</span><span class=\"bp\">?</span> <span class=\"n\">newId.getId</span> <span class=\"bp\">|</span> <span class=\"n\">return</span> <span class=\"c1\">-- def already threw</span>\n      <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">mvs</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">newInfo.levelParams.mapM</span> <span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">mkFreshLevelMVar</span>\n        <span class=\"k\">let</span> <span class=\"n\">newType</span> <span class=\"o\">:=</span> <span class=\"n\">newInfo.type.instantiateLevelParams</span> <span class=\"n\">newInfo.levelParams</span> <span class=\"n\">mvs</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">isDefEq</span> <span class=\"n\">info.type</span> <span class=\"n\">newType</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwTypeMismatchError</span> <span class=\"n\">none</span> <span class=\"n\">info.type</span> <span class=\"n\">newInfo.type</span> <span class=\"n\">declConst</span>\n        <span class=\"k\">let</span> <span class=\"n\">newVal</span> <span class=\"o\">:=</span> <span class=\"n\">newInfo.value</span><span class=\"bp\">?.</span><span class=\"n\">get</span><span class=\"bp\">!.</span><span class=\"n\">instantiateLevelParams</span> <span class=\"n\">newInfo.levelParams</span> <span class=\"n\">mvs</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">isDefEq</span> <span class=\"n\">infoVal</span> <span class=\"n\">newVal</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">err</span> <span class=\"o\">:=</span>\n            <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"value mismatch{indentExpr declConst}</span><span class=\"se\">\\n</span><span class=\"s2\">has value{indentExpr newVal}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span> <span class=\"bp\">++</span>\n            <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"but is expected to have value{indentExpr infoVal}\"</span>\n          <span class=\"n\">throwErrorAt</span> <span class=\"n\">val</span> <span class=\"n\">err</span>\n    <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">expandOptDeclSig</span> <span class=\"n\">sig</span>\n      <span class=\"k\">let</span> <span class=\"n\">views</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[{</span>\n        <span class=\"n\">declId</span> <span class=\"o\">:=</span> <span class=\"n\">newId</span><span class=\"o\">,</span> <span class=\"n\">binders</span><span class=\"o\">,</span> <span class=\"n\">type</span><span class=\"bp\">?</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">missing</span><span class=\"o\">,</span>\n        <span class=\"n\">ref</span> <span class=\"o\">:=</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">getRef</span><span class=\"o\">,</span> <span class=\"n\">kind</span> <span class=\"o\">:=</span> <span class=\"n\">default</span><span class=\"o\">,</span> <span class=\"n\">modifiers</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n      <span class=\"o\">:</span> <span class=\"n\">DefView</span><span class=\"o\">}]</span>\n      <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n        <span class=\"k\">let</span> <span class=\"n\">elabView</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">elabHeaders</span> <span class=\"n\">views</span><span class=\"o\">)[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">!</span>\n        <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">‚Üê</span> <span class=\"n\">isDefEq</span> <span class=\"n\">info.type</span> <span class=\"n\">elabView.type</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">throwTypeMismatchError</span> <span class=\"n\">none</span> <span class=\"n\">info.type</span> <span class=\"n\">elabView.type</span> <span class=\"n\">declConst</span>\n\n\n<span class=\"n\">recall</span> <span class=\"n\">add_assoc</span>\n</code></pre></div>\n<p>There are many crappy things here. First the \"Try this\" replacement doesn't really work because it does not remove the identifier. This is probably easy to fix. More importantly, the two String functions at top are really dumb.</p>",
        "id": 377544567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690020256
    },
    {
        "content": "<p>Note the new code in the <code>recall</code> command itself is only </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"n\">binders</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">isMissing</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"n\">val</span><span class=\"bp\">?.</span><span class=\"n\">isNone</span> <span class=\"k\">then</span> <span class=\"c1\">-- User didn't provide any info</span>\n      <span class=\"k\">let</span> <span class=\"n\">foo</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">PrettyPrinter.ppSignature</span> <span class=\"n\">declName</span>\n      <span class=\"n\">liftTermElabM</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">addTextSuggestion</span> <span class=\"n\">tk</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"recall {(toString foo.fmt).fix_decl}\"</span>\n</code></pre></div>",
        "id": 377544981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1690020347
    }
]