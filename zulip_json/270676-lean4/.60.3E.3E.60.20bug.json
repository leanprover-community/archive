[
    {
        "content": "<p>I am encountering a weird error with <code>&gt;&gt;</code> that I believe is a bug related to how <code>binop_lazy%</code> is compiled in the presense of coercions.  I am curious if my assessment is correct, and would like to know if this is, in fact, a bug. Here is a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> on <code>nightly-2023-06-01</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Coe</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"n\">where</span>\n  <span class=\"n\">coe</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">Array.singleton</span> <span class=\"bp\">&lt;$&gt;</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">HAndThen</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Id</span> <span class=\"n\">Unit</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">hAndThen</span> <span class=\"n\">p1</span> <span class=\"n\">p2</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span> <span class=\"bp\">*&gt;</span> <span class=\"o\">(</span><span class=\"n\">p2</span> <span class=\"o\">())</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">nop</span> <span class=\"o\">:</span> <span class=\"n\">Id</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">Id</span> <span class=\"o\">(</span><span class=\"n\">Array</span> <span class=\"n\">Unit</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">Id</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span>\n  <span class=\"n\">pure</span> <span class=\"o\">()</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bug</span> <span class=\"o\">:=</span>\n  <span class=\"n\">group</span> <span class=\"o\">(</span><span class=\"n\">nop</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"n\">nop</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span>\n<span class=\"cm\">application type mismatch</span>\n<span class=\"cm\">  HAndThen.hAndThen nop nop</span>\n<span class=\"cm\">argument</span>\n<span class=\"cm\">  nop</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  Id Unit : Type</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Unit â†’ ?m.829 : Type ?u.673</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 370272082,
        "sender_full_name": "Mac Malone",
        "timestamp": 1687927008
    }
]