[
    {
        "content": "<p>I've been doing a basic type theory verification project and for a bunch of lemmas over from <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20Simple.20Nat.20inequality\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.E2.9C.94.20Simple.20Nat.20inequality</a> I've now imported mathlib...interestingly enough this causes structural recursion on one of my proofs to fail in the following way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">fail</span> <span class=\"n\">to</span> <span class=\"k\">show</span> <span class=\"n\">termination</span> <span class=\"n\">for</span>\n  <span class=\"n\">Cube.Simple.Expr.Expr.subject_reduction</span>\n<span class=\"k\">with</span> <span class=\"n\">errors</span>\n<span class=\"n\">structural</span> <span class=\"n\">recursion</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">produced</span> <span class=\"n\">type</span> <span class=\"n\">incorrect</span> <span class=\"n\">term</span>\n  <span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n    <span class=\"n\">PProd.fst</span> <span class=\"n\">x.fst</span> <span class=\"n\">func</span> <span class=\"n\">func_type</span>\n  <span class=\"n\">argument</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">⊢</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">Ty.fun</span> <span class=\"n\">t1</span> <span class=\"n\">ty</span>\n  <span class=\"n\">but</span> <span class=\"n\">function</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"o\">((</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">Ty.fun</span> <span class=\"n\">t1</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"bp\">→</span><span class=\"n\">β</span> <span class=\"n\">t1'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"n\">t1'</span> <span class=\"o\">:</span> <span class=\"n\">Ty.fun</span> <span class=\"n\">t1</span> <span class=\"n\">ty</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">prove</span> <span class=\"n\">termination</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"bp\">`</span><span class=\"n\">termination_by</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">specify</span> <span class=\"n\">a</span> <span class=\"n\">well</span><span class=\"bp\">-</span><span class=\"n\">founded</span> <span class=\"n\">relation</span>\n</code></pre></div>",
        "id": 328554489,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676664545
    },
    {
        "content": "<p>Here is I think a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Linarith</span> <span class=\"c1\">-- Not used in the file but in sorried proofs</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Simple</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Ty</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">nat</span>\n<span class=\"bp\">|</span> <span class=\"k\">fun</span> <span class=\"o\">(</span><span class=\"n\">pre</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">bvar</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mvar</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">body</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">orig</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">arg</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n<span class=\"n\">deriving</span> <span class=\"n\">Repr</span><span class=\"o\">,</span> <span class=\"n\">DecidableEq</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Expr</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span> <span class=\"n\">List</span> <span class=\"n\">Ty</span>\n<span class=\"n\">abbrev</span> <span class=\"n\">Env</span> <span class=\"o\">:=</span> <span class=\"n\">String</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">Ty</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Context.set</span> <span class=\"o\">(</span><span class=\"n\">ctx</span> <span class=\"o\">:</span> <span class=\"n\">Context</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ty</span> <span class=\"o\">:</span> <span class=\"n\">Ty</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Context</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">ctx</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[],</span> <span class=\"n\">_</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">ty</span> <span class=\"o\">::</span> <span class=\"n\">xs</span>\n  <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">set</span> <span class=\"n\">xs</span> <span class=\"n\">n</span> <span class=\"n\">ty</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Context.set_nil_zero</span> <span class=\"o\">:</span> <span class=\"n\">Context.set</span> <span class=\"o\">[]</span> <span class=\"mi\">0</span> <span class=\"n\">ty</span> <span class=\"bp\">=</span> <span class=\"o\">[</span><span class=\"n\">ty</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Context.set_nil_succ</span> <span class=\"o\">:</span> <span class=\"n\">Context.set</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ty</span> <span class=\"bp\">=</span> <span class=\"o\">[]</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Context.set_cons_zero</span> <span class=\"o\">:</span> <span class=\"n\">Context.set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"n\">ty</span> <span class=\"bp\">=</span> <span class=\"n\">ty</span> <span class=\"o\">::</span> <span class=\"n\">xs</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">Context.set_cons_succ</span> <span class=\"o\">:</span> <span class=\"n\">Context.set</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">ty</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">::</span> <span class=\"o\">(</span><span class=\"n\">Context.set</span> <span class=\"n\">xs</span> <span class=\"n\">i</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Typing</span> <span class=\"o\">:</span> <span class=\"n\">Env</span> <span class=\"bp\">→</span> <span class=\"n\">Context</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Ty</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">in_env</span> <span class=\"o\">:</span> <span class=\"n\">env</span> <span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"n\">some</span> <span class=\"n\">typ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">typ</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">func_type</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"n\">ctx</span> <span class=\"n\">func</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"k\">fun</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">arg_type</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"n\">ctx</span> <span class=\"n\">arg</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">func</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"n\">t2</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">(</span><span class=\"n\">body_type</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"o\">(</span><span class=\"n\">t1</span> <span class=\"o\">::</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"n\">body</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">t1</span> <span class=\"n\">body</span> <span class=\"n\">orig</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"k\">fun</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bvar</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bound</span> <span class=\"o\">:</span> <span class=\"n\">idx</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ctx.length</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">env</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">idx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ctx.get</span> <span class=\"o\">⟨</span><span class=\"n\">idx</span><span class=\"o\">,</span> <span class=\"n\">bound</span><span class=\"o\">⟩)</span>\n\n<span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"mi\">40</span> <span class=\"s2\">\"(\"</span><span class=\"bp\">Δ</span> <span class=\"s2\">\", \"</span> <span class=\"bp\">Γ</span> <span class=\"s2\">\")\"</span> <span class=\"s2\">\" ⊢ \"</span> <span class=\"n\">e</span> <span class=\"s2\">\" : \"</span> <span class=\"n\">t</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Typing</span> <span class=\"bp\">Δ</span> <span class=\"bp\">Γ</span> <span class=\"n\">e</span> <span class=\"n\">t</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">instantiate</span> <span class=\"o\">(</span><span class=\"n\">image</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">targetIdx</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">):</span> <span class=\"n\">Expr</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">expr</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">idx</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"bp\">=</span> <span class=\"n\">targetIdx</span> <span class=\"k\">then</span>\n        <span class=\"n\">image</span>\n      <span class=\"k\">else</span>\n        <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">idx</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">fn</span> <span class=\"n\">arg</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">instantiate</span> <span class=\"n\">image</span> <span class=\"n\">fn</span> <span class=\"n\">targetIdx</span> <span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">instantiate</span> <span class=\"n\">image</span> <span class=\"n\">arg</span> <span class=\"n\">targetIdx</span> <span class=\"o\">)</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">ty</span> <span class=\"n\">body</span> <span class=\"n\">orig</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">ty</span> <span class=\"o\">(</span><span class=\"n\">instantiate</span> <span class=\"n\">image</span> <span class=\"n\">body</span> <span class=\"o\">(</span><span class=\"n\">targetIdx</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">orig</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">name</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span> <span class=\"bp\">=&gt;</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Typing.instantiate_preserves</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">⊢</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Context.set</span> <span class=\"n\">ctx</span> <span class=\"n\">i</span> <span class=\"n\">ty</span><span class=\"o\">))</span> <span class=\"bp\">⊢</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ty'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">ctx</span><span class=\"o\">)</span> <span class=\"bp\">⊢</span> <span class=\"o\">(</span><span class=\"n\">instantiate</span> <span class=\"n\">v</span> <span class=\"n\">expr</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ty'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">def</span> <span class=\"n\">isLam</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Bool</span>\n<span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"bp\">..</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Value</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">ty</span> <span class=\"n\">body</span> <span class=\"n\">orig</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">constApp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">f.isLam</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">f</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">BetaStep</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">lamApp</span> <span class=\"o\">:</span> <span class=\"n\">BetaStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">ty</span> <span class=\"n\">body</span> <span class=\"n\">orig</span><span class=\"o\">)</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">instantiate</span> <span class=\"n\">arg</span> <span class=\"n\">body</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">leftApp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">BetaStep</span> <span class=\"n\">t1</span> <span class=\"n\">t1'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BetaStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t1'</span> <span class=\"n\">t2</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">rightApp</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">Value</span> <span class=\"n\">t1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">BetaStep</span> <span class=\"n\">t2</span> <span class=\"n\">t2'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">BetaStep</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">t1</span> <span class=\"n\">t2'</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">normal_form</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">¬</span> <span class=\"bp\">∃</span> <span class=\"n\">t'</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"n\">t</span> <span class=\"n\">t'</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">t1</span> <span class=\"s2\">\" →β \"</span> <span class=\"n\">t2</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">BetaStep</span> <span class=\"n\">t1</span> <span class=\"n\">t2</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subject_reduction</span> <span class=\"o\">(</span><span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">⊢</span> <span class=\"n\">expr</span> <span class=\"o\">:</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reduces</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">→</span><span class=\"n\">β</span> <span class=\"n\">expr'</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"o\">[])</span> <span class=\"bp\">⊢</span> <span class=\"n\">expr'</span> <span class=\"o\">:</span> <span class=\"n\">ty</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">typed_expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">reduces</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">reduces</span>\n    <span class=\"n\">case</span> <span class=\"n\">lamApp</span> <span class=\"n\">lam_typed</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">cases</span> <span class=\"n\">lam_typed</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"n\">body_typed</span> <span class=\"bp\">=&gt;</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">Context.set_nil_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">body_typed</span>\n        <span class=\"n\">apply</span> <span class=\"n\">Typing.instantiate_preserves</span>\n        <span class=\"n\">repeat</span> <span class=\"n\">assumption</span>\n    <span class=\"n\">case</span> <span class=\"n\">leftApp</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Typing.app</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subject_reduction</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">assumption</span>\n    <span class=\"n\">case</span> <span class=\"n\">rightApp</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">apply</span> <span class=\"n\">Typing.app</span>\n      <span class=\"n\">assumption</span>\n      <span class=\"n\">apply</span> <span class=\"n\">subject_reduction</span>\n      <span class=\"n\">repeat</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">|</span> <span class=\"n\">lam</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">reduces</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bvar</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cases</span> <span class=\"n\">reduces</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Expr</span>\n<span class=\"kd\">end</span> <span class=\"n\">Simple</span>\n</code></pre></div>\n<p>Also the reason my subject reduction lemma has <code>cases</code> instead of <code>induction</code> is because Lean refused to perform <code>induction</code> on my thing for some reason :(</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">index</span> <span class=\"k\">in</span> <span class=\"n\">target's</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">consider</span> <span class=\"n\">using</span> <span class=\"n\">the</span> <span class=\"bp\">`</span><span class=\"n\">cases</span><span class=\"bp\">`</span> <span class=\"n\">tactic</span> <span class=\"n\">instead</span><span class=\"o\">)</span>\n  <span class=\"o\">[]</span>\n</code></pre></div>",
        "id": 328559607,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676666525
    },
    {
        "content": "<p>Minimized it a little more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Order.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Simple</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Typing</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">arg_type</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">[]</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">func</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subject_reduction</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">[]</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reduces</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">=</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">[]</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">typed_expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">aty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Typing.app</span> <span class=\"o\">(</span><span class=\"n\">subject_reduction</span> <span class=\"n\">aty</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328706576,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1676742446
    },
    {
        "content": "<p>Further reduced:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Algebra.Order.Ring.Canonical</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">linearOrderedCommSemiring</span> <span class=\"o\">:</span> <span class=\"n\">LinearOrderedCommSemiring</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">Nat.commSemiring</span><span class=\"o\">,</span> <span class=\"n\">Nat.linearOrder</span> <span class=\"k\">with</span>\n    <span class=\"n\">lt</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.lt</span><span class=\"o\">,</span> <span class=\"n\">add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.add_le_add_left</span><span class=\"o\">,</span>\n    <span class=\"n\">le_of_add_le_add_left</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.le_of_add_le_add_left</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"n\">Nat.le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">Nat.zero_lt_succ</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.mul_lt_mul_of_pos_left</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_lt_mul_of_pos_right</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Nat.mul_lt_mul_of_pos_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ne_of_lt</span> <span class=\"n\">Nat.zero_lt_one</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">Nat</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Simple</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Expr</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">func</span> <span class=\"n\">arg</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">Typing</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Expr</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">arg_type</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">[]</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"n\">ctx</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">func</span> <span class=\"n\">arg</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">subject_reduction</span> <span class=\"o\">(</span><span class=\"n\">typed_expr</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">[]</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">reduces</span> <span class=\"o\">:</span> <span class=\"n\">expr</span> <span class=\"bp\">=</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Typing</span> <span class=\"o\">[]</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">typed_expr</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"n\">aty</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">Typing.app</span> <span class=\"o\">(</span><span class=\"n\">subject_reduction</span> <span class=\"n\">aty</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 328709226,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676743865
    },
    {
        "content": "<p>It seems that the use of tactics somehow prevents it from seeing that it should use structural recursion, and then the instance somehow causes the termination proof to fail for well-founded recursion.</p>",
        "id": 328710126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676744335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112857\">Leonardo de Moura</span> <a href=\"#narrow/stream/270676-lean4/topic/proving.20DecidableEq.20for.20inductives/near/281507786\">said</a>:</p>\n<blockquote>\n<p>I pushed support for <code>casesOn</code> applications to the structural and well-founded recursion modules. This is useful for using recursion and <code>cases</code> tactic. For example, we don't need the generalizations steps above nor the <code>decreasing_by</code> anymore. It should work with any tactic that creates <code>casesOn</code> applications (e.g., <code>rcases</code>).<br>\n<a href=\"https://github.com/leanprover/lean4/blob/8c23bef39907e2599fb8ade149b7aa68ab4da311/tests/lean/run/casesRec.lean#L35-L49\">https://github.com/leanprover/lean4/blob/8c23bef39907e2599fb8ade149b7aa68ab4da311/tests/lean/run/casesRec.lean#L35-L49</a></p>\n</blockquote>\n<p><code>cases</code> has some structural recursion support</p>",
        "id": 328715017,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1676747206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/structural.20recursion.20failed.2C.20produced.20type.20incorrect.20term/near/328710126\">said</a>:</p>\n<blockquote>\n<p>It seems that the use of tactics somehow prevents it from seeing that it should use structural recursion, and then the instance somehow causes the termination proof to fail for well-founded recursion.</p>\n</blockquote>\n<p>Does it though? The error message claims that it tried to do structural recursion but got something type incorrect while doing so.</p>",
        "id": 328716989,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1676748326
    },
    {
        "content": "<p>I tried the term-mode equivalent and it worked. Also the tactic version worked without the instance.</p>",
        "id": 328717889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676748906
    },
    {
        "content": "<p>In the former case the term used structural recursion, in the latter case well-founded recursion.</p>",
        "id": 328717908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1676748920
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/structural.20recursion.20failed.2C.20produced.20type.20incorrect.20term/near/328716989\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/270676-lean4/topic/structural.20recursion.20failed.2C.20produced.20type.20incorrect.20term/near/328710126\">said</a>:</p>\n<blockquote>\n<p>It seems that the use of tactics somehow prevents it from seeing that it should use structural recursion, and then the instance somehow causes the termination proof to fail for well-founded recursion.</p>\n</blockquote>\n<p>Does it though? The error message claims that it tried to do structural recursion but got something type incorrect while doing so.</p>\n</blockquote>\n<p><code>set_option trace.Elab.definition.wf true </code> shows that Lean was trying to use WF recursion, I guess it failed too</p>",
        "id": 328719291,
        "sender_full_name": "Evgeniy Kuznetsov",
        "timestamp": 1676749849
    },
    {
        "content": "<p>So shall I just open an issue about this on the mathlib repo? Given the strange fact that this does work out perfectly fine if mathlib is not involved.</p>",
        "id": 338005396,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677333251
    },
    {
        "content": "<p>I don't think it has anything to do with mathlib per se.</p>",
        "id": 338007615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677334062
    },
    {
        "content": "<p>What is the issue then? If the mathlib import is removed the cases tactic works so clearly mathlib is doing something that confuses the structural recursion algorithm isn't it?</p>",
        "id": 338008854,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1677334467
    },
    {
        "content": "<p>See the version I posted above.</p>",
        "id": 338008920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677334496
    },
    {
        "content": "<p>I don't know what the issue is specifically.</p>",
        "id": 338008940,
        "sender_full_name": "Reid Barton",
        "timestamp": 1677334503
    }
]