[
    {
        "content": "<p>Is there a way I can view the code outputted from using <code>deriving</code>?</p>",
        "id": 354031699,
        "sender_full_name": "sgcs",
        "timestamp": 1682708886
    },
    {
        "content": "<p>They usually have an option, for example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.Elab.Deriving.decEq</span> <span class=\"n\">true</span> <span class=\"k\">in</span>\n<span class=\"kd\">structure</span> <span class=\"n\">Foo</span> <span class=\"n\">where</span>\n  <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">DecidableEq</span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">Elab.Deriving.decEq</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"kn\">private</span> <span class=\"kd\">def</span> <span class=\"n\">decEqFoo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">¹</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">¹</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n       <span class=\"k\">match</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">¹</span> <span class=\"k\">with</span>\n       <span class=\"bp\">|</span> <span class=\"bp\">@</span><span class=\"n\">Foo.mk</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"bp\">¹</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Foo.mk</span> <span class=\"n\">b</span> <span class=\"n\">b</span><span class=\"bp\">¹</span> <span class=\"bp\">=&gt;</span>\n         <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n           <span class=\"n\">exact</span>\n             <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"bp\">¹</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">¹</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">¹</span> <span class=\"k\">then</span> <span class=\"kd\">by</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"bp\">¹;</span> <span class=\"n\">exact</span> <span class=\"n\">isTrue</span> <span class=\"n\">rfl</span>\n             <span class=\"k\">else</span> <span class=\"n\">isFalse</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">¹</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">)</span>\n         <span class=\"k\">else</span> <span class=\"n\">isFalse</span><span class=\"bp\">¹</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"bp\">¹;</span> <span class=\"n\">injection</span> <span class=\"n\">n</span><span class=\"bp\">¹;</span> <span class=\"n\">apply</span> <span class=\"n\">h</span> <span class=\"n\">_</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span><span class=\"o\">),</span>\n     <span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Foo</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n       <span class=\"n\">decEqFoo</span>\n</code></pre></div>",
        "id": 354035232,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1682709965
    },
    {
        "content": "<p>You can also use <code>trace.Elab.command</code> to see any commands emitted by a <code>deriving</code> handler.</p>",
        "id": 354039519,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1682711394
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 354042740,
        "sender_full_name": "sgcs",
        "timestamp": 1682712543
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"597976\">sgcs</span> has marked this topic as resolved.</p>",
        "id": 354042753,
        "sender_full_name": "Notification Bot",
        "timestamp": 1682712549
    },
    {
        "content": "<p>Also the <code>whatsnew in</code> command.</p>",
        "id": 354193710,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1682746689
    }
]