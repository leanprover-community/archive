[
    {
        "content": "<p>In the following code, I get an error because Lean can't get a proof that the array index <code>i</code> is within the bounds:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doNothing</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">as.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Is there a way to gain access to some <code>h : i ∈ [0:as.size]</code> in that loop?</p>",
        "id": 402790019,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1700260296
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doNothing</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">as.size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"o\">(</span><span class=\"n\">as</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span><span class=\"bp\">'</span><span class=\"n\">h.2</span><span class=\"o\">)</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>",
        "id": 402790681,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700260622
    },
    {
        "content": "<p>I feel like <code>r := r.push as[i]</code> should work without needing to give a proof, but at least there's a way to write it.</p>",
        "id": 402790864,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1700260711
    },
    {
        "content": "<p>Yeah, it seems like this should be added to the default tactic somehow.</p>",
        "id": 402790916,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1700260745
    },
    {
        "content": "<p>If you don't need the index for something else you can also do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doNothing</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>btw</p>",
        "id": 402791193,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700260910
    },
    {
        "content": "<p>I do need the index for my real application though!</p>",
        "id": 402791302,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1700260959
    },
    {
        "content": "<p>Note that if this becomes annoying you can extend the tactic that tries to discharge those side conditions.</p>",
        "id": 402791751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1700261246
    },
    {
        "content": "<p><a href=\"#narrow/stream/270676-lean4/topic/improving.20Array.20indexing.20in.20for.20loops\">This thread</a> is relevant and has a specific partial solution for this case by extending that tactic!</p>",
        "id": 402805061,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1700267984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20bounds.20in.20for.20loops/near/402791193\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">doNothing</span> <span class=\"o\">[</span><span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">as</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[]</span>\n  <span class=\"n\">for</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">as</span> <span class=\"k\">do</span>\n    <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"n\">r.push</span> <span class=\"n\">a</span>\n  <span class=\"n\">return</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>Good example. <br>\nI'm curious if the <code>doNothing</code> function can accept a mutable reference to the input array <code>as</code>, similar to Rust. This would allow us to directly modify the input array <code>as</code> instead of creating a new one. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>Does the <code>mut</code> in Lean have a similar meaning to <code>mut</code> in Rust that refer to mutable variable or mutable references?</p>",
        "id": 402846814,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1700293901
    },
    {
        "content": "<p><code>mut</code> in a do block indeed marks a variable as mutable, but do blocks like this are really syntactic sugar for more fundamental functional operations like a fold, so what happens under the hood may not exactly be a mutable variable, see <a href=\"https://lean-lang.org/papers/do.pdf\">https://lean-lang.org/papers/do.pdf</a>.<br>\nAs for marking a variable input to a function as mutable thats also not really possible in a functional language strictly speaking, what lean 4 does make use of is tracking reference counts to avoid reallocating objects, which can acheive a lot of the benefits of using mutable variables, <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a>, its up to the programmer to try and debug whether this is happening though if things are performance critical</p>",
        "id": 402882781,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1700318837
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20bounds.20in.20for.20loops/near/402882781\">said</a>:</p>\n<blockquote>\n<p><code>mut</code> in a do block indeed marks a variable as mutable, but do blocks like this are really syntactic sugar for more fundamental functional operations like a fold, so what happens under the hood may not exactly be a mutable variable, see <a href=\"https://lean-lang.org/papers/do.pdf\">https://lean-lang.org/papers/do.pdf</a>.<br>\nAs for marking a variable input to a function as mutable thats also not really possible in a functional language strictly speaking, what lean 4 does make use of is tracking reference counts to avoid reallocating objects, which can acheive a lot of the benefits of using mutable variables, <a href=\"https://arxiv.org/pdf/1908.05647.pdf\">https://arxiv.org/pdf/1908.05647.pdf</a>, its up to the programmer to try and debug whether this is happening though if things are performance critical</p>\n</blockquote>\n<p>Awesome! Thanks for sharing great papers. Indeed, Lean is designed to produce purely functional code that can be easily reasoned and verified. Reference counting (RC) is a good fit for Lean because it is a purely functional programming language. Since variables are immutable, RC can be easily optimized to improve performance.</p>",
        "id": 402924079,
        "sender_full_name": "Min-Hsien Weng",
        "timestamp": 1700349516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/270676-lean4/topic/Array.20bounds.20in.20for.20loops/near/402791751\">said</a>:</p>\n<blockquote>\n<p>Note that if this becomes annoying you can extend the tactic that tries to discharge those side conditions.</p>\n</blockquote>\n<p>I RFC’ed this at <a href=\"https://github.com/leanprover/lean4/issues/3032\">https://github.com/leanprover/lean4/issues/3032</a></p>",
        "id": 406256636,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1701851563
    }
]