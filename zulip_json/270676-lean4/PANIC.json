[
    {
        "content": "<p>Is this supposed to happen?</p>\n<p><a href=\"/user_uploads/3121/SxnN4LIhG6wRzjgbvPOFRmMA/PANIC.png\">PANIC.png</a> I'm on yesterday's mathlib4. And there's a gazillion lines of</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/SxnN4LIhG6wRzjgbvPOFRmMA/PANIC.png\" title=\"PANIC.png\"><img src=\"/user_uploads/3121/SxnN4LIhG6wRzjgbvPOFRmMA/PANIC.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Elab_Term_elabMutualDef_go___lambda__1+0xbe3)[0x7f3f8df5d513]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Elab_Term_elabMutualDef_go___lambda__1___boxed+0xbd)[0x7f3f8df5f48d]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(lean_apply_5+0x32e)[0x7f3f8e5b681e]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Meta_withLCtx___at___private_Lean_Elab_Match_0__Lean_Elab_Term_withToClear___spec__25___rarg+0x4f)[0x7f3f8d72db1f]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l___private_Lean_Elab_MutualDef_0__Lean_Elab_Term_withUsed___rarg+0x325)[0x7f3f8df16625]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Elab_Term_elabMutualDef_go___lambda__2+0x5ef)[0x7f3f8df5ef3f]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Elab_Term_elabMutualDef_go___lambda__3+0xbf7)[0x7f3f8df600e7]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(lean_apply_8+0x5e8)[0x7f3f8e5b8f68]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l___private_Lean_Elab_MutualDef_0__Lean_Elab_Term_withFunLocalDecls_loop___rarg+0x311)[0x7f3f8df0d591]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l___private_Lean_Elab_MutualDef_0__Lean_Elab_Term_withFunLocalDecls_loop___rarg___lambda__1+0x78)[0x7f3f8df0d228]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(lean_apply_8+0x57b)[0x7f3f8e5b8efb]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Elab_Term_withAuxDecl___rarg___lambda__1+0x269)[0x7f3f8df905b9]</span>\n</code></pre></div>",
        "id": 328159961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676527720
    },
    {
        "content": "<p>Sorry, this should be in <a class=\"stream\" data-stream-id=\"270676\" href=\"/#narrow/stream/270676-lean4\">#lean4</a> I guess. Can someone move it? I don't think I can? Panic just happened again -- am getting a lot of them in this file. I'll just start a new thread with a possible repro</p>",
        "id": 328160959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676528399
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib4/blob/f4b5f453a88aba632e23a81a821b985a6b24d1f0/Mathlib/CategoryTheory/Bicategory/Functor.lean#L302\">Here</a> I can reliably get a PANIC by e.g. deleting a and b. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Lean</span> <span class=\"n\">server</span> <span class=\"n\">printed</span> <span class=\"n\">an</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">PANIC</span> <span class=\"n\">at</span> <span class=\"n\">Lean.MetavarContext.getDecl</span> <span class=\"n\">Lean.MetavarContext</span><span class=\"o\">:</span><span class=\"mi\">395</span><span class=\"o\">:</span><span class=\"mi\">17</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">metavariable</span> <span class=\"n\">backtrace</span><span class=\"o\">:</span>\n</code></pre></div>\n<p>STDERR is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">...</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l___private_Lean_Elab_MutualDef_0__Lean_Elab_Term_withFunLocalDecls_loop___rarg+0x311)[0x7f138a3bd591]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l___private_Lean_Elab_MutualDef_0__Lean_Elab_Term_withFunLocalDecls_loop___rarg___lambda__1+0x78)[0x7f138a3bd228]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(lean_apply_8+0x57b)[0x7f138aa68efb]</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">buzzard</span><span class=\"bp\">/.</span><span class=\"n\">elan</span><span class=\"bp\">/</span><span class=\"n\">toolchains</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"c1\">--lean4---nightly-2023-02-10/bin/../lib/lean/libleanshared.so(l_Lean_Elab_Term_withAuxDecl___rarg___lambda__1+0x269)[0x7f138a4405b9]</span>\n</code></pre></div>\n<p>I tried redownloading oleans but this didn't seem to fix the problem for me. Can anyone else reproduce?</p>",
        "id": 328162076,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676529179
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/PANIC\">#general &gt; PANIC</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 328205957,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676545152
    },
    {
        "content": "<p>I seem to be getting different error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ lake build Mathlib.CategoryTheory.Bicategory.Functor\n[... skipping output ...]\n./././Mathlib/CategoryTheory/Bicategory/Functor.lean:302:25: error: type mismatch\n  fun a b f ↦ ?m.46768 a b f\nhas type\n  (a : a✝ ⟶ b✝) →\n    (b : ?m.46765 a) → (f : ?m.46766 a b) → ?m.46767 a b f : Sort (imax (v₁ + 1) ?u.46756 ?u.46759 ?u.46762)\nbut is expected to have type\n  ∀ (f : a✝ ⟶ b✝),\n    PrelaxFunctor.map₂ { toPrefunctor := ↑src✝, map₂ := fun {a b} {f g} ↦ PrelaxFunctor.map₂ src✝ } (λ_ f).hom =\n      (fun {a b c} f g ↦ ?m.46600 f g) (𝟙 a✝) f ≫\n        (fun a ↦ ?m.46582 a) a✝ ▷\n            Prefunctor.map (↑{ toPrefunctor := ↑src✝, map₂ := fun {a b} {f g} ↦ PrelaxFunctor.map₂ src✝ }) f ≫\n          (λ_\n              (Prefunctor.map (↑{ toPrefunctor := ↑src✝, map₂ := fun {a b} {f g} ↦ PrelaxFunctor.map₂ src✝ })\n                f)).hom : Prop\nthe following variables have been introduced by the implicit lambda feature\n  a✝ : B\n  b✝ : B\nyou can disable implict lambdas using `@` or writing a lambda expression with `{}` or `[]` binder annotations.\n./././Mathlib/CategoryTheory/Bicategory/Functor.lean:304:46: error: unknown identifier 'map_comp_naturality_left_assoc'\n./././Mathlib/CategoryTheory/Bicategory/Functor.lean:310:2: error: using 'exit' to interrupt Lean\nerror: external command `/home/kmill/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/lean` exited with code 1\n</code></pre></div>",
        "id": 328207001,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676545376
    },
    {
        "content": "<p>Right -- you compile and you get that error, which says \"delete a and b from the line I flagged\" and when I delete them it panics</p>",
        "id": 328227410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676551499
    },
    {
        "content": "<p>Did you try using <code>@fun a b f</code> instead of deleting a and b?</p>",
        "id": 328235998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1676553965
    },
    {
        "content": "<p>Oh right, I did read that part of your message but forgot to make the edit. I'm still getting a different error. I edited both lines 302 and 306</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>./././Mathlib/CategoryTheory/Bicategory/Functor.lean:304:46: error: unknown identifier 'map_comp_naturality_left_assoc'\n./././Mathlib/CategoryTheory/Bicategory/Functor.lean:308:47: error: unknown identifier 'map_comp_naturality_right_assoc'\n./././Mathlib/CategoryTheory/Bicategory/Functor.lean:310:2: error: using 'exit' to interrupt Lean\nerror: external command `/home/kmill/.elan/toolchains/leanprover--lean4---nightly-2023-02-10/bin/lean` exited with code 1\n</code></pre></div>",
        "id": 328236058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1676553983
    },
    {
        "content": "<p>Any progress on this?  I am also getting <a href=\"#narrow/stream/270676-lean4/topic/Errors.20after.20update/near/328305878\">strange errors</a> on nightly-2023-02-10.</p>",
        "id": 328316625,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1676574834
    },
    {
        "content": "<p>My PANIC issue is still an issue but I have evidence that it's being caused by using <code>aesop</code> in category theory instead of <code>aesop_cat</code>, and I can't reproduce; I just get the error a lot when I'm editing a file, but restarting Lean always fixes it.</p>",
        "id": 329072613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1676930163
    },
    {
        "content": "<p>The following proof works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">intro</span> <span class=\"o\">(⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n  <span class=\"k\">show</span> <span class=\"n\">Q</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">And.intro</span> <span class=\"n\">h2</span> <span class=\"n\">h1</span>\n  <span class=\"n\">done</span>\n</code></pre></div>\n<p>Now, suppose I decide to edit the <code>intro</code> line.  If I delete the <code>P ∧ Q)</code> at the end of that line, I get a PANIC at Lean.Expr.mvarId!.  I don't know how to tell what's causing it.</p>\n<p>Sorry this example is so strange--it took me a while to find a MWE that consistently causes this.</p>",
        "id": 346997329,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1680655243
    },
    {
        "content": "<p>I'm using leanprover/lean4:nightly-2023-03-07.</p>",
        "id": 346997787,
        "sender_full_name": "Dan Velleman",
        "timestamp": 1680655444
    }
]