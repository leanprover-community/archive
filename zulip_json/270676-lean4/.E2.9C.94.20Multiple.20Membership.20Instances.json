[
    {
        "content": "<p>The following example fails on the last line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Set.Basic</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">Graph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">vertices</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span>\n  <span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">v</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">g.vertices</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"n\">e</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">e</span> <span class=\"bp\">∈</span> <span class=\"n\">g.edges</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"c1\">--                              ^^^^^</span>\n<span class=\"c1\">-- failed to synthesize instance Membership α (Graph α)</span>\n</code></pre></div>\n<p>Is this expected, or a bug? If it is expected, how can I define multiple instances of <code>Membership</code> over the same type?</p>",
        "id": 374304679,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1689088946
    },
    {
        "content": "<p>Take a look at the definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">Membership</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">outParam</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">mem</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p><code>α</code> is an out-param, meaning it's supposed to be a function of <code>γ</code>.  So, for a given <code>γ</code> you can only have at most one instance.</p>",
        "id": 374305722,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689089119
    },
    {
        "content": "<p>One \"solution\" is to use <code>v ∈ g.vertices</code> and <code>e ∈ g.edges</code> directly. I put solution in quotes because the suggestion is to not define any <code>Membership</code> instances at all. This is clear and you don't need any lemmas to relate your membership notation to these expressions. I'd probably choose doing this.</p>",
        "id": 374306288,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689089203
    },
    {
        "content": "<p>Or there's defining some abbrevations so it looks more common notation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">g.vertices</span>\n\n<span class=\"n\">abbrev</span> <span class=\"n\">E</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">g.edges</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 374307411,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689089360
    },
    {
        "content": "<p>Ah, too bad. Unfortunately in my real setting <code>Graph.vertices</code> is a <code>HashSet</code> and <code>edges</code> is a <code>HashMap</code>, so <code>∈</code> doesn't work on them, but the \"nice\" names are already taken by them. I guess I'll just have to deal with giving them other names then.</p>",
        "id": 374307938,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1689089432
    },
    {
        "content": "<p>Or there's defining a notation so that you don't have to worry about whether the <code>V</code> and <code>E</code> abbreviations will get unfolded.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"s2\">\"V(\"</span> <span class=\"n\">g</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Graph.vertices</span> <span class=\"n\">g</span>\n<span class=\"kd\">notation</span> <span class=\"s2\">\"E(\"</span> <span class=\"n\">g</span> <span class=\"s2\">\")\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Graph.edges</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Graph</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">V</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">E</span><span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 374307986,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689089438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> <a href=\"#narrow/stream/270676-lean4/topic/Multiple.20Membership.20Instances/near/374307938\">said</a>:</p>\n<blockquote>\n<p>Unfortunately in my real setting <code>Graph.vertices</code> is a <code>HashSet</code> and <code>edges</code> is a <code>HashMap</code>, so <code>∈</code> doesn't work on them</p>\n</blockquote>\n<p>What's the issue? Is there something getting in the way of defining a <code>Membership</code> instance for them?</p>",
        "id": 374308602,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689089533
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Multiple.20Membership.20Instances/near/374308602\">said</a>:</p>\n<blockquote>\n<p>What's the issue? Is there something getting in the way of defining a <code>Membership</code> instance for them?</p>\n</blockquote>\n<p>Oh good point, I didn't think of that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 374309095,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1689089616
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"372804\">Marcus Rossel</span> has marked this topic as resolved.</p>",
        "id": 374309884,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689089733
    },
    {
        "content": "<p>Though it's kinda odd that Std doesn't have membership instances for HashSet at the very least <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 374315590,
        "sender_full_name": "James Gallicchio",
        "timestamp": 1689090775
    },
    {
        "content": "<p>not that surprising given that <code>Std.HashSet</code> doesn't exist</p>",
        "id": 374475979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689130769
    },
    {
        "content": "<p>there is only <code>HashMap</code> and I'm not sure a membership instance is the right idea for that</p>",
        "id": 374476141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1689130806
    }
]