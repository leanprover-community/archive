[
    {
        "content": "<p>I'm for advice choosing between having equalities between terms using cast, vs. having heterogeneous equalities. </p>\n<p>I'm in a situation where I have <code>(a : A)</code>, <code>(b : B)</code>, and a proof  <code>pf : (A = B)</code>. I want to write the type <code>a = b</code>, but I can't because they don't have the same type.</p>\n<p>If I write <code>(cast pf a) = b</code>, then the problem is I have a cast in my goals, and I can't figure out how to get rid of it, even though I have the proof that the types are equal. In Agda I'd just pattern match on the equality but that doesn't seem like the lean way to do things. And applying the equality eliminator by hand seems overkill because I'd have to figure out the motive myself.</p>\n<p>If I write <code>HEq a b</code>, things generally work. But this seems \"lossy\" since it's forgetting that I already have the proof that the types are the same. I'm worried that simp won't be as able to reason about HEq , and HEq seems like a \"dead end\" in the sense that once you have an HEq proof there don't seem to be ways to get it back to a normal equality.</p>\n<p>Are there tactics for getting rid of casts in proofs? Or is HEq the way to go to avoid having casts in goal types?</p>",
        "id": 397125871,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1697554233
    },
    {
        "content": "<p><code>simp</code> might well get rid of casts for you. </p>\n<p>The advice we usually give is to avoid casts if you can -- type equality is hard to work with in Lean's type theory.</p>",
        "id": 397129979,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1697555395
    },
    {
        "content": "<p>I think Kevin's response possibly sends the wrong message; we try to avoid <code>Heq</code> for the same reason as we avoid casts!</p>",
        "id": 397139293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697558083
    },
    {
        "content": "<p>Anything you can do in Agda should also work in Lean. In particular, Lean's pattern matching should be as powerful as Agda's (without <code>--without-K</code>). <code>cases eq</code>, where <code>eq : A = B</code>, might also do the trick.</p>\n<p>If you know <code>eq : A = B</code> and <code>heq : HEq a b</code>, then you should be able to match on <code>eq</code> and apply <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=eq_of_heq#doc\">docs#eq_of_heq</a> (or just match on <code>heq</code>).</p>\n<p>I generally prefer casts (aka \"path over\" from HoTT) to <code>HEq</code>, but your mileage may vary.</p>",
        "id": 397139758,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1697558241
    },
    {
        "content": "<p>In my experience casts are equally bad: usually what I actually have is <code>x : A i</code> and <code>y : A j</code>, and both HEq a b<code> and </code>cast h a b<code> throw away the information that </code>i = j`</p>",
        "id": 397142089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697558924
    },
    {
        "content": "<p>have you ported your indexed equality test to lean4?</p>",
        "id": 397142179,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1697558966
    },
    {
        "content": "<p>No, but I think <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  or <span class=\"user-mention\" data-user-id=\"459699\">@JoÃ«l Riou</span> independently PR'd a category-theory-specific version which has been merged</p>",
        "id": 397143035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697559298
    },
    {
        "content": "<p>(well remembered!)</p>",
        "id": 397143091,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1697559319
    },
    {
        "content": "<p>In verification,  I try to eliminate both <code>cast</code> and <code>HEq</code> early on.  I think both are a sign one is working with the wrong types.</p>\n<p>For example, if I have to cast because I am trying to prove two vectors <code>Vector m A</code> and <code>Vector n A</code> then I would switch to trying to prove their underlying arrays or lists are equal and avoid both <code>cast</code> and <code>HEq</code>.</p>",
        "id": 397145954,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1697560432
    },
    {
        "content": "<p>You can also often avoid dealing with casts by explicitly choosing an isomorphism between the equal types and using that to go between the types. For example, instead of casting with a proof that <code>Fin i = Fin j</code>, we can call <code>Fin.cast  : i = j -&gt; Fin i -&gt; Fin j </code></p>",
        "id": 397152666,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697563277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384488\">@Joey Eremondi</span> Could you make a not-necessarily-minimal <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> that's got enough details to demonstrate your situation? There's a lot of general advice about cast/heq, but concrete advice can vary a lot case-by-case.</p>",
        "id": 397348922,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1697646786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> <a href=\"#narrow/stream/270676-lean4/topic/Casting.20vs.20HEq/near/397125871\">said</a>:</p>\n<blockquote>\n<p>If I write <code>HEq a b</code>, things generally work. But this seems \"lossy\" since it's forgetting that I already have the proof that the types are the same. </p>\n</blockquote>\n<p>This is not necessarily true, btw. <code>HEq a b</code> implies that the types of <code>a</code> and <code>b</code> are equal, this is called <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#type_eq_of_heq\"><code>type_eq_of_heq</code></a></p>",
        "id": 397357949,
        "sender_full_name": "Alex Keizer",
        "timestamp": 1697650546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  What I'm working on is here, it's abstract but a fairly small file: <a href=\"https://github.com/JoeyEremondi/lean-cwf/blob/main/LeanCwf/CwF.lean\">https://github.com/JoeyEremondi/lean-cwf/blob/main/LeanCwf/CwF.lean</a></p>\n<p>Basically CwFs are a way to model the semantics of programming languages in Category Theory. The laws are very dependent, because types depend on contexts and terms depend on types.</p>\n<p>e.g. <code>tmSubComp</code> has to be a heterogenous equation, because to be well typed, it depends on the equality of <code>tySubComp</code>.</p>\n<p>Likewise, in <code>ext_nat</code>, we can't even give the argument to <code>ext</code> without casting by <code>tySubComp</code>.</p>\n<p>And then for example I'm trying to prove <code>ext_unique</code>, but when I do <code>rw</code>, it just generates a new variable that shadows the old one, but the old one still appears in the goal type.</p>",
        "id": 398473505,
        "sender_full_name": "Joey Eremondi",
        "timestamp": 1698236549
    },
    {
        "content": "<p>You might want to consult <a href=\"https://1lab.dev/Cat.Displayed.Base.html#displayed-categories\">Agda formalizations</a> of displayed categories for many tricks that tame the dependency. Two more ways to deal with it is to (1) take Sigma types, or in category theory jargon, let Tm be a functor from the category of elements of Ty, or (2) take Sigma types another way, so <code>Tm G</code> is the collection of all terms in context <code>G</code> regardless of type, and have a <code>typeof</code> operator assigning the types.</p>",
        "id": 398477579,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1698238064
    },
    {
        "content": "<p>One design pattern that might be useful here is writing a custom <code>cast</code> function that rewrites just a specific part of a term. In this case, write a function <code>Tm.cast</code> that rewrites just the <code>T</code> argument of <code>Tm T</code>. This lets you write simp lemmas and such that have access to the proof of equality that wouldn't be accessible from a <code>HEq</code> term or a general <code>cast</code> term. This design pattern is used in <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=SimpleGraph.Walk.copy#doc\">docs#SimpleGraph.Walk.copy</a>, <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.cast#doc\">docs#Quiver.Hom.cast</a>, and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Path.cast#doc\">docs#Quiver.Path.cast</a> for rewriting indices. You can write algebraic rules like <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.cast_cast#doc\">docs#Quiver.Hom.cast_cast</a> and <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Quiver.Hom.cast_rfl_rfl#doc\">docs#Quiver.Hom.cast_rfl_rfl</a></p>",
        "id": 398533227,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698255359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481133\">Alex Keizer</span> <a href=\"#narrow/stream/270676-lean4/topic/Casting.20vs.20HEq/near/397357949\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"384488\">Joey Eremondi</span> <a href=\"#narrow/stream/270676-lean4/topic/Casting.20vs.20HEq/near/397125871\">said</a>:</p>\n<blockquote>\n<p>If I write <code>HEq a b</code>, things generally work. But this seems \"lossy\" since it's forgetting that I already have the proof that the types are the same. </p>\n</blockquote>\n<p>This is not necessarily true, btw. <code>HEq a b</code> implies that the types of <code>a</code> and <code>b</code> are equal, this is called <a href=\"https://leanprover-community.github.io/mathlib4_docs/Init/Core.html#type_eq_of_heq\"><code>type_eq_of_heq</code></a></p>\n</blockquote>\n<p>The usual problem is that you have a type family <code>F</code>, <code>a : F i</code> and <code>b : F j</code>, and you know <code>i = j</code>. Then <code>HEq a b</code> only implies <code>F i = F j</code> but forgets that <code>i = j</code>. (encountered this in algebraic geometry (sheaves)).</p>",
        "id": 398566833,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1698271387
    },
    {
        "content": "<p>(This in particular is what the design pattern I mentioned is meant to help with -- remembering this <code>i = j</code> equality.)</p>",
        "id": 398570112,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698272630
    }
]