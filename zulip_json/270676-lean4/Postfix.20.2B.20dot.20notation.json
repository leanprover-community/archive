[
    {
        "content": "<p>Is there a way to define a postfix operator that binds more strongly than dot notation? I would like to do something like the following without the need for parentheses around the <code>n*</code>. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Nat.Basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_five</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">↦</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">5</span>\n\n<span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"*\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add_five</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">star_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_five</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- lemma star_succ' (n : ℕ) : n*.succ = n.succ* := by sorry</span>\n<span class=\"c1\">-- breaks without parentheses</span>\n</code></pre></div>",
        "id": 371107047,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1688124034
    },
    {
        "content": "<p>It seems that the problem is an ambiguity in <code>n*.succ</code>, since it could mean <code>n * .succ</code>, since <code>.succ</code> is valid syntax.</p>\n<p>This works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">postfix</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"s2\">\"**\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">add_five</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">star_succ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"bp\">**.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">n.succ</span><span class=\"bp\">**</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_five</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 371119699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1688126349
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 371142429,
        "sender_full_name": "Peter Nelson",
        "timestamp": 1688130195
    }
]