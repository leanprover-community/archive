[
    {
        "content": "<p>Can I use lean’s <code>syntax</code> declaration to define parsers that I want to use at _runtime_ of my program?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">syntax</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"s2\">\"some\"</span> <span class=\"n\">ident</span>\n\n<span class=\"n\">unsafe</span> <span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"s2\">\"some test\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">parsed_input</span> <span class=\"o\">:</span> <span class=\"n\">Lean.Syntax</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"c1\">-- what do I put here to apply `test` to `input`</span>\n</code></pre></div>",
        "id": 387155724,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692908047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> This was the motivating use case behind my package, <a href=\"https://github.com/tydeu/lean4-partax\">Partax</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Partax</span>\n<span class=\"kn\">open</span> <span class=\"n\">scoped</span> <span class=\"n\">Partax</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">test</span> <span class=\"o\">:=</span> <span class=\"s2\">\"some\"</span> <span class=\"n\">ident</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Parser</span>\n<span class=\"n\">compile_parser</span> <span class=\"n\">test</span>\n<span class=\"kd\">end</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">input</span> <span class=\"o\">:=</span> <span class=\"s2\">\"some test\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">parsedInput</span> <span class=\"bp\">←</span> <span class=\"n\">IO.ofExcept</span> <span class=\"bp\">&lt;|</span> <span class=\"n\">Parser.test.run'</span> <span class=\"n\">input</span>\n  <span class=\"c1\">-- ...</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">parsedInput</span>\n\n<span class=\"k\">#eval</span> <span class=\"n\">main</span> <span class=\"c1\">-- (test \"some\" `test)</span>\n</code></pre></div>",
        "id": 387168911,
        "sender_full_name": "Mac Malone",
        "timestamp": 1692914935
    },
    {
        "content": "<p>Great, will try that tomorrow! I'm a bit relieved that there isn't a simple way that I failed to figure out :-)</p>",
        "id": 387192878,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1692928859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/113488-general/topic/Loogle.20is.20live!/near/387909390\">said</a>:</p>\n<blockquote>\n<p>Could you say a little bit about why <code>find_patterns</code> is a syntax category in the PR? I don't really understand \"so that it can be used by external tools\".</p>\n</blockquote>\n<p>(moving this question to a separate topic)</p>\n<p>This was the only way so far I managed to access this parser at runtime, which I need in the <code>loogle</code> tool, using this code:<br>\n<a href=\"https://github.com/nomeata/loogle/blob/ac0b5ff07276449df091bd2f30ef31a589547391/Loogle.lean#L31\">https://github.com/nomeata/loogle/blob/ac0b5ff07276449df091bd2f30ef31a589547391/Loogle.lean#L31</a><br>\nI was mostly guessing and cargo-culting, and am happy to learn of better ways.</p>\n<p>I did not yet investigate <code>Partax</code>, it seems then I wouldn’t need a syntax category. Let me do that right away. (Although I wish lean would just allow me to use parsers at runtime without extra tools…)</p>",
        "id": 387913425,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693324976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470149\">@Joachim Breitner</span> I've never tried this before and I might be doing it wrong, but here's a <code>runParser</code> function that takes a declaration name for the <code>syntax</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"sd\">/-- The turnstyle for conclusion patterns, unicode or ascii allowed -/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">turnstyle</span> <span class=\"o\">:=</span> <span class=\"n\">patternIgnore</span><span class=\"o\">(</span><span class=\"s2\">\" ⊢ \"</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"s2\">\" |- \"</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- `#find` patterns -/</span>\n<span class=\"n\">syntax</span> <span class=\"n\">find_patterns</span> <span class=\"o\">:=</span> <span class=\"n\">term</span><span class=\"o\">,</span><span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">turnstyle</span> <span class=\"n\">term</span><span class=\"o\">)</span><span class=\"bp\">?</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Parser</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">runParser</span> <span class=\"o\">(</span><span class=\"n\">env</span> <span class=\"o\">:</span> <span class=\"n\">Environment</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">declName</span> <span class=\"o\">:</span> <span class=\"n\">Name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">input</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;input&gt;\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Except</span> <span class=\"n\">String</span> <span class=\"n\">Syntax</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">andthenFn</span> <span class=\"n\">whitespace</span> <span class=\"o\">(</span><span class=\"n\">evalParserConst</span> <span class=\"n\">declName</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">ictx</span> <span class=\"o\">:=</span> <span class=\"n\">mkInputContext</span> <span class=\"n\">input</span> <span class=\"n\">fileName</span>\n  <span class=\"k\">let</span> <span class=\"n\">s</span> <span class=\"o\">:=</span> <span class=\"n\">p.run</span> <span class=\"n\">ictx</span> <span class=\"o\">{</span> <span class=\"n\">env</span><span class=\"o\">,</span> <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span> <span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">getTokenTable</span> <span class=\"n\">env</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mkParserState</span> <span class=\"n\">input</span><span class=\"o\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">s.hasError</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.error</span> <span class=\"o\">(</span><span class=\"n\">s.toErrorMsg</span> <span class=\"n\">ictx</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">input.atEnd</span> <span class=\"n\">s.pos</span> <span class=\"k\">then</span>\n    <span class=\"n\">Except.ok</span> <span class=\"n\">s.stxStack.back</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">Except.error</span> <span class=\"o\">((</span><span class=\"n\">s.mkError</span> <span class=\"s2\">\"end of input\"</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">toErrorMsg</span> <span class=\"n\">ictx</span><span class=\"o\">)</span>\n\n<span class=\"k\">#eval</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">getEnv</span> <span class=\"o\">:</span> <span class=\"n\">Elab.TermElabM</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"k\">match</span> <span class=\"n\">runParser</span> <span class=\"n\">env</span> <span class=\"bp\">``</span><span class=\"n\">find_patterns</span> <span class=\"s2\">\"1 + 1 ⊢ x\"</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">s</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logInfo</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"ok: {s}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">e</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">logError</span> <span class=\"n\">m</span><span class=\"bp\">!</span><span class=\"s2\">\"error: {e}\"</span>\n</code></pre></div>",
        "id": 387916367,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693326000
    },
    {
        "content": "<p>(The particular <code>syntax</code> declarations are just for testing, and I don't mean to suggest anything about how <code>#find</code> should work.)</p>",
        "id": 387916513,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1693326049
    },
    {
        "content": "<p>Hmm, using partax to compile the <code>term</code> parsers certainly adds noticably friction to the development process. It seems cleaner if <code>loogle</code> doesn't use the environment of the loaded <code>.olean</code>, but not sure if the extra build time is worth it. Hmm.</p>",
        "id": 387918761,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693326784
    },
    {
        "content": "<p>Thanks, Kyle, that code seems to work. Using it now in <code>loogle</code> and removed the syntax category from the <code>#find</code> PR</p>",
        "id": 387919921,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1693327192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/270676-lean4/topic/using.20syntax.20parsers.20at.20runtime/near/387918761\">said</a>:</p>\n<blockquote>\n<p>Hmm, using partax to compile the <code>term</code> parsers certainly adds noticably friction to the development process.</p>\n</blockquote>\n<p>Yeah, compiling the whole Lean grammar is unfortunately currently slow in Partax.</p>",
        "id": 387936006,
        "sender_full_name": "Mac Malone",
        "timestamp": 1693332199
    }
]