[
    {
        "content": "<p>Hi! I'm trying to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>I know that <code>h</code> must definitely be a <code>foo</code>, not a <code>bar</code>. How do I convince Lean that this is the case?</p>\n<p>If I change <code>1 + n</code> to <code>n + 1</code>, then Lean is able to deduce that, and this makes sense since it can distinguish syntactically that a <code>Nat.succ</code> is not a <code>Nat.zero</code>. But I really need to use something akin to <code>1 + n</code> there.</p>\n<p>An error when I <code>cases h</code> is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">dependent</span> <span class=\"n\">elimination</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">solve</span> <span class=\"n\">equation</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">Nat.add</span> <span class=\"mi\">1</span> <span class=\"n\">n</span><span class=\"bp\">✝</span>\n</code></pre></div>",
        "id": 338701992,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1677622233
    },
    {
        "content": "<p>A trick I know to deal with this is to <code>generalize</code> the <code>0</code> first:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n  <span class=\"bp\">·</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h0</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h0</span>\n</code></pre></div>",
        "id": 338704398,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677623324
    },
    {
        "content": "<p>That then gives you a chance to apply commutativity before handing it back to <code>cases</code>, which finishes it off.</p>",
        "id": 338704494,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677623364
    },
    {
        "content": "<p>If you can change the <code>inductive</code>, another thing you can do is sort of bake the <code>generalize</code> into the constructor:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">Test</span> <span class=\"o\">:</span> <span class=\"n\">Bool</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"mi\">0</span>\n  <span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Test</span> <span class=\"n\">false</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span>\n  <span class=\"bp\">·</span> <span class=\"n\">assumption</span>\n  <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">Nat.add_comm</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 338705014,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1677623558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360581\">Sorawee Porncharoenwase</span> has marked this topic as resolved.</p>",
        "id": 338705261,
        "sender_full_name": "Notification Bot",
        "timestamp": 1677623651
    },
    {
        "content": "<p>Thanks! That works perfectly.</p>",
        "id": 338705283,
        "sender_full_name": "Sorawee Porncharoenwase",
        "timestamp": 1677623664
    },
    {
        "content": "<p>A reliable way to avoid this sort of issue is to make sure that the index terms of your constructors consist only of constructors and variables. So <code>0</code> is fine since it's a constructor; <code>1 + n</code> is not fine since it contains the function <code>+</code> which does not reduce to a constructor application. If you need index terms which do not fall into this fragment, use a variable and an equation instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">Test</span> <span class=\"n\">true</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 338712295,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677626448
    },
    {
        "content": "<p>Kyle already mentioned this. I'm gonna go to bed now. :)</p>",
        "id": 338712374,
        "sender_full_name": "Jannis Limperg",
        "timestamp": 1677626491
    }
]