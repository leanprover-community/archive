[
    {
        "content": "<p>Suppose that I am on an Xorg system and I want to write a native linux program, purely in Lean, that does the following:</p>\n<p>1) It draws a window of given dimensions that contains a white background, a stickman figure on the bottom left, and an elevated platform (horizontal line segment) somewhere near the middle bottom.</p>\n<p>2) When I press the left/right arrow keys, the stickman figure moves accordingly; holding the keys makes the figure move smoothly across the screen.</p>\n<p>3) When I press the up key, the figure jumps up and lands down according to simple physics.  Combining the up and horizontal keys, it jumps diagonally, allowing it to land on the platform.</p>\n<p>4) If the figure lands on the platform, the speakers make a high pitched sound.  If it jumps back on the ground, the speakers make a thud.</p>\n<p>5) The program terminates after 2 minutes.</p>\n<p>If I am correct, Lean cannot do most of these things right now by itself (without interfacing to some C library).  My question is: what kind of <em>infrastructure</em> does Lean need to build, say in Std, in order to be able to write a program like the above?</p>\n<p>Note: I do not want to assume any library like GTK or Qt, rather I want to write all the low level primitives in Lean.</p>",
        "id": 390529898,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694528272
    },
    {
        "content": "<p>I don't think you can directly write the necessary glue code in lean, it doesn't have enough expressivity to express all C ABIs you will need to deal with to do this. If you are willing to settle for \"writing C code in a Lean file\" the closest thing is <a href=\"https://github.com/tydeu/lean4-alloy\">Alloy</a></p>",
        "id": 390530293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694528397
    },
    {
        "content": "<p>If you are willing to grant such glue code for OS interaction, it's still a bit of a challenge to write a graphics library</p>",
        "id": 390530809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694528542
    },
    {
        "content": "<p>I imagine that something like <a href=\"https://handmadehero.org/\">Handmade Hero</a> would be a good reference, although it's somewhat windows-centric</p>",
        "id": 390531118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694528635
    },
    {
        "content": "<p>I understand; I only care about a very primitive multimedia IO (without performance goals and stickman-level <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> ), mostly to play with a domain well outside Lean's core competency.  I am mostly curious as to what the underlying IO structures will look like in Lean.</p>",
        "id": 390532064,
        "sender_full_name": "Ioannis Konstantoulas",
        "timestamp": 1694528925
    },
    {
        "content": "<p>The main challenge will be grokking the shape of the windows / osx / linux APIs for graphics / other multimedia, which I'm sure are huge and complex even if you just want a hello world example</p>",
        "id": 390532908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529196
    },
    {
        "content": "<p>a tutorial sounds like the best place to start</p>",
        "id": 390532999,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529227
    },
    {
        "content": "<p>writing the glue code and API in lean will be comparatively simple, once you know what you are dealing with</p>",
        "id": 390533122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529255
    },
    {
        "content": "<p>Why would anyone do that? Is there any language that play that game?</p>",
        "id": 390533464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694529367
    },
    {
        "content": "<p>??? Is there a programming language that does graphics?</p>",
        "id": 390533686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529451
    },
    {
        "content": "<p>I mean beyond C of course.</p>",
        "id": 390533807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694529487
    },
    {
        "content": "<p>Is there a high-level programming language that play that game instead of interfacing with C libraries?</p>",
        "id": 390533886,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1694529508
    },
    {
        "content": "<p>Some languages can write the interfacing code in the native langauge</p>",
        "id": 390533934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529528
    },
    {
        "content": "<p>ultimately it always bottoms out on a C interface, although it's not necessarily C on the other side</p>",
        "id": 390534018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529555
    },
    {
        "content": "<p>To quote from a very lovely article <a href=\"https://faultlore.com/blah/c-isnt-a-language/\">C isn't a programming language anymore</a>:</p>\n<blockquote>\n<p>My problem is that C was elevated to a role of prestige and power, its reign so absolute and eternal that it has completely distorted the way we speak to each other. Rust and Swift cannot simply speak their native and comfortable tongues – they must instead wrap themselves in a grotesque simulacra of C’s skin and make their flesh undulate in the same ways it does.</p>\n</blockquote>",
        "id": 390534347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694529629
    },
    {
        "content": "<p>Depending on what counts here, there things like <a href=\"https://github.com/python-xlib/python-xlib\">https://github.com/python-xlib/python-xlib</a></p>",
        "id": 390549836,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694534123
    },
    {
        "content": "<p>(Which yeah perhaps writing an Xlib client in Lean is some sort of target, though the above platform-specific comments of course apply there)</p>",
        "id": 390549963,
        "sender_full_name": "Julian Berman",
        "timestamp": 1694534163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"433842\">@Anders Christiansen Sørby</span> was implementing SDL bindings for Lean at some point btw at <a href=\"https://github.com/Anderssorby/SDL.lean\">https://github.com/Anderssorby/SDL.lean</a>, not sure what the status of that is now though.</p>",
        "id": 390563248,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1694538814
    }
]