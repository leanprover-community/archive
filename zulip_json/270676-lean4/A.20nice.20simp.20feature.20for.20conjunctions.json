[
    {
        "content": "<p>I just learned about a feature in <code>simp</code> that I wasn't aware of, which didn't exist in Lean 3 (and which I had been wanting).</p>\n<p>Simp will normalize lemmas you give it to produce some list of the actual simp lemmas. The following is the same as <code>simp [h.1, h.2]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Also when you add <code>@[simp]</code> to a conjunction, it gives you multiple simp lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">axiom</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">axiom</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">7</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 374259252,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689080648
    },
    {
        "content": "<blockquote>\n<p>which didn't exist in Lean 3</p>\n</blockquote>\n<p>Both of your examples work just fine in Lean 3 (after changing <code>Nat</code> to <code>nat</code>).</p>",
        "id": 374377959,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1689106643
    },
    {
        "content": "<p>Huh, so they do. Let's downgrade this PSA to \"here's a neat simp feature that you've wanted that's been there all along\"</p>",
        "id": 374380114,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1689107364
    }
]