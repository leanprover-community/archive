[
    {
        "content": "<p>Is there a way to delaborate an Expr object so it becomes another Expr object instead of a syntax?</p>\n<p>For example, consider the expression of <code>a + b</code> where <code>a, b</code> are both <code>Nat</code>s. Then this expression when fully elaborated is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">HAdd.hAdd</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"n\">Nat</span> <span class=\"bp\">...</span> <span class=\"c1\">-- along with `instHAdd and `instAddNat</span>\n</code></pre></div>\n<p>but when written out it is just a <code>HAdd.hAdd</code> operator with two fvars:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"bp\">`</span><span class=\"n\">HAdd.hAdd</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"bp\">...</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"bp\">...</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>delab</code> function in <code>Delaborator/Basic.lean</code> outputs syntax directly. Is there a way to make it output <code>Expr</code>s?</p>",
        "id": 399181228,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698609376
    },
    {
        "content": "<p>What do you mean by \"when written out\"?</p>",
        "id": 399182462,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698610446
    },
    {
        "content": "<p>Elaboration is <code>Syntax -&gt; Expr</code>, and delaboration is <code>Expr -&gt; Syntax</code>. In Lean 3 there didn't used to be Syntax and there indeed were unelaborated Exprs, but it doesn't work that way anymore.</p>",
        "id": 399183373,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1698611468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399182462\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"when written out\"?</p>\n</blockquote>\n<p>a literal interpretation of <code>a + b</code> only contains <code>a,b</code>, and the <code>HAdd.hAdd</code> operator. That is what I mean</p>",
        "id": 399186958,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698615375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399183373\">said</a>:</p>\n<blockquote>\n<p>Elaboration is <code>Syntax -&gt; Expr</code>, and delaboration is <code>Expr -&gt; Syntax</code>. In Lean 3 there didn't used to be Syntax and there indeed were unelaborated Exprs, but it doesn't work that way anymore.</p>\n</blockquote>\n<p>so there's no intermediate stage between an <code>Expr</code> and <code>Syntax</code> now? Is there another way to determine if an argument can be inferred automatically in the delaborator?</p>",
        "id": 399186999,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698615426
    },
    {
        "content": "<p>The term you gave would be <code>@HAdd.hAdd a b</code>, which would be a type error; surely you'd want <code>@HAdd.hAdd _ _ _ _ a b</code>?</p>",
        "id": 399187463,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698615946
    },
    {
        "content": "<p>(in <code>Expr</code> there is no such thing as explicit vs implicit arguments; you always have to pass all of them)</p>",
        "id": 399187538,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698616010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399186958\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399182462\">said</a>:</p>\n<blockquote>\n<p>What do you mean by \"when written out\"?</p>\n</blockquote>\n<p>a literal interpretation of <code>a + b</code> only contains <code>a,b</code>, and the <code>HAdd.hAdd</code> operator. That is what I mean</p>\n</blockquote>\n<p>I think this assumption is the issue. Like Eric said, all <code>Expr</code>s should be type correct, and <code>HAdd.hAdd</code> takes 6 arguments, not 2. When the syntax <code>a + b</code> gets elaborated, it goes straight to the 6-argument version, but with metavariables for the instance and implicit arguments. These then get synthesized and inferred, respectively. (Which is also what Eric said, but just to be clear that this is the process Lean is doing. Unless there are shortcuts. But you can think of this as being the process anyway.)</p>",
        "id": 399191704,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698620370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399186999\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399183373\">said</a>:</p>\n<blockquote>\n<p>Elaboration is <code>Syntax -&gt; Expr</code>, and delaboration is <code>Expr -&gt; Syntax</code>. In Lean 3 there didn't used to be Syntax and there indeed were unelaborated Exprs, but it doesn't work that way anymore.</p>\n</blockquote>\n<p>so there's no intermediate stage between an <code>Expr</code> and <code>Syntax</code> now? Is there another way to determine if an argument can be inferred automatically in the delaborator?</p>\n</blockquote>\n<p>Likewise, the way you determine instance vs. implicit vs. explicit arguments is by looking at the type of the head of the expression, e.g. the type of <code>.const ``HAdd.hAdd _</code>. That type will be a <code>.forallE</code>, and it comes with a <code>.binderInfo</code> for its argument slot which tells you what kind of argument it should be. (You then need to look at the body to get another <code>.forallE</code> for the next argument, and so on.)</p>",
        "id": 399192001,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698620524
    },
    {
        "content": "<p>Though I’m wondering if this is a bit of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; is there something specific you want to extract this information for?</p>",
        "id": 399192109,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698620618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399192109\">said</a>:</p>\n<blockquote>\n<p>Though I’m wondering if this is a bit of an <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem; is there something specific you want to extract this information for?</p>\n</blockquote>\n<p>It isn't an xy problem because this data goes directly to train machine learning models</p>",
        "id": 399227182,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698642881
    },
    {
        "content": "<p>why don't you pass the <code>Syntax</code> to the ML model instead of a malformed <code>Expr</code>?</p>",
        "id": 399229935,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698645390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399229935\">said</a>:</p>\n<blockquote>\n<p>why don't you pass the <code>Syntax</code> to the ML model instead of a malformed <code>Expr</code>?</p>\n</blockquote>\n<p>because the syntax doesn't contain informations about which part is a function call and which part is a lambda, etc., and I think such information could help the ML model learn if it was available somewhere</p>",
        "id": 399230952,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698645948
    },
    {
        "content": "<p>why don't you pass the <code>Expr</code> to the ML model instead of a malformed <code>Expr</code>?</p>",
        "id": 399231095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698646023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399231095\">said</a>:</p>\n<blockquote>\n<p>why don't you pass the <code>Expr</code> to the ML model instead of a malformed <code>Expr</code>?</p>\n</blockquote>\n<p>this is what I have been doing. Im just wondering if there's a delaborated version</p>",
        "id": 399231233,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698646085
    },
    {
        "content": "<p>Delaboration produces syntax, but you can turn off pp options to make the syntax more expr-like if you need</p>",
        "id": 399232093,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1698646522
    },
    {
        "content": "<p>An option (which I use) is to write custom delaborators to add more information. This is done at <a href=\"https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/VerboseDelabs.lean\">https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/VerboseDelabs.lean</a> for example.</p>",
        "id": 399235774,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1698648684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399187463\">said</a>:</p>\n<blockquote>\n<p>The term you gave would be <code>@HAdd.hAdd a b</code>, which would be a type error; surely you'd want <code>@HAdd.hAdd _ _ _ _ a b</code>?</p>\n</blockquote>\n<p>this could also work. Is there a way to generate that?</p>",
        "id": 399236382,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698648998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399232093\">said</a>:</p>\n<blockquote>\n<p>Delaboration produces syntax, but you can turn off pp options to make the syntax more expr-like if you need</p>\n</blockquote>\n<p>This is what I have been doing with a custom parser to parse the prefixed delaboration result</p>",
        "id": 399236425,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698649023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266304\">@Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399235774\">said</a>:</p>\n<blockquote>\n<p>An option (which I use) is to write custom delaborators to add more information. This is done at <a href=\"https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/VerboseDelabs.lean\">https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/VerboseDelabs.lean</a> for example.</p>\n</blockquote>\n<p>Is the <code>(proof =: prop)</code> syntax there any different from the built-in <code>(proof : prop)</code>?</p>",
        "id": 399262768,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698659048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399262768\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"266304\">Siddhartha Gadgil</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399235774\">said</a>:</p>\n<blockquote>\n<p>An option (which I use) is to write custom delaborators to add more information. This is done at <a href=\"https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/VerboseDelabs.lean\">https://github.com/siddhartha-gadgil/LeanAide/blob/main/LeanAide/VerboseDelabs.lean</a> for example.</p>\n</blockquote>\n<p>Is the <code>(proof =: prop)</code> syntax there any different from the built-in <code>(proof : prop)</code>?</p>\n</blockquote>\n<p>I guess only that <code>prop</code> is guaranteed to be a proposition. This is to extract lemmas used in a (term) proof and their further premises, lemmas etc.</p>",
        "id": 399265997,
        "sender_full_name": "Siddhartha Gadgil",
        "timestamp": 1698659864
    },
    {
        "content": "<p>There’s also sometimes the possibility of reducing your <code>Expr</code>s first, e.g. turning <code>@HAdd.hAdd _ _ _ _ a b</code> into <code>Nat.add a b</code>. Not a universal solution, since not everything of this form can actually reduce, but just wanted to mention it in case it’s relevant for training.</p>",
        "id": 399367394,
        "sender_full_name": "Thomas Murrills",
        "timestamp": 1698695491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"548935\">Thomas Murrills</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399367394\">said</a>:</p>\n<blockquote>\n<p>There’s also sometimes the possibility of reducing your <code>Expr</code>s first, e.g. turning <code>@HAdd.hAdd _ _ _ _ a b</code> into <code>Nat.add a b</code>. Not a universal solution, since not everything of this form can actually reduce, but just wanted to mention it in case it’s relevant for training.</p>\n</blockquote>\n<p>Is there a function that can do this?</p>",
        "id": 399560232,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698769878
    },
    {
        "content": "<p>It is very unlikely that that is a thing you want to do. Approximately nothing in mathlib is stated about <code>Nat.add</code></p>",
        "id": 399569367,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1698773049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Delaborating.20an.20Expr.20object/near/399569367\">said</a>:</p>\n<blockquote>\n<p>It is very unlikely that that is a thing you want to do. Approximately nothing in mathlib is stated about <code>Nat.add</code></p>\n</blockquote>\n<p>Ah I remember this. I've asked about it before. Is there a way to turn <code>HAdd.hAdd Nat Nat inst... a b</code> into just <code>HAdd.hAdd _ _ _ _ a b</code>? i.e. replacing all the inferable arguments with <code>_</code></p>",
        "id": 399593487,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1698782483
    }
]