[
    {
        "content": "<p>Hi, I am new to Lean and have been going over <a href=\"https://github.com/IPDSnelting/tba-2021\">tba-2021</a> course slides and exercises. Exercise 6 of the course contains the following piece of code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">abbrev</span> <span class=\"n\">Map</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">Option</span> <span class=\"n\">β</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Map</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">update</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">Option</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n  <span class=\"k\">fun</span> <span class=\"n\">k'</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k'</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k'</span>\n\n<span class=\"n\">scoped</span> <span class=\"kd\">notation</span><span class=\"o\">:</span><span class=\"n\">max</span> <span class=\"n\">m</span> <span class=\"s2\">\"[\"</span> <span class=\"n\">k</span> <span class=\"s2\">\" ↦ \"</span> <span class=\"n\">v</span> <span class=\"s2\">\"]\"</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">update</span> <span class=\"n\">m</span> <span class=\"n\">k</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">apply_update</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">update</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>I tried to prove <code>apply_update</code> theorem without using tactics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">apply_update'</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"k\">from</span>\n  <span class=\"n\">eq_self</span> <span class=\"n\">k</span> <span class=\"bp\">▸</span> <span class=\"n\">ite_true</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>However, I am getting this weird type mismatch error for <code>ite_true v (m k)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"n\">ite_true</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>I am confused, as the expected and actual type are exactly the same. Could someone expalin why I am getting this error and how to resolve it?</p>\n<p>P.S. I am using the latest nightly version of Lean4.</p>",
        "id": 252040496,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1630806124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417967\">@Abdalrhman M Mohamed</span> <br>\nIf you use the option <code>set_option pp.all true</code> before <code>apply_update'</code>, we get an error message in full detail.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">ite_true.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">True</span> <span class=\"n\">instDecidableTrue</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">Eq.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ite.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Option.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">True</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>Note that the implicit arguments are different.</p>",
        "id": 252041121,
        "sender_full_name": "Leonardo de Moura",
        "timestamp": 1630806938
    },
    {
        "content": "<p>hmm... I see. Thanks for the quick reply!</p>",
        "id": 252041484,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1630807310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"417967\">Abdalrhman M Mohamed</span> has marked this topic as resolved.</p>",
        "id": 252041553,
        "sender_full_name": "Notification Bot",
        "timestamp": 1630807350
    },
    {
        "content": "<p>For the record, I managed to resolve the issue by adding 2 lemmas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ite_then</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">hnp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">ite_else</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hnp</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">p</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">s</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isTrue</span> <span class=\"n\">hp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">absurd</span> <span class=\"n\">hp</span> <span class=\"n\">hnp</span>\n  <span class=\"bp\">|</span> <span class=\"n\">isFalse</span> <span class=\"n\">hnp</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">apply_update'</span> <span class=\"o\">[</span><span class=\"n\">DecidableEq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">[</span><span class=\"n\">k</span> <span class=\"bp\">↦</span> <span class=\"n\">v</span><span class=\"o\">]</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"n\">v</span> <span class=\"k\">else</span> <span class=\"n\">m</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"k\">from</span>\n  <span class=\"n\">ite_then</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 252087859,
        "sender_full_name": "Abdalrhman M Mohamed",
        "timestamp": 1630860696
    }
]