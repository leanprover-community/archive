[
    {
        "content": "<p>What's the easiest way to copy the module name of the current file? Currently I have three ideas (mostly I've only done 1 and 2):</p>\n<ol>\n<li>\n<p>copy the file name (right click on the tab in VSCode and select \"Copy Relative Path\"), remove the trailing <code>.lean</code> and replace all <code>/</code> by <code>.</code>.</p>\n</li>\n<li>\n<p>maybe a module with a similar name exists among the imports of the file. Copy that and manually modify the last few bits.</p>\n</li>\n<li>\n<p>search a declaration in the file in the online docs and copy the title of the page.</p>\n</li>\n</ol>\n<p>Un-#xy: In Lean 3 if I want to build a file I can just copy the file name and run <code>lean &lt;file_name&gt;</code>, but in Lean 4 <code>lake build</code> demands a module name not a file name, hence the question. Of course I can now \"Restart File\" in VSCode, but build progress is not shown in the infoview and I can't estimate how long it would take. Maybe we could make <code>lake build</code> automatically turn a file name into a module name?</p>",
        "id": 401670733,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699842921
    },
    {
        "content": "<p>Does <code>lake env lean &lt;file_path&gt;</code> do what you want?</p>",
        "id": 401694266,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699855439
    },
    {
        "content": "<p>(btw, for other reasons, I also have a command-line function that converts a file path to a module name, i.e. removes trailing <code>.lean</code> and replaces <code>/</code> with <code>.</code>.)</p>",
        "id": 401696746,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699856949
    },
    {
        "content": "<p>The <code>lean4-cli</code> library has a special parser for module names that takes either variant.</p>",
        "id": 401700033,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699858995
    },
    {
        "content": "<p>If you want to open an issue, and tag it with <code>lake</code>, we might eventually get there. I agree it would be nice!</p>",
        "id": 401700064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699859021
    },
    {
        "content": "<p>In the meantime, if the paths that you copy begin with <code>Mathlib</code>, you can use this \"Try this\" suggestion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Tactic.TryThis</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Command</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">importMe</span>\n\n<span class=\"n\">syntax</span> <span class=\"n\">importPath</span> <span class=\"o\">:=</span> <span class=\"n\">sepBy1</span><span class=\"o\">(</span><span class=\"n\">ident</span><span class=\"o\">,</span> <span class=\"s2\">\"/\"</span><span class=\"o\">)</span>\n<span class=\"n\">syntax</span> <span class=\"s2\">\"Mathlib\"</span> <span class=\"s2\">\"/\"</span> <span class=\"o\">(</span><span class=\"n\">ppSpace</span> <span class=\"n\">colGt</span> <span class=\"n\">importPath</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n\n<span class=\"sd\">/--  A syntax that allows strings to be printed without surrounding them by guillemets `«...»`. -/</span>\n<span class=\"n\">declare_syntax_cat</span> <span class=\"n\">write_me_output_stx</span>\n\n<span class=\"n\">syntax</span> <span class=\"s2\">\"lake build \"</span> <span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">write_me_output_stx</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">toSuggestion</span> <span class=\"o\">(</span><span class=\"n\">root</span> <span class=\"o\">:</span> <span class=\"n\">String</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">parts</span> <span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">ident</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">TermElabM</span> <span class=\"o\">(</span><span class=\"n\">TSyntax</span> <span class=\"bp\">`</span><span class=\"n\">write_me_output_stx</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">strParts</span> <span class=\"o\">:=</span> <span class=\"n\">parts.map</span> <span class=\"k\">fun</span> <span class=\"n\">s</span> <span class=\"bp\">↦</span> <span class=\"n\">s.getId.toString</span> <span class=\"o\">(</span><span class=\"n\">escape</span> <span class=\"o\">:=</span> <span class=\"n\">false</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Rebuild the path and interpret it as a `System.FilePath`.</span>\n  <span class=\"k\">let</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">System.FilePath</span> <span class=\"o\">:=</span> <span class=\"n\">root</span> <span class=\"bp\">++</span> <span class=\"s2\">\"/\"</span> <span class=\"bp\">++</span> <span class=\"n\">String.intercalate</span> <span class=\"s2\">\"/\"</span> <span class=\"n\">strParts.toList</span>\n  <span class=\"k\">let</span> <span class=\"n\">impS</span> <span class=\"bp\">←</span> <span class=\"n\">Lean.moduleNameOfFileName</span> <span class=\"n\">path</span> <span class=\"n\">none</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">write_me_output_stx</span><span class=\"bp\">|</span> <span class=\"n\">lake</span> <span class=\"n\">build</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"n\">impS</span><span class=\"o\">))</span>\n\n<span class=\"n\">elab_rules</span> <span class=\"o\">:</span> <span class=\"n\">command</span>\n<span class=\"bp\">|</span> <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"bp\">|</span> <span class=\"n\">Mathlib</span><span class=\"bp\">/</span> <span class=\"bp\">$</span><span class=\"o\">[</span><span class=\"bp\">$</span><span class=\"n\">parts</span><span class=\"o\">]</span><span class=\"bp\">/*</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">liftTermElabM</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">stx</span> <span class=\"bp\">←</span> <span class=\"n\">getRef</span>\n  <span class=\"k\">let</span> <span class=\"n\">replacement</span> <span class=\"bp\">←</span> <span class=\"n\">toSuggestion</span> <span class=\"s2\">\"Mathlib\"</span> <span class=\"n\">parts</span>\n  <span class=\"n\">Std.Tactic.TryThis.addSuggestion</span> <span class=\"n\">stx</span> <span class=\"n\">replacement</span> <span class=\"o\">(</span><span class=\"n\">origSpan</span><span class=\"bp\">?</span> <span class=\"o\">:=</span> <span class=\"n\">stx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">importMe</span>\n\n<span class=\"n\">Mathlib</span><span class=\"bp\">/</span><span class=\"n\">Data</span><span class=\"bp\">/</span><span class=\"n\">Nat</span><span class=\"bp\">/</span><span class=\"n\">Basic.lean</span>\n<span class=\"c1\">-- Try this: lake build Mathlib.Data.Nat.Basic</span>\n</code></pre></div>",
        "id": 401703366,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699860933
    },
    {
        "content": "<p>So you copy-paste the relative <code>file/path.lean</code> in a lean file and you get the <code>Try this</code> suggestion for <code>lake build module.name</code>.</p>",
        "id": 401703521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699861004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/fastest.20way.20to.20copy.20module.20name.20of.20the.20current.20file.3F/near/401703366\">said</a>:</p>\n<blockquote>\n<p>In the meantime, if the paths that you copy begin with <code>Mathlib</code>, you can use this \"Try this\" suggestion <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n</blockquote>\n<p>Thanks! This works. <code>lake env lean &lt;file_path&gt;</code> apparently doesn't show progress, i.e. how many files are built and how many need to be built in total.</p>",
        "id": 401704619,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699861574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> I do not know what the difference between the two commands <code>lean module.name</code> and <code>lake env lean file/path.lean</code> is (and would be curious to know what it is!).</p>\n<p>Anyway, as Scott said, maybe there should be better support for the difference between <em>module</em> names and <em>file</em> names.  Currently, for me a combination of the command above and the commandline replacements have been convenient.</p>",
        "id": 401706778,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699862560
    },
    {
        "content": "<p>To remove potential mystery about the commandline stuff: I added this (bash) function to my environment</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>lb<span class=\"w\"> </span><span class=\"o\">()</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">  </span><span class=\"nb\">local</span><span class=\"w\"> </span><span class=\"nv\">var</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">1</span><span class=\"p\">//</span><span class=\"se\">\\/</span><span class=\"p\">/.</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\">      </span><span class=\"c1\"># replace `/` with `.`</span>\n<span class=\"w\">  </span>lake<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">var</span><span class=\"p\">%.lean</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\">   </span><span class=\"c1\"># do `lake build` on the replacement, after removing trailing `.lean`</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>so that typing <code>lb file/path.lean</code> means <code>lake build module.name</code>.</p>\n<p>This is just working on strings, so it actually also works with file/paths that do not begin with <code>Mathlib</code> as well.</p>",
        "id": 401710404,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1699863857
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover/lean4/blob/8cfcf7ce61bba328ed57d97bb12cf1a0fc40a0b9/src/Lean/Util/Path.lean#L128\">searchModuleNameOfFileName</a>. The important bit is that you need to know the search path.</p>",
        "id": 401713330,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1699864925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/270676-lean4/topic/fastest.20way.20to.20copy.20module.20name.20of.20the.20current.20file.3F/near/401670733\">said</a>:</p>\n<blockquote>\n<p>Maybe we could make <code>lake build</code> automatically turn a file name into a module name?</p>\n</blockquote>\n<p>I have the same request for <code>cache</code>!</p>",
        "id": 401797812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1699891592
    },
    {
        "content": "<p>For <code>lake build</code>, this is <a href=\"https://github.com/leanprover/lean4/pull/2756\">lean4#2756</a>. I don't think there are any major blockers but it doesn't seem to be a high priority. (As usual, you should upvote it if you want to raise the priority.)</p>",
        "id": 401857497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1699915342
    },
    {
        "content": "<p>I'm reminded of a side question I had by your extra feature request:</p>\n<blockquote>\n<p>Also, it would be good if this works even for files outside the module tree, such as <code>lake build test/ring.lean</code> for mathlib4. I am not sure there is any current option which this is equivalent to, but what it should do is build all the dependencies of the file (as specified in the import lines) and then call the equivalent of <code>lake env lean test/ring.lean</code>.</p>\n</blockquote>\n<p>With Lean 3 I used to be able to create a new file in VSCode without saving it to the disk, and as I type imports and declarations into it, Lean would immediately react to them (assuming I've opened a mathlib workspace). This is convenient when I want to investigate some <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> and don't want to save anything to the git repo and risk mistakenly committing the file, and VSCode does a good job restoring unsaved files across sessions.</p>\n<p>However with Lean 4 this no longer works: if I don't save it into the git repo (or maybe the directory governed by lakefile is more precise?) then Lean will just ignore it, so I tend to use the web editor for such temporary Lean coding now that it is up and functioning. Does the web editor secretly saves the file somewhere in a directory?</p>",
        "id": 401874597,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1699923548
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/270676-lean4/topic/fastest.20way.20to.20copy.20module.20name.20of.20the.20current.20file.3F/near/401797812\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/270676-lean4/topic/fastest.20way.20to.20copy.20module.20name.20of.20the.20current.20file.3F/near/401670733\">said</a>:</p>\n<blockquote>\n<p>Maybe we could make <code>lake build</code> automatically turn a file name into a module name?</p>\n</blockquote>\n<p>I have the same request for <code>cache</code>!</p>\n</blockquote>\n<p>This one you can implement yourself: <code>cache</code> is all in Mathlib.</p>",
        "id": 401903754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1699936023
    }
]