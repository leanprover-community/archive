[
    {
        "content": "<p>How come <code>let this</code> makes a local variable without a definition?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">//</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">let</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>It works with a different name.</p>",
        "id": 361992365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685377991
    },
    {
        "content": "<p>I think there's a general issue where <code>this</code> needs to be special cased leading to weird inconsistencies</p>",
        "id": 361993756,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1685378512
    },
    {
        "content": "<p>My understanding is that this is by design in some way</p>",
        "id": 361995262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1685378987
    },
    {
        "content": "<p>the weird inconsistencies are not by design, but they are a consequence of the design</p>",
        "id": 361997060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685379590
    },
    {
        "content": "<p>The design seems buggy.</p>",
        "id": 362003121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685381732
    },
    {
        "content": "<p><code>this</code> is a pseudo-keyword, which I suspect is the problem here.</p>",
        "id": 362052460,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685407274
    },
    {
        "content": "<p>For reference, the <code>this</code> keyword definition: <a href=\"https://github.com/leanprover/lean4/blob/5661b15e35285a4ed11e0d1d70a960117ea501a9/src/Init/Notation.lean#L499-L503\">https://github.com/leanprover/lean4/blob/5661b15e35285a4ed11e0d1d70a960117ea501a9/src/Init/Notation.lean#L499-L503</a></p>",
        "id": 362052720,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685407497
    },
    {
        "content": "<p>In fact, the whole point of that definition was to forbid bindings like <code>(this : Nat)</code>, but it doesn't work in the case of <code>let</code> presumably because <code>let</code> permits arbitrary terms in its LHS (which are in turn presumably expanded leading to the keyword <code>this</code> becoming the identifier <code>this</code> and the binding working as normal).</p>",
        "id": 362052968,
        "sender_full_name": "Mac Malone",
        "timestamp": 1685407686
    },
    {
        "content": "<blockquote>\n<p>In fact, the whole point of that definition was to forbid bindings like (this : Nat),</p>\n</blockquote>\n<p>That may be the <em>effect</em> but it wasn't the point of the design. The reason <code>this</code> was made a keyword was so that it does not participate in hygiene, so that <code> `(have := $e) =&gt; `(have this := $e)</code> does \"what you expect\". In practice I think the breakage far outweighs the benefit of being able to write this instead of <code> `(have $(mkIdent `this) := $e)</code> to explicitly make an unhygienic identifier</p>",
        "id": 362110867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685435955
    },
    {
        "content": "<p>FWIW what happened to me here was:</p>\n<ul>\n<li>originally wrote a <code>have := blah blah</code>, later use <code>this</code></li>\n<li>realize that I need to use the definition so change <code>have</code> to <code>let</code></li>\n<li><code>let := blah blah</code> isn't allowed any more for some reason so change it to <code>let this := blah blah</code></li>\n<li>it still doesn't work</li>\n<li>eventually notice that <code>let</code> isn't performing its actual function of making a definition...</li>\n</ul>",
        "id": 362112924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1685436473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/let.20this/near/362110867\">said</a>:</p>\n<blockquote>\n<p><code> `(have $(mkIdent `this) := $e)</code> to explicitly make an unhygienic identifier</p>\n</blockquote>\n<p>I think we've before gone through how that doesn't work in quoted tactics. The two consistent solution I can see are:</p>\n<ul>\n<li>tweak the current implementation by disallowing <code>this</code> in patterns, e.g. by making it an elaborator</li>\n<li>globally make <code>this</code> a special, hygiene-free identifier by specializing it in the hygiene algorithm</li>\n</ul>\n<p>The latter is closer to Lean 3's behavior as it allows <code>this</code> to be bound by anyone</p>",
        "id": 362117895,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685437758
    },
    {
        "content": "<blockquote>\n<p>I think we've before gone through how that doesn't work in quoted tactics.</p>\n</blockquote>\n<p>I don't think we have. Can you show an example?</p>",
        "id": 362119453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438147
    },
    {
        "content": "<p>(We have gone through this issue before but not issues with <code>mkIdent `this</code>)</p>",
        "id": 362119600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438173
    },
    {
        "content": "<blockquote>\n<p>The latter is closer to Lean 3's behavior as it allows <code>this</code> to be bound by anyone</p>\n</blockquote>\n<p>I disagree with this: <em>in lean 3 <code>this</code> was not special in any way</em>. It is just an identifier named <code>this</code>, that happened to be the default name used by some tactics. The reason for the unhygienic stuff was simply because <em>everything</em> is unhygienic in lean 3. But I do not believe that any solution that makes <code>this</code> special will work, because <code>this</code> is not the only variable name which has to deal with this issue. <code>h</code> and <code>H</code> are also used at various points in lean 3, and suffer from the same issues</p>",
        "id": 362120399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438379
    },
    {
        "content": "<p>I think that the <em>tactic</em> should be the one to opt in to hygiene-less behavior for a particular identifier. If <code>mkIdent `this</code> doesn't work, what about a no-hygiene hygiene you can put on an identifier? For example <code>unhygienicIdent `this</code> which expands to <code>this._@._unhygienic</code> and is handled appropriately by the hygiene manipulation functions</p>",
        "id": 362121139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/let.20this/near/362119453\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think we've before gone through how that doesn't work in quoted tactics.</p>\n</blockquote>\n<p>I don't think we have. Can you show an example?</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"have2\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">this2</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">have2</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this2</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">have2</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this2</span><span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span>  <span class=\"c1\">-- unknown identifier 'this2'</span>\n</code></pre></div>",
        "id": 362121424,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685438586
    },
    {
        "content": "<p>that's expected behavior though</p>",
        "id": 362121544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438611
    },
    {
        "content": "<p><code>foo</code> would need to do <code>mkIdent `this2</code> as well</p>",
        "id": 362121618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438627
    },
    {
        "content": "<p>this is a good thing, because in <code>foo</code> <code>this2</code> might be a regular variable</p>",
        "id": 362121809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438666
    },
    {
        "content": "<p>treating a variable as hygieneless should be opt-in</p>",
        "id": 362122075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438736
    },
    {
        "content": "<p>It doesn't look reasonable to me at all. We should expect tactic sequences to be liftable into macros without randomly breaking. I don't expect most users to be able to implement <code>have2</code>, but simple reuse like <code>foo</code> should ideally be accessible to anyone</p>",
        "id": 362122366,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685438811
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/let.20this/near/362121139\">said</a>:</p>\n<blockquote>\n<p>I think that the <em>tactic</em> should be the one to opt in to hygiene-less behavior for a particular identifier. If <code>mkIdent `this</code> doesn't work, what about a no-hygiene hygiene you can put on an identifier? For example <code>unhygienicIdent `this</code> which expands to <code>this._@._unhygienic</code> and is handled appropriately by the hygiene manipulation functions</p>\n</blockquote>\n<p>OTOH that sounds reasonable to me at a first glance</p>",
        "id": 362122398,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685438820
    },
    {
        "content": "<p>that would also not fix the example you just showed, since <code>this2</code> in <code>foo</code> is a regular identifier and would get hygiened separately</p>",
        "id": 362122751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438909
    },
    {
        "content": "<p>In practice I really don't see your example as being an issue. We would just tell someone confused about the situation to use <code>have this := ...</code> instead of <code>have := ...</code> in <code>foo</code></p>",
        "id": 362123084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685438994
    },
    {
        "content": "<p>having <code>this</code> be poisoned as a variable name in the rest of <code>foo</code> sounds like a bigger issue</p>",
        "id": 362123355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685439055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/let.20this/near/362122751\">said</a>:</p>\n<blockquote>\n<p>that would also not fix the example you just showed, since <code>this2</code> in <code>foo</code> is a regular identifier and would get hygiened separately</p>\n</blockquote>\n<p>It depends on whether you strip off macro scopes before checking whether a reference has a corresponding <code>unhygienic</code> binding, which I assumed we would do</p>",
        "id": 362123461,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685439079
    },
    {
        "content": "<p>I believe this would also be the approach closest to how anaphoric macros work in Scheme languages</p>",
        "id": 362123548,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685439098
    },
    {
        "content": "<p>I guess I don't know the name resolution mechanism you have in mind then</p>",
        "id": 362123908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685439182
    },
    {
        "content": "<p>Any identifier syntactically equal to <code>X</code>, whether it was later applied macro scopes or not, would bind to <code>X._@._unhygienic</code> if it exists. Introducing such a binding would effectively deactivate hygiene for that identifier</p>",
        "id": 362125732,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685439644
    },
    {
        "content": "<p>so if you have <code>fun (X : A) (X._@._unhygienic : B) (X._@.Foo.0 : C) =&gt; ...</code></p>\n<ul>\n<li><code>... =&gt; X</code> resolves to <code>A -&gt; B -&gt; C -&gt; B</code></li>\n<li><code>... =&gt; X._@._unhygienic</code> resolves to <code>A -&gt; B -&gt; C -&gt; B</code></li>\n<li><code>... =&gt; X._@.Foo.0</code> resolves to <code>A -&gt; B -&gt; C -&gt; C</code></li>\n<li><code>... =&gt; X._@.Foo.1</code> resolves to <code>A -&gt; B -&gt; C -&gt; B</code></li>\n</ul>",
        "id": 362126552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685439842
    },
    {
        "content": "<p>Probably, yeah. Not that we have a use case for using <code>unhygienic</code> on references like in the second case yet</p>",
        "id": 362128151,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685440225
    },
    {
        "content": "<p>true</p>",
        "id": 362128259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685440258
    },
    {
        "content": "<p>it can probably come up though when uses are both a binding and a use</p>",
        "id": 362128347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685440279
    },
    {
        "content": "<p>Which in itself is rare :)</p>",
        "id": 362129700,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685440591
    },
    {
        "content": "<p>it does still break things like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"have2\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">have2</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span> <span class=\"n\">this</span>\n</code></pre></div>\n<p>if we wanted the <code>exact $e</code> use to skip the <code>have2 1</code> binding</p>",
        "id": 362129985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685440670
    },
    {
        "content": "<p>Last time we talked about this I recall us discussing a way to capture just the macro scope without parsing an identifier. That is sufficient to cover <code>have this :=</code> style tactics without any need for unhygienic idents</p>",
        "id": 362130762,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685440863
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"have2\"</span> <span class=\"n\">sc</span><span class=\"o\">:</span><span class=\"n\">macroScope</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">sc.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">this</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 362131129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685440947
    },
    {
        "content": "<p>Right, this might even be the most natural one to implement. Nothing more fundamental than the quotation elaborator would have to be changed</p>",
        "id": 362133719,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685441572
    },
    {
        "content": "<p>So effectively we would inject <code>this</code> into the calling lexical scope, not all scopes</p>",
        "id": 362134180,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685441701
    },
    {
        "content": "<p>boom, this is working error free:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">macro</span> <span class=\"s2\">\"have2\"</span> <span class=\"n\">sc</span><span class=\"o\">:</span><span class=\"n\">macroScope</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"k\">have</span> <span class=\"bp\">$</span><span class=\"o\">(</span><span class=\"n\">sc.mkIdent</span> <span class=\"bp\">`</span><span class=\"n\">this2</span><span class=\"o\">):</span><span class=\"n\">ident</span> <span class=\"o\">:=</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">have2</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this2</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"foo\"</span>  <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">have2</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">this2</span><span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">foo</span>\n\n<span class=\"n\">macro</span> <span class=\"s2\">\"bar\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"bp\">`</span><span class=\"o\">(</span><span class=\"n\">tactic</span><span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">have2</span> <span class=\"o\">()</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">$</span><span class=\"n\">e</span><span class=\"o\">))</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">this2</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">bar</span> <span class=\"n\">this2</span>\n</code></pre></div>",
        "id": 362147532,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685444872
    },
    {
        "content": "<p>the way it works is that the <code>macroScope</code> parser just generates <code>mkNode `macroScope #[mkIdent .anonymous]</code>, more or less. Amusingly, the quotation parser didn't even need to be changed, since it sees the ident node and marks it up just like any other</p>",
        "id": 362148446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685445112
    },
    {
        "content": "<p>I think you'll get into trouble with <code>Syntax.reprint</code> this way (and the pretty printer, but that one we could of course override), that's why I wanted to avoid the ident</p>",
        "id": 362151784,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685445932
    },
    {
        "content": "<p>But perhaps changing <code>reprint</code> is the path of least resistance</p>",
        "id": 362151839,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685445954
    },
    {
        "content": "<p>the pretty printer is fine, the formatter and parenthesizer implementations for the <code>macroScope</code> parser are the same as for <code>pushNone</code></p>",
        "id": 362153116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685446261
    },
    {
        "content": "<p>for <code>reprint</code> I think it's also fine, because the ident has empty leading &amp; trailing info and also has an empty <code>rawVal</code></p>",
        "id": 362153232,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685446291
    },
    {
        "content": "<p>I'm not exactly sure what happens if you use a syntax pattern match and ignore the macroScope arg though</p>",
        "id": 362154141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685446521
    },
    {
        "content": "<p>experimentally, it looks like it matches the macroScope against <code>.anonymous</code> after erasing macro scopes, which is always true so I guess this is fine</p>",
        "id": 362154928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685446735
    },
    {
        "content": "<p>Oh yes, I somehow didn't think of <code>rawVal</code>. Sounds good.</p>",
        "id": 362170203,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1685450330
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/leanprover/lean4/pull/2246\">lean4#2246</a> is merged, <code>this</code> is once more a variable name, and we can finally remove the mathlib hacks and uses of <code>«this»</code></p>",
        "id": 363067791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1685715874
    }
]