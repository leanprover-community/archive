[
    {
        "content": "<p>I have the following code matching a type constructed from a lot of <code>Sum</code>s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">crsElemsI</span> <span class=\"o\">(</span><span class=\"n\">idx</span> <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n_var</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n_var</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n_stmt</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n_wit</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">match</span> <span class=\"n\">idx</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inl</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">_</span><span class=\"o\">))</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">_</span><span class=\"o\">)))</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">i</span><span class=\"o\">))))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inl</span> <span class=\"n\">_</span><span class=\"o\">)))))</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">17</span>\n    <span class=\"bp\">|</span> <span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"o\">(</span><span class=\"n\">Sum.inr</span> <span class=\"n\">i</span><span class=\"o\">)))))</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>Is  there any way to write this without quadratically many characters in the number of ⊕? Or a way of generating the cases automatically?</p>",
        "id": 402359554,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700097893
    },
    {
        "content": "<p>How do you choose the output?  Why does it change from being the number of <code>inr</code> to something else?</p>",
        "id": 402360502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1700098379
    },
    {
        "content": "<p>The output for each case is a particular hard coded value set by the protocol I am analyzing. I currently am defining a type using this sequence of <code>Sum</code>s so that I can capture this particular index space of 3 + n_var + (n_var-1) + n_stmt + n_wit values. I could make this just a list of this length, but then it will be more complicated to map which index corresponds to which index of the list.</p>",
        "id": 402361332,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700098861
    },
    {
        "content": "<p>Basically , the adversary is allowed to provide a vector of this length <code>3 + n_var + (n_var-1) + n_stmt + n_wit</code>, and so I would like to provide a type for vectors of this length, while still respecting the structure of which elements of the vector are conceptually grouped together.</p>",
        "id": 402361560,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700098987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/270676-lean4/topic/Long.20match.20of.20.60Sum.60s/near/402360502\">said</a>:</p>\n<blockquote>\n<p>How do you choose the output?  Why does it change from being the number of <code>inr</code> to something else?</p>\n</blockquote>\n<p>What I wrote above is not my actual example, this is an MWE designed to import as little as possible. In reality the output type should be a type of MVPolynomials. The critical thing is that it's different for each case, and potentially depends on the subindex <code>i</code></p>",
        "id": 402361993,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700099250
    },
    {
        "content": "<blockquote>\n<p>Is there any way to write this without quadratically many characters in the number of ⊕? </p>\n</blockquote>\n<p>Yes, nest matches linearly</p>",
        "id": 402362350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700099433
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">crsElemsI</span>  <span class=\"o\">:</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Unit</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n_var</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"o\">(</span><span class=\"n\">n_var</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n_stmt</span> <span class=\"bp\">⊕</span> <span class=\"n\">Fin</span> <span class=\"n\">n_wit</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span>\n  <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span>\n  <span class=\"n\">Sum.elim</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"mi\">17</span><span class=\"o\">)</span> <span class=\"bp\">&lt;|</span> <span class=\"k\">fun</span> <span class=\"n\">i</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">i</span>\n</code></pre></div>",
        "id": 402362594,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1700099584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/270676-lean4/topic/Long.20match.20of.20.60Sum.60s/near/402362350\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there any way to write this without quadratically many characters in the number of ⊕? </p>\n</blockquote>\n<p>Yes, nest matches linearly</p>\n</blockquote>\n<p>Good point. I suppose I thought the technically-styled version of that would indent each line once more than the last and use a quadratic number of whitespace characters, but this version looks very nice!</p>",
        "id": 402362792,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1700099690
    }
]