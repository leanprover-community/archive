[
    {
        "content": "<p>Can someone explain why I'm getting this error in the last example? Clearly my metaprogramming skills are still horrendous.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Std.Logic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Expr</span> <span class=\"n\">Meta</span>\n\n<span class=\"c\">/-</span>\n<span class=\"cm\">Ensures that `goal` and `e` are proofs of some proposition.</span>\n<span class=\"cm\">If both have the form `∀ x : myType, _`, this should do, effectively, `refine forall_imp ?_ e`.</span>\n<span class=\"cm\">-/</span>\n<span class=\"kd\">def</span> <span class=\"n\">peelForall</span> <span class=\"o\">(</span><span class=\"n\">goal</span> <span class=\"o\">:</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">MVarId</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">goal.withContext</span> <span class=\"k\">do</span>\n    <span class=\"k\">let</span> <span class=\"n\">ty</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">inferType</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n    <span class=\"k\">let</span> <span class=\"n\">target</span> <span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">goal.getType</span><span class=\"o\">)</span>\n    <span class=\"c1\">-- check that everything is a `Prop`</span>\n    <span class=\"n\">unless</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">ty</span><span class=\"o\">)</span> <span class=\"bp\">&amp;&amp;</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">isProp</span> <span class=\"n\">target</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n      <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"`peelForall` only works for propositions\"</span>\n      <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n    <span class=\"c1\">-- match `ty` and `target` as `∀` expressions.</span>\n    <span class=\"k\">match</span> <span class=\"n\">ty</span><span class=\"o\">,</span> <span class=\"n\">target</span> <span class=\"k\">with</span>\n      <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">n₁</span> <span class=\"n\">t₁</span> <span class=\"n\">b₁</span> <span class=\"n\">c₁</span><span class=\"o\">,</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">_</span> <span class=\"n\">t₂</span> <span class=\"n\">b₂</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"matched forall expressions\"</span>\n        <span class=\"c1\">-- make sure they are quantified over the same type</span>\n        <span class=\"n\">unless</span> <span class=\"bp\">←</span> <span class=\"n\">isDefEq</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">whnfR</span> <span class=\"n\">t₂</span><span class=\"o\">)</span> <span class=\"k\">do</span>\n          <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"forall statements don't have the same type\"</span>\n          <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n        <span class=\"n\">withLocalDecl</span> <span class=\"n\">n₁</span> <span class=\"n\">c₁</span> <span class=\"n\">t₁</span> <span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n          <span class=\"k\">let</span> <span class=\"n\">type₁</span> <span class=\"o\">:=</span> <span class=\"n\">b₁.instantiate1</span> <span class=\"n\">x</span>\n          <span class=\"k\">let</span> <span class=\"n\">type₂</span> <span class=\"o\">:=</span> <span class=\"n\">b₂.instantiate1</span> <span class=\"n\">x</span>\n          <span class=\"c1\">-- apply `forall_imp` and return the resulting goal list.</span>\n          <span class=\"k\">let</span> <span class=\"n\">all_imp</span> <span class=\"bp\">←</span> <span class=\"n\">mkFreshExprMVar</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkForallFVars</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkArrow</span> <span class=\"n\">type₁</span> <span class=\"n\">type₂</span><span class=\"o\">))</span>\n          <span class=\"n\">goal.assign</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">mkAppM</span> <span class=\"bp\">``</span><span class=\"n\">forall_imp</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">all_imp</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">])</span>\n          <span class=\"n\">return</span><span class=\"o\">[</span><span class=\"n\">all_imp.mvarId</span><span class=\"bp\">!</span><span class=\"o\">]</span>\n      <span class=\"bp\">|</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n        <span class=\"c1\">-- if they aren't `forall` expressions, error.</span>\n        <span class=\"n\">dbg_trace</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"couldn't match forall expressions\"</span>\n        <span class=\"n\">return</span> <span class=\"o\">[</span><span class=\"n\">goal</span><span class=\"o\">]</span>\n\n<span class=\"n\">elab</span> <span class=\"s2\">\"peel\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">peelForall</span> <span class=\"bp\">·</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h₁</span>\n  <span class=\"n\">done</span>\n  <span class=\"c1\">-- the above works as expected.</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span>\n  <span class=\"c1\">-- success</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">refine</span> <span class=\"n\">forall_imp</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hp</span>\n  <span class=\"n\">refine</span> <span class=\"n\">forall_imp</span> <span class=\"bp\">?</span><span class=\"n\">_</span> <span class=\"n\">hp</span>\n  <span class=\"c1\">-- this is what I expect to happen below, but it fails.</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">w</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">q</span> <span class=\"n\">w</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">q</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">peel</span> <span class=\"n\">h</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span> <span class=\"n\">hp</span>\n  <span class=\"n\">peel</span> <span class=\"n\">hp</span> <span class=\"c1\">-- unknown identifier `hp`</span>\n  <span class=\"c1\">-- what did I do wrong?</span>\n  <span class=\"gr\">sorry</span>\n  <span class=\"n\">done</span>\n</code></pre></div>",
        "id": 396131891,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697043394
    },
    {
        "content": "<p>I wonder if you should embrace that <code>e</code> should be an <code>ident</code> and go via <code>getId</code> and finding the corresponding LocalDecl.  It seems that newly introduced decls are ignored, even with the <code>withContext</code>.  Anyway, I can't properly debug this now, sorry!</p>",
        "id": 396137470,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1697045686
    },
    {
        "content": "<p>Well, it would be nice to supply a term as well, not just something from the local context, which is why I was taking this approach.</p>",
        "id": 396137579,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697045730
    },
    {
        "content": "<p>It's a context issue again, I think:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">elab</span> <span class=\"s2\">\"peel\"</span> <span class=\"n\">e</span><span class=\"o\">:</span><span class=\"n\">term</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Elab.Tactic.withMainContext</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"bp\">←</span> <span class=\"n\">Elab.Term.elabTerm</span> <span class=\"n\">e</span> <span class=\"n\">none</span>\n  <span class=\"n\">Elab.Tactic.liftMetaTactic</span> <span class=\"o\">(</span><span class=\"n\">peelForall</span> <span class=\"bp\">·</span> <span class=\"n\">e</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 396141699,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1697047590
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 396142343,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1697047892
    }
]