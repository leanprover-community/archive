[
    {
        "content": "<p>Hello, everyone. Please help to understand how to achieve my goal when I'm in that circunstance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">reverse_reverse</span> <span class=\"o\">:</span>\n  <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse</span><span class=\"o\">,</span> <span class=\"n\">reverse</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">reverse</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span>\n        <span class=\"n\">append</span><span class=\"o\">,</span>\n        <span class=\"n\">reverse</span><span class=\"o\">,</span>\n        <span class=\"n\">reverse</span><span class=\"o\">,</span>\n        <span class=\"n\">append</span>\n      <span class=\"o\">]</span>\n      <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"c1\">-- from the fact i'm on case reverse x = nil?!</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>At that last point my goal has change automatically <code>reverse xs</code> to <code>nil</code>, but I have already <code>h : reverse (reverse xs) = l</code> and do not update too. Could you help me please? Thanks!</p>",
        "id": 392214316,
        "sender_full_name": "Isaac Lourenço",
        "timestamp": 1695247821
    },
    {
        "content": "<p>Can you make that into a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> -- I assume <code>reverse</code> is maybe <code>List.reverse</code> (and <code>l</code> a <code>List Something</code>)? But even with that your example doesn't seem to compile for me.</p>",
        "id": 392214755,
        "sender_full_name": "Julian Berman",
        "timestamp": 1695248102
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">ListNat</span> <span class=\"n\">where</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"n\">deriving</span> <span class=\"n\">Repr</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ListNat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">append</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">cons</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">reverse</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span> <span class=\"bp\">→</span> <span class=\"n\">ListNat</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">nil</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">append</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ListNat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">reverse_nil</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">nil</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">reverse_reverse</span> <span class=\"o\">:</span>\n  <span class=\"n\">reverse</span> <span class=\"o\">(</span><span class=\"n\">reverse</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span>\n  <span class=\"n\">induction</span> <span class=\"n\">l</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse</span><span class=\"o\">,</span> <span class=\"n\">reverse</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"n\">a</span> <span class=\"n\">xs</span> <span class=\"n\">h</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">reverse</span><span class=\"o\">]</span>\n    <span class=\"n\">cases</span> <span class=\"n\">reverse</span> <span class=\"n\">xs</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span>\n         <span class=\"n\">append</span><span class=\"o\">,</span>\n         <span class=\"n\">reverse</span><span class=\"o\">,</span>\n         <span class=\"n\">reverse</span><span class=\"o\">,</span>\n         <span class=\"n\">append</span>\n       <span class=\"o\">]</span>\n       <span class=\"gr\">sorry</span>\n       <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">reverse</span> <span class=\"n\">xs</span> <span class=\"bp\">=</span> <span class=\"n\">nil</span> <span class=\"o\">:=</span> <span class=\"c1\">-- from the fact i'm on case reverse x = nil :(</span>\n    <span class=\"bp\">|</span>  <span class=\"n\">cons</span> <span class=\"n\">n</span> <span class=\"n\">l'</span> <span class=\"bp\">=&gt;</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 392214965,
        "sender_full_name": "Isaac Lourenço",
        "timestamp": 1695248238
    },
    {
        "content": "<blockquote>\n<p>Can you make that into a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>Sorry about that, It is the first time I'm doing something like that here.</p>",
        "id": 392215133,
        "sender_full_name": "Isaac Lourenço",
        "timestamp": 1695248349
    },
    {
        "content": "<p>Using <code>cases h' : reverse xs with</code> instead of <code>cases reverse xs with</code> will help, probably. Then you can <code>rw [h'] at h</code>.</p>",
        "id": 392250969,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1695273937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560720\">Isaac Marlon da Silva Lourenço</span> has marked this topic as resolved.</p>",
        "id": 392290578,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695291165
    }
]