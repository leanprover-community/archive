[
    {
        "content": "<p>After debugging some typeclass performance issue with Jannis yesterday I decided to write a little flamegraph visualization tool that might be helpful for people debugging performance related things to their typeclass synthesis. There are a couple of examples in the README on how you might use it. Sadly it turned out that TC synthesis does not lend itself perfectly well to the flamegraph visualization because queries usually don't go too deep but thanks to the search feature you can still use it for things like:</p>\n<ul>\n<li>\"Am I being slowed down by lots of failing queries?\"</li>\n<li>\"Do I keep synthesizing the same goals goals and might want to apply the specialization trick for them?\"</li>\n</ul>\n<p>And hopefully other things people more well versed with the TC system than me can make use of^^ Have fun!</p>\n<p><a href=\"https://github.com/hargoniX/FlameTC\">https://github.com/hargoniX/FlameTC</a></p>",
        "id": 344553949,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1679778031
    },
    {
        "content": "<p>This is nice, it would be great to get a general \"component-wise\" view of a Lean execution instead of the function-wise view we get from generic profilers. We already have a concept of such components with <code>--profile</code>, just not yet with output of start/stop time pairs.</p>",
        "id": 344680222,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679843972
    },
    {
        "content": "<p>TC synthesis, as you noticed, is a bit unique because tabled resolution is an iterative algorithm in contrast to most other algorithms that are recursive, which gives rise to a natural visualization of nesting.</p>",
        "id": 344680354,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1679844010
    },
    {
        "content": "<p>Thanks to: <a href=\"https://github.com/leanprover/lean4/pull/2181\">https://github.com/leanprover/lean4/pull/2181</a> and some modifications on FlameTC we can now properly profile not only type class synthesis but the elaboration procedure in general: <a href=\"https://github.com/hargoniX/Flame#example\">https://github.com/hargoniX/Flame#example</a>. Note that there are things that this trace does not show (yet) such as for example the time it takes for declarations to compile and how long they spend in each of the compiler passes.</p>",
        "id": 348664964,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681291068
    },
    {
        "content": "<p>I wonder how hard it would be to integrate such a flamegraph in a vscode widget</p>",
        "id": 348675114,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1681293079
    },
    {
        "content": "<p>I dont really know anything about vscode widgets but in principle the flamegraph that <a href=\"http://flamegraph.pl\">flamegraph.pl</a> produces is just an SVG and the stuff from speedscope might even be embeddable via an iframe?</p>",
        "id": 348677294,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1681293570
    },
    {
        "content": "<p>Finally got around trying it out and it is amazing! Thanks a lot for it, now I have to figure out why is my file spending 90% time on <code>NegZeroClass.toNeg =?= SubNegMonoid.toNeg</code> :)</p>",
        "id": 355626590,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683157915
    },
    {
        "content": "<p>Btw you can display image in the info view simply as </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ProofWidgets.Component.HtmlDisplay</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ProofWidgets</span> <span class=\"n\">Jsx</span>\n\n<span class=\"bp\">#</span><span class=\"n\">html</span> <span class=\"bp\">&lt;</span><span class=\"n\">img</span> <span class=\"n\">src</span><span class=\"bp\">=</span><span class=\"s2\">\"https://hips.hearstapps.com/hmg-prod/images/dog-puppy-on-garden-royalty-free-image-1586966191.jpg\"</span><span class=\"bp\">/&gt;</span>\n</code></pre></div>\n<p>but pointing to a file on a disk does not seem to work for me</p>",
        "id": 355627225,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683158392
    },
    {
        "content": "<p>I would be much more interested in having a widget that opens up <a href=\"https://www.speedscope.app/\">https://www.speedscope.app/</a> instead of displaying the svg generated with FlameGraph. I found the svg completely useless.</p>",
        "id": 355627500,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683158527
    },
    {
        "content": "<p>I wrote a short command that allows you to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"n\">profile_file</span> <span class=\"n\">SciLean.Core.RealFunctions</span>\n</code></pre></div>\n<p>where you specify the file the same way as with <code>import</code>.</p>\n<p>It runs the profiler and opens up speedscope for you:</p>\n<p><a href=\"/user_uploads/3121/oKfVJgSNMgO7iQB_Yi_IFsUY/Screenshot-from-2023-05-04-14-27-01.png\">Screenshot-from-2023-05-04-14-27-01.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/oKfVJgSNMgO7iQB_Yi_IFsUY/Screenshot-from-2023-05-04-14-27-01.png\" title=\"Screenshot-from-2023-05-04-14-27-01.png\"><img src=\"/user_uploads/3121/oKfVJgSNMgO7iQB_Yi_IFsUY/Screenshot-from-2023-05-04-14-27-01.png\"></a></div>",
        "id": 355856769,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683224976
    },
    {
        "content": "<p>The code</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">System</span> <span class=\"n\">IO</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">profileFile</span> <span class=\"o\">(</span><span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">flame</span> <span class=\"o\">:</span> <span class=\"n\">FilePath</span> <span class=\"o\">:=</span> <span class=\"s2\">\"/home/tskrivan/Documents/Flame/build/bin/flame\"</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">compile_output</span> <span class=\"bp\">←</span> <span class=\"n\">IO.Process.output</span> <span class=\"o\">{</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"lake\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"env\"</span><span class=\"o\">,</span> <span class=\"s2\">\"lean\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-D\"</span><span class=\"o\">,</span> <span class=\"s2\">\"trace.profiler=true\"</span><span class=\"o\">,</span> <span class=\"s2\">\"-D\"</span><span class=\"o\">,</span> <span class=\"s2\">\"pp.oneline=true\"</span><span class=\"o\">,</span> <span class=\"n\">file.toString</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">compile_output.exitCode</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.Error.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Error: Failed to compile {file}</span><span class=\"se\">\\n\\n</span><span class=\"s2\">{compile_output.stderr}\"</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">flame_run</span> <span class=\"bp\">←</span> <span class=\"n\">Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"n\">flame.toString</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"n\">compile_output.stdout</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">flame_run.takeStdin</span>\n  <span class=\"n\">stdin.putStr</span> <span class=\"n\">compile_output.stdout</span>\n  <span class=\"n\">stdin.flush</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"n\">child.stdout.readToEnd</span> <span class=\"n\">Task.Priority.dedicated</span>\n  <span class=\"k\">let</span> <span class=\"n\">stderr</span> <span class=\"bp\">←</span> <span class=\"n\">child.stderr.readToEnd</span>\n  <span class=\"k\">let</span> <span class=\"n\">exitCode</span> <span class=\"bp\">←</span> <span class=\"n\">child.wait</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.ofExcept</span> <span class=\"n\">stdout.get</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">exitCode</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.Error.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Error: Failed to run flame</span><span class=\"se\">\\n\\n</span><span class=\"s2\">{stderr}\"</span><span class=\"o\">)</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">speedscope_run</span> <span class=\"bp\">←</span> <span class=\"n\">Process.spawn</span> <span class=\"o\">{</span>\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stdout</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">stderr</span> <span class=\"o\">:=</span> <span class=\"bp\">.</span><span class=\"n\">piped</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">:=</span> <span class=\"s2\">\"speedscope\"</span>\n    <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"-\"</span><span class=\"o\">]</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">let</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">,</span> <span class=\"n\">child</span><span class=\"o\">)</span> <span class=\"bp\">←</span> <span class=\"n\">speedscope_run.takeStdin</span>\n  <span class=\"n\">stdin.putStr</span> <span class=\"n\">stdout</span>\n  <span class=\"n\">stdin.flush</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.asTask</span> <span class=\"n\">child.stdout.readToEnd</span> <span class=\"n\">Task.Priority.dedicated</span>\n  <span class=\"k\">let</span> <span class=\"n\">stderr</span> <span class=\"bp\">←</span> <span class=\"n\">child.stderr.readToEnd</span>\n  <span class=\"k\">let</span> <span class=\"n\">exitCode</span> <span class=\"bp\">←</span> <span class=\"n\">child.wait</span>\n  <span class=\"k\">let</span> <span class=\"n\">stdout</span> <span class=\"bp\">←</span> <span class=\"n\">IO.ofExcept</span> <span class=\"n\">stdout.get</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">exitCode</span> <span class=\"bp\">!=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span>\n    <span class=\"n\">throw</span> <span class=\"o\">(</span><span class=\"n\">IO.Error.userError</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"Error: Failed to run speedscope</span><span class=\"se\">\\n\\n</span><span class=\"s2\">{stderr}\"</span><span class=\"o\">)</span>\n\n\n\n<span class=\"n\">elab</span> <span class=\"s2\">\" #profile_file \"</span> <span class=\"n\">path</span><span class=\"o\">:</span><span class=\"n\">ident</span> <span class=\"o\">:</span> <span class=\"n\">command</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n\n  <span class=\"k\">let</span> <span class=\"n\">file</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">IO.currentDir</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">path.getId.toString.replace</span> <span class=\"s2\">\".\"</span> <span class=\"n\">FilePath.pathSeparator.toString</span> <span class=\"bp\">++</span> <span class=\"s2\">\".lean\"</span><span class=\"o\">)</span>\n\n  <span class=\"n\">profileFile</span> <span class=\"n\">file</span>\n</code></pre></div>",
        "id": 355856909,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683225005
    },
    {
        "content": "<p>Few points:</p>\n<ul>\n<li>Path to flame is effectively hardcoded there. Anyone has an idea what would be a good way to provide path to flame?</li>\n<li>You need to have speedscope installed locally. You can do this with <code>npm install -g speedscope</code></li>\n<li>The command <code>#profile_file</code> opens up speedscope each time it is elaborated, effectively each time you make a change to the file. This is really annoying, what would be a good way to run it only once?</li>\n</ul>",
        "id": 355857607,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683225196
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"346070\">Tomas Skrivan</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/355857607\">said</a>:</p>\n<blockquote>\n<ul>\n<li>The command <code>#profile_file</code> opens up speedscope each time it is elaborated, effectively each time you make a change to the file. This is really annoying, what would be a good way to run it only once?</li>\n</ul>\n</blockquote>\n<p>I guess you could make it a widget, such that when you put your cursor over <code>#profile_file</code> there is a widget with an \"open speedscope\" button</p>",
        "id": 355864520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683227150
    },
    {
        "content": "<p>Good point, I will probably turn it into a widget but I'm mostly using emacs ...</p>",
        "id": 355867484,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683228194
    },
    {
        "content": "<p>A more low tech approach is to have <code>#profile_file</code> do nothing and <code>#profile_file!</code> open the thing, and just add or remove the character to trigger it</p>",
        "id": 355867794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683228305
    },
    {
        "content": "<p>or equivalently, comment / uncomment the line if you have an easy key command for that</p>",
        "id": 355867869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1683228338
    },
    {
        "content": "<p>Good idea with <code>!</code>! </p>\n<p>Also I want to have <code>#profile_this_file</code> but I need to some how break the recursion and I'm having issues using options.</p>",
        "id": 355868183,
        "sender_full_name": "Tomas Skrivan",
        "timestamp": 1683228427
    },
    {
        "content": "<p>Cool! Also if you happen to find more things that you want us to trace just say here</p>",
        "id": 355875624,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683230986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395550\">@Henrik Böving</span> does FlameTC usually take a very long time? It's been several minutes on a relatively small file, I have a hunch that it's on an infinite loop <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 357590879,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683812584
    },
    {
        "content": "<p>Either that or the pretty printer is choking on some large terms.</p>",
        "id": 357591022,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683812614
    },
    {
        "content": "<p>What's the file?</p>",
        "id": 357591065,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683812627
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357591065\">said</a>:</p>\n<blockquote>\n<p>What's the file?</p>\n</blockquote>\n<p><a href=\"/user_uploads/3121/1ui1hELmcUE8fybbTVcm7HyG/trace.txt\">trace.txt</a></p>",
        "id": 357591798,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683812769
    },
    {
        "content": "<p>Ah yes, it is choking on the fact that your lines start with <code>[fooo]</code> here most likely, did you set the oneline option?</p>",
        "id": 357592560,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683812920
    },
    {
        "content": "<p>I did, but it didn't put things into 1 line, I also found that weird <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 357593117,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813019
    },
    {
        "content": "<p>Hm, is that intentional or a bug? <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 357593210,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683813038
    },
    {
        "content": "<p>Regardless based on the trace I would say that the profiler is not accounting for ~12 seconds of processing time here which means that we need to add additional tracing points in the compiler to figure out what's wrong with your Lean file.</p>",
        "id": 357593501,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683813093
    },
    {
        "content": "<p>Can you send the entire file or a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I'll try to minimize and figure out what the compiler is missing out on profiling wise.</p>",
        "id": 357593756,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683813134
    },
    {
        "content": "<p>This is especially interesting because it is a theorem so unlike with most other example swhere we miss out on time we cannot blame it on the old code generator.</p>",
        "id": 357594373,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683813270
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357593210\">said</a>:</p>\n<blockquote>\n<p>Hm, is that intentional or a bug? <span class=\"user-mention silent\" data-user-id=\"110024\">Sebastian Ullrich</span></p>\n</blockquote>\n<p>It definitely makes a big difference (it makes it much more compact), but it's not literally one line</p>",
        "id": 357594543,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357593756\">said</a>:</p>\n<blockquote>\n<p>Can you send the entire file or a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I'll try to minimize and figure out what the compiler is missing out on profiling wise.</p>\n</blockquote>\n<p>cool, yeah glad to! it's <a href=\"https://github.com/bollu/ssa/blob/c4ec510ac6f11f36e9c586d04df56cde3c601658/SSA/Examples/InstCombinePeepholeRewrites.lean\">this file</a></p>",
        "id": 357594979,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813390
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357593501\">said</a>:</p>\n<blockquote>\n<p>Regardless based on the trace I would say that the profiler is not accounting for ~12 seconds of processing time here which means that we need to add additional tracing points in the compiler to figure out what's wrong with your Lean file.</p>\n</blockquote>\n<p>a hunch on those ~12s is that they might be meta code that's delaborating some custom syntax there. I tried with <code>precompileModules</code> but that didn't really fix it either</p>",
        "id": 357595467,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813483
    },
    {
        "content": "<p>but it's just a hunch, I don't know how you know that there's 12s missing <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 357595581,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813505
    },
    {
        "content": "<p>minimizing might be complicated because it's a performance question, I don't know exactly what to minimize</p>",
        "id": 357595787,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813552
    },
    {
        "content": "<p>as in, what do we want to keep constant when minimizing</p>",
        "id": 357595835,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683813567
    },
    {
        "content": "<p>Okay on my laptop with the <em>other</em> profiler we see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">08</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">43</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">195</span><span class=\"n\">ms</span>\n        <span class=\"kn\">import</span> <span class=\"mi\">422</span><span class=\"n\">ms</span>\n        <span class=\"n\">initialization</span> <span class=\"mi\">28</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">97</span><span class=\"n\">s</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">ms</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">simp</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">270</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">140</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>so the main issues here are your gigantic simp statement but even worse the type checking which i presume happens in the kernel? Since that is in C++ it would be rather hard to trace with the tracing facilities that we use to feed flametc. So I guess we have to put additional hooks into tactic elaboration which we can actually trace nicely and just duplicate the type checking tracer.</p>",
        "id": 357603913,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683814966
    },
    {
        "content": "<p>Oh and as to why it is slow, I would guess it is slow because the term you are trying to type check is probably absolutely gigantic :D</p>",
        "id": 357606979,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683815518
    },
    {
        "content": "<p>thanks for the insight! should give us something to think about our (life?) choices there <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I guess going back to the question about FlameTC, it's because of the <code>oneline</code> thing?</p>",
        "id": 357611274,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683816312
    },
    {
        "content": "<p>Yes I think the parser is getting confused by the things that start with <code>[...]</code> I did not design it to operate properly against non valid input :D</p>",
        "id": 357613160,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683816662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357613160\">said</a>:</p>\n<blockquote>\n<p>Yes I think the parser is getting confused by the things that start with <code>[...]</code> I did not design it to operate properly against non valid input :D</p>\n</blockquote>\n<p>why is it non-valid? am I doing something wrong, besides trying to prove theorems about nasty big terms with nasty big <code>simp</code>s of course <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ?</p>",
        "id": 357625794,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683818994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357603913\">said</a>:</p>\n<blockquote>\n<p>Okay on my laptop with the <em>other</em> profiler we see:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">cumulative</span> <span class=\"n\">profiling</span> <span class=\"n\">times</span><span class=\"o\">:</span>\n        <span class=\"kn\">attribute</span> <span class=\"n\">application</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">08</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"mi\">22</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n        <span class=\"n\">compilation</span> <span class=\"n\">new</span> <span class=\"mi\">43</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"n\">ms</span>\n        <span class=\"n\">elaboration</span> <span class=\"mi\">195</span><span class=\"n\">ms</span>\n        <span class=\"kn\">import</span> <span class=\"mi\">422</span><span class=\"n\">ms</span>\n        <span class=\"n\">initialization</span> <span class=\"mi\">28</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">interpretation</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">97</span><span class=\"n\">s</span>\n        <span class=\"n\">linting</span> <span class=\"mi\">25</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">ms</span>\n        <span class=\"n\">parsing</span> <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"n\">ms</span>\n        <span class=\"n\">simp</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n        <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"mi\">270</span><span class=\"n\">ms</span>\n        <span class=\"n\">type</span> <span class=\"n\">checking</span> <span class=\"mi\">19</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"n\">s</span>\n        <span class=\"n\">typeclass</span> <span class=\"n\">inference</span> <span class=\"mi\">140</span><span class=\"n\">ms</span>\n</code></pre></div>\n<p>so the main issues here are your gigantic simp statement but even worse the type checking which i presume happens in the kernel? Since that is in C++ it would be rather hard to trace with the tracing facilities that we use to feed flametc. So I guess we have to put additional hooks into tactic elaboration which we can actually trace nicely and just duplicate the type checking tracer.</p>\n</blockquote>\n<p><del>An interesting thing is that if I <code>set_option pp.all true</code> and copy-paste what <code>#print</code> gives me for the theorem's term (i.e. avoid the delaboration and all that), then typechecking is much, much faster</del>:</p>\n<div class=\"codehilite\" data-code-language=\"Text output\"><pre><span></span><code><span class=\"go\">cumulative profiling times:</span>\n<span class=\"go\">    attribute application 0.00187ms</span>\n<span class=\"go\">    compilation 3.33ms</span>\n<span class=\"go\">    compilation new 0.514ms</span>\n<span class=\"go\">    elaboration 4.08s</span>\n<span class=\"go\">    import 396ms</span>\n<span class=\"go\">    initialization 22.1ms</span>\n<span class=\"go\">    interpretation 1.17s</span>\n<span class=\"go\">    linting 0.133ms</span>\n<span class=\"go\">    parsing 14.1s</span>\n<span class=\"go\">    type checking 1.3ms</span>\n<span class=\"go\">    typeclass inference 3.19s</span>\n</code></pre></div>\n<p><del>Of course we pay a big price with parsing the huge terms (expectedly), but it does mean that somewhere we're doing an unnecessarily large number of calls to the kernel</del></p>",
        "id": 357626449,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683819130
    },
    {
        "content": "<p>Oh, nevermind, I somehow missed 100s of error messages above that saying that Lean couldn't figure out what that was</p>",
        "id": 357628085,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683819435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"315434\">Andrés Goens</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357625794\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"395550\">Henrik Böving</span> <a href=\"#narrow/stream/270676-lean4/topic/Introducing.20FlameTC/near/357613160\">said</a>:</p>\n<blockquote>\n<p>Yes I think the parser is getting confused by the things that start with <code>[...]</code> I did not design it to operate properly against non valid input :D</p>\n</blockquote>\n<p>why is it non-valid? am I doing something wrong, besides trying to prove theorems about nasty big terms with nasty big <code>simp</code>s of course <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ?</p>\n</blockquote>\n<p>Well basically it expects lines that start with [....] To be trace lines with a time attached and so on. But obviously that is not the case</p>",
        "id": 357628177,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683819459
    },
    {
        "content": "<p>oh, never mind, I was too happy about the numbers to notice the 100s of messages above them telling me it failed <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 357630447,
        "sender_full_name": "Andrés Goens",
        "timestamp": 1683819912
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean4/pull/2211\">https://github.com/leanprover/lean4/pull/2211</a></p>",
        "id": 357663726,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683827727
    },
    {
        "content": "<p><code>pp.oneline</code> only affects the direct pretty printer output, not the combined <code>Message</code>. When it is set, we might want a different <code>Elab.step</code> output in any case as seeing only the expected type is not that informative</p>",
        "id": 357679499,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683832642
    },
    {
        "content": "<p>But also FlameTC should probably ignore lines that are not of the format <code>[trace.class] [1.2345s] ...</code></p>",
        "id": 357679739,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683832726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315434\">@Andrés Goens</span> I fixed the parsing (again!) and it is now fully capable of processing your file, although as predicted you won't see much with a current Lean release^^</p>",
        "id": 357690821,
        "sender_full_name": "Henrik Böving",
        "timestamp": 1683836397
    }
]