[
    {
        "content": "<p>How are the case names generated by <code>cong!</code>? Is there a way to set them? I get things like <code>case a.h.e'_4</code>.</p>",
        "id": 367798772,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687236787
    },
    {
        "content": "<p>does <code>congr! with a b c</code> work?</p>",
        "id": 367798801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687236815
    },
    {
        "content": "<p>I don't think there is anything to assign to the <code>a b c</code> here.</p>",
        "id": 367799149,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687236971
    },
    {
        "content": "<p>Trying it anyway makes the name longer.</p>",
        "id": 367799197,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237004
    },
    {
        "content": "<p>In this case it is a <code>congr! 1</code> to be more exact.</p>",
        "id": 367799261,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237041
    },
    {
        "content": "<p>It is difficult to say without a MWE</p>",
        "id": 367799381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237103
    },
    {
        "content": "<p>what is the goal?</p>",
        "id": 367799385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237109
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">D</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">Interpretation</span> <span class=\"n\">D</span>\n<span class=\"n\">V'</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">vt</span><span class=\"o\">:</span> <span class=\"n\">VarName</span>\n<span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">PredName</span>\n<span class=\"n\">xs</span><span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">VarName</span>\n<span class=\"n\">V</span><span class=\"o\">:</span> <span class=\"n\">VarAssignment</span> <span class=\"n\">D</span>\n<span class=\"n\">binders</span><span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">VarName</span>\n<span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">VarName</span><span class=\"o\">),</span> <span class=\"bp\">¬</span><span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">binders</span> <span class=\"bp\">→</span> <span class=\"n\">V'</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"n\">v</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">xs</span> <span class=\"bp\">→</span> <span class=\"bp\">¬</span><span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">binders</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">Interpretation.pred_const_</span> <span class=\"n\">I</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"n\">Function.updateIte</span> <span class=\"n\">V</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">V'</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">xs</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">Interpretation.pred_const_</span> <span class=\"n\">I</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"n\">x</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"n\">t</span> <span class=\"k\">else</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">xs</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 367799523,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237197
    },
    {
        "content": "<p>I would not expect <code>congr! 1</code> to introduce any new names here</p>",
        "id": 367800799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237736
    },
    {
        "content": "<p>Oh you mean the subgoals?</p>",
        "id": 367800837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237748
    },
    {
        "content": "<p>yeah</p>",
        "id": 367800858,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237761
    },
    {
        "content": "<p>Mathlib tactics don't try very hard to give the subgoals meaningful names. You should just use <code>\\.</code> or <code>next a b c =&gt;</code> for each subgoal</p>",
        "id": 367800908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237788
    },
    {
        "content": "<p><code>next a b c</code>?</p>",
        "id": 367800995,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237813
    },
    {
        "content": "<p>that is essentially a combination of <code>\\.</code> and <code>rename_i</code>, it focuses a case and names the variables introduced in that case</p>",
        "id": 367801079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237859
    },
    {
        "content": "<p>in this case there probably aren't any</p>",
        "id": 367801104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237868
    },
    {
        "content": "<p>Cool. That makes it easier. Thank you.</p>",
        "id": 367801147,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237887
    },
    {
        "content": "<p><code>next a b c =&gt; ...</code> is also equivalent to <code>case _ a b c =&gt; ...</code>, where <code>case foo a b c =&gt; ...</code> selects the case named <code>foo</code> and <code>case _</code> just selects the next case</p>",
        "id": 367801255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1687237928
    },
    {
        "content": "<p>Oh, I didn't know you could do <code>_</code>.</p>",
        "id": 367801302,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687237959
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 367801816,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1687238186
    }
]