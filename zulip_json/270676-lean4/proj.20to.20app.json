[
    {
        "content": "<p>Is there a function that can convert <code>Expr.proj</code> to the equivalent <code>Expr.app</code>?</p>\n<p>For example <code>.proj </code>Prod 0 x<code> is </code>x.0<code>, and I want to transform it to the equivalent </code>Prod.fst x`</p>\n<p>The documentation says</p>\n<blockquote>\n<p>When exporting Lean developments to other systems, <code>proj</code> can be replaced with <code>typeName</code>.<code>rec</code><br>\n  applications.<br>\nbut how can this be done since <code>Prod.rec</code> relies on the motive?</p>\n</blockquote>",
        "id": 404982176,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701306939
    },
    {
        "content": "<p>I think you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getStructureFields#doc\">docs#Lean.getStructureFields</a> to get the field names, and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getFieldInfo%3F#doc\">docs#Lean.getFieldInfo?</a> to get a structure that contains the <code>projFn</code> field.</p>\n<p>It looks like there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkProjection#doc\">docs#Lean.Meta.mkProjection</a>, to create the <code>Expr.app</code>. It can also handle field names that are subfields (fields from a structure it extends)</p>",
        "id": 404990035,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1701310228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/proj.20to.20app/near/404990035\">said</a>:</p>\n<blockquote>\n<p>I think you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getStructureFields#doc\">docs#Lean.getStructureFields</a> to get the field names, and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getFieldInfo%3F#doc\">docs#Lean.getFieldInfo?</a> to get a structure that contains the <code>projFn</code> field.</p>\n<p>It looks like there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkProjection#doc\">docs#Lean.Meta.mkProjection</a>, to create the <code>Expr.app</code>. It can also handle field names that are subfields (fields from a structure it extends)</p>\n</blockquote>\n<p>is there a way to get the list of all structures for this?</p>",
        "id": 405052797,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701328721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 405932273,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701732704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/.E2.9C.94.20proj.20to.20app/near/404990035\">said</a>:</p>\n<blockquote>\n<p>I think you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getStructureFields#doc\">docs#Lean.getStructureFields</a> to get the field names, and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getFieldInfo%3F#doc\">docs#Lean.getFieldInfo?</a> to get a structure that contains the <code>projFn</code> field.</p>\n<p>It looks like there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkProjection#doc\">docs#Lean.Meta.mkProjection</a>, to create the <code>Expr.app</code>. It can also handle field names that are subfields (fields from a structure it extends)</p>\n</blockquote>\n<p>I tried using this function and I found this symbol that causes it to crash: <code>ULift.down</code>. The value of this function is <code>fun α self =&gt; self.1</code>, which seems to be ok on the surface. However when I invoke <code>Meta.mkProjection</code> on the operand <code>self.1</code>, I get</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">unexpected</span> <span class=\"n\">bound</span> <span class=\"kd\">variable</span> <span class=\"bp\">#</span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>The full example is here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span>\n<span class=\"n\">partial</span> <span class=\"kd\">def</span> <span class=\"n\">serialize_expression_ast</span> <span class=\"o\">(</span><span class=\"n\">expr</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"n\">self</span> <span class=\"n\">expr</span>\n  <span class=\"n\">where</span>\n  <span class=\"n\">self</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">:</span> <span class=\"n\">Expr</span><span class=\"o\">):</span> <span class=\"n\">MetaM</span> <span class=\"n\">String</span> <span class=\"o\">:=</span>\n    <span class=\"k\">match</span> <span class=\"n\">e</span> <span class=\"k\">with</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">bvar</span> <span class=\"n\">deBruijnIndex</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{deBruijnIndex}\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">fvar</span> <span class=\"n\">fvarId</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">fvarId.name.toString</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:fv {name})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mvar</span> <span class=\"n\">mvarId</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"k\">let</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">mvarId.name.toString</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:mv {name})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:sort)\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">const</span> <span class=\"n\">declName</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- The universe level of the const expression is elided since it should be</span>\n      <span class=\"c1\">-- inferrable from surrounding expression</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:c {declName})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">fn'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">e.getAppFn</span>\n      <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">e.getAppArgs.mapM</span> <span class=\"n\">self</span><span class=\"o\">)</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">toList</span>\n      <span class=\"k\">let</span> <span class=\"n\">args</span> <span class=\"o\">:=</span> <span class=\"s2\">\" \"</span><span class=\"bp\">.</span><span class=\"n\">intercalate</span> <span class=\"n\">args</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"({fn'} {args})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lam</span> <span class=\"n\">binderName</span> <span class=\"n\">binderType</span> <span class=\"n\">body</span> <span class=\"n\">binderInfo</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderName'</span> <span class=\"o\">:=</span> <span class=\"n\">binderName.toString</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderType'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">binderType</span>\n      <span class=\"k\">let</span> <span class=\"n\">body'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">body</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderInfo'</span> <span class=\"o\">:=</span> <span class=\"n\">binder_info_to_ast</span> <span class=\"n\">binderInfo</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:lambda {binderName'} {binderType'} {body'}{binderInfo'})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">forallE</span> <span class=\"n\">binderName</span> <span class=\"n\">binderType</span> <span class=\"n\">body</span> <span class=\"n\">binderInfo</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderName'</span> <span class=\"o\">:=</span> <span class=\"n\">binderName.toString</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderType'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">binderType</span>\n      <span class=\"k\">let</span> <span class=\"n\">body'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">body</span>\n      <span class=\"k\">let</span> <span class=\"n\">binderInfo'</span> <span class=\"o\">:=</span> <span class=\"n\">binder_info_to_ast</span> <span class=\"n\">binderInfo</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:forall {binderName'} {binderType'} {body'}{binderInfo'})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">letE</span> <span class=\"n\">name</span> <span class=\"n\">type</span> <span class=\"n\">value</span> <span class=\"n\">body</span> <span class=\"n\">_</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"c1\">-- Dependent boolean flag diacarded</span>\n      <span class=\"k\">let</span> <span class=\"n\">name'</span> <span class=\"o\">:=</span> <span class=\"n\">name.toString</span>\n      <span class=\"k\">let</span> <span class=\"n\">type'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">type</span>\n      <span class=\"k\">let</span> <span class=\"n\">value'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">value</span>\n      <span class=\"k\">let</span> <span class=\"n\">body'</span> <span class=\"bp\">←</span> <span class=\"n\">self</span> <span class=\"n\">body</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:let {name'} {type'} {value'} {body'})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">lit</span> <span class=\"n\">v</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- To not burden the downstream parser who needs to handle this, the literal</span>\n      <span class=\"c1\">-- is wrapped in a :lit sexp.</span>\n      <span class=\"k\">let</span> <span class=\"n\">v'</span> <span class=\"o\">:=</span> <span class=\"k\">match</span> <span class=\"n\">v</span> <span class=\"k\">with</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">natVal</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">toString</span> <span class=\"n\">val</span>\n        <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">strVal</span> <span class=\"n\">val</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"</span><span class=\"se\">\\\"</span><span class=\"s2\">{val}</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span>\n      <span class=\"n\">pure</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"(:lit {v'})\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">mdata</span> <span class=\"n\">_</span> <span class=\"n\">inner</span> <span class=\"bp\">=&gt;</span>\n      <span class=\"c1\">-- NOTE: Equivalent to expr itself, but mdata influences the prettyprinter</span>\n      <span class=\"c1\">-- It may become necessary to incorporate the metadata.</span>\n      <span class=\"n\">self</span> <span class=\"n\">inner</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">typeName</span> <span class=\"n\">idx</span> <span class=\"n\">inner</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n      <span class=\"k\">let</span> <span class=\"n\">fieldName</span> <span class=\"o\">:=</span> <span class=\"n\">getStructureFields</span> <span class=\"n\">env</span> <span class=\"n\">typeName</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">idx</span>\n      <span class=\"k\">let</span> <span class=\"n\">inner</span> <span class=\"bp\">←</span> <span class=\"n\">Meta.mkProjection</span> <span class=\"n\">inner</span> <span class=\"n\">fieldName</span>\n      <span class=\"n\">assert</span><span class=\"bp\">!</span> <span class=\"bp\">!</span><span class=\"n\">inner.isProj</span>\n      <span class=\"n\">self</span> <span class=\"n\">inner</span>\n  <span class=\"c1\">-- Elides all unhygenic names</span>\n  <span class=\"n\">binder_info_to_ast</span> <span class=\"o\">:</span> <span class=\"n\">Lean.BinderInfo</span> <span class=\"bp\">→</span> <span class=\"n\">String</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">default</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\"\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\" :implicit\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">strictImplicit</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\" :strictImplicit\"</span>\n    <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">instImplicit</span> <span class=\"bp\">=&gt;</span> <span class=\"s2\">\" :instImplicit\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">metaM</span><span class=\"o\">:</span> <span class=\"n\">MetaM</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n  <span class=\"k\">let</span> <span class=\"n\">symbol</span> <span class=\"o\">:=</span> <span class=\"s2\">\"ULift.down\"</span><span class=\"bp\">.</span><span class=\"n\">toName</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Finding symbol\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">info</span> <span class=\"o\">:=</span> <span class=\"n\">env.find</span><span class=\"bp\">?</span> <span class=\"n\">symbol</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Finding value\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">info.value</span><span class=\"bp\">?</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n  <span class=\"n\">IO.println</span> <span class=\"s2\">\"Printing\"</span>\n  <span class=\"k\">let</span> <span class=\"n\">expr</span> <span class=\"o\">:=</span> <span class=\"n\">toString</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">serialize_expression_ast</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n  <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{expr}\"</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">main</span> <span class=\"o\">:</span> <span class=\"n\">IO</span> <span class=\"n\">Unit</span> <span class=\"o\">:=</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">env</span><span class=\"o\">:</span> <span class=\"n\">Environment</span> <span class=\"bp\">←</span> <span class=\"n\">importModules</span>\n    <span class=\"o\">(</span><span class=\"n\">imports</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"s2\">\"Init\"</span><span class=\"o\">]</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">str</span> <span class=\"bp\">=&gt;</span> <span class=\"o\">{</span> <span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">str.toName</span><span class=\"o\">,</span> <span class=\"n\">runtimeOnly</span> <span class=\"o\">:=</span> <span class=\"n\">false</span> <span class=\"o\">}))</span>\n    <span class=\"o\">(</span><span class=\"n\">opts</span> <span class=\"o\">:=</span> <span class=\"o\">{})</span>\n    <span class=\"o\">(</span><span class=\"n\">trustLevel</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreM</span> <span class=\"o\">:=</span> <span class=\"n\">Meta.MetaM.run'</span> <span class=\"n\">metaM</span>\n  <span class=\"k\">let</span> <span class=\"n\">coreContext</span><span class=\"o\">:</span> <span class=\"n\">Lean.Core.Context</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">currNamespace</span> <span class=\"o\">:=</span> <span class=\"s2\">\"PrintExpr\"</span><span class=\"bp\">.</span><span class=\"n\">toName</span><span class=\"o\">,</span>\n    <span class=\"n\">openDecls</span> <span class=\"o\">:=</span> <span class=\"o\">[],</span>     <span class=\"c1\">-- No 'open' directives needed</span>\n    <span class=\"n\">fileName</span> <span class=\"o\">:=</span> <span class=\"s2\">\"&lt;stdin&gt;\"</span><span class=\"o\">,</span>\n    <span class=\"n\">fileMap</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">source</span> <span class=\"o\">:=</span> <span class=\"s2\">\"\"</span><span class=\"o\">,</span> <span class=\"n\">positions</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">],</span> <span class=\"n\">lines</span> <span class=\"o\">:=</span> <span class=\"bp\">#</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n    <span class=\"n\">options</span> <span class=\"o\">:=</span> <span class=\"n\">Lean.Options.empty</span>\n  <span class=\"o\">}</span>\n  <span class=\"k\">match</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">coreM.run'</span> <span class=\"n\">coreContext</span> <span class=\"o\">{</span> <span class=\"n\">env</span> <span class=\"o\">:=</span> <span class=\"n\">env</span> <span class=\"o\">})</span><span class=\"bp\">.</span><span class=\"n\">toBaseIO</span> <span class=\"k\">with</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">error</span> <span class=\"n\">exception</span> <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{← exception.toMessageData.toString}\"</span>\n  <span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">ok</span> <span class=\"n\">_</span>            <span class=\"bp\">=&gt;</span>\n    <span class=\"n\">IO.println</span> <span class=\"s2\">\"Finished\"</span>\n</code></pre></div>",
        "id": 406225594,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701838771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as unresolved.</p>",
        "id": 406225595,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701838772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as unresolved.</p>",
        "id": 406226232,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701839032
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as resolved.</p>",
        "id": 406226243,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701839041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"599027\">Leni Aniva</span> has marked this topic as unresolved.</p>",
        "id": 406227270,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701839738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/270676-lean4/topic/proj.20to.20app/near/404990035\">said</a>:</p>\n<blockquote>\n<p>I think you use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getStructureFields#doc\">docs#Lean.getStructureFields</a> to get the field names, and then use <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.getFieldInfo%3F#doc\">docs#Lean.getFieldInfo?</a> to get a structure that contains the <code>projFn</code> field.</p>\n<p>It looks like there's <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.Meta.mkProjection#doc\">docs#Lean.Meta.mkProjection</a>, to create the <code>Expr.app</code>. It can also handle field names that are subfields (fields from a structure it extends)</p>\n</blockquote>\n<p>Is there a function that doesn't require telescoping? <code>Meta.mkProjection</code> requires telescoping into the local context where the projection takes place. I feel like the projected type should be recoverable from the fields of <code>Expr.proj</code></p>\n<p>I'm currently using a structure like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">|</span> <span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">typeName</span> <span class=\"n\">idx</span> <span class=\"n\">inner</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n      <span class=\"k\">let</span> <span class=\"n\">env</span> <span class=\"bp\">←</span> <span class=\"n\">getEnv</span>\n      <span class=\"k\">let</span> <span class=\"n\">fieldName</span> <span class=\"o\">:=</span> <span class=\"n\">getStructureFields</span> <span class=\"n\">env</span> <span class=\"n\">typeName</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span> <span class=\"n\">idx</span>\n      <span class=\"k\">let</span> <span class=\"n\">projectorName</span> <span class=\"o\">:=</span> <span class=\"n\">getProjFnForField</span><span class=\"bp\">?</span> <span class=\"n\">env</span> <span class=\"n\">typeName</span> <span class=\"n\">fieldName</span> <span class=\"bp\">|&gt;.</span><span class=\"n\">get</span><span class=\"bp\">!</span>\n      <span class=\"k\">let</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">Expr.app</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">const</span>  <span class=\"n\">projectorName</span> <span class=\"o\">[])</span> <span class=\"n\">inner</span>\n      <span class=\"c1\">-- e is now a projection in `.app` form</span>\n</code></pre></div>",
        "id": 406227365,
        "sender_full_name": "Leni Aniva",
        "timestamp": 1701839790
    }
]