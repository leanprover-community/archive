[
    {
        "content": "<p>Before going to a specific question, I'll ask a general one: how unique are <code>FVarId</code>s is supposed to be? When can they be reused between different metavariables?</p>\n<ul>\n<li>Surely for syntactically equal types it's OK to reuse them (this happens constantly when doing small modifications to local contexts)</li>\n<li>Is it OK to reuse them for merely defeq types?</li>\n<li>Is it OK to reuse them when changing from an <code>ldecl</code> to a <code>cdecl</code> but keeping the type syntactically the same?</li>\n</ul>",
        "id": 343248058,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679356309
    },
    {
        "content": "<p>More specifically, I've noticed that <code>dsimp</code> reuses <code>FVarId</code>s when simplifying local hypotheses since it uses <code>Lean.MVarId.replaceLocalDeclDefEq</code>. One consequence is that the local instance cache isn't updated after <code>dsimp</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Elab</span> <span class=\"n\">Elab.Tactic</span> <span class=\"n\">Meta</span>\n\n<span class=\"n\">elab</span> <span class=\"n\">stx</span><span class=\"o\">:</span><span class=\"s2\">\"list_fvars\"</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"bp\">←</span> <span class=\"n\">getMainGoal</span>\n  <span class=\"k\">let</span> <span class=\"n\">lctx</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">←</span> <span class=\"n\">g.getDecl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lctx</span>\n  <span class=\"n\">logInfoAt</span> <span class=\"n\">stx</span> <span class=\"n\">s</span><span class=\"bp\">!</span><span class=\"s2\">\"{lctx.getFVarIds.map (·.name)}\"</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Inhabited</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"n\">list_fvars</span> <span class=\"c1\">-- #[_uniq.2120, _uniq.2121, _uniq.2122]</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">x</span>\n  <span class=\"n\">list_fvars</span> <span class=\"c1\">-- #[_uniq.2120, _uniq.2121, _uniq.2122]</span>\n  <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails (and `assumption` succeeds)</span>\n</code></pre></div>",
        "id": 343248064,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679356314
    },
    {
        "content": "<p>I'm also wondering if it's a concern that <code>Lean.MVarId.replaceLocalDeclDefEq</code> doesn't register any type hints, so <code>dsimp ... at</code> doesn't either (unlike <code>dsimp</code> on the goal).</p>",
        "id": 343248219,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679356391
    },
    {
        "content": "<p>(aside: you don't need the <code>stx:</code> in <code>list_fvars</code>, if you use <code>logInfo</code> then it highlights that same span)</p>",
        "id": 343249256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679357039
    },
    {
        "content": "<p>My inclination regarding the main question is to never reuse FVarIds ever. Local contexts should not be \"modified\", they should be extended / prefixed</p>",
        "id": 343250409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679357687
    },
    {
        "content": "<p>...actually changing the user name of a variable in the local context seems reasonable, but almost all other changes seem error prone</p>",
        "id": 343250679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679357863
    },
    {
        "content": "<p>changing an ldecl to a cdecl is not safe because it can change the results of defeq queries</p>",
        "id": 343250803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679357934
    },
    {
        "content": "<blockquote>\n<p>Is it OK to reuse them for merely defeq types?<br>\nIs it OK to reuse them when changing from an ldecl to a cdecl but keeping the type syntactically the same?</p>\n</blockquote>\n<p>I'm pretty sure both of these break all sorts of caches.  Turning an ldecl into a cdecl changes the WHNF.  Changing to another defeq type (at which transparency?) probably breaks defeq caches, and also TC caches.</p>",
        "id": 343250815,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679357941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/270676-lean4/topic/.60dsimp.20.2E.2E.2E.20at.60.20reusing.20FVarIds.2C.20instance.20cache.20not.20updated/near/343250679\">said</a>:</p>\n<blockquote>\n<p>...actually changing the user name of a variable in the local context seems reasonable, but almost all other changes seem error prone</p>\n</blockquote>\n<p>Changing the binder info should also be ok. (implicit &lt;-&gt; explicit)</p>",
        "id": 343250855,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679357971
    },
    {
        "content": "<p>what about auxDecl &lt;-&gt; not auxDecl?</p>",
        "id": 343250947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679358009
    },
    {
        "content": "<p>or impl detail</p>",
        "id": 343250961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679358020
    },
    {
        "content": "<p>Sounds possibly dangerous, but I don't think it breaks anything yet.</p>",
        "id": 343251034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679358064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60dsimp.20.2E.2E.2E.20at.60.20reusing.20FVarIds.2C.20instance.20cache.20not.20updated/near/343250815\">said</a>:</p>\n<blockquote>\n<p>Changing to another defeq type (at which transparency?) probably breaks defeq caches, and also TC caches.</p>\n</blockquote>\n<p>That suggests that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.replaceLocalDeclDefEq#doc\">docs4#Lean.MVarId.replaceLocalDeclDefEq</a> is broken then, right? This is what <code>dsimp ... at</code> is using to update local declarations.</p>\n<p>There's also <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.changeLocalDecl#doc\">docs4#Lean.MVarId.changeLocalDecl</a> that does <code>revert</code>/<code>intros</code> to change a local decl to something defeq, and it uses <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.replaceTargetDefEq#doc\">docs4#Lean.MVarId.replaceTargetDefEq</a> instead, which I think protects against transitivity of defeq failures. But one problem with it right now is that it doesn't help you link up FVars from before and after for unused variable linting purposes. (I'm under the impression that there's some way to put an <code>FVarSubst</code> into an infotree for this, but I haven't been able to find it yet.)</p>",
        "id": 343271285,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679372047
    },
    {
        "content": "<p>an example of a tactic that does the revert/intro dance with <code>FVarSubst</code> is <code>cases</code></p>",
        "id": 343272254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679372794
    },
    {
        "content": "<blockquote>\n<p>That suggests that <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.replaceLocalDeclDefEq#doc\">docs4#Lean.MVarId.replaceLocalDeclDefEq</a> is broken then, right? This is what <code>dsimp ... at</code> is using to update local declarations.</p>\n</blockquote>\n<p>Yeah, I'm not sure if whoever wrote that function realized the massive effect it would have on caching.</p>",
        "id": 343272266,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679372814
    },
    {
        "content": "<blockquote>\n<p>(I'm under the impression that there's some way to put an FVarSubst into an infotree for this, but I haven't been able to find it yet.)</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">pushInfoLeaf</span> <span class=\"o\">(</span><span class=\"bp\">.</span><span class=\"n\">ofFVarAliasInfo</span> <span class=\"o\">{</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">baseId</span><span class=\"o\">,</span> <span class=\"n\">userName</span> <span class=\"o\">})</span>\n</code></pre></div>",
        "id": 343272304,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679372855
    },
    {
        "content": "<p>actually a better example is <code>substCore</code></p>",
        "id": 343272429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679372950
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.changeLocalDecl#doc\">docs4#Lean.MVarId.changeLocalDecl</a>, which does revert/intro and is used in <code>delta</code>.</p>",
        "id": 343272475,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1679372985
    },
    {
        "content": "<p>from what I can tell from a grep though it seems like <code>ofFVarAliasInfo</code> is seriously underused compared to the number of tactics that need to revert/intro</p>",
        "id": 343272710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679373159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/270676-lean4/topic/.60dsimp.20.2E.2E.2E.20at.60.20reusing.20FVarIds.2C.20instance.20cache.20not.20updated/near/343272475\">said</a>:</p>\n<blockquote>\n<p>We also have <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Lean.MVarId.changeLocalDecl#doc\">docs4#Lean.MVarId.changeLocalDecl</a>, which does revert/intro and is used in <code>delta</code>.</p>\n</blockquote>\n<p>Yeah, it does revert/intro but it doesn't do anything with infotrees. I was using this for <code>change ... at</code> but it can lead to failing the unused variable linter.</p>",
        "id": 343272889,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1679373319
    },
    {
        "content": "<p>I thought that std4/mathlib4 was handling this a bit better, but <code>ofFVarAliasInfo</code> doesn't appear even once. <code>rcases</code> does need to use <code>FVarSubst</code> to avoid losing track of hypotheses which are revert/intro'd by earlier case-splits, but it does not put the final subst into the info tree</p>",
        "id": 343273121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1679373483
    }
]