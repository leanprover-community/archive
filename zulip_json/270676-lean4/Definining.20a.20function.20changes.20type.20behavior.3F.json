[
    {
        "content": "<p>Consider the following MWE:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Lean</span>\n<span class=\"kn\">import</span> <span class=\"n\">Std.Data.Array.Init.Lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">Mathlib.Tactic.Find</span>\n<span class=\"kn\">import</span> <span class=\"n\">Lean.Elab.Term</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">Lean</span> <span class=\"n\">Meta</span> <span class=\"n\">Elab</span> <span class=\"n\">Term</span> <span class=\"n\">Lean.Meta</span> <span class=\"n\">Tactic</span>\n<span class=\"kn\">open</span> <span class=\"n\">Mathlib.Tactic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">Array</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"n\">a.data</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lem</span> <span class=\"o\">:=</span>  <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">id</span>\n    <span class=\"o\">(</span><span class=\"n\">Eq.mp</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"n\">Array.pop</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:=</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">List.dropLast</span> <span class=\"n\">a.data</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.data_pop</span> <span class=\"n\">a</span><span class=\"o\">))))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">):=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">lem</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">β</span><span class=\"o\">):=</span> <span class=\"n\">funext</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:=</span> <span class=\"n\">Array</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"n\">a</span> <span class=\"bp\">=&gt;</span>\n  <span class=\"n\">id</span>\n    <span class=\"o\">(</span><span class=\"n\">Eq.mp</span> <span class=\"o\">(</span><span class=\"n\">congrFun</span> <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">Eq</span> <span class=\"o\">(</span><span class=\"n\">List.toArray_data</span> <span class=\"o\">(</span><span class=\"n\">Array.pop</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">:=</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">List.dropLast</span> <span class=\"n\">a.data</span><span class=\"o\">)))</span>\n      <span class=\"o\">(</span><span class=\"n\">congrArg</span> <span class=\"n\">List.toArray</span> <span class=\"o\">(</span><span class=\"n\">Array.data_pop</span> <span class=\"n\">a</span><span class=\"o\">))))</span>\n</code></pre></div>\n<p><code>bar</code> type checks fine, but <code>foo</code> doesn't despite the fact that <code>lem</code> is just defined as the same expression used in foo.</p>\n<p>The error I get is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">application</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span>\n  <span class=\"bp\">@</span><span class=\"n\">Array.pop</span> <span class=\"n\">α</span>\n<span class=\"n\">argument</span>\n  <span class=\"n\">α</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Array</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.178</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"n\">u.230</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">u.230</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Which makes me think it is somehow universe related?  Is there any way to make the raw <code>fun</code> work here the same as the defined <code>lem</code>?</p>",
        "id": 356559497,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683501599
    },
    {
        "content": "<p>The error message should make you suspicious: <code>α</code> should probably not be an <code>Array</code>. When an identifier like <code>lem</code> is of implicit function type, it is eligible for implicit parameter insertion, i.e. the last <code>lem</code> is short for <code>@lem (Array β)</code>. This is not the case when directly using a lambda.</p>",
        "id": 356662422,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683542946
    },
    {
        "content": "<p>Is there a way to fill implicit parameters of a lambda?</p>",
        "id": 356749212,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683560631
    },
    {
        "content": "<p>This feels like <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, but I suppose you can let-bind it</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">List.map</span> <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 356757656,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1683562642
    },
    {
        "content": "<p>Thanks Sebastian, I suppose it is a bit <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>, as I really want to do it to an <code>Expr</code> in the <code>MetaM</code> monad, but this gives me enough info to do that.</p>",
        "id": 356758787,
        "sender_full_name": "Jeremy Salwen",
        "timestamp": 1683562945
    }
]