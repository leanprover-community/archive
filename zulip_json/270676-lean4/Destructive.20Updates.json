[
    {
        "content": "<p>Hi there! Is the following code linear? The comment above <code>setD</code> says that the update is done destructively if the reference counter is one, but I am having some trouble to understand if this is the case here or not... thanks!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">invertPermutation</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">MetaM</span> <span class=\"o\">(</span><span class=\"n\">List</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"n\">p.length</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">answer</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">List.replicate</span> <span class=\"n\">size</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span> <span class=\"o\">:</span> <span class=\"n\">size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">answer.setD</span> <span class=\"o\">(</span><span class=\"n\">p.get</span><span class=\"bp\">!</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">answer.toList</span>\n</code></pre></div>",
        "id": 391056287,
        "sender_full_name": "Tomaz Gomes",
        "timestamp": 1694744138
    },
    {
        "content": "<p>Based on my (so far preliminary) understanding of the system: yes, it should be!</p>",
        "id": 391088855,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694758611
    },
    {
        "content": "<p>I wonder if there is a way to assert that inside the code, so that one wouldn't have to guess.<br>\nMaybe a <code>throwIfNotExclusive</code> function?<br>\nOr a <code>getStableName</code> and <code>throwIfStableNamesDiffer</code> to check that <code>answer</code> points to the same location in memory throughout.<br>\n<span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span> , have you had any thoughts in that directions?</p>",
        "id": 391089344,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1694758842
    },
    {
        "content": "<p>You can also use <code>dbgTraceIfShared</code> for debugging:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">invertPermutation</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"n\">p.length</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">answer</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">List.replicate</span> <span class=\"n\">size</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span> <span class=\"o\">:</span> <span class=\"n\">size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"answer\"</span> <span class=\"n\">answer</span>\n    <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">answer.setD</span> <span class=\"o\">(</span><span class=\"n\">p.get</span><span class=\"bp\">!</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">answer.toList</span>\n\n<span class=\"c1\">-- [0, 0, 1]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">invertPermutation</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">invertPermutation2</span> <span class=\"o\">:</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">List</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"k\">fun</span> <span class=\"n\">p</span> <span class=\"bp\">=&gt;</span> <span class=\"n\">Id.run</span> <span class=\"k\">do</span>\n  <span class=\"k\">let</span> <span class=\"n\">size</span> <span class=\"o\">:=</span> <span class=\"n\">p.length</span>\n  <span class=\"k\">let</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">p</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">mut</span> <span class=\"n\">answer</span><span class=\"o\">:</span> <span class=\"n\">Array</span> <span class=\"n\">Nat</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">List.replicate</span> <span class=\"n\">size</span> <span class=\"mi\">0</span><span class=\"o\">⟩</span>\n  <span class=\"k\">let</span> <span class=\"n\">sharedAnswer</span> <span class=\"o\">:=</span> <span class=\"n\">answer</span>\n  <span class=\"n\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"o\">[</span> <span class=\"o\">:</span> <span class=\"n\">size</span><span class=\"o\">]</span> <span class=\"k\">do</span>\n    <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">dbgTraceIfShared</span> <span class=\"s2\">\"answer\"</span> <span class=\"n\">answer</span>\n    <span class=\"n\">answer</span> <span class=\"o\">:=</span> <span class=\"n\">answer.setD</span> <span class=\"o\">(</span><span class=\"n\">p.get</span><span class=\"bp\">!</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">i</span>\n  <span class=\"n\">return</span> <span class=\"n\">answer.toList</span> <span class=\"bp\">++</span> <span class=\"n\">sharedAnswer.toList</span>\n\n<span class=\"c1\">-- shared RC answer</span>\n<span class=\"c1\">-- [0, 0, 1, 0, 0, 0]</span>\n<span class=\"k\">#eval</span> <span class=\"n\">invertPermutation2</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 391095929,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1694761570
    }
]