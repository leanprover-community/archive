[
    {
        "content": "<p>Is the existence of a member of a finite set undecidable? This gives me <code>failed to synthesize instance Decidable (∃ n, n ∈ S)</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>\n<p>but this works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">Mathlib.Data.Finset.Basic</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">autoImplicit</span> <span class=\"n\">false</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 391258096,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694809958
    },
    {
        "content": "<p>You could put <code>True</code> in there</p>",
        "id": 391258345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694810007
    },
    {
        "content": "<p>I guess there is no instance for this</p>",
        "id": 391258443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694810022
    },
    {
        "content": "<p><code>True</code> gives the same error.</p>",
        "id": 391258717,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810066
    },
    {
        "content": "<p>What is the simplest way to make an instance of it?</p>",
        "id": 391258960,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810104
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">True</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 391259001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694810118
    },
    {
        "content": "<p>oh, I thought you meant change <code>true</code> to <code>True</code>.</p>",
        "id": 391259121,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810142
    },
    {
        "content": "<p>I think the meta-answer is that you're supposed to be using <a href=\"https://leanprover-community.github.io/mathlib4_docs/find/?pattern=Finset.Nonempty#doc\">docs#Finset.Nonempty</a></p>",
        "id": 391259389,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694810212
    },
    {
        "content": "<p>Channeling the docs:</p>\n<blockquote>\n<p>It should be used in theorem assumptions instead of <code>∃ x, x ∈ s</code></p>\n</blockquote>",
        "id": 391259439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694810252
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">Decidable</span> <span class=\"n\">S.Nonempty</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 391259441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1694810253
    },
    {
        "content": "<p>Shouldn't it be decidable if it is empty too?</p>",
        "id": 391259459,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810261
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">Finset</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">S.Nonempty</span> <span class=\"k\">then</span> <span class=\"n\">true</span> <span class=\"k\">else</span> <span class=\"n\">false</span>\n</code></pre></div>",
        "id": 391259507,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694810282
    },
    {
        "content": "<p>To the question mark, I don't understand why we need the additional hypothesis that the set is not empty for membership to be decidable.</p>",
        "id": 391259862,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810447
    },
    {
        "content": "<p>In the non mwe, it could be empty.</p>",
        "id": 391259923,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810484
    },
    {
        "content": "<p>Where do you think you are seeing that hypothesis?</p>",
        "id": 391259980,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694810513
    },
    {
        "content": "<p>Neither Mario nor I are suggesting you add <code>h : S.Nonempty</code></p>",
        "id": 391260067,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1694810545
    },
    {
        "content": "<p>Oh, oops, misread <code>instance {α} (S : Finset α) : Decidable (∃ a, a ∈ S) := inferInstanceAs (Decidable S.Nonempty)</code>.</p>",
        "id": 391260115,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810572
    },
    {
        "content": "<p>Sorry, thank you.</p>",
        "id": 391260144,
        "sender_full_name": "Kayla Thomas",
        "timestamp": 1694810591
    }
]